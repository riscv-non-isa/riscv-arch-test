
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6912:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xed56e9c6a326f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x026 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6ed56e9c6a326f; op2val:0x8000;
op3val:0x826fffffffffffe0; valaddr_reg:x3; val_offset:20736*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20736*0 + 3*0*FLEN/8, x4, x1, x2)

inst_6913:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xed56e9c6a326f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x026 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6ed56e9c6a326f; op2val:0x8000;
op3val:0x826ffffffffffff0; valaddr_reg:x3; val_offset:20739*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20739*0 + 3*1*FLEN/8, x4, x1, x2)

inst_6914:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xed56e9c6a326f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x026 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6ed56e9c6a326f; op2val:0x8000;
op3val:0x826ffffffffffff8; valaddr_reg:x3; val_offset:20742*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20742*0 + 3*2*FLEN/8, x4, x1, x2)

inst_6915:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xed56e9c6a326f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x026 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6ed56e9c6a326f; op2val:0x8000;
op3val:0x826ffffffffffffc; valaddr_reg:x3; val_offset:20745*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20745*0 + 3*3*FLEN/8, x4, x1, x2)

inst_6916:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xed56e9c6a326f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x026 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6ed56e9c6a326f; op2val:0x8000;
op3val:0x826ffffffffffffe; valaddr_reg:x3; val_offset:20748*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20748*0 + 3*4*FLEN/8, x4, x1, x2)

inst_6917:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xed56e9c6a326f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x026 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6ed56e9c6a326f; op2val:0x8000;
op3val:0x826fffffffffffff; valaddr_reg:x3; val_offset:20751*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20751*0 + 3*5*FLEN/8, x4, x1, x2)

inst_6918:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000000000000; valaddr_reg:x3; val_offset:20754*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20754*0 + 3*6*FLEN/8, x4, x1, x2)

inst_6919:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000000000001; valaddr_reg:x3; val_offset:20757*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20757*0 + 3*7*FLEN/8, x4, x1, x2)

inst_6920:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000000000003; valaddr_reg:x3; val_offset:20760*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20760*0 + 3*8*FLEN/8, x4, x1, x2)

inst_6921:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000000000007; valaddr_reg:x3; val_offset:20763*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20763*0 + 3*9*FLEN/8, x4, x1, x2)

inst_6922:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000000000000f; valaddr_reg:x3; val_offset:20766*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20766*0 + 3*10*FLEN/8, x4, x1, x2)

inst_6923:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000000000001f; valaddr_reg:x3; val_offset:20769*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20769*0 + 3*11*FLEN/8, x4, x1, x2)

inst_6924:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000000000003f; valaddr_reg:x3; val_offset:20772*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20772*0 + 3*12*FLEN/8, x4, x1, x2)

inst_6925:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000000000007f; valaddr_reg:x3; val_offset:20775*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20775*0 + 3*13*FLEN/8, x4, x1, x2)

inst_6926:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000000000000ff; valaddr_reg:x3; val_offset:20778*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20778*0 + 3*14*FLEN/8, x4, x1, x2)

inst_6927:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000000000001ff; valaddr_reg:x3; val_offset:20781*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20781*0 + 3*15*FLEN/8, x4, x1, x2)

inst_6928:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000000000003ff; valaddr_reg:x3; val_offset:20784*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20784*0 + 3*16*FLEN/8, x4, x1, x2)

inst_6929:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000000000007ff; valaddr_reg:x3; val_offset:20787*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20787*0 + 3*17*FLEN/8, x4, x1, x2)

inst_6930:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000000000fff; valaddr_reg:x3; val_offset:20790*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20790*0 + 3*18*FLEN/8, x4, x1, x2)

inst_6931:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000000001fff; valaddr_reg:x3; val_offset:20793*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20793*0 + 3*19*FLEN/8, x4, x1, x2)

inst_6932:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000000003fff; valaddr_reg:x3; val_offset:20796*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20796*0 + 3*20*FLEN/8, x4, x1, x2)

inst_6933:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000000007fff; valaddr_reg:x3; val_offset:20799*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20799*0 + 3*21*FLEN/8, x4, x1, x2)

inst_6934:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000000000ffff; valaddr_reg:x3; val_offset:20802*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20802*0 + 3*22*FLEN/8, x4, x1, x2)

inst_6935:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000000001ffff; valaddr_reg:x3; val_offset:20805*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20805*0 + 3*23*FLEN/8, x4, x1, x2)

inst_6936:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000000003ffff; valaddr_reg:x3; val_offset:20808*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20808*0 + 3*24*FLEN/8, x4, x1, x2)

inst_6937:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000000007ffff; valaddr_reg:x3; val_offset:20811*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20811*0 + 3*25*FLEN/8, x4, x1, x2)

inst_6938:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000000000fffff; valaddr_reg:x3; val_offset:20814*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20814*0 + 3*26*FLEN/8, x4, x1, x2)

inst_6939:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000000001fffff; valaddr_reg:x3; val_offset:20817*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20817*0 + 3*27*FLEN/8, x4, x1, x2)

inst_6940:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000000003fffff; valaddr_reg:x3; val_offset:20820*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20820*0 + 3*28*FLEN/8, x4, x1, x2)

inst_6941:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000000007fffff; valaddr_reg:x3; val_offset:20823*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20823*0 + 3*29*FLEN/8, x4, x1, x2)

inst_6942:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000000ffffff; valaddr_reg:x3; val_offset:20826*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20826*0 + 3*30*FLEN/8, x4, x1, x2)

inst_6943:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000001ffffff; valaddr_reg:x3; val_offset:20829*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20829*0 + 3*31*FLEN/8, x4, x1, x2)

inst_6944:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000003ffffff; valaddr_reg:x3; val_offset:20832*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20832*0 + 3*32*FLEN/8, x4, x1, x2)

inst_6945:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000007ffffff; valaddr_reg:x3; val_offset:20835*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20835*0 + 3*33*FLEN/8, x4, x1, x2)

inst_6946:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000000fffffff; valaddr_reg:x3; val_offset:20838*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20838*0 + 3*34*FLEN/8, x4, x1, x2)

inst_6947:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000001fffffff; valaddr_reg:x3; val_offset:20841*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20841*0 + 3*35*FLEN/8, x4, x1, x2)

inst_6948:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000003fffffff; valaddr_reg:x3; val_offset:20844*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20844*0 + 3*36*FLEN/8, x4, x1, x2)

inst_6949:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000007fffffff; valaddr_reg:x3; val_offset:20847*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20847*0 + 3*37*FLEN/8, x4, x1, x2)

inst_6950:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000000ffffffff; valaddr_reg:x3; val_offset:20850*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20850*0 + 3*38*FLEN/8, x4, x1, x2)

inst_6951:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000001ffffffff; valaddr_reg:x3; val_offset:20853*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20853*0 + 3*39*FLEN/8, x4, x1, x2)

inst_6952:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000003ffffffff; valaddr_reg:x3; val_offset:20856*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20856*0 + 3*40*FLEN/8, x4, x1, x2)

inst_6953:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000007ffffffff; valaddr_reg:x3; val_offset:20859*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20859*0 + 3*41*FLEN/8, x4, x1, x2)

inst_6954:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800000fffffffff; valaddr_reg:x3; val_offset:20862*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20862*0 + 3*42*FLEN/8, x4, x1, x2)

inst_6955:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800001fffffffff; valaddr_reg:x3; val_offset:20865*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20865*0 + 3*43*FLEN/8, x4, x1, x2)

inst_6956:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800003fffffffff; valaddr_reg:x3; val_offset:20868*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20868*0 + 3*44*FLEN/8, x4, x1, x2)

inst_6957:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800007fffffffff; valaddr_reg:x3; val_offset:20871*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20871*0 + 3*45*FLEN/8, x4, x1, x2)

inst_6958:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380000ffffffffff; valaddr_reg:x3; val_offset:20874*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20874*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6959:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380001ffffffffff; valaddr_reg:x3; val_offset:20877*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20877*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6960:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380003ffffffffff; valaddr_reg:x3; val_offset:20880*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20880*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6961:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380007ffffffffff; valaddr_reg:x3; val_offset:20883*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20883*0 + 3*49*FLEN/8, x4, x1, x2)

inst_6962:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38000fffffffffff; valaddr_reg:x3; val_offset:20886*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20886*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6963:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38001fffffffffff; valaddr_reg:x3; val_offset:20889*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20889*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6964:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38003fffffffffff; valaddr_reg:x3; val_offset:20892*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20892*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6965:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x38007fffffffffff; valaddr_reg:x3; val_offset:20895*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20895*0 + 3*53*FLEN/8, x4, x1, x2)

inst_6966:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3800ffffffffffff; valaddr_reg:x3; val_offset:20898*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20898*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6967:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3801ffffffffffff; valaddr_reg:x3; val_offset:20901*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20901*0 + 3*55*FLEN/8, x4, x1, x2)

inst_6968:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3803ffffffffffff; valaddr_reg:x3; val_offset:20904*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20904*0 + 3*56*FLEN/8, x4, x1, x2)

inst_6969:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3807ffffffffffff; valaddr_reg:x3; val_offset:20907*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20907*0 + 3*57*FLEN/8, x4, x1, x2)

inst_6970:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3808000000000000; valaddr_reg:x3; val_offset:20910*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20910*0 + 3*58*FLEN/8, x4, x1, x2)

inst_6971:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380c000000000000; valaddr_reg:x3; val_offset:20913*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20913*0 + 3*59*FLEN/8, x4, x1, x2)

inst_6972:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380e000000000000; valaddr_reg:x3; val_offset:20916*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20916*0 + 3*60*FLEN/8, x4, x1, x2)

inst_6973:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380f000000000000; valaddr_reg:x3; val_offset:20919*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20919*0 + 3*61*FLEN/8, x4, x1, x2)

inst_6974:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380f800000000000; valaddr_reg:x3; val_offset:20922*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20922*0 + 3*62*FLEN/8, x4, x1, x2)

inst_6975:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fc00000000000; valaddr_reg:x3; val_offset:20925*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20925*0 + 3*63*FLEN/8, x4, x1, x2)

inst_6976:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fe00000000000; valaddr_reg:x3; val_offset:20928*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20928*0 + 3*64*FLEN/8, x4, x1, x2)

inst_6977:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ff00000000000; valaddr_reg:x3; val_offset:20931*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20931*0 + 3*65*FLEN/8, x4, x1, x2)

inst_6978:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ff80000000000; valaddr_reg:x3; val_offset:20934*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20934*0 + 3*66*FLEN/8, x4, x1, x2)

inst_6979:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffc0000000000; valaddr_reg:x3; val_offset:20937*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20937*0 + 3*67*FLEN/8, x4, x1, x2)

inst_6980:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffe0000000000; valaddr_reg:x3; val_offset:20940*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20940*0 + 3*68*FLEN/8, x4, x1, x2)

inst_6981:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fff0000000000; valaddr_reg:x3; val_offset:20943*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20943*0 + 3*69*FLEN/8, x4, x1, x2)

inst_6982:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fff8000000000; valaddr_reg:x3; val_offset:20946*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20946*0 + 3*70*FLEN/8, x4, x1, x2)

inst_6983:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffc000000000; valaddr_reg:x3; val_offset:20949*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20949*0 + 3*71*FLEN/8, x4, x1, x2)

inst_6984:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffe000000000; valaddr_reg:x3; val_offset:20952*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20952*0 + 3*72*FLEN/8, x4, x1, x2)

inst_6985:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffff000000000; valaddr_reg:x3; val_offset:20955*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20955*0 + 3*73*FLEN/8, x4, x1, x2)

inst_6986:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffff800000000; valaddr_reg:x3; val_offset:20958*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20958*0 + 3*74*FLEN/8, x4, x1, x2)

inst_6987:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffc00000000; valaddr_reg:x3; val_offset:20961*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20961*0 + 3*75*FLEN/8, x4, x1, x2)

inst_6988:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffe00000000; valaddr_reg:x3; val_offset:20964*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20964*0 + 3*76*FLEN/8, x4, x1, x2)

inst_6989:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffff00000000; valaddr_reg:x3; val_offset:20967*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20967*0 + 3*77*FLEN/8, x4, x1, x2)

inst_6990:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffff80000000; valaddr_reg:x3; val_offset:20970*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20970*0 + 3*78*FLEN/8, x4, x1, x2)

inst_6991:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffc0000000; valaddr_reg:x3; val_offset:20973*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20973*0 + 3*79*FLEN/8, x4, x1, x2)

inst_6992:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffe0000000; valaddr_reg:x3; val_offset:20976*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20976*0 + 3*80*FLEN/8, x4, x1, x2)

inst_6993:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffff0000000; valaddr_reg:x3; val_offset:20979*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20979*0 + 3*81*FLEN/8, x4, x1, x2)

inst_6994:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffff8000000; valaddr_reg:x3; val_offset:20982*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20982*0 + 3*82*FLEN/8, x4, x1, x2)

inst_6995:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffc000000; valaddr_reg:x3; val_offset:20985*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20985*0 + 3*83*FLEN/8, x4, x1, x2)

inst_6996:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffe000000; valaddr_reg:x3; val_offset:20988*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20988*0 + 3*84*FLEN/8, x4, x1, x2)

inst_6997:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffff000000; valaddr_reg:x3; val_offset:20991*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20991*0 + 3*85*FLEN/8, x4, x1, x2)

inst_6998:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffff800000; valaddr_reg:x3; val_offset:20994*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20994*0 + 3*86*FLEN/8, x4, x1, x2)

inst_6999:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffc00000; valaddr_reg:x3; val_offset:20997*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 20997*0 + 3*87*FLEN/8, x4, x1, x2)

inst_7000:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffe00000; valaddr_reg:x3; val_offset:21000*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21000*0 + 3*88*FLEN/8, x4, x1, x2)

inst_7001:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffff00000; valaddr_reg:x3; val_offset:21003*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21003*0 + 3*89*FLEN/8, x4, x1, x2)

inst_7002:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffff80000; valaddr_reg:x3; val_offset:21006*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21006*0 + 3*90*FLEN/8, x4, x1, x2)

inst_7003:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffffc0000; valaddr_reg:x3; val_offset:21009*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21009*0 + 3*91*FLEN/8, x4, x1, x2)

inst_7004:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffffe0000; valaddr_reg:x3; val_offset:21012*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21012*0 + 3*92*FLEN/8, x4, x1, x2)

inst_7005:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffff0000; valaddr_reg:x3; val_offset:21015*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21015*0 + 3*93*FLEN/8, x4, x1, x2)

inst_7006:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffff8000; valaddr_reg:x3; val_offset:21018*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21018*0 + 3*94*FLEN/8, x4, x1, x2)

inst_7007:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffffc000; valaddr_reg:x3; val_offset:21021*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21021*0 + 3*95*FLEN/8, x4, x1, x2)

inst_7008:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffffe000; valaddr_reg:x3; val_offset:21024*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21024*0 + 3*96*FLEN/8, x4, x1, x2)

inst_7009:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffffff000; valaddr_reg:x3; val_offset:21027*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21027*0 + 3*97*FLEN/8, x4, x1, x2)

inst_7010:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffffff800; valaddr_reg:x3; val_offset:21030*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21030*0 + 3*98*FLEN/8, x4, x1, x2)

inst_7011:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffffffc00; valaddr_reg:x3; val_offset:21033*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21033*0 + 3*99*FLEN/8, x4, x1, x2)

inst_7012:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffffffe00; valaddr_reg:x3; val_offset:21036*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21036*0 + 3*100*FLEN/8, x4, x1, x2)

inst_7013:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffffff00; valaddr_reg:x3; val_offset:21039*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21039*0 + 3*101*FLEN/8, x4, x1, x2)

inst_7014:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffffff80; valaddr_reg:x3; val_offset:21042*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21042*0 + 3*102*FLEN/8, x4, x1, x2)

inst_7015:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffffffc0; valaddr_reg:x3; val_offset:21045*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21045*0 + 3*103*FLEN/8, x4, x1, x2)

inst_7016:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffffffe0; valaddr_reg:x3; val_offset:21048*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21048*0 + 3*104*FLEN/8, x4, x1, x2)

inst_7017:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffffffff0; valaddr_reg:x3; val_offset:21051*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21051*0 + 3*105*FLEN/8, x4, x1, x2)

inst_7018:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffffffff8; valaddr_reg:x3; val_offset:21054*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21054*0 + 3*106*FLEN/8, x4, x1, x2)

inst_7019:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffffffffc; valaddr_reg:x3; val_offset:21057*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21057*0 + 3*107*FLEN/8, x4, x1, x2)

inst_7020:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380ffffffffffffe; valaddr_reg:x3; val_offset:21060*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21060*0 + 3*108*FLEN/8, x4, x1, x2)

inst_7021:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x380 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x380fffffffffffff; valaddr_reg:x3; val_offset:21063*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21063*0 + 3*109*FLEN/8, x4, x1, x2)

inst_7022:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:21066*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21066*0 + 3*110*FLEN/8, x4, x1, x2)

inst_7023:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:21069*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21069*0 + 3*111*FLEN/8, x4, x1, x2)

inst_7024:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:21072*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21072*0 + 3*112*FLEN/8, x4, x1, x2)

inst_7025:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:21075*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21075*0 + 3*113*FLEN/8, x4, x1, x2)

inst_7026:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:21078*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21078*0 + 3*114*FLEN/8, x4, x1, x2)

inst_7027:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:21081*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21081*0 + 3*115*FLEN/8, x4, x1, x2)

inst_7028:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:21084*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21084*0 + 3*116*FLEN/8, x4, x1, x2)

inst_7029:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:21087*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21087*0 + 3*117*FLEN/8, x4, x1, x2)

inst_7030:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:21090*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21090*0 + 3*118*FLEN/8, x4, x1, x2)

inst_7031:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:21093*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21093*0 + 3*119*FLEN/8, x4, x1, x2)

inst_7032:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:21096*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21096*0 + 3*120*FLEN/8, x4, x1, x2)

inst_7033:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:21099*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21099*0 + 3*121*FLEN/8, x4, x1, x2)

inst_7034:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:21102*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21102*0 + 3*122*FLEN/8, x4, x1, x2)

inst_7035:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:21105*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21105*0 + 3*123*FLEN/8, x4, x1, x2)

inst_7036:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:21108*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21108*0 + 3*124*FLEN/8, x4, x1, x2)

inst_7037:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:21111*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21111*0 + 3*125*FLEN/8, x4, x1, x2)

inst_7038:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:21114*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21114*0 + 3*126*FLEN/8, x4, x1, x2)

inst_7039:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:21117*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21117*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_7040:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:21120*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21120*0 + 3*128*FLEN/8, x4, x1, x2)

inst_7041:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:21123*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21123*0 + 3*129*FLEN/8, x4, x1, x2)

inst_7042:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:21126*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21126*0 + 3*130*FLEN/8, x4, x1, x2)

inst_7043:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf40f4603b948f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x061cdb7472c03 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f40f4603b948f; op2val:0x207061cdb7472c03;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:21129*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21129*0 + 3*131*FLEN/8, x4, x1, x2)

inst_7044:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000000000000; valaddr_reg:x3; val_offset:21132*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21132*0 + 3*132*FLEN/8, x4, x1, x2)

inst_7045:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000000000001; valaddr_reg:x3; val_offset:21135*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21135*0 + 3*133*FLEN/8, x4, x1, x2)

inst_7046:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000000000003; valaddr_reg:x3; val_offset:21138*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21138*0 + 3*134*FLEN/8, x4, x1, x2)

inst_7047:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000000000007; valaddr_reg:x3; val_offset:21141*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21141*0 + 3*135*FLEN/8, x4, x1, x2)

inst_7048:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000000000000f; valaddr_reg:x3; val_offset:21144*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21144*0 + 3*136*FLEN/8, x4, x1, x2)

inst_7049:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000000000001f; valaddr_reg:x3; val_offset:21147*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21147*0 + 3*137*FLEN/8, x4, x1, x2)

inst_7050:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000000000003f; valaddr_reg:x3; val_offset:21150*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21150*0 + 3*138*FLEN/8, x4, x1, x2)

inst_7051:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000000000007f; valaddr_reg:x3; val_offset:21153*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21153*0 + 3*139*FLEN/8, x4, x1, x2)

inst_7052:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00000000000ff; valaddr_reg:x3; val_offset:21156*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21156*0 + 3*140*FLEN/8, x4, x1, x2)

inst_7053:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00000000001ff; valaddr_reg:x3; val_offset:21159*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21159*0 + 3*141*FLEN/8, x4, x1, x2)

inst_7054:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00000000003ff; valaddr_reg:x3; val_offset:21162*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21162*0 + 3*142*FLEN/8, x4, x1, x2)

inst_7055:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00000000007ff; valaddr_reg:x3; val_offset:21165*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21165*0 + 3*143*FLEN/8, x4, x1, x2)

inst_7056:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000000000fff; valaddr_reg:x3; val_offset:21168*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21168*0 + 3*144*FLEN/8, x4, x1, x2)

inst_7057:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000000001fff; valaddr_reg:x3; val_offset:21171*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21171*0 + 3*145*FLEN/8, x4, x1, x2)

inst_7058:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000000003fff; valaddr_reg:x3; val_offset:21174*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21174*0 + 3*146*FLEN/8, x4, x1, x2)

inst_7059:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000000007fff; valaddr_reg:x3; val_offset:21177*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21177*0 + 3*147*FLEN/8, x4, x1, x2)

inst_7060:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000000000ffff; valaddr_reg:x3; val_offset:21180*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21180*0 + 3*148*FLEN/8, x4, x1, x2)

inst_7061:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000000001ffff; valaddr_reg:x3; val_offset:21183*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21183*0 + 3*149*FLEN/8, x4, x1, x2)

inst_7062:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000000003ffff; valaddr_reg:x3; val_offset:21186*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21186*0 + 3*150*FLEN/8, x4, x1, x2)

inst_7063:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000000007ffff; valaddr_reg:x3; val_offset:21189*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21189*0 + 3*151*FLEN/8, x4, x1, x2)

inst_7064:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00000000fffff; valaddr_reg:x3; val_offset:21192*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21192*0 + 3*152*FLEN/8, x4, x1, x2)

inst_7065:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00000001fffff; valaddr_reg:x3; val_offset:21195*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21195*0 + 3*153*FLEN/8, x4, x1, x2)

inst_7066:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00000003fffff; valaddr_reg:x3; val_offset:21198*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21198*0 + 3*154*FLEN/8, x4, x1, x2)

inst_7067:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00000007fffff; valaddr_reg:x3; val_offset:21201*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21201*0 + 3*155*FLEN/8, x4, x1, x2)

inst_7068:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000000ffffff; valaddr_reg:x3; val_offset:21204*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21204*0 + 3*156*FLEN/8, x4, x1, x2)

inst_7069:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000001ffffff; valaddr_reg:x3; val_offset:21207*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21207*0 + 3*157*FLEN/8, x4, x1, x2)

inst_7070:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000003ffffff; valaddr_reg:x3; val_offset:21210*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21210*0 + 3*158*FLEN/8, x4, x1, x2)

inst_7071:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000007ffffff; valaddr_reg:x3; val_offset:21213*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21213*0 + 3*159*FLEN/8, x4, x1, x2)

inst_7072:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000000fffffff; valaddr_reg:x3; val_offset:21216*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21216*0 + 3*160*FLEN/8, x4, x1, x2)

inst_7073:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000001fffffff; valaddr_reg:x3; val_offset:21219*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21219*0 + 3*161*FLEN/8, x4, x1, x2)

inst_7074:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000003fffffff; valaddr_reg:x3; val_offset:21222*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21222*0 + 3*162*FLEN/8, x4, x1, x2)

inst_7075:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000007fffffff; valaddr_reg:x3; val_offset:21225*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21225*0 + 3*163*FLEN/8, x4, x1, x2)

inst_7076:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00000ffffffff; valaddr_reg:x3; val_offset:21228*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21228*0 + 3*164*FLEN/8, x4, x1, x2)

inst_7077:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00001ffffffff; valaddr_reg:x3; val_offset:21231*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21231*0 + 3*165*FLEN/8, x4, x1, x2)

inst_7078:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00003ffffffff; valaddr_reg:x3; val_offset:21234*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21234*0 + 3*166*FLEN/8, x4, x1, x2)

inst_7079:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00007ffffffff; valaddr_reg:x3; val_offset:21237*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21237*0 + 3*167*FLEN/8, x4, x1, x2)

inst_7080:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0000fffffffff; valaddr_reg:x3; val_offset:21240*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21240*0 + 3*168*FLEN/8, x4, x1, x2)

inst_7081:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0001fffffffff; valaddr_reg:x3; val_offset:21243*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21243*0 + 3*169*FLEN/8, x4, x1, x2)

inst_7082:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0003fffffffff; valaddr_reg:x3; val_offset:21246*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21246*0 + 3*170*FLEN/8, x4, x1, x2)

inst_7083:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0007fffffffff; valaddr_reg:x3; val_offset:21249*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21249*0 + 3*171*FLEN/8, x4, x1, x2)

inst_7084:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f000ffffffffff; valaddr_reg:x3; val_offset:21252*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21252*0 + 3*172*FLEN/8, x4, x1, x2)

inst_7085:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f001ffffffffff; valaddr_reg:x3; val_offset:21255*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21255*0 + 3*173*FLEN/8, x4, x1, x2)

inst_7086:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f003ffffffffff; valaddr_reg:x3; val_offset:21258*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21258*0 + 3*174*FLEN/8, x4, x1, x2)

inst_7087:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f007ffffffffff; valaddr_reg:x3; val_offset:21261*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21261*0 + 3*175*FLEN/8, x4, x1, x2)

inst_7088:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f00fffffffffff; valaddr_reg:x3; val_offset:21264*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21264*0 + 3*176*FLEN/8, x4, x1, x2)

inst_7089:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f01fffffffffff; valaddr_reg:x3; val_offset:21267*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21267*0 + 3*177*FLEN/8, x4, x1, x2)

inst_7090:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f03fffffffffff; valaddr_reg:x3; val_offset:21270*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21270*0 + 3*178*FLEN/8, x4, x1, x2)

inst_7091:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f07fffffffffff; valaddr_reg:x3; val_offset:21273*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21273*0 + 3*179*FLEN/8, x4, x1, x2)

inst_7092:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f0ffffffffffff; valaddr_reg:x3; val_offset:21276*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21276*0 + 3*180*FLEN/8, x4, x1, x2)

inst_7093:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f1ffffffffffff; valaddr_reg:x3; val_offset:21279*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21279*0 + 3*181*FLEN/8, x4, x1, x2)

inst_7094:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f3ffffffffffff; valaddr_reg:x3; val_offset:21282*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21282*0 + 3*182*FLEN/8, x4, x1, x2)

inst_7095:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f7ffffffffffff; valaddr_reg:x3; val_offset:21285*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21285*0 + 3*183*FLEN/8, x4, x1, x2)

inst_7096:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9f8000000000000; valaddr_reg:x3; val_offset:21288*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21288*0 + 3*184*FLEN/8, x4, x1, x2)

inst_7097:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fc000000000000; valaddr_reg:x3; val_offset:21291*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21291*0 + 3*185*FLEN/8, x4, x1, x2)

inst_7098:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fe000000000000; valaddr_reg:x3; val_offset:21294*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21294*0 + 3*186*FLEN/8, x4, x1, x2)

inst_7099:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ff000000000000; valaddr_reg:x3; val_offset:21297*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21297*0 + 3*187*FLEN/8, x4, x1, x2)

inst_7100:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ff800000000000; valaddr_reg:x3; val_offset:21300*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21300*0 + 3*188*FLEN/8, x4, x1, x2)

inst_7101:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffc00000000000; valaddr_reg:x3; val_offset:21303*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21303*0 + 3*189*FLEN/8, x4, x1, x2)

inst_7102:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffe00000000000; valaddr_reg:x3; val_offset:21306*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21306*0 + 3*190*FLEN/8, x4, x1, x2)

inst_7103:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fff00000000000; valaddr_reg:x3; val_offset:21309*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21309*0 + 3*191*FLEN/8, x4, x1, x2)

inst_7104:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fff80000000000; valaddr_reg:x3; val_offset:21312*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21312*0 + 3*192*FLEN/8, x4, x1, x2)

inst_7105:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffc0000000000; valaddr_reg:x3; val_offset:21315*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21315*0 + 3*193*FLEN/8, x4, x1, x2)

inst_7106:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffe0000000000; valaddr_reg:x3; val_offset:21318*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21318*0 + 3*194*FLEN/8, x4, x1, x2)

inst_7107:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffff0000000000; valaddr_reg:x3; val_offset:21321*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21321*0 + 3*195*FLEN/8, x4, x1, x2)

inst_7108:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffff8000000000; valaddr_reg:x3; val_offset:21324*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21324*0 + 3*196*FLEN/8, x4, x1, x2)

inst_7109:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffc000000000; valaddr_reg:x3; val_offset:21327*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21327*0 + 3*197*FLEN/8, x4, x1, x2)

inst_7110:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffe000000000; valaddr_reg:x3; val_offset:21330*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21330*0 + 3*198*FLEN/8, x4, x1, x2)

inst_7111:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffff000000000; valaddr_reg:x3; val_offset:21333*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21333*0 + 3*199*FLEN/8, x4, x1, x2)

inst_7112:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffff800000000; valaddr_reg:x3; val_offset:21336*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21336*0 + 3*200*FLEN/8, x4, x1, x2)

inst_7113:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffc00000000; valaddr_reg:x3; val_offset:21339*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21339*0 + 3*201*FLEN/8, x4, x1, x2)

inst_7114:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffe00000000; valaddr_reg:x3; val_offset:21342*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21342*0 + 3*202*FLEN/8, x4, x1, x2)

inst_7115:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffff00000000; valaddr_reg:x3; val_offset:21345*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21345*0 + 3*203*FLEN/8, x4, x1, x2)

inst_7116:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffff80000000; valaddr_reg:x3; val_offset:21348*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21348*0 + 3*204*FLEN/8, x4, x1, x2)

inst_7117:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffc0000000; valaddr_reg:x3; val_offset:21351*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21351*0 + 3*205*FLEN/8, x4, x1, x2)

inst_7118:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffe0000000; valaddr_reg:x3; val_offset:21354*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21354*0 + 3*206*FLEN/8, x4, x1, x2)

inst_7119:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffff0000000; valaddr_reg:x3; val_offset:21357*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21357*0 + 3*207*FLEN/8, x4, x1, x2)

inst_7120:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffff8000000; valaddr_reg:x3; val_offset:21360*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21360*0 + 3*208*FLEN/8, x4, x1, x2)

inst_7121:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffc000000; valaddr_reg:x3; val_offset:21363*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21363*0 + 3*209*FLEN/8, x4, x1, x2)

inst_7122:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffe000000; valaddr_reg:x3; val_offset:21366*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21366*0 + 3*210*FLEN/8, x4, x1, x2)

inst_7123:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffff000000; valaddr_reg:x3; val_offset:21369*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21369*0 + 3*211*FLEN/8, x4, x1, x2)

inst_7124:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffff800000; valaddr_reg:x3; val_offset:21372*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21372*0 + 3*212*FLEN/8, x4, x1, x2)

inst_7125:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffc00000; valaddr_reg:x3; val_offset:21375*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21375*0 + 3*213*FLEN/8, x4, x1, x2)

inst_7126:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffe00000; valaddr_reg:x3; val_offset:21378*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21378*0 + 3*214*FLEN/8, x4, x1, x2)

inst_7127:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffff00000; valaddr_reg:x3; val_offset:21381*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21381*0 + 3*215*FLEN/8, x4, x1, x2)

inst_7128:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffff80000; valaddr_reg:x3; val_offset:21384*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21384*0 + 3*216*FLEN/8, x4, x1, x2)

inst_7129:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffffc0000; valaddr_reg:x3; val_offset:21387*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21387*0 + 3*217*FLEN/8, x4, x1, x2)

inst_7130:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffffe0000; valaddr_reg:x3; val_offset:21390*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21390*0 + 3*218*FLEN/8, x4, x1, x2)

inst_7131:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffff0000; valaddr_reg:x3; val_offset:21393*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21393*0 + 3*219*FLEN/8, x4, x1, x2)

inst_7132:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffff8000; valaddr_reg:x3; val_offset:21396*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21396*0 + 3*220*FLEN/8, x4, x1, x2)

inst_7133:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffffc000; valaddr_reg:x3; val_offset:21399*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21399*0 + 3*221*FLEN/8, x4, x1, x2)

inst_7134:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffffe000; valaddr_reg:x3; val_offset:21402*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21402*0 + 3*222*FLEN/8, x4, x1, x2)

inst_7135:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffffff000; valaddr_reg:x3; val_offset:21405*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21405*0 + 3*223*FLEN/8, x4, x1, x2)

inst_7136:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffffff800; valaddr_reg:x3; val_offset:21408*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21408*0 + 3*224*FLEN/8, x4, x1, x2)

inst_7137:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffffffc00; valaddr_reg:x3; val_offset:21411*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21411*0 + 3*225*FLEN/8, x4, x1, x2)

inst_7138:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffffffe00; valaddr_reg:x3; val_offset:21414*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21414*0 + 3*226*FLEN/8, x4, x1, x2)

inst_7139:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffffff00; valaddr_reg:x3; val_offset:21417*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21417*0 + 3*227*FLEN/8, x4, x1, x2)

inst_7140:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffffff80; valaddr_reg:x3; val_offset:21420*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21420*0 + 3*228*FLEN/8, x4, x1, x2)

inst_7141:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffffffc0; valaddr_reg:x3; val_offset:21423*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21423*0 + 3*229*FLEN/8, x4, x1, x2)

inst_7142:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffffffe0; valaddr_reg:x3; val_offset:21426*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21426*0 + 3*230*FLEN/8, x4, x1, x2)

inst_7143:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffffffff0; valaddr_reg:x3; val_offset:21429*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21429*0 + 3*231*FLEN/8, x4, x1, x2)

inst_7144:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffffffff8; valaddr_reg:x3; val_offset:21432*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21432*0 + 3*232*FLEN/8, x4, x1, x2)

inst_7145:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffffffffc; valaddr_reg:x3; val_offset:21435*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21435*0 + 3*233*FLEN/8, x4, x1, x2)

inst_7146:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9fffffffffffffe; valaddr_reg:x3; val_offset:21438*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21438*0 + 3*234*FLEN/8, x4, x1, x2)

inst_7147:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x39f and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xb9ffffffffffffff; valaddr_reg:x3; val_offset:21441*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21441*0 + 3*235*FLEN/8, x4, x1, x2)

inst_7148:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:21444*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21444*0 + 3*236*FLEN/8, x4, x1, x2)

inst_7149:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:21447*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21447*0 + 3*237*FLEN/8, x4, x1, x2)

inst_7150:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:21450*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21450*0 + 3*238*FLEN/8, x4, x1, x2)

inst_7151:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:21453*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21453*0 + 3*239*FLEN/8, x4, x1, x2)

inst_7152:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:21456*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21456*0 + 3*240*FLEN/8, x4, x1, x2)

inst_7153:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:21459*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21459*0 + 3*241*FLEN/8, x4, x1, x2)

inst_7154:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:21462*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21462*0 + 3*242*FLEN/8, x4, x1, x2)

inst_7155:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:21465*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21465*0 + 3*243*FLEN/8, x4, x1, x2)

inst_7156:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:21468*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21468*0 + 3*244*FLEN/8, x4, x1, x2)

inst_7157:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:21471*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21471*0 + 3*245*FLEN/8, x4, x1, x2)

inst_7158:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:21474*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21474*0 + 3*246*FLEN/8, x4, x1, x2)

inst_7159:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:21477*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21477*0 + 3*247*FLEN/8, x4, x1, x2)

inst_7160:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:21480*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21480*0 + 3*248*FLEN/8, x4, x1, x2)

inst_7161:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:21483*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21483*0 + 3*249*FLEN/8, x4, x1, x2)

inst_7162:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:21486*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21486*0 + 3*250*FLEN/8, x4, x1, x2)

inst_7163:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:21489*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21489*0 + 3*251*FLEN/8, x4, x1, x2)

inst_7164:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:21492*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21492*0 + 3*252*FLEN/8, x4, x1, x2)

inst_7165:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:21495*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21495*0 + 3*253*FLEN/8, x4, x1, x2)

inst_7166:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:21498*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21498*0 + 3*254*FLEN/8, x4, x1, x2)

inst_7167:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:21501*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21501*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_7168:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:21504*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21504*0 + 3*256*FLEN/8, x4, x1, x2)

inst_7169:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x05a01603d36b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f4fdc18a0c20f; op2val:0xa0005a01603d36b9;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:21507*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21507*0 + 3*257*FLEN/8, x4, x1, x2)

inst_7170:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:21510*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21510*0 + 3*258*FLEN/8, x4, x1, x2)

inst_7171:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:21513*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21513*0 + 3*259*FLEN/8, x4, x1, x2)

inst_7172:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:21516*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21516*0 + 3*260*FLEN/8, x4, x1, x2)

inst_7173:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:21519*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21519*0 + 3*261*FLEN/8, x4, x1, x2)

inst_7174:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:21522*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21522*0 + 3*262*FLEN/8, x4, x1, x2)

inst_7175:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:21525*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21525*0 + 3*263*FLEN/8, x4, x1, x2)

inst_7176:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:21528*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21528*0 + 3*264*FLEN/8, x4, x1, x2)

inst_7177:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:21531*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21531*0 + 3*265*FLEN/8, x4, x1, x2)

inst_7178:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:21534*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21534*0 + 3*266*FLEN/8, x4, x1, x2)

inst_7179:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:21537*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21537*0 + 3*267*FLEN/8, x4, x1, x2)

inst_7180:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:21540*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21540*0 + 3*268*FLEN/8, x4, x1, x2)

inst_7181:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:21543*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21543*0 + 3*269*FLEN/8, x4, x1, x2)

inst_7182:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:21546*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21546*0 + 3*270*FLEN/8, x4, x1, x2)

inst_7183:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:21549*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21549*0 + 3*271*FLEN/8, x4, x1, x2)

inst_7184:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:21552*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21552*0 + 3*272*FLEN/8, x4, x1, x2)

inst_7185:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:21555*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21555*0 + 3*273*FLEN/8, x4, x1, x2)

inst_7186:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:21558*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21558*0 + 3*274*FLEN/8, x4, x1, x2)

inst_7187:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:21561*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21561*0 + 3*275*FLEN/8, x4, x1, x2)

inst_7188:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:21564*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21564*0 + 3*276*FLEN/8, x4, x1, x2)

inst_7189:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:21567*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21567*0 + 3*277*FLEN/8, x4, x1, x2)

inst_7190:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:21570*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21570*0 + 3*278*FLEN/8, x4, x1, x2)

inst_7191:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:21573*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21573*0 + 3*279*FLEN/8, x4, x1, x2)

inst_7192:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000000000000; valaddr_reg:x3; val_offset:21576*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21576*0 + 3*280*FLEN/8, x4, x1, x2)

inst_7193:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000000000001; valaddr_reg:x3; val_offset:21579*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21579*0 + 3*281*FLEN/8, x4, x1, x2)

inst_7194:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000000000003; valaddr_reg:x3; val_offset:21582*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21582*0 + 3*282*FLEN/8, x4, x1, x2)

inst_7195:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000000000007; valaddr_reg:x3; val_offset:21585*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21585*0 + 3*283*FLEN/8, x4, x1, x2)

inst_7196:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000000000000f; valaddr_reg:x3; val_offset:21588*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21588*0 + 3*284*FLEN/8, x4, x1, x2)

inst_7197:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000000000001f; valaddr_reg:x3; val_offset:21591*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21591*0 + 3*285*FLEN/8, x4, x1, x2)

inst_7198:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000000000003f; valaddr_reg:x3; val_offset:21594*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21594*0 + 3*286*FLEN/8, x4, x1, x2)

inst_7199:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000000000007f; valaddr_reg:x3; val_offset:21597*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21597*0 + 3*287*FLEN/8, x4, x1, x2)

inst_7200:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00000000000ff; valaddr_reg:x3; val_offset:21600*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21600*0 + 3*288*FLEN/8, x4, x1, x2)

inst_7201:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00000000001ff; valaddr_reg:x3; val_offset:21603*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21603*0 + 3*289*FLEN/8, x4, x1, x2)

inst_7202:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00000000003ff; valaddr_reg:x3; val_offset:21606*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21606*0 + 3*290*FLEN/8, x4, x1, x2)

inst_7203:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00000000007ff; valaddr_reg:x3; val_offset:21609*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21609*0 + 3*291*FLEN/8, x4, x1, x2)

inst_7204:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000000000fff; valaddr_reg:x3; val_offset:21612*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21612*0 + 3*292*FLEN/8, x4, x1, x2)

inst_7205:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000000001fff; valaddr_reg:x3; val_offset:21615*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21615*0 + 3*293*FLEN/8, x4, x1, x2)

inst_7206:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000000003fff; valaddr_reg:x3; val_offset:21618*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21618*0 + 3*294*FLEN/8, x4, x1, x2)

inst_7207:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000000007fff; valaddr_reg:x3; val_offset:21621*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21621*0 + 3*295*FLEN/8, x4, x1, x2)

inst_7208:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000000000ffff; valaddr_reg:x3; val_offset:21624*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21624*0 + 3*296*FLEN/8, x4, x1, x2)

inst_7209:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000000001ffff; valaddr_reg:x3; val_offset:21627*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21627*0 + 3*297*FLEN/8, x4, x1, x2)

inst_7210:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000000003ffff; valaddr_reg:x3; val_offset:21630*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21630*0 + 3*298*FLEN/8, x4, x1, x2)

inst_7211:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000000007ffff; valaddr_reg:x3; val_offset:21633*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21633*0 + 3*299*FLEN/8, x4, x1, x2)

inst_7212:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00000000fffff; valaddr_reg:x3; val_offset:21636*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21636*0 + 3*300*FLEN/8, x4, x1, x2)

inst_7213:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00000001fffff; valaddr_reg:x3; val_offset:21639*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21639*0 + 3*301*FLEN/8, x4, x1, x2)

inst_7214:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00000003fffff; valaddr_reg:x3; val_offset:21642*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21642*0 + 3*302*FLEN/8, x4, x1, x2)

inst_7215:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00000007fffff; valaddr_reg:x3; val_offset:21645*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21645*0 + 3*303*FLEN/8, x4, x1, x2)

inst_7216:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000000ffffff; valaddr_reg:x3; val_offset:21648*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21648*0 + 3*304*FLEN/8, x4, x1, x2)

inst_7217:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000001ffffff; valaddr_reg:x3; val_offset:21651*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21651*0 + 3*305*FLEN/8, x4, x1, x2)

inst_7218:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000003ffffff; valaddr_reg:x3; val_offset:21654*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21654*0 + 3*306*FLEN/8, x4, x1, x2)

inst_7219:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000007ffffff; valaddr_reg:x3; val_offset:21657*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21657*0 + 3*307*FLEN/8, x4, x1, x2)

inst_7220:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000000fffffff; valaddr_reg:x3; val_offset:21660*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21660*0 + 3*308*FLEN/8, x4, x1, x2)

inst_7221:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000001fffffff; valaddr_reg:x3; val_offset:21663*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21663*0 + 3*309*FLEN/8, x4, x1, x2)

inst_7222:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000003fffffff; valaddr_reg:x3; val_offset:21666*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21666*0 + 3*310*FLEN/8, x4, x1, x2)

inst_7223:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000007fffffff; valaddr_reg:x3; val_offset:21669*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21669*0 + 3*311*FLEN/8, x4, x1, x2)

inst_7224:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00000ffffffff; valaddr_reg:x3; val_offset:21672*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21672*0 + 3*312*FLEN/8, x4, x1, x2)

inst_7225:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00001ffffffff; valaddr_reg:x3; val_offset:21675*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21675*0 + 3*313*FLEN/8, x4, x1, x2)

inst_7226:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00003ffffffff; valaddr_reg:x3; val_offset:21678*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21678*0 + 3*314*FLEN/8, x4, x1, x2)

inst_7227:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00007ffffffff; valaddr_reg:x3; val_offset:21681*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21681*0 + 3*315*FLEN/8, x4, x1, x2)

inst_7228:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0000fffffffff; valaddr_reg:x3; val_offset:21684*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21684*0 + 3*316*FLEN/8, x4, x1, x2)

inst_7229:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0001fffffffff; valaddr_reg:x3; val_offset:21687*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21687*0 + 3*317*FLEN/8, x4, x1, x2)

inst_7230:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0003fffffffff; valaddr_reg:x3; val_offset:21690*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21690*0 + 3*318*FLEN/8, x4, x1, x2)

inst_7231:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0007fffffffff; valaddr_reg:x3; val_offset:21693*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21693*0 + 3*319*FLEN/8, x4, x1, x2)

inst_7232:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e000ffffffffff; valaddr_reg:x3; val_offset:21696*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21696*0 + 3*320*FLEN/8, x4, x1, x2)

inst_7233:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e001ffffffffff; valaddr_reg:x3; val_offset:21699*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21699*0 + 3*321*FLEN/8, x4, x1, x2)

inst_7234:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e003ffffffffff; valaddr_reg:x3; val_offset:21702*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21702*0 + 3*322*FLEN/8, x4, x1, x2)

inst_7235:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e007ffffffffff; valaddr_reg:x3; val_offset:21705*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21705*0 + 3*323*FLEN/8, x4, x1, x2)

inst_7236:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e00fffffffffff; valaddr_reg:x3; val_offset:21708*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21708*0 + 3*324*FLEN/8, x4, x1, x2)

inst_7237:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e01fffffffffff; valaddr_reg:x3; val_offset:21711*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21711*0 + 3*325*FLEN/8, x4, x1, x2)

inst_7238:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e03fffffffffff; valaddr_reg:x3; val_offset:21714*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21714*0 + 3*326*FLEN/8, x4, x1, x2)

inst_7239:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e07fffffffffff; valaddr_reg:x3; val_offset:21717*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21717*0 + 3*327*FLEN/8, x4, x1, x2)

inst_7240:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e0ffffffffffff; valaddr_reg:x3; val_offset:21720*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21720*0 + 3*328*FLEN/8, x4, x1, x2)

inst_7241:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e1ffffffffffff; valaddr_reg:x3; val_offset:21723*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21723*0 + 3*329*FLEN/8, x4, x1, x2)

inst_7242:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e3ffffffffffff; valaddr_reg:x3; val_offset:21726*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21726*0 + 3*330*FLEN/8, x4, x1, x2)

inst_7243:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e7ffffffffffff; valaddr_reg:x3; val_offset:21729*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21729*0 + 3*331*FLEN/8, x4, x1, x2)

inst_7244:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1e8000000000000; valaddr_reg:x3; val_offset:21732*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21732*0 + 3*332*FLEN/8, x4, x1, x2)

inst_7245:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1ec000000000000; valaddr_reg:x3; val_offset:21735*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21735*0 + 3*333*FLEN/8, x4, x1, x2)

inst_7246:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1ee000000000000; valaddr_reg:x3; val_offset:21738*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21738*0 + 3*334*FLEN/8, x4, x1, x2)

inst_7247:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1ef000000000000; valaddr_reg:x3; val_offset:21741*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21741*0 + 3*335*FLEN/8, x4, x1, x2)

inst_7248:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1ef800000000000; valaddr_reg:x3; val_offset:21744*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21744*0 + 3*336*FLEN/8, x4, x1, x2)

inst_7249:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efc00000000000; valaddr_reg:x3; val_offset:21747*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21747*0 + 3*337*FLEN/8, x4, x1, x2)

inst_7250:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efe00000000000; valaddr_reg:x3; val_offset:21750*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21750*0 + 3*338*FLEN/8, x4, x1, x2)

inst_7251:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1eff00000000000; valaddr_reg:x3; val_offset:21753*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21753*0 + 3*339*FLEN/8, x4, x1, x2)

inst_7252:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1eff80000000000; valaddr_reg:x3; val_offset:21756*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21756*0 + 3*340*FLEN/8, x4, x1, x2)

inst_7253:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effc0000000000; valaddr_reg:x3; val_offset:21759*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21759*0 + 3*341*FLEN/8, x4, x1, x2)

inst_7254:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effe0000000000; valaddr_reg:x3; val_offset:21762*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21762*0 + 3*342*FLEN/8, x4, x1, x2)

inst_7255:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efff0000000000; valaddr_reg:x3; val_offset:21765*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21765*0 + 3*343*FLEN/8, x4, x1, x2)

inst_7256:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efff8000000000; valaddr_reg:x3; val_offset:21768*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21768*0 + 3*344*FLEN/8, x4, x1, x2)

inst_7257:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffc000000000; valaddr_reg:x3; val_offset:21771*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21771*0 + 3*345*FLEN/8, x4, x1, x2)

inst_7258:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffe000000000; valaddr_reg:x3; val_offset:21774*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21774*0 + 3*346*FLEN/8, x4, x1, x2)

inst_7259:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effff000000000; valaddr_reg:x3; val_offset:21777*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21777*0 + 3*347*FLEN/8, x4, x1, x2)

inst_7260:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effff800000000; valaddr_reg:x3; val_offset:21780*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21780*0 + 3*348*FLEN/8, x4, x1, x2)

inst_7261:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffc00000000; valaddr_reg:x3; val_offset:21783*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21783*0 + 3*349*FLEN/8, x4, x1, x2)

inst_7262:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffe00000000; valaddr_reg:x3; val_offset:21786*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21786*0 + 3*350*FLEN/8, x4, x1, x2)

inst_7263:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffff00000000; valaddr_reg:x3; val_offset:21789*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21789*0 + 3*351*FLEN/8, x4, x1, x2)

inst_7264:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffff80000000; valaddr_reg:x3; val_offset:21792*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21792*0 + 3*352*FLEN/8, x4, x1, x2)

inst_7265:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffc0000000; valaddr_reg:x3; val_offset:21795*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21795*0 + 3*353*FLEN/8, x4, x1, x2)

inst_7266:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffe0000000; valaddr_reg:x3; val_offset:21798*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21798*0 + 3*354*FLEN/8, x4, x1, x2)

inst_7267:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffff0000000; valaddr_reg:x3; val_offset:21801*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21801*0 + 3*355*FLEN/8, x4, x1, x2)

inst_7268:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffff8000000; valaddr_reg:x3; val_offset:21804*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21804*0 + 3*356*FLEN/8, x4, x1, x2)

inst_7269:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffc000000; valaddr_reg:x3; val_offset:21807*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21807*0 + 3*357*FLEN/8, x4, x1, x2)

inst_7270:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffe000000; valaddr_reg:x3; val_offset:21810*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21810*0 + 3*358*FLEN/8, x4, x1, x2)

inst_7271:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffff000000; valaddr_reg:x3; val_offset:21813*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21813*0 + 3*359*FLEN/8, x4, x1, x2)

inst_7272:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffff800000; valaddr_reg:x3; val_offset:21816*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21816*0 + 3*360*FLEN/8, x4, x1, x2)

inst_7273:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffc00000; valaddr_reg:x3; val_offset:21819*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21819*0 + 3*361*FLEN/8, x4, x1, x2)

inst_7274:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffe00000; valaddr_reg:x3; val_offset:21822*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21822*0 + 3*362*FLEN/8, x4, x1, x2)

inst_7275:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffff00000; valaddr_reg:x3; val_offset:21825*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21825*0 + 3*363*FLEN/8, x4, x1, x2)

inst_7276:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffff80000; valaddr_reg:x3; val_offset:21828*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21828*0 + 3*364*FLEN/8, x4, x1, x2)

inst_7277:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffffc0000; valaddr_reg:x3; val_offset:21831*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21831*0 + 3*365*FLEN/8, x4, x1, x2)

inst_7278:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffffe0000; valaddr_reg:x3; val_offset:21834*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21834*0 + 3*366*FLEN/8, x4, x1, x2)

inst_7279:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffff0000; valaddr_reg:x3; val_offset:21837*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21837*0 + 3*367*FLEN/8, x4, x1, x2)

inst_7280:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffff8000; valaddr_reg:x3; val_offset:21840*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21840*0 + 3*368*FLEN/8, x4, x1, x2)

inst_7281:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffffc000; valaddr_reg:x3; val_offset:21843*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21843*0 + 3*369*FLEN/8, x4, x1, x2)

inst_7282:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffffe000; valaddr_reg:x3; val_offset:21846*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21846*0 + 3*370*FLEN/8, x4, x1, x2)

inst_7283:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffffff000; valaddr_reg:x3; val_offset:21849*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21849*0 + 3*371*FLEN/8, x4, x1, x2)

inst_7284:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffffff800; valaddr_reg:x3; val_offset:21852*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21852*0 + 3*372*FLEN/8, x4, x1, x2)

inst_7285:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffffffc00; valaddr_reg:x3; val_offset:21855*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21855*0 + 3*373*FLEN/8, x4, x1, x2)

inst_7286:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffffffe00; valaddr_reg:x3; val_offset:21858*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21858*0 + 3*374*FLEN/8, x4, x1, x2)

inst_7287:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffffff00; valaddr_reg:x3; val_offset:21861*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21861*0 + 3*375*FLEN/8, x4, x1, x2)

inst_7288:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffffff80; valaddr_reg:x3; val_offset:21864*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21864*0 + 3*376*FLEN/8, x4, x1, x2)

inst_7289:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffffffc0; valaddr_reg:x3; val_offset:21867*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21867*0 + 3*377*FLEN/8, x4, x1, x2)

inst_7290:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffffffe0; valaddr_reg:x3; val_offset:21870*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21870*0 + 3*378*FLEN/8, x4, x1, x2)

inst_7291:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffffffff0; valaddr_reg:x3; val_offset:21873*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21873*0 + 3*379*FLEN/8, x4, x1, x2)

inst_7292:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffffffff8; valaddr_reg:x3; val_offset:21876*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21876*0 + 3*380*FLEN/8, x4, x1, x2)

inst_7293:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffffffffc; valaddr_reg:x3; val_offset:21879*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21879*0 + 3*381*FLEN/8, x4, x1, x2)

inst_7294:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1effffffffffffe; valaddr_reg:x3; val_offset:21882*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21882*0 + 3*382*FLEN/8, x4, x1, x2)

inst_7295:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xfe31c3385935f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01e and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6fe31c3385935f; op2val:0x0;
op3val:0x1efffffffffffff; valaddr_reg:x3; val_offset:21885*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21885*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_7296:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:21888*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21888*0 + 3*384*FLEN/8, x4, x1, x2)

inst_7297:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:21891*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21891*0 + 3*385*FLEN/8, x4, x1, x2)

inst_7298:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:21894*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21894*0 + 3*386*FLEN/8, x4, x1, x2)

inst_7299:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:21897*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21897*0 + 3*387*FLEN/8, x4, x1, x2)

inst_7300:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:21900*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21900*0 + 3*388*FLEN/8, x4, x1, x2)

inst_7301:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:21903*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21903*0 + 3*389*FLEN/8, x4, x1, x2)

inst_7302:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:21906*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21906*0 + 3*390*FLEN/8, x4, x1, x2)

inst_7303:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:21909*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21909*0 + 3*391*FLEN/8, x4, x1, x2)

inst_7304:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:21912*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21912*0 + 3*392*FLEN/8, x4, x1, x2)

inst_7305:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:21915*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21915*0 + 3*393*FLEN/8, x4, x1, x2)

inst_7306:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:21918*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21918*0 + 3*394*FLEN/8, x4, x1, x2)

inst_7307:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:21921*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21921*0 + 3*395*FLEN/8, x4, x1, x2)

inst_7308:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:21924*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21924*0 + 3*396*FLEN/8, x4, x1, x2)

inst_7309:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:21927*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21927*0 + 3*397*FLEN/8, x4, x1, x2)

inst_7310:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:21930*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21930*0 + 3*398*FLEN/8, x4, x1, x2)

inst_7311:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:21933*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21933*0 + 3*399*FLEN/8, x4, x1, x2)

inst_7312:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:21936*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21936*0 + 3*400*FLEN/8, x4, x1, x2)

inst_7313:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:21939*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21939*0 + 3*401*FLEN/8, x4, x1, x2)

inst_7314:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:21942*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21942*0 + 3*402*FLEN/8, x4, x1, x2)

inst_7315:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:21945*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21945*0 + 3*403*FLEN/8, x4, x1, x2)

inst_7316:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:21948*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21948*0 + 3*404*FLEN/8, x4, x1, x2)

inst_7317:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:21951*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21951*0 + 3*405*FLEN/8, x4, x1, x2)

inst_7318:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000000000000; valaddr_reg:x3; val_offset:21954*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21954*0 + 3*406*FLEN/8, x4, x1, x2)

inst_7319:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000000000001; valaddr_reg:x3; val_offset:21957*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21957*0 + 3*407*FLEN/8, x4, x1, x2)

inst_7320:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000000000003; valaddr_reg:x3; val_offset:21960*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21960*0 + 3*408*FLEN/8, x4, x1, x2)

inst_7321:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000000000007; valaddr_reg:x3; val_offset:21963*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21963*0 + 3*409*FLEN/8, x4, x1, x2)

inst_7322:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000000000000f; valaddr_reg:x3; val_offset:21966*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21966*0 + 3*410*FLEN/8, x4, x1, x2)

inst_7323:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000000000001f; valaddr_reg:x3; val_offset:21969*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21969*0 + 3*411*FLEN/8, x4, x1, x2)

inst_7324:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000000000003f; valaddr_reg:x3; val_offset:21972*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21972*0 + 3*412*FLEN/8, x4, x1, x2)

inst_7325:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000000000007f; valaddr_reg:x3; val_offset:21975*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21975*0 + 3*413*FLEN/8, x4, x1, x2)

inst_7326:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00000000000ff; valaddr_reg:x3; val_offset:21978*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21978*0 + 3*414*FLEN/8, x4, x1, x2)

inst_7327:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00000000001ff; valaddr_reg:x3; val_offset:21981*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21981*0 + 3*415*FLEN/8, x4, x1, x2)

inst_7328:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00000000003ff; valaddr_reg:x3; val_offset:21984*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21984*0 + 3*416*FLEN/8, x4, x1, x2)

inst_7329:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00000000007ff; valaddr_reg:x3; val_offset:21987*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21987*0 + 3*417*FLEN/8, x4, x1, x2)

inst_7330:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000000000fff; valaddr_reg:x3; val_offset:21990*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21990*0 + 3*418*FLEN/8, x4, x1, x2)

inst_7331:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000000001fff; valaddr_reg:x3; val_offset:21993*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21993*0 + 3*419*FLEN/8, x4, x1, x2)

inst_7332:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000000003fff; valaddr_reg:x3; val_offset:21996*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21996*0 + 3*420*FLEN/8, x4, x1, x2)

inst_7333:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000000007fff; valaddr_reg:x3; val_offset:21999*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 21999*0 + 3*421*FLEN/8, x4, x1, x2)

inst_7334:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000000000ffff; valaddr_reg:x3; val_offset:22002*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22002*0 + 3*422*FLEN/8, x4, x1, x2)

inst_7335:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000000001ffff; valaddr_reg:x3; val_offset:22005*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22005*0 + 3*423*FLEN/8, x4, x1, x2)

inst_7336:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000000003ffff; valaddr_reg:x3; val_offset:22008*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22008*0 + 3*424*FLEN/8, x4, x1, x2)

inst_7337:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000000007ffff; valaddr_reg:x3; val_offset:22011*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22011*0 + 3*425*FLEN/8, x4, x1, x2)

inst_7338:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00000000fffff; valaddr_reg:x3; val_offset:22014*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22014*0 + 3*426*FLEN/8, x4, x1, x2)

inst_7339:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00000001fffff; valaddr_reg:x3; val_offset:22017*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22017*0 + 3*427*FLEN/8, x4, x1, x2)

inst_7340:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00000003fffff; valaddr_reg:x3; val_offset:22020*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22020*0 + 3*428*FLEN/8, x4, x1, x2)

inst_7341:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00000007fffff; valaddr_reg:x3; val_offset:22023*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22023*0 + 3*429*FLEN/8, x4, x1, x2)

inst_7342:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000000ffffff; valaddr_reg:x3; val_offset:22026*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22026*0 + 3*430*FLEN/8, x4, x1, x2)

inst_7343:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000001ffffff; valaddr_reg:x3; val_offset:22029*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22029*0 + 3*431*FLEN/8, x4, x1, x2)

inst_7344:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000003ffffff; valaddr_reg:x3; val_offset:22032*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22032*0 + 3*432*FLEN/8, x4, x1, x2)

inst_7345:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000007ffffff; valaddr_reg:x3; val_offset:22035*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22035*0 + 3*433*FLEN/8, x4, x1, x2)

inst_7346:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000000fffffff; valaddr_reg:x3; val_offset:22038*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22038*0 + 3*434*FLEN/8, x4, x1, x2)

inst_7347:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000001fffffff; valaddr_reg:x3; val_offset:22041*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22041*0 + 3*435*FLEN/8, x4, x1, x2)

inst_7348:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000003fffffff; valaddr_reg:x3; val_offset:22044*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22044*0 + 3*436*FLEN/8, x4, x1, x2)

inst_7349:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000007fffffff; valaddr_reg:x3; val_offset:22047*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22047*0 + 3*437*FLEN/8, x4, x1, x2)

inst_7350:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00000ffffffff; valaddr_reg:x3; val_offset:22050*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22050*0 + 3*438*FLEN/8, x4, x1, x2)

inst_7351:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00001ffffffff; valaddr_reg:x3; val_offset:22053*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22053*0 + 3*439*FLEN/8, x4, x1, x2)

inst_7352:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00003ffffffff; valaddr_reg:x3; val_offset:22056*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22056*0 + 3*440*FLEN/8, x4, x1, x2)

inst_7353:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00007ffffffff; valaddr_reg:x3; val_offset:22059*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22059*0 + 3*441*FLEN/8, x4, x1, x2)

inst_7354:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0000fffffffff; valaddr_reg:x3; val_offset:22062*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22062*0 + 3*442*FLEN/8, x4, x1, x2)

inst_7355:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0001fffffffff; valaddr_reg:x3; val_offset:22065*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22065*0 + 3*443*FLEN/8, x4, x1, x2)

inst_7356:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0003fffffffff; valaddr_reg:x3; val_offset:22068*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22068*0 + 3*444*FLEN/8, x4, x1, x2)

inst_7357:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0007fffffffff; valaddr_reg:x3; val_offset:22071*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22071*0 + 3*445*FLEN/8, x4, x1, x2)

inst_7358:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b000ffffffffff; valaddr_reg:x3; val_offset:22074*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22074*0 + 3*446*FLEN/8, x4, x1, x2)

inst_7359:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b001ffffffffff; valaddr_reg:x3; val_offset:22077*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22077*0 + 3*447*FLEN/8, x4, x1, x2)

inst_7360:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b003ffffffffff; valaddr_reg:x3; val_offset:22080*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22080*0 + 3*448*FLEN/8, x4, x1, x2)

inst_7361:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b007ffffffffff; valaddr_reg:x3; val_offset:22083*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22083*0 + 3*449*FLEN/8, x4, x1, x2)

inst_7362:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b00fffffffffff; valaddr_reg:x3; val_offset:22086*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22086*0 + 3*450*FLEN/8, x4, x1, x2)

inst_7363:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b01fffffffffff; valaddr_reg:x3; val_offset:22089*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22089*0 + 3*451*FLEN/8, x4, x1, x2)

inst_7364:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b03fffffffffff; valaddr_reg:x3; val_offset:22092*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22092*0 + 3*452*FLEN/8, x4, x1, x2)

inst_7365:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b07fffffffffff; valaddr_reg:x3; val_offset:22095*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22095*0 + 3*453*FLEN/8, x4, x1, x2)

inst_7366:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b0ffffffffffff; valaddr_reg:x3; val_offset:22098*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22098*0 + 3*454*FLEN/8, x4, x1, x2)

inst_7367:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b1ffffffffffff; valaddr_reg:x3; val_offset:22101*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22101*0 + 3*455*FLEN/8, x4, x1, x2)

inst_7368:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b3ffffffffffff; valaddr_reg:x3; val_offset:22104*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22104*0 + 3*456*FLEN/8, x4, x1, x2)

inst_7369:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b7ffffffffffff; valaddr_reg:x3; val_offset:22107*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22107*0 + 3*457*FLEN/8, x4, x1, x2)

inst_7370:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2b8000000000000; valaddr_reg:x3; val_offset:22110*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22110*0 + 3*458*FLEN/8, x4, x1, x2)

inst_7371:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bc000000000000; valaddr_reg:x3; val_offset:22113*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22113*0 + 3*459*FLEN/8, x4, x1, x2)

inst_7372:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2be000000000000; valaddr_reg:x3; val_offset:22116*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22116*0 + 3*460*FLEN/8, x4, x1, x2)

inst_7373:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bf000000000000; valaddr_reg:x3; val_offset:22119*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22119*0 + 3*461*FLEN/8, x4, x1, x2)

inst_7374:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bf800000000000; valaddr_reg:x3; val_offset:22122*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22122*0 + 3*462*FLEN/8, x4, x1, x2)

inst_7375:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfc00000000000; valaddr_reg:x3; val_offset:22125*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22125*0 + 3*463*FLEN/8, x4, x1, x2)

inst_7376:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfe00000000000; valaddr_reg:x3; val_offset:22128*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22128*0 + 3*464*FLEN/8, x4, x1, x2)

inst_7377:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bff00000000000; valaddr_reg:x3; val_offset:22131*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22131*0 + 3*465*FLEN/8, x4, x1, x2)

inst_7378:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bff80000000000; valaddr_reg:x3; val_offset:22134*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22134*0 + 3*466*FLEN/8, x4, x1, x2)

inst_7379:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffc0000000000; valaddr_reg:x3; val_offset:22137*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22137*0 + 3*467*FLEN/8, x4, x1, x2)

inst_7380:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffe0000000000; valaddr_reg:x3; val_offset:22140*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22140*0 + 3*468*FLEN/8, x4, x1, x2)

inst_7381:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfff0000000000; valaddr_reg:x3; val_offset:22143*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22143*0 + 3*469*FLEN/8, x4, x1, x2)

inst_7382:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfff8000000000; valaddr_reg:x3; val_offset:22146*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22146*0 + 3*470*FLEN/8, x4, x1, x2)

inst_7383:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffc000000000; valaddr_reg:x3; val_offset:22149*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22149*0 + 3*471*FLEN/8, x4, x1, x2)

inst_7384:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffe000000000; valaddr_reg:x3; val_offset:22152*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22152*0 + 3*472*FLEN/8, x4, x1, x2)

inst_7385:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffff000000000; valaddr_reg:x3; val_offset:22155*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22155*0 + 3*473*FLEN/8, x4, x1, x2)

inst_7386:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffff800000000; valaddr_reg:x3; val_offset:22158*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22158*0 + 3*474*FLEN/8, x4, x1, x2)

inst_7387:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffc00000000; valaddr_reg:x3; val_offset:22161*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22161*0 + 3*475*FLEN/8, x4, x1, x2)

inst_7388:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffe00000000; valaddr_reg:x3; val_offset:22164*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22164*0 + 3*476*FLEN/8, x4, x1, x2)

inst_7389:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffff00000000; valaddr_reg:x3; val_offset:22167*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22167*0 + 3*477*FLEN/8, x4, x1, x2)

inst_7390:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffff80000000; valaddr_reg:x3; val_offset:22170*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22170*0 + 3*478*FLEN/8, x4, x1, x2)

inst_7391:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffc0000000; valaddr_reg:x3; val_offset:22173*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22173*0 + 3*479*FLEN/8, x4, x1, x2)

inst_7392:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffe0000000; valaddr_reg:x3; val_offset:22176*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22176*0 + 3*480*FLEN/8, x4, x1, x2)

inst_7393:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffff0000000; valaddr_reg:x3; val_offset:22179*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22179*0 + 3*481*FLEN/8, x4, x1, x2)

inst_7394:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffff8000000; valaddr_reg:x3; val_offset:22182*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22182*0 + 3*482*FLEN/8, x4, x1, x2)

inst_7395:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffc000000; valaddr_reg:x3; val_offset:22185*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22185*0 + 3*483*FLEN/8, x4, x1, x2)

inst_7396:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffe000000; valaddr_reg:x3; val_offset:22188*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22188*0 + 3*484*FLEN/8, x4, x1, x2)

inst_7397:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffff000000; valaddr_reg:x3; val_offset:22191*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22191*0 + 3*485*FLEN/8, x4, x1, x2)

inst_7398:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffff800000; valaddr_reg:x3; val_offset:22194*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22194*0 + 3*486*FLEN/8, x4, x1, x2)

inst_7399:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffc00000; valaddr_reg:x3; val_offset:22197*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22197*0 + 3*487*FLEN/8, x4, x1, x2)

inst_7400:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffe00000; valaddr_reg:x3; val_offset:22200*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22200*0 + 3*488*FLEN/8, x4, x1, x2)

inst_7401:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffff00000; valaddr_reg:x3; val_offset:22203*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22203*0 + 3*489*FLEN/8, x4, x1, x2)

inst_7402:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffff80000; valaddr_reg:x3; val_offset:22206*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22206*0 + 3*490*FLEN/8, x4, x1, x2)

inst_7403:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffffc0000; valaddr_reg:x3; val_offset:22209*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22209*0 + 3*491*FLEN/8, x4, x1, x2)

inst_7404:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffffe0000; valaddr_reg:x3; val_offset:22212*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22212*0 + 3*492*FLEN/8, x4, x1, x2)

inst_7405:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffff0000; valaddr_reg:x3; val_offset:22215*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22215*0 + 3*493*FLEN/8, x4, x1, x2)

inst_7406:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffff8000; valaddr_reg:x3; val_offset:22218*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22218*0 + 3*494*FLEN/8, x4, x1, x2)

inst_7407:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffffc000; valaddr_reg:x3; val_offset:22221*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22221*0 + 3*495*FLEN/8, x4, x1, x2)

inst_7408:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffffe000; valaddr_reg:x3; val_offset:22224*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22224*0 + 3*496*FLEN/8, x4, x1, x2)

inst_7409:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffffff000; valaddr_reg:x3; val_offset:22227*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22227*0 + 3*497*FLEN/8, x4, x1, x2)

inst_7410:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffffff800; valaddr_reg:x3; val_offset:22230*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22230*0 + 3*498*FLEN/8, x4, x1, x2)

inst_7411:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffffffc00; valaddr_reg:x3; val_offset:22233*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22233*0 + 3*499*FLEN/8, x4, x1, x2)

inst_7412:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffffffe00; valaddr_reg:x3; val_offset:22236*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22236*0 + 3*500*FLEN/8, x4, x1, x2)

inst_7413:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffffff00; valaddr_reg:x3; val_offset:22239*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22239*0 + 3*501*FLEN/8, x4, x1, x2)

inst_7414:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffffff80; valaddr_reg:x3; val_offset:22242*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22242*0 + 3*502*FLEN/8, x4, x1, x2)

inst_7415:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffffffc0; valaddr_reg:x3; val_offset:22245*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22245*0 + 3*503*FLEN/8, x4, x1, x2)

inst_7416:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffffffe0; valaddr_reg:x3; val_offset:22248*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22248*0 + 3*504*FLEN/8, x4, x1, x2)

inst_7417:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffffffff0; valaddr_reg:x3; val_offset:22251*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22251*0 + 3*505*FLEN/8, x4, x1, x2)

inst_7418:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffffffff8; valaddr_reg:x3; val_offset:22254*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22254*0 + 3*506*FLEN/8, x4, x1, x2)

inst_7419:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffffffffc; valaddr_reg:x3; val_offset:22257*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22257*0 + 3*507*FLEN/8, x4, x1, x2)

inst_7420:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bffffffffffffe; valaddr_reg:x3; val_offset:22260*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22260*0 + 3*508*FLEN/8, x4, x1, x2)

inst_7421:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x01fbcc61d38b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f701fbcc61d38b7; op2val:0x0;
op3val:0x2bfffffffffffff; valaddr_reg:x3; val_offset:22263*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22263*0 + 3*509*FLEN/8, x4, x1, x2)

inst_7422:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:22266*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22266*0 + 3*510*FLEN/8, x4, x1, x2)

inst_7423:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x10000000000003; valaddr_reg:x3; val_offset:22269*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22269*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_7424:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:22272*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22272*0 + 3*512*FLEN/8, x4, x1, x2)

inst_7425:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1000000000000f; valaddr_reg:x3; val_offset:22275*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22275*0 + 3*513*FLEN/8, x4, x1, x2)

inst_7426:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:22278*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22278*0 + 3*514*FLEN/8, x4, x1, x2)

inst_7427:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:22281*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22281*0 + 3*515*FLEN/8, x4, x1, x2)

inst_7428:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x13333333333333; valaddr_reg:x3; val_offset:22284*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22284*0 + 3*516*FLEN/8, x4, x1, x2)

inst_7429:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x14924924924924; valaddr_reg:x3; val_offset:22287*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22287*0 + 3*517*FLEN/8, x4, x1, x2)

inst_7430:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x16666666666666; valaddr_reg:x3; val_offset:22290*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22290*0 + 3*518*FLEN/8, x4, x1, x2)

inst_7431:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x16db6db6db6db6; valaddr_reg:x3; val_offset:22293*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22293*0 + 3*519*FLEN/8, x4, x1, x2)

inst_7432:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x17777777777777; valaddr_reg:x3; val_offset:22296*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22296*0 + 3*520*FLEN/8, x4, x1, x2)

inst_7433:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x18888888888888; valaddr_reg:x3; val_offset:22299*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22299*0 + 3*521*FLEN/8, x4, x1, x2)

inst_7434:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x19999999999999; valaddr_reg:x3; val_offset:22302*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22302*0 + 3*522*FLEN/8, x4, x1, x2)

inst_7435:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1b6db6db6db6db; valaddr_reg:x3; val_offset:22305*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22305*0 + 3*523*FLEN/8, x4, x1, x2)

inst_7436:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1ccccccccccccc; valaddr_reg:x3; val_offset:22308*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22308*0 + 3*524*FLEN/8, x4, x1, x2)

inst_7437:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1db6db6db6db6d; valaddr_reg:x3; val_offset:22311*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22311*0 + 3*525*FLEN/8, x4, x1, x2)

inst_7438:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1fffffffffffc0; valaddr_reg:x3; val_offset:22314*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22314*0 + 3*526*FLEN/8, x4, x1, x2)

inst_7439:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1fffffffffffe0; valaddr_reg:x3; val_offset:22317*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22317*0 + 3*527*FLEN/8, x4, x1, x2)

inst_7440:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1ffffffffffff0; valaddr_reg:x3; val_offset:22320*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22320*0 + 3*528*FLEN/8, x4, x1, x2)

inst_7441:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1ffffffffffff8; valaddr_reg:x3; val_offset:22323*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22323*0 + 3*529*FLEN/8, x4, x1, x2)

inst_7442:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1ffffffffffffc; valaddr_reg:x3; val_offset:22326*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22326*0 + 3*530*FLEN/8, x4, x1, x2)

inst_7443:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x1ffffffffffffe; valaddr_reg:x3; val_offset:22329*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22329*0 + 3*531*FLEN/8, x4, x1, x2)

inst_7444:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000000000000; valaddr_reg:x3; val_offset:22332*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22332*0 + 3*532*FLEN/8, x4, x1, x2)

inst_7445:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000000000001; valaddr_reg:x3; val_offset:22335*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22335*0 + 3*533*FLEN/8, x4, x1, x2)

inst_7446:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000000000003; valaddr_reg:x3; val_offset:22338*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22338*0 + 3*534*FLEN/8, x4, x1, x2)

inst_7447:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000000000007; valaddr_reg:x3; val_offset:22341*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22341*0 + 3*535*FLEN/8, x4, x1, x2)

inst_7448:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000000000000f; valaddr_reg:x3; val_offset:22344*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22344*0 + 3*536*FLEN/8, x4, x1, x2)

inst_7449:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000000000001f; valaddr_reg:x3; val_offset:22347*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22347*0 + 3*537*FLEN/8, x4, x1, x2)

inst_7450:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000000000003f; valaddr_reg:x3; val_offset:22350*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22350*0 + 3*538*FLEN/8, x4, x1, x2)

inst_7451:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000000000007f; valaddr_reg:x3; val_offset:22353*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22353*0 + 3*539*FLEN/8, x4, x1, x2)

inst_7452:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000000000000ff; valaddr_reg:x3; val_offset:22356*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22356*0 + 3*540*FLEN/8, x4, x1, x2)

inst_7453:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000000000001ff; valaddr_reg:x3; val_offset:22359*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22359*0 + 3*541*FLEN/8, x4, x1, x2)

inst_7454:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000000000003ff; valaddr_reg:x3; val_offset:22362*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22362*0 + 3*542*FLEN/8, x4, x1, x2)

inst_7455:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000000000007ff; valaddr_reg:x3; val_offset:22365*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22365*0 + 3*543*FLEN/8, x4, x1, x2)

inst_7456:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000000000fff; valaddr_reg:x3; val_offset:22368*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22368*0 + 3*544*FLEN/8, x4, x1, x2)

inst_7457:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000000001fff; valaddr_reg:x3; val_offset:22371*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22371*0 + 3*545*FLEN/8, x4, x1, x2)

inst_7458:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000000003fff; valaddr_reg:x3; val_offset:22374*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22374*0 + 3*546*FLEN/8, x4, x1, x2)

inst_7459:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000000007fff; valaddr_reg:x3; val_offset:22377*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22377*0 + 3*547*FLEN/8, x4, x1, x2)

inst_7460:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000000000ffff; valaddr_reg:x3; val_offset:22380*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22380*0 + 3*548*FLEN/8, x4, x1, x2)

inst_7461:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000000001ffff; valaddr_reg:x3; val_offset:22383*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22383*0 + 3*549*FLEN/8, x4, x1, x2)

inst_7462:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000000003ffff; valaddr_reg:x3; val_offset:22386*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22386*0 + 3*550*FLEN/8, x4, x1, x2)

inst_7463:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000000007ffff; valaddr_reg:x3; val_offset:22389*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22389*0 + 3*551*FLEN/8, x4, x1, x2)

inst_7464:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000000000fffff; valaddr_reg:x3; val_offset:22392*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22392*0 + 3*552*FLEN/8, x4, x1, x2)

inst_7465:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000000001fffff; valaddr_reg:x3; val_offset:22395*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22395*0 + 3*553*FLEN/8, x4, x1, x2)

inst_7466:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000000003fffff; valaddr_reg:x3; val_offset:22398*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22398*0 + 3*554*FLEN/8, x4, x1, x2)

inst_7467:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000000007fffff; valaddr_reg:x3; val_offset:22401*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22401*0 + 3*555*FLEN/8, x4, x1, x2)

inst_7468:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000000ffffff; valaddr_reg:x3; val_offset:22404*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22404*0 + 3*556*FLEN/8, x4, x1, x2)

inst_7469:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000001ffffff; valaddr_reg:x3; val_offset:22407*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22407*0 + 3*557*FLEN/8, x4, x1, x2)

inst_7470:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000003ffffff; valaddr_reg:x3; val_offset:22410*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22410*0 + 3*558*FLEN/8, x4, x1, x2)

inst_7471:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000007ffffff; valaddr_reg:x3; val_offset:22413*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22413*0 + 3*559*FLEN/8, x4, x1, x2)

inst_7472:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000000fffffff; valaddr_reg:x3; val_offset:22416*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22416*0 + 3*560*FLEN/8, x4, x1, x2)

inst_7473:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000001fffffff; valaddr_reg:x3; val_offset:22419*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22419*0 + 3*561*FLEN/8, x4, x1, x2)

inst_7474:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000003fffffff; valaddr_reg:x3; val_offset:22422*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22422*0 + 3*562*FLEN/8, x4, x1, x2)

inst_7475:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000007fffffff; valaddr_reg:x3; val_offset:22425*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22425*0 + 3*563*FLEN/8, x4, x1, x2)

inst_7476:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000000ffffffff; valaddr_reg:x3; val_offset:22428*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22428*0 + 3*564*FLEN/8, x4, x1, x2)

inst_7477:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000001ffffffff; valaddr_reg:x3; val_offset:22431*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22431*0 + 3*565*FLEN/8, x4, x1, x2)

inst_7478:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000003ffffffff; valaddr_reg:x3; val_offset:22434*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22434*0 + 3*566*FLEN/8, x4, x1, x2)

inst_7479:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000007ffffffff; valaddr_reg:x3; val_offset:22437*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22437*0 + 3*567*FLEN/8, x4, x1, x2)

inst_7480:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300000fffffffff; valaddr_reg:x3; val_offset:22440*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22440*0 + 3*568*FLEN/8, x4, x1, x2)

inst_7481:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300001fffffffff; valaddr_reg:x3; val_offset:22443*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22443*0 + 3*569*FLEN/8, x4, x1, x2)

inst_7482:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300003fffffffff; valaddr_reg:x3; val_offset:22446*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22446*0 + 3*570*FLEN/8, x4, x1, x2)

inst_7483:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300007fffffffff; valaddr_reg:x3; val_offset:22449*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22449*0 + 3*571*FLEN/8, x4, x1, x2)

inst_7484:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30000ffffffffff; valaddr_reg:x3; val_offset:22452*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22452*0 + 3*572*FLEN/8, x4, x1, x2)

inst_7485:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30001ffffffffff; valaddr_reg:x3; val_offset:22455*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22455*0 + 3*573*FLEN/8, x4, x1, x2)

inst_7486:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30003ffffffffff; valaddr_reg:x3; val_offset:22458*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22458*0 + 3*574*FLEN/8, x4, x1, x2)

inst_7487:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30007ffffffffff; valaddr_reg:x3; val_offset:22461*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22461*0 + 3*575*FLEN/8, x4, x1, x2)

inst_7488:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3000fffffffffff; valaddr_reg:x3; val_offset:22464*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22464*0 + 3*576*FLEN/8, x4, x1, x2)

inst_7489:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3001fffffffffff; valaddr_reg:x3; val_offset:22467*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22467*0 + 3*577*FLEN/8, x4, x1, x2)

inst_7490:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3003fffffffffff; valaddr_reg:x3; val_offset:22470*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22470*0 + 3*578*FLEN/8, x4, x1, x2)

inst_7491:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x3007fffffffffff; valaddr_reg:x3; val_offset:22473*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22473*0 + 3*579*FLEN/8, x4, x1, x2)

inst_7492:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x300ffffffffffff; valaddr_reg:x3; val_offset:22476*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22476*0 + 3*580*FLEN/8, x4, x1, x2)

inst_7493:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x301ffffffffffff; valaddr_reg:x3; val_offset:22479*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22479*0 + 3*581*FLEN/8, x4, x1, x2)

inst_7494:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x303ffffffffffff; valaddr_reg:x3; val_offset:22482*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22482*0 + 3*582*FLEN/8, x4, x1, x2)

inst_7495:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x307ffffffffffff; valaddr_reg:x3; val_offset:22485*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22485*0 + 3*583*FLEN/8, x4, x1, x2)

inst_7496:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x308000000000000; valaddr_reg:x3; val_offset:22488*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22488*0 + 3*584*FLEN/8, x4, x1, x2)

inst_7497:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30c000000000000; valaddr_reg:x3; val_offset:22491*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22491*0 + 3*585*FLEN/8, x4, x1, x2)

inst_7498:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30e000000000000; valaddr_reg:x3; val_offset:22494*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22494*0 + 3*586*FLEN/8, x4, x1, x2)

inst_7499:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30f000000000000; valaddr_reg:x3; val_offset:22497*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22497*0 + 3*587*FLEN/8, x4, x1, x2)

inst_7500:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30f800000000000; valaddr_reg:x3; val_offset:22500*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22500*0 + 3*588*FLEN/8, x4, x1, x2)

inst_7501:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fc00000000000; valaddr_reg:x3; val_offset:22503*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22503*0 + 3*589*FLEN/8, x4, x1, x2)

inst_7502:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fe00000000000; valaddr_reg:x3; val_offset:22506*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22506*0 + 3*590*FLEN/8, x4, x1, x2)

inst_7503:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ff00000000000; valaddr_reg:x3; val_offset:22509*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22509*0 + 3*591*FLEN/8, x4, x1, x2)

inst_7504:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ff80000000000; valaddr_reg:x3; val_offset:22512*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22512*0 + 3*592*FLEN/8, x4, x1, x2)

inst_7505:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffc0000000000; valaddr_reg:x3; val_offset:22515*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22515*0 + 3*593*FLEN/8, x4, x1, x2)

inst_7506:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffe0000000000; valaddr_reg:x3; val_offset:22518*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22518*0 + 3*594*FLEN/8, x4, x1, x2)

inst_7507:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fff0000000000; valaddr_reg:x3; val_offset:22521*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22521*0 + 3*595*FLEN/8, x4, x1, x2)

inst_7508:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fff8000000000; valaddr_reg:x3; val_offset:22524*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22524*0 + 3*596*FLEN/8, x4, x1, x2)

inst_7509:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffc000000000; valaddr_reg:x3; val_offset:22527*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22527*0 + 3*597*FLEN/8, x4, x1, x2)

inst_7510:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffe000000000; valaddr_reg:x3; val_offset:22530*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22530*0 + 3*598*FLEN/8, x4, x1, x2)

inst_7511:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffff000000000; valaddr_reg:x3; val_offset:22533*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22533*0 + 3*599*FLEN/8, x4, x1, x2)

inst_7512:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffff800000000; valaddr_reg:x3; val_offset:22536*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22536*0 + 3*600*FLEN/8, x4, x1, x2)

inst_7513:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffc00000000; valaddr_reg:x3; val_offset:22539*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22539*0 + 3*601*FLEN/8, x4, x1, x2)

inst_7514:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffe00000000; valaddr_reg:x3; val_offset:22542*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22542*0 + 3*602*FLEN/8, x4, x1, x2)

inst_7515:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffff00000000; valaddr_reg:x3; val_offset:22545*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22545*0 + 3*603*FLEN/8, x4, x1, x2)

inst_7516:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffff80000000; valaddr_reg:x3; val_offset:22548*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22548*0 + 3*604*FLEN/8, x4, x1, x2)

inst_7517:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffc0000000; valaddr_reg:x3; val_offset:22551*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22551*0 + 3*605*FLEN/8, x4, x1, x2)

inst_7518:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffe0000000; valaddr_reg:x3; val_offset:22554*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22554*0 + 3*606*FLEN/8, x4, x1, x2)

inst_7519:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffff0000000; valaddr_reg:x3; val_offset:22557*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22557*0 + 3*607*FLEN/8, x4, x1, x2)

inst_7520:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffff8000000; valaddr_reg:x3; val_offset:22560*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22560*0 + 3*608*FLEN/8, x4, x1, x2)

inst_7521:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffc000000; valaddr_reg:x3; val_offset:22563*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22563*0 + 3*609*FLEN/8, x4, x1, x2)

inst_7522:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffe000000; valaddr_reg:x3; val_offset:22566*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22566*0 + 3*610*FLEN/8, x4, x1, x2)

inst_7523:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffff000000; valaddr_reg:x3; val_offset:22569*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22569*0 + 3*611*FLEN/8, x4, x1, x2)

inst_7524:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffff800000; valaddr_reg:x3; val_offset:22572*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22572*0 + 3*612*FLEN/8, x4, x1, x2)

inst_7525:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffc00000; valaddr_reg:x3; val_offset:22575*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22575*0 + 3*613*FLEN/8, x4, x1, x2)

inst_7526:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffe00000; valaddr_reg:x3; val_offset:22578*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22578*0 + 3*614*FLEN/8, x4, x1, x2)

inst_7527:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffff00000; valaddr_reg:x3; val_offset:22581*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22581*0 + 3*615*FLEN/8, x4, x1, x2)

inst_7528:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffff80000; valaddr_reg:x3; val_offset:22584*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22584*0 + 3*616*FLEN/8, x4, x1, x2)

inst_7529:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffffc0000; valaddr_reg:x3; val_offset:22587*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22587*0 + 3*617*FLEN/8, x4, x1, x2)

inst_7530:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffffe0000; valaddr_reg:x3; val_offset:22590*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22590*0 + 3*618*FLEN/8, x4, x1, x2)

inst_7531:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffff0000; valaddr_reg:x3; val_offset:22593*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22593*0 + 3*619*FLEN/8, x4, x1, x2)

inst_7532:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffff8000; valaddr_reg:x3; val_offset:22596*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22596*0 + 3*620*FLEN/8, x4, x1, x2)

inst_7533:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffffc000; valaddr_reg:x3; val_offset:22599*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22599*0 + 3*621*FLEN/8, x4, x1, x2)

inst_7534:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffffe000; valaddr_reg:x3; val_offset:22602*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22602*0 + 3*622*FLEN/8, x4, x1, x2)

inst_7535:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffffff000; valaddr_reg:x3; val_offset:22605*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22605*0 + 3*623*FLEN/8, x4, x1, x2)

inst_7536:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffffff800; valaddr_reg:x3; val_offset:22608*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22608*0 + 3*624*FLEN/8, x4, x1, x2)

inst_7537:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffffffc00; valaddr_reg:x3; val_offset:22611*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22611*0 + 3*625*FLEN/8, x4, x1, x2)

inst_7538:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffffffe00; valaddr_reg:x3; val_offset:22614*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22614*0 + 3*626*FLEN/8, x4, x1, x2)

inst_7539:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffffff00; valaddr_reg:x3; val_offset:22617*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22617*0 + 3*627*FLEN/8, x4, x1, x2)

inst_7540:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffffff80; valaddr_reg:x3; val_offset:22620*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22620*0 + 3*628*FLEN/8, x4, x1, x2)

inst_7541:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffffffc0; valaddr_reg:x3; val_offset:22623*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22623*0 + 3*629*FLEN/8, x4, x1, x2)

inst_7542:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffffffe0; valaddr_reg:x3; val_offset:22626*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22626*0 + 3*630*FLEN/8, x4, x1, x2)

inst_7543:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffffffff0; valaddr_reg:x3; val_offset:22629*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22629*0 + 3*631*FLEN/8, x4, x1, x2)

inst_7544:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffffffff8; valaddr_reg:x3; val_offset:22632*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22632*0 + 3*632*FLEN/8, x4, x1, x2)

inst_7545:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffffffffc; valaddr_reg:x3; val_offset:22635*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22635*0 + 3*633*FLEN/8, x4, x1, x2)

inst_7546:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30ffffffffffffe; valaddr_reg:x3; val_offset:22638*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22638*0 + 3*634*FLEN/8, x4, x1, x2)

inst_7547:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x04dff792c7a27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f704dff792c7a27; op2val:0x0;
op3val:0x30fffffffffffff; valaddr_reg:x3; val_offset:22641*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22641*0 + 3*635*FLEN/8, x4, x1, x2)

inst_7548:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000000000000; valaddr_reg:x3; val_offset:22644*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22644*0 + 3*636*FLEN/8, x4, x1, x2)

inst_7549:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000000000001; valaddr_reg:x3; val_offset:22647*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22647*0 + 3*637*FLEN/8, x4, x1, x2)

inst_7550:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000000000003; valaddr_reg:x3; val_offset:22650*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22650*0 + 3*638*FLEN/8, x4, x1, x2)

inst_7551:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000000000007; valaddr_reg:x3; val_offset:22653*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22653*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_7552:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000000000000f; valaddr_reg:x3; val_offset:22656*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22656*0 + 3*640*FLEN/8, x4, x1, x2)

inst_7553:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000000000001f; valaddr_reg:x3; val_offset:22659*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22659*0 + 3*641*FLEN/8, x4, x1, x2)

inst_7554:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000000000003f; valaddr_reg:x3; val_offset:22662*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22662*0 + 3*642*FLEN/8, x4, x1, x2)

inst_7555:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000000000007f; valaddr_reg:x3; val_offset:22665*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22665*0 + 3*643*FLEN/8, x4, x1, x2)

inst_7556:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00000000000ff; valaddr_reg:x3; val_offset:22668*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22668*0 + 3*644*FLEN/8, x4, x1, x2)

inst_7557:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00000000001ff; valaddr_reg:x3; val_offset:22671*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22671*0 + 3*645*FLEN/8, x4, x1, x2)

inst_7558:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00000000003ff; valaddr_reg:x3; val_offset:22674*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22674*0 + 3*646*FLEN/8, x4, x1, x2)

inst_7559:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00000000007ff; valaddr_reg:x3; val_offset:22677*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22677*0 + 3*647*FLEN/8, x4, x1, x2)

inst_7560:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000000000fff; valaddr_reg:x3; val_offset:22680*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22680*0 + 3*648*FLEN/8, x4, x1, x2)

inst_7561:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000000001fff; valaddr_reg:x3; val_offset:22683*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22683*0 + 3*649*FLEN/8, x4, x1, x2)

inst_7562:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000000003fff; valaddr_reg:x3; val_offset:22686*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22686*0 + 3*650*FLEN/8, x4, x1, x2)

inst_7563:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000000007fff; valaddr_reg:x3; val_offset:22689*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22689*0 + 3*651*FLEN/8, x4, x1, x2)

inst_7564:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000000000ffff; valaddr_reg:x3; val_offset:22692*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22692*0 + 3*652*FLEN/8, x4, x1, x2)

inst_7565:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000000001ffff; valaddr_reg:x3; val_offset:22695*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22695*0 + 3*653*FLEN/8, x4, x1, x2)

inst_7566:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000000003ffff; valaddr_reg:x3; val_offset:22698*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22698*0 + 3*654*FLEN/8, x4, x1, x2)

inst_7567:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000000007ffff; valaddr_reg:x3; val_offset:22701*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22701*0 + 3*655*FLEN/8, x4, x1, x2)

inst_7568:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00000000fffff; valaddr_reg:x3; val_offset:22704*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22704*0 + 3*656*FLEN/8, x4, x1, x2)

inst_7569:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00000001fffff; valaddr_reg:x3; val_offset:22707*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22707*0 + 3*657*FLEN/8, x4, x1, x2)

inst_7570:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00000003fffff; valaddr_reg:x3; val_offset:22710*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22710*0 + 3*658*FLEN/8, x4, x1, x2)

inst_7571:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00000007fffff; valaddr_reg:x3; val_offset:22713*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22713*0 + 3*659*FLEN/8, x4, x1, x2)

inst_7572:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000000ffffff; valaddr_reg:x3; val_offset:22716*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22716*0 + 3*660*FLEN/8, x4, x1, x2)

inst_7573:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000001ffffff; valaddr_reg:x3; val_offset:22719*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22719*0 + 3*661*FLEN/8, x4, x1, x2)

inst_7574:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000003ffffff; valaddr_reg:x3; val_offset:22722*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22722*0 + 3*662*FLEN/8, x4, x1, x2)

inst_7575:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000007ffffff; valaddr_reg:x3; val_offset:22725*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22725*0 + 3*663*FLEN/8, x4, x1, x2)

inst_7576:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000000fffffff; valaddr_reg:x3; val_offset:22728*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22728*0 + 3*664*FLEN/8, x4, x1, x2)

inst_7577:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000001fffffff; valaddr_reg:x3; val_offset:22731*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22731*0 + 3*665*FLEN/8, x4, x1, x2)

inst_7578:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000003fffffff; valaddr_reg:x3; val_offset:22734*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22734*0 + 3*666*FLEN/8, x4, x1, x2)

inst_7579:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000007fffffff; valaddr_reg:x3; val_offset:22737*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22737*0 + 3*667*FLEN/8, x4, x1, x2)

inst_7580:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00000ffffffff; valaddr_reg:x3; val_offset:22740*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22740*0 + 3*668*FLEN/8, x4, x1, x2)

inst_7581:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00001ffffffff; valaddr_reg:x3; val_offset:22743*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22743*0 + 3*669*FLEN/8, x4, x1, x2)

inst_7582:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00003ffffffff; valaddr_reg:x3; val_offset:22746*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22746*0 + 3*670*FLEN/8, x4, x1, x2)

inst_7583:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00007ffffffff; valaddr_reg:x3; val_offset:22749*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22749*0 + 3*671*FLEN/8, x4, x1, x2)

inst_7584:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0000fffffffff; valaddr_reg:x3; val_offset:22752*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22752*0 + 3*672*FLEN/8, x4, x1, x2)

inst_7585:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0001fffffffff; valaddr_reg:x3; val_offset:22755*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22755*0 + 3*673*FLEN/8, x4, x1, x2)

inst_7586:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0003fffffffff; valaddr_reg:x3; val_offset:22758*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22758*0 + 3*674*FLEN/8, x4, x1, x2)

inst_7587:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0007fffffffff; valaddr_reg:x3; val_offset:22761*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22761*0 + 3*675*FLEN/8, x4, x1, x2)

inst_7588:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae000ffffffffff; valaddr_reg:x3; val_offset:22764*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22764*0 + 3*676*FLEN/8, x4, x1, x2)

inst_7589:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae001ffffffffff; valaddr_reg:x3; val_offset:22767*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22767*0 + 3*677*FLEN/8, x4, x1, x2)

inst_7590:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae003ffffffffff; valaddr_reg:x3; val_offset:22770*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22770*0 + 3*678*FLEN/8, x4, x1, x2)

inst_7591:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae007ffffffffff; valaddr_reg:x3; val_offset:22773*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22773*0 + 3*679*FLEN/8, x4, x1, x2)

inst_7592:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae00fffffffffff; valaddr_reg:x3; val_offset:22776*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22776*0 + 3*680*FLEN/8, x4, x1, x2)

inst_7593:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae01fffffffffff; valaddr_reg:x3; val_offset:22779*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22779*0 + 3*681*FLEN/8, x4, x1, x2)

inst_7594:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae03fffffffffff; valaddr_reg:x3; val_offset:22782*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22782*0 + 3*682*FLEN/8, x4, x1, x2)

inst_7595:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae07fffffffffff; valaddr_reg:x3; val_offset:22785*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22785*0 + 3*683*FLEN/8, x4, x1, x2)

inst_7596:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae0ffffffffffff; valaddr_reg:x3; val_offset:22788*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22788*0 + 3*684*FLEN/8, x4, x1, x2)

inst_7597:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae1ffffffffffff; valaddr_reg:x3; val_offset:22791*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22791*0 + 3*685*FLEN/8, x4, x1, x2)

inst_7598:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae3ffffffffffff; valaddr_reg:x3; val_offset:22794*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22794*0 + 3*686*FLEN/8, x4, x1, x2)

inst_7599:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae7ffffffffffff; valaddr_reg:x3; val_offset:22797*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22797*0 + 3*687*FLEN/8, x4, x1, x2)

inst_7600:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbae8000000000000; valaddr_reg:x3; val_offset:22800*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22800*0 + 3*688*FLEN/8, x4, x1, x2)

inst_7601:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaec000000000000; valaddr_reg:x3; val_offset:22803*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22803*0 + 3*689*FLEN/8, x4, x1, x2)

inst_7602:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaee000000000000; valaddr_reg:x3; val_offset:22806*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22806*0 + 3*690*FLEN/8, x4, x1, x2)

inst_7603:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaef000000000000; valaddr_reg:x3; val_offset:22809*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22809*0 + 3*691*FLEN/8, x4, x1, x2)

inst_7604:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaef800000000000; valaddr_reg:x3; val_offset:22812*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22812*0 + 3*692*FLEN/8, x4, x1, x2)

inst_7605:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefc00000000000; valaddr_reg:x3; val_offset:22815*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22815*0 + 3*693*FLEN/8, x4, x1, x2)

inst_7606:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefe00000000000; valaddr_reg:x3; val_offset:22818*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22818*0 + 3*694*FLEN/8, x4, x1, x2)

inst_7607:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeff00000000000; valaddr_reg:x3; val_offset:22821*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22821*0 + 3*695*FLEN/8, x4, x1, x2)

inst_7608:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeff80000000000; valaddr_reg:x3; val_offset:22824*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22824*0 + 3*696*FLEN/8, x4, x1, x2)

inst_7609:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffc0000000000; valaddr_reg:x3; val_offset:22827*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22827*0 + 3*697*FLEN/8, x4, x1, x2)

inst_7610:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffe0000000000; valaddr_reg:x3; val_offset:22830*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22830*0 + 3*698*FLEN/8, x4, x1, x2)

inst_7611:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefff0000000000; valaddr_reg:x3; val_offset:22833*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22833*0 + 3*699*FLEN/8, x4, x1, x2)

inst_7612:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefff8000000000; valaddr_reg:x3; val_offset:22836*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22836*0 + 3*700*FLEN/8, x4, x1, x2)

inst_7613:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffc000000000; valaddr_reg:x3; val_offset:22839*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22839*0 + 3*701*FLEN/8, x4, x1, x2)

inst_7614:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffe000000000; valaddr_reg:x3; val_offset:22842*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22842*0 + 3*702*FLEN/8, x4, x1, x2)

inst_7615:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffff000000000; valaddr_reg:x3; val_offset:22845*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22845*0 + 3*703*FLEN/8, x4, x1, x2)

inst_7616:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffff800000000; valaddr_reg:x3; val_offset:22848*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22848*0 + 3*704*FLEN/8, x4, x1, x2)

inst_7617:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffc00000000; valaddr_reg:x3; val_offset:22851*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22851*0 + 3*705*FLEN/8, x4, x1, x2)

inst_7618:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffe00000000; valaddr_reg:x3; val_offset:22854*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22854*0 + 3*706*FLEN/8, x4, x1, x2)

inst_7619:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffff00000000; valaddr_reg:x3; val_offset:22857*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22857*0 + 3*707*FLEN/8, x4, x1, x2)

inst_7620:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffff80000000; valaddr_reg:x3; val_offset:22860*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22860*0 + 3*708*FLEN/8, x4, x1, x2)

inst_7621:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffc0000000; valaddr_reg:x3; val_offset:22863*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22863*0 + 3*709*FLEN/8, x4, x1, x2)

inst_7622:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffe0000000; valaddr_reg:x3; val_offset:22866*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22866*0 + 3*710*FLEN/8, x4, x1, x2)

inst_7623:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffff0000000; valaddr_reg:x3; val_offset:22869*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22869*0 + 3*711*FLEN/8, x4, x1, x2)

inst_7624:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffff8000000; valaddr_reg:x3; val_offset:22872*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22872*0 + 3*712*FLEN/8, x4, x1, x2)

inst_7625:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffc000000; valaddr_reg:x3; val_offset:22875*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22875*0 + 3*713*FLEN/8, x4, x1, x2)

inst_7626:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffe000000; valaddr_reg:x3; val_offset:22878*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22878*0 + 3*714*FLEN/8, x4, x1, x2)

inst_7627:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffff000000; valaddr_reg:x3; val_offset:22881*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22881*0 + 3*715*FLEN/8, x4, x1, x2)

inst_7628:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffff800000; valaddr_reg:x3; val_offset:22884*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22884*0 + 3*716*FLEN/8, x4, x1, x2)

inst_7629:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffc00000; valaddr_reg:x3; val_offset:22887*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22887*0 + 3*717*FLEN/8, x4, x1, x2)

inst_7630:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffe00000; valaddr_reg:x3; val_offset:22890*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22890*0 + 3*718*FLEN/8, x4, x1, x2)

inst_7631:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffff00000; valaddr_reg:x3; val_offset:22893*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22893*0 + 3*719*FLEN/8, x4, x1, x2)

inst_7632:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffff80000; valaddr_reg:x3; val_offset:22896*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22896*0 + 3*720*FLEN/8, x4, x1, x2)

inst_7633:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffffc0000; valaddr_reg:x3; val_offset:22899*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22899*0 + 3*721*FLEN/8, x4, x1, x2)

inst_7634:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffffe0000; valaddr_reg:x3; val_offset:22902*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22902*0 + 3*722*FLEN/8, x4, x1, x2)

inst_7635:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffff0000; valaddr_reg:x3; val_offset:22905*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22905*0 + 3*723*FLEN/8, x4, x1, x2)

inst_7636:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffff8000; valaddr_reg:x3; val_offset:22908*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22908*0 + 3*724*FLEN/8, x4, x1, x2)

inst_7637:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffffc000; valaddr_reg:x3; val_offset:22911*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22911*0 + 3*725*FLEN/8, x4, x1, x2)

inst_7638:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffffe000; valaddr_reg:x3; val_offset:22914*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22914*0 + 3*726*FLEN/8, x4, x1, x2)

inst_7639:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffffff000; valaddr_reg:x3; val_offset:22917*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22917*0 + 3*727*FLEN/8, x4, x1, x2)

inst_7640:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffffff800; valaddr_reg:x3; val_offset:22920*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22920*0 + 3*728*FLEN/8, x4, x1, x2)

inst_7641:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffffffc00; valaddr_reg:x3; val_offset:22923*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22923*0 + 3*729*FLEN/8, x4, x1, x2)

inst_7642:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffffffe00; valaddr_reg:x3; val_offset:22926*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22926*0 + 3*730*FLEN/8, x4, x1, x2)

inst_7643:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffffff00; valaddr_reg:x3; val_offset:22929*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22929*0 + 3*731*FLEN/8, x4, x1, x2)

inst_7644:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffffff80; valaddr_reg:x3; val_offset:22932*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22932*0 + 3*732*FLEN/8, x4, x1, x2)

inst_7645:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffffffc0; valaddr_reg:x3; val_offset:22935*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22935*0 + 3*733*FLEN/8, x4, x1, x2)

inst_7646:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffffffe0; valaddr_reg:x3; val_offset:22938*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22938*0 + 3*734*FLEN/8, x4, x1, x2)

inst_7647:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffffffff0; valaddr_reg:x3; val_offset:22941*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22941*0 + 3*735*FLEN/8, x4, x1, x2)

inst_7648:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffffffff8; valaddr_reg:x3; val_offset:22944*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22944*0 + 3*736*FLEN/8, x4, x1, x2)

inst_7649:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffffffffc; valaddr_reg:x3; val_offset:22947*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22947*0 + 3*737*FLEN/8, x4, x1, x2)

inst_7650:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaeffffffffffffe; valaddr_reg:x3; val_offset:22950*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22950*0 + 3*738*FLEN/8, x4, x1, x2)

inst_7651:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3ae and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbaefffffffffffff; valaddr_reg:x3; val_offset:22953*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22953*0 + 3*739*FLEN/8, x4, x1, x2)

inst_7652:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:22956*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22956*0 + 3*740*FLEN/8, x4, x1, x2)

inst_7653:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:22959*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22959*0 + 3*741*FLEN/8, x4, x1, x2)

inst_7654:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:22962*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22962*0 + 3*742*FLEN/8, x4, x1, x2)

inst_7655:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:22965*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22965*0 + 3*743*FLEN/8, x4, x1, x2)

inst_7656:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:22968*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22968*0 + 3*744*FLEN/8, x4, x1, x2)

inst_7657:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:22971*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22971*0 + 3*745*FLEN/8, x4, x1, x2)

inst_7658:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:22974*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22974*0 + 3*746*FLEN/8, x4, x1, x2)

inst_7659:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:22977*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22977*0 + 3*747*FLEN/8, x4, x1, x2)

inst_7660:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:22980*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22980*0 + 3*748*FLEN/8, x4, x1, x2)

inst_7661:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:22983*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22983*0 + 3*749*FLEN/8, x4, x1, x2)

inst_7662:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:22986*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22986*0 + 3*750*FLEN/8, x4, x1, x2)

inst_7663:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:22989*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22989*0 + 3*751*FLEN/8, x4, x1, x2)

inst_7664:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:22992*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22992*0 + 3*752*FLEN/8, x4, x1, x2)

inst_7665:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:22995*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22995*0 + 3*753*FLEN/8, x4, x1, x2)

inst_7666:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:22998*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 22998*0 + 3*754*FLEN/8, x4, x1, x2)

inst_7667:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:23001*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23001*0 + 3*755*FLEN/8, x4, x1, x2)

inst_7668:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:23004*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23004*0 + 3*756*FLEN/8, x4, x1, x2)

inst_7669:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:23007*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23007*0 + 3*757*FLEN/8, x4, x1, x2)

inst_7670:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:23010*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23010*0 + 3*758*FLEN/8, x4, x1, x2)

inst_7671:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:23013*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23013*0 + 3*759*FLEN/8, x4, x1, x2)

inst_7672:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:23016*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23016*0 + 3*760*FLEN/8, x4, x1, x2)

inst_7673:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xf51cbbed892da and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7058fe9a4daa6f; op2val:0x9fff51cbbed892da;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:23019*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23019*0 + 3*761*FLEN/8, x4, x1, x2)

inst_7674:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000000000000; valaddr_reg:x3; val_offset:23022*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23022*0 + 3*762*FLEN/8, x4, x1, x2)

inst_7675:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000000000001; valaddr_reg:x3; val_offset:23025*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23025*0 + 3*763*FLEN/8, x4, x1, x2)

inst_7676:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000000000003; valaddr_reg:x3; val_offset:23028*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23028*0 + 3*764*FLEN/8, x4, x1, x2)

inst_7677:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000000000007; valaddr_reg:x3; val_offset:23031*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23031*0 + 3*765*FLEN/8, x4, x1, x2)

inst_7678:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000000000000f; valaddr_reg:x3; val_offset:23034*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23034*0 + 3*766*FLEN/8, x4, x1, x2)

inst_7679:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000000000001f; valaddr_reg:x3; val_offset:23037*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23037*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6876668352088650351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9399012422322225120,64,FLEN)
NAN_BOXED(6876668352088650351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9399012422322225136,64,FLEN)
NAN_BOXED(6876668352088650351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9399012422322225144,64,FLEN)
NAN_BOXED(6876668352088650351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9399012422322225148,64,FLEN)
NAN_BOXED(6876668352088650351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9399012422322225150,64,FLEN)
NAN_BOXED(6876668352088650351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9399012422322225151,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123964416,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123964417,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123964419,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123964423,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123964431,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123964447,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123964479,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123964543,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123964671,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123964927,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123965439,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123966463,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123968511,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123972607,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123980799,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266123997183,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266124029951,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266124095487,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266124226559,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266124488703,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266125012991,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266126061567,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266128158719,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266132353023,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266140741631,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266157518847,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266191073279,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266258182143,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266392399871,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225266660835327,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225267197706239,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225268271448063,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225270418931711,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225274713899007,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225283303833599,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225300483702783,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225334843441151,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225403562917887,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225541001871359,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035225815879778303,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035226365635592191,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035227465147219967,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035229664170475519,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035234062216986623,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035242858310008831,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035260450496053247,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035295634868142079,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035366003612319743,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035506741100675071,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4035788216077385727,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4036351166030807039,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4037477065937649663,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4037477065937649664,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4038602965844492288,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039165915797913600,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039447390774624256,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039588128262979584,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039658497007157248,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039693681379246080,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039711273565290496,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039720069658312704,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039724467704823808,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039726666728079360,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039727766239707136,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728315995521024,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728590873427968,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728728312381440,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728797031858176,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728831391596544,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728848571465728,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728857161400320,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728861456367616,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728863603851264,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728864677593088,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865214464000,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865482899456,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865617117184,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865684226048,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865717780480,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865734557696,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865742946304,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865747140608,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865749237760,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865750286336,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865750810624,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751072768,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751203840,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751269376,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751302144,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751318528,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751326720,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751330816,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751332864,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751333888,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751334400,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751334656,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751334784,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751334848,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751334880,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751334896,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751334904,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751334908,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751334910,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4039728865751334911,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6876786574348752015,64,FLEN)
NAN_BOXED(2337475742776372227,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427225600,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427225601,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427225603,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427225607,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427225615,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427225631,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427225663,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427225727,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427225855,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427226111,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427226623,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427227647,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427229695,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427233791,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427241983,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427258367,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427291135,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427356671,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427487743,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891427749887,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891428274175,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891429322751,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891431419903,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891435614207,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891444002815,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891460780031,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891494334463,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891561443327,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891695661055,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208891964096511,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208892500967423,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208893574709247,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208895722192895,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208900017160191,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208908607094783,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208925786963967,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398208960146702335,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398209028866179071,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398209166305132543,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398209441183039487,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398209990938853375,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398211090450481151,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398213289473736703,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398217687520247807,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398226483613270015,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398244075799314431,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398279260171403263,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398349628915580927,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398490366403936255,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13398771841380646911,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13399334791334068223,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13400460691240910847,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13400460691240910848,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13401586591147753472,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402149541101174784,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402431016077885440,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402571753566240768,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402642122310418432,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402677306682507264,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402694898868551680,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402703694961573888,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402708093008084992,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402710292031340544,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402711391542968320,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402711941298782208,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712216176689152,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712353615642624,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712422335119360,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712456694857728,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712473874726912,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712482464661504,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712486759628800,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712488907112448,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712489980854272,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712490517725184,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712490786160640,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712490920378368,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712490987487232,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491021041664,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491037818880,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491046207488,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491050401792,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491052498944,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491053547520,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054071808,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054333952,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054465024,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054530560,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054563328,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054579712,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054587904,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054592000,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054594048,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054595072,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054595584,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054595840,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054595968,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054596032,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054596064,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054596080,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054596088,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054596092,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054596094,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13402712491054596095,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(11529314008024561337,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821114880,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821114881,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821114883,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821114887,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821114895,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821114911,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821114943,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821115007,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821115135,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821115391,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821115903,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821116927,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821118975,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821123071,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821131263,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821147647,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821180415,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821245951,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821377023,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988821639167,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988822163455,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988823212031,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988825309183,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988829503487,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988837892095,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988854669311,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988888223743,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107988955332607,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107989089550335,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107989357985791,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107989894856703,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107990968598527,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107993116082175,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135107997411049471,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135108006000984063,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135108023180853247,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135108057540591615,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135108126260068351,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135108263699021823,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135108538576928767,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135109088332742655,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135110187844370431,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135112386867625983,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135116784914137087,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135125581007159295,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135143173193203711,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135178357565292543,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135248726309470207,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135389463797825535,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(135670938774536191,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(136233888727957503,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(137359788634800127,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(137359788634800128,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(138485688541642752,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139048638495064064,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139330113471774720,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139470850960130048,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139541219704307712,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139576404076396544,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139593996262440960,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139602792355463168,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139607190401974272,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139609389425229824,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139610488936857600,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611038692671488,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611313570578432,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611451009531904,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611519729008640,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611554088747008,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611571268616192,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611579858550784,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611584153518080,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611586301001728,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611587374743552,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611587911614464,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588180049920,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588314267648,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588381376512,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588414930944,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588431708160,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588440096768,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588444291072,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588446388224,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588447436800,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588447961088,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448223232,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448354304,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448419840,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448452608,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448468992,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448477184,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448481280,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448483328,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448484352,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448484864,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448485120,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448485248,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448485312,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448485344,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448485360,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448485368,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448485372,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448485374,64,FLEN)
NAN_BOXED(6876964866281018207,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(139611588448485375,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931328,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931329,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931331,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931335,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931343,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931359,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931391,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931455,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931583,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931839,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976932351,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976933375,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976935423,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976939519,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976947711,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976964095,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976996863,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977062399,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977193471,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977455615,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977979903,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783979028479,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783981125631,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783985319935,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783993708543,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784010485759,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784044040191,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784111149055,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784245366783,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784513802239,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654785050673151,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654786124414975,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654788271898623,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654792566865919,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654801156800511,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654818336669695,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654852696408063,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654921415884799,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193655058854838271,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193655333732745215,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193655883488559103,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193656983000186879,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193659182023442431,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193663580069953535,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193672376162975743,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193689968349020159,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193725152721108991,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193795521465286655,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193936258953641983,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(194217733930352639,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(194780683883773951,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(195906583790616575,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(195906583790616576,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(197032483697459200,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(197595433650880512,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(197876908627591168,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198017646115946496,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198088014860124160,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198123199232212992,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198140791418257408,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198149587511279616,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198153985557790720,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198156184581046272,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198157284092674048,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198157833848487936,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158108726394880,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158246165348352,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158314884825088,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158349244563456,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158366424432640,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158375014367232,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158379309334528,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158381456818176,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158382530560000,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383067430912,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383335866368,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383470084096,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383537192960,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383570747392,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383587524608,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383595913216,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383600107520,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383602204672,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383603253248,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383603777536,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604039680,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604170752,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604236288,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604269056,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604285440,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604293632,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604297728,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604299776,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604300800,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301312,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301568,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301696,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301760,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301792,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301808,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301816,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301820,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301822,64,FLEN)
NAN_BOXED(6877031526632863927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301823,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5404319552844595,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5790342378047780,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6305039478318694,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6433713753386422,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6605279453476727,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6905519428634760,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7205759403792793,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7720456504063707,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8106479329266892,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8363827879402349,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740928,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740960,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740976,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740984,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740988,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740990,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783808,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783809,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783811,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783815,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783823,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783839,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783871,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783935,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113784063,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113784319,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113784831,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113785855,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113787903,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113791999,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113800191,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113816575,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113849343,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113914879,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782114045951,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782114308095,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782114832383,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782115880959,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782117978111,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782122172415,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782130561023,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782147338239,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782180892671,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782248001535,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782382219263,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782650654719,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172783187525631,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172784261267455,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172786408751103,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172790703718399,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172799293652991,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172816473522175,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172850833260543,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172919552737279,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216173056991690751,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216173331869597695,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216173881625411583,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216174981137039359,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216177180160294911,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216181578206806015,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216190374299828223,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216207966485872639,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216243150857961471,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216313519602139135,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216454257090494463,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216735732067205119,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(217298682020626431,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(218424581927469055,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(218424581927469056,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(219550481834311680,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220113431787732992,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220394906764443648,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220535644252798976,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220606012996976640,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220641197369065472,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220658789555109888,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220667585648132096,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220671983694643200,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220674182717898752,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220675282229526528,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220675831985340416,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676106863247360,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676244302200832,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676313021677568,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676347381415936,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676364561285120,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676373151219712,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676377446187008,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676379593670656,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676380667412480,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381204283392,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381472718848,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381606936576,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381674045440,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381707599872,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381724377088,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381732765696,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381736960000,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381739057152,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381740105728,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381740630016,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381740892160,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741023232,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741088768,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741121536,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741137920,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741146112,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741150208,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741152256,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741153280,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741153792,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154048,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154176,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154240,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154272,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154288,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154296,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154300,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154302,64,FLEN)
NAN_BOXED(6877082390639704615,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154303,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837783040,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837783041,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837783043,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837783047,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837783055,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837783071,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837783103,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837783167,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837783295,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837783551,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837784063,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837785087,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837787135,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837791231,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837799423,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837815807,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837848575,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885837914111,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885838045183,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885838307327,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885838831615,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885839880191,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885841977343,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885846171647,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885854560255,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885871337471,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885904891903,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762885972000767,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762886106218495,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762886374653951,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762886911524863,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762887985266687,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762890132750335,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762894427717631,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762903017652223,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762920197521407,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465762954557259775,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465763023276736511,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465763160715689983,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465763435593596927,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465763985349410815,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465765084861038591,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465767283884294143,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465771681930805247,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465780478023827455,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465798070209871871,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465833254581960703,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13465903623326138367,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13466044360814493695,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13466325835791204351,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13466888785744625663,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13468014685651468287,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13468014685651468288,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13469140585558310912,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13469703535511732224,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13469985010488442880,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470125747976798208,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470196116720975872,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470231301093064704,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470248893279109120,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470257689372131328,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470262087418642432,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470264286441897984,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470265385953525760,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470265935709339648,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266210587246592,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266348026200064,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266416745676800,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266451105415168,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266468285284352,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266476875218944,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266481170186240,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266483317669888,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266484391411712,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266484928282624,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485196718080,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485330935808,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485398044672,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485431599104,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485448376320,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485456764928,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485460959232,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485463056384,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485464104960,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485464629248,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485464891392,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465022464,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465088000,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465120768,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465137152,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465145344,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465149440,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465151488,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465152512,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465153024,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465153280,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465153408,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465153472,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465153504,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465153520,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465153528,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465153532,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465153534,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13470266485465153535,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(11529023506613834458,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393564672,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393564673,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393564675,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393564679,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393564687,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393564703,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
