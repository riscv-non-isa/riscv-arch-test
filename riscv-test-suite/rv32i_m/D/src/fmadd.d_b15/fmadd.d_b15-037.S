
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27648:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffff800000; valaddr_reg:x3; val_offset:82944*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82944*0 + 3*0*FLEN/8, x4, x1, x2)

inst_27649:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffc00000; valaddr_reg:x3; val_offset:82947*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82947*0 + 3*1*FLEN/8, x4, x1, x2)

inst_27650:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffe00000; valaddr_reg:x3; val_offset:82950*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82950*0 + 3*2*FLEN/8, x4, x1, x2)

inst_27651:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffff00000; valaddr_reg:x3; val_offset:82953*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82953*0 + 3*3*FLEN/8, x4, x1, x2)

inst_27652:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffff80000; valaddr_reg:x3; val_offset:82956*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82956*0 + 3*4*FLEN/8, x4, x1, x2)

inst_27653:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffffc0000; valaddr_reg:x3; val_offset:82959*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82959*0 + 3*5*FLEN/8, x4, x1, x2)

inst_27654:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffffe0000; valaddr_reg:x3; val_offset:82962*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82962*0 + 3*6*FLEN/8, x4, x1, x2)

inst_27655:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffff0000; valaddr_reg:x3; val_offset:82965*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82965*0 + 3*7*FLEN/8, x4, x1, x2)

inst_27656:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffff8000; valaddr_reg:x3; val_offset:82968*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82968*0 + 3*8*FLEN/8, x4, x1, x2)

inst_27657:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffffc000; valaddr_reg:x3; val_offset:82971*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82971*0 + 3*9*FLEN/8, x4, x1, x2)

inst_27658:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffffe000; valaddr_reg:x3; val_offset:82974*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82974*0 + 3*10*FLEN/8, x4, x1, x2)

inst_27659:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffffff000; valaddr_reg:x3; val_offset:82977*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82977*0 + 3*11*FLEN/8, x4, x1, x2)

inst_27660:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffffff800; valaddr_reg:x3; val_offset:82980*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82980*0 + 3*12*FLEN/8, x4, x1, x2)

inst_27661:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffffffc00; valaddr_reg:x3; val_offset:82983*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82983*0 + 3*13*FLEN/8, x4, x1, x2)

inst_27662:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffffffe00; valaddr_reg:x3; val_offset:82986*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82986*0 + 3*14*FLEN/8, x4, x1, x2)

inst_27663:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffffff00; valaddr_reg:x3; val_offset:82989*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82989*0 + 3*15*FLEN/8, x4, x1, x2)

inst_27664:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffffff80; valaddr_reg:x3; val_offset:82992*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82992*0 + 3*16*FLEN/8, x4, x1, x2)

inst_27665:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffffffc0; valaddr_reg:x3; val_offset:82995*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82995*0 + 3*17*FLEN/8, x4, x1, x2)

inst_27666:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffffffe0; valaddr_reg:x3; val_offset:82998*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82998*0 + 3*18*FLEN/8, x4, x1, x2)

inst_27667:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffffffff0; valaddr_reg:x3; val_offset:83001*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83001*0 + 3*19*FLEN/8, x4, x1, x2)

inst_27668:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffffffff8; valaddr_reg:x3; val_offset:83004*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83004*0 + 3*20*FLEN/8, x4, x1, x2)

inst_27669:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffffffffc; valaddr_reg:x3; val_offset:83007*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83007*0 + 3*21*FLEN/8, x4, x1, x2)

inst_27670:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dffffffffffffe; valaddr_reg:x3; val_offset:83010*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83010*0 + 3*22*FLEN/8, x4, x1, x2)

inst_27671:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x05a1c103b0ac1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f905a1c103b0ac1; op2val:0x0;
op3val:0x3dfffffffffffff; valaddr_reg:x3; val_offset:83013*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83013*0 + 3*23*FLEN/8, x4, x1, x2)

inst_27672:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000000000000; valaddr_reg:x3; val_offset:83016*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83016*0 + 3*24*FLEN/8, x4, x1, x2)

inst_27673:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000000000001; valaddr_reg:x3; val_offset:83019*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83019*0 + 3*25*FLEN/8, x4, x1, x2)

inst_27674:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000000000003; valaddr_reg:x3; val_offset:83022*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83022*0 + 3*26*FLEN/8, x4, x1, x2)

inst_27675:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000000000007; valaddr_reg:x3; val_offset:83025*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83025*0 + 3*27*FLEN/8, x4, x1, x2)

inst_27676:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000000000000f; valaddr_reg:x3; val_offset:83028*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83028*0 + 3*28*FLEN/8, x4, x1, x2)

inst_27677:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000000000001f; valaddr_reg:x3; val_offset:83031*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83031*0 + 3*29*FLEN/8, x4, x1, x2)

inst_27678:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000000000003f; valaddr_reg:x3; val_offset:83034*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83034*0 + 3*30*FLEN/8, x4, x1, x2)

inst_27679:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000000000007f; valaddr_reg:x3; val_offset:83037*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83037*0 + 3*31*FLEN/8, x4, x1, x2)

inst_27680:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600000000000ff; valaddr_reg:x3; val_offset:83040*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83040*0 + 3*32*FLEN/8, x4, x1, x2)

inst_27681:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600000000001ff; valaddr_reg:x3; val_offset:83043*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83043*0 + 3*33*FLEN/8, x4, x1, x2)

inst_27682:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600000000003ff; valaddr_reg:x3; val_offset:83046*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83046*0 + 3*34*FLEN/8, x4, x1, x2)

inst_27683:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600000000007ff; valaddr_reg:x3; val_offset:83049*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83049*0 + 3*35*FLEN/8, x4, x1, x2)

inst_27684:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000000000fff; valaddr_reg:x3; val_offset:83052*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83052*0 + 3*36*FLEN/8, x4, x1, x2)

inst_27685:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000000001fff; valaddr_reg:x3; val_offset:83055*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83055*0 + 3*37*FLEN/8, x4, x1, x2)

inst_27686:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000000003fff; valaddr_reg:x3; val_offset:83058*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83058*0 + 3*38*FLEN/8, x4, x1, x2)

inst_27687:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000000007fff; valaddr_reg:x3; val_offset:83061*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83061*0 + 3*39*FLEN/8, x4, x1, x2)

inst_27688:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000000000ffff; valaddr_reg:x3; val_offset:83064*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83064*0 + 3*40*FLEN/8, x4, x1, x2)

inst_27689:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000000001ffff; valaddr_reg:x3; val_offset:83067*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83067*0 + 3*41*FLEN/8, x4, x1, x2)

inst_27690:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000000003ffff; valaddr_reg:x3; val_offset:83070*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83070*0 + 3*42*FLEN/8, x4, x1, x2)

inst_27691:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000000007ffff; valaddr_reg:x3; val_offset:83073*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83073*0 + 3*43*FLEN/8, x4, x1, x2)

inst_27692:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600000000fffff; valaddr_reg:x3; val_offset:83076*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83076*0 + 3*44*FLEN/8, x4, x1, x2)

inst_27693:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600000001fffff; valaddr_reg:x3; val_offset:83079*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83079*0 + 3*45*FLEN/8, x4, x1, x2)

inst_27694:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600000003fffff; valaddr_reg:x3; val_offset:83082*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83082*0 + 3*46*FLEN/8, x4, x1, x2)

inst_27695:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600000007fffff; valaddr_reg:x3; val_offset:83085*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83085*0 + 3*47*FLEN/8, x4, x1, x2)

inst_27696:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000000ffffff; valaddr_reg:x3; val_offset:83088*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83088*0 + 3*48*FLEN/8, x4, x1, x2)

inst_27697:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000001ffffff; valaddr_reg:x3; val_offset:83091*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83091*0 + 3*49*FLEN/8, x4, x1, x2)

inst_27698:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000003ffffff; valaddr_reg:x3; val_offset:83094*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83094*0 + 3*50*FLEN/8, x4, x1, x2)

inst_27699:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000007ffffff; valaddr_reg:x3; val_offset:83097*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83097*0 + 3*51*FLEN/8, x4, x1, x2)

inst_27700:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000000fffffff; valaddr_reg:x3; val_offset:83100*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83100*0 + 3*52*FLEN/8, x4, x1, x2)

inst_27701:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000001fffffff; valaddr_reg:x3; val_offset:83103*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83103*0 + 3*53*FLEN/8, x4, x1, x2)

inst_27702:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000003fffffff; valaddr_reg:x3; val_offset:83106*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83106*0 + 3*54*FLEN/8, x4, x1, x2)

inst_27703:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000007fffffff; valaddr_reg:x3; val_offset:83109*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83109*0 + 3*55*FLEN/8, x4, x1, x2)

inst_27704:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600000ffffffff; valaddr_reg:x3; val_offset:83112*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83112*0 + 3*56*FLEN/8, x4, x1, x2)

inst_27705:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600001ffffffff; valaddr_reg:x3; val_offset:83115*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83115*0 + 3*57*FLEN/8, x4, x1, x2)

inst_27706:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600003ffffffff; valaddr_reg:x3; val_offset:83118*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83118*0 + 3*58*FLEN/8, x4, x1, x2)

inst_27707:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600007ffffffff; valaddr_reg:x3; val_offset:83121*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83121*0 + 3*59*FLEN/8, x4, x1, x2)

inst_27708:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60000fffffffff; valaddr_reg:x3; val_offset:83124*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83124*0 + 3*60*FLEN/8, x4, x1, x2)

inst_27709:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60001fffffffff; valaddr_reg:x3; val_offset:83127*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83127*0 + 3*61*FLEN/8, x4, x1, x2)

inst_27710:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60003fffffffff; valaddr_reg:x3; val_offset:83130*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83130*0 + 3*62*FLEN/8, x4, x1, x2)

inst_27711:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60007fffffffff; valaddr_reg:x3; val_offset:83133*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83133*0 + 3*63*FLEN/8, x4, x1, x2)

inst_27712:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6000ffffffffff; valaddr_reg:x3; val_offset:83136*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83136*0 + 3*64*FLEN/8, x4, x1, x2)

inst_27713:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6001ffffffffff; valaddr_reg:x3; val_offset:83139*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83139*0 + 3*65*FLEN/8, x4, x1, x2)

inst_27714:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6003ffffffffff; valaddr_reg:x3; val_offset:83142*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83142*0 + 3*66*FLEN/8, x4, x1, x2)

inst_27715:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6007ffffffffff; valaddr_reg:x3; val_offset:83145*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83145*0 + 3*67*FLEN/8, x4, x1, x2)

inst_27716:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e600fffffffffff; valaddr_reg:x3; val_offset:83148*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83148*0 + 3*68*FLEN/8, x4, x1, x2)

inst_27717:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e601fffffffffff; valaddr_reg:x3; val_offset:83151*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83151*0 + 3*69*FLEN/8, x4, x1, x2)

inst_27718:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e603fffffffffff; valaddr_reg:x3; val_offset:83154*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83154*0 + 3*70*FLEN/8, x4, x1, x2)

inst_27719:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e607fffffffffff; valaddr_reg:x3; val_offset:83157*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83157*0 + 3*71*FLEN/8, x4, x1, x2)

inst_27720:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e60ffffffffffff; valaddr_reg:x3; val_offset:83160*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83160*0 + 3*72*FLEN/8, x4, x1, x2)

inst_27721:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e61ffffffffffff; valaddr_reg:x3; val_offset:83163*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83163*0 + 3*73*FLEN/8, x4, x1, x2)

inst_27722:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e63ffffffffffff; valaddr_reg:x3; val_offset:83166*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83166*0 + 3*74*FLEN/8, x4, x1, x2)

inst_27723:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e67ffffffffffff; valaddr_reg:x3; val_offset:83169*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83169*0 + 3*75*FLEN/8, x4, x1, x2)

inst_27724:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e68000000000000; valaddr_reg:x3; val_offset:83172*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83172*0 + 3*76*FLEN/8, x4, x1, x2)

inst_27725:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6c000000000000; valaddr_reg:x3; val_offset:83175*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83175*0 + 3*77*FLEN/8, x4, x1, x2)

inst_27726:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6e000000000000; valaddr_reg:x3; val_offset:83178*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83178*0 + 3*78*FLEN/8, x4, x1, x2)

inst_27727:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6f000000000000; valaddr_reg:x3; val_offset:83181*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83181*0 + 3*79*FLEN/8, x4, x1, x2)

inst_27728:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6f800000000000; valaddr_reg:x3; val_offset:83184*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83184*0 + 3*80*FLEN/8, x4, x1, x2)

inst_27729:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fc00000000000; valaddr_reg:x3; val_offset:83187*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83187*0 + 3*81*FLEN/8, x4, x1, x2)

inst_27730:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fe00000000000; valaddr_reg:x3; val_offset:83190*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83190*0 + 3*82*FLEN/8, x4, x1, x2)

inst_27731:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ff00000000000; valaddr_reg:x3; val_offset:83193*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83193*0 + 3*83*FLEN/8, x4, x1, x2)

inst_27732:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ff80000000000; valaddr_reg:x3; val_offset:83196*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83196*0 + 3*84*FLEN/8, x4, x1, x2)

inst_27733:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffc0000000000; valaddr_reg:x3; val_offset:83199*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83199*0 + 3*85*FLEN/8, x4, x1, x2)

inst_27734:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffe0000000000; valaddr_reg:x3; val_offset:83202*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83202*0 + 3*86*FLEN/8, x4, x1, x2)

inst_27735:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fff0000000000; valaddr_reg:x3; val_offset:83205*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83205*0 + 3*87*FLEN/8, x4, x1, x2)

inst_27736:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fff8000000000; valaddr_reg:x3; val_offset:83208*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83208*0 + 3*88*FLEN/8, x4, x1, x2)

inst_27737:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffc000000000; valaddr_reg:x3; val_offset:83211*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83211*0 + 3*89*FLEN/8, x4, x1, x2)

inst_27738:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffe000000000; valaddr_reg:x3; val_offset:83214*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83214*0 + 3*90*FLEN/8, x4, x1, x2)

inst_27739:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffff000000000; valaddr_reg:x3; val_offset:83217*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83217*0 + 3*91*FLEN/8, x4, x1, x2)

inst_27740:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffff800000000; valaddr_reg:x3; val_offset:83220*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83220*0 + 3*92*FLEN/8, x4, x1, x2)

inst_27741:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffc00000000; valaddr_reg:x3; val_offset:83223*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83223*0 + 3*93*FLEN/8, x4, x1, x2)

inst_27742:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffe00000000; valaddr_reg:x3; val_offset:83226*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83226*0 + 3*94*FLEN/8, x4, x1, x2)

inst_27743:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffff00000000; valaddr_reg:x3; val_offset:83229*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83229*0 + 3*95*FLEN/8, x4, x1, x2)

inst_27744:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffff80000000; valaddr_reg:x3; val_offset:83232*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83232*0 + 3*96*FLEN/8, x4, x1, x2)

inst_27745:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffc0000000; valaddr_reg:x3; val_offset:83235*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83235*0 + 3*97*FLEN/8, x4, x1, x2)

inst_27746:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffe0000000; valaddr_reg:x3; val_offset:83238*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83238*0 + 3*98*FLEN/8, x4, x1, x2)

inst_27747:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffff0000000; valaddr_reg:x3; val_offset:83241*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83241*0 + 3*99*FLEN/8, x4, x1, x2)

inst_27748:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffff8000000; valaddr_reg:x3; val_offset:83244*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83244*0 + 3*100*FLEN/8, x4, x1, x2)

inst_27749:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffc000000; valaddr_reg:x3; val_offset:83247*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83247*0 + 3*101*FLEN/8, x4, x1, x2)

inst_27750:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffe000000; valaddr_reg:x3; val_offset:83250*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83250*0 + 3*102*FLEN/8, x4, x1, x2)

inst_27751:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffff000000; valaddr_reg:x3; val_offset:83253*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83253*0 + 3*103*FLEN/8, x4, x1, x2)

inst_27752:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffff800000; valaddr_reg:x3; val_offset:83256*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83256*0 + 3*104*FLEN/8, x4, x1, x2)

inst_27753:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffc00000; valaddr_reg:x3; val_offset:83259*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83259*0 + 3*105*FLEN/8, x4, x1, x2)

inst_27754:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffe00000; valaddr_reg:x3; val_offset:83262*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83262*0 + 3*106*FLEN/8, x4, x1, x2)

inst_27755:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffff00000; valaddr_reg:x3; val_offset:83265*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83265*0 + 3*107*FLEN/8, x4, x1, x2)

inst_27756:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffff80000; valaddr_reg:x3; val_offset:83268*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83268*0 + 3*108*FLEN/8, x4, x1, x2)

inst_27757:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffffc0000; valaddr_reg:x3; val_offset:83271*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83271*0 + 3*109*FLEN/8, x4, x1, x2)

inst_27758:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffffe0000; valaddr_reg:x3; val_offset:83274*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83274*0 + 3*110*FLEN/8, x4, x1, x2)

inst_27759:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffff0000; valaddr_reg:x3; val_offset:83277*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83277*0 + 3*111*FLEN/8, x4, x1, x2)

inst_27760:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffff8000; valaddr_reg:x3; val_offset:83280*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83280*0 + 3*112*FLEN/8, x4, x1, x2)

inst_27761:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffffc000; valaddr_reg:x3; val_offset:83283*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83283*0 + 3*113*FLEN/8, x4, x1, x2)

inst_27762:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffffe000; valaddr_reg:x3; val_offset:83286*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83286*0 + 3*114*FLEN/8, x4, x1, x2)

inst_27763:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffffff000; valaddr_reg:x3; val_offset:83289*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83289*0 + 3*115*FLEN/8, x4, x1, x2)

inst_27764:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffffff800; valaddr_reg:x3; val_offset:83292*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83292*0 + 3*116*FLEN/8, x4, x1, x2)

inst_27765:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffffffc00; valaddr_reg:x3; val_offset:83295*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83295*0 + 3*117*FLEN/8, x4, x1, x2)

inst_27766:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffffffe00; valaddr_reg:x3; val_offset:83298*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83298*0 + 3*118*FLEN/8, x4, x1, x2)

inst_27767:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffffff00; valaddr_reg:x3; val_offset:83301*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83301*0 + 3*119*FLEN/8, x4, x1, x2)

inst_27768:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffffff80; valaddr_reg:x3; val_offset:83304*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83304*0 + 3*120*FLEN/8, x4, x1, x2)

inst_27769:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffffffc0; valaddr_reg:x3; val_offset:83307*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83307*0 + 3*121*FLEN/8, x4, x1, x2)

inst_27770:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffffffe0; valaddr_reg:x3; val_offset:83310*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83310*0 + 3*122*FLEN/8, x4, x1, x2)

inst_27771:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffffffff0; valaddr_reg:x3; val_offset:83313*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83313*0 + 3*123*FLEN/8, x4, x1, x2)

inst_27772:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffffffff8; valaddr_reg:x3; val_offset:83316*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83316*0 + 3*124*FLEN/8, x4, x1, x2)

inst_27773:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffffffffc; valaddr_reg:x3; val_offset:83319*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83319*0 + 3*125*FLEN/8, x4, x1, x2)

inst_27774:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6ffffffffffffe; valaddr_reg:x3; val_offset:83322*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83322*0 + 3*126*FLEN/8, x4, x1, x2)

inst_27775:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3e6 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3e6fffffffffffff; valaddr_reg:x3; val_offset:83325*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83325*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_27776:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:83328*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83328*0 + 3*128*FLEN/8, x4, x1, x2)

inst_27777:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:83331*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83331*0 + 3*129*FLEN/8, x4, x1, x2)

inst_27778:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:83334*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83334*0 + 3*130*FLEN/8, x4, x1, x2)

inst_27779:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:83337*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83337*0 + 3*131*FLEN/8, x4, x1, x2)

inst_27780:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:83340*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83340*0 + 3*132*FLEN/8, x4, x1, x2)

inst_27781:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:83343*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83343*0 + 3*133*FLEN/8, x4, x1, x2)

inst_27782:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:83346*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83346*0 + 3*134*FLEN/8, x4, x1, x2)

inst_27783:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:83349*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83349*0 + 3*135*FLEN/8, x4, x1, x2)

inst_27784:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:83352*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83352*0 + 3*136*FLEN/8, x4, x1, x2)

inst_27785:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:83355*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83355*0 + 3*137*FLEN/8, x4, x1, x2)

inst_27786:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:83358*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83358*0 + 3*138*FLEN/8, x4, x1, x2)

inst_27787:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:83361*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83361*0 + 3*139*FLEN/8, x4, x1, x2)

inst_27788:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:83364*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83364*0 + 3*140*FLEN/8, x4, x1, x2)

inst_27789:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:83367*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83367*0 + 3*141*FLEN/8, x4, x1, x2)

inst_27790:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:83370*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83370*0 + 3*142*FLEN/8, x4, x1, x2)

inst_27791:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:83373*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83373*0 + 3*143*FLEN/8, x4, x1, x2)

inst_27792:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:83376*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83376*0 + 3*144*FLEN/8, x4, x1, x2)

inst_27793:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:83379*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83379*0 + 3*145*FLEN/8, x4, x1, x2)

inst_27794:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:83382*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83382*0 + 3*146*FLEN/8, x4, x1, x2)

inst_27795:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:83385*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83385*0 + 3*147*FLEN/8, x4, x1, x2)

inst_27796:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:83388*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83388*0 + 3*148*FLEN/8, x4, x1, x2)

inst_27797:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x06a4fe1113ec9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xf30c148093329 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f906a4fe1113ec9; op2val:0x204f30c148093329;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:83391*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83391*0 + 3*149*FLEN/8, x4, x1, x2)

inst_27798:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000000000000; valaddr_reg:x3; val_offset:83394*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83394*0 + 3*150*FLEN/8, x4, x1, x2)

inst_27799:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000000000001; valaddr_reg:x3; val_offset:83397*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83397*0 + 3*151*FLEN/8, x4, x1, x2)

inst_27800:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000000000003; valaddr_reg:x3; val_offset:83400*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83400*0 + 3*152*FLEN/8, x4, x1, x2)

inst_27801:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000000000007; valaddr_reg:x3; val_offset:83403*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83403*0 + 3*153*FLEN/8, x4, x1, x2)

inst_27802:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000000000000f; valaddr_reg:x3; val_offset:83406*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83406*0 + 3*154*FLEN/8, x4, x1, x2)

inst_27803:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000000000001f; valaddr_reg:x3; val_offset:83409*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83409*0 + 3*155*FLEN/8, x4, x1, x2)

inst_27804:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000000000003f; valaddr_reg:x3; val_offset:83412*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83412*0 + 3*156*FLEN/8, x4, x1, x2)

inst_27805:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000000000007f; valaddr_reg:x3; val_offset:83415*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83415*0 + 3*157*FLEN/8, x4, x1, x2)

inst_27806:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400000000000ff; valaddr_reg:x3; val_offset:83418*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83418*0 + 3*158*FLEN/8, x4, x1, x2)

inst_27807:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400000000001ff; valaddr_reg:x3; val_offset:83421*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83421*0 + 3*159*FLEN/8, x4, x1, x2)

inst_27808:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400000000003ff; valaddr_reg:x3; val_offset:83424*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83424*0 + 3*160*FLEN/8, x4, x1, x2)

inst_27809:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400000000007ff; valaddr_reg:x3; val_offset:83427*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83427*0 + 3*161*FLEN/8, x4, x1, x2)

inst_27810:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000000000fff; valaddr_reg:x3; val_offset:83430*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83430*0 + 3*162*FLEN/8, x4, x1, x2)

inst_27811:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000000001fff; valaddr_reg:x3; val_offset:83433*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83433*0 + 3*163*FLEN/8, x4, x1, x2)

inst_27812:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000000003fff; valaddr_reg:x3; val_offset:83436*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83436*0 + 3*164*FLEN/8, x4, x1, x2)

inst_27813:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000000007fff; valaddr_reg:x3; val_offset:83439*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83439*0 + 3*165*FLEN/8, x4, x1, x2)

inst_27814:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000000000ffff; valaddr_reg:x3; val_offset:83442*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83442*0 + 3*166*FLEN/8, x4, x1, x2)

inst_27815:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000000001ffff; valaddr_reg:x3; val_offset:83445*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83445*0 + 3*167*FLEN/8, x4, x1, x2)

inst_27816:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000000003ffff; valaddr_reg:x3; val_offset:83448*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83448*0 + 3*168*FLEN/8, x4, x1, x2)

inst_27817:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000000007ffff; valaddr_reg:x3; val_offset:83451*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83451*0 + 3*169*FLEN/8, x4, x1, x2)

inst_27818:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400000000fffff; valaddr_reg:x3; val_offset:83454*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83454*0 + 3*170*FLEN/8, x4, x1, x2)

inst_27819:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400000001fffff; valaddr_reg:x3; val_offset:83457*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83457*0 + 3*171*FLEN/8, x4, x1, x2)

inst_27820:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400000003fffff; valaddr_reg:x3; val_offset:83460*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83460*0 + 3*172*FLEN/8, x4, x1, x2)

inst_27821:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400000007fffff; valaddr_reg:x3; val_offset:83463*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83463*0 + 3*173*FLEN/8, x4, x1, x2)

inst_27822:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000000ffffff; valaddr_reg:x3; val_offset:83466*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83466*0 + 3*174*FLEN/8, x4, x1, x2)

inst_27823:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000001ffffff; valaddr_reg:x3; val_offset:83469*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83469*0 + 3*175*FLEN/8, x4, x1, x2)

inst_27824:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000003ffffff; valaddr_reg:x3; val_offset:83472*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83472*0 + 3*176*FLEN/8, x4, x1, x2)

inst_27825:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000007ffffff; valaddr_reg:x3; val_offset:83475*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83475*0 + 3*177*FLEN/8, x4, x1, x2)

inst_27826:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000000fffffff; valaddr_reg:x3; val_offset:83478*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83478*0 + 3*178*FLEN/8, x4, x1, x2)

inst_27827:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000001fffffff; valaddr_reg:x3; val_offset:83481*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83481*0 + 3*179*FLEN/8, x4, x1, x2)

inst_27828:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000003fffffff; valaddr_reg:x3; val_offset:83484*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83484*0 + 3*180*FLEN/8, x4, x1, x2)

inst_27829:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000007fffffff; valaddr_reg:x3; val_offset:83487*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83487*0 + 3*181*FLEN/8, x4, x1, x2)

inst_27830:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400000ffffffff; valaddr_reg:x3; val_offset:83490*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83490*0 + 3*182*FLEN/8, x4, x1, x2)

inst_27831:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400001ffffffff; valaddr_reg:x3; val_offset:83493*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83493*0 + 3*183*FLEN/8, x4, x1, x2)

inst_27832:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400003ffffffff; valaddr_reg:x3; val_offset:83496*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83496*0 + 3*184*FLEN/8, x4, x1, x2)

inst_27833:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400007ffffffff; valaddr_reg:x3; val_offset:83499*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83499*0 + 3*185*FLEN/8, x4, x1, x2)

inst_27834:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40000fffffffff; valaddr_reg:x3; val_offset:83502*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83502*0 + 3*186*FLEN/8, x4, x1, x2)

inst_27835:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40001fffffffff; valaddr_reg:x3; val_offset:83505*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83505*0 + 3*187*FLEN/8, x4, x1, x2)

inst_27836:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40003fffffffff; valaddr_reg:x3; val_offset:83508*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83508*0 + 3*188*FLEN/8, x4, x1, x2)

inst_27837:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40007fffffffff; valaddr_reg:x3; val_offset:83511*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83511*0 + 3*189*FLEN/8, x4, x1, x2)

inst_27838:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4000ffffffffff; valaddr_reg:x3; val_offset:83514*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83514*0 + 3*190*FLEN/8, x4, x1, x2)

inst_27839:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4001ffffffffff; valaddr_reg:x3; val_offset:83517*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83517*0 + 3*191*FLEN/8, x4, x1, x2)

inst_27840:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4003ffffffffff; valaddr_reg:x3; val_offset:83520*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83520*0 + 3*192*FLEN/8, x4, x1, x2)

inst_27841:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4007ffffffffff; valaddr_reg:x3; val_offset:83523*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83523*0 + 3*193*FLEN/8, x4, x1, x2)

inst_27842:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd400fffffffffff; valaddr_reg:x3; val_offset:83526*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83526*0 + 3*194*FLEN/8, x4, x1, x2)

inst_27843:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd401fffffffffff; valaddr_reg:x3; val_offset:83529*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83529*0 + 3*195*FLEN/8, x4, x1, x2)

inst_27844:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd403fffffffffff; valaddr_reg:x3; val_offset:83532*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83532*0 + 3*196*FLEN/8, x4, x1, x2)

inst_27845:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd407fffffffffff; valaddr_reg:x3; val_offset:83535*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83535*0 + 3*197*FLEN/8, x4, x1, x2)

inst_27846:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd40ffffffffffff; valaddr_reg:x3; val_offset:83538*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83538*0 + 3*198*FLEN/8, x4, x1, x2)

inst_27847:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd41ffffffffffff; valaddr_reg:x3; val_offset:83541*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83541*0 + 3*199*FLEN/8, x4, x1, x2)

inst_27848:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd43ffffffffffff; valaddr_reg:x3; val_offset:83544*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83544*0 + 3*200*FLEN/8, x4, x1, x2)

inst_27849:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd47ffffffffffff; valaddr_reg:x3; val_offset:83547*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83547*0 + 3*201*FLEN/8, x4, x1, x2)

inst_27850:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd48000000000000; valaddr_reg:x3; val_offset:83550*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83550*0 + 3*202*FLEN/8, x4, x1, x2)

inst_27851:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4c000000000000; valaddr_reg:x3; val_offset:83553*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83553*0 + 3*203*FLEN/8, x4, x1, x2)

inst_27852:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4e000000000000; valaddr_reg:x3; val_offset:83556*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83556*0 + 3*204*FLEN/8, x4, x1, x2)

inst_27853:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4f000000000000; valaddr_reg:x3; val_offset:83559*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83559*0 + 3*205*FLEN/8, x4, x1, x2)

inst_27854:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4f800000000000; valaddr_reg:x3; val_offset:83562*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83562*0 + 3*206*FLEN/8, x4, x1, x2)

inst_27855:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fc00000000000; valaddr_reg:x3; val_offset:83565*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83565*0 + 3*207*FLEN/8, x4, x1, x2)

inst_27856:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fe00000000000; valaddr_reg:x3; val_offset:83568*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83568*0 + 3*208*FLEN/8, x4, x1, x2)

inst_27857:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ff00000000000; valaddr_reg:x3; val_offset:83571*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83571*0 + 3*209*FLEN/8, x4, x1, x2)

inst_27858:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ff80000000000; valaddr_reg:x3; val_offset:83574*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83574*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27859:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffc0000000000; valaddr_reg:x3; val_offset:83577*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83577*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27860:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffe0000000000; valaddr_reg:x3; val_offset:83580*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83580*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27861:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fff0000000000; valaddr_reg:x3; val_offset:83583*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83583*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27862:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fff8000000000; valaddr_reg:x3; val_offset:83586*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83586*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27863:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffc000000000; valaddr_reg:x3; val_offset:83589*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83589*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27864:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffe000000000; valaddr_reg:x3; val_offset:83592*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83592*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27865:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffff000000000; valaddr_reg:x3; val_offset:83595*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83595*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27866:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffff800000000; valaddr_reg:x3; val_offset:83598*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83598*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27867:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffc00000000; valaddr_reg:x3; val_offset:83601*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83601*0 + 3*219*FLEN/8, x4, x1, x2)

inst_27868:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffe00000000; valaddr_reg:x3; val_offset:83604*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83604*0 + 3*220*FLEN/8, x4, x1, x2)

inst_27869:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffff00000000; valaddr_reg:x3; val_offset:83607*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83607*0 + 3*221*FLEN/8, x4, x1, x2)

inst_27870:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffff80000000; valaddr_reg:x3; val_offset:83610*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83610*0 + 3*222*FLEN/8, x4, x1, x2)

inst_27871:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffc0000000; valaddr_reg:x3; val_offset:83613*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83613*0 + 3*223*FLEN/8, x4, x1, x2)

inst_27872:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffe0000000; valaddr_reg:x3; val_offset:83616*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83616*0 + 3*224*FLEN/8, x4, x1, x2)

inst_27873:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffff0000000; valaddr_reg:x3; val_offset:83619*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83619*0 + 3*225*FLEN/8, x4, x1, x2)

inst_27874:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffff8000000; valaddr_reg:x3; val_offset:83622*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83622*0 + 3*226*FLEN/8, x4, x1, x2)

inst_27875:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffc000000; valaddr_reg:x3; val_offset:83625*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83625*0 + 3*227*FLEN/8, x4, x1, x2)

inst_27876:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffe000000; valaddr_reg:x3; val_offset:83628*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83628*0 + 3*228*FLEN/8, x4, x1, x2)

inst_27877:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffff000000; valaddr_reg:x3; val_offset:83631*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83631*0 + 3*229*FLEN/8, x4, x1, x2)

inst_27878:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffff800000; valaddr_reg:x3; val_offset:83634*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83634*0 + 3*230*FLEN/8, x4, x1, x2)

inst_27879:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffc00000; valaddr_reg:x3; val_offset:83637*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83637*0 + 3*231*FLEN/8, x4, x1, x2)

inst_27880:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffe00000; valaddr_reg:x3; val_offset:83640*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83640*0 + 3*232*FLEN/8, x4, x1, x2)

inst_27881:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffff00000; valaddr_reg:x3; val_offset:83643*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83643*0 + 3*233*FLEN/8, x4, x1, x2)

inst_27882:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffff80000; valaddr_reg:x3; val_offset:83646*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83646*0 + 3*234*FLEN/8, x4, x1, x2)

inst_27883:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffffc0000; valaddr_reg:x3; val_offset:83649*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83649*0 + 3*235*FLEN/8, x4, x1, x2)

inst_27884:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffffe0000; valaddr_reg:x3; val_offset:83652*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83652*0 + 3*236*FLEN/8, x4, x1, x2)

inst_27885:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffff0000; valaddr_reg:x3; val_offset:83655*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83655*0 + 3*237*FLEN/8, x4, x1, x2)

inst_27886:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffff8000; valaddr_reg:x3; val_offset:83658*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83658*0 + 3*238*FLEN/8, x4, x1, x2)

inst_27887:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffffc000; valaddr_reg:x3; val_offset:83661*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83661*0 + 3*239*FLEN/8, x4, x1, x2)

inst_27888:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffffe000; valaddr_reg:x3; val_offset:83664*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83664*0 + 3*240*FLEN/8, x4, x1, x2)

inst_27889:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffffff000; valaddr_reg:x3; val_offset:83667*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83667*0 + 3*241*FLEN/8, x4, x1, x2)

inst_27890:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffffff800; valaddr_reg:x3; val_offset:83670*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83670*0 + 3*242*FLEN/8, x4, x1, x2)

inst_27891:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffffffc00; valaddr_reg:x3; val_offset:83673*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83673*0 + 3*243*FLEN/8, x4, x1, x2)

inst_27892:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffffffe00; valaddr_reg:x3; val_offset:83676*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83676*0 + 3*244*FLEN/8, x4, x1, x2)

inst_27893:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffffff00; valaddr_reg:x3; val_offset:83679*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83679*0 + 3*245*FLEN/8, x4, x1, x2)

inst_27894:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffffff80; valaddr_reg:x3; val_offset:83682*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83682*0 + 3*246*FLEN/8, x4, x1, x2)

inst_27895:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffffffc0; valaddr_reg:x3; val_offset:83685*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83685*0 + 3*247*FLEN/8, x4, x1, x2)

inst_27896:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffffffe0; valaddr_reg:x3; val_offset:83688*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83688*0 + 3*248*FLEN/8, x4, x1, x2)

inst_27897:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffffffff0; valaddr_reg:x3; val_offset:83691*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83691*0 + 3*249*FLEN/8, x4, x1, x2)

inst_27898:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffffffff8; valaddr_reg:x3; val_offset:83694*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83694*0 + 3*250*FLEN/8, x4, x1, x2)

inst_27899:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffffffffc; valaddr_reg:x3; val_offset:83697*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83697*0 + 3*251*FLEN/8, x4, x1, x2)

inst_27900:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4ffffffffffffe; valaddr_reg:x3; val_offset:83700*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83700*0 + 3*252*FLEN/8, x4, x1, x2)

inst_27901:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3d4 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbd4fffffffffffff; valaddr_reg:x3; val_offset:83703*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83703*0 + 3*253*FLEN/8, x4, x1, x2)

inst_27902:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:83706*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83706*0 + 3*254*FLEN/8, x4, x1, x2)

inst_27903:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:83709*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83709*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_27904:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:83712*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83712*0 + 3*256*FLEN/8, x4, x1, x2)

inst_27905:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:83715*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83715*0 + 3*257*FLEN/8, x4, x1, x2)

inst_27906:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:83718*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83718*0 + 3*258*FLEN/8, x4, x1, x2)

inst_27907:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:83721*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83721*0 + 3*259*FLEN/8, x4, x1, x2)

inst_27908:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:83724*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83724*0 + 3*260*FLEN/8, x4, x1, x2)

inst_27909:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:83727*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83727*0 + 3*261*FLEN/8, x4, x1, x2)

inst_27910:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:83730*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83730*0 + 3*262*FLEN/8, x4, x1, x2)

inst_27911:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:83733*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83733*0 + 3*263*FLEN/8, x4, x1, x2)

inst_27912:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:83736*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83736*0 + 3*264*FLEN/8, x4, x1, x2)

inst_27913:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:83739*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83739*0 + 3*265*FLEN/8, x4, x1, x2)

inst_27914:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:83742*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83742*0 + 3*266*FLEN/8, x4, x1, x2)

inst_27915:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:83745*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83745*0 + 3*267*FLEN/8, x4, x1, x2)

inst_27916:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:83748*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83748*0 + 3*268*FLEN/8, x4, x1, x2)

inst_27917:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:83751*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83751*0 + 3*269*FLEN/8, x4, x1, x2)

inst_27918:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:83754*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83754*0 + 3*270*FLEN/8, x4, x1, x2)

inst_27919:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:83757*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83757*0 + 3*271*FLEN/8, x4, x1, x2)

inst_27920:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:83760*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83760*0 + 3*272*FLEN/8, x4, x1, x2)

inst_27921:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:83763*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83763*0 + 3*273*FLEN/8, x4, x1, x2)

inst_27922:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:83766*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83766*0 + 3*274*FLEN/8, x4, x1, x2)

inst_27923:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xf2488ecddce91 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9070c0d4d218f9; op2val:0x9fdf2488ecddce91;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:83769*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83769*0 + 3*275*FLEN/8, x4, x1, x2)

inst_27924:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000000000000; valaddr_reg:x3; val_offset:83772*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83772*0 + 3*276*FLEN/8, x4, x1, x2)

inst_27925:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000000000001; valaddr_reg:x3; val_offset:83775*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83775*0 + 3*277*FLEN/8, x4, x1, x2)

inst_27926:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000000000003; valaddr_reg:x3; val_offset:83778*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83778*0 + 3*278*FLEN/8, x4, x1, x2)

inst_27927:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000000000007; valaddr_reg:x3; val_offset:83781*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83781*0 + 3*279*FLEN/8, x4, x1, x2)

inst_27928:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000000000000f; valaddr_reg:x3; val_offset:83784*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83784*0 + 3*280*FLEN/8, x4, x1, x2)

inst_27929:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000000000001f; valaddr_reg:x3; val_offset:83787*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83787*0 + 3*281*FLEN/8, x4, x1, x2)

inst_27930:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000000000003f; valaddr_reg:x3; val_offset:83790*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83790*0 + 3*282*FLEN/8, x4, x1, x2)

inst_27931:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000000000007f; valaddr_reg:x3; val_offset:83793*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83793*0 + 3*283*FLEN/8, x4, x1, x2)

inst_27932:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00000000000ff; valaddr_reg:x3; val_offset:83796*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83796*0 + 3*284*FLEN/8, x4, x1, x2)

inst_27933:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00000000001ff; valaddr_reg:x3; val_offset:83799*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83799*0 + 3*285*FLEN/8, x4, x1, x2)

inst_27934:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00000000003ff; valaddr_reg:x3; val_offset:83802*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83802*0 + 3*286*FLEN/8, x4, x1, x2)

inst_27935:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00000000007ff; valaddr_reg:x3; val_offset:83805*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83805*0 + 3*287*FLEN/8, x4, x1, x2)

inst_27936:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000000000fff; valaddr_reg:x3; val_offset:83808*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83808*0 + 3*288*FLEN/8, x4, x1, x2)

inst_27937:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000000001fff; valaddr_reg:x3; val_offset:83811*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83811*0 + 3*289*FLEN/8, x4, x1, x2)

inst_27938:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000000003fff; valaddr_reg:x3; val_offset:83814*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83814*0 + 3*290*FLEN/8, x4, x1, x2)

inst_27939:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000000007fff; valaddr_reg:x3; val_offset:83817*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83817*0 + 3*291*FLEN/8, x4, x1, x2)

inst_27940:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000000000ffff; valaddr_reg:x3; val_offset:83820*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83820*0 + 3*292*FLEN/8, x4, x1, x2)

inst_27941:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000000001ffff; valaddr_reg:x3; val_offset:83823*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83823*0 + 3*293*FLEN/8, x4, x1, x2)

inst_27942:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000000003ffff; valaddr_reg:x3; val_offset:83826*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83826*0 + 3*294*FLEN/8, x4, x1, x2)

inst_27943:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000000007ffff; valaddr_reg:x3; val_offset:83829*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83829*0 + 3*295*FLEN/8, x4, x1, x2)

inst_27944:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00000000fffff; valaddr_reg:x3; val_offset:83832*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83832*0 + 3*296*FLEN/8, x4, x1, x2)

inst_27945:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00000001fffff; valaddr_reg:x3; val_offset:83835*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83835*0 + 3*297*FLEN/8, x4, x1, x2)

inst_27946:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00000003fffff; valaddr_reg:x3; val_offset:83838*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83838*0 + 3*298*FLEN/8, x4, x1, x2)

inst_27947:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00000007fffff; valaddr_reg:x3; val_offset:83841*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83841*0 + 3*299*FLEN/8, x4, x1, x2)

inst_27948:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000000ffffff; valaddr_reg:x3; val_offset:83844*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83844*0 + 3*300*FLEN/8, x4, x1, x2)

inst_27949:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000001ffffff; valaddr_reg:x3; val_offset:83847*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83847*0 + 3*301*FLEN/8, x4, x1, x2)

inst_27950:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000003ffffff; valaddr_reg:x3; val_offset:83850*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83850*0 + 3*302*FLEN/8, x4, x1, x2)

inst_27951:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000007ffffff; valaddr_reg:x3; val_offset:83853*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83853*0 + 3*303*FLEN/8, x4, x1, x2)

inst_27952:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000000fffffff; valaddr_reg:x3; val_offset:83856*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83856*0 + 3*304*FLEN/8, x4, x1, x2)

inst_27953:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000001fffffff; valaddr_reg:x3; val_offset:83859*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83859*0 + 3*305*FLEN/8, x4, x1, x2)

inst_27954:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000003fffffff; valaddr_reg:x3; val_offset:83862*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83862*0 + 3*306*FLEN/8, x4, x1, x2)

inst_27955:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000007fffffff; valaddr_reg:x3; val_offset:83865*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83865*0 + 3*307*FLEN/8, x4, x1, x2)

inst_27956:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00000ffffffff; valaddr_reg:x3; val_offset:83868*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83868*0 + 3*308*FLEN/8, x4, x1, x2)

inst_27957:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00001ffffffff; valaddr_reg:x3; val_offset:83871*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83871*0 + 3*309*FLEN/8, x4, x1, x2)

inst_27958:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00003ffffffff; valaddr_reg:x3; val_offset:83874*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83874*0 + 3*310*FLEN/8, x4, x1, x2)

inst_27959:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00007ffffffff; valaddr_reg:x3; val_offset:83877*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83877*0 + 3*311*FLEN/8, x4, x1, x2)

inst_27960:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0000fffffffff; valaddr_reg:x3; val_offset:83880*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83880*0 + 3*312*FLEN/8, x4, x1, x2)

inst_27961:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0001fffffffff; valaddr_reg:x3; val_offset:83883*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83883*0 + 3*313*FLEN/8, x4, x1, x2)

inst_27962:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0003fffffffff; valaddr_reg:x3; val_offset:83886*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83886*0 + 3*314*FLEN/8, x4, x1, x2)

inst_27963:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0007fffffffff; valaddr_reg:x3; val_offset:83889*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83889*0 + 3*315*FLEN/8, x4, x1, x2)

inst_27964:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef000ffffffffff; valaddr_reg:x3; val_offset:83892*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83892*0 + 3*316*FLEN/8, x4, x1, x2)

inst_27965:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef001ffffffffff; valaddr_reg:x3; val_offset:83895*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83895*0 + 3*317*FLEN/8, x4, x1, x2)

inst_27966:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef003ffffffffff; valaddr_reg:x3; val_offset:83898*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83898*0 + 3*318*FLEN/8, x4, x1, x2)

inst_27967:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef007ffffffffff; valaddr_reg:x3; val_offset:83901*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83901*0 + 3*319*FLEN/8, x4, x1, x2)

inst_27968:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef00fffffffffff; valaddr_reg:x3; val_offset:83904*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83904*0 + 3*320*FLEN/8, x4, x1, x2)

inst_27969:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef01fffffffffff; valaddr_reg:x3; val_offset:83907*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83907*0 + 3*321*FLEN/8, x4, x1, x2)

inst_27970:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef03fffffffffff; valaddr_reg:x3; val_offset:83910*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83910*0 + 3*322*FLEN/8, x4, x1, x2)

inst_27971:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef07fffffffffff; valaddr_reg:x3; val_offset:83913*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83913*0 + 3*323*FLEN/8, x4, x1, x2)

inst_27972:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef0ffffffffffff; valaddr_reg:x3; val_offset:83916*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83916*0 + 3*324*FLEN/8, x4, x1, x2)

inst_27973:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef1ffffffffffff; valaddr_reg:x3; val_offset:83919*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83919*0 + 3*325*FLEN/8, x4, x1, x2)

inst_27974:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef3ffffffffffff; valaddr_reg:x3; val_offset:83922*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83922*0 + 3*326*FLEN/8, x4, x1, x2)

inst_27975:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef7ffffffffffff; valaddr_reg:x3; val_offset:83925*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83925*0 + 3*327*FLEN/8, x4, x1, x2)

inst_27976:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ef8000000000000; valaddr_reg:x3; val_offset:83928*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83928*0 + 3*328*FLEN/8, x4, x1, x2)

inst_27977:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efc000000000000; valaddr_reg:x3; val_offset:83931*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83931*0 + 3*329*FLEN/8, x4, x1, x2)

inst_27978:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efe000000000000; valaddr_reg:x3; val_offset:83934*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83934*0 + 3*330*FLEN/8, x4, x1, x2)

inst_27979:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3eff000000000000; valaddr_reg:x3; val_offset:83937*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83937*0 + 3*331*FLEN/8, x4, x1, x2)

inst_27980:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3eff800000000000; valaddr_reg:x3; val_offset:83940*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83940*0 + 3*332*FLEN/8, x4, x1, x2)

inst_27981:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effc00000000000; valaddr_reg:x3; val_offset:83943*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83943*0 + 3*333*FLEN/8, x4, x1, x2)

inst_27982:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effe00000000000; valaddr_reg:x3; val_offset:83946*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83946*0 + 3*334*FLEN/8, x4, x1, x2)

inst_27983:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efff00000000000; valaddr_reg:x3; val_offset:83949*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83949*0 + 3*335*FLEN/8, x4, x1, x2)

inst_27984:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efff80000000000; valaddr_reg:x3; val_offset:83952*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83952*0 + 3*336*FLEN/8, x4, x1, x2)

inst_27985:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffc0000000000; valaddr_reg:x3; val_offset:83955*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83955*0 + 3*337*FLEN/8, x4, x1, x2)

inst_27986:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffe0000000000; valaddr_reg:x3; val_offset:83958*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83958*0 + 3*338*FLEN/8, x4, x1, x2)

inst_27987:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effff0000000000; valaddr_reg:x3; val_offset:83961*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83961*0 + 3*339*FLEN/8, x4, x1, x2)

inst_27988:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effff8000000000; valaddr_reg:x3; val_offset:83964*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83964*0 + 3*340*FLEN/8, x4, x1, x2)

inst_27989:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffc000000000; valaddr_reg:x3; val_offset:83967*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83967*0 + 3*341*FLEN/8, x4, x1, x2)

inst_27990:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffe000000000; valaddr_reg:x3; val_offset:83970*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83970*0 + 3*342*FLEN/8, x4, x1, x2)

inst_27991:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffff000000000; valaddr_reg:x3; val_offset:83973*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83973*0 + 3*343*FLEN/8, x4, x1, x2)

inst_27992:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffff800000000; valaddr_reg:x3; val_offset:83976*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83976*0 + 3*344*FLEN/8, x4, x1, x2)

inst_27993:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffc00000000; valaddr_reg:x3; val_offset:83979*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83979*0 + 3*345*FLEN/8, x4, x1, x2)

inst_27994:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffe00000000; valaddr_reg:x3; val_offset:83982*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83982*0 + 3*346*FLEN/8, x4, x1, x2)

inst_27995:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffff00000000; valaddr_reg:x3; val_offset:83985*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83985*0 + 3*347*FLEN/8, x4, x1, x2)

inst_27996:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffff80000000; valaddr_reg:x3; val_offset:83988*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83988*0 + 3*348*FLEN/8, x4, x1, x2)

inst_27997:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffc0000000; valaddr_reg:x3; val_offset:83991*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83991*0 + 3*349*FLEN/8, x4, x1, x2)

inst_27998:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffe0000000; valaddr_reg:x3; val_offset:83994*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83994*0 + 3*350*FLEN/8, x4, x1, x2)

inst_27999:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffff0000000; valaddr_reg:x3; val_offset:83997*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83997*0 + 3*351*FLEN/8, x4, x1, x2)

inst_28000:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffff8000000; valaddr_reg:x3; val_offset:84000*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84000*0 + 3*352*FLEN/8, x4, x1, x2)

inst_28001:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffc000000; valaddr_reg:x3; val_offset:84003*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84003*0 + 3*353*FLEN/8, x4, x1, x2)

inst_28002:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffe000000; valaddr_reg:x3; val_offset:84006*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84006*0 + 3*354*FLEN/8, x4, x1, x2)

inst_28003:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffff000000; valaddr_reg:x3; val_offset:84009*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84009*0 + 3*355*FLEN/8, x4, x1, x2)

inst_28004:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffff800000; valaddr_reg:x3; val_offset:84012*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84012*0 + 3*356*FLEN/8, x4, x1, x2)

inst_28005:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffc00000; valaddr_reg:x3; val_offset:84015*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84015*0 + 3*357*FLEN/8, x4, x1, x2)

inst_28006:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffe00000; valaddr_reg:x3; val_offset:84018*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84018*0 + 3*358*FLEN/8, x4, x1, x2)

inst_28007:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffff00000; valaddr_reg:x3; val_offset:84021*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84021*0 + 3*359*FLEN/8, x4, x1, x2)

inst_28008:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffff80000; valaddr_reg:x3; val_offset:84024*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84024*0 + 3*360*FLEN/8, x4, x1, x2)

inst_28009:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffffc0000; valaddr_reg:x3; val_offset:84027*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84027*0 + 3*361*FLEN/8, x4, x1, x2)

inst_28010:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffffe0000; valaddr_reg:x3; val_offset:84030*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84030*0 + 3*362*FLEN/8, x4, x1, x2)

inst_28011:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffff0000; valaddr_reg:x3; val_offset:84033*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84033*0 + 3*363*FLEN/8, x4, x1, x2)

inst_28012:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffff8000; valaddr_reg:x3; val_offset:84036*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84036*0 + 3*364*FLEN/8, x4, x1, x2)

inst_28013:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffffc000; valaddr_reg:x3; val_offset:84039*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84039*0 + 3*365*FLEN/8, x4, x1, x2)

inst_28014:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffffe000; valaddr_reg:x3; val_offset:84042*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84042*0 + 3*366*FLEN/8, x4, x1, x2)

inst_28015:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffffff000; valaddr_reg:x3; val_offset:84045*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84045*0 + 3*367*FLEN/8, x4, x1, x2)

inst_28016:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffffff800; valaddr_reg:x3; val_offset:84048*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84048*0 + 3*368*FLEN/8, x4, x1, x2)

inst_28017:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffffffc00; valaddr_reg:x3; val_offset:84051*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84051*0 + 3*369*FLEN/8, x4, x1, x2)

inst_28018:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffffffe00; valaddr_reg:x3; val_offset:84054*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84054*0 + 3*370*FLEN/8, x4, x1, x2)

inst_28019:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffffff00; valaddr_reg:x3; val_offset:84057*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84057*0 + 3*371*FLEN/8, x4, x1, x2)

inst_28020:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffffff80; valaddr_reg:x3; val_offset:84060*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84060*0 + 3*372*FLEN/8, x4, x1, x2)

inst_28021:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffffffc0; valaddr_reg:x3; val_offset:84063*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84063*0 + 3*373*FLEN/8, x4, x1, x2)

inst_28022:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffffffe0; valaddr_reg:x3; val_offset:84066*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84066*0 + 3*374*FLEN/8, x4, x1, x2)

inst_28023:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffffffff0; valaddr_reg:x3; val_offset:84069*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84069*0 + 3*375*FLEN/8, x4, x1, x2)

inst_28024:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffffffff8; valaddr_reg:x3; val_offset:84072*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84072*0 + 3*376*FLEN/8, x4, x1, x2)

inst_28025:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffffffffc; valaddr_reg:x3; val_offset:84075*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84075*0 + 3*377*FLEN/8, x4, x1, x2)

inst_28026:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3efffffffffffffe; valaddr_reg:x3; val_offset:84078*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84078*0 + 3*378*FLEN/8, x4, x1, x2)

inst_28027:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3effffffffffffff; valaddr_reg:x3; val_offset:84081*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84081*0 + 3*379*FLEN/8, x4, x1, x2)

inst_28028:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:84084*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84084*0 + 3*380*FLEN/8, x4, x1, x2)

inst_28029:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:84087*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84087*0 + 3*381*FLEN/8, x4, x1, x2)

inst_28030:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:84090*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84090*0 + 3*382*FLEN/8, x4, x1, x2)

inst_28031:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:84093*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84093*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_28032:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:84096*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84096*0 + 3*384*FLEN/8, x4, x1, x2)

inst_28033:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:84099*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84099*0 + 3*385*FLEN/8, x4, x1, x2)

inst_28034:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:84102*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84102*0 + 3*386*FLEN/8, x4, x1, x2)

inst_28035:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:84105*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84105*0 + 3*387*FLEN/8, x4, x1, x2)

inst_28036:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:84108*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84108*0 + 3*388*FLEN/8, x4, x1, x2)

inst_28037:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:84111*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84111*0 + 3*389*FLEN/8, x4, x1, x2)

inst_28038:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:84114*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84114*0 + 3*390*FLEN/8, x4, x1, x2)

inst_28039:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:84117*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84117*0 + 3*391*FLEN/8, x4, x1, x2)

inst_28040:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:84120*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84120*0 + 3*392*FLEN/8, x4, x1, x2)

inst_28041:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:84123*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84123*0 + 3*393*FLEN/8, x4, x1, x2)

inst_28042:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:84126*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84126*0 + 3*394*FLEN/8, x4, x1, x2)

inst_28043:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:84129*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84129*0 + 3*395*FLEN/8, x4, x1, x2)

inst_28044:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:84132*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84132*0 + 3*396*FLEN/8, x4, x1, x2)

inst_28045:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:84135*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84135*0 + 3*397*FLEN/8, x4, x1, x2)

inst_28046:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:84138*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84138*0 + 3*398*FLEN/8, x4, x1, x2)

inst_28047:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:84141*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84141*0 + 3*399*FLEN/8, x4, x1, x2)

inst_28048:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:84144*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84144*0 + 3*400*FLEN/8, x4, x1, x2)

inst_28049:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x09e6c54778335 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xecef3c158bb21 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f909e6c54778335; op2val:0x204ecef3c158bb21;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:84147*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84147*0 + 3*401*FLEN/8, x4, x1, x2)

inst_28050:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000000000000; valaddr_reg:x3; val_offset:84150*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84150*0 + 3*402*FLEN/8, x4, x1, x2)

inst_28051:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000000000001; valaddr_reg:x3; val_offset:84153*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84153*0 + 3*403*FLEN/8, x4, x1, x2)

inst_28052:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000000000003; valaddr_reg:x3; val_offset:84156*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84156*0 + 3*404*FLEN/8, x4, x1, x2)

inst_28053:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000000000007; valaddr_reg:x3; val_offset:84159*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84159*0 + 3*405*FLEN/8, x4, x1, x2)

inst_28054:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000000000000f; valaddr_reg:x3; val_offset:84162*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84162*0 + 3*406*FLEN/8, x4, x1, x2)

inst_28055:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000000000001f; valaddr_reg:x3; val_offset:84165*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84165*0 + 3*407*FLEN/8, x4, x1, x2)

inst_28056:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000000000003f; valaddr_reg:x3; val_offset:84168*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84168*0 + 3*408*FLEN/8, x4, x1, x2)

inst_28057:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000000000007f; valaddr_reg:x3; val_offset:84171*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84171*0 + 3*409*FLEN/8, x4, x1, x2)

inst_28058:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500000000000ff; valaddr_reg:x3; val_offset:84174*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84174*0 + 3*410*FLEN/8, x4, x1, x2)

inst_28059:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500000000001ff; valaddr_reg:x3; val_offset:84177*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84177*0 + 3*411*FLEN/8, x4, x1, x2)

inst_28060:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500000000003ff; valaddr_reg:x3; val_offset:84180*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84180*0 + 3*412*FLEN/8, x4, x1, x2)

inst_28061:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500000000007ff; valaddr_reg:x3; val_offset:84183*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84183*0 + 3*413*FLEN/8, x4, x1, x2)

inst_28062:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000000000fff; valaddr_reg:x3; val_offset:84186*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84186*0 + 3*414*FLEN/8, x4, x1, x2)

inst_28063:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000000001fff; valaddr_reg:x3; val_offset:84189*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84189*0 + 3*415*FLEN/8, x4, x1, x2)

inst_28064:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000000003fff; valaddr_reg:x3; val_offset:84192*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84192*0 + 3*416*FLEN/8, x4, x1, x2)

inst_28065:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000000007fff; valaddr_reg:x3; val_offset:84195*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84195*0 + 3*417*FLEN/8, x4, x1, x2)

inst_28066:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000000000ffff; valaddr_reg:x3; val_offset:84198*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84198*0 + 3*418*FLEN/8, x4, x1, x2)

inst_28067:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000000001ffff; valaddr_reg:x3; val_offset:84201*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84201*0 + 3*419*FLEN/8, x4, x1, x2)

inst_28068:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000000003ffff; valaddr_reg:x3; val_offset:84204*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84204*0 + 3*420*FLEN/8, x4, x1, x2)

inst_28069:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000000007ffff; valaddr_reg:x3; val_offset:84207*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84207*0 + 3*421*FLEN/8, x4, x1, x2)

inst_28070:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500000000fffff; valaddr_reg:x3; val_offset:84210*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84210*0 + 3*422*FLEN/8, x4, x1, x2)

inst_28071:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500000001fffff; valaddr_reg:x3; val_offset:84213*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84213*0 + 3*423*FLEN/8, x4, x1, x2)

inst_28072:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500000003fffff; valaddr_reg:x3; val_offset:84216*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84216*0 + 3*424*FLEN/8, x4, x1, x2)

inst_28073:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500000007fffff; valaddr_reg:x3; val_offset:84219*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84219*0 + 3*425*FLEN/8, x4, x1, x2)

inst_28074:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000000ffffff; valaddr_reg:x3; val_offset:84222*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84222*0 + 3*426*FLEN/8, x4, x1, x2)

inst_28075:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000001ffffff; valaddr_reg:x3; val_offset:84225*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84225*0 + 3*427*FLEN/8, x4, x1, x2)

inst_28076:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000003ffffff; valaddr_reg:x3; val_offset:84228*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84228*0 + 3*428*FLEN/8, x4, x1, x2)

inst_28077:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000007ffffff; valaddr_reg:x3; val_offset:84231*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84231*0 + 3*429*FLEN/8, x4, x1, x2)

inst_28078:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000000fffffff; valaddr_reg:x3; val_offset:84234*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84234*0 + 3*430*FLEN/8, x4, x1, x2)

inst_28079:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000001fffffff; valaddr_reg:x3; val_offset:84237*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84237*0 + 3*431*FLEN/8, x4, x1, x2)

inst_28080:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000003fffffff; valaddr_reg:x3; val_offset:84240*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84240*0 + 3*432*FLEN/8, x4, x1, x2)

inst_28081:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000007fffffff; valaddr_reg:x3; val_offset:84243*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84243*0 + 3*433*FLEN/8, x4, x1, x2)

inst_28082:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500000ffffffff; valaddr_reg:x3; val_offset:84246*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84246*0 + 3*434*FLEN/8, x4, x1, x2)

inst_28083:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500001ffffffff; valaddr_reg:x3; val_offset:84249*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84249*0 + 3*435*FLEN/8, x4, x1, x2)

inst_28084:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500003ffffffff; valaddr_reg:x3; val_offset:84252*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84252*0 + 3*436*FLEN/8, x4, x1, x2)

inst_28085:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500007ffffffff; valaddr_reg:x3; val_offset:84255*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84255*0 + 3*437*FLEN/8, x4, x1, x2)

inst_28086:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850000fffffffff; valaddr_reg:x3; val_offset:84258*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84258*0 + 3*438*FLEN/8, x4, x1, x2)

inst_28087:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850001fffffffff; valaddr_reg:x3; val_offset:84261*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84261*0 + 3*439*FLEN/8, x4, x1, x2)

inst_28088:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850003fffffffff; valaddr_reg:x3; val_offset:84264*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84264*0 + 3*440*FLEN/8, x4, x1, x2)

inst_28089:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850007fffffffff; valaddr_reg:x3; val_offset:84267*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84267*0 + 3*441*FLEN/8, x4, x1, x2)

inst_28090:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385000ffffffffff; valaddr_reg:x3; val_offset:84270*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84270*0 + 3*442*FLEN/8, x4, x1, x2)

inst_28091:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385001ffffffffff; valaddr_reg:x3; val_offset:84273*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84273*0 + 3*443*FLEN/8, x4, x1, x2)

inst_28092:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385003ffffffffff; valaddr_reg:x3; val_offset:84276*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84276*0 + 3*444*FLEN/8, x4, x1, x2)

inst_28093:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385007ffffffffff; valaddr_reg:x3; val_offset:84279*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84279*0 + 3*445*FLEN/8, x4, x1, x2)

inst_28094:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38500fffffffffff; valaddr_reg:x3; val_offset:84282*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84282*0 + 3*446*FLEN/8, x4, x1, x2)

inst_28095:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38501fffffffffff; valaddr_reg:x3; val_offset:84285*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84285*0 + 3*447*FLEN/8, x4, x1, x2)

inst_28096:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38503fffffffffff; valaddr_reg:x3; val_offset:84288*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84288*0 + 3*448*FLEN/8, x4, x1, x2)

inst_28097:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x38507fffffffffff; valaddr_reg:x3; val_offset:84291*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84291*0 + 3*449*FLEN/8, x4, x1, x2)

inst_28098:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3850ffffffffffff; valaddr_reg:x3; val_offset:84294*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84294*0 + 3*450*FLEN/8, x4, x1, x2)

inst_28099:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3851ffffffffffff; valaddr_reg:x3; val_offset:84297*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84297*0 + 3*451*FLEN/8, x4, x1, x2)

inst_28100:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3853ffffffffffff; valaddr_reg:x3; val_offset:84300*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84300*0 + 3*452*FLEN/8, x4, x1, x2)

inst_28101:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3857ffffffffffff; valaddr_reg:x3; val_offset:84303*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84303*0 + 3*453*FLEN/8, x4, x1, x2)

inst_28102:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3858000000000000; valaddr_reg:x3; val_offset:84306*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84306*0 + 3*454*FLEN/8, x4, x1, x2)

inst_28103:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385c000000000000; valaddr_reg:x3; val_offset:84309*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84309*0 + 3*455*FLEN/8, x4, x1, x2)

inst_28104:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385e000000000000; valaddr_reg:x3; val_offset:84312*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84312*0 + 3*456*FLEN/8, x4, x1, x2)

inst_28105:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385f000000000000; valaddr_reg:x3; val_offset:84315*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84315*0 + 3*457*FLEN/8, x4, x1, x2)

inst_28106:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385f800000000000; valaddr_reg:x3; val_offset:84318*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84318*0 + 3*458*FLEN/8, x4, x1, x2)

inst_28107:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fc00000000000; valaddr_reg:x3; val_offset:84321*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84321*0 + 3*459*FLEN/8, x4, x1, x2)

inst_28108:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fe00000000000; valaddr_reg:x3; val_offset:84324*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84324*0 + 3*460*FLEN/8, x4, x1, x2)

inst_28109:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ff00000000000; valaddr_reg:x3; val_offset:84327*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84327*0 + 3*461*FLEN/8, x4, x1, x2)

inst_28110:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ff80000000000; valaddr_reg:x3; val_offset:84330*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84330*0 + 3*462*FLEN/8, x4, x1, x2)

inst_28111:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffc0000000000; valaddr_reg:x3; val_offset:84333*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84333*0 + 3*463*FLEN/8, x4, x1, x2)

inst_28112:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffe0000000000; valaddr_reg:x3; val_offset:84336*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84336*0 + 3*464*FLEN/8, x4, x1, x2)

inst_28113:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fff0000000000; valaddr_reg:x3; val_offset:84339*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84339*0 + 3*465*FLEN/8, x4, x1, x2)

inst_28114:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fff8000000000; valaddr_reg:x3; val_offset:84342*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84342*0 + 3*466*FLEN/8, x4, x1, x2)

inst_28115:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffc000000000; valaddr_reg:x3; val_offset:84345*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84345*0 + 3*467*FLEN/8, x4, x1, x2)

inst_28116:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffe000000000; valaddr_reg:x3; val_offset:84348*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84348*0 + 3*468*FLEN/8, x4, x1, x2)

inst_28117:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffff000000000; valaddr_reg:x3; val_offset:84351*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84351*0 + 3*469*FLEN/8, x4, x1, x2)

inst_28118:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffff800000000; valaddr_reg:x3; val_offset:84354*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84354*0 + 3*470*FLEN/8, x4, x1, x2)

inst_28119:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffc00000000; valaddr_reg:x3; val_offset:84357*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84357*0 + 3*471*FLEN/8, x4, x1, x2)

inst_28120:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffe00000000; valaddr_reg:x3; val_offset:84360*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84360*0 + 3*472*FLEN/8, x4, x1, x2)

inst_28121:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffff00000000; valaddr_reg:x3; val_offset:84363*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84363*0 + 3*473*FLEN/8, x4, x1, x2)

inst_28122:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffff80000000; valaddr_reg:x3; val_offset:84366*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84366*0 + 3*474*FLEN/8, x4, x1, x2)

inst_28123:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffc0000000; valaddr_reg:x3; val_offset:84369*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84369*0 + 3*475*FLEN/8, x4, x1, x2)

inst_28124:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffe0000000; valaddr_reg:x3; val_offset:84372*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84372*0 + 3*476*FLEN/8, x4, x1, x2)

inst_28125:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffff0000000; valaddr_reg:x3; val_offset:84375*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84375*0 + 3*477*FLEN/8, x4, x1, x2)

inst_28126:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffff8000000; valaddr_reg:x3; val_offset:84378*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84378*0 + 3*478*FLEN/8, x4, x1, x2)

inst_28127:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffc000000; valaddr_reg:x3; val_offset:84381*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84381*0 + 3*479*FLEN/8, x4, x1, x2)

inst_28128:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffe000000; valaddr_reg:x3; val_offset:84384*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84384*0 + 3*480*FLEN/8, x4, x1, x2)

inst_28129:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffff000000; valaddr_reg:x3; val_offset:84387*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84387*0 + 3*481*FLEN/8, x4, x1, x2)

inst_28130:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffff800000; valaddr_reg:x3; val_offset:84390*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84390*0 + 3*482*FLEN/8, x4, x1, x2)

inst_28131:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffc00000; valaddr_reg:x3; val_offset:84393*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84393*0 + 3*483*FLEN/8, x4, x1, x2)

inst_28132:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffe00000; valaddr_reg:x3; val_offset:84396*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84396*0 + 3*484*FLEN/8, x4, x1, x2)

inst_28133:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffff00000; valaddr_reg:x3; val_offset:84399*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84399*0 + 3*485*FLEN/8, x4, x1, x2)

inst_28134:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffff80000; valaddr_reg:x3; val_offset:84402*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84402*0 + 3*486*FLEN/8, x4, x1, x2)

inst_28135:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffffc0000; valaddr_reg:x3; val_offset:84405*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84405*0 + 3*487*FLEN/8, x4, x1, x2)

inst_28136:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffffe0000; valaddr_reg:x3; val_offset:84408*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84408*0 + 3*488*FLEN/8, x4, x1, x2)

inst_28137:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffff0000; valaddr_reg:x3; val_offset:84411*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84411*0 + 3*489*FLEN/8, x4, x1, x2)

inst_28138:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffff8000; valaddr_reg:x3; val_offset:84414*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84414*0 + 3*490*FLEN/8, x4, x1, x2)

inst_28139:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffffc000; valaddr_reg:x3; val_offset:84417*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84417*0 + 3*491*FLEN/8, x4, x1, x2)

inst_28140:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffffe000; valaddr_reg:x3; val_offset:84420*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84420*0 + 3*492*FLEN/8, x4, x1, x2)

inst_28141:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffffff000; valaddr_reg:x3; val_offset:84423*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84423*0 + 3*493*FLEN/8, x4, x1, x2)

inst_28142:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffffff800; valaddr_reg:x3; val_offset:84426*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84426*0 + 3*494*FLEN/8, x4, x1, x2)

inst_28143:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffffffc00; valaddr_reg:x3; val_offset:84429*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84429*0 + 3*495*FLEN/8, x4, x1, x2)

inst_28144:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffffffe00; valaddr_reg:x3; val_offset:84432*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84432*0 + 3*496*FLEN/8, x4, x1, x2)

inst_28145:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffffff00; valaddr_reg:x3; val_offset:84435*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84435*0 + 3*497*FLEN/8, x4, x1, x2)

inst_28146:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffffff80; valaddr_reg:x3; val_offset:84438*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84438*0 + 3*498*FLEN/8, x4, x1, x2)

inst_28147:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffffffc0; valaddr_reg:x3; val_offset:84441*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84441*0 + 3*499*FLEN/8, x4, x1, x2)

inst_28148:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffffffe0; valaddr_reg:x3; val_offset:84444*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84444*0 + 3*500*FLEN/8, x4, x1, x2)

inst_28149:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffffffff0; valaddr_reg:x3; val_offset:84447*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84447*0 + 3*501*FLEN/8, x4, x1, x2)

inst_28150:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffffffff8; valaddr_reg:x3; val_offset:84450*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84450*0 + 3*502*FLEN/8, x4, x1, x2)

inst_28151:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffffffffc; valaddr_reg:x3; val_offset:84453*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84453*0 + 3*503*FLEN/8, x4, x1, x2)

inst_28152:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385ffffffffffffe; valaddr_reg:x3; val_offset:84456*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84456*0 + 3*504*FLEN/8, x4, x1, x2)

inst_28153:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x385 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x385fffffffffffff; valaddr_reg:x3; val_offset:84459*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84459*0 + 3*505*FLEN/8, x4, x1, x2)

inst_28154:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:84462*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84462*0 + 3*506*FLEN/8, x4, x1, x2)

inst_28155:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:84465*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84465*0 + 3*507*FLEN/8, x4, x1, x2)

inst_28156:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:84468*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84468*0 + 3*508*FLEN/8, x4, x1, x2)

inst_28157:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:84471*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84471*0 + 3*509*FLEN/8, x4, x1, x2)

inst_28158:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:84474*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84474*0 + 3*510*FLEN/8, x4, x1, x2)

inst_28159:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:84477*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84477*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_28160:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:84480*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84480*0 + 3*512*FLEN/8, x4, x1, x2)

inst_28161:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:84483*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84483*0 + 3*513*FLEN/8, x4, x1, x2)

inst_28162:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:84486*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84486*0 + 3*514*FLEN/8, x4, x1, x2)

inst_28163:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:84489*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84489*0 + 3*515*FLEN/8, x4, x1, x2)

inst_28164:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:84492*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84492*0 + 3*516*FLEN/8, x4, x1, x2)

inst_28165:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:84495*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84495*0 + 3*517*FLEN/8, x4, x1, x2)

inst_28166:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:84498*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84498*0 + 3*518*FLEN/8, x4, x1, x2)

inst_28167:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:84501*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84501*0 + 3*519*FLEN/8, x4, x1, x2)

inst_28168:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:84504*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84504*0 + 3*520*FLEN/8, x4, x1, x2)

inst_28169:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:84507*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84507*0 + 3*521*FLEN/8, x4, x1, x2)

inst_28170:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:84510*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84510*0 + 3*522*FLEN/8, x4, x1, x2)

inst_28171:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:84513*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84513*0 + 3*523*FLEN/8, x4, x1, x2)

inst_28172:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:84516*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84516*0 + 3*524*FLEN/8, x4, x1, x2)

inst_28173:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:84519*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84519*0 + 3*525*FLEN/8, x4, x1, x2)

inst_28174:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:84522*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84522*0 + 3*526*FLEN/8, x4, x1, x2)

inst_28175:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a605f2de523b and fs2 == 0 and fe2 == 0x204 and fm2 == 0xec0e35a211b47 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a605f2de523b; op2val:0x204ec0e35a211b47;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:84525*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84525*0 + 3*527*FLEN/8, x4, x1, x2)

inst_28176:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000000000000; valaddr_reg:x3; val_offset:84528*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84528*0 + 3*528*FLEN/8, x4, x1, x2)

inst_28177:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000000000001; valaddr_reg:x3; val_offset:84531*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84531*0 + 3*529*FLEN/8, x4, x1, x2)

inst_28178:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000000000003; valaddr_reg:x3; val_offset:84534*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84534*0 + 3*530*FLEN/8, x4, x1, x2)

inst_28179:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000000000007; valaddr_reg:x3; val_offset:84537*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84537*0 + 3*531*FLEN/8, x4, x1, x2)

inst_28180:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000000000000f; valaddr_reg:x3; val_offset:84540*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84540*0 + 3*532*FLEN/8, x4, x1, x2)

inst_28181:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000000000001f; valaddr_reg:x3; val_offset:84543*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84543*0 + 3*533*FLEN/8, x4, x1, x2)

inst_28182:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000000000003f; valaddr_reg:x3; val_offset:84546*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84546*0 + 3*534*FLEN/8, x4, x1, x2)

inst_28183:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000000000007f; valaddr_reg:x3; val_offset:84549*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84549*0 + 3*535*FLEN/8, x4, x1, x2)

inst_28184:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00000000000ff; valaddr_reg:x3; val_offset:84552*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84552*0 + 3*536*FLEN/8, x4, x1, x2)

inst_28185:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00000000001ff; valaddr_reg:x3; val_offset:84555*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84555*0 + 3*537*FLEN/8, x4, x1, x2)

inst_28186:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00000000003ff; valaddr_reg:x3; val_offset:84558*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84558*0 + 3*538*FLEN/8, x4, x1, x2)

inst_28187:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00000000007ff; valaddr_reg:x3; val_offset:84561*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84561*0 + 3*539*FLEN/8, x4, x1, x2)

inst_28188:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000000000fff; valaddr_reg:x3; val_offset:84564*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84564*0 + 3*540*FLEN/8, x4, x1, x2)

inst_28189:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000000001fff; valaddr_reg:x3; val_offset:84567*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84567*0 + 3*541*FLEN/8, x4, x1, x2)

inst_28190:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000000003fff; valaddr_reg:x3; val_offset:84570*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84570*0 + 3*542*FLEN/8, x4, x1, x2)

inst_28191:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000000007fff; valaddr_reg:x3; val_offset:84573*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84573*0 + 3*543*FLEN/8, x4, x1, x2)

inst_28192:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000000000ffff; valaddr_reg:x3; val_offset:84576*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84576*0 + 3*544*FLEN/8, x4, x1, x2)

inst_28193:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000000001ffff; valaddr_reg:x3; val_offset:84579*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84579*0 + 3*545*FLEN/8, x4, x1, x2)

inst_28194:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000000003ffff; valaddr_reg:x3; val_offset:84582*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84582*0 + 3*546*FLEN/8, x4, x1, x2)

inst_28195:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000000007ffff; valaddr_reg:x3; val_offset:84585*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84585*0 + 3*547*FLEN/8, x4, x1, x2)

inst_28196:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00000000fffff; valaddr_reg:x3; val_offset:84588*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84588*0 + 3*548*FLEN/8, x4, x1, x2)

inst_28197:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00000001fffff; valaddr_reg:x3; val_offset:84591*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84591*0 + 3*549*FLEN/8, x4, x1, x2)

inst_28198:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00000003fffff; valaddr_reg:x3; val_offset:84594*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84594*0 + 3*550*FLEN/8, x4, x1, x2)

inst_28199:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00000007fffff; valaddr_reg:x3; val_offset:84597*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84597*0 + 3*551*FLEN/8, x4, x1, x2)

inst_28200:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000000ffffff; valaddr_reg:x3; val_offset:84600*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84600*0 + 3*552*FLEN/8, x4, x1, x2)

inst_28201:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000001ffffff; valaddr_reg:x3; val_offset:84603*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84603*0 + 3*553*FLEN/8, x4, x1, x2)

inst_28202:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000003ffffff; valaddr_reg:x3; val_offset:84606*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84606*0 + 3*554*FLEN/8, x4, x1, x2)

inst_28203:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000007ffffff; valaddr_reg:x3; val_offset:84609*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84609*0 + 3*555*FLEN/8, x4, x1, x2)

inst_28204:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000000fffffff; valaddr_reg:x3; val_offset:84612*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84612*0 + 3*556*FLEN/8, x4, x1, x2)

inst_28205:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000001fffffff; valaddr_reg:x3; val_offset:84615*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84615*0 + 3*557*FLEN/8, x4, x1, x2)

inst_28206:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000003fffffff; valaddr_reg:x3; val_offset:84618*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84618*0 + 3*558*FLEN/8, x4, x1, x2)

inst_28207:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000007fffffff; valaddr_reg:x3; val_offset:84621*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84621*0 + 3*559*FLEN/8, x4, x1, x2)

inst_28208:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00000ffffffff; valaddr_reg:x3; val_offset:84624*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84624*0 + 3*560*FLEN/8, x4, x1, x2)

inst_28209:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00001ffffffff; valaddr_reg:x3; val_offset:84627*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84627*0 + 3*561*FLEN/8, x4, x1, x2)

inst_28210:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00003ffffffff; valaddr_reg:x3; val_offset:84630*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84630*0 + 3*562*FLEN/8, x4, x1, x2)

inst_28211:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00007ffffffff; valaddr_reg:x3; val_offset:84633*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84633*0 + 3*563*FLEN/8, x4, x1, x2)

inst_28212:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0000fffffffff; valaddr_reg:x3; val_offset:84636*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84636*0 + 3*564*FLEN/8, x4, x1, x2)

inst_28213:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0001fffffffff; valaddr_reg:x3; val_offset:84639*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84639*0 + 3*565*FLEN/8, x4, x1, x2)

inst_28214:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0003fffffffff; valaddr_reg:x3; val_offset:84642*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84642*0 + 3*566*FLEN/8, x4, x1, x2)

inst_28215:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0007fffffffff; valaddr_reg:x3; val_offset:84645*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84645*0 + 3*567*FLEN/8, x4, x1, x2)

inst_28216:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa000ffffffffff; valaddr_reg:x3; val_offset:84648*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84648*0 + 3*568*FLEN/8, x4, x1, x2)

inst_28217:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa001ffffffffff; valaddr_reg:x3; val_offset:84651*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84651*0 + 3*569*FLEN/8, x4, x1, x2)

inst_28218:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa003ffffffffff; valaddr_reg:x3; val_offset:84654*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84654*0 + 3*570*FLEN/8, x4, x1, x2)

inst_28219:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa007ffffffffff; valaddr_reg:x3; val_offset:84657*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84657*0 + 3*571*FLEN/8, x4, x1, x2)

inst_28220:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa00fffffffffff; valaddr_reg:x3; val_offset:84660*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84660*0 + 3*572*FLEN/8, x4, x1, x2)

inst_28221:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa01fffffffffff; valaddr_reg:x3; val_offset:84663*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84663*0 + 3*573*FLEN/8, x4, x1, x2)

inst_28222:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa03fffffffffff; valaddr_reg:x3; val_offset:84666*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84666*0 + 3*574*FLEN/8, x4, x1, x2)

inst_28223:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa07fffffffffff; valaddr_reg:x3; val_offset:84669*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84669*0 + 3*575*FLEN/8, x4, x1, x2)

inst_28224:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa0ffffffffffff; valaddr_reg:x3; val_offset:84672*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84672*0 + 3*576*FLEN/8, x4, x1, x2)

inst_28225:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa1ffffffffffff; valaddr_reg:x3; val_offset:84675*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84675*0 + 3*577*FLEN/8, x4, x1, x2)

inst_28226:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa3ffffffffffff; valaddr_reg:x3; val_offset:84678*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84678*0 + 3*578*FLEN/8, x4, x1, x2)

inst_28227:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa7ffffffffffff; valaddr_reg:x3; val_offset:84681*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84681*0 + 3*579*FLEN/8, x4, x1, x2)

inst_28228:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaa8000000000000; valaddr_reg:x3; val_offset:84684*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84684*0 + 3*580*FLEN/8, x4, x1, x2)

inst_28229:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaac000000000000; valaddr_reg:x3; val_offset:84687*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84687*0 + 3*581*FLEN/8, x4, x1, x2)

inst_28230:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaae000000000000; valaddr_reg:x3; val_offset:84690*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84690*0 + 3*582*FLEN/8, x4, x1, x2)

inst_28231:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaf000000000000; valaddr_reg:x3; val_offset:84693*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84693*0 + 3*583*FLEN/8, x4, x1, x2)

inst_28232:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaf800000000000; valaddr_reg:x3; val_offset:84696*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84696*0 + 3*584*FLEN/8, x4, x1, x2)

inst_28233:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafc00000000000; valaddr_reg:x3; val_offset:84699*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84699*0 + 3*585*FLEN/8, x4, x1, x2)

inst_28234:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafe00000000000; valaddr_reg:x3; val_offset:84702*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84702*0 + 3*586*FLEN/8, x4, x1, x2)

inst_28235:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaff00000000000; valaddr_reg:x3; val_offset:84705*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84705*0 + 3*587*FLEN/8, x4, x1, x2)

inst_28236:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaff80000000000; valaddr_reg:x3; val_offset:84708*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84708*0 + 3*588*FLEN/8, x4, x1, x2)

inst_28237:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffc0000000000; valaddr_reg:x3; val_offset:84711*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84711*0 + 3*589*FLEN/8, x4, x1, x2)

inst_28238:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffe0000000000; valaddr_reg:x3; val_offset:84714*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84714*0 + 3*590*FLEN/8, x4, x1, x2)

inst_28239:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafff0000000000; valaddr_reg:x3; val_offset:84717*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84717*0 + 3*591*FLEN/8, x4, x1, x2)

inst_28240:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafff8000000000; valaddr_reg:x3; val_offset:84720*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84720*0 + 3*592*FLEN/8, x4, x1, x2)

inst_28241:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffc000000000; valaddr_reg:x3; val_offset:84723*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84723*0 + 3*593*FLEN/8, x4, x1, x2)

inst_28242:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffe000000000; valaddr_reg:x3; val_offset:84726*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84726*0 + 3*594*FLEN/8, x4, x1, x2)

inst_28243:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffff000000000; valaddr_reg:x3; val_offset:84729*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84729*0 + 3*595*FLEN/8, x4, x1, x2)

inst_28244:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffff800000000; valaddr_reg:x3; val_offset:84732*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84732*0 + 3*596*FLEN/8, x4, x1, x2)

inst_28245:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffc00000000; valaddr_reg:x3; val_offset:84735*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84735*0 + 3*597*FLEN/8, x4, x1, x2)

inst_28246:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffe00000000; valaddr_reg:x3; val_offset:84738*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84738*0 + 3*598*FLEN/8, x4, x1, x2)

inst_28247:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffff00000000; valaddr_reg:x3; val_offset:84741*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84741*0 + 3*599*FLEN/8, x4, x1, x2)

inst_28248:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffff80000000; valaddr_reg:x3; val_offset:84744*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84744*0 + 3*600*FLEN/8, x4, x1, x2)

inst_28249:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffc0000000; valaddr_reg:x3; val_offset:84747*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84747*0 + 3*601*FLEN/8, x4, x1, x2)

inst_28250:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffe0000000; valaddr_reg:x3; val_offset:84750*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84750*0 + 3*602*FLEN/8, x4, x1, x2)

inst_28251:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffff0000000; valaddr_reg:x3; val_offset:84753*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84753*0 + 3*603*FLEN/8, x4, x1, x2)

inst_28252:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffff8000000; valaddr_reg:x3; val_offset:84756*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84756*0 + 3*604*FLEN/8, x4, x1, x2)

inst_28253:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffc000000; valaddr_reg:x3; val_offset:84759*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84759*0 + 3*605*FLEN/8, x4, x1, x2)

inst_28254:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffe000000; valaddr_reg:x3; val_offset:84762*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84762*0 + 3*606*FLEN/8, x4, x1, x2)

inst_28255:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffff000000; valaddr_reg:x3; val_offset:84765*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84765*0 + 3*607*FLEN/8, x4, x1, x2)

inst_28256:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffff800000; valaddr_reg:x3; val_offset:84768*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84768*0 + 3*608*FLEN/8, x4, x1, x2)

inst_28257:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffc00000; valaddr_reg:x3; val_offset:84771*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84771*0 + 3*609*FLEN/8, x4, x1, x2)

inst_28258:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffe00000; valaddr_reg:x3; val_offset:84774*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84774*0 + 3*610*FLEN/8, x4, x1, x2)

inst_28259:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffff00000; valaddr_reg:x3; val_offset:84777*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84777*0 + 3*611*FLEN/8, x4, x1, x2)

inst_28260:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffff80000; valaddr_reg:x3; val_offset:84780*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84780*0 + 3*612*FLEN/8, x4, x1, x2)

inst_28261:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffffc0000; valaddr_reg:x3; val_offset:84783*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84783*0 + 3*613*FLEN/8, x4, x1, x2)

inst_28262:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffffe0000; valaddr_reg:x3; val_offset:84786*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84786*0 + 3*614*FLEN/8, x4, x1, x2)

inst_28263:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffff0000; valaddr_reg:x3; val_offset:84789*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84789*0 + 3*615*FLEN/8, x4, x1, x2)

inst_28264:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffff8000; valaddr_reg:x3; val_offset:84792*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84792*0 + 3*616*FLEN/8, x4, x1, x2)

inst_28265:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffffc000; valaddr_reg:x3; val_offset:84795*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84795*0 + 3*617*FLEN/8, x4, x1, x2)

inst_28266:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffffe000; valaddr_reg:x3; val_offset:84798*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84798*0 + 3*618*FLEN/8, x4, x1, x2)

inst_28267:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffffff000; valaddr_reg:x3; val_offset:84801*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84801*0 + 3*619*FLEN/8, x4, x1, x2)

inst_28268:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffffff800; valaddr_reg:x3; val_offset:84804*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84804*0 + 3*620*FLEN/8, x4, x1, x2)

inst_28269:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffffffc00; valaddr_reg:x3; val_offset:84807*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84807*0 + 3*621*FLEN/8, x4, x1, x2)

inst_28270:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffffffe00; valaddr_reg:x3; val_offset:84810*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84810*0 + 3*622*FLEN/8, x4, x1, x2)

inst_28271:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffffff00; valaddr_reg:x3; val_offset:84813*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84813*0 + 3*623*FLEN/8, x4, x1, x2)

inst_28272:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffffff80; valaddr_reg:x3; val_offset:84816*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84816*0 + 3*624*FLEN/8, x4, x1, x2)

inst_28273:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffffffc0; valaddr_reg:x3; val_offset:84819*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84819*0 + 3*625*FLEN/8, x4, x1, x2)

inst_28274:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffffffe0; valaddr_reg:x3; val_offset:84822*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84822*0 + 3*626*FLEN/8, x4, x1, x2)

inst_28275:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffffffff0; valaddr_reg:x3; val_offset:84825*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84825*0 + 3*627*FLEN/8, x4, x1, x2)

inst_28276:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffffffff8; valaddr_reg:x3; val_offset:84828*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84828*0 + 3*628*FLEN/8, x4, x1, x2)

inst_28277:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffffffffc; valaddr_reg:x3; val_offset:84831*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84831*0 + 3*629*FLEN/8, x4, x1, x2)

inst_28278:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaaffffffffffffe; valaddr_reg:x3; val_offset:84834*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84834*0 + 3*630*FLEN/8, x4, x1, x2)

inst_28279:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3aa and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbaafffffffffffff; valaddr_reg:x3; val_offset:84837*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84837*0 + 3*631*FLEN/8, x4, x1, x2)

inst_28280:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:84840*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84840*0 + 3*632*FLEN/8, x4, x1, x2)

inst_28281:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:84843*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84843*0 + 3*633*FLEN/8, x4, x1, x2)

inst_28282:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:84846*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84846*0 + 3*634*FLEN/8, x4, x1, x2)

inst_28283:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:84849*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84849*0 + 3*635*FLEN/8, x4, x1, x2)

inst_28284:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:84852*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84852*0 + 3*636*FLEN/8, x4, x1, x2)

inst_28285:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:84855*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84855*0 + 3*637*FLEN/8, x4, x1, x2)

inst_28286:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:84858*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84858*0 + 3*638*FLEN/8, x4, x1, x2)

inst_28287:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:84861*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84861*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_28288:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:84864*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84864*0 + 3*640*FLEN/8, x4, x1, x2)

inst_28289:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:84867*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84867*0 + 3*641*FLEN/8, x4, x1, x2)

inst_28290:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:84870*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84870*0 + 3*642*FLEN/8, x4, x1, x2)

inst_28291:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:84873*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84873*0 + 3*643*FLEN/8, x4, x1, x2)

inst_28292:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:84876*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84876*0 + 3*644*FLEN/8, x4, x1, x2)

inst_28293:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:84879*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84879*0 + 3*645*FLEN/8, x4, x1, x2)

inst_28294:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:84882*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84882*0 + 3*646*FLEN/8, x4, x1, x2)

inst_28295:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:84885*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84885*0 + 3*647*FLEN/8, x4, x1, x2)

inst_28296:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:84888*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84888*0 + 3*648*FLEN/8, x4, x1, x2)

inst_28297:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:84891*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84891*0 + 3*649*FLEN/8, x4, x1, x2)

inst_28298:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:84894*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84894*0 + 3*650*FLEN/8, x4, x1, x2)

inst_28299:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:84897*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84897*0 + 3*651*FLEN/8, x4, x1, x2)

inst_28300:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:84900*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84900*0 + 3*652*FLEN/8, x4, x1, x2)

inst_28301:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xea940de13b47e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b2db44ae8c01; op2val:0x9fdea940de13b47e;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:84903*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84903*0 + 3*653*FLEN/8, x4, x1, x2)

inst_28302:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:84906*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84906*0 + 3*654*FLEN/8, x4, x1, x2)

inst_28303:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:84909*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84909*0 + 3*655*FLEN/8, x4, x1, x2)

inst_28304:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:84912*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84912*0 + 3*656*FLEN/8, x4, x1, x2)

inst_28305:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:84915*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84915*0 + 3*657*FLEN/8, x4, x1, x2)

inst_28306:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:84918*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84918*0 + 3*658*FLEN/8, x4, x1, x2)

inst_28307:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:84921*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84921*0 + 3*659*FLEN/8, x4, x1, x2)

inst_28308:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:84924*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84924*0 + 3*660*FLEN/8, x4, x1, x2)

inst_28309:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:84927*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84927*0 + 3*661*FLEN/8, x4, x1, x2)

inst_28310:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:84930*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84930*0 + 3*662*FLEN/8, x4, x1, x2)

inst_28311:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:84933*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84933*0 + 3*663*FLEN/8, x4, x1, x2)

inst_28312:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:84936*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84936*0 + 3*664*FLEN/8, x4, x1, x2)

inst_28313:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:84939*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84939*0 + 3*665*FLEN/8, x4, x1, x2)

inst_28314:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:84942*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84942*0 + 3*666*FLEN/8, x4, x1, x2)

inst_28315:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:84945*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84945*0 + 3*667*FLEN/8, x4, x1, x2)

inst_28316:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:84948*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84948*0 + 3*668*FLEN/8, x4, x1, x2)

inst_28317:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:84951*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84951*0 + 3*669*FLEN/8, x4, x1, x2)

inst_28318:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:84954*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84954*0 + 3*670*FLEN/8, x4, x1, x2)

inst_28319:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:84957*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84957*0 + 3*671*FLEN/8, x4, x1, x2)

inst_28320:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:84960*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84960*0 + 3*672*FLEN/8, x4, x1, x2)

inst_28321:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:84963*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84963*0 + 3*673*FLEN/8, x4, x1, x2)

inst_28322:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:84966*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84966*0 + 3*674*FLEN/8, x4, x1, x2)

inst_28323:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:84969*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84969*0 + 3*675*FLEN/8, x4, x1, x2)

inst_28324:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000000000000; valaddr_reg:x3; val_offset:84972*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84972*0 + 3*676*FLEN/8, x4, x1, x2)

inst_28325:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000000000001; valaddr_reg:x3; val_offset:84975*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84975*0 + 3*677*FLEN/8, x4, x1, x2)

inst_28326:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000000000003; valaddr_reg:x3; val_offset:84978*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84978*0 + 3*678*FLEN/8, x4, x1, x2)

inst_28327:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000000000007; valaddr_reg:x3; val_offset:84981*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84981*0 + 3*679*FLEN/8, x4, x1, x2)

inst_28328:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000000000000f; valaddr_reg:x3; val_offset:84984*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84984*0 + 3*680*FLEN/8, x4, x1, x2)

inst_28329:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000000000001f; valaddr_reg:x3; val_offset:84987*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84987*0 + 3*681*FLEN/8, x4, x1, x2)

inst_28330:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000000000003f; valaddr_reg:x3; val_offset:84990*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84990*0 + 3*682*FLEN/8, x4, x1, x2)

inst_28331:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000000000007f; valaddr_reg:x3; val_offset:84993*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84993*0 + 3*683*FLEN/8, x4, x1, x2)

inst_28332:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00000000000ff; valaddr_reg:x3; val_offset:84996*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84996*0 + 3*684*FLEN/8, x4, x1, x2)

inst_28333:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00000000001ff; valaddr_reg:x3; val_offset:84999*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84999*0 + 3*685*FLEN/8, x4, x1, x2)

inst_28334:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00000000003ff; valaddr_reg:x3; val_offset:85002*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85002*0 + 3*686*FLEN/8, x4, x1, x2)

inst_28335:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00000000007ff; valaddr_reg:x3; val_offset:85005*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85005*0 + 3*687*FLEN/8, x4, x1, x2)

inst_28336:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000000000fff; valaddr_reg:x3; val_offset:85008*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85008*0 + 3*688*FLEN/8, x4, x1, x2)

inst_28337:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000000001fff; valaddr_reg:x3; val_offset:85011*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85011*0 + 3*689*FLEN/8, x4, x1, x2)

inst_28338:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000000003fff; valaddr_reg:x3; val_offset:85014*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85014*0 + 3*690*FLEN/8, x4, x1, x2)

inst_28339:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000000007fff; valaddr_reg:x3; val_offset:85017*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85017*0 + 3*691*FLEN/8, x4, x1, x2)

inst_28340:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000000000ffff; valaddr_reg:x3; val_offset:85020*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85020*0 + 3*692*FLEN/8, x4, x1, x2)

inst_28341:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000000001ffff; valaddr_reg:x3; val_offset:85023*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85023*0 + 3*693*FLEN/8, x4, x1, x2)

inst_28342:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000000003ffff; valaddr_reg:x3; val_offset:85026*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85026*0 + 3*694*FLEN/8, x4, x1, x2)

inst_28343:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000000007ffff; valaddr_reg:x3; val_offset:85029*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85029*0 + 3*695*FLEN/8, x4, x1, x2)

inst_28344:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00000000fffff; valaddr_reg:x3; val_offset:85032*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85032*0 + 3*696*FLEN/8, x4, x1, x2)

inst_28345:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00000001fffff; valaddr_reg:x3; val_offset:85035*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85035*0 + 3*697*FLEN/8, x4, x1, x2)

inst_28346:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00000003fffff; valaddr_reg:x3; val_offset:85038*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85038*0 + 3*698*FLEN/8, x4, x1, x2)

inst_28347:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00000007fffff; valaddr_reg:x3; val_offset:85041*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85041*0 + 3*699*FLEN/8, x4, x1, x2)

inst_28348:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000000ffffff; valaddr_reg:x3; val_offset:85044*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85044*0 + 3*700*FLEN/8, x4, x1, x2)

inst_28349:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000001ffffff; valaddr_reg:x3; val_offset:85047*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85047*0 + 3*701*FLEN/8, x4, x1, x2)

inst_28350:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000003ffffff; valaddr_reg:x3; val_offset:85050*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85050*0 + 3*702*FLEN/8, x4, x1, x2)

inst_28351:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000007ffffff; valaddr_reg:x3; val_offset:85053*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85053*0 + 3*703*FLEN/8, x4, x1, x2)

inst_28352:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000000fffffff; valaddr_reg:x3; val_offset:85056*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85056*0 + 3*704*FLEN/8, x4, x1, x2)

inst_28353:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000001fffffff; valaddr_reg:x3; val_offset:85059*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85059*0 + 3*705*FLEN/8, x4, x1, x2)

inst_28354:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000003fffffff; valaddr_reg:x3; val_offset:85062*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85062*0 + 3*706*FLEN/8, x4, x1, x2)

inst_28355:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000007fffffff; valaddr_reg:x3; val_offset:85065*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85065*0 + 3*707*FLEN/8, x4, x1, x2)

inst_28356:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00000ffffffff; valaddr_reg:x3; val_offset:85068*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85068*0 + 3*708*FLEN/8, x4, x1, x2)

inst_28357:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00001ffffffff; valaddr_reg:x3; val_offset:85071*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85071*0 + 3*709*FLEN/8, x4, x1, x2)

inst_28358:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00003ffffffff; valaddr_reg:x3; val_offset:85074*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85074*0 + 3*710*FLEN/8, x4, x1, x2)

inst_28359:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00007ffffffff; valaddr_reg:x3; val_offset:85077*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85077*0 + 3*711*FLEN/8, x4, x1, x2)

inst_28360:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0000fffffffff; valaddr_reg:x3; val_offset:85080*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85080*0 + 3*712*FLEN/8, x4, x1, x2)

inst_28361:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0001fffffffff; valaddr_reg:x3; val_offset:85083*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85083*0 + 3*713*FLEN/8, x4, x1, x2)

inst_28362:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0003fffffffff; valaddr_reg:x3; val_offset:85086*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85086*0 + 3*714*FLEN/8, x4, x1, x2)

inst_28363:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0007fffffffff; valaddr_reg:x3; val_offset:85089*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85089*0 + 3*715*FLEN/8, x4, x1, x2)

inst_28364:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b000ffffffffff; valaddr_reg:x3; val_offset:85092*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85092*0 + 3*716*FLEN/8, x4, x1, x2)

inst_28365:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b001ffffffffff; valaddr_reg:x3; val_offset:85095*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85095*0 + 3*717*FLEN/8, x4, x1, x2)

inst_28366:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b003ffffffffff; valaddr_reg:x3; val_offset:85098*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85098*0 + 3*718*FLEN/8, x4, x1, x2)

inst_28367:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b007ffffffffff; valaddr_reg:x3; val_offset:85101*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85101*0 + 3*719*FLEN/8, x4, x1, x2)

inst_28368:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b00fffffffffff; valaddr_reg:x3; val_offset:85104*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85104*0 + 3*720*FLEN/8, x4, x1, x2)

inst_28369:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b01fffffffffff; valaddr_reg:x3; val_offset:85107*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85107*0 + 3*721*FLEN/8, x4, x1, x2)

inst_28370:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b03fffffffffff; valaddr_reg:x3; val_offset:85110*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85110*0 + 3*722*FLEN/8, x4, x1, x2)

inst_28371:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b07fffffffffff; valaddr_reg:x3; val_offset:85113*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85113*0 + 3*723*FLEN/8, x4, x1, x2)

inst_28372:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b0ffffffffffff; valaddr_reg:x3; val_offset:85116*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85116*0 + 3*724*FLEN/8, x4, x1, x2)

inst_28373:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b1ffffffffffff; valaddr_reg:x3; val_offset:85119*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85119*0 + 3*725*FLEN/8, x4, x1, x2)

inst_28374:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b3ffffffffffff; valaddr_reg:x3; val_offset:85122*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85122*0 + 3*726*FLEN/8, x4, x1, x2)

inst_28375:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b7ffffffffffff; valaddr_reg:x3; val_offset:85125*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85125*0 + 3*727*FLEN/8, x4, x1, x2)

inst_28376:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82b8000000000000; valaddr_reg:x3; val_offset:85128*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85128*0 + 3*728*FLEN/8, x4, x1, x2)

inst_28377:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bc000000000000; valaddr_reg:x3; val_offset:85131*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85131*0 + 3*729*FLEN/8, x4, x1, x2)

inst_28378:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82be000000000000; valaddr_reg:x3; val_offset:85134*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85134*0 + 3*730*FLEN/8, x4, x1, x2)

inst_28379:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bf000000000000; valaddr_reg:x3; val_offset:85137*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85137*0 + 3*731*FLEN/8, x4, x1, x2)

inst_28380:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bf800000000000; valaddr_reg:x3; val_offset:85140*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85140*0 + 3*732*FLEN/8, x4, x1, x2)

inst_28381:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfc00000000000; valaddr_reg:x3; val_offset:85143*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85143*0 + 3*733*FLEN/8, x4, x1, x2)

inst_28382:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfe00000000000; valaddr_reg:x3; val_offset:85146*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85146*0 + 3*734*FLEN/8, x4, x1, x2)

inst_28383:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bff00000000000; valaddr_reg:x3; val_offset:85149*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85149*0 + 3*735*FLEN/8, x4, x1, x2)

inst_28384:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bff80000000000; valaddr_reg:x3; val_offset:85152*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85152*0 + 3*736*FLEN/8, x4, x1, x2)

inst_28385:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffc0000000000; valaddr_reg:x3; val_offset:85155*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85155*0 + 3*737*FLEN/8, x4, x1, x2)

inst_28386:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffe0000000000; valaddr_reg:x3; val_offset:85158*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85158*0 + 3*738*FLEN/8, x4, x1, x2)

inst_28387:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfff0000000000; valaddr_reg:x3; val_offset:85161*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85161*0 + 3*739*FLEN/8, x4, x1, x2)

inst_28388:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfff8000000000; valaddr_reg:x3; val_offset:85164*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85164*0 + 3*740*FLEN/8, x4, x1, x2)

inst_28389:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffc000000000; valaddr_reg:x3; val_offset:85167*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85167*0 + 3*741*FLEN/8, x4, x1, x2)

inst_28390:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffe000000000; valaddr_reg:x3; val_offset:85170*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85170*0 + 3*742*FLEN/8, x4, x1, x2)

inst_28391:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffff000000000; valaddr_reg:x3; val_offset:85173*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85173*0 + 3*743*FLEN/8, x4, x1, x2)

inst_28392:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffff800000000; valaddr_reg:x3; val_offset:85176*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85176*0 + 3*744*FLEN/8, x4, x1, x2)

inst_28393:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffc00000000; valaddr_reg:x3; val_offset:85179*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85179*0 + 3*745*FLEN/8, x4, x1, x2)

inst_28394:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffe00000000; valaddr_reg:x3; val_offset:85182*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85182*0 + 3*746*FLEN/8, x4, x1, x2)

inst_28395:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffff00000000; valaddr_reg:x3; val_offset:85185*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85185*0 + 3*747*FLEN/8, x4, x1, x2)

inst_28396:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffff80000000; valaddr_reg:x3; val_offset:85188*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85188*0 + 3*748*FLEN/8, x4, x1, x2)

inst_28397:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffffc0000000; valaddr_reg:x3; val_offset:85191*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85191*0 + 3*749*FLEN/8, x4, x1, x2)

inst_28398:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffffe0000000; valaddr_reg:x3; val_offset:85194*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85194*0 + 3*750*FLEN/8, x4, x1, x2)

inst_28399:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffff0000000; valaddr_reg:x3; val_offset:85197*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85197*0 + 3*751*FLEN/8, x4, x1, x2)

inst_28400:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffff8000000; valaddr_reg:x3; val_offset:85200*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85200*0 + 3*752*FLEN/8, x4, x1, x2)

inst_28401:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffffc000000; valaddr_reg:x3; val_offset:85203*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85203*0 + 3*753*FLEN/8, x4, x1, x2)

inst_28402:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffffe000000; valaddr_reg:x3; val_offset:85206*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85206*0 + 3*754*FLEN/8, x4, x1, x2)

inst_28403:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffffff000000; valaddr_reg:x3; val_offset:85209*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85209*0 + 3*755*FLEN/8, x4, x1, x2)

inst_28404:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffffff800000; valaddr_reg:x3; val_offset:85212*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85212*0 + 3*756*FLEN/8, x4, x1, x2)

inst_28405:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffffffc00000; valaddr_reg:x3; val_offset:85215*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85215*0 + 3*757*FLEN/8, x4, x1, x2)

inst_28406:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffffffe00000; valaddr_reg:x3; val_offset:85218*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85218*0 + 3*758*FLEN/8, x4, x1, x2)

inst_28407:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffffff00000; valaddr_reg:x3; val_offset:85221*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85221*0 + 3*759*FLEN/8, x4, x1, x2)

inst_28408:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffffff80000; valaddr_reg:x3; val_offset:85224*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85224*0 + 3*760*FLEN/8, x4, x1, x2)

inst_28409:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffffffc0000; valaddr_reg:x3; val_offset:85227*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85227*0 + 3*761*FLEN/8, x4, x1, x2)

inst_28410:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffffffe0000; valaddr_reg:x3; val_offset:85230*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85230*0 + 3*762*FLEN/8, x4, x1, x2)

inst_28411:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffffffff0000; valaddr_reg:x3; val_offset:85233*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85233*0 + 3*763*FLEN/8, x4, x1, x2)

inst_28412:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffffffff8000; valaddr_reg:x3; val_offset:85236*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85236*0 + 3*764*FLEN/8, x4, x1, x2)

inst_28413:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffffffffc000; valaddr_reg:x3; val_offset:85239*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85239*0 + 3*765*FLEN/8, x4, x1, x2)

inst_28414:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bfffffffffe000; valaddr_reg:x3; val_offset:85242*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85242*0 + 3*766*FLEN/8, x4, x1, x2)

inst_28415:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0b406ea2e2cb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90b406ea2e2cb5; op2val:0x8000;
op3val:0x82bffffffffff000; valaddr_reg:x3; val_offset:85245*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85245*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176888582144,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176892776448,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176894873600,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176895922176,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896446464,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896708608,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896839680,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896905216,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896937984,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896954368,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896962560,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896966656,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896968704,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896969728,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970240,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970496,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970624,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970688,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970720,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970736,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970744,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970748,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970750,64,FLEN)
NAN_BOXED(6886102906827377345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970751,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115755008,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115755009,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115755011,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115755015,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115755023,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115755039,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115755071,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115755135,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115755263,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115755519,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115756031,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115757055,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115759103,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115763199,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115771391,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115787775,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115820543,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428115886079,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428116017151,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428116279295,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428116803583,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428117852159,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428119949311,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428124143615,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428132532223,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428149309439,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428182863871,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428249972735,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428384190463,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592428652625919,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592429189496831,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592430263238655,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592432410722303,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592436705689599,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592445295624191,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592462475493375,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592496835231743,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592565554708479,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592702993661951,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494592977871568895,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494593527627382783,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494594627139010559,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494596826162266111,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494601224208777215,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494610020301799423,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494627612487843839,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494662796859932671,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494733165604110335,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4494873903092465663,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4495155378069176319,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4495718328022597631,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4496844227929440255,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4496844227929440256,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4497970127836282880,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4498533077789704192,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4498814552766414848,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4498955290254770176,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499025658998947840,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499060843371036672,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499078435557081088,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499087231650103296,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499091629696614400,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499093828719869952,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499094928231497728,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499095477987311616,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499095752865218560,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499095890304172032,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499095959023648768,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499095993383387136,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096010563256320,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096019153190912,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096023448158208,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096025595641856,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096026669383680,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027206254592,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027474690048,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027608907776,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027676016640,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027709571072,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027726348288,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027734736896,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027738931200,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027741028352,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027742076928,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027742601216,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027742863360,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027742994432,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743059968,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743092736,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743109120,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743117312,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743121408,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743123456,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743124480,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743124992,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743125248,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743125376,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743125440,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743125472,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743125488,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743125496,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743125500,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743125502,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4499096027743125503,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6886120721560452809,64,FLEN)
NAN_BOXED(2328133139069219625,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677861888,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677861889,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677861891,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677861895,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677861903,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677861919,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677861951,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677862015,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677862143,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677862399,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677862911,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677863935,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677865983,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677870079,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677878271,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677894655,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677927423,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671677992959,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671678124031,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671678386175,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671678910463,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671679959039,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671682056191,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671686250495,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671694639103,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671711416319,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671744970751,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671812079615,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899671946297343,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899672214732799,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899672751603711,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899673825345535,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899675972829183,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899680267796479,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899688857731071,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899706037600255,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899740397338623,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899809116815359,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636899946555768831,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636900221433675775,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636900771189489663,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636901870701117439,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636904069724372991,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636908467770884095,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636917263863906303,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636934856049950719,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13636970040422039551,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13637040409166217215,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13637181146654572543,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13637462621631283199,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13638025571584704511,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13639151471491547135,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13639151471491547136,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13640277371398389760,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13640840321351811072,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641121796328521728,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641262533816877056,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641332902561054720,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641368086933143552,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641385679119187968,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641394475212210176,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641398873258721280,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641401072281976832,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641402171793604608,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641402721549418496,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641402996427325440,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403133866278912,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403202585755648,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403236945494016,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403254125363200,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403262715297792,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403267010265088,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403269157748736,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403270231490560,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403270768361472,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271036796928,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271171014656,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271238123520,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271271677952,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271288455168,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271296843776,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271301038080,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271303135232,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271304183808,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271304708096,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271304970240,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305101312,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305166848,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305199616,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305216000,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305224192,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305228288,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305230336,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305231360,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305231872,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305232128,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305232256,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305232320,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305232352,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305232368,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305232376,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305232380,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305232382,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13641403271305232383,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6886127803756058873,64,FLEN)
NAN_BOXED(11519966542345129617,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762089472,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762089473,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762089475,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762089479,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762089487,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762089503,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762089535,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762089599,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762089727,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762089983,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762090495,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762091519,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762093567,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762097663,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762105855,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762122239,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762155007,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762220543,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762351615,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824762613759,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824763138047,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824764186623,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824766283775,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824770478079,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824778866687,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824795643903,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824829198335,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124824896307199,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124825030524927,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124825298960383,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124825835831295,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124826909573119,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124829057056767,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124833352024063,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124841941958655,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124859121827839,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124893481566207,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535124962201042943,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535125099639996415,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535125374517903359,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535125924273717247,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535127023785345023,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535129222808600575,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535133620855111679,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535142416948133887,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535160009134178303,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535195193506267135,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535265562250444799,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535406299738800127,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4535687774715510783,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4536250724668932095,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4537376624575774719,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4537376624575774720,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4538502524482617344,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539065474436038656,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539346949412749312,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539487686901104640,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539558055645282304,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539593240017371136,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539610832203415552,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539619628296437760,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539624026342948864,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539626225366204416,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539627324877832192,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539627874633646080,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628149511553024,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628286950506496,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628355669983232,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628390029721600,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628407209590784,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628415799525376,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628420094492672,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628422241976320,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628423315718144,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628423852589056,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424121024512,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424255242240,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424322351104,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424355905536,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424372682752,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424381071360,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424385265664,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424387362816,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424388411392,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424388935680,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389197824,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389328896,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389394432,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389427200,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389443584,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389451776,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389455872,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389457920,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389458944,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389459456,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389459712,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389459840,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389459904,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389459936,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389459952,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389459960,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389459964,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389459966,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4539628424389459967,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6886178018360263477,64,FLEN)
NAN_BOXED(2328025603713317665,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260816896,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260816897,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260816899,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260816903,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260816911,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260816927,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260816959,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260817023,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260817151,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260817407,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260817919,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260818943,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260820991,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260825087,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260833279,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260849663,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260882431,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264260947967,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264261079039,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264261341183,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264261865471,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264262914047,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264265011199,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264269205503,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264277594111,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264294371327,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264327925759,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264395034623,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264529252351,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743264797687807,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743265334558719,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743266408300543,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743268555784191,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743272850751487,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743281440686079,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743298620555263,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743332980293631,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743401699770367,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743539138723839,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057743814016630783,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057744363772444671,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057745463284072447,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057747662307327999,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057752060353839103,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057760856446861311,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057778448632905727,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057813633004994559,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4057884001749172223,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4058024739237527551,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4058306214214238207,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4058869164167659519,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4059995064074502143,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4059995064074502144,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4061120963981344768,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4061683913934766080,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4061965388911476736,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062106126399832064,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062176495144009728,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062211679516098560,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062229271702142976,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062238067795165184,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062242465841676288,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062244664864931840,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062245764376559616,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246314132373504,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246589010280448,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246726449233920,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246795168710656,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246829528449024,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246846708318208,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246855298252800,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246859593220096,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246861740703744,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246862814445568,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863351316480,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863619751936,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863753969664,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863821078528,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863854632960,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863871410176,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863879798784,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863883993088,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863886090240,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863887138816,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863887663104,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863887925248,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888056320,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888121856,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888154624,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888171008,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888179200,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888183296,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888185344,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888186368,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888186880,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888187136,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888187264,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888187328,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888187360,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888187376,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888187384,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888187388,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888187390,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4062246863888187391,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6886186374729191995,64,FLEN)
NAN_BOXED(2328010140099353415,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328301056,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328301057,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328301059,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328301063,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328301071,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328301087,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328301119,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328301183,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328301311,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328301567,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328302079,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328303103,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328305151,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328309247,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328317439,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328333823,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328366591,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328432127,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328563199,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487328825343,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487329349631,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487330398207,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487332495359,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487336689663,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487345078271,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487361855487,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487395409919,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487462518783,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487596736511,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748487865171967,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748488402042879,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748489475784703,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748491623268351,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748495918235647,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748504508170239,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748521688039423,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748556047777791,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748624767254527,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447748762206207999,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447749037084114943,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447749586839928831,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447750686351556607,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447752885374812159,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447757283421323263,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447766079514345471,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447783671700389887,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447818856072478719,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13447889224816656383,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13448029962305011711,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13448311437281722367,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13448874387235143679,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13450000287141986303,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13450000287141986304,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13451126187048828928,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13451689137002250240,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13451970611978960896,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452111349467316224,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452181718211493888,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452216902583582720,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452234494769627136,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452243290862649344,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452247688909160448,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452249887932416000,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452250987444043776,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452251537199857664,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452251812077764608,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452251949516718080,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252018236194816,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252052595933184,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252069775802368,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252078365736960,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252082660704256,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252084808187904,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252085881929728,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086418800640,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086687236096,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086821453824,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086888562688,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086922117120,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086938894336,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086947282944,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086951477248,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086953574400,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086954622976,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955147264,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955409408,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955540480,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955606016,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955638784,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955655168,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955663360,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955667456,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955669504,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955670528,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955671040,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955671296,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955671424,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955671488,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955671520,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955671536,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955671544,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955671548,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955671550,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13452252086955671551,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6886200485069360129,64,FLEN)
NAN_BOXED(11519830992929141886,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707136,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707137,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707139,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707143,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707151,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707167,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707199,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707263,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707391,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707647,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831708159,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831709183,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831711231,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831715327,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831723519,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831739903,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831772671,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831838207,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831969279,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820832231423,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820832755711,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820833804287,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820835901439,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820840095743,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820848484351,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820865261567,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820898815999,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820965924863,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026821100142591,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026821368578047,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026821905448959,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026822979190783,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026825126674431,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026829421641727,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026838011576319,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026855191445503,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026889551183871,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026958270660607,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417027095709614079,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417027370587521023,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417027920343334911,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417029019854962687,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417031218878218239,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417035616924729343,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417044413017751551,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417062005203795967,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417097189575884799,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417167558320062463,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417308295808417791,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417589770785128447,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9418152720738549759,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9419278620645392383,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9419278620645392384,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9420404520552235008,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9420967470505656320,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421248945482366976,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421389682970722304,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421460051714899968,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421495236086988800,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421512828273033216,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421521624366055424,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421526022412566528,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421528221435822080,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421529320947449856,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421529870703263744,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530145581170688,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530283020124160,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530351739600896,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530386099339264,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530403279208448,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530411869143040,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530416164110336,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530418311593984,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530419385335808,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530419922206720,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420190642176,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420324859904,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420391968768,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420425523200,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420442300416,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420450689024,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420454883328,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420456980480,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420458029056,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420458553344,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420458815488,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420458946560,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459012096,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459044864,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459061248,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459069440,64,FLEN)
NAN_BOXED(6886201772041186485,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459073536,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
