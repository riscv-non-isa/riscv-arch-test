
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_79872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000000000003f; valaddr_reg:x3; val_offset:239616*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239616*0 + 3*0*FLEN/8, x4, x1, x2)

inst_79873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000000000007f; valaddr_reg:x3; val_offset:239619*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239619*0 + 3*1*FLEN/8, x4, x1, x2)

inst_79874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700000000000ff; valaddr_reg:x3; val_offset:239622*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239622*0 + 3*2*FLEN/8, x4, x1, x2)

inst_79875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700000000001ff; valaddr_reg:x3; val_offset:239625*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239625*0 + 3*3*FLEN/8, x4, x1, x2)

inst_79876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700000000003ff; valaddr_reg:x3; val_offset:239628*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239628*0 + 3*4*FLEN/8, x4, x1, x2)

inst_79877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700000000007ff; valaddr_reg:x3; val_offset:239631*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239631*0 + 3*5*FLEN/8, x4, x1, x2)

inst_79878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770000000000fff; valaddr_reg:x3; val_offset:239634*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239634*0 + 3*6*FLEN/8, x4, x1, x2)

inst_79879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770000000001fff; valaddr_reg:x3; val_offset:239637*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239637*0 + 3*7*FLEN/8, x4, x1, x2)

inst_79880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770000000003fff; valaddr_reg:x3; val_offset:239640*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239640*0 + 3*8*FLEN/8, x4, x1, x2)

inst_79881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770000000007fff; valaddr_reg:x3; val_offset:239643*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239643*0 + 3*9*FLEN/8, x4, x1, x2)

inst_79882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000000000ffff; valaddr_reg:x3; val_offset:239646*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239646*0 + 3*10*FLEN/8, x4, x1, x2)

inst_79883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000000001ffff; valaddr_reg:x3; val_offset:239649*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239649*0 + 3*11*FLEN/8, x4, x1, x2)

inst_79884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000000003ffff; valaddr_reg:x3; val_offset:239652*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239652*0 + 3*12*FLEN/8, x4, x1, x2)

inst_79885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000000007ffff; valaddr_reg:x3; val_offset:239655*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239655*0 + 3*13*FLEN/8, x4, x1, x2)

inst_79886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700000000fffff; valaddr_reg:x3; val_offset:239658*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239658*0 + 3*14*FLEN/8, x4, x1, x2)

inst_79887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700000001fffff; valaddr_reg:x3; val_offset:239661*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239661*0 + 3*15*FLEN/8, x4, x1, x2)

inst_79888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700000003fffff; valaddr_reg:x3; val_offset:239664*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239664*0 + 3*16*FLEN/8, x4, x1, x2)

inst_79889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700000007fffff; valaddr_reg:x3; val_offset:239667*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239667*0 + 3*17*FLEN/8, x4, x1, x2)

inst_79890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770000000ffffff; valaddr_reg:x3; val_offset:239670*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239670*0 + 3*18*FLEN/8, x4, x1, x2)

inst_79891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770000001ffffff; valaddr_reg:x3; val_offset:239673*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239673*0 + 3*19*FLEN/8, x4, x1, x2)

inst_79892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770000003ffffff; valaddr_reg:x3; val_offset:239676*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239676*0 + 3*20*FLEN/8, x4, x1, x2)

inst_79893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770000007ffffff; valaddr_reg:x3; val_offset:239679*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239679*0 + 3*21*FLEN/8, x4, x1, x2)

inst_79894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000000fffffff; valaddr_reg:x3; val_offset:239682*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239682*0 + 3*22*FLEN/8, x4, x1, x2)

inst_79895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000001fffffff; valaddr_reg:x3; val_offset:239685*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239685*0 + 3*23*FLEN/8, x4, x1, x2)

inst_79896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000003fffffff; valaddr_reg:x3; val_offset:239688*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239688*0 + 3*24*FLEN/8, x4, x1, x2)

inst_79897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000007fffffff; valaddr_reg:x3; val_offset:239691*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239691*0 + 3*25*FLEN/8, x4, x1, x2)

inst_79898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700000ffffffff; valaddr_reg:x3; val_offset:239694*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239694*0 + 3*26*FLEN/8, x4, x1, x2)

inst_79899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700001ffffffff; valaddr_reg:x3; val_offset:239697*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239697*0 + 3*27*FLEN/8, x4, x1, x2)

inst_79900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700003ffffffff; valaddr_reg:x3; val_offset:239700*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239700*0 + 3*28*FLEN/8, x4, x1, x2)

inst_79901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700007ffffffff; valaddr_reg:x3; val_offset:239703*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239703*0 + 3*29*FLEN/8, x4, x1, x2)

inst_79902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770000fffffffff; valaddr_reg:x3; val_offset:239706*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239706*0 + 3*30*FLEN/8, x4, x1, x2)

inst_79903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770001fffffffff; valaddr_reg:x3; val_offset:239709*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239709*0 + 3*31*FLEN/8, x4, x1, x2)

inst_79904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770003fffffffff; valaddr_reg:x3; val_offset:239712*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239712*0 + 3*32*FLEN/8, x4, x1, x2)

inst_79905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770007fffffffff; valaddr_reg:x3; val_offset:239715*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239715*0 + 3*33*FLEN/8, x4, x1, x2)

inst_79906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77000ffffffffff; valaddr_reg:x3; val_offset:239718*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239718*0 + 3*34*FLEN/8, x4, x1, x2)

inst_79907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77001ffffffffff; valaddr_reg:x3; val_offset:239721*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239721*0 + 3*35*FLEN/8, x4, x1, x2)

inst_79908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77003ffffffffff; valaddr_reg:x3; val_offset:239724*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239724*0 + 3*36*FLEN/8, x4, x1, x2)

inst_79909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77007ffffffffff; valaddr_reg:x3; val_offset:239727*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239727*0 + 3*37*FLEN/8, x4, x1, x2)

inst_79910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7700fffffffffff; valaddr_reg:x3; val_offset:239730*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239730*0 + 3*38*FLEN/8, x4, x1, x2)

inst_79911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7701fffffffffff; valaddr_reg:x3; val_offset:239733*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239733*0 + 3*39*FLEN/8, x4, x1, x2)

inst_79912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7703fffffffffff; valaddr_reg:x3; val_offset:239736*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239736*0 + 3*40*FLEN/8, x4, x1, x2)

inst_79913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb7707fffffffffff; valaddr_reg:x3; val_offset:239739*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239739*0 + 3*41*FLEN/8, x4, x1, x2)

inst_79914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb770ffffffffffff; valaddr_reg:x3; val_offset:239742*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239742*0 + 3*42*FLEN/8, x4, x1, x2)

inst_79915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb771ffffffffffff; valaddr_reg:x3; val_offset:239745*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239745*0 + 3*43*FLEN/8, x4, x1, x2)

inst_79916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb773ffffffffffff; valaddr_reg:x3; val_offset:239748*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239748*0 + 3*44*FLEN/8, x4, x1, x2)

inst_79917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb777ffffffffffff; valaddr_reg:x3; val_offset:239751*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239751*0 + 3*45*FLEN/8, x4, x1, x2)

inst_79918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb778000000000000; valaddr_reg:x3; val_offset:239754*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239754*0 + 3*46*FLEN/8, x4, x1, x2)

inst_79919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77c000000000000; valaddr_reg:x3; val_offset:239757*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239757*0 + 3*47*FLEN/8, x4, x1, x2)

inst_79920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77e000000000000; valaddr_reg:x3; val_offset:239760*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239760*0 + 3*48*FLEN/8, x4, x1, x2)

inst_79921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77f000000000000; valaddr_reg:x3; val_offset:239763*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239763*0 + 3*49*FLEN/8, x4, x1, x2)

inst_79922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77f800000000000; valaddr_reg:x3; val_offset:239766*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239766*0 + 3*50*FLEN/8, x4, x1, x2)

inst_79923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fc00000000000; valaddr_reg:x3; val_offset:239769*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239769*0 + 3*51*FLEN/8, x4, x1, x2)

inst_79924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fe00000000000; valaddr_reg:x3; val_offset:239772*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239772*0 + 3*52*FLEN/8, x4, x1, x2)

inst_79925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ff00000000000; valaddr_reg:x3; val_offset:239775*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239775*0 + 3*53*FLEN/8, x4, x1, x2)

inst_79926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ff80000000000; valaddr_reg:x3; val_offset:239778*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239778*0 + 3*54*FLEN/8, x4, x1, x2)

inst_79927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffc0000000000; valaddr_reg:x3; val_offset:239781*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239781*0 + 3*55*FLEN/8, x4, x1, x2)

inst_79928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffe0000000000; valaddr_reg:x3; val_offset:239784*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239784*0 + 3*56*FLEN/8, x4, x1, x2)

inst_79929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fff0000000000; valaddr_reg:x3; val_offset:239787*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239787*0 + 3*57*FLEN/8, x4, x1, x2)

inst_79930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fff8000000000; valaddr_reg:x3; val_offset:239790*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239790*0 + 3*58*FLEN/8, x4, x1, x2)

inst_79931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffc000000000; valaddr_reg:x3; val_offset:239793*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239793*0 + 3*59*FLEN/8, x4, x1, x2)

inst_79932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffe000000000; valaddr_reg:x3; val_offset:239796*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239796*0 + 3*60*FLEN/8, x4, x1, x2)

inst_79933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffff000000000; valaddr_reg:x3; val_offset:239799*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239799*0 + 3*61*FLEN/8, x4, x1, x2)

inst_79934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffff800000000; valaddr_reg:x3; val_offset:239802*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239802*0 + 3*62*FLEN/8, x4, x1, x2)

inst_79935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffc00000000; valaddr_reg:x3; val_offset:239805*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239805*0 + 3*63*FLEN/8, x4, x1, x2)

inst_79936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffe00000000; valaddr_reg:x3; val_offset:239808*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239808*0 + 3*64*FLEN/8, x4, x1, x2)

inst_79937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffff00000000; valaddr_reg:x3; val_offset:239811*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239811*0 + 3*65*FLEN/8, x4, x1, x2)

inst_79938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffff80000000; valaddr_reg:x3; val_offset:239814*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239814*0 + 3*66*FLEN/8, x4, x1, x2)

inst_79939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffc0000000; valaddr_reg:x3; val_offset:239817*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239817*0 + 3*67*FLEN/8, x4, x1, x2)

inst_79940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffe0000000; valaddr_reg:x3; val_offset:239820*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239820*0 + 3*68*FLEN/8, x4, x1, x2)

inst_79941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffff0000000; valaddr_reg:x3; val_offset:239823*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239823*0 + 3*69*FLEN/8, x4, x1, x2)

inst_79942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffff8000000; valaddr_reg:x3; val_offset:239826*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239826*0 + 3*70*FLEN/8, x4, x1, x2)

inst_79943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffc000000; valaddr_reg:x3; val_offset:239829*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239829*0 + 3*71*FLEN/8, x4, x1, x2)

inst_79944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffe000000; valaddr_reg:x3; val_offset:239832*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239832*0 + 3*72*FLEN/8, x4, x1, x2)

inst_79945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffff000000; valaddr_reg:x3; val_offset:239835*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239835*0 + 3*73*FLEN/8, x4, x1, x2)

inst_79946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffff800000; valaddr_reg:x3; val_offset:239838*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239838*0 + 3*74*FLEN/8, x4, x1, x2)

inst_79947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffc00000; valaddr_reg:x3; val_offset:239841*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239841*0 + 3*75*FLEN/8, x4, x1, x2)

inst_79948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffe00000; valaddr_reg:x3; val_offset:239844*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239844*0 + 3*76*FLEN/8, x4, x1, x2)

inst_79949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffff00000; valaddr_reg:x3; val_offset:239847*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239847*0 + 3*77*FLEN/8, x4, x1, x2)

inst_79950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffff80000; valaddr_reg:x3; val_offset:239850*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239850*0 + 3*78*FLEN/8, x4, x1, x2)

inst_79951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffffc0000; valaddr_reg:x3; val_offset:239853*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239853*0 + 3*79*FLEN/8, x4, x1, x2)

inst_79952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffffe0000; valaddr_reg:x3; val_offset:239856*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239856*0 + 3*80*FLEN/8, x4, x1, x2)

inst_79953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffff0000; valaddr_reg:x3; val_offset:239859*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239859*0 + 3*81*FLEN/8, x4, x1, x2)

inst_79954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffff8000; valaddr_reg:x3; val_offset:239862*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239862*0 + 3*82*FLEN/8, x4, x1, x2)

inst_79955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffffc000; valaddr_reg:x3; val_offset:239865*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239865*0 + 3*83*FLEN/8, x4, x1, x2)

inst_79956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffffe000; valaddr_reg:x3; val_offset:239868*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239868*0 + 3*84*FLEN/8, x4, x1, x2)

inst_79957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffffff000; valaddr_reg:x3; val_offset:239871*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239871*0 + 3*85*FLEN/8, x4, x1, x2)

inst_79958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffffff800; valaddr_reg:x3; val_offset:239874*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239874*0 + 3*86*FLEN/8, x4, x1, x2)

inst_79959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffffffc00; valaddr_reg:x3; val_offset:239877*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239877*0 + 3*87*FLEN/8, x4, x1, x2)

inst_79960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffffffe00; valaddr_reg:x3; val_offset:239880*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239880*0 + 3*88*FLEN/8, x4, x1, x2)

inst_79961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffffff00; valaddr_reg:x3; val_offset:239883*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239883*0 + 3*89*FLEN/8, x4, x1, x2)

inst_79962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffffff80; valaddr_reg:x3; val_offset:239886*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239886*0 + 3*90*FLEN/8, x4, x1, x2)

inst_79963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffffffc0; valaddr_reg:x3; val_offset:239889*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239889*0 + 3*91*FLEN/8, x4, x1, x2)

inst_79964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffffffe0; valaddr_reg:x3; val_offset:239892*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239892*0 + 3*92*FLEN/8, x4, x1, x2)

inst_79965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffffffff0; valaddr_reg:x3; val_offset:239895*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239895*0 + 3*93*FLEN/8, x4, x1, x2)

inst_79966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffffffff8; valaddr_reg:x3; val_offset:239898*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239898*0 + 3*94*FLEN/8, x4, x1, x2)

inst_79967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffffffffc; valaddr_reg:x3; val_offset:239901*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239901*0 + 3*95*FLEN/8, x4, x1, x2)

inst_79968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77ffffffffffffe; valaddr_reg:x3; val_offset:239904*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239904*0 + 3*96*FLEN/8, x4, x1, x2)

inst_79969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x377 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xb77fffffffffffff; valaddr_reg:x3; val_offset:239907*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239907*0 + 3*97*FLEN/8, x4, x1, x2)

inst_79970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:239910*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239910*0 + 3*98*FLEN/8, x4, x1, x2)

inst_79971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:239913*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239913*0 + 3*99*FLEN/8, x4, x1, x2)

inst_79972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:239916*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239916*0 + 3*100*FLEN/8, x4, x1, x2)

inst_79973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:239919*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239919*0 + 3*101*FLEN/8, x4, x1, x2)

inst_79974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:239922*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239922*0 + 3*102*FLEN/8, x4, x1, x2)

inst_79975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:239925*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239925*0 + 3*103*FLEN/8, x4, x1, x2)

inst_79976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:239928*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239928*0 + 3*104*FLEN/8, x4, x1, x2)

inst_79977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:239931*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239931*0 + 3*105*FLEN/8, x4, x1, x2)

inst_79978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:239934*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239934*0 + 3*106*FLEN/8, x4, x1, x2)

inst_79979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:239937*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239937*0 + 3*107*FLEN/8, x4, x1, x2)

inst_79980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:239940*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239940*0 + 3*108*FLEN/8, x4, x1, x2)

inst_79981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:239943*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239943*0 + 3*109*FLEN/8, x4, x1, x2)

inst_79982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:239946*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239946*0 + 3*110*FLEN/8, x4, x1, x2)

inst_79983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:239949*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239949*0 + 3*111*FLEN/8, x4, x1, x2)

inst_79984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:239952*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239952*0 + 3*112*FLEN/8, x4, x1, x2)

inst_79985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:239955*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239955*0 + 3*113*FLEN/8, x4, x1, x2)

inst_79986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:239958*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239958*0 + 3*114*FLEN/8, x4, x1, x2)

inst_79987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:239961*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239961*0 + 3*115*FLEN/8, x4, x1, x2)

inst_79988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:239964*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239964*0 + 3*116*FLEN/8, x4, x1, x2)

inst_79989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:239967*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239967*0 + 3*117*FLEN/8, x4, x1, x2)

inst_79990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:239970*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239970*0 + 3*118*FLEN/8, x4, x1, x2)

inst_79991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x94497c97803a8 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x44348d738b7fb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa94497c97803a8; op2val:0x9fc44348d738b7fb;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:239973*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239973*0 + 3*119*FLEN/8, x4, x1, x2)

inst_79992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000000000000; valaddr_reg:x3; val_offset:239976*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239976*0 + 3*120*FLEN/8, x4, x1, x2)

inst_79993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000000000001; valaddr_reg:x3; val_offset:239979*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239979*0 + 3*121*FLEN/8, x4, x1, x2)

inst_79994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000000000003; valaddr_reg:x3; val_offset:239982*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239982*0 + 3*122*FLEN/8, x4, x1, x2)

inst_79995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000000000007; valaddr_reg:x3; val_offset:239985*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239985*0 + 3*123*FLEN/8, x4, x1, x2)

inst_79996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000000000000f; valaddr_reg:x3; val_offset:239988*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239988*0 + 3*124*FLEN/8, x4, x1, x2)

inst_79997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000000000001f; valaddr_reg:x3; val_offset:239991*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239991*0 + 3*125*FLEN/8, x4, x1, x2)

inst_79998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000000000003f; valaddr_reg:x3; val_offset:239994*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239994*0 + 3*126*FLEN/8, x4, x1, x2)

inst_79999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000000000007f; valaddr_reg:x3; val_offset:239997*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 239997*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_80000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600000000000ff; valaddr_reg:x3; val_offset:240000*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240000*0 + 3*128*FLEN/8, x4, x1, x2)

inst_80001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600000000001ff; valaddr_reg:x3; val_offset:240003*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240003*0 + 3*129*FLEN/8, x4, x1, x2)

inst_80002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600000000003ff; valaddr_reg:x3; val_offset:240006*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240006*0 + 3*130*FLEN/8, x4, x1, x2)

inst_80003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600000000007ff; valaddr_reg:x3; val_offset:240009*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240009*0 + 3*131*FLEN/8, x4, x1, x2)

inst_80004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000000000fff; valaddr_reg:x3; val_offset:240012*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240012*0 + 3*132*FLEN/8, x4, x1, x2)

inst_80005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000000001fff; valaddr_reg:x3; val_offset:240015*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240015*0 + 3*133*FLEN/8, x4, x1, x2)

inst_80006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000000003fff; valaddr_reg:x3; val_offset:240018*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240018*0 + 3*134*FLEN/8, x4, x1, x2)

inst_80007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000000007fff; valaddr_reg:x3; val_offset:240021*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240021*0 + 3*135*FLEN/8, x4, x1, x2)

inst_80008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000000000ffff; valaddr_reg:x3; val_offset:240024*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240024*0 + 3*136*FLEN/8, x4, x1, x2)

inst_80009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000000001ffff; valaddr_reg:x3; val_offset:240027*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240027*0 + 3*137*FLEN/8, x4, x1, x2)

inst_80010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000000003ffff; valaddr_reg:x3; val_offset:240030*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240030*0 + 3*138*FLEN/8, x4, x1, x2)

inst_80011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000000007ffff; valaddr_reg:x3; val_offset:240033*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240033*0 + 3*139*FLEN/8, x4, x1, x2)

inst_80012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600000000fffff; valaddr_reg:x3; val_offset:240036*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240036*0 + 3*140*FLEN/8, x4, x1, x2)

inst_80013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600000001fffff; valaddr_reg:x3; val_offset:240039*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240039*0 + 3*141*FLEN/8, x4, x1, x2)

inst_80014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600000003fffff; valaddr_reg:x3; val_offset:240042*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240042*0 + 3*142*FLEN/8, x4, x1, x2)

inst_80015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600000007fffff; valaddr_reg:x3; val_offset:240045*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240045*0 + 3*143*FLEN/8, x4, x1, x2)

inst_80016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000000ffffff; valaddr_reg:x3; val_offset:240048*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240048*0 + 3*144*FLEN/8, x4, x1, x2)

inst_80017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000001ffffff; valaddr_reg:x3; val_offset:240051*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240051*0 + 3*145*FLEN/8, x4, x1, x2)

inst_80018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000003ffffff; valaddr_reg:x3; val_offset:240054*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240054*0 + 3*146*FLEN/8, x4, x1, x2)

inst_80019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000007ffffff; valaddr_reg:x3; val_offset:240057*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240057*0 + 3*147*FLEN/8, x4, x1, x2)

inst_80020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000000fffffff; valaddr_reg:x3; val_offset:240060*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240060*0 + 3*148*FLEN/8, x4, x1, x2)

inst_80021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000001fffffff; valaddr_reg:x3; val_offset:240063*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240063*0 + 3*149*FLEN/8, x4, x1, x2)

inst_80022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000003fffffff; valaddr_reg:x3; val_offset:240066*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240066*0 + 3*150*FLEN/8, x4, x1, x2)

inst_80023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000007fffffff; valaddr_reg:x3; val_offset:240069*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240069*0 + 3*151*FLEN/8, x4, x1, x2)

inst_80024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600000ffffffff; valaddr_reg:x3; val_offset:240072*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240072*0 + 3*152*FLEN/8, x4, x1, x2)

inst_80025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600001ffffffff; valaddr_reg:x3; val_offset:240075*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240075*0 + 3*153*FLEN/8, x4, x1, x2)

inst_80026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600003ffffffff; valaddr_reg:x3; val_offset:240078*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240078*0 + 3*154*FLEN/8, x4, x1, x2)

inst_80027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600007ffffffff; valaddr_reg:x3; val_offset:240081*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240081*0 + 3*155*FLEN/8, x4, x1, x2)

inst_80028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60000fffffffff; valaddr_reg:x3; val_offset:240084*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240084*0 + 3*156*FLEN/8, x4, x1, x2)

inst_80029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60001fffffffff; valaddr_reg:x3; val_offset:240087*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240087*0 + 3*157*FLEN/8, x4, x1, x2)

inst_80030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60003fffffffff; valaddr_reg:x3; val_offset:240090*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240090*0 + 3*158*FLEN/8, x4, x1, x2)

inst_80031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60007fffffffff; valaddr_reg:x3; val_offset:240093*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240093*0 + 3*159*FLEN/8, x4, x1, x2)

inst_80032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6000ffffffffff; valaddr_reg:x3; val_offset:240096*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240096*0 + 3*160*FLEN/8, x4, x1, x2)

inst_80033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6001ffffffffff; valaddr_reg:x3; val_offset:240099*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240099*0 + 3*161*FLEN/8, x4, x1, x2)

inst_80034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6003ffffffffff; valaddr_reg:x3; val_offset:240102*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240102*0 + 3*162*FLEN/8, x4, x1, x2)

inst_80035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6007ffffffffff; valaddr_reg:x3; val_offset:240105*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240105*0 + 3*163*FLEN/8, x4, x1, x2)

inst_80036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf600fffffffffff; valaddr_reg:x3; val_offset:240108*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240108*0 + 3*164*FLEN/8, x4, x1, x2)

inst_80037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf601fffffffffff; valaddr_reg:x3; val_offset:240111*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240111*0 + 3*165*FLEN/8, x4, x1, x2)

inst_80038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf603fffffffffff; valaddr_reg:x3; val_offset:240114*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240114*0 + 3*166*FLEN/8, x4, x1, x2)

inst_80039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf607fffffffffff; valaddr_reg:x3; val_offset:240117*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240117*0 + 3*167*FLEN/8, x4, x1, x2)

inst_80040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf60ffffffffffff; valaddr_reg:x3; val_offset:240120*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240120*0 + 3*168*FLEN/8, x4, x1, x2)

inst_80041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf61ffffffffffff; valaddr_reg:x3; val_offset:240123*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240123*0 + 3*169*FLEN/8, x4, x1, x2)

inst_80042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf63ffffffffffff; valaddr_reg:x3; val_offset:240126*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240126*0 + 3*170*FLEN/8, x4, x1, x2)

inst_80043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf67ffffffffffff; valaddr_reg:x3; val_offset:240129*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240129*0 + 3*171*FLEN/8, x4, x1, x2)

inst_80044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf68000000000000; valaddr_reg:x3; val_offset:240132*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240132*0 + 3*172*FLEN/8, x4, x1, x2)

inst_80045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6c000000000000; valaddr_reg:x3; val_offset:240135*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240135*0 + 3*173*FLEN/8, x4, x1, x2)

inst_80046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6e000000000000; valaddr_reg:x3; val_offset:240138*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240138*0 + 3*174*FLEN/8, x4, x1, x2)

inst_80047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6f000000000000; valaddr_reg:x3; val_offset:240141*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240141*0 + 3*175*FLEN/8, x4, x1, x2)

inst_80048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6f800000000000; valaddr_reg:x3; val_offset:240144*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240144*0 + 3*176*FLEN/8, x4, x1, x2)

inst_80049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fc00000000000; valaddr_reg:x3; val_offset:240147*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240147*0 + 3*177*FLEN/8, x4, x1, x2)

inst_80050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fe00000000000; valaddr_reg:x3; val_offset:240150*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240150*0 + 3*178*FLEN/8, x4, x1, x2)

inst_80051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ff00000000000; valaddr_reg:x3; val_offset:240153*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240153*0 + 3*179*FLEN/8, x4, x1, x2)

inst_80052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ff80000000000; valaddr_reg:x3; val_offset:240156*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240156*0 + 3*180*FLEN/8, x4, x1, x2)

inst_80053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffc0000000000; valaddr_reg:x3; val_offset:240159*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240159*0 + 3*181*FLEN/8, x4, x1, x2)

inst_80054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffe0000000000; valaddr_reg:x3; val_offset:240162*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240162*0 + 3*182*FLEN/8, x4, x1, x2)

inst_80055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fff0000000000; valaddr_reg:x3; val_offset:240165*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240165*0 + 3*183*FLEN/8, x4, x1, x2)

inst_80056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fff8000000000; valaddr_reg:x3; val_offset:240168*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240168*0 + 3*184*FLEN/8, x4, x1, x2)

inst_80057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffc000000000; valaddr_reg:x3; val_offset:240171*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240171*0 + 3*185*FLEN/8, x4, x1, x2)

inst_80058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffe000000000; valaddr_reg:x3; val_offset:240174*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240174*0 + 3*186*FLEN/8, x4, x1, x2)

inst_80059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffff000000000; valaddr_reg:x3; val_offset:240177*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240177*0 + 3*187*FLEN/8, x4, x1, x2)

inst_80060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffff800000000; valaddr_reg:x3; val_offset:240180*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240180*0 + 3*188*FLEN/8, x4, x1, x2)

inst_80061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffc00000000; valaddr_reg:x3; val_offset:240183*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240183*0 + 3*189*FLEN/8, x4, x1, x2)

inst_80062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffe00000000; valaddr_reg:x3; val_offset:240186*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240186*0 + 3*190*FLEN/8, x4, x1, x2)

inst_80063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffff00000000; valaddr_reg:x3; val_offset:240189*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240189*0 + 3*191*FLEN/8, x4, x1, x2)

inst_80064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffff80000000; valaddr_reg:x3; val_offset:240192*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240192*0 + 3*192*FLEN/8, x4, x1, x2)

inst_80065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffc0000000; valaddr_reg:x3; val_offset:240195*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240195*0 + 3*193*FLEN/8, x4, x1, x2)

inst_80066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffe0000000; valaddr_reg:x3; val_offset:240198*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240198*0 + 3*194*FLEN/8, x4, x1, x2)

inst_80067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffff0000000; valaddr_reg:x3; val_offset:240201*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240201*0 + 3*195*FLEN/8, x4, x1, x2)

inst_80068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffff8000000; valaddr_reg:x3; val_offset:240204*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240204*0 + 3*196*FLEN/8, x4, x1, x2)

inst_80069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffc000000; valaddr_reg:x3; val_offset:240207*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240207*0 + 3*197*FLEN/8, x4, x1, x2)

inst_80070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffe000000; valaddr_reg:x3; val_offset:240210*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240210*0 + 3*198*FLEN/8, x4, x1, x2)

inst_80071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffff000000; valaddr_reg:x3; val_offset:240213*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240213*0 + 3*199*FLEN/8, x4, x1, x2)

inst_80072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffff800000; valaddr_reg:x3; val_offset:240216*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240216*0 + 3*200*FLEN/8, x4, x1, x2)

inst_80073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffc00000; valaddr_reg:x3; val_offset:240219*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240219*0 + 3*201*FLEN/8, x4, x1, x2)

inst_80074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffe00000; valaddr_reg:x3; val_offset:240222*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240222*0 + 3*202*FLEN/8, x4, x1, x2)

inst_80075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffff00000; valaddr_reg:x3; val_offset:240225*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240225*0 + 3*203*FLEN/8, x4, x1, x2)

inst_80076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffff80000; valaddr_reg:x3; val_offset:240228*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240228*0 + 3*204*FLEN/8, x4, x1, x2)

inst_80077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffffc0000; valaddr_reg:x3; val_offset:240231*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240231*0 + 3*205*FLEN/8, x4, x1, x2)

inst_80078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffffe0000; valaddr_reg:x3; val_offset:240234*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240234*0 + 3*206*FLEN/8, x4, x1, x2)

inst_80079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffff0000; valaddr_reg:x3; val_offset:240237*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240237*0 + 3*207*FLEN/8, x4, x1, x2)

inst_80080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffff8000; valaddr_reg:x3; val_offset:240240*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240240*0 + 3*208*FLEN/8, x4, x1, x2)

inst_80081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffffc000; valaddr_reg:x3; val_offset:240243*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240243*0 + 3*209*FLEN/8, x4, x1, x2)

inst_80082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffffe000; valaddr_reg:x3; val_offset:240246*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240246*0 + 3*210*FLEN/8, x4, x1, x2)

inst_80083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffffff000; valaddr_reg:x3; val_offset:240249*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240249*0 + 3*211*FLEN/8, x4, x1, x2)

inst_80084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffffff800; valaddr_reg:x3; val_offset:240252*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240252*0 + 3*212*FLEN/8, x4, x1, x2)

inst_80085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffffffc00; valaddr_reg:x3; val_offset:240255*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240255*0 + 3*213*FLEN/8, x4, x1, x2)

inst_80086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffffffe00; valaddr_reg:x3; val_offset:240258*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240258*0 + 3*214*FLEN/8, x4, x1, x2)

inst_80087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffffff00; valaddr_reg:x3; val_offset:240261*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240261*0 + 3*215*FLEN/8, x4, x1, x2)

inst_80088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffffff80; valaddr_reg:x3; val_offset:240264*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240264*0 + 3*216*FLEN/8, x4, x1, x2)

inst_80089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffffffc0; valaddr_reg:x3; val_offset:240267*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240267*0 + 3*217*FLEN/8, x4, x1, x2)

inst_80090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffffffe0; valaddr_reg:x3; val_offset:240270*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240270*0 + 3*218*FLEN/8, x4, x1, x2)

inst_80091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffffffff0; valaddr_reg:x3; val_offset:240273*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240273*0 + 3*219*FLEN/8, x4, x1, x2)

inst_80092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffffffff8; valaddr_reg:x3; val_offset:240276*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240276*0 + 3*220*FLEN/8, x4, x1, x2)

inst_80093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffffffffc; valaddr_reg:x3; val_offset:240279*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240279*0 + 3*221*FLEN/8, x4, x1, x2)

inst_80094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6ffffffffffffe; valaddr_reg:x3; val_offset:240282*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240282*0 + 3*222*FLEN/8, x4, x1, x2)

inst_80095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f6 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf6fffffffffffff; valaddr_reg:x3; val_offset:240285*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240285*0 + 3*223*FLEN/8, x4, x1, x2)

inst_80096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:240288*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240288*0 + 3*224*FLEN/8, x4, x1, x2)

inst_80097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:240291*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240291*0 + 3*225*FLEN/8, x4, x1, x2)

inst_80098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:240294*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240294*0 + 3*226*FLEN/8, x4, x1, x2)

inst_80099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:240297*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240297*0 + 3*227*FLEN/8, x4, x1, x2)

inst_80100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:240300*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240300*0 + 3*228*FLEN/8, x4, x1, x2)

inst_80101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:240303*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240303*0 + 3*229*FLEN/8, x4, x1, x2)

inst_80102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:240306*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240306*0 + 3*230*FLEN/8, x4, x1, x2)

inst_80103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:240309*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240309*0 + 3*231*FLEN/8, x4, x1, x2)

inst_80104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:240312*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240312*0 + 3*232*FLEN/8, x4, x1, x2)

inst_80105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:240315*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240315*0 + 3*233*FLEN/8, x4, x1, x2)

inst_80106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:240318*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240318*0 + 3*234*FLEN/8, x4, x1, x2)

inst_80107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:240321*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240321*0 + 3*235*FLEN/8, x4, x1, x2)

inst_80108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:240324*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240324*0 + 3*236*FLEN/8, x4, x1, x2)

inst_80109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:240327*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240327*0 + 3*237*FLEN/8, x4, x1, x2)

inst_80110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:240330*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240330*0 + 3*238*FLEN/8, x4, x1, x2)

inst_80111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:240333*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240333*0 + 3*239*FLEN/8, x4, x1, x2)

inst_80112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:240336*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240336*0 + 3*240*FLEN/8, x4, x1, x2)

inst_80113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:240339*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240339*0 + 3*241*FLEN/8, x4, x1, x2)

inst_80114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:240342*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240342*0 + 3*242*FLEN/8, x4, x1, x2)

inst_80115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:240345*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240345*0 + 3*243*FLEN/8, x4, x1, x2)

inst_80116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:240348*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240348*0 + 3*244*FLEN/8, x4, x1, x2)

inst_80117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x439fdfcffa32f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x9fc439fdfcffa32f;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:240351*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240351*0 + 3*245*FLEN/8, x4, x1, x2)

inst_80118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:240354*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240354*0 + 3*246*FLEN/8, x4, x1, x2)

inst_80119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:240357*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240357*0 + 3*247*FLEN/8, x4, x1, x2)

inst_80120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:240360*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240360*0 + 3*248*FLEN/8, x4, x1, x2)

inst_80121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:240363*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240363*0 + 3*249*FLEN/8, x4, x1, x2)

inst_80122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:240366*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240366*0 + 3*250*FLEN/8, x4, x1, x2)

inst_80123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:240369*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240369*0 + 3*251*FLEN/8, x4, x1, x2)

inst_80124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:240372*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240372*0 + 3*252*FLEN/8, x4, x1, x2)

inst_80125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:240375*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240375*0 + 3*253*FLEN/8, x4, x1, x2)

inst_80126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:240378*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240378*0 + 3*254*FLEN/8, x4, x1, x2)

inst_80127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:240381*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240381*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_80128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:240384*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240384*0 + 3*256*FLEN/8, x4, x1, x2)

inst_80129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:240387*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240387*0 + 3*257*FLEN/8, x4, x1, x2)

inst_80130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:240390*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240390*0 + 3*258*FLEN/8, x4, x1, x2)

inst_80131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:240393*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240393*0 + 3*259*FLEN/8, x4, x1, x2)

inst_80132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:240396*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240396*0 + 3*260*FLEN/8, x4, x1, x2)

inst_80133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:240399*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240399*0 + 3*261*FLEN/8, x4, x1, x2)

inst_80134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:240402*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240402*0 + 3*262*FLEN/8, x4, x1, x2)

inst_80135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:240405*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240405*0 + 3*263*FLEN/8, x4, x1, x2)

inst_80136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:240408*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240408*0 + 3*264*FLEN/8, x4, x1, x2)

inst_80137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:240411*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240411*0 + 3*265*FLEN/8, x4, x1, x2)

inst_80138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:240414*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240414*0 + 3*266*FLEN/8, x4, x1, x2)

inst_80139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:240417*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240417*0 + 3*267*FLEN/8, x4, x1, x2)

inst_80140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000000000000; valaddr_reg:x3; val_offset:240420*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240420*0 + 3*268*FLEN/8, x4, x1, x2)

inst_80141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000000000001; valaddr_reg:x3; val_offset:240423*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240423*0 + 3*269*FLEN/8, x4, x1, x2)

inst_80142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000000000003; valaddr_reg:x3; val_offset:240426*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240426*0 + 3*270*FLEN/8, x4, x1, x2)

inst_80143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000000000007; valaddr_reg:x3; val_offset:240429*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240429*0 + 3*271*FLEN/8, x4, x1, x2)

inst_80144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000000000000f; valaddr_reg:x3; val_offset:240432*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240432*0 + 3*272*FLEN/8, x4, x1, x2)

inst_80145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000000000001f; valaddr_reg:x3; val_offset:240435*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240435*0 + 3*273*FLEN/8, x4, x1, x2)

inst_80146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000000000003f; valaddr_reg:x3; val_offset:240438*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240438*0 + 3*274*FLEN/8, x4, x1, x2)

inst_80147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000000000007f; valaddr_reg:x3; val_offset:240441*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240441*0 + 3*275*FLEN/8, x4, x1, x2)

inst_80148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400000000000ff; valaddr_reg:x3; val_offset:240444*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240444*0 + 3*276*FLEN/8, x4, x1, x2)

inst_80149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400000000001ff; valaddr_reg:x3; val_offset:240447*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240447*0 + 3*277*FLEN/8, x4, x1, x2)

inst_80150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400000000003ff; valaddr_reg:x3; val_offset:240450*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240450*0 + 3*278*FLEN/8, x4, x1, x2)

inst_80151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400000000007ff; valaddr_reg:x3; val_offset:240453*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240453*0 + 3*279*FLEN/8, x4, x1, x2)

inst_80152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000000000fff; valaddr_reg:x3; val_offset:240456*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240456*0 + 3*280*FLEN/8, x4, x1, x2)

inst_80153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000000001fff; valaddr_reg:x3; val_offset:240459*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240459*0 + 3*281*FLEN/8, x4, x1, x2)

inst_80154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000000003fff; valaddr_reg:x3; val_offset:240462*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240462*0 + 3*282*FLEN/8, x4, x1, x2)

inst_80155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000000007fff; valaddr_reg:x3; val_offset:240465*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240465*0 + 3*283*FLEN/8, x4, x1, x2)

inst_80156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000000000ffff; valaddr_reg:x3; val_offset:240468*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240468*0 + 3*284*FLEN/8, x4, x1, x2)

inst_80157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000000001ffff; valaddr_reg:x3; val_offset:240471*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240471*0 + 3*285*FLEN/8, x4, x1, x2)

inst_80158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000000003ffff; valaddr_reg:x3; val_offset:240474*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240474*0 + 3*286*FLEN/8, x4, x1, x2)

inst_80159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000000007ffff; valaddr_reg:x3; val_offset:240477*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240477*0 + 3*287*FLEN/8, x4, x1, x2)

inst_80160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400000000fffff; valaddr_reg:x3; val_offset:240480*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240480*0 + 3*288*FLEN/8, x4, x1, x2)

inst_80161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400000001fffff; valaddr_reg:x3; val_offset:240483*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240483*0 + 3*289*FLEN/8, x4, x1, x2)

inst_80162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400000003fffff; valaddr_reg:x3; val_offset:240486*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240486*0 + 3*290*FLEN/8, x4, x1, x2)

inst_80163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400000007fffff; valaddr_reg:x3; val_offset:240489*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240489*0 + 3*291*FLEN/8, x4, x1, x2)

inst_80164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000000ffffff; valaddr_reg:x3; val_offset:240492*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240492*0 + 3*292*FLEN/8, x4, x1, x2)

inst_80165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000001ffffff; valaddr_reg:x3; val_offset:240495*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240495*0 + 3*293*FLEN/8, x4, x1, x2)

inst_80166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000003ffffff; valaddr_reg:x3; val_offset:240498*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240498*0 + 3*294*FLEN/8, x4, x1, x2)

inst_80167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000007ffffff; valaddr_reg:x3; val_offset:240501*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240501*0 + 3*295*FLEN/8, x4, x1, x2)

inst_80168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000000fffffff; valaddr_reg:x3; val_offset:240504*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240504*0 + 3*296*FLEN/8, x4, x1, x2)

inst_80169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000001fffffff; valaddr_reg:x3; val_offset:240507*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240507*0 + 3*297*FLEN/8, x4, x1, x2)

inst_80170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000003fffffff; valaddr_reg:x3; val_offset:240510*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240510*0 + 3*298*FLEN/8, x4, x1, x2)

inst_80171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000007fffffff; valaddr_reg:x3; val_offset:240513*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240513*0 + 3*299*FLEN/8, x4, x1, x2)

inst_80172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400000ffffffff; valaddr_reg:x3; val_offset:240516*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240516*0 + 3*300*FLEN/8, x4, x1, x2)

inst_80173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400001ffffffff; valaddr_reg:x3; val_offset:240519*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240519*0 + 3*301*FLEN/8, x4, x1, x2)

inst_80174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400003ffffffff; valaddr_reg:x3; val_offset:240522*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240522*0 + 3*302*FLEN/8, x4, x1, x2)

inst_80175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400007ffffffff; valaddr_reg:x3; val_offset:240525*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240525*0 + 3*303*FLEN/8, x4, x1, x2)

inst_80176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040000fffffffff; valaddr_reg:x3; val_offset:240528*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240528*0 + 3*304*FLEN/8, x4, x1, x2)

inst_80177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040001fffffffff; valaddr_reg:x3; val_offset:240531*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240531*0 + 3*305*FLEN/8, x4, x1, x2)

inst_80178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040003fffffffff; valaddr_reg:x3; val_offset:240534*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240534*0 + 3*306*FLEN/8, x4, x1, x2)

inst_80179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040007fffffffff; valaddr_reg:x3; val_offset:240537*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240537*0 + 3*307*FLEN/8, x4, x1, x2)

inst_80180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804000ffffffffff; valaddr_reg:x3; val_offset:240540*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240540*0 + 3*308*FLEN/8, x4, x1, x2)

inst_80181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804001ffffffffff; valaddr_reg:x3; val_offset:240543*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240543*0 + 3*309*FLEN/8, x4, x1, x2)

inst_80182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804003ffffffffff; valaddr_reg:x3; val_offset:240546*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240546*0 + 3*310*FLEN/8, x4, x1, x2)

inst_80183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804007ffffffffff; valaddr_reg:x3; val_offset:240549*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240549*0 + 3*311*FLEN/8, x4, x1, x2)

inst_80184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80400fffffffffff; valaddr_reg:x3; val_offset:240552*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240552*0 + 3*312*FLEN/8, x4, x1, x2)

inst_80185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80401fffffffffff; valaddr_reg:x3; val_offset:240555*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240555*0 + 3*313*FLEN/8, x4, x1, x2)

inst_80186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80403fffffffffff; valaddr_reg:x3; val_offset:240558*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240558*0 + 3*314*FLEN/8, x4, x1, x2)

inst_80187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x80407fffffffffff; valaddr_reg:x3; val_offset:240561*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240561*0 + 3*315*FLEN/8, x4, x1, x2)

inst_80188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8040ffffffffffff; valaddr_reg:x3; val_offset:240564*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240564*0 + 3*316*FLEN/8, x4, x1, x2)

inst_80189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8041ffffffffffff; valaddr_reg:x3; val_offset:240567*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240567*0 + 3*317*FLEN/8, x4, x1, x2)

inst_80190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8043ffffffffffff; valaddr_reg:x3; val_offset:240570*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240570*0 + 3*318*FLEN/8, x4, x1, x2)

inst_80191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8047ffffffffffff; valaddr_reg:x3; val_offset:240573*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240573*0 + 3*319*FLEN/8, x4, x1, x2)

inst_80192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x8048000000000000; valaddr_reg:x3; val_offset:240576*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240576*0 + 3*320*FLEN/8, x4, x1, x2)

inst_80193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804c000000000000; valaddr_reg:x3; val_offset:240579*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240579*0 + 3*321*FLEN/8, x4, x1, x2)

inst_80194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804e000000000000; valaddr_reg:x3; val_offset:240582*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240582*0 + 3*322*FLEN/8, x4, x1, x2)

inst_80195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804f000000000000; valaddr_reg:x3; val_offset:240585*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240585*0 + 3*323*FLEN/8, x4, x1, x2)

inst_80196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804f800000000000; valaddr_reg:x3; val_offset:240588*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240588*0 + 3*324*FLEN/8, x4, x1, x2)

inst_80197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fc00000000000; valaddr_reg:x3; val_offset:240591*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240591*0 + 3*325*FLEN/8, x4, x1, x2)

inst_80198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fe00000000000; valaddr_reg:x3; val_offset:240594*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240594*0 + 3*326*FLEN/8, x4, x1, x2)

inst_80199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ff00000000000; valaddr_reg:x3; val_offset:240597*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240597*0 + 3*327*FLEN/8, x4, x1, x2)

inst_80200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ff80000000000; valaddr_reg:x3; val_offset:240600*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240600*0 + 3*328*FLEN/8, x4, x1, x2)

inst_80201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffc0000000000; valaddr_reg:x3; val_offset:240603*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240603*0 + 3*329*FLEN/8, x4, x1, x2)

inst_80202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffe0000000000; valaddr_reg:x3; val_offset:240606*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240606*0 + 3*330*FLEN/8, x4, x1, x2)

inst_80203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fff0000000000; valaddr_reg:x3; val_offset:240609*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240609*0 + 3*331*FLEN/8, x4, x1, x2)

inst_80204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fff8000000000; valaddr_reg:x3; val_offset:240612*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240612*0 + 3*332*FLEN/8, x4, x1, x2)

inst_80205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffc000000000; valaddr_reg:x3; val_offset:240615*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240615*0 + 3*333*FLEN/8, x4, x1, x2)

inst_80206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffe000000000; valaddr_reg:x3; val_offset:240618*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240618*0 + 3*334*FLEN/8, x4, x1, x2)

inst_80207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffff000000000; valaddr_reg:x3; val_offset:240621*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240621*0 + 3*335*FLEN/8, x4, x1, x2)

inst_80208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffff800000000; valaddr_reg:x3; val_offset:240624*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240624*0 + 3*336*FLEN/8, x4, x1, x2)

inst_80209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffc00000000; valaddr_reg:x3; val_offset:240627*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240627*0 + 3*337*FLEN/8, x4, x1, x2)

inst_80210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffe00000000; valaddr_reg:x3; val_offset:240630*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240630*0 + 3*338*FLEN/8, x4, x1, x2)

inst_80211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffff00000000; valaddr_reg:x3; val_offset:240633*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240633*0 + 3*339*FLEN/8, x4, x1, x2)

inst_80212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffff80000000; valaddr_reg:x3; val_offset:240636*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240636*0 + 3*340*FLEN/8, x4, x1, x2)

inst_80213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffc0000000; valaddr_reg:x3; val_offset:240639*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240639*0 + 3*341*FLEN/8, x4, x1, x2)

inst_80214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffe0000000; valaddr_reg:x3; val_offset:240642*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240642*0 + 3*342*FLEN/8, x4, x1, x2)

inst_80215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffff0000000; valaddr_reg:x3; val_offset:240645*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240645*0 + 3*343*FLEN/8, x4, x1, x2)

inst_80216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffff8000000; valaddr_reg:x3; val_offset:240648*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240648*0 + 3*344*FLEN/8, x4, x1, x2)

inst_80217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffc000000; valaddr_reg:x3; val_offset:240651*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240651*0 + 3*345*FLEN/8, x4, x1, x2)

inst_80218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffe000000; valaddr_reg:x3; val_offset:240654*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240654*0 + 3*346*FLEN/8, x4, x1, x2)

inst_80219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffff000000; valaddr_reg:x3; val_offset:240657*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240657*0 + 3*347*FLEN/8, x4, x1, x2)

inst_80220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffff800000; valaddr_reg:x3; val_offset:240660*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240660*0 + 3*348*FLEN/8, x4, x1, x2)

inst_80221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffc00000; valaddr_reg:x3; val_offset:240663*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240663*0 + 3*349*FLEN/8, x4, x1, x2)

inst_80222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffe00000; valaddr_reg:x3; val_offset:240666*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240666*0 + 3*350*FLEN/8, x4, x1, x2)

inst_80223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffff00000; valaddr_reg:x3; val_offset:240669*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240669*0 + 3*351*FLEN/8, x4, x1, x2)

inst_80224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffff80000; valaddr_reg:x3; val_offset:240672*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240672*0 + 3*352*FLEN/8, x4, x1, x2)

inst_80225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffffc0000; valaddr_reg:x3; val_offset:240675*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240675*0 + 3*353*FLEN/8, x4, x1, x2)

inst_80226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffffe0000; valaddr_reg:x3; val_offset:240678*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240678*0 + 3*354*FLEN/8, x4, x1, x2)

inst_80227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffff0000; valaddr_reg:x3; val_offset:240681*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240681*0 + 3*355*FLEN/8, x4, x1, x2)

inst_80228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffff8000; valaddr_reg:x3; val_offset:240684*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240684*0 + 3*356*FLEN/8, x4, x1, x2)

inst_80229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffffc000; valaddr_reg:x3; val_offset:240687*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240687*0 + 3*357*FLEN/8, x4, x1, x2)

inst_80230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffffe000; valaddr_reg:x3; val_offset:240690*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240690*0 + 3*358*FLEN/8, x4, x1, x2)

inst_80231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffffff000; valaddr_reg:x3; val_offset:240693*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240693*0 + 3*359*FLEN/8, x4, x1, x2)

inst_80232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffffff800; valaddr_reg:x3; val_offset:240696*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240696*0 + 3*360*FLEN/8, x4, x1, x2)

inst_80233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffffffc00; valaddr_reg:x3; val_offset:240699*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240699*0 + 3*361*FLEN/8, x4, x1, x2)

inst_80234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffffffe00; valaddr_reg:x3; val_offset:240702*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240702*0 + 3*362*FLEN/8, x4, x1, x2)

inst_80235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffffff00; valaddr_reg:x3; val_offset:240705*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240705*0 + 3*363*FLEN/8, x4, x1, x2)

inst_80236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffffff80; valaddr_reg:x3; val_offset:240708*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240708*0 + 3*364*FLEN/8, x4, x1, x2)

inst_80237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffffffc0; valaddr_reg:x3; val_offset:240711*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240711*0 + 3*365*FLEN/8, x4, x1, x2)

inst_80238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffffffe0; valaddr_reg:x3; val_offset:240714*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240714*0 + 3*366*FLEN/8, x4, x1, x2)

inst_80239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffffffff0; valaddr_reg:x3; val_offset:240717*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240717*0 + 3*367*FLEN/8, x4, x1, x2)

inst_80240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffffffff8; valaddr_reg:x3; val_offset:240720*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240720*0 + 3*368*FLEN/8, x4, x1, x2)

inst_80241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffffffffc; valaddr_reg:x3; val_offset:240723*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240723*0 + 3*369*FLEN/8, x4, x1, x2)

inst_80242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804ffffffffffffe; valaddr_reg:x3; val_offset:240726*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240726*0 + 3*370*FLEN/8, x4, x1, x2)

inst_80243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95a004d0cc955 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95a004d0cc955; op2val:0x8000;
op3val:0x804fffffffffffff; valaddr_reg:x3; val_offset:240729*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240729*0 + 3*371*FLEN/8, x4, x1, x2)

inst_80244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:240732*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240732*0 + 3*372*FLEN/8, x4, x1, x2)

inst_80245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:240735*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240735*0 + 3*373*FLEN/8, x4, x1, x2)

inst_80246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:240738*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240738*0 + 3*374*FLEN/8, x4, x1, x2)

inst_80247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:240741*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240741*0 + 3*375*FLEN/8, x4, x1, x2)

inst_80248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:240744*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240744*0 + 3*376*FLEN/8, x4, x1, x2)

inst_80249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:240747*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240747*0 + 3*377*FLEN/8, x4, x1, x2)

inst_80250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:240750*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240750*0 + 3*378*FLEN/8, x4, x1, x2)

inst_80251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:240753*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240753*0 + 3*379*FLEN/8, x4, x1, x2)

inst_80252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:240756*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240756*0 + 3*380*FLEN/8, x4, x1, x2)

inst_80253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:240759*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240759*0 + 3*381*FLEN/8, x4, x1, x2)

inst_80254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:240762*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240762*0 + 3*382*FLEN/8, x4, x1, x2)

inst_80255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:240765*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240765*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_80256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:240768*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240768*0 + 3*384*FLEN/8, x4, x1, x2)

inst_80257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:240771*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240771*0 + 3*385*FLEN/8, x4, x1, x2)

inst_80258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:240774*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240774*0 + 3*386*FLEN/8, x4, x1, x2)

inst_80259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:240777*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240777*0 + 3*387*FLEN/8, x4, x1, x2)

inst_80260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:240780*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240780*0 + 3*388*FLEN/8, x4, x1, x2)

inst_80261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:240783*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240783*0 + 3*389*FLEN/8, x4, x1, x2)

inst_80262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:240786*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240786*0 + 3*390*FLEN/8, x4, x1, x2)

inst_80263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:240789*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240789*0 + 3*391*FLEN/8, x4, x1, x2)

inst_80264:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:240792*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240792*0 + 3*392*FLEN/8, x4, x1, x2)

inst_80265:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:240795*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240795*0 + 3*393*FLEN/8, x4, x1, x2)

inst_80266:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000000000000; valaddr_reg:x3; val_offset:240798*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240798*0 + 3*394*FLEN/8, x4, x1, x2)

inst_80267:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000000000001; valaddr_reg:x3; val_offset:240801*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240801*0 + 3*395*FLEN/8, x4, x1, x2)

inst_80268:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000000000003; valaddr_reg:x3; val_offset:240804*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240804*0 + 3*396*FLEN/8, x4, x1, x2)

inst_80269:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000000000007; valaddr_reg:x3; val_offset:240807*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240807*0 + 3*397*FLEN/8, x4, x1, x2)

inst_80270:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000000000000f; valaddr_reg:x3; val_offset:240810*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240810*0 + 3*398*FLEN/8, x4, x1, x2)

inst_80271:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000000000001f; valaddr_reg:x3; val_offset:240813*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240813*0 + 3*399*FLEN/8, x4, x1, x2)

inst_80272:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000000000003f; valaddr_reg:x3; val_offset:240816*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240816*0 + 3*400*FLEN/8, x4, x1, x2)

inst_80273:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000000000007f; valaddr_reg:x3; val_offset:240819*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240819*0 + 3*401*FLEN/8, x4, x1, x2)

inst_80274:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00000000000ff; valaddr_reg:x3; val_offset:240822*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240822*0 + 3*402*FLEN/8, x4, x1, x2)

inst_80275:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00000000001ff; valaddr_reg:x3; val_offset:240825*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240825*0 + 3*403*FLEN/8, x4, x1, x2)

inst_80276:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00000000003ff; valaddr_reg:x3; val_offset:240828*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240828*0 + 3*404*FLEN/8, x4, x1, x2)

inst_80277:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00000000007ff; valaddr_reg:x3; val_offset:240831*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240831*0 + 3*405*FLEN/8, x4, x1, x2)

inst_80278:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000000000fff; valaddr_reg:x3; val_offset:240834*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240834*0 + 3*406*FLEN/8, x4, x1, x2)

inst_80279:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000000001fff; valaddr_reg:x3; val_offset:240837*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240837*0 + 3*407*FLEN/8, x4, x1, x2)

inst_80280:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000000003fff; valaddr_reg:x3; val_offset:240840*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240840*0 + 3*408*FLEN/8, x4, x1, x2)

inst_80281:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000000007fff; valaddr_reg:x3; val_offset:240843*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240843*0 + 3*409*FLEN/8, x4, x1, x2)

inst_80282:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000000000ffff; valaddr_reg:x3; val_offset:240846*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240846*0 + 3*410*FLEN/8, x4, x1, x2)

inst_80283:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000000001ffff; valaddr_reg:x3; val_offset:240849*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240849*0 + 3*411*FLEN/8, x4, x1, x2)

inst_80284:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000000003ffff; valaddr_reg:x3; val_offset:240852*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240852*0 + 3*412*FLEN/8, x4, x1, x2)

inst_80285:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000000007ffff; valaddr_reg:x3; val_offset:240855*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240855*0 + 3*413*FLEN/8, x4, x1, x2)

inst_80286:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00000000fffff; valaddr_reg:x3; val_offset:240858*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240858*0 + 3*414*FLEN/8, x4, x1, x2)

inst_80287:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00000001fffff; valaddr_reg:x3; val_offset:240861*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240861*0 + 3*415*FLEN/8, x4, x1, x2)

inst_80288:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00000003fffff; valaddr_reg:x3; val_offset:240864*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240864*0 + 3*416*FLEN/8, x4, x1, x2)

inst_80289:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00000007fffff; valaddr_reg:x3; val_offset:240867*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240867*0 + 3*417*FLEN/8, x4, x1, x2)

inst_80290:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000000ffffff; valaddr_reg:x3; val_offset:240870*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240870*0 + 3*418*FLEN/8, x4, x1, x2)

inst_80291:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000001ffffff; valaddr_reg:x3; val_offset:240873*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240873*0 + 3*419*FLEN/8, x4, x1, x2)

inst_80292:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000003ffffff; valaddr_reg:x3; val_offset:240876*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240876*0 + 3*420*FLEN/8, x4, x1, x2)

inst_80293:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000007ffffff; valaddr_reg:x3; val_offset:240879*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240879*0 + 3*421*FLEN/8, x4, x1, x2)

inst_80294:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000000fffffff; valaddr_reg:x3; val_offset:240882*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240882*0 + 3*422*FLEN/8, x4, x1, x2)

inst_80295:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000001fffffff; valaddr_reg:x3; val_offset:240885*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240885*0 + 3*423*FLEN/8, x4, x1, x2)

inst_80296:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000003fffffff; valaddr_reg:x3; val_offset:240888*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240888*0 + 3*424*FLEN/8, x4, x1, x2)

inst_80297:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000007fffffff; valaddr_reg:x3; val_offset:240891*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240891*0 + 3*425*FLEN/8, x4, x1, x2)

inst_80298:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00000ffffffff; valaddr_reg:x3; val_offset:240894*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240894*0 + 3*426*FLEN/8, x4, x1, x2)

inst_80299:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00001ffffffff; valaddr_reg:x3; val_offset:240897*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240897*0 + 3*427*FLEN/8, x4, x1, x2)

inst_80300:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00003ffffffff; valaddr_reg:x3; val_offset:240900*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240900*0 + 3*428*FLEN/8, x4, x1, x2)

inst_80301:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00007ffffffff; valaddr_reg:x3; val_offset:240903*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240903*0 + 3*429*FLEN/8, x4, x1, x2)

inst_80302:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0000fffffffff; valaddr_reg:x3; val_offset:240906*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240906*0 + 3*430*FLEN/8, x4, x1, x2)

inst_80303:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0001fffffffff; valaddr_reg:x3; val_offset:240909*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240909*0 + 3*431*FLEN/8, x4, x1, x2)

inst_80304:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0003fffffffff; valaddr_reg:x3; val_offset:240912*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240912*0 + 3*432*FLEN/8, x4, x1, x2)

inst_80305:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0007fffffffff; valaddr_reg:x3; val_offset:240915*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240915*0 + 3*433*FLEN/8, x4, x1, x2)

inst_80306:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a000ffffffffff; valaddr_reg:x3; val_offset:240918*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240918*0 + 3*434*FLEN/8, x4, x1, x2)

inst_80307:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a001ffffffffff; valaddr_reg:x3; val_offset:240921*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240921*0 + 3*435*FLEN/8, x4, x1, x2)

inst_80308:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a003ffffffffff; valaddr_reg:x3; val_offset:240924*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240924*0 + 3*436*FLEN/8, x4, x1, x2)

inst_80309:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a007ffffffffff; valaddr_reg:x3; val_offset:240927*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240927*0 + 3*437*FLEN/8, x4, x1, x2)

inst_80310:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a00fffffffffff; valaddr_reg:x3; val_offset:240930*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240930*0 + 3*438*FLEN/8, x4, x1, x2)

inst_80311:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a01fffffffffff; valaddr_reg:x3; val_offset:240933*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240933*0 + 3*439*FLEN/8, x4, x1, x2)

inst_80312:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a03fffffffffff; valaddr_reg:x3; val_offset:240936*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240936*0 + 3*440*FLEN/8, x4, x1, x2)

inst_80313:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a07fffffffffff; valaddr_reg:x3; val_offset:240939*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240939*0 + 3*441*FLEN/8, x4, x1, x2)

inst_80314:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a0ffffffffffff; valaddr_reg:x3; val_offset:240942*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240942*0 + 3*442*FLEN/8, x4, x1, x2)

inst_80315:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a1ffffffffffff; valaddr_reg:x3; val_offset:240945*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240945*0 + 3*443*FLEN/8, x4, x1, x2)

inst_80316:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a3ffffffffffff; valaddr_reg:x3; val_offset:240948*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240948*0 + 3*444*FLEN/8, x4, x1, x2)

inst_80317:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a7ffffffffffff; valaddr_reg:x3; val_offset:240951*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240951*0 + 3*445*FLEN/8, x4, x1, x2)

inst_80318:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81a8000000000000; valaddr_reg:x3; val_offset:240954*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240954*0 + 3*446*FLEN/8, x4, x1, x2)

inst_80319:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81ac000000000000; valaddr_reg:x3; val_offset:240957*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240957*0 + 3*447*FLEN/8, x4, x1, x2)

inst_80320:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81ae000000000000; valaddr_reg:x3; val_offset:240960*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240960*0 + 3*448*FLEN/8, x4, x1, x2)

inst_80321:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81af000000000000; valaddr_reg:x3; val_offset:240963*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240963*0 + 3*449*FLEN/8, x4, x1, x2)

inst_80322:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81af800000000000; valaddr_reg:x3; val_offset:240966*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240966*0 + 3*450*FLEN/8, x4, x1, x2)

inst_80323:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afc00000000000; valaddr_reg:x3; val_offset:240969*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240969*0 + 3*451*FLEN/8, x4, x1, x2)

inst_80324:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afe00000000000; valaddr_reg:x3; val_offset:240972*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240972*0 + 3*452*FLEN/8, x4, x1, x2)

inst_80325:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81aff00000000000; valaddr_reg:x3; val_offset:240975*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240975*0 + 3*453*FLEN/8, x4, x1, x2)

inst_80326:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81aff80000000000; valaddr_reg:x3; val_offset:240978*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240978*0 + 3*454*FLEN/8, x4, x1, x2)

inst_80327:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affc0000000000; valaddr_reg:x3; val_offset:240981*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240981*0 + 3*455*FLEN/8, x4, x1, x2)

inst_80328:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affe0000000000; valaddr_reg:x3; val_offset:240984*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240984*0 + 3*456*FLEN/8, x4, x1, x2)

inst_80329:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afff0000000000; valaddr_reg:x3; val_offset:240987*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240987*0 + 3*457*FLEN/8, x4, x1, x2)

inst_80330:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afff8000000000; valaddr_reg:x3; val_offset:240990*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240990*0 + 3*458*FLEN/8, x4, x1, x2)

inst_80331:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffc000000000; valaddr_reg:x3; val_offset:240993*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240993*0 + 3*459*FLEN/8, x4, x1, x2)

inst_80332:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffe000000000; valaddr_reg:x3; val_offset:240996*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240996*0 + 3*460*FLEN/8, x4, x1, x2)

inst_80333:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affff000000000; valaddr_reg:x3; val_offset:240999*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240999*0 + 3*461*FLEN/8, x4, x1, x2)

inst_80334:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affff800000000; valaddr_reg:x3; val_offset:241002*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241002*0 + 3*462*FLEN/8, x4, x1, x2)

inst_80335:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffc00000000; valaddr_reg:x3; val_offset:241005*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241005*0 + 3*463*FLEN/8, x4, x1, x2)

inst_80336:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffe00000000; valaddr_reg:x3; val_offset:241008*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241008*0 + 3*464*FLEN/8, x4, x1, x2)

inst_80337:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffff00000000; valaddr_reg:x3; val_offset:241011*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241011*0 + 3*465*FLEN/8, x4, x1, x2)

inst_80338:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffff80000000; valaddr_reg:x3; val_offset:241014*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241014*0 + 3*466*FLEN/8, x4, x1, x2)

inst_80339:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffc0000000; valaddr_reg:x3; val_offset:241017*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241017*0 + 3*467*FLEN/8, x4, x1, x2)

inst_80340:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffe0000000; valaddr_reg:x3; val_offset:241020*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241020*0 + 3*468*FLEN/8, x4, x1, x2)

inst_80341:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffff0000000; valaddr_reg:x3; val_offset:241023*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241023*0 + 3*469*FLEN/8, x4, x1, x2)

inst_80342:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffff8000000; valaddr_reg:x3; val_offset:241026*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241026*0 + 3*470*FLEN/8, x4, x1, x2)

inst_80343:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffc000000; valaddr_reg:x3; val_offset:241029*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241029*0 + 3*471*FLEN/8, x4, x1, x2)

inst_80344:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffe000000; valaddr_reg:x3; val_offset:241032*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241032*0 + 3*472*FLEN/8, x4, x1, x2)

inst_80345:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffff000000; valaddr_reg:x3; val_offset:241035*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241035*0 + 3*473*FLEN/8, x4, x1, x2)

inst_80346:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffff800000; valaddr_reg:x3; val_offset:241038*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241038*0 + 3*474*FLEN/8, x4, x1, x2)

inst_80347:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffc00000; valaddr_reg:x3; val_offset:241041*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241041*0 + 3*475*FLEN/8, x4, x1, x2)

inst_80348:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffe00000; valaddr_reg:x3; val_offset:241044*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241044*0 + 3*476*FLEN/8, x4, x1, x2)

inst_80349:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffff00000; valaddr_reg:x3; val_offset:241047*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241047*0 + 3*477*FLEN/8, x4, x1, x2)

inst_80350:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffff80000; valaddr_reg:x3; val_offset:241050*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241050*0 + 3*478*FLEN/8, x4, x1, x2)

inst_80351:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffffc0000; valaddr_reg:x3; val_offset:241053*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241053*0 + 3*479*FLEN/8, x4, x1, x2)

inst_80352:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffffe0000; valaddr_reg:x3; val_offset:241056*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241056*0 + 3*480*FLEN/8, x4, x1, x2)

inst_80353:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffff0000; valaddr_reg:x3; val_offset:241059*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241059*0 + 3*481*FLEN/8, x4, x1, x2)

inst_80354:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffff8000; valaddr_reg:x3; val_offset:241062*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241062*0 + 3*482*FLEN/8, x4, x1, x2)

inst_80355:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffffc000; valaddr_reg:x3; val_offset:241065*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241065*0 + 3*483*FLEN/8, x4, x1, x2)

inst_80356:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffffe000; valaddr_reg:x3; val_offset:241068*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241068*0 + 3*484*FLEN/8, x4, x1, x2)

inst_80357:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffffff000; valaddr_reg:x3; val_offset:241071*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241071*0 + 3*485*FLEN/8, x4, x1, x2)

inst_80358:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffffff800; valaddr_reg:x3; val_offset:241074*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241074*0 + 3*486*FLEN/8, x4, x1, x2)

inst_80359:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffffffc00; valaddr_reg:x3; val_offset:241077*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241077*0 + 3*487*FLEN/8, x4, x1, x2)

inst_80360:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffffffe00; valaddr_reg:x3; val_offset:241080*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241080*0 + 3*488*FLEN/8, x4, x1, x2)

inst_80361:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffffff00; valaddr_reg:x3; val_offset:241083*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241083*0 + 3*489*FLEN/8, x4, x1, x2)

inst_80362:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffffff80; valaddr_reg:x3; val_offset:241086*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241086*0 + 3*490*FLEN/8, x4, x1, x2)

inst_80363:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffffffc0; valaddr_reg:x3; val_offset:241089*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241089*0 + 3*491*FLEN/8, x4, x1, x2)

inst_80364:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffffffe0; valaddr_reg:x3; val_offset:241092*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241092*0 + 3*492*FLEN/8, x4, x1, x2)

inst_80365:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffffffff0; valaddr_reg:x3; val_offset:241095*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241095*0 + 3*493*FLEN/8, x4, x1, x2)

inst_80366:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffffffff8; valaddr_reg:x3; val_offset:241098*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241098*0 + 3*494*FLEN/8, x4, x1, x2)

inst_80367:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffffffffc; valaddr_reg:x3; val_offset:241101*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241101*0 + 3*495*FLEN/8, x4, x1, x2)

inst_80368:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81affffffffffffe; valaddr_reg:x3; val_offset:241104*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241104*0 + 3*496*FLEN/8, x4, x1, x2)

inst_80369:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x8000;
op3val:0x81afffffffffffff; valaddr_reg:x3; val_offset:241107*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241107*0 + 3*497*FLEN/8, x4, x1, x2)

inst_80370:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:241110*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241110*0 + 3*498*FLEN/8, x4, x1, x2)

inst_80371:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:241113*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241113*0 + 3*499*FLEN/8, x4, x1, x2)

inst_80372:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:241116*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241116*0 + 3*500*FLEN/8, x4, x1, x2)

inst_80373:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:241119*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241119*0 + 3*501*FLEN/8, x4, x1, x2)

inst_80374:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:241122*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241122*0 + 3*502*FLEN/8, x4, x1, x2)

inst_80375:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:241125*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241125*0 + 3*503*FLEN/8, x4, x1, x2)

inst_80376:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:241128*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241128*0 + 3*504*FLEN/8, x4, x1, x2)

inst_80377:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:241131*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241131*0 + 3*505*FLEN/8, x4, x1, x2)

inst_80378:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:241134*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241134*0 + 3*506*FLEN/8, x4, x1, x2)

inst_80379:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:241137*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241137*0 + 3*507*FLEN/8, x4, x1, x2)

inst_80380:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:241140*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241140*0 + 3*508*FLEN/8, x4, x1, x2)

inst_80381:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:241143*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241143*0 + 3*509*FLEN/8, x4, x1, x2)

inst_80382:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:241146*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241146*0 + 3*510*FLEN/8, x4, x1, x2)

inst_80383:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:241149*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241149*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_80384:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:241152*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241152*0 + 3*512*FLEN/8, x4, x1, x2)

inst_80385:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:241155*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241155*0 + 3*513*FLEN/8, x4, x1, x2)

inst_80386:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:241158*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241158*0 + 3*514*FLEN/8, x4, x1, x2)

inst_80387:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:241161*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241161*0 + 3*515*FLEN/8, x4, x1, x2)

inst_80388:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:241164*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241164*0 + 3*516*FLEN/8, x4, x1, x2)

inst_80389:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:241167*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241167*0 + 3*517*FLEN/8, x4, x1, x2)

inst_80390:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:241170*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241170*0 + 3*518*FLEN/8, x4, x1, x2)

inst_80391:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:241173*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241173*0 + 3*519*FLEN/8, x4, x1, x2)

inst_80392:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000000000000; valaddr_reg:x3; val_offset:241176*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241176*0 + 3*520*FLEN/8, x4, x1, x2)

inst_80393:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000000000001; valaddr_reg:x3; val_offset:241179*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241179*0 + 3*521*FLEN/8, x4, x1, x2)

inst_80394:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000000000003; valaddr_reg:x3; val_offset:241182*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241182*0 + 3*522*FLEN/8, x4, x1, x2)

inst_80395:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000000000007; valaddr_reg:x3; val_offset:241185*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241185*0 + 3*523*FLEN/8, x4, x1, x2)

inst_80396:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000000000000f; valaddr_reg:x3; val_offset:241188*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241188*0 + 3*524*FLEN/8, x4, x1, x2)

inst_80397:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000000000001f; valaddr_reg:x3; val_offset:241191*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241191*0 + 3*525*FLEN/8, x4, x1, x2)

inst_80398:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000000000003f; valaddr_reg:x3; val_offset:241194*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241194*0 + 3*526*FLEN/8, x4, x1, x2)

inst_80399:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000000000007f; valaddr_reg:x3; val_offset:241197*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241197*0 + 3*527*FLEN/8, x4, x1, x2)

inst_80400:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400000000000ff; valaddr_reg:x3; val_offset:241200*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241200*0 + 3*528*FLEN/8, x4, x1, x2)

inst_80401:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400000000001ff; valaddr_reg:x3; val_offset:241203*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241203*0 + 3*529*FLEN/8, x4, x1, x2)

inst_80402:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400000000003ff; valaddr_reg:x3; val_offset:241206*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241206*0 + 3*530*FLEN/8, x4, x1, x2)

inst_80403:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400000000007ff; valaddr_reg:x3; val_offset:241209*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241209*0 + 3*531*FLEN/8, x4, x1, x2)

inst_80404:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000000000fff; valaddr_reg:x3; val_offset:241212*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241212*0 + 3*532*FLEN/8, x4, x1, x2)

inst_80405:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000000001fff; valaddr_reg:x3; val_offset:241215*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241215*0 + 3*533*FLEN/8, x4, x1, x2)

inst_80406:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000000003fff; valaddr_reg:x3; val_offset:241218*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241218*0 + 3*534*FLEN/8, x4, x1, x2)

inst_80407:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000000007fff; valaddr_reg:x3; val_offset:241221*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241221*0 + 3*535*FLEN/8, x4, x1, x2)

inst_80408:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000000000ffff; valaddr_reg:x3; val_offset:241224*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241224*0 + 3*536*FLEN/8, x4, x1, x2)

inst_80409:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000000001ffff; valaddr_reg:x3; val_offset:241227*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241227*0 + 3*537*FLEN/8, x4, x1, x2)

inst_80410:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000000003ffff; valaddr_reg:x3; val_offset:241230*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241230*0 + 3*538*FLEN/8, x4, x1, x2)

inst_80411:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000000007ffff; valaddr_reg:x3; val_offset:241233*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241233*0 + 3*539*FLEN/8, x4, x1, x2)

inst_80412:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400000000fffff; valaddr_reg:x3; val_offset:241236*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241236*0 + 3*540*FLEN/8, x4, x1, x2)

inst_80413:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400000001fffff; valaddr_reg:x3; val_offset:241239*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241239*0 + 3*541*FLEN/8, x4, x1, x2)

inst_80414:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400000003fffff; valaddr_reg:x3; val_offset:241242*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241242*0 + 3*542*FLEN/8, x4, x1, x2)

inst_80415:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400000007fffff; valaddr_reg:x3; val_offset:241245*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241245*0 + 3*543*FLEN/8, x4, x1, x2)

inst_80416:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000000ffffff; valaddr_reg:x3; val_offset:241248*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241248*0 + 3*544*FLEN/8, x4, x1, x2)

inst_80417:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000001ffffff; valaddr_reg:x3; val_offset:241251*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241251*0 + 3*545*FLEN/8, x4, x1, x2)

inst_80418:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000003ffffff; valaddr_reg:x3; val_offset:241254*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241254*0 + 3*546*FLEN/8, x4, x1, x2)

inst_80419:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000007ffffff; valaddr_reg:x3; val_offset:241257*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241257*0 + 3*547*FLEN/8, x4, x1, x2)

inst_80420:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000000fffffff; valaddr_reg:x3; val_offset:241260*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241260*0 + 3*548*FLEN/8, x4, x1, x2)

inst_80421:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000001fffffff; valaddr_reg:x3; val_offset:241263*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241263*0 + 3*549*FLEN/8, x4, x1, x2)

inst_80422:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000003fffffff; valaddr_reg:x3; val_offset:241266*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241266*0 + 3*550*FLEN/8, x4, x1, x2)

inst_80423:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000007fffffff; valaddr_reg:x3; val_offset:241269*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241269*0 + 3*551*FLEN/8, x4, x1, x2)

inst_80424:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400000ffffffff; valaddr_reg:x3; val_offset:241272*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241272*0 + 3*552*FLEN/8, x4, x1, x2)

inst_80425:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400001ffffffff; valaddr_reg:x3; val_offset:241275*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241275*0 + 3*553*FLEN/8, x4, x1, x2)

inst_80426:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400003ffffffff; valaddr_reg:x3; val_offset:241278*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241278*0 + 3*554*FLEN/8, x4, x1, x2)

inst_80427:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400007ffffffff; valaddr_reg:x3; val_offset:241281*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241281*0 + 3*555*FLEN/8, x4, x1, x2)

inst_80428:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240000fffffffff; valaddr_reg:x3; val_offset:241284*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241284*0 + 3*556*FLEN/8, x4, x1, x2)

inst_80429:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240001fffffffff; valaddr_reg:x3; val_offset:241287*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241287*0 + 3*557*FLEN/8, x4, x1, x2)

inst_80430:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240003fffffffff; valaddr_reg:x3; val_offset:241290*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241290*0 + 3*558*FLEN/8, x4, x1, x2)

inst_80431:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240007fffffffff; valaddr_reg:x3; val_offset:241293*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241293*0 + 3*559*FLEN/8, x4, x1, x2)

inst_80432:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824000ffffffffff; valaddr_reg:x3; val_offset:241296*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241296*0 + 3*560*FLEN/8, x4, x1, x2)

inst_80433:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824001ffffffffff; valaddr_reg:x3; val_offset:241299*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241299*0 + 3*561*FLEN/8, x4, x1, x2)

inst_80434:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824003ffffffffff; valaddr_reg:x3; val_offset:241302*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241302*0 + 3*562*FLEN/8, x4, x1, x2)

inst_80435:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824007ffffffffff; valaddr_reg:x3; val_offset:241305*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241305*0 + 3*563*FLEN/8, x4, x1, x2)

inst_80436:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82400fffffffffff; valaddr_reg:x3; val_offset:241308*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241308*0 + 3*564*FLEN/8, x4, x1, x2)

inst_80437:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82401fffffffffff; valaddr_reg:x3; val_offset:241311*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241311*0 + 3*565*FLEN/8, x4, x1, x2)

inst_80438:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82403fffffffffff; valaddr_reg:x3; val_offset:241314*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241314*0 + 3*566*FLEN/8, x4, x1, x2)

inst_80439:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x82407fffffffffff; valaddr_reg:x3; val_offset:241317*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241317*0 + 3*567*FLEN/8, x4, x1, x2)

inst_80440:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8240ffffffffffff; valaddr_reg:x3; val_offset:241320*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241320*0 + 3*568*FLEN/8, x4, x1, x2)

inst_80441:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8241ffffffffffff; valaddr_reg:x3; val_offset:241323*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241323*0 + 3*569*FLEN/8, x4, x1, x2)

inst_80442:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8243ffffffffffff; valaddr_reg:x3; val_offset:241326*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241326*0 + 3*570*FLEN/8, x4, x1, x2)

inst_80443:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8247ffffffffffff; valaddr_reg:x3; val_offset:241329*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241329*0 + 3*571*FLEN/8, x4, x1, x2)

inst_80444:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x8248000000000000; valaddr_reg:x3; val_offset:241332*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241332*0 + 3*572*FLEN/8, x4, x1, x2)

inst_80445:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824c000000000000; valaddr_reg:x3; val_offset:241335*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241335*0 + 3*573*FLEN/8, x4, x1, x2)

inst_80446:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824e000000000000; valaddr_reg:x3; val_offset:241338*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241338*0 + 3*574*FLEN/8, x4, x1, x2)

inst_80447:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824f000000000000; valaddr_reg:x3; val_offset:241341*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241341*0 + 3*575*FLEN/8, x4, x1, x2)

inst_80448:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824f800000000000; valaddr_reg:x3; val_offset:241344*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241344*0 + 3*576*FLEN/8, x4, x1, x2)

inst_80449:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fc00000000000; valaddr_reg:x3; val_offset:241347*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241347*0 + 3*577*FLEN/8, x4, x1, x2)

inst_80450:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fe00000000000; valaddr_reg:x3; val_offset:241350*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241350*0 + 3*578*FLEN/8, x4, x1, x2)

inst_80451:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ff00000000000; valaddr_reg:x3; val_offset:241353*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241353*0 + 3*579*FLEN/8, x4, x1, x2)

inst_80452:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ff80000000000; valaddr_reg:x3; val_offset:241356*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241356*0 + 3*580*FLEN/8, x4, x1, x2)

inst_80453:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffc0000000000; valaddr_reg:x3; val_offset:241359*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241359*0 + 3*581*FLEN/8, x4, x1, x2)

inst_80454:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffe0000000000; valaddr_reg:x3; val_offset:241362*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241362*0 + 3*582*FLEN/8, x4, x1, x2)

inst_80455:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fff0000000000; valaddr_reg:x3; val_offset:241365*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241365*0 + 3*583*FLEN/8, x4, x1, x2)

inst_80456:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fff8000000000; valaddr_reg:x3; val_offset:241368*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241368*0 + 3*584*FLEN/8, x4, x1, x2)

inst_80457:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffc000000000; valaddr_reg:x3; val_offset:241371*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241371*0 + 3*585*FLEN/8, x4, x1, x2)

inst_80458:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffe000000000; valaddr_reg:x3; val_offset:241374*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241374*0 + 3*586*FLEN/8, x4, x1, x2)

inst_80459:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffff000000000; valaddr_reg:x3; val_offset:241377*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241377*0 + 3*587*FLEN/8, x4, x1, x2)

inst_80460:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffff800000000; valaddr_reg:x3; val_offset:241380*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241380*0 + 3*588*FLEN/8, x4, x1, x2)

inst_80461:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffc00000000; valaddr_reg:x3; val_offset:241383*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241383*0 + 3*589*FLEN/8, x4, x1, x2)

inst_80462:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffe00000000; valaddr_reg:x3; val_offset:241386*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241386*0 + 3*590*FLEN/8, x4, x1, x2)

inst_80463:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffff00000000; valaddr_reg:x3; val_offset:241389*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241389*0 + 3*591*FLEN/8, x4, x1, x2)

inst_80464:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffff80000000; valaddr_reg:x3; val_offset:241392*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241392*0 + 3*592*FLEN/8, x4, x1, x2)

inst_80465:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffc0000000; valaddr_reg:x3; val_offset:241395*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241395*0 + 3*593*FLEN/8, x4, x1, x2)

inst_80466:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffe0000000; valaddr_reg:x3; val_offset:241398*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241398*0 + 3*594*FLEN/8, x4, x1, x2)

inst_80467:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffff0000000; valaddr_reg:x3; val_offset:241401*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241401*0 + 3*595*FLEN/8, x4, x1, x2)

inst_80468:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffff8000000; valaddr_reg:x3; val_offset:241404*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241404*0 + 3*596*FLEN/8, x4, x1, x2)

inst_80469:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffc000000; valaddr_reg:x3; val_offset:241407*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241407*0 + 3*597*FLEN/8, x4, x1, x2)

inst_80470:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffe000000; valaddr_reg:x3; val_offset:241410*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241410*0 + 3*598*FLEN/8, x4, x1, x2)

inst_80471:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffff000000; valaddr_reg:x3; val_offset:241413*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241413*0 + 3*599*FLEN/8, x4, x1, x2)

inst_80472:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffff800000; valaddr_reg:x3; val_offset:241416*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241416*0 + 3*600*FLEN/8, x4, x1, x2)

inst_80473:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffc00000; valaddr_reg:x3; val_offset:241419*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241419*0 + 3*601*FLEN/8, x4, x1, x2)

inst_80474:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffe00000; valaddr_reg:x3; val_offset:241422*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241422*0 + 3*602*FLEN/8, x4, x1, x2)

inst_80475:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffff00000; valaddr_reg:x3; val_offset:241425*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241425*0 + 3*603*FLEN/8, x4, x1, x2)

inst_80476:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffff80000; valaddr_reg:x3; val_offset:241428*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241428*0 + 3*604*FLEN/8, x4, x1, x2)

inst_80477:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffffc0000; valaddr_reg:x3; val_offset:241431*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241431*0 + 3*605*FLEN/8, x4, x1, x2)

inst_80478:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffffe0000; valaddr_reg:x3; val_offset:241434*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241434*0 + 3*606*FLEN/8, x4, x1, x2)

inst_80479:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffff0000; valaddr_reg:x3; val_offset:241437*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241437*0 + 3*607*FLEN/8, x4, x1, x2)

inst_80480:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffff8000; valaddr_reg:x3; val_offset:241440*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241440*0 + 3*608*FLEN/8, x4, x1, x2)

inst_80481:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffffc000; valaddr_reg:x3; val_offset:241443*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241443*0 + 3*609*FLEN/8, x4, x1, x2)

inst_80482:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffffe000; valaddr_reg:x3; val_offset:241446*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241446*0 + 3*610*FLEN/8, x4, x1, x2)

inst_80483:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffffff000; valaddr_reg:x3; val_offset:241449*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241449*0 + 3*611*FLEN/8, x4, x1, x2)

inst_80484:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffffff800; valaddr_reg:x3; val_offset:241452*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241452*0 + 3*612*FLEN/8, x4, x1, x2)

inst_80485:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffffffc00; valaddr_reg:x3; val_offset:241455*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241455*0 + 3*613*FLEN/8, x4, x1, x2)

inst_80486:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffffffe00; valaddr_reg:x3; val_offset:241458*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241458*0 + 3*614*FLEN/8, x4, x1, x2)

inst_80487:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffffff00; valaddr_reg:x3; val_offset:241461*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241461*0 + 3*615*FLEN/8, x4, x1, x2)

inst_80488:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffffff80; valaddr_reg:x3; val_offset:241464*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241464*0 + 3*616*FLEN/8, x4, x1, x2)

inst_80489:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffffffc0; valaddr_reg:x3; val_offset:241467*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241467*0 + 3*617*FLEN/8, x4, x1, x2)

inst_80490:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffffffe0; valaddr_reg:x3; val_offset:241470*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241470*0 + 3*618*FLEN/8, x4, x1, x2)

inst_80491:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffffffff0; valaddr_reg:x3; val_offset:241473*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241473*0 + 3*619*FLEN/8, x4, x1, x2)

inst_80492:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffffffff8; valaddr_reg:x3; val_offset:241476*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241476*0 + 3*620*FLEN/8, x4, x1, x2)

inst_80493:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffffffffc; valaddr_reg:x3; val_offset:241479*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241479*0 + 3*621*FLEN/8, x4, x1, x2)

inst_80494:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824ffffffffffffe; valaddr_reg:x3; val_offset:241482*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241482*0 + 3*622*FLEN/8, x4, x1, x2)

inst_80495:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x96d3944ae92c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x024 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa96d3944ae92c5; op2val:0x8000;
op3val:0x824fffffffffffff; valaddr_reg:x3; val_offset:241485*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241485*0 + 3*623*FLEN/8, x4, x1, x2)

inst_80496:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:241488*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241488*0 + 3*624*FLEN/8, x4, x1, x2)

inst_80497:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x10000000000003; valaddr_reg:x3; val_offset:241491*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241491*0 + 3*625*FLEN/8, x4, x1, x2)

inst_80498:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:241494*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241494*0 + 3*626*FLEN/8, x4, x1, x2)

inst_80499:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1000000000000f; valaddr_reg:x3; val_offset:241497*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241497*0 + 3*627*FLEN/8, x4, x1, x2)

inst_80500:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:241500*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241500*0 + 3*628*FLEN/8, x4, x1, x2)

inst_80501:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:241503*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241503*0 + 3*629*FLEN/8, x4, x1, x2)

inst_80502:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x13333333333333; valaddr_reg:x3; val_offset:241506*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241506*0 + 3*630*FLEN/8, x4, x1, x2)

inst_80503:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x14924924924924; valaddr_reg:x3; val_offset:241509*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241509*0 + 3*631*FLEN/8, x4, x1, x2)

inst_80504:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x16666666666666; valaddr_reg:x3; val_offset:241512*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241512*0 + 3*632*FLEN/8, x4, x1, x2)

inst_80505:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x16db6db6db6db6; valaddr_reg:x3; val_offset:241515*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241515*0 + 3*633*FLEN/8, x4, x1, x2)

inst_80506:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x17777777777777; valaddr_reg:x3; val_offset:241518*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241518*0 + 3*634*FLEN/8, x4, x1, x2)

inst_80507:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x18888888888888; valaddr_reg:x3; val_offset:241521*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241521*0 + 3*635*FLEN/8, x4, x1, x2)

inst_80508:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x19999999999999; valaddr_reg:x3; val_offset:241524*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241524*0 + 3*636*FLEN/8, x4, x1, x2)

inst_80509:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1b6db6db6db6db; valaddr_reg:x3; val_offset:241527*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241527*0 + 3*637*FLEN/8, x4, x1, x2)

inst_80510:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1ccccccccccccc; valaddr_reg:x3; val_offset:241530*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241530*0 + 3*638*FLEN/8, x4, x1, x2)

inst_80511:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1db6db6db6db6d; valaddr_reg:x3; val_offset:241533*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241533*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_80512:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1fffffffffffc0; valaddr_reg:x3; val_offset:241536*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241536*0 + 3*640*FLEN/8, x4, x1, x2)

inst_80513:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1fffffffffffe0; valaddr_reg:x3; val_offset:241539*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241539*0 + 3*641*FLEN/8, x4, x1, x2)

inst_80514:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1ffffffffffff0; valaddr_reg:x3; val_offset:241542*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241542*0 + 3*642*FLEN/8, x4, x1, x2)

inst_80515:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1ffffffffffff8; valaddr_reg:x3; val_offset:241545*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241545*0 + 3*643*FLEN/8, x4, x1, x2)

inst_80516:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1ffffffffffffc; valaddr_reg:x3; val_offset:241548*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241548*0 + 3*644*FLEN/8, x4, x1, x2)

inst_80517:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0x1ffffffffffffe; valaddr_reg:x3; val_offset:241551*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241551*0 + 3*645*FLEN/8, x4, x1, x2)

inst_80518:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000000000000; valaddr_reg:x3; val_offset:241554*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241554*0 + 3*646*FLEN/8, x4, x1, x2)

inst_80519:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000000000001; valaddr_reg:x3; val_offset:241557*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241557*0 + 3*647*FLEN/8, x4, x1, x2)

inst_80520:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000000000003; valaddr_reg:x3; val_offset:241560*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241560*0 + 3*648*FLEN/8, x4, x1, x2)

inst_80521:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000000000007; valaddr_reg:x3; val_offset:241563*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241563*0 + 3*649*FLEN/8, x4, x1, x2)

inst_80522:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000000000000f; valaddr_reg:x3; val_offset:241566*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241566*0 + 3*650*FLEN/8, x4, x1, x2)

inst_80523:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000000000001f; valaddr_reg:x3; val_offset:241569*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241569*0 + 3*651*FLEN/8, x4, x1, x2)

inst_80524:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000000000003f; valaddr_reg:x3; val_offset:241572*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241572*0 + 3*652*FLEN/8, x4, x1, x2)

inst_80525:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000000000007f; valaddr_reg:x3; val_offset:241575*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241575*0 + 3*653*FLEN/8, x4, x1, x2)

inst_80526:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00000000000ff; valaddr_reg:x3; val_offset:241578*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241578*0 + 3*654*FLEN/8, x4, x1, x2)

inst_80527:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00000000001ff; valaddr_reg:x3; val_offset:241581*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241581*0 + 3*655*FLEN/8, x4, x1, x2)

inst_80528:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00000000003ff; valaddr_reg:x3; val_offset:241584*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241584*0 + 3*656*FLEN/8, x4, x1, x2)

inst_80529:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00000000007ff; valaddr_reg:x3; val_offset:241587*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241587*0 + 3*657*FLEN/8, x4, x1, x2)

inst_80530:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000000000fff; valaddr_reg:x3; val_offset:241590*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241590*0 + 3*658*FLEN/8, x4, x1, x2)

inst_80531:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000000001fff; valaddr_reg:x3; val_offset:241593*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241593*0 + 3*659*FLEN/8, x4, x1, x2)

inst_80532:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000000003fff; valaddr_reg:x3; val_offset:241596*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241596*0 + 3*660*FLEN/8, x4, x1, x2)

inst_80533:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000000007fff; valaddr_reg:x3; val_offset:241599*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241599*0 + 3*661*FLEN/8, x4, x1, x2)

inst_80534:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000000000ffff; valaddr_reg:x3; val_offset:241602*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241602*0 + 3*662*FLEN/8, x4, x1, x2)

inst_80535:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000000001ffff; valaddr_reg:x3; val_offset:241605*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241605*0 + 3*663*FLEN/8, x4, x1, x2)

inst_80536:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000000003ffff; valaddr_reg:x3; val_offset:241608*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241608*0 + 3*664*FLEN/8, x4, x1, x2)

inst_80537:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000000007ffff; valaddr_reg:x3; val_offset:241611*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241611*0 + 3*665*FLEN/8, x4, x1, x2)

inst_80538:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00000000fffff; valaddr_reg:x3; val_offset:241614*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241614*0 + 3*666*FLEN/8, x4, x1, x2)

inst_80539:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00000001fffff; valaddr_reg:x3; val_offset:241617*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241617*0 + 3*667*FLEN/8, x4, x1, x2)

inst_80540:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00000003fffff; valaddr_reg:x3; val_offset:241620*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241620*0 + 3*668*FLEN/8, x4, x1, x2)

inst_80541:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00000007fffff; valaddr_reg:x3; val_offset:241623*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241623*0 + 3*669*FLEN/8, x4, x1, x2)

inst_80542:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000000ffffff; valaddr_reg:x3; val_offset:241626*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241626*0 + 3*670*FLEN/8, x4, x1, x2)

inst_80543:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000001ffffff; valaddr_reg:x3; val_offset:241629*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241629*0 + 3*671*FLEN/8, x4, x1, x2)

inst_80544:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000003ffffff; valaddr_reg:x3; val_offset:241632*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241632*0 + 3*672*FLEN/8, x4, x1, x2)

inst_80545:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000007ffffff; valaddr_reg:x3; val_offset:241635*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241635*0 + 3*673*FLEN/8, x4, x1, x2)

inst_80546:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000000fffffff; valaddr_reg:x3; val_offset:241638*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241638*0 + 3*674*FLEN/8, x4, x1, x2)

inst_80547:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000001fffffff; valaddr_reg:x3; val_offset:241641*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241641*0 + 3*675*FLEN/8, x4, x1, x2)

inst_80548:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000003fffffff; valaddr_reg:x3; val_offset:241644*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241644*0 + 3*676*FLEN/8, x4, x1, x2)

inst_80549:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000007fffffff; valaddr_reg:x3; val_offset:241647*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241647*0 + 3*677*FLEN/8, x4, x1, x2)

inst_80550:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00000ffffffff; valaddr_reg:x3; val_offset:241650*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241650*0 + 3*678*FLEN/8, x4, x1, x2)

inst_80551:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00001ffffffff; valaddr_reg:x3; val_offset:241653*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241653*0 + 3*679*FLEN/8, x4, x1, x2)

inst_80552:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00003ffffffff; valaddr_reg:x3; val_offset:241656*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241656*0 + 3*680*FLEN/8, x4, x1, x2)

inst_80553:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00007ffffffff; valaddr_reg:x3; val_offset:241659*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241659*0 + 3*681*FLEN/8, x4, x1, x2)

inst_80554:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0000fffffffff; valaddr_reg:x3; val_offset:241662*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241662*0 + 3*682*FLEN/8, x4, x1, x2)

inst_80555:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0001fffffffff; valaddr_reg:x3; val_offset:241665*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241665*0 + 3*683*FLEN/8, x4, x1, x2)

inst_80556:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0003fffffffff; valaddr_reg:x3; val_offset:241668*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241668*0 + 3*684*FLEN/8, x4, x1, x2)

inst_80557:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0007fffffffff; valaddr_reg:x3; val_offset:241671*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241671*0 + 3*685*FLEN/8, x4, x1, x2)

inst_80558:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd000ffffffffff; valaddr_reg:x3; val_offset:241674*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241674*0 + 3*686*FLEN/8, x4, x1, x2)

inst_80559:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd001ffffffffff; valaddr_reg:x3; val_offset:241677*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241677*0 + 3*687*FLEN/8, x4, x1, x2)

inst_80560:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd003ffffffffff; valaddr_reg:x3; val_offset:241680*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241680*0 + 3*688*FLEN/8, x4, x1, x2)

inst_80561:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd007ffffffffff; valaddr_reg:x3; val_offset:241683*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241683*0 + 3*689*FLEN/8, x4, x1, x2)

inst_80562:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd00fffffffffff; valaddr_reg:x3; val_offset:241686*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241686*0 + 3*690*FLEN/8, x4, x1, x2)

inst_80563:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd01fffffffffff; valaddr_reg:x3; val_offset:241689*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241689*0 + 3*691*FLEN/8, x4, x1, x2)

inst_80564:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd03fffffffffff; valaddr_reg:x3; val_offset:241692*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241692*0 + 3*692*FLEN/8, x4, x1, x2)

inst_80565:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd07fffffffffff; valaddr_reg:x3; val_offset:241695*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241695*0 + 3*693*FLEN/8, x4, x1, x2)

inst_80566:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd0ffffffffffff; valaddr_reg:x3; val_offset:241698*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241698*0 + 3*694*FLEN/8, x4, x1, x2)

inst_80567:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd1ffffffffffff; valaddr_reg:x3; val_offset:241701*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241701*0 + 3*695*FLEN/8, x4, x1, x2)

inst_80568:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd3ffffffffffff; valaddr_reg:x3; val_offset:241704*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241704*0 + 3*696*FLEN/8, x4, x1, x2)

inst_80569:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd7ffffffffffff; valaddr_reg:x3; val_offset:241707*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241707*0 + 3*697*FLEN/8, x4, x1, x2)

inst_80570:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xd8000000000000; valaddr_reg:x3; val_offset:241710*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241710*0 + 3*698*FLEN/8, x4, x1, x2)

inst_80571:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdc000000000000; valaddr_reg:x3; val_offset:241713*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241713*0 + 3*699*FLEN/8, x4, x1, x2)

inst_80572:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xde000000000000; valaddr_reg:x3; val_offset:241716*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241716*0 + 3*700*FLEN/8, x4, x1, x2)

inst_80573:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdf000000000000; valaddr_reg:x3; val_offset:241719*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241719*0 + 3*701*FLEN/8, x4, x1, x2)

inst_80574:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdf800000000000; valaddr_reg:x3; val_offset:241722*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241722*0 + 3*702*FLEN/8, x4, x1, x2)

inst_80575:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfc00000000000; valaddr_reg:x3; val_offset:241725*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241725*0 + 3*703*FLEN/8, x4, x1, x2)

inst_80576:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfe00000000000; valaddr_reg:x3; val_offset:241728*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241728*0 + 3*704*FLEN/8, x4, x1, x2)

inst_80577:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdff00000000000; valaddr_reg:x3; val_offset:241731*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241731*0 + 3*705*FLEN/8, x4, x1, x2)

inst_80578:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdff80000000000; valaddr_reg:x3; val_offset:241734*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241734*0 + 3*706*FLEN/8, x4, x1, x2)

inst_80579:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffc0000000000; valaddr_reg:x3; val_offset:241737*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241737*0 + 3*707*FLEN/8, x4, x1, x2)

inst_80580:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffe0000000000; valaddr_reg:x3; val_offset:241740*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241740*0 + 3*708*FLEN/8, x4, x1, x2)

inst_80581:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfff0000000000; valaddr_reg:x3; val_offset:241743*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241743*0 + 3*709*FLEN/8, x4, x1, x2)

inst_80582:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfff8000000000; valaddr_reg:x3; val_offset:241746*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241746*0 + 3*710*FLEN/8, x4, x1, x2)

inst_80583:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffc000000000; valaddr_reg:x3; val_offset:241749*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241749*0 + 3*711*FLEN/8, x4, x1, x2)

inst_80584:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffe000000000; valaddr_reg:x3; val_offset:241752*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241752*0 + 3*712*FLEN/8, x4, x1, x2)

inst_80585:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffff000000000; valaddr_reg:x3; val_offset:241755*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241755*0 + 3*713*FLEN/8, x4, x1, x2)

inst_80586:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffff800000000; valaddr_reg:x3; val_offset:241758*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241758*0 + 3*714*FLEN/8, x4, x1, x2)

inst_80587:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffc00000000; valaddr_reg:x3; val_offset:241761*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241761*0 + 3*715*FLEN/8, x4, x1, x2)

inst_80588:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffe00000000; valaddr_reg:x3; val_offset:241764*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241764*0 + 3*716*FLEN/8, x4, x1, x2)

inst_80589:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffff00000000; valaddr_reg:x3; val_offset:241767*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241767*0 + 3*717*FLEN/8, x4, x1, x2)

inst_80590:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffff80000000; valaddr_reg:x3; val_offset:241770*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241770*0 + 3*718*FLEN/8, x4, x1, x2)

inst_80591:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffc0000000; valaddr_reg:x3; val_offset:241773*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241773*0 + 3*719*FLEN/8, x4, x1, x2)

inst_80592:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffe0000000; valaddr_reg:x3; val_offset:241776*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241776*0 + 3*720*FLEN/8, x4, x1, x2)

inst_80593:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffff0000000; valaddr_reg:x3; val_offset:241779*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241779*0 + 3*721*FLEN/8, x4, x1, x2)

inst_80594:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffff8000000; valaddr_reg:x3; val_offset:241782*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241782*0 + 3*722*FLEN/8, x4, x1, x2)

inst_80595:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffc000000; valaddr_reg:x3; val_offset:241785*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241785*0 + 3*723*FLEN/8, x4, x1, x2)

inst_80596:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffe000000; valaddr_reg:x3; val_offset:241788*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241788*0 + 3*724*FLEN/8, x4, x1, x2)

inst_80597:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffff000000; valaddr_reg:x3; val_offset:241791*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241791*0 + 3*725*FLEN/8, x4, x1, x2)

inst_80598:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffff800000; valaddr_reg:x3; val_offset:241794*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241794*0 + 3*726*FLEN/8, x4, x1, x2)

inst_80599:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffc00000; valaddr_reg:x3; val_offset:241797*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241797*0 + 3*727*FLEN/8, x4, x1, x2)

inst_80600:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffe00000; valaddr_reg:x3; val_offset:241800*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241800*0 + 3*728*FLEN/8, x4, x1, x2)

inst_80601:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffff00000; valaddr_reg:x3; val_offset:241803*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241803*0 + 3*729*FLEN/8, x4, x1, x2)

inst_80602:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffff80000; valaddr_reg:x3; val_offset:241806*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241806*0 + 3*730*FLEN/8, x4, x1, x2)

inst_80603:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffffc0000; valaddr_reg:x3; val_offset:241809*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241809*0 + 3*731*FLEN/8, x4, x1, x2)

inst_80604:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffffe0000; valaddr_reg:x3; val_offset:241812*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241812*0 + 3*732*FLEN/8, x4, x1, x2)

inst_80605:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffff0000; valaddr_reg:x3; val_offset:241815*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241815*0 + 3*733*FLEN/8, x4, x1, x2)

inst_80606:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffff8000; valaddr_reg:x3; val_offset:241818*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241818*0 + 3*734*FLEN/8, x4, x1, x2)

inst_80607:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffffc000; valaddr_reg:x3; val_offset:241821*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241821*0 + 3*735*FLEN/8, x4, x1, x2)

inst_80608:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffffe000; valaddr_reg:x3; val_offset:241824*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241824*0 + 3*736*FLEN/8, x4, x1, x2)

inst_80609:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffffff000; valaddr_reg:x3; val_offset:241827*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241827*0 + 3*737*FLEN/8, x4, x1, x2)

inst_80610:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffffff800; valaddr_reg:x3; val_offset:241830*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241830*0 + 3*738*FLEN/8, x4, x1, x2)

inst_80611:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffffffc00; valaddr_reg:x3; val_offset:241833*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241833*0 + 3*739*FLEN/8, x4, x1, x2)

inst_80612:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffffffe00; valaddr_reg:x3; val_offset:241836*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241836*0 + 3*740*FLEN/8, x4, x1, x2)

inst_80613:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffffff00; valaddr_reg:x3; val_offset:241839*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241839*0 + 3*741*FLEN/8, x4, x1, x2)

inst_80614:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffffff80; valaddr_reg:x3; val_offset:241842*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241842*0 + 3*742*FLEN/8, x4, x1, x2)

inst_80615:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffffffc0; valaddr_reg:x3; val_offset:241845*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241845*0 + 3*743*FLEN/8, x4, x1, x2)

inst_80616:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffffffe0; valaddr_reg:x3; val_offset:241848*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241848*0 + 3*744*FLEN/8, x4, x1, x2)

inst_80617:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffffffff0; valaddr_reg:x3; val_offset:241851*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241851*0 + 3*745*FLEN/8, x4, x1, x2)

inst_80618:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffffffff8; valaddr_reg:x3; val_offset:241854*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241854*0 + 3*746*FLEN/8, x4, x1, x2)

inst_80619:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffffffffc; valaddr_reg:x3; val_offset:241857*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241857*0 + 3*747*FLEN/8, x4, x1, x2)

inst_80620:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdffffffffffffe; valaddr_reg:x3; val_offset:241860*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241860*0 + 3*748*FLEN/8, x4, x1, x2)

inst_80621:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9756b68c8e740 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9756b68c8e740; op2val:0x0;
op3val:0xdfffffffffffff; valaddr_reg:x3; val_offset:241863*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241863*0 + 3*749*FLEN/8, x4, x1, x2)

inst_80622:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:241866*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241866*0 + 3*750*FLEN/8, x4, x1, x2)

inst_80623:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:241869*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241869*0 + 3*751*FLEN/8, x4, x1, x2)

inst_80624:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:241872*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241872*0 + 3*752*FLEN/8, x4, x1, x2)

inst_80625:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:241875*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241875*0 + 3*753*FLEN/8, x4, x1, x2)

inst_80626:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:241878*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241878*0 + 3*754*FLEN/8, x4, x1, x2)

inst_80627:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:241881*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241881*0 + 3*755*FLEN/8, x4, x1, x2)

inst_80628:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:241884*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241884*0 + 3*756*FLEN/8, x4, x1, x2)

inst_80629:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:241887*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241887*0 + 3*757*FLEN/8, x4, x1, x2)

inst_80630:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:241890*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241890*0 + 3*758*FLEN/8, x4, x1, x2)

inst_80631:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:241893*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241893*0 + 3*759*FLEN/8, x4, x1, x2)

inst_80632:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:241896*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241896*0 + 3*760*FLEN/8, x4, x1, x2)

inst_80633:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:241899*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241899*0 + 3*761*FLEN/8, x4, x1, x2)

inst_80634:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:241902*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241902*0 + 3*762*FLEN/8, x4, x1, x2)

inst_80635:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:241905*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241905*0 + 3*763*FLEN/8, x4, x1, x2)

inst_80636:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:241908*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241908*0 + 3*764*FLEN/8, x4, x1, x2)

inst_80637:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:241911*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241911*0 + 3*765*FLEN/8, x4, x1, x2)

inst_80638:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:241914*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241914*0 + 3*766*FLEN/8, x4, x1, x2)

inst_80639:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:241917*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241917*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332405823,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332405887,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332406015,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332406271,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332406783,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332407807,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332409855,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332413951,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332422143,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332438527,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332471295,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332536831,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332667903,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906332930047,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906333454335,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906334502911,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906336600063,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906340794367,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906349182975,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906365960191,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906399514623,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906466623487,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906600841215,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064906869276671,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064907406147583,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064908479889407,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064910627373055,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064914922340351,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064923512274943,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064940692144127,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218064975051882495,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218065043771359231,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218065181210312703,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218065456088219647,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218066005844033535,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218067105355661311,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218069304378916863,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218073702425427967,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218082498518450175,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218100090704494591,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218135275076583423,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218205643820761087,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218346381309116415,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13218627856285827071,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13219190806239248383,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13220316706146091007,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13220316706146091008,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13221442606052933632,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222005556006354944,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222287030983065600,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222427768471420928,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222498137215598592,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222533321587687424,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222550913773731840,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222559709866754048,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222564107913265152,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222566306936520704,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222567406448148480,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222567956203962368,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568231081869312,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568368520822784,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568437240299520,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568471600037888,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568488779907072,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568497369841664,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568501664808960,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568503812292608,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568504886034432,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505422905344,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505691340800,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505825558528,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505892667392,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505926221824,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505942999040,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505951387648,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505955581952,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505957679104,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505958727680,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959251968,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959514112,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959645184,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959710720,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959743488,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959759872,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959768064,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959772160,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959774208,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959775232,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959775744,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959776000,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959776128,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959776192,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959776224,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959776240,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959776248,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959776252,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959776254,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13222568505959776255,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6893116123378090920,64,FLEN)
NAN_BOXED(11512400527593355259,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008458752,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008458753,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008458755,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008458759,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008458767,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008458783,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008458815,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008458879,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008459007,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008459263,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008459775,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008460799,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008462847,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008466943,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008475135,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008491519,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008524287,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008589823,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008720895,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059008983039,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059009507327,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059010555903,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059012653055,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059016847359,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059025235967,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059042013183,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059075567615,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059142676479,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059276894207,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022059545329663,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022060082200575,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022061155942399,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022063303426047,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022067598393343,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022076188327935,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022093368197119,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022127727935487,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022196447412223,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022333886365695,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790022608764272639,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790023158520086527,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790024258031714303,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790026457054969855,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790030855101480959,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790039651194503167,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790057243380547583,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790092427752636415,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790162796496814079,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790303533985169407,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13790585008961880063,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13791147958915301375,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13792273858822143999,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13792273858822144000,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13793399758728986624,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13793962708682407936,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794244183659118592,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794384921147473920,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794455289891651584,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794490474263740416,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794508066449784832,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794516862542807040,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794521260589318144,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794523459612573696,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794524559124201472,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525108880015360,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525383757922304,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525521196875776,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525589916352512,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525624276090880,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525641455960064,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525650045894656,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525654340861952,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525656488345600,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525657562087424,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658098958336,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658367393792,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658501611520,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658568720384,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658602274816,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658619052032,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658627440640,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658631634944,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658633732096,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658634780672,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635304960,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635567104,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635698176,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635763712,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635796480,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635812864,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635821056,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635825152,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635827200,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635828224,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635828736,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635828992,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635829120,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635829184,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635829216,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635829232,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635829240,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635829244,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635829246,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13794525658635829247,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(11512390310499951407,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257792,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257793,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257795,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257799,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257807,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257823,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257855,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257919,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364258047,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364258303,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364258815,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364259839,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364261887,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364265983,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364274175,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364290559,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364323327,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364388863,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364519935,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364782079,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435365306367,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435366354943,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435368452095,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435372646399,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435381035007,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435397812223,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435431366655,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435498475519,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435632693247,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435901128703,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386436437999615,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386437511741439,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386439659225087,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386443954192383,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386452544126975,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386469723996159,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386504083734527,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386572803211263,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386710242164735,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386985120071679,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241387534875885567,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241388634387513343,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241390833410768895,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241395231457279999,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241404027550302207,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241421619736346623,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241456804108435455,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241527172852613119,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241667910340968447,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241949385317679103,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9242512335271100415,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9243638235177943039,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9243638235177943040,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9244764135084785664,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245327085038206976,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245608560014917632,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245749297503272960,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245819666247450624,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245854850619539456,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245872442805583872,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245881238898606080,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245885636945117184,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245887835968372736,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245888935480000512,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889485235814400,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889760113721344,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889897552674816,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889966272151552,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890000631889920,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890017811759104,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890026401693696,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890030696660992,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890032844144640,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890033917886464,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034454757376,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034723192832,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034857410560,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034924519424,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034958073856,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034974851072,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034983239680,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034987433984,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034989531136,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034990579712,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991104000,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991366144,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991497216,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991562752,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991595520,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991611904,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991620096,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991624192,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991626240,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991627264,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991627776,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628032,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628160,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628224,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628256,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628272,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628280,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628284,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628286,64,FLEN)
NAN_BOXED(6893139662006438229,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628287,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166408704,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166408705,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166408707,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166408711,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166408719,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166408735,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166408767,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166408831,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166408959,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166409215,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166409727,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166410751,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166412799,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166416895,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166425087,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166441471,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166474239,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166539775,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166670847,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627166932991,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627167457279,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627168505855,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627170603007,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627174797311,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627183185919,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627199963135,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627233517567,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627300626431,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627434844159,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465627703279615,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465628240150527,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465629313892351,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465631461375999,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465635756343295,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465644346277887,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465661526147071,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465695885885439,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465764605362175,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340465902044315647,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340466176922222591,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340466726678036479,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340467826189664255,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340470025212919807,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340474423259430911,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340483219352453119,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340500811538497535,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340535995910586367,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340606364654764031,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340747102143119359,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9341028577119830015,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9341591527073251327,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9342717426980093951,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9342717426980093952,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9343843326886936576,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344406276840357888,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344687751817068544,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344828489305423872,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344898858049601536,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344934042421690368,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344951634607734784,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344960430700756992,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344964828747268096,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344967027770523648,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344968127282151424,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344968677037965312,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344968951915872256,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969089354825728,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969158074302464,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969192434040832,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969209613910016,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969218203844608,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969222498811904,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969224646295552,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969225720037376,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226256908288,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226525343744,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226659561472,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226726670336,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226760224768,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226777001984,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226785390592,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226789584896,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226791682048,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226792730624,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793254912,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793517056,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793648128,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793713664,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793746432,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793762816,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793771008,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793775104,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793777152,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793778176,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793778688,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793778944,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779072,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779136,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779168,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779184,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779192,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779196,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779198,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779199,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440113664,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440113665,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440113667,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440113671,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440113679,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440113695,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440113727,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440113791,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440113919,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440114175,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440114687,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440115711,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440117759,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440121855,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440130047,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440146431,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440179199,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440244735,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440375807,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623440637951,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623441162239,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623442210815,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623444307967,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623448502271,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623456890879,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623473668095,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623507222527,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623574331391,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623708549119,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501623976984575,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501624513855487,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501625587597311,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501627735080959,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501632030048255,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501640619982847,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501657799852031,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501692159590399,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501760879067135,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385501898318020607,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385502173195927551,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385502722951741439,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385503822463369215,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385506021486624767,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385510419533135871,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385519215626158079,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385536807812202495,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385571992184291327,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385642360928468991,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9385783098416824319,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9386064573393534975,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9386627523346956287,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9387753423253798911,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9387753423253798912,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9388879323160641536,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9389442273114062848,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9389723748090773504,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9389864485579128832,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9389934854323306496,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9389970038695395328,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9389987630881439744,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9389996426974461952,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390000825020973056,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390003024044228608,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390004123555856384,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390004673311670272,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390004948189577216,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005085628530688,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005154348007424,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005188707745792,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005205887614976,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005214477549568,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005218772516864,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005220920000512,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005221993742336,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005222530613248,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005222799048704,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005222933266432,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223000375296,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223033929728,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223050706944,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223059095552,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223063289856,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223065387008,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223066435584,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223066959872,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067222016,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067353088,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067418624,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067451392,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067467776,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067475968,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067480064,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067482112,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067483136,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067483648,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067483904,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067484032,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067484096,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067484128,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067484144,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067484152,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067484156,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067484158,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9390005223067484159,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5404319552844595,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5790342378047780,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6305039478318694,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6433713753386422,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6605279453476727,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6905519428634760,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7205759403792793,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7720456504063707,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8106479329266892,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8363827879402349,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740928,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740960,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740976,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740984,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740988,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740990,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816448,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816449,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816451,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816455,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816463,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816479,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816511,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816575,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816703,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816959,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155817471,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155818495,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155820543,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155824639,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155832831,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155849215,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155881983,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155947519,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795156078591,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795156340735,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795156865023,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795157913599,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795160010751,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795164205055,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795172593663,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795189370879,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795222925311,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795290034175,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795424251903,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795692687359,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546796229558271,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546797303300095,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546799450783743,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546803745751039,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546812335685631,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546829515554815,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546863875293183,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546932594769919,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58547070033723391,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58547344911630335,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58547894667444223,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58548994179071999,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58551193202327551,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58555591248838655,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58564387341860863,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58581979527905279,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58617163899994111,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58687532644171775,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58828270132527103,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(59109745109237759,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(59672695062659071,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(60798594969501695,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(60798594969501696,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(61924494876344320,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(62487444829765632,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(62768919806476288,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(62909657294831616,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(62980026039009280,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63015210411098112,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63032802597142528,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63041598690164736,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63045996736675840,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63048195759931392,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63049295271559168,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63049845027373056,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050119905280000,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050257344233472,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050326063710208,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050360423448576,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050377603317760,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050386193252352,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050390488219648,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050392635703296,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050393709445120,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394246316032,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394514751488,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394648969216,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394716078080,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394749632512,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394766409728,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394774798336,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394778992640,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394781089792,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394782138368,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394782662656,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394782924800,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783055872,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783121408,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783154176,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783170560,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783178752,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783182848,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783184896,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783185920,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186432,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186688,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186816,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186880,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186912,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186928,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186936,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186940,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186942,64,FLEN)
NAN_BOXED(6893169808847202112,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186943,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
