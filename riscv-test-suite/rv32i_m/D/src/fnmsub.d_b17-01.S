
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmsub.d_b17 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmsub.d_b17)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f13, rs2==f25, rs3==f13, rd==f4,fs1 == 0 and fe1 == 0x5f1 and fm1 == 0xda206db2e93ff and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0xc1325f19d9f5f and fs3 == 0 and fe3 == 0x7e9 and fm3 == 0x9ff8156f10cbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f13; op2:f25; op3:f13; dest:f4; op1val:0x5f1da206db2e93ff; op2val:0x5f6c1325f19d9f5f;
op3val:0x5f1da206db2e93ff; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f4, f13, f25, f13, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rs3 != rd, rs1==f0, rs2==f0, rs3==f0, rd==f16,fs1 == 0 and fe1 == 0x5f4 and fm1 == 0xaeb807b25f33f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7d97bc07bb6a5 and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0x4103972e94f48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f0; op2:f0; op3:f0; dest:f16; op1val:0x5f4aeb807b25f33f; op2val:0x5f4aeb807b25f33f;
op3val:0x5f4aeb807b25f33f; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f16, f0, f0, f0, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f10, rs2==f10, rs3==f3, rd==f10,fs1 == 0 and fe1 == 0x5f4 and fm1 == 0xaf7d1e8a8527f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xacc8bf5e07e70 and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0x695bc5ae24f19 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f10; op2:f10; op3:f3; dest:f10; op1val:0x5f4af7d1e8a8527f; op2val:0x5f4af7d1e8a8527f;
op3val:0x7f0695bc5ae24f19; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f10, f10, f10, f3, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f29, rs2==f18, rs3==f8, rd==f29,fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x6b7004b70b43f and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0xf03ec3d1c1d8f and fs3 == 0 and fe3 == 0x7ed and fm3 == 0x60411221f3b39 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f29; op2:f18; op3:f8; dest:f29; op1val:0x5f56b7004b70b43f; op2val:0x5f6f03ec3d1c1d8f;
op3val:0x7ed60411221f3b39; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f29, f29, f18, f8, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f5, rs2==f12, rs3==f12, rd==f18,fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x7ae042250e45f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xeaff5366eca4b and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0x6b558fb5eca0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f5; op2:f12; op3:f12; dest:f18; op1val:0x5f57ae042250e45f; op2val:0x5f9eaff5366eca4b;
op3val:0x5f9eaff5366eca4b; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f18, f5, f12, f12, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f11, rs2==f15, rs3==f15, rd==f15,fs1 == 0 and fe1 == 0x5f5 and fm1 == 0xb913b7c55ffdf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2375c8ebc2475 and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0xf62c5a15f4ba4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f11; op2:f15; op3:f15; dest:f15; op1val:0x5f5b913b7c55ffdf; op2val:0x5fa2375c8ebc2475;
op3val:0x5fa2375c8ebc2475; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f15, f11, f15, f15, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rd == rs3 != rs2, rs1==f23, rs2==f9, rs3==f23, rd==f23,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x010befcbab41f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x943e82f8af8c3 and fs3 == 0 and fe3 == 0x7ef and fm3 == 0x95e59ad341313 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f23; op2:f9; op3:f23; dest:f23; op1val:0x5f6010befcbab41f; op2val:0x5f8943e82f8af8c3;
op3val:0x5f6010befcbab41f; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f23, f23, f9, f23, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f3, rs2==f30, rs3==f24, rd==f30,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58f8cdea3010f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x026995915c74a and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0x5c39071f2adb5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f3; op2:f30; op3:f24; dest:f30; op1val:0x5f658f8cdea3010f; op2val:0x5fa026995915c74a;
op3val:0x7f15c39071f2adb5; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f30, f3, f30, f24, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f6, rs2==f14, rs3==f5, rd==f5,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6a01466b8215f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3aa401f0be9eb and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0xbced7bef6a740 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f6; op2:f14; op3:f5; dest:f5; op1val:0x5f66a01466b8215f; op2val:0x5fa3aa401f0be9eb;
op3val:0x7f1bced7bef6a740; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f5, f6, f14, f5, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f14, rs2==f23, rs3==f4, rd==f0,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0645d4519cddf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x8436c13d47a1b and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x8db9ee7fe80fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f14; op2:f23; op3:f4; dest:f0; op1val:0x5f70645d4519cddf; op2val:0x5fa8436c13d47a1b;
op3val:0x7f28db9ee7fe80fa; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f0, f14, f23, f4, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs2 == rs3 == rd, rs1==f21, rs2==f21, rs3==f21, rd==f21,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x18f86836ffdff and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x6e81fb8b9962a and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x9241ce3feaf05 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f21; op2:f21; op3:f21; dest:f21; op1val:0x5f718f86836ffdff; op2val:0x5f718f86836ffdff;
op3val:0x5f718f86836ffdff; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f21, f21, f21, f21, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f17, rs2==f17, rs3==f16, rd==f7,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x25321d9b34d0f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xb315fb9cba7b1 and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0xf24d5596cb9ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f17; op2:f17; op3:f16; dest:f7; op1val:0x5f725321d9b34d0f; op2val:0x5f725321d9b34d0f;
op3val:0x7f1f24d5596cb9ef; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f7, f17, f17, f16, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f30, rs2==f20, rs3==f27, rd==f28,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x474683222afa7 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x6daed80aff873 and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0xd37f0f1666925 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f20; op3:f27; dest:f28; op1val:0x5f7474683222afa7; op2val:0x5f86daed80aff873;
op3val:0x7f0d37f0f1666925; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f28, f30, f20, f27, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f27, rs2==f5, rs3==f30, rd==f14,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x78021920eec47 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x96bb2b5183927 and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0x2ab31e8154ee5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f27; op2:f5; op3:f30; dest:f14; op1val:0x5f778021920eec47; op2val:0x5f796bb2b5183927;
op3val:0x7f02ab31e8154ee5; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f14, f27, f5, f30, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f15, rs2==f6, rs3==f18, rd==f31,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x88a542fef4657 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7f0e259ef1af1 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x25c278fc6279b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f15; op2:f6; op3:f18; dest:f31; op1val:0x5f788a542fef4657; op2val:0x5fa7f0e259ef1af1;
op3val:0x7f325c278fc6279b; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f15, f6, f18, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f9, rs2==f4, rs3==f25, rd==f13,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0xa66f0b9f8cc27 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2ceeb7addc7ab and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0xf0940bf40d748 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f9; op2:f4; op3:f25; dest:f13; op1val:0x5f7a66f0b9f8cc27; op2val:0x5fa2ceeb7addc7ab;
op3val:0x7f2f0940bf40d748; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f13, f9, f4, f25, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f12, rs2==f29, rs3==f7, rd==f26,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0xbef6db92e2fbf and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x5dcfa9a24791f and fs3 == 0 and fe3 == 0x7ef and fm3 == 0x31608d8f8bab9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f12; op2:f29; op3:f7; dest:f26; op1val:0x5f7bef6db92e2fbf; op2val:0x5f65dcfa9a24791f;
op3val:0x7ef31608d8f8bab9; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f26, f12, f29, f7, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f18, rs2==f8, rs3==f28, rd==f2,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0xf0c6f00d0a117 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb01954875dbe6 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xa3406e45b3ed0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f18; op2:f8; op3:f28; dest:f2; op1val:0x5f7f0c6f00d0a117; op2val:0x5fab01954875dbe6;
op3val:0x7f3a3406e45b3ed0; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f2, f18, f8, f28, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f7, rs2==f3, rs3==f19, rd==f25,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0xfe78141983bff and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x183c18f73341f and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0x176595f466040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f7; op2:f3; op3:f19; dest:f25; op1val:0x5f7fe78141983bff; op2val:0x5f7183c18f73341f;
op3val:0x7f0176595f466040; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f25, f7, f3, f19, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f1, rs2==f24, rs3==f10, rd==f20,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x099a756bd881b and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x2af313c25ada5 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x3629fecd1b6c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f1; op2:f24; op3:f10; dest:f20; op1val:0x5f8099a756bd881b; op2val:0x5f92af313c25ada5;
op3val:0x7f23629fecd1b6c4; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f20, f1, f24, f10, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f31, rs2==f2, rs3==f29, rd==f11,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x218e10ebba3c3 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x537c93d28ea11 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x7ffc086b15602 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f31; op2:f2; op3:f29; dest:f11; op1val:0x5f8218e10ebba3c3; op2val:0x5f9537c93d28ea11;
op3val:0x7f27ffc086b15602; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f11, f31, f2, f29, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f8, rs2==f28, rs3==f6, rd==f9,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x25ecf43c688c3 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x8c719398e006e and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xc72cf0dbd689f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f8; op2:f28; op3:f6; dest:f9; op1val:0x5f825ecf43c688c3; op2val:0x5fa8c719398e006e;
op3val:0x7f3c72cf0dbd689f; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f9, f8, f28, f6, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f25, rs2==f11, rs3==f2, rd==f19,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x2bf911dc09a97 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x97fb42e62b463 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0xde0f66fd412fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f25; op2:f11; op3:f2; dest:f19; op1val:0x5f82bf911dc09a97; op2val:0x5f997fb42e62b463;
op3val:0x7f2de0f66fd412fb; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f19, f25, f11, f2, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f24, rs2==f7, rs3==f22, rd==f8,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x3476623b5f3d7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x450c74c9b42e4 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x87a94cfaa9427 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f24; op2:f7; op3:f22; dest:f8; op1val:0x5f83476623b5f3d7; op2val:0x5fa450c74c9b42e4;
op3val:0x7f387a94cfaa9427; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f8, f24, f7, f22, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f4, rs2==f16, rs3==f1, rd==f22,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x3f7bce331716b and fs2 == 0 and fe2 == 0x5f3 and fm2 == 0x3183ef4678c7f and fs3 == 0 and fe3 == 0x7ec and fm3 == 0x7d4727a1eabe8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f4; op2:f16; op3:f1; dest:f22; op1val:0x5f83f7bce331716b; op2val:0x5f33183ef4678c7f;
op3val:0x7ec7d4727a1eabe8; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f22, f4, f16, f1, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f20, rs2==f26, rs3==f9, rd==f6,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x48f3656a4f33b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x61b5886460bee and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xc680e23094a4e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f20; op2:f26; op3:f9; dest:f6; op1val:0x5f848f3656a4f33b; op2val:0x5fa61b5886460bee;
op3val:0x7f3c680e23094a4e; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f6, f20, f26, f9, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f28, rs2==f1, rs3==f31, rd==f12,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x5ed3b83d4d06f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x955605918543b and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x15bd6a9d374c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f28; op2:f1; op3:f31; dest:f12; op1val:0x5f85ed3b83d4d06f; op2val:0x5fa955605918543b;
op3val:0x7f415bd6a9d374c9; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f12, f28, f1, f31, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f19, rs2==f27, rs3==f11, rd==f3,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x60c36c91e43db and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x711f241e91d41 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0xfca498ee0ac5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f19; op2:f27; op3:f11; dest:f3; op1val:0x5f860c36c91e43db; op2val:0x5f9711f241e91d41;
op3val:0x7f2fca498ee0ac5b; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f3, f19, f27, f11, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f22, rs2==f13, rs3==f14, rd==f17,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x6ee815d1c73e3 and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0x80d12abb5bebf and fs3 == 0 and fe3 == 0x7ef and fm3 == 0x13c3f4b98afe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f22; op2:f13; op3:f14; dest:f17; op1val:0x5f86ee815d1c73e3; op2val:0x5f580d12abb5bebf;
op3val:0x7ef13c3f4b98afe0; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f17, f22, f13, f14, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f2, rs2==f19, rs3==f26, rd==f1,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x77fc19dd1d407 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x1d47422b88b69 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0xa2fc50e544b14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f2; op2:f19; op3:f26; dest:f1; op1val:0x5f877fc19dd1d407; op2val:0x5f91d47422b88b69;
op3val:0x7f2a2fc50e544b14; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f1, f2, f19, f26, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f16, rs2==f22, rs3==f20, rd==f27,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x7d27c822e38f3 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x11c620e043403 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x979e6a24df9c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f16; op2:f22; op3:f20; dest:f27; op1val:0x5f87d27c822e38f3; op2val:0x5f911c620e043403;
op3val:0x7f2979e6a24df9c3; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f27, f16, f22, f20, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f26, rs2==f31, rs3==f17, rd==f24,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x836b4f912cecf and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xaaa7b255c7729 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x42d72da575206 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f26; op2:f31; op3:f17; dest:f24; op1val:0x5f8836b4f912cecf; op2val:0x5f9aaa7b255c7729;
op3val:0x7f342d72da575206; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f24, f26, f31, f17, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x86c42550ad12b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x9d11e7f58461f and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x3b42e2a5b1846 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f886c42550ad12b; op2val:0x5fa9d11e7f58461f;
op3val:0x7f43b42e2a5b1846; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x8755fffcef0ef and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x50aabc36dfa15 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x0152ef6780db5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f88755fffcef0ef; op2val:0x5f950aabc36dfa15;
op3val:0x7f30152ef6780db5; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x8ff93428ba4ff and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xac9ee205b0abf and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x4ed6701296495 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f88ff93428ba4ff; op2val:0x5f8ac9ee205b0abf;
op3val:0x7f24ed6701296495; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x9423ad1f49e07 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x11bbf238cf0de and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xb022c0113bf78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f89423ad1f49e07; op2val:0x5fa11bbf238cf0de;
op3val:0x7f3b022c0113bf78; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x9a3855b4b1a63 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x495d2e6438f63 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x07e3db7989d0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f89a3855b4b1a63; op2val:0x5f8495d2e6438f63;
op3val:0x7f207e3db7989d0f; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xae46f3a4f112b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2b92ef2f82fa3 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xf783d50cb2449 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ae46f3a4f112b; op2val:0x5fa2b92ef2f82fa3;
op3val:0x7f3f783d50cb2449; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xbc63a6420b0e7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xee5369ab02b92 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xad0c8b48099d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8bc63a6420b0e7; op2val:0x5faee5369ab02b92;
op3val:0x7f4ad0c8b48099d6; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xca7049f840037 and fs2 == 0 and fe2 == 0x5f2 and fm2 == 0x61f77377e85ff and fs3 == 0 and fe3 == 0x7ec and fm3 == 0x3ceffb8eed2c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ca7049f840037; op2val:0x5f261f77377e85ff;
op3val:0x7ec3ceffb8eed2c8; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccdb65c979493 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xef491a115c81f and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0xbdcfe9a710b49 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccdb65c979493; op2val:0x5f7ef491a115c81f;
op3val:0x7f1bdcfe9a710b49; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd1d9dedc8d4db and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x16ce13b7494bf and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0xfb5999358a961 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d1d9dedc8d4db; op2val:0x5f716ce13b7494bf;
op3val:0x7f0fb5999358a961; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdfe8e9311623f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xfdc528ede5c0d and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xddd1d94e34c7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dfe8e9311623f; op2val:0x5fafdc528ede5c0d;
op3val:0x7f4ddd1d94e34c7f; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xe6ad80efba433 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x34501d37fe38d and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x2510867268988 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8e6ad80efba433; op2val:0x5f934501d37fe38d;
op3val:0x7f32510867268988; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xe759ff97b7507 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x16a5368858d8c and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x093b2030855bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8e759ff97b7507; op2val:0x5fa16a5368858d8c;
op3val:0x7f4093b2030855bf; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xe8d90453e9cfb and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x7fc89aad95937 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x6e6ddf31789f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8e8d90453e9cfb; op2val:0x5f87fc89aad95937;
op3val:0x7f26e6ddf31789f5; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xefdfc9ff93d7f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x702c88a55e7a7 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x6493fac2a9011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8efdfc9ff93d7f; op2val:0x5f8702c88a55e7a7;
op3val:0x7f26493fac2a9011; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xf5ee3b37f961b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x12594711492ab and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x0cf40345bb09b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8f5ee3b37f961b; op2val:0x5fa12594711492ab;
op3val:0x7f40cf40345bb09b; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x00277a2f4f0bf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x90362012c0cb9 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x9073d75564732 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f900277a2f4f0bf; op2val:0x5fa90362012c0cb9;
op3val:0x7f49073d75564732; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x08d4799198efb and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x7f5b3d9f355e3 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x8c9445275eb49 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f908d4799198efb; op2val:0x5f87f5b3d9f355e3;
op3val:0x7f28c9445275eb49; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x8894af06d8327 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xa176d8b0d4acd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x5f98894af06d8327;
op3val:0x7f3a176d8b0d4acd; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x14faadcb89035 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x98293d5ceb2ef and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0xb99c23867beb1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f914faadcb89035; op2val:0x5f798293d5ceb2ef;
op3val:0x7f1b99c23867beb1; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x15aec43b7bf87 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x62aab2512cca5 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x80b4d2d42240d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f915aec43b7bf87; op2val:0x5f962aab2512cca5;
op3val:0x7f380b4d2d42240d; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x15e91a9fc6f05 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x13083ccf1d8b1 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x2a9258e5f17eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f915e91a9fc6f05; op2val:0x5f913083ccf1d8b1;
op3val:0x7f32a9258e5f17eb; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x195b0309c25cd and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x54b3a41baf155 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x76724f08d0ee6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9195b0309c25cd; op2val:0x5fa54b3a41baf155;
op3val:0x7f476724f08d0ee6; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x25e6420f5c09f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x9ed1784fa671a and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xdc3ad9f0257d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f925e6420f5c09f; op2val:0x5fa9ed1784fa671a;
op3val:0x7f4dc3ad9f0257d9; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2cf1d3b6ac94b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x899f171a9297a and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xceba435ee44e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92cf1d3b6ac94b; op2val:0x5fa899f171a9297a;
op3val:0x7f4ceba435ee44e8; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3296d672a65d1 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb85355aabaa39 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x07ab870a90fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93296d672a65d1; op2val:0x5fab85355aabaa39;
op3val:0x7f507ab870a90fff; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3315db9e9910d and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x53671e4145242 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x9721a3e93cba7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93315db9e9910d; op2val:0x5fa53671e4145242;
op3val:0x7f49721a3e93cba7; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x339d1964c64f1 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x8236520d6c6fb and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xd0142605c1ae1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9339d1964c64f1; op2val:0x5f98236520d6c6fb;
op3val:0x7f3d0142605c1ae1; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x347f8263d98bd and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0xfc18b696ac21f and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0x3225675d4af2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9347f8263d98bd; op2val:0x5f5fc18b696ac21f;
op3val:0x7f03225675d4af2e; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3d1a2580ed007 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x3b45a2375b697 and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0x86856d20dcf3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93d1a2580ed007; op2val:0x5f73b45a2375b697;
op3val:0x7f186856d20dcf3f; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3d7504400059d and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xc7c1eba75a687 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x1a95b9fff39c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93d7504400059d; op2val:0x5f8c7c1eba75a687;
op3val:0x7f31a95b9fff39c9; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x402cbce109a77 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x7a037fec02fad and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xd8c66f67dd902 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9402cbce109a77; op2val:0x5f97a037fec02fad;
op3val:0x7f3d8c66f67dd902; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x437a4e1419f0d and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x422135092fed7 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x9709cbfd473ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9437a4e1419f0d; op2val:0x5f9422135092fed7;
op3val:0x7f39709cbfd473ea; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x4c075eef493d9 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x20c1a38b8c097 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x7683707973dea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f94c075eef493d9; op2val:0x5fa20c1a38b8c097;
op3val:0x7f47683707973dea; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x55c3845664053 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xaac59c0e5d8ef and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x1cdf950175943 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f955c3845664053; op2val:0x5faaac59c0e5d8ef;
op3val:0x7f51cdf950175943; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x56d651aa6d989 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xbeb0ceb099365 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x2b1b1536032ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f956d651aa6d989; op2val:0x5f9beb0ceb099365;
op3val:0x7f42b1b1536032ca; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5d8b8d100d4ad and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x0288c3fc6a2e3 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x610161e710b96 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95d8b8d100d4ad; op2val:0x5f90288c3fc6a2e3;
op3val:0x7f3610161e710b96; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x689c0c079e743 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x6fa9ed12d7d63 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x02f3891aefaa7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9689c0c079e743; op2val:0x5fa6fa9ed12d7d63;
op3val:0x7f502f3891aefaa7; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x6909f0cdef409 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x69f56211d9e5b and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xfe791564d69d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f96909f0cdef409; op2val:0x5fa69f56211d9e5b;
op3val:0x7f4fe791564d69d3; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x695a923fbea6d and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb19abcbfb877f and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x32064e2377169 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9695a923fbea6d; op2val:0x5fab19abcbfb877f;
op3val:0x7f532064e2377169; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7089e44f25db5 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xde080c818631b and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x5816874dec441 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97089e44f25db5; op2val:0x5f8de080c818631b;
op3val:0x7f35816874dec441; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x784a68ccbae49 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x9628b4f82971b and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x2a80ebeb138a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9784a68ccbae49; op2val:0x5f99628b4f82971b;
op3val:0x7f42a80ebeb138a2; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7be065394fb87 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x0f047e17234a4 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x922935c407a2a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97be065394fb87; op2val:0x5fa0f047e17234a4;
op3val:0x7f4922935c407a2a; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7d5bb4d050181 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xfc0f2a61491bd and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x7a6c492777bb6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97d5bb4d050181; op2val:0x5f9fc0f2a61491bd;
op3val:0x7f47a6c492777bb6; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8857812870f79 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x1aef39f9fe967 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xb19f06d2c03e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98857812870f79; op2val:0x5fa1aef39f9fe967;
op3val:0x7f4b19f06d2c03e3; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8b20864979939 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x675514445d7d5 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x154ef6b2d7a88 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98b20864979939; op2val:0x5f9675514445d7d5;
op3val:0x7f4154ef6b2d7a88; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x904d55100df07 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x16b5e65467710 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xb3d0693609092 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9904d55100df07; op2val:0x5fa16b5e65467710;
op3val:0x7f4b3d0693609092; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x99de5ce43d1d9 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7798e778703f2 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x2cacc458fb673 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f999de5ce43d1d9; op2val:0x5fa7798e778703f2;
op3val:0x7f52cacc458fb673; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d04dcb95faaf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x153f3df3c9356 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xbf4c4afa5ef72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d04dcb95faaf; op2val:0x5fa153f3df3c9356;
op3val:0x7f4bf4c4afa5ef72; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa7ae3286d0c8f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe0ca2c7a6ffb0 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x8dda9be69c706 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a7ae3286d0c8f; op2val:0x5fae0ca2c7a6ffb0;
op3val:0x7f58dda9be69c706; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa92ce67e64f49 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x28f1335426ef4 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xed2c8306d708a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a92ce67e64f49; op2val:0x5fa28f1335426ef4;
op3val:0x7f4ed2c8306d708a; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xac413f7bb0305 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x5508f2c02a8b7 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x1d40f0d871d63 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ac413f7bb0305; op2val:0x5f75508f2c02a8b7;
op3val:0x7f21d40f0d871d63; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xadd87f48bf1c7 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xa359c4048cb6b and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x601008dcdb187 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9add87f48bf1c7; op2val:0x5f9a359c4048cb6b;
op3val:0x7f4601008dcdb187; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae9b31f9a3121 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x63641e1ac54f8 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x2ae4cec7f513a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae9b31f9a3121; op2val:0x5fa63641e1ac54f8;
op3val:0x7f52ae4cec7f513a; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xb122b80686473 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xe43fe6a95bdeb and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x99a8e0ddae159 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9b122b80686473; op2val:0x5f9e43fe6a95bdeb;
op3val:0x7f499a8e0ddae159; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xbf83685979e3d and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x8381c48e230d5 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x52b33fc7f6343 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9bf83685979e3d; op2val:0x5fa8381c48e230d5;
op3val:0x7f552b33fc7f6343; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xd4b051bdbe619 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x3ff0fc641f811 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x24e0749e78913 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9d4b051bdbe619; op2val:0x5f93ff0fc641f811;
op3val:0x7f424e0749e78913; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xdb485bd8641e5 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xf867fde0ccba7 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0xd43bc3236bac8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9db485bd8641e5; op2val:0x5f7f867fde0ccba7;
op3val:0x7f2d43bc3236bac8; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xde9cd9749822d and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xd63950e417d4b and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xb78f8fb1f73cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9de9cd9749822d; op2val:0x5f8d63950e417d4b;
op3val:0x7f3b78f8fb1f73cd; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xe418564c20c07 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7009b07ae3d88 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x5bfaa750cac52 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9e418564c20c07; op2val:0x5fa7009b07ae3d88;
op3val:0x7f55bfaa750cac52; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xe8a675e7e0ea9 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x908ceac3ed748 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x7e4889b07707e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9e8a675e7e0ea9; op2val:0x5fa908ceac3ed748;
op3val:0x7f57e4889b07707e; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xeb199ad9ca61b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x32b0364d2b1f9 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x262b526f1cdda and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9eb199ad9ca61b; op2val:0x5fa32b0364d2b1f9;
op3val:0x7f5262b526f1cdda; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xecd9ba7f13b97 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7100c5c4a1c8c and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x6333a947a30e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ecd9ba7f13b97; op2val:0x5fa7100c5c4a1c8c;
op3val:0x7f56333a947a30e2; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x039904d15cfd4 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xb98a4751306d7 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xbfbed21b06e8a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa039904d15cfd4; op2val:0x5f9b98a4751306d7;
op3val:0x7f4bfbed21b06e8a; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x05cc7ce1db3f8 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x6e292e0f40648 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x767477653ee6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa05cc7ce1db3f8; op2val:0x5fa6e292e0f40648;
op3val:0x7f5767477653ee6b; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x08d5803cd8234 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xc5afd2cb1163d and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xd557afef8a8a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa08d5803cd8234; op2val:0x5f9c5afd2cb1163d;
op3val:0x7f4d557afef8a8a3; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x09bc54bda7ca2 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x27fa95459d3d1 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x333c22842ddce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa09bc54bda7ca2; op2val:0x5f927fa95459d3d1;
op3val:0x7f4333c22842ddce; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x49abc8377a2f1 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x56e7eebc82478 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x5fa49abc8377a2f1;
op3val:0x7f556e7eebc82478; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x18cbe0d5b0ab6 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x24a94d43e1fdc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x5fa18cbe0d5b0ab6;
op3val:0x7f524a94d43e1fdc; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0bde6858f4b91 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7b855d00f829f and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x8d1dd058b818c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0bde6858f4b91; op2val:0x5fa7b855d00f829f;
op3val:0x7f58d1dd058b818c; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xd796149975c91 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xede1ef595ec46 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x5f9d796149975c91;
op3val:0x7f4ede1ef595ec46; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0e21bf0ae6b53 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2301284b72ea3 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x331194d00649b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0e21bf0ae6b53; op2val:0x5fa2301284b72ea3;
op3val:0x7f5331194d00649b; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0f20e78d8f9d2 and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x2f9d33403a65f and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0x418e6f8623009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0f20e78d8f9d2; op2val:0x5f62f9d33403a65f;
op3val:0x7f1418e6f8623009; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x12848561a4bfb and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xd00f85557199f and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0xf1a0d67f4471b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa12848561a4bfb; op2val:0x5f7d00f85557199f;
op3val:0x7f2f1a0d67f4471b; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x13e8154135a8d and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xdc11b455bc9be and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x008b4e251fb0e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa13e8154135a8d; op2val:0x5fadc11b455bc9be;
op3val:0x7f6008b4e251fb0e; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x1615cea4dadaf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7ab1ecd91423c and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x9b5d797b33ff4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa1615cea4dadaf; op2val:0x5fa7ab1ecd91423c;
op3val:0x7f59b5d797b33ff4; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x1c6de58039298 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x6e9d2a2e46474 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x9753bc6082d7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa1c6de58039298; op2val:0x5fa6e9d2a2e46474;
op3val:0x7f59753bc6082d7e; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x1e577746908d8 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3d812c3e43b86 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x6322ca4228fc3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa1e577746908d8; op2val:0x5fa3d812c3e43b86;
op3val:0x7f56322ca4228fc3; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x21fe0e6f813e1 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x74b1d1a55566b and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xa62e9b1db62c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa21fe0e6f813e1; op2val:0x5f874b1d1a55566b;
op3val:0x7f3a62e9b1db62c9; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x25a6085117eb3 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x23cbe38fed7af and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x4eb59b2418049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa25a6085117eb3; op2val:0x5f923cbe38fed7af;
op3val:0x7f44eb59b2418049; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x291d166efb64f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x59dc19d58b8b0 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x9167a6368683b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa291d166efb64f; op2val:0x5fa59dc19d58b8b0;
op3val:0x7f59167a6368683b; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x2b230d0edf6b7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xcef388d58d8ec and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x0e7ae9dd326a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa2b230d0edf6b7; op2val:0x5facef388d58d8ec;
op3val:0x7f60e7ae9dd326a7; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x2b5705fef5d3c and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x1195ef71d8287 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x3fe71f06be4f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa2b5705fef5d3c; op2val:0x5f91195ef71d8287;
op3val:0x7f43fe71f06be4f4; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x2bd60860ffe3c and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x426763f7a72bf and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x799c4ebd356f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa2bd60860ffe3c; op2val:0x5f9426763f7a72bf;
op3val:0x7f4799c4ebd356f2; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x2f72b0267e3ba and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x47b4bc16b5bb5 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x8471ba982af07 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa2f72b0267e3ba; op2val:0x5f947b4bc16b5bb5;
op3val:0x7f48471ba982af07; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x31e2b61ae3886 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x1c1ef9d33c7a6 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x537c851914d19 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa31e2b61ae3886; op2val:0x5fa1c1ef9d33c7a6;
op3val:0x7f5537c851914d19; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x33e5fa8c30e93 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7423a2e8941c5 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0xbf950c743b585 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa33e5fa8c30e93; op2val:0x5fa7423a2e8941c5;
op3val:0x7f5bf950c743b585; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x353501de56e49 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x405e69652cae2 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x82f44b198de6f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa353501de56e49; op2val:0x5fa405e69652cae2;
op3val:0x7f582f44b198de6f; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x35787ca99e0af and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x90b3cf22a50bf and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0xe465a06e7fdd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa35787ca99e0af; op2val:0x5fa90b3cf22a50bf;
op3val:0x7f5e465a06e7fdd6; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x388f2590db1b3 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x3fe541b09258b and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x86924810093c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa388f2590db1b3; op2val:0x5f83fe541b09258b;
op3val:0x7f386924810093c6; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x3b49de25b5810 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x43ad2ac887783 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x8ea378e5ca7d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa3b49de25b5810; op2val:0x5fa43ad2ac887783;
op3val:0x7f58ea378e5ca7d2; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x3b61dbeccea83 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x81d06dbc53f22 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0xdb4ef272811f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa3b61dbeccea83; op2val:0x5fa81d06dbc53f22;
op3val:0x7f5db4ef272811f3; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x40d80b76bc040 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x34403635e831b and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x825467beda0b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa40d80b76bc040; op2val:0x5f934403635e831b;
op3val:0x7f4825467beda0b5; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4132da9546dfd and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xdd70c0ad2c58b and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x2b849ca398a7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4132da9546dfd; op2val:0x5f9dd70c0ad2c58b;
op3val:0x7f52b849ca398a7e; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x41d8cde4898c6 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb9a0c0999e25b and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x159c4a298dcd3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa41d8cde4898c6; op2val:0x5fab9a0c0999e25b;
op3val:0x7f6159c4a298dcd3; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4303490992183 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x6ece4c5eeb64f and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xced2ff6d32793 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4303490992183; op2val:0x5f86ece4c5eeb64f;
op3val:0x7f3ced2ff6d32793; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x446cb61fdc3b2 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xf4364961dc6b6 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x3cf48fd1d4a8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa446cb61fdc3b2; op2val:0x5faf4364961dc6b6;
op3val:0x7f63cf48fd1d4a8c; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x48ac00057963a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x9ccdd3e7a322c and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x08fe88e9fe34a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa48ac00057963a; op2val:0x5fa9ccdd3e7a322c;
op3val:0x7f608fe88e9fe34a; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x493122d9aad5a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xcb782eb8cdb42 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x276ad24c89b6a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa493122d9aad5a; op2val:0x5facb782eb8cdb42;
op3val:0x7f6276ad24c89b6a; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4abb0d7c973ba and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xc6e2320e480b1 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x25d5f9dbec10a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4abb0d7c973ba; op2val:0x5f9c6e2320e480b1;
op3val:0x7f525d5f9dbec10a; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4b3842d8efcbe and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2c588e1376ac3 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x8498817f97616 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4b3842d8efcbe; op2val:0x5fa2c588e1376ac3;
op3val:0x7f58498817f97616; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4c697b9f4c156 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x37f62582fdc3f and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x9513c340a6729 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4c697b9f4c156; op2val:0x5f937f62582fdc3f;
op3val:0x7f49513c340a6729; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4ceb420df408f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc51162e460b0e and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x2699740e9127b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4ceb420df408f; op2val:0x5fac51162e460b0e;
op3val:0x7f62699740e9127b; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4ee35c3c6e18a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x9cb33db44f779 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x0df03111661e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4ee35c3c6e18a; op2val:0x5fa9cb33db44f779;
op3val:0x7f60df03111661e3; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4f8cd41d123b3 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xf858063768107 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x4a8851140941e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4f8cd41d123b3; op2val:0x5f7f858063768107;
op3val:0x7f34a8851140941e; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x53179f7662fcf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc651e321ee763 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x2ce42e102627f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa53179f7662fcf; op2val:0x5fac651e321ee763;
op3val:0x7f62ce42e102627f; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x55caa186f3c8d and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x77ac231460806 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0xf591a5971e886 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa55caa186f3c8d; op2val:0x5fa77ac231460806;
op3val:0x7f5f591a5971e886; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57b12a6c8424b and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x4e072cb2d87d3 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xc072c7344c7f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57b12a6c8424b; op2val:0x5f84e072cb2d87d3;
op3val:0x7f3c072c7344c7f3; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5903a0fb21b3f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x08c04aebe0346 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x64cee5b4a821f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5903a0fb21b3f; op2val:0x5fa08c04aebe0346;
op3val:0x7f564cee5b4a821f; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x61dc1b626f27f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe82764f1e3e7a and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x5161042212e8d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa61dc1b626f27f; op2val:0x5fae82764f1e3e7a;
op3val:0x7f65161042212e8d; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6568f5c6359d5 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xa124c133921cf and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x2331a46b47334 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6568f5c6359d5; op2val:0x5f7a124c133921cf;
op3val:0x7f32331a46b47334; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6607c34459dce and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x132ac57683a83 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x80d628322eb7d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6607c34459dce; op2val:0x5fa132ac57683a83;
op3val:0x7f580d628322eb7d; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x692171f6bd238 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xa71e144c30555 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x2a7058ee1239c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa692171f6bd238; op2val:0x5f9a71e144c30555;
op3val:0x7f52a7058ee1239c; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6d796ca9f3e52 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xb0624ba20ab53 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x34a49dea26cc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6d796ca9f3e52; op2val:0x5f8b0624ba20ab53;
op3val:0x7f434a49dea26cc0; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6da2613270600 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd79a3e9b52e6a and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x50c906f6b82d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6da2613270600; op2val:0x5fad79a3e9b52e6a;
op3val:0x7f650c906f6b82d6; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6e9146c51e452 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7abc88bf9fef0 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x0f283c7f4c39a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6e9146c51e452; op2val:0x5fa7abc88bf9fef0;
op3val:0x7f60f283c7f4c39a; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6f74d931bfd19 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x59c795046ed37 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0xf052f26e407e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6f74d931bfd19; op2val:0x5fa59c795046ed37;
op3val:0x7f5f052f26e407e9; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6fd76e25872b5 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x52e5a4c6824cb and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xe6f467e65271f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6fd76e25872b5; op2val:0x5f952e5a4c6824cb;
op3val:0x7f4e6f467e65271f; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x753b59b321231 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x5ff3543c663d7 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x008f911123ef4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa753b59b321231; op2val:0x5f75ff3543c663d7;
op3val:0x7f3008f911123ef4; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7db5311d3a19f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xac63c4f037629 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x3f5fd869e0bf1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7db5311d3a19f; op2val:0x5faac63c4f037629;
op3val:0x7f63f5fd869e0bf1; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7f78548664fb5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xde7ef4a369968 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x66606cc001855 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7f78548664fb5; op2val:0x5fade7ef4a369968;
op3val:0x7f666606cc001855; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x822526bc71dac and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xec32f815aa7b3 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x733623f433abf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa822526bc71dac; op2val:0x5faec32f815aa7b3;
op3val:0x7f6733623f433abf; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x83a272ac3e0fc and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x9b17c3381c95b and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x373ce4a644a3d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa83a272ac3e0fc; op2val:0x5f99b17c3381c95b;
op3val:0x7f5373ce4a644a3d; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x83bfe21cd38bb and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x2ea078d4d9f6b and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xca5f6bafaa9b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa83bfe21cd38bb; op2val:0x5f92ea078d4d9f6b;
op3val:0x7f4ca5f6bafaa9b1; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x89ad7120f1311 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x6a9ba5700822b and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x16cf4e329327f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa89ad7120f1311; op2val:0x5f96a9ba5700822b;
op3val:0x7f516cf4e329327f; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x8a7945b061b5b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x52e97b0ef6836 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x051df20150c1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa8a7945b061b5b; op2val:0x5fa52e97b0ef6836;
op3val:0x7f6051df20150c1b; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x8c6489f748893 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x261d116b1d5ef and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xc76878ce26fa4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa8c6489f748893; op2val:0x5f8261d116b1d5ef;
op3val:0x7f3c76878ce26fa4; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x8ed6de3a3c8fa and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x745f44472c873 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x2212538486cdf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa8ed6de3a3c8fa; op2val:0x5fa745f44472c873;
op3val:0x7f62212538486cdf; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x90fd00d7a804d and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x25d75bdafbc97 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xcc42e653798e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa90fd00d7a804d; op2val:0x5f825d75bdafbc97;
op3val:0x7f3cc42e653798e9; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95b24345add6a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3f1e47bb1b181 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0xf9b91e64aa983 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95b24345add6a; op2val:0x5fa3f1e47bb1b181;
op3val:0x7f5f9b91e64aa983; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x98f56645aea7f and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x291e2bfc27bff and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0xdaa4e6acdd09b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa98f56645aea7f; op2val:0x5f6291e2bfc27bff;
op3val:0x7f1daa4e6acdd09b; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xa4501af2d40bf and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x5080240e5d5d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x5f9a4501af2d40bf;
op3val:0x7f55080240e5d5d9; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a10b6e4ec167 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xc74abdfb676c7 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x6ca5b71b646e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a10b6e4ec167; op2val:0x5f9c74abdfb676c7;
op3val:0x7f56ca5b71b646e7; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3ef03938bd059 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0xff0abae400eb2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x5fa3ef03938bd059;
op3val:0x7f5ff0abae400eb2; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc84b619a10026 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x6e79d0cab60c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x5fac84b619a10026;
op3val:0x7f66e79d0cab60c1; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9cb2b8c8391a5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xa5a1a13aed9e5 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x53db3d1970cc5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9cb2b8c8391a5; op2val:0x5faa5a1a13aed9e5;
op3val:0x7f653db3d1970cc5; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d05338d20148 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xdd0d05440db8f and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x80d3d9683c3bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d05338d20148; op2val:0x5fadd0d05440db8f;
op3val:0x7f680d3d9683c3bf; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa1a9bebef0303 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7f55a94838f42 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x38b45af571298 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa1a9bebef0303; op2val:0x5fa7f55a94838f42;
op3val:0x7f638b45af571298; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaaf8c2ba7ae5d and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x2ac405849fc2d and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xf24c8256385d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaaf8c2ba7ae5d; op2val:0x5f92ac405849fc2d;
op3val:0x7f4f24c8256385d1; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab523ab9b6599 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xa4aabca9c0dd9 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x5f17f3efb66b6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab523ab9b6599; op2val:0x5faa4aabca9c0dd9;
op3val:0x7f65f17f3efb66b6; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xac200a6c90fc3 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe7a274d23529b and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x97c051bc9836d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faac200a6c90fc3; op2val:0x5fae7a274d23529b;
op3val:0x7f697c051bc9836d; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xac44ace32d282 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xe7c922b2d54e3 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x9803906e1a6a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faac44ace32d282; op2val:0x5f9e7c922b2d54e3;
op3val:0x7f59803906e1a6a1; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb52ff510445c5 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xefcdd3e3e2557 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xa75b9e0eb29f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab52ff510445c5; op2val:0x5f8efcdd3e3e2557;
op3val:0x7f4a75b9e0eb29f2; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb537f328e16b0 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xfac7da9ef1ce9 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0xb0c2f53ef6741 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab537f328e16b0; op2val:0x5fafac7da9ef1ce9;
op3val:0x7f6b0c2f53ef6741; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb57a54ad9d312 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x60c7c307e31a7 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x2d6ec9e81a050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab57a54ad9d312; op2val:0x5f760c7c307e31a7;
op3val:0x7f32d6ec9e81a050; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb608b57d7bf4f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x5ab1b114777e7 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0x289be8280ff61 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab608b57d7bf4f; op2val:0x5f85ab1b114777e7;
op3val:0x7f4289be8280ff61; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb771f235b3b5a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x33c6c6f19f493 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x08296e8c5089e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab771f235b3b5a; op2val:0x5fa33c6c6f19f493;
op3val:0x7f608296e8c5089e; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb799d6825a449 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xccad57bbc2fe8 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x8b890b87f233e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab799d6825a449; op2val:0x5faccad57bbc2fe8;
op3val:0x7f68b890b87f233e; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xbaee3f82e1a4b and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x40f05297754b9 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x15a4ced2c1493 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fabaee3f82e1a4b; op2val:0x5f940f05297754b9;
op3val:0x7f515a4ced2c1493; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xbc4d8895bf826 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x415cc9ae1aebd and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x16df2113f34e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fabc4d8895bf826; op2val:0x5f9415cc9ae1aebd;
op3val:0x7f516df2113f34e7; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xbdb3961600dfc and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x63aa702c60f2f and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x359c62d701925 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fabdb3961600dfc; op2val:0x5fa63aa702c60f2f;
op3val:0x7f6359c62d701925; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc1facf9764ac8 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x8f2c40125fbb7 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0x5ed1d8a3d1de1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac1facf9764ac8; op2val:0x5f78f2c40125fbb7;
op3val:0x7f35ed1d8a3d1de1; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc2640341cc4c7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xdf7ad714d60e2 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0xa5c8a01428e1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac2640341cc4c7; op2val:0x5fadf7ad714d60e2;
op3val:0x7f6a5c8a01428e1b; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc28c8267d9ab4 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xf94cbf20a6254 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0xbca71faaef3df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac28c8267d9ab4; op2val:0x5faf94cbf20a6254;
op3val:0x7f6bca71faaef3df; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc63da361c24b5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd14940d00f35c and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x9ccbf82c5f5ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac63da361c24b5; op2val:0x5fad14940d00f35c;
op3val:0x7f69ccbf82c5f5ab; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xcb0ad9f88c3fd and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xcca22e1b83439 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x9cfd279ae9fd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5facb0ad9f88c3fd; op2val:0x5facca22e1b83439;
op3val:0x7f69cfd279ae9fd6; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xcb16f8f726369 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x82db2eb039623 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x5ae0d9e2e53de and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5facb16f8f726369; op2val:0x5f982db2eb039623;
op3val:0x7f55ae0d9e2e53de; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xcbb38ba3c7e34 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x94f30f37b3d53 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x6b95e78fc7cc3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5facbb38ba3c7e34; op2val:0x5fa94f30f37b3d53;
op3val:0x7f66b95e78fc7cc3; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xcc7fa2c262245 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x707b78d06c987 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x4b6aca4eafe86 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5facc7fa2c262245; op2val:0x5fa707b78d06c987;
op3val:0x7f64b6aca4eafe86; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xcea5e0336397b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x632d61a0c97c8 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x40f104bf8cf26 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5facea5e0336397b; op2val:0x5fa632d61a0c97c8;
op3val:0x7f640f104bf8cf26; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xdb9ec201d5923 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb67a2291e65ec and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x975244e8df7c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fadb9ec201d5923; op2val:0x5fab67a2291e65ec;
op3val:0x7f6975244e8df7c6; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xe1f070ecd84ee and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x7f346bd6d6bd3 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x68b4b4669d174 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fae1f070ecd84ee; op2val:0x5f97f346bd6d6bd3;
op3val:0x7f568b4b4669d174; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xe67b863f16ae2 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xdad12fade7910 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0xc3271e0248562 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fae67b863f16ae2; op2val:0x5fadad12fade7910;
op3val:0x7f6c3271e0248562; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xeb04ea6a14a83 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc8bad349c4595 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0xb6038c30e80b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faeb04ea6a14a83; op2val:0x5fac8bad349c4595;
op3val:0x7f6b6038c30e80b0; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xed366397a0657 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x012632d0614c9 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xef6d31f417a15 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faed366397a0657; op2val:0x5f9012632d0614c9;
op3val:0x7f4ef6d31f417a15; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xede45ea2ac4af and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xcf344fe49aeb9 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0xbed279d6f9107 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faede45ea2ac4af; op2val:0x5facf344fe49aeb9;
op3val:0x7f6bed279d6f9107; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf23474bb7cc16 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xa6bd446bfb2c7 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x9b596727a8e83 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf23474bb7cc16; op2val:0x5f9a6bd446bfb2c7;
op3val:0x7f59b596727a8e83; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf615e3d1dc570 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x02c6758f19d47 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0xfb874b185e621 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf615e3d1dc570; op2val:0x5fa02c6758f19d47;
op3val:0x7f5fb874b185e621; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x5f1 and fm1 == 0xda206db2e93ff and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0xc1325f19d9f5f and fs3 == 0 and fe3 == 0x7e9 and fm3 == 0x9ff8156f10cbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f1da206db2e93ff; op2val:0x5f6c1325f19d9f5f;
op3val:0x7e99ff8156f10cbe; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x5f4 and fm1 == 0xaeb807b25f33f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7d97bc07bb6a5 and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0x4103972e94f48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f4aeb807b25f33f; op2val:0x5fa7d97bc07bb6a5;
op3val:0x7f04103972e94f48; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x5f4 and fm1 == 0xaf7d1e8a8527f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xacc8bf5e07e70 and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0x695bc5ae24f19 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f4af7d1e8a8527f; op2val:0x5faacc8bf5e07e70;
op3val:0x7f0695bc5ae24f19; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x6b7004b70b43f and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0xf03ec3d1c1d8f and fs3 == 0 and fe3 == 0x7ed and fm3 == 0x60411221f3b39 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f56b7004b70b43f; op2val:0x5f6f03ec3d1c1d8f;
op3val:0x7ed60411221f3b39; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x7ae042250e45f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xeaff5366eca4b and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0x6b558fb5eca0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f57ae042250e45f; op2val:0x5f9eaff5366eca4b;
op3val:0x7f06b558fb5eca0f; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x5f5 and fm1 == 0xb913b7c55ffdf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2375c8ebc2475 and fs3 == 0 and fe3 == 0x7f0 and fm3 == 0xf62c5a15f4ba4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f5b913b7c55ffdf; op2val:0x5fa2375c8ebc2475;
op3val:0x7f0f62c5a15f4ba4; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x010befcbab41f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x943e82f8af8c3 and fs3 == 0 and fe3 == 0x7ef and fm3 == 0x95e59ad341313 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6010befcbab41f; op2val:0x5f8943e82f8af8c3;
op3val:0x7ef95e59ad341313; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58f8cdea3010f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x026995915c74a and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0x5c39071f2adb5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658f8cdea3010f; op2val:0x5fa026995915c74a;
op3val:0x7f15c39071f2adb5; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6a01466b8215f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3aa401f0be9eb and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0xbced7bef6a740 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66a01466b8215f; op2val:0x5fa3aa401f0be9eb;
op3val:0x7f1bced7bef6a740; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x18f86836ffdff and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x6e81fb8b9962a and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x9241ce3feaf05 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f718f86836ffdff; op2val:0x5fa6e81fb8b9962a;
op3val:0x7f29241ce3feaf05; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x25321d9b34d0f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xb315fb9cba7b1 and fs3 == 0 and fe3 == 0x7f1 and fm3 == 0xf24d5596cb9ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f725321d9b34d0f; op2val:0x5f9b315fb9cba7b1;
op3val:0x7f1f24d5596cb9ef; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6853812358258529279,64,FLEN)
NAN_BOXED(6875891784776261471,64,FLEN)
NAN_BOXED(6853812358258529279,64,FLEN)
NAN_BOXED(6866559518934168383,64,FLEN)
NAN_BOXED(6866559518934168383,64,FLEN)
NAN_BOXED(6866559518934168383,64,FLEN)
NAN_BOXED(6866573062803313279,64,FLEN)
NAN_BOXED(6866573062803313279,64,FLEN)
NAN_BOXED(9153167928888282905,64,FLEN)
NAN_BOXED(6869879493493830719,64,FLEN)
NAN_BOXED(6876719469190454671,64,FLEN)
NAN_BOXED(9139496965428427577,64,FLEN)
NAN_BOXED(6870151089355809887,64,FLEN)
NAN_BOXED(6890137947638516299,64,FLEN)
NAN_BOXED(6890137947638516299,64,FLEN)
NAN_BOXED(6871245341158932447,64,FLEN)
NAN_BOXED(6891131250501493877,64,FLEN)
NAN_BOXED(6891131250501493877,64,FLEN)
NAN_BOXED(6872511443837301791,64,FLEN)
NAN_BOXED(6884108169921624259,64,FLEN)
NAN_BOXED(6872511443837301791,64,FLEN)
NAN_BOXED(6874058241444348175,64,FLEN)
NAN_BOXED(6890549869943310154,64,FLEN)
NAN_BOXED(9157440442482208181,64,FLEN)
NAN_BOXED(6874357890710774111,64,FLEN)
NAN_BOXED(6891539047182494187,64,FLEN)
NAN_BOXED(9159141693205161792,64,FLEN)
NAN_BOXED(6877106982748802527,64,FLEN)
NAN_BOXED(6892833361158765083,64,FLEN)
NAN_BOXED(9162814917428805882,64,FLEN)
NAN_BOXED(6877435913865002495,64,FLEN)
NAN_BOXED(6877435913865002495,64,FLEN)
NAN_BOXED(6877435913865002495,64,FLEN)
NAN_BOXED(6877650985799601423,64,FLEN)
NAN_BOXED(6877650985799601423,64,FLEN)
NAN_BOXED(9160080665841809903,64,FLEN)
NAN_BOXED(6878250521768144807,64,FLEN)
NAN_BOXED(6883429794083502195,64,FLEN)
NAN_BOXED(9155035125495785765,64,FLEN)
NAN_BOXED(6879107837504449607,64,FLEN)
NAN_BOXED(6879648321071757607,64,FLEN)
NAN_BOXED(9152065623605726949,64,FLEN)
NAN_BOXED(6879400524994528855,64,FLEN)
NAN_BOXED(6892742609675950833,64,FLEN)
NAN_BOXED(9165489516637988763,64,FLEN)
NAN_BOXED(6879924564860128295,64,FLEN)
NAN_BOXED(6891297890604271531,64,FLEN)
NAN_BOXED(9164553940413503304,64,FLEN)
NAN_BOXED(6880356110275850175,64,FLEN)
NAN_BOXED(6874143375136946463,64,FLEN)
NAN_BOXED(9147679495375338169,64,FLEN)
NAN_BOXED(6881232426539983127,64,FLEN)
NAN_BOXED(6893605395298114534,64,FLEN)
NAN_BOXED(9167697195671699152,64,FLEN)
NAN_BOXED(6881473297982700543,64,FLEN)
NAN_BOXED(6877422973330076703,64,FLEN)
NAN_BOXED(9151726044016173120,64,FLEN)
NAN_BOXED(6881669174615967771,64,FLEN)
NAN_BOXED(6886759406200270245,64,FLEN)
NAN_BOXED(9161274506014209732,64,FLEN)
NAN_BOXED(6882090535469425603,64,FLEN)
NAN_BOXED(6887472542587087377,64,FLEN)
NAN_BOXED(9162573169267136002,64,FLEN)
NAN_BOXED(6882167424863865027,64,FLEN)
NAN_BOXED(6892978140844261486,64,FLEN)
NAN_BOXED(9168329175033800863,64,FLEN)
NAN_BOXED(6882273810565864087,64,FLEN)
NAN_BOXED(6888677516888945763,64,FLEN)
NAN_BOXED(9164228165811573499,64,FLEN)
NAN_BOXED(6882423159563613143,64,FLEN)
NAN_BOXED(6891722146697659108,64,FLEN)
NAN_BOXED(9167211821070455847,64,FLEN)
NAN_BOXED(6882617046189830507,64,FLEN)
NAN_BOXED(6859853316082863231,64,FLEN)
NAN_BOXED(9135503957284531176,64,FLEN)
NAN_BOXED(6882783594073617211,64,FLEN)
NAN_BOXED(6892226346760932334,64,FLEN)
NAN_BOXED(9168317351346129486,64,FLEN)
NAN_BOXED(6883168445376286831,64,FLEN)
NAN_BOXED(6893134576967242811,64,FLEN)
NAN_BOXED(9169711293833376969,64,FLEN)
NAN_BOXED(6883202509924352987,64,FLEN)
NAN_BOXED(6887993887272017217,64,FLEN)
NAN_BOXED(9164766184000760923,64,FLEN)
NAN_BOXED(6883451319862719459,64,FLEN)
NAN_BOXED(6870255605395078847,64,FLEN)
NAN_BOXED(9147158560715091936,64,FLEN)
NAN_BOXED(6883611025012282375,64,FLEN)
NAN_BOXED(6886518900490013545,64,FLEN)
NAN_BOXED(9163188915234163476,64,FLEN)
NAN_BOXED(6883701987660937459,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(9162988948334442947,64,FLEN)
NAN_BOXED(6883812181336575695,64,FLEN)
NAN_BOXED(6889006025901111081,64,FLEN)
NAN_BOXED(9166001112918479366,64,FLEN)
NAN_BOXED(6883871062586216747,64,FLEN)
NAN_BOXED(6893270633582970399,64,FLEN)
NAN_BOXED(9170371376628570182,64,FLEN)
NAN_BOXED(6883881085609898223,64,FLEN)
NAN_BOXED(6887422937967491605,64,FLEN)
NAN_BOXED(9164848533146701237,64,FLEN)
NAN_BOXED(6884033038377526527,64,FLEN)
NAN_BOXED(6884537004971461311,64,FLEN)
NAN_BOXED(9161708568635335829,64,FLEN)
NAN_BOXED(6884106325810519559,64,FLEN)
NAN_BOXED(6890819412602712286,64,FLEN)
NAN_BOXED(9167923854462664568,64,FLEN)
NAN_BOXED(6884213298570140259,64,FLEN)
NAN_BOXED(6882790863567818595,64,FLEN)
NAN_BOXED(9160460445609925903,64,FLEN)
NAN_BOXED(6884566146759987499,64,FLEN)
NAN_BOXED(6891273991126265763,64,FLEN)
NAN_BOXED(9169179571093447753,64,FLEN)
NAN_BOXED(6884814409456201959,64,FLEN)
NAN_BOXED(6894700102237039506,64,FLEN)
NAN_BOXED(9172373151533799894,64,FLEN)
NAN_BOXED(6885061568640581687,64,FLEN)
NAN_BOXED(6856202079610766847,64,FLEN)
NAN_BOXED(9134372066952139464,64,FLEN)
NAN_BOXED(6885104113463825555,64,FLEN)
NAN_BOXED(6881206186978691103,64,FLEN)
NAN_BOXED(9159157253258939209,64,FLEN)
NAN_BOXED(6885191969455789275,64,FLEN)
NAN_BOXED(6877397820592395455,64,FLEN)
NAN_BOXED(9155736238674192737,64,FLEN)
NAN_BOXED(6885439293625557567,64,FLEN)
NAN_BOXED(6894971801669884941,64,FLEN)
NAN_BOXED(9173231135145282687,64,FLEN)
NAN_BOXED(6885558356492919859,64,FLEN)
NAN_BOXED(6886924129325278093,64,FLEN)
NAN_BOXED(9165477288184547720,64,FLEN)
NAN_BOXED(6885570210241934599,64,FLEN)
NAN_BOXED(6890905811321982348,64,FLEN)
NAN_BOXED(9169491234090669503,64,FLEN)
NAN_BOXED(6885596531072605435,64,FLEN)
NAN_BOXED(6883748223666182455,64,FLEN)
NAN_BOXED(9162264332872419829,64,FLEN)
NAN_BOXED(6885720141753564543,64,FLEN)
NAN_BOXED(6883473615796692903,64,FLEN)
NAN_BOXED(9162091029752090641,64,FLEN)
NAN_BOXED(6885826687334848027,64,FLEN)
NAN_BOXED(6890830224336130731,64,FLEN)
NAN_BOXED(9169556715989610651,64,FLEN)
NAN_BOXED(6886006543107813567,64,FLEN)
NAN_BOXED(6893044424128597177,64,FLEN)
NAN_BOXED(9171870076659713842,64,FLEN)
NAN_BOXED(6886159168900271867,64,FLEN)
NAN_BOXED(6883740708263646691,64,FLEN)
NAN_BOXED(9162794737163692873,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(6888406585017467687,64,FLEN)
NAN_BOXED(9167665750717844173,64,FLEN)
NAN_BOXED(6886372900492316725,64,FLEN)
NAN_BOXED(6879673477244039919,64,FLEN)
NAN_BOXED(9159083326637063857,64,FLEN)
NAN_BOXED(6886385276021096327,64,FLEN)
NAN_BOXED(6887739594659515557,64,FLEN)
NAN_BOXED(9167089467612341261,64,FLEN)
NAN_BOXED(6886389284941360901,64,FLEN)
NAN_BOXED(6886338647863449777,64,FLEN)
NAN_BOXED(9165574170419861483,64,FLEN)
NAN_BOXED(6886449889188521421,64,FLEN)
NAN_BOXED(6891997518343369045,64,FLEN)
NAN_BOXED(9171412574515564262,64,FLEN)
NAN_BOXED(6886670564345626783,64,FLEN)
NAN_BOXED(6893301389938288410,64,FLEN)
NAN_BOXED(9173203166488057817,64,FLEN)
NAN_BOXED(6886794504660765003,64,FLEN)
NAN_BOXED(6892928491963623802,64,FLEN)
NAN_BOXED(9172965631558829288,64,FLEN)
NAN_BOXED(6886893805038626257,64,FLEN)
NAN_BOXED(6893750118821636665,64,FLEN)
NAN_BOXED(9173967373536399359,64,FLEN)
NAN_BOXED(6886902533800431885,64,FLEN)
NAN_BOXED(6891974667546153538,64,FLEN)
NAN_BOXED(9171987573161315239,64,FLEN)
NAN_BOXED(6886911827512157425,64,FLEN)
NAN_BOXED(6888294547312789243,64,FLEN)
NAN_BOXED(9168485800992316129,64,FLEN)
NAN_BOXED(6886927386298652861,64,FLEN)
NAN_BOXED(6872424360903885343,64,FLEN)
NAN_BOXED(9152196622486384430,64,FLEN)
NAN_BOXED(6887078750371893255,64,FLEN)
NAN_BOXED(6878039355159852695,64,FLEN)
NAN_BOXED(9158184564358500159,64,FLEN)
NAN_BOXED(6887084994917827997,64,FLEN)
NAN_BOXED(6885014401761781383,64,FLEN)
NAN_BOXED(9165292927667091913,64,FLEN)
NAN_BOXED(6887132804515142263,64,FLEN)
NAN_BOXED(6888150317444116397,64,FLEN)
NAN_BOXED(9168638790246193410,64,FLEN)
NAN_BOXED(6887190911449669389,64,FLEN)
NAN_BOXED(6887167196507864791,64,FLEN)
NAN_BOXED(9167482335024935914,64,FLEN)
NAN_BOXED(6887341342909043673,64,FLEN)
NAN_BOXED(6891083686590595223,64,FLEN)
NAN_BOXED(9171413751723146730,64,FLEN)
NAN_BOXED(6887512601885294675,64,FLEN)
NAN_BOXED(6893511681132321007,64,FLEN)
NAN_BOXED(9174340386604669251,64,FLEN)
NAN_BOXED(6887531486139308425,64,FLEN)
NAN_BOXED(6889358495708713829,64,FLEN)
NAN_BOXED(9170087166445892298,64,FLEN)
NAN_BOXED(6887649493425116333,64,FLEN)
NAN_BOXED(6886048413080003299,64,FLEN)
NAN_BOXED(9166531778745273238,64,FLEN)
NAN_BOXED(6887844141065692995,64,FLEN)
NAN_BOXED(6892471839758318947,64,FLEN)
NAN_BOXED(9173884360962538151,64,FLEN)
NAN_BOXED(6887851692899890185,64,FLEN)
NAN_BOXED(6892371472008715867,64,FLEN)
NAN_BOXED(9173805577381177811,64,FLEN)
NAN_BOXED(6887857233795476077,64,FLEN)
NAN_BOXED(6893631880273037183,64,FLEN)
NAN_BOXED(9174712483547935081,64,FLEN)
NAN_BOXED(6887983630941052341,64,FLEN)
NAN_BOXED(6885406249036833563,64,FLEN)
NAN_BOXED(9166374902219850817,64,FLEN)
NAN_BOXED(6888120005948059209,64,FLEN)
NAN_BOXED(6888645455513818907,64,FLEN)
NAN_BOXED(9170076572562045090,64,FLEN)
NAN_BOXED(6888183089467816839,64,FLEN)
NAN_BOXED(6890771621392561316,64,FLEN)
NAN_BOXED(9171900132419992106,64,FLEN)
NAN_BOXED(6888209155514237313,64,FLEN)
NAN_BOXED(6890438103301132733,64,FLEN)
NAN_BOXED(9171482529364409270,64,FLEN)
NAN_BOXED(6888402380816584569,64,FLEN)
NAN_BOXED(6890981266231912807,64,FLEN)
NAN_BOXED(9172453586484593635,64,FLEN)
NAN_BOXED(6888451379180312889,64,FLEN)
NAN_BOXED(6887821672007981013,64,FLEN)
NAN_BOXED(9169703703575100040,64,FLEN)
NAN_BOXED(6888542419273441031,64,FLEN)
NAN_BOXED(6890906958023784208,64,FLEN)
NAN_BOXED(9172492164521824402,64,FLEN)
NAN_BOXED(6888710715373507033,64,FLEN)
NAN_BOXED(6892611407511487474,64,FLEN)
NAN_BOXED(9174618369596307059,64,FLEN)
NAN_BOXED(6888766137586547375,64,FLEN)
NAN_BOXED(6890881211741016918,64,FLEN)
NAN_BOXED(9172694191667801970,64,FLEN)
NAN_BOXED(6888953696070995087,64,FLEN)
NAN_BOXED(6894461972824653744,64,FLEN)
NAN_BOXED(9176327961881200390,64,FLEN)
NAN_BOXED(6888979995220660041,64,FLEN)
NAN_BOXED(6891227692490977012,64,FLEN)
NAN_BOXED(9173501248248049802,64,FLEN)
NAN_BOXED(6889034170056246021,64,FLEN)
NAN_BOXED(6878492581727217847,64,FLEN)
NAN_BOXED(9160836278164856163,64,FLEN)
NAN_BOXED(6889062156009730503,64,FLEN)
NAN_BOXED(6888877525226277739,64,FLEN)
NAN_BOXED(9171018793077289351,64,FLEN)
NAN_BOXED(6889075535555211553,64,FLEN)
NAN_BOXED(6892255936324064504,64,FLEN)
NAN_BOXED(9174587036315636026,64,FLEN)
NAN_BOXED(6889120033040524403,64,FLEN)
NAN_BOXED(6890019239912390123,64,FLEN)
NAN_BOXED(9172032051025207641,64,FLEN)
NAN_BOXED(6889372968046534205,64,FLEN)
NAN_BOXED(6892820923823567061,64,FLEN)
NAN_BOXED(9175287318116787011,64,FLEN)
NAN_BOXED(6889745490261042713,64,FLEN)
NAN_BOXED(6887128698395424785,64,FLEN)
NAN_BOXED(9169977584491399443,64,FLEN)
NAN_BOXED(6889861491450069477,64,FLEN)
NAN_BOXED(6881366639389756327,64,FLEN)
NAN_BOXED(9164055292344187592,64,FLEN)
NAN_BOXED(6889920074162471469,64,FLEN)
NAN_BOXED(6885268897159806283,64,FLEN)
NAN_BOXED(9168054477203141581,64,FLEN)
NAN_BOXED(6890016521100332039,64,FLEN)
NAN_BOXED(6892478420562623880,64,FLEN)
NAN_BOXED(9175450554666363986,64,FLEN)
NAN_BOXED(6890096656495021737,64,FLEN)
NAN_BOXED(6893050388413339464,64,FLEN)
NAN_BOXED(9176054041158316158,64,FLEN)
NAN_BOXED(6890139753524274715,64,FLEN)
NAN_BOXED(6891399148383416825,64,FLEN)
NAN_BOXED(9174503921089105370,64,FLEN)
NAN_BOXED(6890170548344667031,64,FLEN)
NAN_BOXED(6892495399987846284,64,FLEN)
NAN_BOXED(9175577617506119906,64,FLEN)
NAN_BOXED(6890570721808207828,64,FLEN)
NAN_BOXED(6889267887099545303,64,FLEN)
NAN_BOXED(9172702061961178762,64,FLEN)
NAN_BOXED(6890609443103159288,64,FLEN)
NAN_BOXED(6892445400204314184,64,FLEN)
NAN_BOXED(9175916322416225899,64,FLEN)
NAN_BOXED(6890662839037297204,64,FLEN)
NAN_BOXED(6889481573393045053,64,FLEN)
NAN_BOXED(9173082002775648419,64,FLEN)
NAN_BOXED(6890678701560331426,64,FLEN)
NAN_BOXED(6886707145444283345,64,FLEN)
NAN_BOXED(9170230175248604622,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(6891803464233886449,64,FLEN)
NAN_BOXED(9175361307237950584,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(6890943652749314742,64,FLEN)
NAN_BOXED(9174477393983578076,64,FLEN)
NAN_BOXED(6890716227657747345,64,FLEN)
NAN_BOXED(6892680433416241823,64,FLEN)
NAN_BOXED(9176314987978391948,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(6889796463700171921,64,FLEN)
NAN_BOXED(9173513715550907462,64,FLEN)
NAN_BOXED(6890756039506815827,64,FLEN)
NAN_BOXED(6891123235924422307,64,FLEN)
NAN_BOXED(9174730850619647131,64,FLEN)
NAN_BOXED(6890773573847808466,64,FLEN)
NAN_BOXED(6873330666826868319,64,FLEN)
NAN_BOXED(9156971322639790089,64,FLEN)
NAN_BOXED(6890833196000889851,64,FLEN)
NAN_BOXED(6880656872275646879,64,FLEN)
NAN_BOXED(9164572411603207963,64,FLEN)
NAN_BOXED(6890857630035827341,64,FLEN)
NAN_BOXED(6894378927446018494,64,FLEN)
NAN_BOXED(9178345613565229838,64,FLEN)
NAN_BOXED(6890895956549414319,64,FLEN)
NAN_BOXED(6892665903500051004,64,FLEN)
NAN_BOXED(9176565653311799284,64,FLEN)
NAN_BOXED(6891007563115238040,64,FLEN)
NAN_BOXED(6892453370622403700,64,FLEN)
NAN_BOXED(9176494615330041214,64,FLEN)
NAN_BOXED(6891041206070479064,64,FLEN)
NAN_BOXED(6891589429914516358,64,FLEN)
NAN_BOXED(9175576458127642563,64,FLEN)
NAN_BOXED(6891105430638433249,64,FLEN)
NAN_BOXED(6883553143827027563,64,FLEN)
NAN_BOXED(9167748747316912841,64,FLEN)
NAN_BOXED(6891169750426156723,64,FLEN)
NAN_BOXED(6886633567900587951,64,FLEN)
NAN_BOXED(9170713511708426313,64,FLEN)
NAN_BOXED(6891230708391458383,64,FLEN)
NAN_BOXED(6892088259654498480,64,FLEN)
NAN_BOXED(9176390430653704251,64,FLEN)
NAN_BOXED(6891266302563710647,64,FLEN)
NAN_BOXED(6894148155766003948,64,FLEN)
NAN_BOXED(9178590777739257511,64,FLEN)
NAN_BOXED(6891269874080767292,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(9170453031574824180,64,FLEN)
NAN_BOXED(6891278602093985340,64,FLEN)
NAN_BOXED(6887172019469316799,64,FLEN)
NAN_BOXED(9171468237212440306,64,FLEN)
NAN_BOXED(6891342143926297530,64,FLEN)
NAN_BOXED(6887265295454133173,64,FLEN)
NAN_BOXED(9171658825273618183,64,FLEN)
NAN_BOXED(6891385026478225542,64,FLEN)
NAN_BOXED(6891002139732330406,64,FLEN)
NAN_BOXED(9175301149338717465,64,FLEN)
NAN_BOXED(6891420435381161619,64,FLEN)
NAN_BOXED(6892550572370117061,64,FLEN)
NAN_BOXED(9177202791033320837,64,FLEN)
NAN_BOXED(6891443458371055177,64,FLEN)
NAN_BOXED(6891639817706326754,64,FLEN)
NAN_BOXED(9176136212851252847,64,FLEN)
NAN_BOXED(6891448095538274479,64,FLEN)
NAN_BOXED(6893053061056057535,64,FLEN)
NAN_BOXED(9177850443104517590,64,FLEN)
NAN_BOXED(6891502429264523699,64,FLEN)
NAN_BOXED(6882624292736542091,64,FLEN)
NAN_BOXED(9167192647016682438,64,FLEN)
NAN_BOXED(6891550445007493136,64,FLEN)
NAN_BOXED(6891698006295869315,64,FLEN)
NAN_BOXED(9176341765099923410,64,FLEN)
NAN_BOXED(6891552093678398083,64,FLEN)
NAN_BOXED(6892791144984690466,64,FLEN)
NAN_BOXED(9177690554898059763,64,FLEN)
NAN_BOXED(6891648176267968576,64,FLEN)
NAN_BOXED(6886923036522349339,64,FLEN)
NAN_BOXED(9171621625797124277,64,FLEN)
NAN_BOXED(6891654416619040253,64,FLEN)
NAN_BOXED(6889899451667891595,64,FLEN)
NAN_BOXED(9174598017972013694,64,FLEN)
NAN_BOXED(6891665820645628102,64,FLEN)
NAN_BOXED(6893773031112041051,64,FLEN)
NAN_BOXED(9178716216634170579,64,FLEN)
NAN_BOXED(6891686332106088835,64,FLEN)
NAN_BOXED(6883449547799836239,64,FLEN)
NAN_BOXED(9168463731679766419,64,FLEN)
NAN_BOXED(6891711169120027570,64,FLEN)
NAN_BOXED(6894803653821843126,64,FLEN)
NAN_BOXED(9179408377902353036,64,FLEN)
NAN_BOXED(6891785887027795514,64,FLEN)
NAN_BOXED(6893265955275289132,64,FLEN)
NAN_BOXED(9178494269569098570,64,FLEN)
NAN_BOXED(6891795036067507546,64,FLEN)
NAN_BOXED(6894086902522895170,64,FLEN)
NAN_BOXED(9179029476553038698,64,FLEN)
NAN_BOXED(6891822105806599098,64,FLEN)
NAN_BOXED(6889502627124773041,64,FLEN)
NAN_BOXED(9174498056156922122,64,FLEN)
NAN_BOXED(6891830710065102014,64,FLEN)
NAN_BOXED(6891287571515009731,64,FLEN)
NAN_BOXED(9176165089633990166,64,FLEN)
NAN_BOXED(6891851684745888086,64,FLEN)
NAN_BOXED(6886988315542674495,64,FLEN)
NAN_BOXED(9171951435129710377,64,FLEN)
NAN_BOXED(6891860602824638607,64,FLEN)
NAN_BOXED(6893974285304859406,64,FLEN)
NAN_BOXED(9179015088884486779,64,FLEN)
NAN_BOXED(6891895244468969866,64,FLEN)
NAN_BOXED(6893264128249755513,64,FLEN)
NAN_BOXED(9178581244845646307,64,FLEN)
NAN_BOXED(6891906890239910835,64,FLEN)
NAN_BOXED(6881365542116425991,64,FLEN)
NAN_BOXED(9166136431079363614,64,FLEN)
NAN_BOXED(6891969204671885263,64,FLEN)
NAN_BOXED(6893996309961697123,64,FLEN)
NAN_BOXED(9179125777172685439,64,FLEN)
NAN_BOXED(6892016690384551053,64,FLEN)
NAN_BOXED(6892612729182750726,64,FLEN)
NAN_BOXED(9178152535309019270,64,FLEN)
NAN_BOXED(6892050124798181963,64,FLEN)
NAN_BOXED(6882872914168612819,64,FLEN)
NAN_BOXED(9168210828913330163,64,FLEN)
NAN_BOXED(6892073383806245695,64,FLEN)
NAN_BOXED(6890661381616304966,64,FLEN)
NAN_BOXED(9175605877431501343,64,FLEN)
NAN_BOXED(6892228997559022207,64,FLEN)
NAN_BOXED(6894591524195942010,64,FLEN)
NAN_BOXED(9179767674549382797,64,FLEN)
NAN_BOXED(6892291453467449813,64,FLEN)
NAN_BOXED(6879831498711179727,64,FLEN)
NAN_BOXED(9165444379600778036,64,FLEN)
NAN_BOXED(6892302366306311630,64,FLEN)
NAN_BOXED(6890844620635781763,64,FLEN)
NAN_BOXED(9176098957525445501,64,FLEN)
NAN_BOXED(6892356907746185784,64,FLEN)
NAN_BOXED(6888943792351806805,64,FLEN)
NAN_BOXED(9174579033220916124,64,FLEN)
NAN_BOXED(6892433322381622866,64,FLEN)
NAN_BOXED(6884603210177227603,64,FLEN)
NAN_BOXED(9170254947384716480,64,FLEN)
NAN_BOXED(6892436136802059776,64,FLEN)
NAN_BOXED(6894300349481692778,64,FLEN)
NAN_BOXED(9179757229948764886,64,FLEN)
NAN_BOXED(6892452553663046738,64,FLEN)
NAN_BOXED(6892666632544059120,64,FLEN)
NAN_BOXED(9178602688390415258,64,FLEN)
NAN_BOXED(6892468192289750297,64,FLEN)
NAN_BOXED(6892086849612213559,64,FLEN)
NAN_BOXED(9178060265678440425,64,FLEN)
NAN_BOXED(6892474966782538421,64,FLEN)
NAN_BOXED(6887462170496869579,64,FLEN)
NAN_BOXED(9173391839559231263,64,FLEN)
NAN_BOXED(6892569794171769393,64,FLEN)
NAN_BOXED(6878684610113725399,64,FLEN)
NAN_BOXED(9164835107525246708,64,FLEN)
NAN_BOXED(6892718904541684127,64,FLEN)
NAN_BOXED(6893540141969929769,64,FLEN)
NAN_BOXED(9179450934745238513,64,FLEN)
NAN_BOXED(6892749906531209141,64,FLEN)
NAN_BOXED(6894421619502389608,64,FLEN)
NAN_BOXED(9180137069819730005,64,FLEN)
NAN_BOXED(6892796967081418156,64,FLEN)
NAN_BOXED(6894662688351889331,64,FLEN)
NAN_BOXED(9180362862479227583,64,FLEN)
NAN_BOXED(6892823169586159868,64,FLEN)
NAN_BOXED(6888732252038089051,64,FLEN)
NAN_BOXED(9174804195732376125,64,FLEN)
NAN_BOXED(6892825192365373627,64,FLEN)
NAN_BOXED(6886824098359254891,64,FLEN)
NAN_BOXED(9172889020164385201,64,FLEN)
NAN_BOXED(6892929478202168081,64,FLEN)
NAN_BOXED(6887879297898414635,64,FLEN)
NAN_BOXED(9174233714969358975,64,FLEN)
NAN_BOXED(6892943485314669403,64,FLEN)
NAN_BOXED(6891966033803831350,64,FLEN)
NAN_BOXED(9178426059338877979,64,FLEN)
NAN_BOXED(6892977244905703571,64,FLEN)
NAN_BOXED(6882170731232351727,64,FLEN)
NAN_BOXED(9168333265975799716,64,FLEN)
NAN_BOXED(6893020285916924154,64,FLEN)
NAN_BOXED(6892554670136543347,64,FLEN)
NAN_BOXED(9178935434276269279,64,FLEN)
NAN_BOXED(6893058090921001037,64,FLEN)
NAN_BOXED(6882165940850506903,64,FLEN)
NAN_BOXED(9168418644965169385,64,FLEN)
NAN_BOXED(6893140915722575210,64,FLEN)
NAN_BOXED(6891617818437071233,64,FLEN)
NAN_BOXED(9178225616540576131,64,FLEN)
NAN_BOXED(6893198305880894079,64,FLEN)
NAN_BOXED(6873216384386628607,64,FLEN)
NAN_BOXED(9159664470917501083,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(6888894453552857279,64,FLEN)
NAN_BOXED(9175248621609014745,64,FLEN)
NAN_BOXED(6893217775134622055,64,FLEN)
NAN_BOXED(6889509811511523015,64,FLEN)
NAN_BOXED(9175743784912570087,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(6891614653446344793,64,FLEN)
NAN_BOXED(9178319185757867698,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(6894031047246282790,64,FLEN)
NAN_BOXED(9180279552149774529,64,FLEN)
NAN_BOXED(6893264092568719781,64,FLEN)
NAN_BOXED(6893421247689841125,64,FLEN)
NAN_BOXED(9179811257989401797,64,FLEN)
NAN_BOXED(6893269760521404744,64,FLEN)
NAN_BOXED(6894396197759409039,64,FLEN)
NAN_BOXED(9180602398564139967,64,FLEN)
NAN_BOXED(6893351436624528131,64,FLEN)
NAN_BOXED(6892747524101345090,64,FLEN)
NAN_BOXED(9179333596921926296,64,FLEN)
NAN_BOXED(6893515196206657117,64,FLEN)
NAN_BOXED(6886756172562037805,64,FLEN)
NAN_BOXED(9173591408016328145,64,FLEN)
NAN_BOXED(6893521344451536281,64,FLEN)
NAN_BOXED(6893404281343053273,64,FLEN)
NAN_BOXED(9180008944284427958,64,FLEN)
NAN_BOXED(6893535487697948611,64,FLEN)
NAN_BOXED(6894582388767281819,64,FLEN)
NAN_BOXED(9181005676754338669,64,FLEN)
NAN_BOXED(6893538005210026626,64,FLEN)
NAN_BOXED(6890081447154898147,64,FLEN)
NAN_BOXED(9176506698161039009,64,FLEN)
NAN_BOXED(6893694911150048709,64,FLEN)
NAN_BOXED(6885718907458299223,64,FLEN)
NAN_BOXED(9172273032296344050,64,FLEN)
NAN_BOXED(6893695460394800816,64,FLEN)
NAN_BOXED(6894919210249428201,64,FLEN)
NAN_BOXED(9181445662736082753,64,FLEN)
NAN_BOXED(6893700022057685778,64,FLEN)
NAN_BOXED(6878699208384065959,64,FLEN)
NAN_BOXED(9165624503412301904,64,FLEN)
NAN_BOXED(6893709806211153743,64,FLEN)
NAN_BOXED(6883095738248034279,64,FLEN)
NAN_BOXED(9170043242606034785,64,FLEN)
NAN_BOXED(6893734630241549146,64,FLEN)
NAN_BOXED(6891418291225097363,64,FLEN)
NAN_BOXED(9178479625243003038,64,FLEN)
NAN_BOXED(6893737371584799817,64,FLEN)
NAN_BOXED(6894108147850162152,64,FLEN)
NAN_BOXED(9180790772104897342,64,FLEN)
NAN_BOXED(6893795948765256267,64,FLEN)
NAN_BOXED(6887146245001270457,64,FLEN)
NAN_BOXED(9174213202373514387,64,FLEN)
NAN_BOXED(6893820088917162022,64,FLEN)
NAN_BOXED(6887153698672324285,64,FLEN)
NAN_BOXED(9174234802369279207,64,FLEN)
NAN_BOXED(6893844694113979900,64,FLEN)
NAN_BOXED(6892260768717606703,64,FLEN)
NAN_BOXED(9179279173211920677,64,FLEN)
NAN_BOXED(6893919957377501896,64,FLEN)
NAN_BOXED(6879515354455210935,64,FLEN)
NAN_BOXED(9166493327711608289,64,FLEN)
NAN_BOXED(6893927186791449799,64,FLEN)
NAN_BOXED(6894438928876396770,64,FLEN)
NAN_BOXED(9181252538144558619,64,FLEN)
NAN_BOXED(6893929969701722804,64,FLEN)
NAN_BOXED(6894893158187557460,64,FLEN)
NAN_BOXED(9181654856210772959,64,FLEN)
NAN_BOXED(6893994918459221173,64,FLEN)
NAN_BOXED(6894189230679978844,64,FLEN)
NAN_BOXED(9181094438276298155,64,FLEN)
NAN_BOXED(6894079389349757949,64,FLEN)
NAN_BOXED(6894107380762031161,64,FLEN)
NAN_BOXED(9181097818263035862,64,FLEN)
NAN_BOXED(6894080222303511401,64,FLEN)
NAN_BOXED(6888305876533483043,64,FLEN)
NAN_BOXED(9175431189348897758,64,FLEN)
NAN_BOXED(6894090981914476084,64,FLEN)
NAN_BOXED(6893127776329219411,64,FLEN)
NAN_BOXED(9180228705849212099,64,FLEN)
NAN_BOXED(6894105006893834821,64,FLEN)
NAN_BOXED(6892486239640275335,64,FLEN)
NAN_BOXED(9179662793105407622,64,FLEN)
NAN_BOXED(6894142819099097467,64,FLEN)
NAN_BOXED(6892252174878545864,64,FLEN)
NAN_BOXED(9179478503156404006,64,FLEN)
NAN_BOXED(6894371028376312099,64,FLEN)
NAN_BOXED(6893717600792897004,64,FLEN)
NAN_BOXED(9180998114168666054,64,FLEN)
NAN_BOXED(6894482194724390126,64,FLEN)
NAN_BOXED(6888241640237788115,64,FLEN)
NAN_BOXED(9175674446234112372,64,FLEN)
NAN_BOXED(6894562121199217378,64,FLEN)
NAN_BOXED(6894356901603997968,64,FLEN)
NAN_BOXED(9181769204974781794,64,FLEN)
NAN_BOXED(6894641931400333955,64,FLEN)
NAN_BOXED(6894038705625646485,64,FLEN)
NAN_BOXED(9181538062231830704,64,FLEN)
NAN_BOXED(6894680515555231319,64,FLEN)
NAN_BOXED(6886024047415923913,64,FLEN)
NAN_BOXED(9173540877623196181,64,FLEN)
NAN_BOXED(6894692471413589167,64,FLEN)
NAN_BOXED(6894152607246954169,64,FLEN)
NAN_BOXED(9181693019725730055,64,FLEN)
NAN_BOXED(6894768343647505430,64,FLEN)
NAN_BOXED(6888937139480801991,64,FLEN)
NAN_BOXED(9176565373514452611,64,FLEN)
NAN_BOXED(6894836611907700080,64,FLEN)
NAN_BOXED(6890556252262341959,64,FLEN)
NAN_BOXED(9178257376938419745,64,FLEN)
NAN_BOXED(6853812358258529279,64,FLEN)
NAN_BOXED(6875891784776261471,64,FLEN)
NAN_BOXED(9122603451190152382,64,FLEN)
NAN_BOXED(6866559518934168383,64,FLEN)
NAN_BOXED(6892716880247371429,64,FLEN)
NAN_BOXED(9152458181650763592,64,FLEN)
NAN_BOXED(6866573062803313279,64,FLEN)
NAN_BOXED(6893547081141616240,64,FLEN)
NAN_BOXED(9153167928888282905,64,FLEN)
NAN_BOXED(6869879493493830719,64,FLEN)
NAN_BOXED(6876719469190454671,64,FLEN)
NAN_BOXED(9139496965428427577,64,FLEN)
NAN_BOXED(6870151089355809887,64,FLEN)
NAN_BOXED(6890137947638516299,64,FLEN)
NAN_BOXED(9153202686456154639,64,FLEN)
NAN_BOXED(6871245341158932447,64,FLEN)
NAN_BOXED(6891131250501493877,64,FLEN)
NAN_BOXED(9155645168422964132,64,FLEN)
NAN_BOXED(6872511443837301791,64,FLEN)
NAN_BOXED(6884108169921624259,64,FLEN)
NAN_BOXED(9149447857230844691,64,FLEN)
NAN_BOXED(6874058241444348175,64,FLEN)
NAN_BOXED(6890549869943310154,64,FLEN)
NAN_BOXED(9157440442482208181,64,FLEN)
NAN_BOXED(6874357890710774111,64,FLEN)
NAN_BOXED(6891539047182494187,64,FLEN)
NAN_BOXED(9159141693205161792,64,FLEN)
NAN_BOXED(6877435913865002495,64,FLEN)
NAN_BOXED(6892451502677923370,64,FLEN)
NAN_BOXED(9162894623364787973,64,FLEN)
NAN_BOXED(6877650985799601423,64,FLEN)
NAN_BOXED(6889154342202091441,64,FLEN)
NAN_BOXED(9160080665841809903,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 166*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
