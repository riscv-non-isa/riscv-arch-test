
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b18 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b18)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f4, rs2==f4, rs3==f6, rd==f14,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0x140b6c88868ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f4; op2:f4; op3:f6; dest:f14; op1val:0x7f6140b6c88868ff; op2val:0x7f6140b6c88868ff;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f14, f4, f4, f6, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f19, rs2==f14, rs3==f19, rd==f0,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x76274c472f77f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f19; op2:f14; op3:f19; dest:f0; op1val:0x7f776274c472f77f; op2val:0x8000;
op3val:0x7f776274c472f77f; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f0, f19, f14, f19, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rs3 == rd, rs1==f25, rs2==f25, rs3==f25, rd==f25,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x15e198f8b2b7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f25; op2:f25; op3:f25; dest:f25; op1val:0x7f815e198f8b2b7f; op2val:0x7f815e198f8b2b7f;
op3val:0x7f815e198f8b2b7f; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f25, f25, f25, f25, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==f28, rs2==f2, rs3==f28, rd==f28,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x95b999d19ee3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f28; op2:f2; op3:f28; dest:f28; op1val:0x7f895b999d19ee3f; op2val:0x0;
op3val:0x7f895b999d19ee3f; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f28, f28, f2, f28, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==f31, rs2==f31, rs3==f31, rd==f23,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xdd19ec10faa3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f31; op2:f31; op3:f31; dest:f23; op1val:0x7f8dd19ec10faa3f; op2val:0x7f8dd19ec10faa3f;
op3val:0x7f8dd19ec10faa3f; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f23, f31, f31, f31, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f11, rs2==f26, rs3==f27, rd==f26,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x1175939fbdd3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f11; op2:f26; op3:f27; dest:f26; op1val:0x7f91175939fbdd3f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f26, f11, f26, f27, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f9, rs2==f9, rs3==f26, rd==f9,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x24b13b2db3adf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f9; op2:f9; op3:f26; dest:f9; op1val:0x7f924b13b2db3adf; op2val:0x7f924b13b2db3adf;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f9, f9, f9, f26, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f2, rs2==f30, rs3==f30, rd==f13,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x286f79417703f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f2; op2:f30; op3:f30; dest:f13; op1val:0x7f9286f79417703f; op2val:0x8000;
op3val:0x8000; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f13, f2, f30, f30, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f1, rs2==f15, rs3==f17, rd==f17,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x551579cd90e3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f1; op2:f15; op3:f17; dest:f17; op1val:0x7f9551579cd90e3f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f17, f1, f15, f17, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f5, rs2==f29, rs3==f2, rd==f5,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x60165b545623f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f5; op2:f29; op3:f2; dest:f5; op1val:0x7f960165b545623f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f5, f5, f29, f2, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f3, rs2==f1, rs3==f5, rd==f27,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x833a9a7efc6ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f3; op2:f1; op3:f5; dest:f27; op1val:0x7f9833a9a7efc6ff; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f27, f3, f1, f5, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rd == rs2 == rs3 != rs1, rs1==f26, rs2==f22, rs3==f22, rd==f22,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f26; op2:f22; op3:f22; dest:f22; op1val:0x7f9a0e7ad32453df; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f22, f26, f22, f22, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f18, rs2==f5, rs3==f21, rd==f8,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xca57966fc21ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f18; op2:f5; op3:f21; dest:f8; op1val:0x7f9ca57966fc21ff; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f8, f18, f5, f21, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f8, rs2==f6, rs3==f16, rd==f18,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd071ef258365f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f8; op2:f6; op3:f16; dest:f18; op1val:0x7f9d071ef258365f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f18, f8, f6, f16, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f17, rs2==f28, rs3==f11, rd==f6,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f17; op2:f28; op3:f11; dest:f6; op1val:0x7f9dbcde43895c3f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f6, f17, f28, f11, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f12, rs2==f21, rs3==f13, rd==f1,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe48e63c12ae9f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f12; op2:f21; op3:f13; dest:f1; op1val:0x7f9e48e63c12ae9f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f1, f12, f21, f13, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f27, rs2==f3, rs3==f1, rd==f21,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xf52fb02db735f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f27; op2:f3; op3:f1; dest:f21; op1val:0x7f9f52fb02db735f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f21, f27, f3, f1, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f0, rs2==f11, rs3==f18, rd==f3,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f0; op2:f11; op3:f18; dest:f3; op1val:0x7fa1ad5e9ebc09df; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f3, f0, f11, f18, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f13, rs2==f27, rs3==f29, rd==f20,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x369cba5cc20af and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f13; op2:f27; op3:f29; dest:f20; op1val:0x7fa369cba5cc20af; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f20, f13, f27, f29, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f20, rs2==f19, rs3==f23, rd==f2,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x409de9a05b77f and fs2 == 1 and fe2 == 0x403 and fm2 == 0x98cfdc5a142d2 and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f20; op2:f19; op3:f23; dest:f2; op1val:0x7fa409de9a05b77f; op2val:0xc0398cfdc5a142d2;
op3val:0xffeffffffffffffe; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f2, f20, f19, f23, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f16, rs2==f23, rs3==f7, rd==f29,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x47df70c06ea5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f16; op2:f23; op3:f7; dest:f29; op1val:0x7fa47df70c06ea5f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f29, f16, f23, f7, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f24, rs2==f18, rs3==f20, rd==f16,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x643f753bef22f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f24; op2:f18; op3:f20; dest:f16; op1val:0x7fa643f753bef22f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f16, f24, f18, f20, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f30, rs2==f10, rs3==f8, rd==f4,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xcbc315eca5f3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f10; op3:f8; dest:f4; op1val:0x7facbc315eca5f3f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f4, f30, f10, f8, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f21, rs2==f16, rs3==f3, rd==f30,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe19152f3266af and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f21; op2:f16; op3:f3; dest:f30; op1val:0x7fae19152f3266af; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f30, f21, f16, f3, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f23, rs2==f0, rs3==f12, rd==f10,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x1cbc2855beaaf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f23; op2:f0; op3:f12; dest:f10; op1val:0x7fb1cbc2855beaaf; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f10, f23, f0, f12, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f15, rs2==f8, rs3==f4, rd==f24,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2bccdcc2ad897 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f15; op2:f8; op3:f4; dest:f24; op1val:0x7fb2bccdcc2ad897; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f24, f15, f8, f4, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f29, rs2==f17, rs3==f15, rd==f11,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x4ed205e78cd0f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f29; op2:f17; op3:f15; dest:f11; op1val:0x7fb4ed205e78cd0f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f11, f29, f17, f15, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f10, rs2==f24, rs3==f9, rd==f7,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x54ed51bc74baf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f10; op2:f24; op3:f9; dest:f7; op1val:0x7fb54ed51bc74baf; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f7, f10, f24, f9, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f22, rs2==f20, rs3==f14, rd==f12,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5ad9a8441acdf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f22; op2:f20; op3:f14; dest:f12; op1val:0x7fb5ad9a8441acdf; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f12, f22, f20, f14, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f7, rs2==f13, rs3==f0, rd==f15,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7788b8d3bac8f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f7; op2:f13; op3:f0; dest:f15; op1val:0x7fb7788b8d3bac8f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f15, f7, f13, f0, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f14, rs2==f7, rs3==f24, rd==f31,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8072e8f9c858f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f14; op2:f7; op3:f24; dest:f31; op1val:0x7fb8072e8f9c858f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f14, f7, f24, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f6, rs2==f12, rs3==f10, rd==f19,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xab1c42a43630f and fs2 == 1 and fe2 == 0x402 and fm2 == 0x32e17f5ec6ab7 and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f6; op2:f12; op3:f10; dest:f19; op1val:0x7fbab1c42a43630f; op2val:0xc0232e17f5ec6ab7;
op3val:0xffefffffffffffff; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f19, f6, f12, f10, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xabb8bbe03b7df and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbabb8bbe03b7df; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbd7ce681c543f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbbd7ce681c543f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc07725983617f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc07725983617f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd775b7a6f9327 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd775b7a6f9327; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd95388e6dd7e7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd95388e6dd7e7; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbef2a4f7c7db7f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x132d8f91b7583 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc132d8f91b7583; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x153045947810b and fs2 == 1 and fe2 == 0x401 and fm2 == 0xd8dcbac514a17 and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc153045947810b; op2val:0xc01d8dcbac514a17;
op3val:0xffefffffffffffff; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bf422090b207 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2bf422090b207; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x46e9bf4155d7b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc46e9bf4155d7b; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x482567721754b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc482567721754b; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x56cd20ae4ecf3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc56cd20ae4ecf3; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x585c60a81aa3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc585c60a81aa3f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5b889a2aa32ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5b889a2aa32ff; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5ce00a2b28feb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5ce00a2b28feb; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5f445ad3f21db and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5f445ad3f21db; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6251b45dfbd3b; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6aedbc8cfe5cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6aedbc8cfe5cb; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7cbc6ca11d457 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7cbc6ca11d457; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x811ac04227ddf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc811ac04227ddf; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8d8e137e0ab2b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8d8e137e0ab2b; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x994568f0e642b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc994568f0e642b; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b58d2db8786f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b58d2db8786f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa5666b92c9353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca5666b92c9353; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xac37e5f72f2b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcac37e5f72f2b7; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xb428ab449c4c7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcb428ab449c4c7; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xb448f7443baab and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcb448f7443baab; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcbb9876f8130c3; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc01045c2cd787; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc3c9ccfa1b1bb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc3c9ccfa1b1bb; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc60647c381e87 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc60647c381e87; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc91ade861e02b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc91ade861e02b; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xca2a9a90e32e7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcca2a9a90e32e7; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd481499755d4b; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd63b29a2a7adf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd63b29a2a7adf; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd8d08ead45f1f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd8d08ead45f1f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdb7f28678a5a7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcdb7f28678a5a7; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcdd5b61587fd27; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe08b2a10b8fdf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce08b2a10b8fdf; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xeac4e5c917527 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fceac4e5c917527; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xee6dc228b09a7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcee6dc228b09a7; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf121a7be6521b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf121a7be6521b; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xff18e844c5b43 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcff18e844c5b43; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x026a2990b0a7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd026a2990b0a7f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0530d08f17f5b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0530d08f17f5b; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x056bcd04279ed and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd056bcd04279ed; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x112000aeb4c63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd112000aeb4c63; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x13bdffd461269 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd13bdffd461269; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1776e1d2f84f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1776e1d2f84f1; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1bd5cc8dca1e5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1bd5cc8dca1e5; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd28bc82f697c4d; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2a34571e1ab07 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb78990bc461ec and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2a34571e1ab07; op2val:0xc00b78990bc461ec;
op3val:0xffeffffffffffffe; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2f2dacc08696f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2f2dacc08696f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x31c5c2101663f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd31c5c2101663f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd36a63c245f557; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x39bd6a090d93f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd39bd6a090d93f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3dcff67566087 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3dcff67566087; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x48f4a954751bd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd48f4a954751bd; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x49bad4bf8d1a9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd49bad4bf8d1a9; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4d27694e5a38b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4d27694e5a38b; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4f9b4267d3677 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4f9b4267d3677; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54ae0bf2a236d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54ae0bf2a236d; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5b3be3b6f1597 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5b3be3b6f1597; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c73bb8e94b2b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7827af82b2731 and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c73bb8e94b2b; op2val:0xc007827af82b2731;
op3val:0xffefffffffffffff; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5d14398eae23f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5d14398eae23f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x601a2a750c857 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd601a2a750c857; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60b0632528095; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6262400033edb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6262400033edb; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6341d98cacdcd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6341d98cacdcd; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6d5a59350bdcb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6d5a59350bdcb; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x78f14dab5f7cf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5bb95a8f2106a and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd78f14dab5f7cf; op2val:0xc005bb95a8f2106a;
op3val:0xffeffffffffffffe; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7fb2260b115e9; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x830a4319a6f37 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd830a4319a6f37; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x831cd209cfb87 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd831cd209cfb87; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x865a6757deb3d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd865a6757deb3d; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8bd5a02bf2a55 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8bd5a02bf2a55; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x92b176af6d495 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd92b176af6d495; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x930bcbd2d6035 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd930bcbd2d6035; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x946024d663351 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd946024d663351; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa841edd51650b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda841edd51650b; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaa290fc84ffa3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdaa290fc84ffa3; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaf054e65e9fad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdaf054e65e9fad; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaf1e2f94bd10d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdaf1e2f94bd10d; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb03cd140fce0d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb03cd140fce0d; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb03f53dce8bcd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb03f53dce8bcd; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb4511d7990669 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb4511d7990669; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbb274a4dc0871 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdbb274a4dc0871; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbb5746cbb34cd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdbb5746cbb34cd; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc0659af8369fd; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc17f2854f603f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc17f2854f603f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc81394a2171e9; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcc4762bc72881 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcc4762bc72881; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd19d4dd9efa23 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd19d4dd9efa23; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd4c176f2c9031 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd4c176f2c9031; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd5246f4cc80df and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd5246f4cc80df; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd626a0f472da1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd626a0f472da1; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd6a24a79e3255 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd6a24a79e3255; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe5243a8e9dcc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde5243a8e9dcc7; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf0206ee24c395 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf0206ee24c395; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf09035681be6d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf09035681be6d; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf57237ddcb451 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf57237ddcb451; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfb5355e167379 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfb5355e167379; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfbb63446c41a3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfbb63446c41a3; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xffcb8d02339d9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdffcb8d02339d9; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0125698e86242 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0125698e86242; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x026ab89a75256 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe026ab89a75256; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02b48f992cb49; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe04507a06e8587; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x048b19826524f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe048b19826524f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x052debfe82e13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe052debfe82e13; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x070d1456013e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe070d1456013e3; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x087fbb5cdaa50 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe087fbb5cdaa50; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x09903331c0e00 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe09903331c0e00; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ab870b5c1c40; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e04cdbcecdfb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e04cdbcecdfb; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x13b37e2291279 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe13b37e2291279; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1448bcfae2b22 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1448bcfae2b22; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1534040096d03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1534040096d03; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x16e333b543801 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe16e333b543801; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1892f8e6f8f3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1892f8e6f8f3a; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18fc26b87eae6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe18fc26b87eae6; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1a3304314bd3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd07752445d36b and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1a3304314bd3d; op2val:0xbffd07752445d36b;
op3val:0xffeffffffffffffe; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1ce794bb05231 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1ce794bb05231; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f6a4c4d26ab9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1f6a4c4d26ab9; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x20ff2ce231e02 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe20ff2ce231e02; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x23d6f3e37b4f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe23d6f3e37b4f1; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x23fbd09d7e9b6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe23fbd09d7e9b6; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x243d79e337b38 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe243d79e337b38; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26d548336aab0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe26d548336aab0; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x27d4b8969c0b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe27d4b8969c0b2; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2b3e748b91f6f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2b3e748b91f6f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2cd75d7e4d070 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2cd75d7e4d070; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2d91b4369c450 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2d91b4369c450; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2fb5c72500d57 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2fb5c72500d57; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x334e9260607a0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaa84a9dcfceb3 and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe334e9260607a0; op2val:0xbffaa84a9dcfceb3;
op3val:0xffeffffffffffffe; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x353d32b1e3fb0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa7da732b617c8 and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe353d32b1e3fb0; op2val:0xbffa7da732b617c8;
op3val:0xffeffffffffffffe; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3617941ba03e8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3617941ba03e8; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39935e95315b1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe39935e95315b1; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3af9a9e598175 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3af9a9e598175; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f3a0272551ac and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f3a0272551ac; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3fe60f0bd0a72 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3fe60f0bd0a72; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x430b991b487d2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe430b991b487d2; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe48dace8666677; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c090881f6fe3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4c090881f6fe3; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d9d98184b9d9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d9d98184b9d9; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x54f86298f6c06 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe54f86298f6c06; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x57324a8c267f6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe57324a8c267f6; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x574031c0ee5b5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe574031c0ee5b5; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x58a25604824f3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe58a25604824f3; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x592a957961553 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe592a957961553; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x59522cc62b803 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe59522cc62b803; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x595634ef3eec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe595634ef3eec0; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5b39db9b4e7ac and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5b39db9b4e7ac; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5fcce7e232769 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5fcce7e232769; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe67f4f571a752e; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6821b2764a929 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6821b2764a929; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6875b8a7de9f5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6875b8a7de9f5; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68c211a0675f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68c211a0675f1; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6c2153e00d1a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6c2153e00d1a1; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6c5583d2d8f82 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6c5583d2d8f82; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x700b33fd6ee45 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe700b33fd6ee45; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7166677e49c3c; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x716db1f3511f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe716db1f3511f7; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x73702c4295ebb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe73702c4295ebb; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7b234360cccc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7b234360cccc7; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7cd8dfca2011d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7cd8dfca2011d; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7cee68b614ca1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7cee68b614ca1; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x82dc4511ff204 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe82dc4511ff204; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84aae05543502 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x513bf9d54f479 and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe84aae05543502; op2val:0xbff513bf9d54f479;
op3val:0xffefffffffffffff; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x86499331191c4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe86499331191c4; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x870d778409f12 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe870d778409f12; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a82024cc4e03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8a82024cc4e03; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e9007ca7a085 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e9007ca7a085; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9055ab3b464b5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9055ab3b464b5; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x90be1a88a62f5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe90be1a88a62f5; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x913b4236d8411 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe913b4236d8411; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92f39602ed989 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92f39602ed989; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9383ffc96dd3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9383ffc96dd3f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x93d38c0d6fe63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe93d38c0d6fe63; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x981d2bf67b45e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe981d2bf67b45e; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe98455e99dfdb1; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x987aaa2c7bb6a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe987aaa2c7bb6a; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98ccfd23440fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe98ccfd23440fa; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9e4795c8459f5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9e4795c8459f5; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa204143b94af5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea204143b94af5; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa25305fe6f779 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea25305fe6f779; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa38a3f0decfff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea38a3f0decfff; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa416babd18ecb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea416babd18ecb; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa7d13a52ed5ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea7d13a52ed5ec; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa831ef4800484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea831ef4800484; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea8fa703a4078c; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xabe96758f2a09 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feabe96758f2a09; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feacd7053aa42a2; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xace72798455d6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feace72798455d6; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaea8e11056b0f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x305a07f1d9aa8 and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaea8e11056b0f; op2val:0xbff305a07f1d9aa8;
op3val:0xffefffffffffffff; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaef92dbc63746 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaef92dbc63746; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb140c9bc37ed1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb140c9bc37ed1; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb1e2d5b3584f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb1e2d5b3584f7; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb78f3344e47e5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb78f3344e47e5; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb84ae952f80f5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb84ae952f80f5; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb877e6e317fa2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb877e6e317fa2; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb8d62745dccc1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb8d62745dccc1; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbb7a6b3f705e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febb7a6b3f705e0; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbc1e737c6a698 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2720cdd9339bf and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febc1e737c6a698; op2val:0xbff2720cdd9339bf;
op3val:0xffefffffffffffff; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbc4dccb7ac380 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febc4dccb7ac380; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbd71f89757d5c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febd71f89757d5c; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbe452c99bfb01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febe452c99bfb01; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc046064309427 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec046064309427; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc1e74ff66f075 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec1e74ff66f075; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3c90ab59cc1f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec3c90ab59cc1f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec3d4499ff58c3; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc52697f28d5d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec52697f28d5d4; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc5b9547c0fb71 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec5b9547c0fb71; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc6479c9f4861a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2086edfcc2406 and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec6479c9f4861a; op2val:0xbff2086edfcc2406;
op3val:0xffeffffffffffffe; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc812c292ea556 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec812c292ea556; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcca2a15201aa9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecca2a15201aa9; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xccb502aebad05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feccb502aebad05; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd87e65450c45; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd26cfda272030 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed26cfda272030; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd9a2688750f46 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed9a2688750f46; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdd47ad230c500 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedd47ad230c500; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedf7523fde6c5d; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee0d828b86622a; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0ea69d310766 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee0ea69d310766; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe3fa85468ae3b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee3fa85468ae3b; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe7a9ce363cccf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee7a9ce363cccf; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe89afcadc456f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c41e26851e4f and fs3 == 1 and fe3 == 0x7fe and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee89afcadc456f; op2val:0xbff0c41e26851e4f;
op3val:0xffefffffffffffff; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea0b252eae7e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea0b252eae7e0; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeca5a039a6eb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeca5a039a6eb7; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xef9105cd9390b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feef9105cd9390b; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf292aaf1ebcd7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef292aaf1ebcd7; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3811fe85e90c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3811fe85e90c; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6d2bfc0c98c8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6d2bfc0c98c8; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7646167590ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef7646167590ef; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf89488e214d07 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef89488e214d07; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf95e94a40dc56 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef95e94a40dc56; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf9efe9258e03a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef9efe9258e03a; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefc2ea66e5019e; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7f6 and fm1 == 0x140b6c88868ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f6140b6c88868ff; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x76274c472f77f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f776274c472f77f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x15e198f8b2b7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f815e198f8b2b7f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x95b999d19ee3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f895b999d19ee3f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xdd19ec10faa3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8dd19ec10faa3f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x1175939fbdd3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f91175939fbdd3f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x24b13b2db3adf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f924b13b2db3adf; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x286f79417703f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9286f79417703f; op2val:0x8000;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x551579cd90e3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9551579cd90e3f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x60165b545623f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f960165b545623f; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 1 and fe3 == 0x463 and fm3 == 0x7ffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a0e7ad32453df; op2val:0x0;
op3val:0xc637ffff00000000; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9178688669350390015,64,FLEN)
NAN_BOXED(9178688669350390015,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9184918218697013119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9184918218697013119,64,FLEN)
NAN_BOXED(9187728178687978367,64,FLEN)
NAN_BOXED(9187728178687978367,64,FLEN)
NAN_BOXED(9187728178687978367,64,FLEN)
NAN_BOXED(9189977229950053951,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9189977229950053951,64,FLEN)
NAN_BOXED(9191232894307117631,64,FLEN)
NAN_BOXED(9191232894307117631,64,FLEN)
NAN_BOXED(9191232894307117631,64,FLEN)
NAN_BOXED(9192153986432228671,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9192492337393777375,64,FLEN)
NAN_BOXED(9192492337393777375,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9192558187316211775,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9193343651082210879,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9193537225667994175,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9194155443036866303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9195406480021135871,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9195513843656701535,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9195713676962257983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9195867642824666783,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9196160202152047455,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9196822535968917983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9197311187401580719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9197487190668851071,64,FLEN)
NAN_BOXED(13851257150524965586,64,FLEN)
NAN_BOXED(18442240474082181118,64,FLEN)
NAN_BOXED(9197614839009569375,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9198114018491822639,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9199935059040821055,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9200318667541341871,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9201359550016121519,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9201624580751022231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9202240661904477455,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9202348090802523055,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9202452292756942047,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9202956904320183439,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9203113735090898319,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9203864244565795599,64,FLEN)
NAN_BOXED(13844960359912073911,64,FLEN)
NAN_BOXED(18442240474082181119,64,FLEN)
NAN_BOXED(9203874997347792863,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9204187544971662399,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9204239926147899775,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9204644448195023655,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9204677283555432423,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9205061478737501055,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9205695020795655555,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9205730391464837387,64,FLEN)
NAN_BOXED(13843376735515658775,64,FLEN)
NAN_BOXED(18442240474082181119,64,FLEN)
NAN_BOXED(9206130879033815559,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9206605154346163579,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9206626846129616203,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9206884662610554099,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9206912098855135807,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9206967914507940607,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9206991515353780203,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9207033593325363675,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9207087287272193339,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9207238747195696587,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9207552017836397655,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9207628868660395487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9207847899975691051,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208054012623873067,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208090531097770095,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208267387305759571,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208387335647064759,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208527026586764487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208529246010718891,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208657854431572163,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208736456303761287,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208801982261866939,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208841322762870407,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208895514179919915,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9208914187635274471,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209096066353683787,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209126431784336095,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209171882481573663,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209219065308554663,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209251791064530215,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209307851318333407,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209487740579706151,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209552121165973927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209599667953095195,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209845357403200323,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209903717766859391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209952553422389083,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9209956606920522221,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9210162504341867619,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9210208546162348649,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9210274027769136369,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9210350919153918437,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9210577879831247949,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9210603706584771335,64,FLEN)
NAN_BOXED(13838286878748729836,64,FLEN)
NAN_BOXED(18442240474082181118,64,FLEN)
NAN_BOXED(9210691209465981295,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9210736844919105087,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9210822639596467543,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9210877009021950271,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9210948652411281543,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211144688374337981,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211158306485752233,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211218544625558411,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211261690014676599,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211350941996557165,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211466242478511511,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211487672175512363,64,FLEN)
NAN_BOXED(13837171844780336945,64,FLEN)
NAN_BOXED(18442240474082181119,64,FLEN)
NAN_BOXED(9211498701114761791,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211551885936347223,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211562209074905237,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211592023893819099,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211607389555051981,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211784994950790603,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9211988882541115343,64,FLEN)
NAN_BOXED(13836671681624674410,64,FLEN)
NAN_BOXED(18442240474082181118,64,FLEN)
NAN_BOXED(9212107687879316969,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212166519551323959,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212167794871565191,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212224803396512573,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212321232077138517,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212441892341863573,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212448099948912693,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212471488465482577,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212821255836755211,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212854731335335843,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212940235172650925,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212941944887169293,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212961642056240653,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9212961814555298765,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213033405650372201,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213153676768315505,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213156974361523405,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213245919959673341,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213265268079288383,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213381020750017001,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213454949512849537,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213548814711847459,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213604076203053105,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213610877378134239,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213628620332281249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213637118333432405,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9213892338196798663,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214085591411770261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214093272564219501,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214179172570412113,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214282603439747961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214289397647425955,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214361233319475673,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214385000741888578,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214407355790742102,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214412430024821577,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214440736658720135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214444765199094351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214455954255916563,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214488881714435043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214514352756730448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214533076621463040,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214553434099555392,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214611458309934587,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214711423780328057,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214721679852186402,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214737847994117379,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214767478894508033,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214797149922889530,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214804377767242470,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214825740255935805,64,FLEN)
NAN_BOXED(13834221830053155691,64,FLEN)
NAN_BOXED(18442240474082181118,64,FLEN)
NAN_BOXED(9214873332932956721,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214917500113939129,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214945323068366338,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214995335547958513,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9214997868699969974,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215002380904659768,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215047997299534512,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215065550934884530,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215125593492365167,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215153693570420848,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215166498671805520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215204162026868055,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215267438500120480,64,FLEN)
NAN_BOXED(13833554243850587827,64,FLEN)
NAN_BOXED(18442240474082181118,64,FLEN)
NAN_BOXED(9215301428956774320,64,FLEN)
NAN_BOXED(13833507362485704648,64,FLEN)
NAN_BOXED(18442240474082181118,64,FLEN)
NAN_BOXED(9215316435951813608,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215377719357019569,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215402341146657141,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215477131707240876,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215488954839403122,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215544311078488018,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215646511279793783,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215702464498462691,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215730265710967257,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215859650125065222,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215898813770917878,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215899769188050357,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215924105617351923,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215933468500170067,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215936189174036483,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215936466242498240,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9215969702490466220,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216050176293283689,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216193666200794414,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216196740596934953,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216202514695580149,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216207761258739185,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216267083950641569,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216270670234488706,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216335932307205701,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216359791790955580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216360292814230007,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216395647457517243,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216531099751861447,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216561172149567773,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216562652013218977,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216666958611608068,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216698748687889666,64,FLEN)
NAN_BOXED(13831983544237618297,64,FLEN)
NAN_BOXED(18442240474082181119,64,FLEN)
NAN_BOXED(9216727246563283396,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216740708151500562,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216801493423508995,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216872825714352261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216903999510570165,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216911176213619445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216919776799851537,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216950035863755145,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216959959862271295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9216965426353208931,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217040854544790622,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217043616916962737,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217047279335619434,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217052936603189498,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217149322284784117,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217215052048321269,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217220477064771449,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217241864139100159,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217251518067085003,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217317110696302060,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217323756341429380,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217337534850533260,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217389140793829897,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217405469690839714,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217406578427450838,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217437483258964751,64,FLEN)
NAN_BOXED(13831405067470477992,64,FLEN)
NAN_BOXED(18442240474082181119,64,FLEN)
NAN_BOXED(9217443001398605638,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217483106729295569,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217494242496447735,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217594048293783525,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217606947705946357,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217610039428218786,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217616516342467777,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217662988955616736,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217674261161223832,64,FLEN)
NAN_BOXED(13831242805190801855,64,FLEN)
NAN_BOXED(18442240474082181119,64,FLEN)
NAN_BOXED(9217677514929521536,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217697592793988444,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217712106564745985,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217747349364839463,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217776025170538613,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217809129368308767,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217809902171281603,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217833150378989012,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217843234032647025,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217853011562628634,64,FLEN)
NAN_BOXED(13831126677902337030,64,FLEN)
NAN_BOXED(18442240474082181118,64,FLEN)
NAN_BOXED(9217884563990029654,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217964819412425385,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217966082498473221,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9217980574697065541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218066686457356336,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218193502586081094,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218257636274783488,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218295944928193629,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218320341611733546,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218321596038580070,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218375479477186107,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218440301522439375,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218456875389699439,64,FLEN)
NAN_BOXED(13830770089429114447,64,FLEN)
NAN_BOXED(18442240474082181119,64,FLEN)
NAN_BOXED(9218482175029733344,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218527975230303927,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218579335946516747,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218632225554087127,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218648612186482956,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218706997930399944,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218717005647286511,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218737906965892359,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218751791456377942,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218761778464874554,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9218801274255114654,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9178688669350390015,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9184918218697013119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9187728178687978367,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9189977229950053951,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9191232894307117631,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9192153986432228671,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9192492337393777375,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9192558187316211775,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9193343651082210879,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9193537225667994175,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(14283166213910560768,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
