
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:04:24 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fssub.d_b4 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fssub.d_b4)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rd, rs1==f10, rs2==f10, rd==f26,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f8c2966dd5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f10; op2:f10; dest:f26; op1val:0x7f9a0e7ad32453df; op2val:0x7f9a0e7ad32453df;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f26, f10, f10, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f13, rs2==f16, rd==f1,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f8c2966dd5f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f13; op2:f16; dest:f1; op1val:0x7f9a0e7ad32453df; op2val:0xffef2f8c2966dd5f;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f1, f13, f16, dyn, 32, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd, rs1==f22, rs2==f22, rd==f22,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f8c2966dd5f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f22; op2:f22; dest:f22; op1val:0x7f9a0e7ad32453df; op2val:0x7f9a0e7ad32453df;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f22, f22, f22, dyn, 64, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs2 == rd != rs1, rs1==f25, rs2==f14, rd==f14,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f8c2966dd5f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f25; op2:f14; dest:f14; op1val:0x7f9a0e7ad32453df; op2val:0xffef2f8c2966dd5f;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f14, f25, f14, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2, rs1==f16, rs2==f13, rd==f16,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f8c2966dd5f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f16; op2:f13; dest:f16; op1val:0x7f9a0e7ad32453df; op2val:0xffef2f8c2966dd5f;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f16, f16, f13, dyn, 128, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f15, rs2==f28, rd==f4,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf12190de3b51d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f15; op2:f28; dest:f4; op1val:0x7f9dbcde43895c3f; op2val:0xffef12190de3b51d;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f4, f15, f28, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f20, rs2==f8, rd==f0,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf12190de3b51d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f20; op2:f8; dest:f0; op1val:0x7f9dbcde43895c3f; op2val:0xffef12190de3b51d;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f0, f20, f8, dyn, 32, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f0, rs2==f5, rd==f9,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf12190de3b51d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f0; op2:f5; dest:f9; op1val:0x7f9dbcde43895c3f; op2val:0xffef12190de3b51d;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f9, f0, f5, dyn, 64, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f11, rs2==f12, rd==f23,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf12190de3b51d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f11; op2:f12; dest:f23; op1val:0x7f9dbcde43895c3f; op2val:0xffef12190de3b51d;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f23, f11, f12, dyn, 96, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f17, rs2==f26, rd==f8,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf12190de3b51d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f17; op2:f26; dest:f8; op1val:0x7f9dbcde43895c3f; op2val:0xffef12190de3b51d;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f8, f17, f26, dyn, 128, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f31, rs2==f7, rd==f13,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xd07a9833d36d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f31; op2:f7; dest:f13; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fbd07a9833d36d8;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f13, f31, f7, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f18, rs2==f27, rd==f20,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xd07a9833d36d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f18; op2:f27; dest:f20; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fbd07a9833d36d8;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f20, f18, f27, dyn, 32, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f4, rs2==f29, rd==f2,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xd07a9833d36d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f4; op2:f29; dest:f2; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fbd07a9833d36d8;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f2, f4, f29, dyn, 64, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f12, rs2==f23, rd==f25,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xd07a9833d36d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f12; op2:f23; dest:f25; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fbd07a9833d36d8;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f25, f12, f23, dyn, 96, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f1, rs2==f25, rd==f6,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xd07a9833d36d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f1; op2:f25; dest:f6; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fbd07a9833d36d8;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f6, f1, f25, dyn, 128, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f8, rs2==f6, rd==f27,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xb9867d3787c37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f8; op2:f6; dest:f27; op1val:0x7fbef2a4f7c7db7f; op2val:0xff8b9867d3787c37;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f27, f8, f6, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f19, rs2==f0, rd==f30,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xb9867d3787c37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f19; op2:f0; dest:f30; op1val:0x7fbef2a4f7c7db7f; op2val:0xff8b9867d3787c37;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f30, f19, f0, dyn, 32, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f23, rs2==f20, rd==f28,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xb9867d3787c37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f23; op2:f20; dest:f28; op1val:0x7fbef2a4f7c7db7f; op2val:0xff8b9867d3787c37;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f28, f23, f20, dyn, 64, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f2, rs2==f3, rd==f29,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xb9867d3787c37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f2; op2:f3; dest:f29; op1val:0x7fbef2a4f7c7db7f; op2val:0xff8b9867d3787c37;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f29, f2, f3, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f3, rs2==f24, rd==f21,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xb9867d3787c37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f3; op2:f24; dest:f21; op1val:0x7fbef2a4f7c7db7f; op2val:0xff8b9867d3787c37;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f21, f3, f24, dyn, 128, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f28, rs2==f4, rd==f24,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f28; op2:f4; dest:f24; op1val:0x7fc6251b45dfbd3b; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f24, f28, f4, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f9, rs2==f19, rd==f12,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f9; op2:f19; dest:f12; op1val:0x7fc6251b45dfbd3b; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f12, f9, f19, dyn, 32, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f6, rs2==f1, rd==f11,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f6; op2:f1; dest:f11; op1val:0x7fc6251b45dfbd3b; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f11, f6, f1, dyn, 64, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f5, rs2==f11, rd==f7,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f5; op2:f11; dest:f7; op1val:0x7fc6251b45dfbd3b; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f7, f5, f11, dyn, 96, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f29, rs2==f18, rd==f19,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f29; op2:f18; dest:f19; op1val:0x7fc6251b45dfbd3b; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f19, f29, f18, dyn, 128, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f26, rs2==f21, rd==f15,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9119e241fb3cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f26; op2:f21; dest:f15; op1val:0x7fcbb9876f8130c3; op2val:0xffe9119e241fb3cd;
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f15, f26, f21, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f30, rs2==f2, rd==f31,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9119e241fb3cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f2; dest:f31; op1val:0x7fcbb9876f8130c3; op2val:0xffe9119e241fb3cd;
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f2, dyn, 32, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f24, rs2==f9, rd==f18,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9119e241fb3cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f24; op2:f9; dest:f18; op1val:0x7fcbb9876f8130c3; op2val:0xffe9119e241fb3cd;
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f18, f24, f9, dyn, 64, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f27, rs2==f30, rd==f5,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9119e241fb3cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f27; op2:f30; dest:f5; op1val:0x7fcbb9876f8130c3; op2val:0xffe9119e241fb3cd;
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f5, f27, f30, dyn, 96, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f21, rs2==f31, rd==f10,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9119e241fb3cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f21; op2:f31; dest:f10; op1val:0x7fcbb9876f8130c3; op2val:0xffe9119e241fb3cd;
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f10, f21, f31, dyn, 128, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f14, rs2==f17, rd==f3,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x8ffbee8f4ca1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f14; op2:f17; dest:f3; op1val:0x7fcc01045c2cd787; op2val:0xffe8ffbee8f4ca1c;
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f3, f14, f17, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f7, rs2==f15, rd==f17,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x8ffbee8f4ca1c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f7; op2:f15; dest:f17; op1val:0x7fcc01045c2cd787; op2val:0xffe8ffbee8f4ca1c;
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f17, f7, f15, dyn, 32, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x8ffbee8f4ca1c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcc01045c2cd787; op2val:0xffe8ffbee8f4ca1c;
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x8ffbee8f4ca1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcc01045c2cd787; op2val:0xffe8ffbee8f4ca1c;
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x8ffbee8f4ca1c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcc01045c2cd787; op2val:0xffe8ffbee8f4ca1c;
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x8adfad9a2a8ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcd481499755d4b; op2val:0xffe8adfad9a2a8ab;
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x8adfad9a2a8ab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcd481499755d4b; op2val:0xffe8adfad9a2a8ab;
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x8adfad9a2a8ab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcd481499755d4b; op2val:0xffe8adfad9a2a8ab;
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x8adfad9a2a8ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcd481499755d4b; op2val:0xffe8adfad9a2a8ab;
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x8adfad9a2a8ab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcd481499755d4b; op2val:0xffe8adfad9a2a8ab;
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x88a927a9e00b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcdd5b61587fd27; op2val:0xffe88a927a9e00b5;
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x88a927a9e00b5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcdd5b61587fd27; op2val:0xffe88a927a9e00b5;
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x88a927a9e00b5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcdd5b61587fd27; op2val:0xffe88a927a9e00b5;
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x88a927a9e00b5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcdd5b61587fd27; op2val:0xffe88a927a9e00b5;
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x88a927a9e00b5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcdd5b61587fd27; op2val:0xffe88a927a9e00b5;
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6ba1be84b41d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd28bc82f697c4d; op2val:0xffe6ba1be84b41d8;
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6ba1be84b41d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd28bc82f697c4d; op2val:0xffe6ba1be84b41d8;
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6ba1be84b41d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd28bc82f697c4d; op2val:0xffe6ba1be84b41d8;
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6ba1be84b41d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd28bc82f697c4d; op2val:0xffe6ba1be84b41d8;
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6ba1be84b41d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd28bc82f697c4d; op2val:0xffe6ba1be84b41d8;
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x895a337a0fc43 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd36a63c245f557; op2val:0xffc895a337a0fc43;
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x895a337a0fc43 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd36a63c245f557; op2val:0xffc895a337a0fc43;
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x895a337a0fc43 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd36a63c245f557; op2val:0xffc895a337a0fc43;
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x895a337a0fc43 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd36a63c245f557; op2val:0xffc895a337a0fc43;
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x895a337a0fc43 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd36a63c245f557; op2val:0xffc895a337a0fc43;
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7fb2260b115e9; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7fb2260b115e9; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7fb2260b115e9; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7fb2260b115e9; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7fb2260b115e9; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1fcd3283e4aff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc0659af8369fd; op2val:0xffe1fcd3283e4aff;
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1fcd3283e4aff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc0659af8369fd; op2val:0xffe1fcd3283e4aff;
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1fcd3283e4aff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc0659af8369fd; op2val:0xffe1fcd3283e4aff;
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1fcd3283e4aff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc0659af8369fd; op2val:0xffe1fcd3283e4aff;
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1fcd3283e4aff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc0659af8369fd; op2val:0xffe1fcd3283e4aff;
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1bf635aef470a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc81394a2171e9; op2val:0xffe1bf635aef470a;
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1bf635aef470a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc81394a2171e9; op2val:0xffe1bf635aef470a;
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1bf635aef470a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc81394a2171e9; op2val:0xffe1bf635aef470a;
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1bf635aef470a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc81394a2171e9; op2val:0xffe1bf635aef470a;
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1bf635aef470a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc81394a2171e9; op2val:0xffe1bf635aef470a;
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc2b000c717167 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe02b48f992cb49; op2val:0x7fdc2b000c717167;
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc2b000c717167 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe02b48f992cb49; op2val:0x7fdc2b000c717167;
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc2b000c717167 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe02b48f992cb49; op2val:0x7fdc2b000c717167;
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc2b000c717167 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe02b48f992cb49; op2val:0x7fdc2b000c717167;
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc2b000c717167 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe02b48f992cb49; op2val:0x7fdc2b000c717167;
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x03f232546187a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe04507a06e8587; op2val:0xffd03f232546187a;
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x03f232546187a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe04507a06e8587; op2val:0xffd03f232546187a;
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x03f232546187a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe04507a06e8587; op2val:0xffd03f232546187a;
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x03f232546187a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe04507a06e8587; op2val:0xffd03f232546187a;
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x03f232546187a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe04507a06e8587; op2val:0xffd03f232546187a;
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0ab870b5c1c40; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0ab870b5c1c40; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0ab870b5c1c40; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0ab870b5c1c40; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0ab870b5c1c40; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6e4a62f333310 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe48dace8666677; op2val:0xffd6e4a62f333310;
   valaddr_reg:x3; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6e4a62f333310 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe48dace8666677; op2val:0xffd6e4a62f333310;
   valaddr_reg:x3; val_offset:172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6e4a62f333310 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe48dace8666677; op2val:0xffd6e4a62f333310;
   valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6e4a62f333310 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe48dace8666677; op2val:0xffd6e4a62f333310;
   valaddr_reg:x3; val_offset:176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6e4a62f333310 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe48dace8666677; op2val:0xffd6e4a62f333310;
   valaddr_reg:x3; val_offset:178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x0fd1c79d2d36d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe67f4f571a752e; op2val:0xffc0fd1c79d2d36d;
   valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x0fd1c79d2d36d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe67f4f571a752e; op2val:0xffc0fd1c79d2d36d;
   valaddr_reg:x3; val_offset:182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x0fd1c79d2d36d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe67f4f571a752e; op2val:0xffc0fd1c79d2d36d;
   valaddr_reg:x3; val_offset:184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x0fd1c79d2d36d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe67f4f571a752e; op2val:0xffc0fd1c79d2d36d;
   valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x0fd1c79d2d36d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe67f4f571a752e; op2val:0xffc0fd1c79d2d36d;
   valaddr_reg:x3; val_offset:188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9cc9e3436c322 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7166677e49c3c; op2val:0x7fe9cc9e3436c322;
   valaddr_reg:x3; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9cc9e3436c322 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7166677e49c3c; op2val:0x7fe9cc9e3436c322;
   valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9cc9e3436c322 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7166677e49c3c; op2val:0x7fe9cc9e3436c322;
   valaddr_reg:x3; val_offset:194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 194*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9cc9e3436c322 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7166677e49c3c; op2val:0x7fe9cc9e3436c322;
   valaddr_reg:x3; val_offset:196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 196*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9cc9e3436c322 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7166677e49c3c; op2val:0x7fe9cc9e3436c322;
   valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x212912796a508 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe98455e99dfdb1; op2val:0xffc212912796a508;
   valaddr_reg:x3; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 200*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x212912796a508 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe98455e99dfdb1; op2val:0xffc212912796a508;
   valaddr_reg:x3; val_offset:202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 202*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x212912796a508 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe98455e99dfdb1; op2val:0xffc212912796a508;
   valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x212912796a508 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe98455e99dfdb1; op2val:0xffc212912796a508;
   valaddr_reg:x3; val_offset:206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 206*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x212912796a508 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe98455e99dfdb1; op2val:0xffc212912796a508;
   valaddr_reg:x3; val_offset:208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 208*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea8fa703a4078c; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea8fa703a4078c; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 212*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea8fa703a4078c; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 214*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea8fa703a4078c; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea8fa703a4078c; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 218*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4ca3eb156f570 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feacd7053aa42a2; op2val:0xffc4ca3eb156f570;
   valaddr_reg:x3; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 220*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4ca3eb156f570 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feacd7053aa42a2; op2val:0xffc4ca3eb156f570;
   valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4ca3eb156f570 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feacd7053aa42a2; op2val:0xffc4ca3eb156f570;
   valaddr_reg:x3; val_offset:224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 224*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4ca3eb156f570 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feacd7053aa42a2; op2val:0xffc4ca3eb156f570;
   valaddr_reg:x3; val_offset:226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 226*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4ca3eb156f570 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feacd7053aa42a2; op2val:0xffc4ca3eb156f570;
   valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec3d4499ff58c3; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 230*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec3d4499ff58c3; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 232*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec3d4499ff58c3; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec3d4499ff58c3; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 236*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec3d4499ff58c3; op2val:0x7ff0000000000000;
   valaddr_reg:x3; val_offset:238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 238*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x93c0cd5d79dd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecd87e65450c45; op2val:0xffb93c0cd5d79dd0;
   valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x93c0cd5d79dd0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecd87e65450c45; op2val:0xffb93c0cd5d79dd0;
   valaddr_reg:x3; val_offset:242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 242*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x93c0cd5d79dd0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecd87e65450c45; op2val:0xffb93c0cd5d79dd0;
   valaddr_reg:x3; val_offset:244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 244*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x93c0cd5d79dd0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecd87e65450c45; op2val:0xffb93c0cd5d79dd0;
   valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x93c0cd5d79dd0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecd87e65450c45; op2val:0xffb93c0cd5d79dd0;
   valaddr_reg:x3; val_offset:248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 248*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb85a31a3e5c75 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fedf7523fde6c5d; op2val:0x7feb85a31a3e5c75;
   valaddr_reg:x3; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 250*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb85a31a3e5c75 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fedf7523fde6c5d; op2val:0x7feb85a31a3e5c75;
   valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb85a31a3e5c75 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fedf7523fde6c5d; op2val:0x7feb85a31a3e5c75;
   valaddr_reg:x3; val_offset:254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 254*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb85a31a3e5c75 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fedf7523fde6c5d; op2val:0x7feb85a31a3e5c75;
   valaddr_reg:x3; val_offset:256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 256*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb85a31a3e5c75 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fedf7523fde6c5d; op2val:0x7feb85a31a3e5c75;
   valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xf27d74799dd4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee0d828b86622a; op2val:0xffaf27d74799dd4f;
   valaddr_reg:x3; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 260*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xf27d74799dd4f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee0d828b86622a; op2val:0xffaf27d74799dd4f;
   valaddr_reg:x3; val_offset:262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 262*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xf27d74799dd4f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee0d828b86622a; op2val:0xffaf27d74799dd4f;
   valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xf27d74799dd4f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee0d828b86622a; op2val:0xffaf27d74799dd4f;
   valaddr_reg:x3; val_offset:266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 266*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xf27d74799dd4f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee0d828b86622a; op2val:0xffaf27d74799dd4f;
   valaddr_reg:x3; val_offset:268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 268*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 1 and fe2 == 0x7f7 and fm2 == 0xe8acc8d7f2ffb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefc2ea66e5019e; op2val:0xff7e8acc8d7f2ffb;
   valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 1 and fe2 == 0x7f7 and fm2 == 0xe8acc8d7f2ffb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefc2ea66e5019e; op2val:0xff7e8acc8d7f2ffb;
   valaddr_reg:x3; val_offset:272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 32, 0, x3, 272*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 1 and fe2 == 0x7f7 and fm2 == 0xe8acc8d7f2ffb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefc2ea66e5019e; op2val:0xff7e8acc8d7f2ffb;
   valaddr_reg:x3; val_offset:274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 274*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 1 and fe2 == 0x7f7 and fm2 == 0xe8acc8d7f2ffb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefc2ea66e5019e; op2val:0xff7e8acc8d7f2ffb;
   valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 1 and fe2 == 0x7f7 and fm2 == 0xe8acc8d7f2ffb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefc2ea66e5019e; op2val:0xff7e8acc8d7f2ffb;
   valaddr_reg:x3; val_offset:278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 278*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f8c2966dd5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f9a0e7ad32453df; op2val:0xffef2f8c2966dd5f;
   valaddr_reg:x3; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 280*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f8c2966dd5f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f9a0e7ad32453df; op2val:0xffef2f8c2966dd5f;
   valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 64, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f8c2966dd5f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f9a0e7ad32453df; op2val:0xffef2f8c2966dd5f;
   valaddr_reg:x3; val_offset:284*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 96, 0, x3, 284*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f8c2966dd5f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f9a0e7ad32453df; op2val:0xffef2f8c2966dd5f;
   valaddr_reg:x3; val_offset:286*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 128, 0, x3, 286*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(18442011278142004575,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(18442011278142004575,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(18442011278142004575,64,FLEN)
NAN_BOXED(9195713676962257983,64,FLEN)
NAN_BOXED(18441978897921979677,64,FLEN)
NAN_BOXED(9195713676962257983,64,FLEN)
NAN_BOXED(18441978897921979677,64,FLEN)
NAN_BOXED(9195713676962257983,64,FLEN)
NAN_BOXED(18441978897921979677,64,FLEN)
NAN_BOXED(9195713676962257983,64,FLEN)
NAN_BOXED(18441978897921979677,64,FLEN)
NAN_BOXED(9195713676962257983,64,FLEN)
NAN_BOXED(18441978897921979677,64,FLEN)
NAN_BOXED(9196822535968917983,64,FLEN)
NAN_BOXED(9204521638047856344,64,FLEN)
NAN_BOXED(9196822535968917983,64,FLEN)
NAN_BOXED(9204521638047856344,64,FLEN)
NAN_BOXED(9196822535968917983,64,FLEN)
NAN_BOXED(9204521638047856344,64,FLEN)
NAN_BOXED(9196822535968917983,64,FLEN)
NAN_BOXED(9204521638047856344,64,FLEN)
NAN_BOXED(9196822535968917983,64,FLEN)
NAN_BOXED(9204521638047856344,64,FLEN)
NAN_BOXED(9205061478737501055,64,FLEN)
NAN_BOXED(18413979073131346999,64,FLEN)
NAN_BOXED(9205061478737501055,64,FLEN)
NAN_BOXED(18413979073131346999,64,FLEN)
NAN_BOXED(9205061478737501055,64,FLEN)
NAN_BOXED(18413979073131346999,64,FLEN)
NAN_BOXED(9205061478737501055,64,FLEN)
NAN_BOXED(18413979073131346999,64,FLEN)
NAN_BOXED(9205061478737501055,64,FLEN)
NAN_BOXED(18413979073131346999,64,FLEN)
NAN_BOXED(9207087287272193339,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9207087287272193339,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9207087287272193339,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9207087287272193339,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9207087287272193339,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9208657854431572163,64,FLEN)
NAN_BOXED(18440289520153768909,64,FLEN)
NAN_BOXED(9208657854431572163,64,FLEN)
NAN_BOXED(18440289520153768909,64,FLEN)
NAN_BOXED(9208657854431572163,64,FLEN)
NAN_BOXED(18440289520153768909,64,FLEN)
NAN_BOXED(9208657854431572163,64,FLEN)
NAN_BOXED(18440289520153768909,64,FLEN)
NAN_BOXED(9208657854431572163,64,FLEN)
NAN_BOXED(18440289520153768909,64,FLEN)
NAN_BOXED(9208736456303761287,64,FLEN)
NAN_BOXED(18440269869685721628,64,FLEN)
NAN_BOXED(9208736456303761287,64,FLEN)
NAN_BOXED(18440269869685721628,64,FLEN)
NAN_BOXED(9208736456303761287,64,FLEN)
NAN_BOXED(18440269869685721628,64,FLEN)
NAN_BOXED(9208736456303761287,64,FLEN)
NAN_BOXED(18440269869685721628,64,FLEN)
NAN_BOXED(9208736456303761287,64,FLEN)
NAN_BOXED(18440269869685721628,64,FLEN)
NAN_BOXED(9209096066353683787,64,FLEN)
NAN_BOXED(18440179967173241003,64,FLEN)
NAN_BOXED(9209096066353683787,64,FLEN)
NAN_BOXED(18440179967173241003,64,FLEN)
NAN_BOXED(9209096066353683787,64,FLEN)
NAN_BOXED(18440179967173241003,64,FLEN)
NAN_BOXED(9209096066353683787,64,FLEN)
NAN_BOXED(18440179967173241003,64,FLEN)
NAN_BOXED(9209096066353683787,64,FLEN)
NAN_BOXED(18440179967173241003,64,FLEN)
NAN_BOXED(9209251791064530215,64,FLEN)
NAN_BOXED(18440141035995529397,64,FLEN)
NAN_BOXED(9209251791064530215,64,FLEN)
NAN_BOXED(18440141035995529397,64,FLEN)
NAN_BOXED(9209251791064530215,64,FLEN)
NAN_BOXED(18440141035995529397,64,FLEN)
NAN_BOXED(9209251791064530215,64,FLEN)
NAN_BOXED(18440141035995529397,64,FLEN)
NAN_BOXED(9209251791064530215,64,FLEN)
NAN_BOXED(18440141035995529397,64,FLEN)
NAN_BOXED(9210577879831247949,64,FLEN)
NAN_BOXED(18439630353339204056,64,FLEN)
NAN_BOXED(9210577879831247949,64,FLEN)
NAN_BOXED(18439630353339204056,64,FLEN)
NAN_BOXED(9210577879831247949,64,FLEN)
NAN_BOXED(18439630353339204056,64,FLEN)
NAN_BOXED(9210577879831247949,64,FLEN)
NAN_BOXED(18439630353339204056,64,FLEN)
NAN_BOXED(9210577879831247949,64,FLEN)
NAN_BOXED(18439630353339204056,64,FLEN)
NAN_BOXED(9210822639596467543,64,FLEN)
NAN_BOXED(18431146003259259971,64,FLEN)
NAN_BOXED(9210822639596467543,64,FLEN)
NAN_BOXED(18431146003259259971,64,FLEN)
NAN_BOXED(9210822639596467543,64,FLEN)
NAN_BOXED(18431146003259259971,64,FLEN)
NAN_BOXED(9210822639596467543,64,FLEN)
NAN_BOXED(18431146003259259971,64,FLEN)
NAN_BOXED(9210822639596467543,64,FLEN)
NAN_BOXED(18431146003259259971,64,FLEN)
NAN_BOXED(9212107687879316969,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9212107687879316969,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9212107687879316969,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9212107687879316969,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9212107687879316969,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9213245919959673341,64,FLEN)
NAN_BOXED(18438296333274991359,64,FLEN)
NAN_BOXED(9213245919959673341,64,FLEN)
NAN_BOXED(18438296333274991359,64,FLEN)
NAN_BOXED(9213245919959673341,64,FLEN)
NAN_BOXED(18438296333274991359,64,FLEN)
NAN_BOXED(9213245919959673341,64,FLEN)
NAN_BOXED(18438296333274991359,64,FLEN)
NAN_BOXED(9213245919959673341,64,FLEN)
NAN_BOXED(18438296333274991359,64,FLEN)
NAN_BOXED(9213381020750017001,64,FLEN)
NAN_BOXED(18438228782879819530,64,FLEN)
NAN_BOXED(9213381020750017001,64,FLEN)
NAN_BOXED(18438228782879819530,64,FLEN)
NAN_BOXED(9213381020750017001,64,FLEN)
NAN_BOXED(18438228782879819530,64,FLEN)
NAN_BOXED(9213381020750017001,64,FLEN)
NAN_BOXED(18438228782879819530,64,FLEN)
NAN_BOXED(9213381020750017001,64,FLEN)
NAN_BOXED(18438228782879819530,64,FLEN)
NAN_BOXED(9214412430024821577,64,FLEN)
NAN_BOXED(9213286216901947751,64,FLEN)
NAN_BOXED(9214412430024821577,64,FLEN)
NAN_BOXED(9213286216901947751,64,FLEN)
NAN_BOXED(9214412430024821577,64,FLEN)
NAN_BOXED(9213286216901947751,64,FLEN)
NAN_BOXED(9214412430024821577,64,FLEN)
NAN_BOXED(9213286216901947751,64,FLEN)
NAN_BOXED(9214412430024821577,64,FLEN)
NAN_BOXED(9213286216901947751,64,FLEN)
NAN_BOXED(9214440736658720135,64,FLEN)
NAN_BOXED(18433302695009196154,64,FLEN)
NAN_BOXED(9214440736658720135,64,FLEN)
NAN_BOXED(18433302695009196154,64,FLEN)
NAN_BOXED(9214440736658720135,64,FLEN)
NAN_BOXED(18433302695009196154,64,FLEN)
NAN_BOXED(9214440736658720135,64,FLEN)
NAN_BOXED(18433302695009196154,64,FLEN)
NAN_BOXED(9214440736658720135,64,FLEN)
NAN_BOXED(18433302695009196154,64,FLEN)
NAN_BOXED(9214553434099555392,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214553434099555392,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214553434099555392,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214553434099555392,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214553434099555392,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9215646511279793783,64,FLEN)
NAN_BOXED(18435173527095292688,64,FLEN)
NAN_BOXED(9215646511279793783,64,FLEN)
NAN_BOXED(18435173527095292688,64,FLEN)
NAN_BOXED(9215646511279793783,64,FLEN)
NAN_BOXED(18435173527095292688,64,FLEN)
NAN_BOXED(9215646511279793783,64,FLEN)
NAN_BOXED(18435173527095292688,64,FLEN)
NAN_BOXED(9215646511279793783,64,FLEN)
NAN_BOXED(18435173527095292688,64,FLEN)
NAN_BOXED(9216193666200794414,64,FLEN)
NAN_BOXED(18429007973944841069,64,FLEN)
NAN_BOXED(9216193666200794414,64,FLEN)
NAN_BOXED(18429007973944841069,64,FLEN)
NAN_BOXED(9216193666200794414,64,FLEN)
NAN_BOXED(18429007973944841069,64,FLEN)
NAN_BOXED(9216193666200794414,64,FLEN)
NAN_BOXED(18429007973944841069,64,FLEN)
NAN_BOXED(9216193666200794414,64,FLEN)
NAN_BOXED(18429007973944841069,64,FLEN)
NAN_BOXED(9216359791790955580,64,FLEN)
NAN_BOXED(9217123092243333922,64,FLEN)
NAN_BOXED(9216359791790955580,64,FLEN)
NAN_BOXED(9217123092243333922,64,FLEN)
NAN_BOXED(9216359791790955580,64,FLEN)
NAN_BOXED(9217123092243333922,64,FLEN)
NAN_BOXED(9216359791790955580,64,FLEN)
NAN_BOXED(9217123092243333922,64,FLEN)
NAN_BOXED(9216359791790955580,64,FLEN)
NAN_BOXED(9217123092243333922,64,FLEN)
NAN_BOXED(9217043616916962737,64,FLEN)
NAN_BOXED(18429313039797232904,64,FLEN)
NAN_BOXED(9217043616916962737,64,FLEN)
NAN_BOXED(18429313039797232904,64,FLEN)
NAN_BOXED(9217043616916962737,64,FLEN)
NAN_BOXED(18429313039797232904,64,FLEN)
NAN_BOXED(9217043616916962737,64,FLEN)
NAN_BOXED(18429313039797232904,64,FLEN)
NAN_BOXED(9217043616916962737,64,FLEN)
NAN_BOXED(18429313039797232904,64,FLEN)
NAN_BOXED(9217337534850533260,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9217337534850533260,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9217337534850533260,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9217337534850533260,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9217337534850533260,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9217405469690839714,64,FLEN)
NAN_BOXED(18430077945718961520,64,FLEN)
NAN_BOXED(9217405469690839714,64,FLEN)
NAN_BOXED(18430077945718961520,64,FLEN)
NAN_BOXED(9217405469690839714,64,FLEN)
NAN_BOXED(18430077945718961520,64,FLEN)
NAN_BOXED(9217405469690839714,64,FLEN)
NAN_BOXED(18430077945718961520,64,FLEN)
NAN_BOXED(9217405469690839714,64,FLEN)
NAN_BOXED(18430077945718961520,64,FLEN)
NAN_BOXED(9217809902171281603,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9217809902171281603,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9217809902171281603,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9217809902171281603,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9217809902171281603,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9217980574697065541,64,FLEN)
NAN_BOXED(18426825376188046800,64,FLEN)
NAN_BOXED(9217980574697065541,64,FLEN)
NAN_BOXED(18426825376188046800,64,FLEN)
NAN_BOXED(9217980574697065541,64,FLEN)
NAN_BOXED(18426825376188046800,64,FLEN)
NAN_BOXED(9217980574697065541,64,FLEN)
NAN_BOXED(18426825376188046800,64,FLEN)
NAN_BOXED(9217980574697065541,64,FLEN)
NAN_BOXED(18426825376188046800,64,FLEN)
NAN_BOXED(9218295944928193629,64,FLEN)
NAN_BOXED(9217607997910310005,64,FLEN)
NAN_BOXED(9218295944928193629,64,FLEN)
NAN_BOXED(9217607997910310005,64,FLEN)
NAN_BOXED(9218295944928193629,64,FLEN)
NAN_BOXED(9217607997910310005,64,FLEN)
NAN_BOXED(9218295944928193629,64,FLEN)
NAN_BOXED(9217607997910310005,64,FLEN)
NAN_BOXED(9218295944928193629,64,FLEN)
NAN_BOXED(9217607997910310005,64,FLEN)
NAN_BOXED(9218320341611733546,64,FLEN)
NAN_BOXED(18423988406168706383,64,FLEN)
NAN_BOXED(9218320341611733546,64,FLEN)
NAN_BOXED(18423988406168706383,64,FLEN)
NAN_BOXED(9218320341611733546,64,FLEN)
NAN_BOXED(18423988406168706383,64,FLEN)
NAN_BOXED(9218320341611733546,64,FLEN)
NAN_BOXED(18423988406168706383,64,FLEN)
NAN_BOXED(9218320341611733546,64,FLEN)
NAN_BOXED(18423988406168706383,64,FLEN)
NAN_BOXED(9218801274255114654,64,FLEN)
NAN_BOXED(18410304937889050619,64,FLEN)
NAN_BOXED(9218801274255114654,64,FLEN)
NAN_BOXED(18410304937889050619,64,FLEN)
NAN_BOXED(9218801274255114654,64,FLEN)
NAN_BOXED(18410304937889050619,64,FLEN)
NAN_BOXED(9218801274255114654,64,FLEN)
NAN_BOXED(18410304937889050619,64,FLEN)
NAN_BOXED(9218801274255114654,64,FLEN)
NAN_BOXED(18410304937889050619,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(18442011278142004575,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(18442011278142004575,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(18442011278142004575,64,FLEN)
NAN_BOXED(9194677509921461215,64,FLEN)
NAN_BOXED(18442011278142004575,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 32*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
