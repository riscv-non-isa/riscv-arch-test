
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:48 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmsub.d_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmsub.d_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rs3 == rd, rs1==f14, rs2==f14, rs3==f14, rd==f14,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x40e and fm2 == 0x0094000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f14; op2:f14; op3:f14; dest:f14; op1val:0x1; op2val:0x1;
op3val:0x1; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f14, f14, f14, f14, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rd == rs2 == rs3 != rs1, rs1==f4, rs2==f13, rs3==f13, rd==f13,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x432 and fm2 == 0xffffffff0007a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f4; op2:f13; op3:f13; dest:f13; op1val:0x1; op2val:0x432ffffffff0007a;
op3val:0x432ffffffff0007a; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f13, f4, f13, f13, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rd == rs3 != rs2, rs1==f21, rs2==f18, rs3==f21, rd==f21,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x431 and fm2 == 0xffffffff7ff44 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f21; op2:f18; op3:f21; dest:f21; op1val:0x2; op2val:0xc31ffffffff7ff44;
op3val:0x2; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f21, f21, f18, f21, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f15, rs2==f3, rs3==f11, rd==f2,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 0 and fe2 == 0x430 and fm2 == 0xfffffffffff06 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f15; op2:f3; op3:f11; dest:f2; op1val:0x4; op2val:0x430fffffffffff06;
op3val:0x4; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f2, f15, f3, f11, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f31, rs2==f26, rs3==f31, rd==f7,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x40a and fm2 == 0xfcf8000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f31; op2:f26; op3:f31; dest:f7; op1val:0x4; op2val:0xc0afcf8000000000;
op3val:0x4; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f7, f31, f26, f31, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f2, rs2==f2, rs3==f2, rd==f12,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x430 and fm2 == 0xffffffffff7d6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f2; op2:f2; op3:f2; dest:f12; op1val:0x4; op2val:0x4;
op3val:0x4; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f12, f2, f2, f2, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f7, rs2==f15, rs3==f15, rd==f8,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f7; op2:f15; op3:f15; dest:f8; op1val:0x7; op2val:0x4000000000000000;
op3val:0x4000000000000000; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f8, f7, f15, f15, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f19, rs2==f6, rs3==f23, rd==f6,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 0 and fe2 == 0x40a and fm2 == 0x24d6db6db6db7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f19; op2:f6; op3:f23; dest:f6; op1val:0x7; op2val:0x40a24d6db6db6db7;
op3val:0xe; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f6, f19, f6, f23, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rs2 == rd != rs3, rs1==f22, rs2==f22, rs3==f6, rd==f22,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8400000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f22; op2:f22; op3:f6; dest:f22; op1val:0x8; op2val:0x8;
op3val:0x41; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f22, f22, f22, f6, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f12, rs2==f12, rs3==f26, rd==f27,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x0920000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f12; op2:f12; op3:f26; dest:f27; op1val:0x8; op2val:0x8;
op3val:0x49; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f27, f12, f12, f26, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f0, rs2==f31, rs3==f17, rd==f0,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 0 and fe2 == 0x40e and fm2 == 0x999f333333333 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f0; op2:f31; op3:f17; dest:f0; op1val:0xa; op2val:0x40e999f333333333;
op3val:0x1b; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f0, f0, f31, f17, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f10, rs2==f21, rs3==f18, rd==f18,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x40f and fm2 == 0x9998000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f10; op2:f21; op3:f18; dest:f18; op1val:0xa; op2val:0xc0f9998000000000;
op3val:0x10; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f18, f10, f21, f18, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f11, rs2==f28, rs3==f29, rd==f3,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x45d1745d1745d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f11; op2:f28; op3:f29; dest:f3; op1val:0xb; op2val:0xbff45d1745d1745d;
op3val:0x13; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f3, f11, f28, f29, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f9, rs2==f5, rs3==f7, rd==f28,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x40a and fm2 == 0x7385d1745d174 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f9; op2:f5; op3:f7; dest:f28; op1val:0xb; op2val:0xc0a7385d1745d174;
op3val:0x4a; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f28, f9, f5, f7, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f5, rs2==f29, rs3==f30, rd==f4,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000c and fs2 == 0 and fe2 == 0x402 and fm2 == 0xeaaaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f5; op2:f29; op3:f30; dest:f4; op1val:0xc; op2val:0x402eaaaaaaaaaaab;
op3val:0x38; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f4, f5, f29, f30, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f16, rs2==f19, rs3==f28, rd==f24,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0ec4ec4ec4ec5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f16; op2:f19; op3:f28; dest:f24; op1val:0xd; op2val:0x4010ec4ec4ec4ec5;
op3val:0x47; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f24, f16, f19, f28, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f29, rs2==f17, rs3==f24, rd==f10,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 0 and fe2 == 0x40c and fm2 == 0x3b313b13b13b1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f29; op2:f17; op3:f24; dest:f10; op1val:0xd; op2val:0x40c3b313b13b13b1;
op3val:0x2f; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f10, f29, f17, f24, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f6, rs2==f25, rs3==f0, rd==f30,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000e and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b6db6db6db6e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f6; op2:f25; op3:f0; dest:f30; op1val:0xe; op2val:0x4001b6db6db6db6e;
op3val:0x60; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f30, f6, f25, f0, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f13, rs2==f4, rs3==f16, rd==f1,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000e and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4db6db6db6db7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f13; op2:f4; op3:f16; dest:f1; op1val:0xe; op2val:0x4014db6db6db6db7;
op3val:0x4b; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f1, f13, f4, f16, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f1, rs2==f0, rs3==f3, rd==f31,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 0 and fe2 == 0x400 and fm2 == 0xeeeeeeeeeeeef and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f1; op2:f0; op3:f3; dest:f31; op1val:0xf; op2val:0x400eeeeeeeeeeeef;
op3val:0x3f; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f1, f0, f3, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f23, rs2==f16, rs3==f8, rd==f11,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000010 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x01d0000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f23; op2:f16; op3:f8; dest:f11; op1val:0x10; op2val:0x40701d0000000000;
op3val:0x1d; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f11, f23, f16, f8, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f3, rs2==f7, rs3==f20, rd==f26,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000010 and fs2 == 0 and fe2 == 0x410 and fm2 == 0x0002500000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f3; op2:f7; op3:f20; dest:f26; op1val:0x10; op2val:0x4100002500000000;
op3val:0x4a; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f26, f3, f7, f20, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f30, rs2==f11, rs3==f27, rd==f17,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000011 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4f0f0f0f0f0f1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f11; op3:f27; dest:f17; op1val:0x11; op2val:0x4014f0f0f0f0f0f1;
op3val:0x59; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f17, f30, f11, f27, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f8, rs2==f20, rs3==f12, rd==f19,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000011 and fs2 == 1 and fe2 == 0x42e and fm2 == 0xe1e1e1e1a5a53 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f8; op2:f20; op3:f12; dest:f19; op1val:0x11; op2val:0xc2ee1e1e1e1a5a53;
op3val:0x3; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f19, f8, f20, f12, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f17, rs2==f9, rs3==f25, rd==f23,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 1 and fe2 == 0x42e and fm2 == 0xc71c71c38e329 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f17; op2:f9; op3:f25; dest:f23; op1val:0x12; op2val:0xc2ec71c71c38e329;
op3val:0x38; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f23, f17, f9, f25, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f28, rs2==f1, rs3==f4, rd==f29,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000013 and fs2 == 0 and fe2 == 0x40e and fm2 == 0xaf2fca1af286c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f28; op2:f1; op3:f4; dest:f29; op1val:0x13; op2val:0x40eaf2fca1af286c;
op3val:0x46; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f29, f28, f1, f4, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f25, rs2==f8, rs3==f9, rd==f20,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000014 and fs2 == 0 and fe2 == 0x40a and fm2 == 0x9a0999999999a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f25; op2:f8; op3:f9; dest:f20; op1val:0x14; op2val:0x40a9a0999999999a;
op3val:0x45; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f20, f25, f8, f9, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f27, rs2==f24, rs3==f5, rd==f25,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000014 and fs2 == 0 and fe2 == 0x40f and fm2 == 0x999dc00000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f27; op2:f24; op3:f5; dest:f25; op1val:0x14; op2val:0x40f999dc00000000;
op3val:0x52; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f25, f27, f24, f5, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f26, rs2==f10, rs3==f1, rd==f9,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000015 and fs2 == 0 and fe2 == 0x406 and fm2 == 0x879e79e79e79e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f26; op2:f10; op3:f1; dest:f9; op1val:0x15; op2val:0x406879e79e79e79e;
op3val:0xf; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f9, f26, f10, f1, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f18, rs2==f27, rs3==f22, rd==f5,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x40d and fm2 == 0x7454e8ba2e8ba and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f18; op2:f27; op3:f22; dest:f5; op1val:0x16; op2val:0xc0d7454e8ba2e8ba;
op3val:0x2e; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f5, f18, f27, f22, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f20, rs2==f30, rs3==f10, rd==f16,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x410 and fm2 == 0x745ae2e8ba2e9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f20; op2:f30; op3:f10; dest:f16; op1val:0x16; op2val:0xc10745ae2e8ba2e9;
op3val:0x61; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f16, f20, f30, f10, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f24, rs2==f23, rs3==f19, rd==f15,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x42e and fm2 == 0x745d1745d1443 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f24; op2:f23; op3:f19; dest:f15; op1val:0x16; op2val:0xc2e745d1745d1443;
op3val:0x11; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f15, f24, f23, f19, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x999999999999a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x19; op2val:0x3ff999999999999a;
op3val:0x30; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x4ae147ae147ae and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x19; op2val:0x4044ae147ae147ae;
op3val:0x9; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x47ae147ae149c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x19; op2val:0x42e47ae147ae149c;
op3val:0x1f; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 1 and fe2 == 0x42e and fm2 == 0x47ae1475c28d1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x19; op2val:0xc2e47ae1475c28d1;
op3val:0x1c; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x42e and fm2 == 0x3b13b13b00035 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1a; op2val:0x42e3b13b13b00035;
op3val:0x2c; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 0 and fe2 == 0x405 and fm2 == 0x3800000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1b; op2val:0x4053800000000000;
op3val:0x39; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 0 and fe2 == 0x42e and fm2 == 0x2f684bd9ed0e0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1b; op2val:0x42e2f684bd9ed0e0;
op3val:0x3e; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 1 and fe2 == 0x405 and fm2 == 0x257b425ed097b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1b; op2val:0xc05257b425ed097b;
op3val:0x44; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3b6db6db6db6e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1c; op2val:0x4003b6db6db6db6e;
op3val:0x5; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x40b and fm2 == 0x1a7ee58469ee6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1d; op2val:0x40b1a7ee58469ee6;
op3val:0x6; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x42e and fm2 == 0x1a7b9611a3506 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1d; op2val:0x42e1a7b9611a3506;
op3val:0xe; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001e and fs2 == 0 and fe2 == 0x42e and fm2 == 0x11111111088c9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1e; op2val:0x42e11111111088c9;
op3val:0x3d; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001e and fs2 == 0 and fe2 == 0x42e and fm2 == 0x111111111111b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1e; op2val:0x42e111111111111b;
op3val:0x1a; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0e739ce739ce7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1f; op2val:0x4030e739ce739ce7;
op3val:0xc; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xfe80000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x20; op2val:0xc06fe80000000000;
op3val:0x18; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000021 and fs2 == 0 and fe2 == 0x40f and fm2 == 0xf07d83e0f83e1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x21; op2val:0x40ff07d83e0f83e1;
op3val:0x2d; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 0 and fe2 == 0x42d and fm2 == 0xe1e1e1e1e1a88 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x22; op2val:0x42de1e1e1e1e1a88;
op3val:0x19; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x6f0f0f0f0f0f1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x22; op2val:0xc016f0f0f0f0f0f1;
op3val:0x3e; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 0 and fe2 == 0x42d and fm2 == 0xc71c71c71c5c0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x24; op2val:0x42dc71c71c71c5c0;
op3val:0x3d; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000025 and fs2 == 1 and fe2 == 0x40c and fm2 == 0xbabeb3e45306f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x25; op2val:0xc0cbabeb3e45306f;
op3val:0x4e; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000026 and fs2 == 0 and fe2 == 0x40c and fm2 == 0xaf33ca1af286c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x26; op2val:0x40caf33ca1af286c;
op3val:0x36; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000027 and fs2 == 1 and fe2 == 0x409 and fm2 == 0xa3aaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x27; op2val:0xc09a3aaaaaaaaaab;
op3val:0x44; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000028 and fs2 == 0 and fe2 == 0x40f and fm2 == 0x999b666666666 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x28; op2val:0x40f999b666666666;
op3val:0x48; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x7831f3831f383 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x29; op2val:0xc037831f3831f383;
op3val:0x3c; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2a; op2val:0x3fe0000000000000;
op3val:0x14; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002b and fs2 == 1 and fe2 == 0x42d and fm2 == 0x7d05f417d05c9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2b; op2val:0xc2d7d05f417d05c9;
op3val:0xc; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002c and fs2 == 0 and fe2 == 0x406 and fm2 == 0x77e8ba2e8ba2f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2c; op2val:0x40677e8ba2e8ba2f;
op3val:0x4d; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8ba2e8ba2e8ba and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2c; op2val:0xbfe8ba2e8ba2e8ba;
op3val:0x5f; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002d and fs2 == 0 and fe2 == 0x42d and fm2 == 0x6c16c16c16107 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2d; op2val:0x42d6c16c16c16107;
op3val:0x3a; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002d and fs2 == 1 and fe2 == 0x42d and fm2 == 0x6c16c16c0b5ee and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2d; op2val:0xc2d6c16c16c0b5ee;
op3val:0x14; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 0 and fe2 == 0x42d and fm2 == 0x642c8590b218d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2e; op2val:0x42d642c8590b218d;
op3val:0x5e; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xefa8d9df51b3c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2f; op2val:0x3ffefa8d9df51b3c;
op3val:0x4b; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x42d and fm2 == 0x5c9882b92e4d2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2f; op2val:0x42d5c9882b92e4d2;
op3val:0xb; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 1 and fe2 == 0x405 and fm2 == 0x5946cefa8d9df and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2f; op2val:0xc055946cefa8d9df;
op3val:0x27; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 1 and fe2 == 0x405 and fm2 == 0x5b10572620ae5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2f; op2val:0xc055b10572620ae5;
op3val:0x13; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000032 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x47ae147ae1403 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x32; op2val:0xc2d47ae147ae1403;
op3val:0x5c; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xafafafafafafb and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x33; op2val:0x3ffafafafafafafb;
op3val:0x54; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x25a5a5a5a5a5a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x33; op2val:0x40025a5a5a5a5a5a;
op3val:0x34; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x66e6e6e6e6e6e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x33; op2val:0x40066e6e6e6e6e6e;
op3val:0xe; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x409 and fm2 == 0x414a0a0a0a0a1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x33; op2val:0x409414a0a0a0a0a1;
op3val:0x7; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000034 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x409d89d89d89e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x34; op2val:0x402409d89d89d89e;
op3val:0x8; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000034 and fs2 == 0 and fe2 == 0x42d and fm2 == 0x3b13b13b13b7e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x34; op2val:0x42d3b13b13b13b7e;
op3val:0x5f; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000036 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3a12f684bda13 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x36; op2val:0x4013a12f684bda13;
op3val:0x9; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000038 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x249249249242a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x38; op2val:0xc2d249249249242a;
op3val:0x52; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc797dd49c3411 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3b; op2val:0x3ffc797dd49c3411;
op3val:0x58; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc444444444444 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3c; op2val:0x3fec444444444444;
op3val:0x3e; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003c and fs2 == 1 and fe2 == 0x42d and fm2 == 0x1111111111094 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3c; op2val:0xc2d1111111111094;
op3val:0x34; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb47582192e29f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3d; op2val:0x3fcb47582192e29f;
op3val:0x10; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x42d and fm2 == 0x0c9714fbc96bb and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3d; op2val:0xc2d0c9714fbc96bb;
op3val:0x55; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7bdef7bdef7be and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3e; op2val:0x3fd7bdef7bdef7be;
op3val:0x28; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5def7bdef7bdf and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3e; op2val:0x4015def7bdef7bdf;
op3val:0x52; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 1 and fe2 == 0x42d and fm2 == 0x0842108421067 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3e; op2val:0xc2d0842108421067;
op3val:0x17; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x40; op2val:0xc005000000000000;
op3val:0x58; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x409 and fm2 == 0xffd4000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x40; op2val:0xc09ffd4000000000;
op3val:0x2c; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 1 and fe2 == 0x40e and fm2 == 0xf81e372372372 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x41; op2val:0xc0ef81e372372372;
op3val:0x2b; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000042 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x41f07c1f07c1f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x42; op2val:0x3ff41f07c1f07c1f;
op3val:0x50; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000042 and fs2 == 1 and fe2 == 0x40d and fm2 == 0xf078d9364d936 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x42; op2val:0xc0df078d9364d936;
op3val:0x36; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000043 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xe9131abf0b7a2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x43; op2val:0x42ce9131abf0b7a2;
op3val:0x40; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000043 and fs2 == 1 and fe2 == 0x402 and fm2 == 0xe81e9131abf0b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x43; op2val:0xc02e81e9131abf0b;
op3val:0x3; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000043 and fs2 == 1 and fe2 == 0x40a and fm2 == 0xe8fd226357e17 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x43; op2val:0xc0ae8fd226357e17;
op3val:0x2f; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 1 and fe2 == 0x407 and fm2 == 0xe152d2d2d2d2d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x44; op2val:0xc07e152d2d2d2d2d;
op3val:0x27; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xe1e1e1dffff49 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x44; op2val:0xc2ce1e1e1dffff49;
op3val:0x60; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000045 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x37a6f4de9bd38 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x45; op2val:0x3fd37a6f4de9bd38;
op3val:0xd; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000045 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa7e2519f89468 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x45; op2val:0xc01a7e2519f89468;
op3val:0x37; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000045 and fs2 == 1 and fe2 == 0x40d and fm2 == 0xdae2076b981db and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x45; op2val:0xc0ddae2076b981db;
op3val:0x46; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xe64f52edf8c9f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x47; op2val:0x402e64f52edf8c9f;
op3val:0x37; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xcd8568901cd04 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x47; op2val:0xc2ccd8568901cd04;
op3val:0x47; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000048 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2aaaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x48; op2val:0x3ff2aaaaaaaaaaab;
op3val:0x33; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000048 and fs2 == 0 and fe2 == 0x40a and fm2 == 0xc72471c71c71c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x48; op2val:0x40ac72471c71c71c;
op3val:0x12; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x88c46231188c4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x49; op2val:0xbfe88c46231188c4;
op3val:0x8; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0dd67c8a60dd6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4a; op2val:0x3ff0dd67c8a60dd6;
op3val:0x52; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004a and fs2 == 0 and fe2 == 0x407 and fm2 == 0xbbd306eb3e453 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4a; op2val:0x407bbd306eb3e453;
op3val:0x4b; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x406 and fm2 == 0xb51eb851eb852 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4b; op2val:0x406b51eb851eb852;
op3val:0x8; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004b and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa851eb851eb85 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4b; op2val:0xc03a851eb851eb85;
op3val:0x3b; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004c and fs2 == 1 and fe2 == 0x42c and fm2 == 0xaf286bca1a148 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4c; op2val:0xc2caf286bca1a148;
op3val:0x3c; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3483483483483 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4e; op2val:0x3fe3483483483483;
op3val:0x2f; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 0 and fe2 == 0x40a and fm2 == 0x9ecaefcc26e2d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4f; op2val:0x40a9ecaefcc26e2d;
op3val:0x4; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 0 and fe2 == 0x40c and fm2 == 0x9ecdf984dc5ac and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4f; op2val:0x40c9ecdf984dc5ac;
op3val:0x31; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 0 and fe2 == 0x42c and fm2 == 0x9ec8e95103473 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4f; op2val:0x42c9ec8e95103473;
op3val:0x62; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 1 and fe2 == 0x42c and fm2 == 0x9ec8e950fff82 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4f; op2val:0xc2c9ec8e950fff82;
op3val:0x4d; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x99999999333b0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x50; op2val:0x42c99999999333b0;
op3val:0x4f; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4333333333333 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x50; op2val:0xbff4333333333333;
op3val:0x1b; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000051 and fs2 == 0 and fe2 == 0x405 and fm2 == 0x988b0fcd6e9e0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x51; op2val:0x405988b0fcd6e9e0;
op3val:0x51; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x8f9c18f9c1924 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x52; op2val:0x42c8f9c18f9c1924;
op3val:0x1d; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x8acb90f3a9a47 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x53; op2val:0x42c8acb90f3a9a47;
op3val:0xb; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x8aba9a3784a06 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x53; op2val:0xc088aba9a3784a06;
op3val:0xc; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1861861861862 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x54; op2val:0x3ff1861861861862;
op3val:0x57; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x86186184924d5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x54; op2val:0x42c86186184924d5;
op3val:0x2d; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x861861855553e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x54; op2val:0xc2c861861855553e;
op3val:0xe; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x8618618616d98 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x54; op2val:0xc2c8618618616d98;
op3val:0x13; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x8181817b7b7ce and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x55; op2val:0x42c8181817b7b7ce;
op3val:0x10; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0ba2e8ba2e8ba and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x58; op2val:0x3fd0ba2e8ba2e8ba;
op3val:0x18; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x702e05c0b7c1e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0x42c702e05c0b7c1e;
op3val:0x4e; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x61cc398730e62 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0xc0161cc398730e62;
op3val:0x15; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x405 and fm2 == 0x6d142284508a1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0xc056d142284508a1;
op3val:0x46; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x6b60b60b60b61 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5a; op2val:0xc066b60b60b60b61;
op3val:0x20; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005a and fs2 == 1 and fe2 == 0x409 and fm2 == 0x6bff49f49f49f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5a; op2val:0xc096bff49f49f49f;
op3val:0x22; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5c; op2val:0xbfd0000000000000;
op3val:0x9; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005d and fs2 == 0 and fe2 == 0x42c and fm2 == 0x605816058003d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5d; op2val:0x42c605816058003d;
op3val:0x2d; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005d and fs2 == 1 and fe2 == 0x42c and fm2 == 0x6058160581487 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5d; op2val:0xc2c6058160581487;
op3val:0x15; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005d and fs2 == 1 and fe2 == 0x42c and fm2 == 0x6058160581592 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5d; op2val:0xc2c6058160581592;
op3val:0x33; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x40a and fm2 == 0x5c84c415c9883 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5e; op2val:0xc0a5c84c415c9883;
op3val:0x3a; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x58ed2308158ed and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f; op2val:0x3fc58ed2308158ed;
op3val:0x7; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000060 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x555555555549b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x60; op2val:0xc2c555555555549b;
op3val:0xb; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000061 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x51d07eae2f7ef and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x61; op2val:0xc2c51d07eae2f7ef;
op3val:0x1a; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000063 and fs2 == 1 and fe2 == 0x40c and fm2 == 0x4afb26c9b26ca and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x63; op2val:0xc0c4afb26c9b26ca;
op3val:0x1d; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000004 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000000d and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000004; op2val:0x400000000000000d;
op3val:0x10000000000021; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000008 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000008000d and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000008; op2val:0x400000000008000d;
op3val:0x1000000000002a; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000010 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000040014 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000010; op2val:0x4000000000040014;
op3val:0x10000000000048; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000011 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000013 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000011; op2val:0x4000000000000013;
op3val:0x10000000000008; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000011 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000411 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000011; op2val:0x4000000000000411;
op3val:0x10000000000045; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000013 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000001000b and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000013; op2val:0x400000000001000b;
op3val:0x1000000000003d; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000014 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000080e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000014; op2val:0x400000000000080e;
op3val:0x10000000000044; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000014 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000007ff8 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000014; op2val:0x4000000000007ff8;
op3val:0x10000000000017; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001a and fs2 == 1 and fe2 == 0x3d5 and fm2 == 0xe9bffffffffce and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000001a; op2val:0xbd5e9bffffffffce;
op3val:0x10000000000059; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xffffffffffff0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000001c; op2val:0x3ffffffffffffff0;
op3val:0x10000000000026; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000020 and fs2 == 0 and fe2 == 0x3cf and fm2 == 0x4ffffffffffd6 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000020; op2val:0x3cf4ffffffffffd6;
op3val:0x10000000000019; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x3d9 and fm2 == 0xfe97fffffffc0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000020; op2val:0xbd9fe97fffffffc0;
op3val:0x1000000000005a; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x3cb and fm2 == 0xfffffffffffb8 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000024; op2val:0xbcbfffffffffffb8;
op3val:0x10000000000006; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x3d6 and fm2 == 0xf8bffffffffb9 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000024; op2val:0xbd6f8bffffffffb9;
op3val:0x1000000000003a; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x3df and fm2 == 0xffff5ffffffae and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000029; op2val:0xbdfffff5ffffffae;
op3val:0x1000000000000a; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffde and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000002a; op2val:0x3fffffffffffffde;
op3val:0x10000000000022; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000033 and fs2 == 1 and fe2 == 0x3de and fm2 == 0xfff8dffffff9a and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000033; op2val:0xbdefff8dffffff9a;
op3val:0x10000000000039; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000036 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000001ea and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000036; op2val:0x40000000000001ea;
op3val:0x10000000000041; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000036 and fs2 == 1 and fe2 == 0x3dd and fm2 == 0xfffbfffffff94 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000036; op2val:0xbddfffbfffffff94;
op3val:0x10000000000010; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000039 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000001fd3 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000039; op2val:0x4000000000001fd3;
op3val:0x10000000000018; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000039 and fs2 == 1 and fe2 == 0x3d2 and fm2 == 0xabfffffffffa1 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000039; op2val:0xbd2abfffffffffa1;
op3val:0x1000000000002a; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000003a and fs2 == 1 and fe2 == 0x3dc and fm2 == 0xfff6fffffff8c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000003a; op2val:0xbdcfff6fffffff8c;
op3val:0x10000000000012; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000003b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000006f and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000003b; op2val:0x400000000000006f;
op3val:0x10000000000055; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x3ce and fm2 == 0x9ffffffffff9b and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000003e; op2val:0x3ce9ffffffffff9b;
op3val:0x1000000000000e; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000003e and fs2 == 1 and fe2 == 0x3d8 and fm2 == 0xfdf7fffffff84 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000003e; op2val:0xbd8fdf7fffffff84;
op3val:0x10000000000041; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x3cf and fm2 == 0x9ffffffffff96 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000041; op2val:0x3cf9ffffffffff96;
op3val:0x1000000000003a; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffa2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000041; op2val:0x3fffffffffffffa2;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000042 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000fc0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000042; op2val:0x4000000000000fc0;
op3val:0x10000000000003; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000042 and fs2 == 1 and fe2 == 0x3d7 and fm2 == 0xfbaffffffff7d and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000042; op2val:0xbd7fbaffffffff7d;
op3val:0x10000000000045; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000043 and fs2 == 1 and fe2 == 0x3da and fm2 == 0xffbbfffffff7a and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000043; op2val:0xbdaffbbfffffff7a;
op3val:0x10000000000022; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000001fffe0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000044; op2val:0x40000000001fffe0;
op3val:0x10000000000048; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000046 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffca and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000046; op2val:0x3fffffffffffffca;
op3val:0x10000000000036; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000048 and fs2 == 0 and fe2 == 0x3cd and fm2 == 0x7ffffffffff94 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000048; op2val:0x3cd7ffffffffff94;
op3val:0x10000000000008; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000048 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0xdffffffffff79 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000048; op2val:0xbd0dffffffffff79;
op3val:0x10000000000004; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000048 and fs2 == 1 and fe2 == 0x3db and fm2 == 0xffe5fffffff70 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000048; op2val:0xbdbffe5fffffff70;
op3val:0x1000000000001a; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000000d7 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004b; op2val:0x40000000000000d7;
op3val:0x10000000000043; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004e and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000003fb2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004e; op2val:0x4000000000003fb2;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004e and fs2 == 1 and fe2 == 0x3d4 and fm2 == 0xdefffffffff6e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004e; op2val:0xbd4defffffffff6e;
op3val:0x10000000000042; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004f and fs2 == 1 and fe2 == 0x3d3 and fm2 == 0xbefffffffff76 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004f; op2val:0xbd3befffffffff76;
op3val:0x10000000000041; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000001ffde and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000050; op2val:0x400000000001ffde;
op3val:0x1000000000005d; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000056 and fs2 == 1 and fe2 == 0x3e0 and fm2 == 0xffff07fffff54 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000056; op2val:0xbe0ffff07fffff54;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000058 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000fffca and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000058; op2val:0x40000000000fffca;
op3val:0x10000000000043; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xffffffffffff0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000005f; op2val:0x3ffffffffffffff0;
op3val:0x1000000000002e; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000062 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffff90 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000062; op2val:0x3fffffffffffff90;
op3val:0x1000000000004c; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0xdbfffffffff4a and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000062; op2val:0xbd1dbfffffffff4a;
op3val:0x10000000000009; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000063 and fs2 == 1 and fe2 == 0x3cc and fm2 == 0x7ffffffffff6c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000063; op2val:0xbcc7ffffffffff6c;
op3val:0x1000000000000d; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000001 and fs2 == 1 and fe2 == 0x3dd and fm2 == 0xfffb3fffffffe and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000001; op2val:0xbddfffb3fffffffe;
op3val:0x3f80000000000013; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x3da and fm2 == 0xff81ffffffffc and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000002; op2val:0xbdaff81ffffffffc;
op3val:0x3f8000000000003f; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x3d7 and fm2 == 0xfe8ffffffffea and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000000b; op2val:0xbd7fe8ffffffffea;
op3val:0x3f80000000000017; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000014 and fs2 == 1 and fe2 == 0x3d8 and fm2 == 0xff0ffffffffd8 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000014; op2val:0xbd8ff0ffffffffd8;
op3val:0x3f8000000000001e; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000016 and fs2 == 0 and fe2 == 0x3cf and fm2 == 0x9ffffffffffdc and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000016; op2val:0x3cf9ffffffffffdc;
op3val:0x3f8000000000003a; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0x87fffffffffd5 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000001c; op2val:0x3d187fffffffffd5;
op3val:0x3f80000000000063; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000001e and fs2 == 1 and fe2 == 0x3d6 and fm2 == 0xfd7ffffffffc4 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000001e; op2val:0xbd6fd7ffffffffc4;
op3val:0x3f80000000000014; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000022 and fs2 == 1 and fe2 == 0x3dc and fm2 == 0xffed7ffffffbc and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000022; op2val:0xbdcffed7ffffffbc;
op3val:0x3f80000000000025; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0xb7fffffffffc2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000024; op2val:0xbd1b7fffffffffc2;
op3val:0x3f80000000000012; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x3d3 and fm2 == 0xa4fffffffffc5 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000024; op2val:0xbd3a4fffffffffc5;
op3val:0x3f8000000000005b; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000025 and fs2 == 0 and fe2 == 0x3ce and fm2 == 0xdffffffffffbb and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000025; op2val:0x3cedffffffffffbb;
op3val:0x3f80000000000011; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x3df and fm2 == 0xfffb0ffffffa0 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000030; op2val:0xbdffffb0ffffffa0;
op3val:0x3f8000000000004f; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x3d0 and fm2 == 0x57fffffffffbb and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000033; op2val:0x3d057fffffffffbb;
op3val:0x3f80000000000033; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000034 and fs2 == 0 and fe2 == 0x3cd and fm2 == 0xbffffffffffa5 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000034; op2val:0x3cdbffffffffffa5;
op3val:0x3f80000000000047; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000036 and fs2 == 1 and fe2 == 0x3d4 and fm2 == 0xe8fffffffff99 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000036; op2val:0xbd4e8fffffffff99;
op3val:0x3f8000000000002e; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000036 and fs2 == 1 and fe2 == 0x3de and fm2 == 0xfff75ffffff94 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000036; op2val:0xbdefff75ffffff94;
op3val:0x3f80000000000045; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000038 and fs2 == 1 and fe2 == 0x3d2 and fm2 == 0x71fffffffffaf and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000038; op2val:0xbd271fffffffffaf;
op3val:0x3f80000000000047; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x3cd and fm2 == 0x3ffffffffffb0 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000040; op2val:0xbcd3ffffffffffb0;
op3val:0x3f8000000000000b; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x3e0 and fm2 == 0xfffeb7fffff6e and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000049; op2val:0xbe0fffeb7fffff6e;
op3val:0x3f80000000000029; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000004c and fs2 == 1 and fe2 == 0x3db and fm2 == 0xffe7fffffff68 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000004c; op2val:0xbdbffe7fffffff68;
op3val:0x3f80000000000018; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x3d9 and fm2 == 0xff87fffffff56 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000055; op2val:0xbd9ff87fffffff56;
op3val:0x3f8000000000001e; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x3d5 and fm2 == 0xf3bffffffff54 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000058; op2val:0xbd5f3bffffffff54;
op3val:0x3f80000000000031; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000005f and fs2 == 0 and fe2 == 0x3cf and fm2 == 0xbffffffffff5a and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000005f; op2val:0x3cfbffffffffff5a;
op3val:0x3f80000000000020; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000003 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000004001b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000003; op2val:0x400000000004001b;
op3val:0x3ff000000000003c; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000006 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000027 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000006; op2val:0x4000000000000027;
op3val:0x3ff0000000000056; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000000fd and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000009; op2val:0x40000000000000fd;
op3val:0x3ff000000000000c; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000007fb and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000009; op2val:0x40000000000007fb;
op3val:0x3ff0000000000008; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000000a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000002b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000000a; op2val:0x400000000000002b;
op3val:0x3ff0000000000062; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000023 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000001fb and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000023; op2val:0x40000000000001fb;
op3val:0x3ff000000000003d; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000028 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000002002 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000028; op2val:0x4000000000002002;
op3val:0x3ff0000000000053; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000029 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xffffffffffffa and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000029; op2val:0x3ffffffffffffffa;
op3val:0x3ff000000000002c; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000002c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffbc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000002c; op2val:0x3fffffffffffffbc;
op3val:0x3ff0000000000014; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000002e and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000007ffdd and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000002e; op2val:0x400000000007ffdd;
op3val:0x3ff0000000000016; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000003a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000007fd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000003a; op2val:0x4000000000007fd8;
op3val:0x3ff0000000000025; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffba and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000003f; op2val:0x3fffffffffffffba;
op3val:0x3ff0000000000036; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000040 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000001fffc4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000040; op2val:0x40000000001fffc4;
op3val:0x3ff0000000000008; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000048 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffca and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000048; op2val:0x3fffffffffffffca;
op3val:0x3ff000000000004a; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000003fe2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000004a; op2val:0x4000000000003fe2;
op3val:0x3ff0000000000058; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000053 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000004b; op2val:0x4000000000000053;
op3val:0x3ff000000000003b; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000013 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000004d; op2val:0x4000000000000013;
op3val:0x3ff0000000000040; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000fffb9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000004f; op2val:0x40000000000fffb9;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000056 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000001ffc0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000056; op2val:0x400000000001ffc0;
op3val:0x3ff000000000002d; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffba and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000059; op2val:0x3fffffffffffffba;
op3val:0x3ff000000000002d; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000005a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000003d1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000005a; op2val:0x40000000000003d1;
op3val:0x3ff0000000000056; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000005c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000ffbd and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000005c; op2val:0x400000000000ffbd;
op3val:0x3ff0000000000032; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000005e and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000fcf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000005e; op2val:0x4000000000000fcf;
op3val:0x3ff000000000005a; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000003 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000003; op2val:0x7ff0000000000000;
op3val:0x7fe000000000002c; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000003 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000003; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000032; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffbff54 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000003; op2val:0xbfeffffffffbff54;
op3val:0x7fe0000000000052; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000006 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffff82 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000006; op2val:0xbfefffffffffff82;
op3val:0x7fe0000000000018; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffff7f3c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000008; op2val:0xbfefffffffff7f3c;
op3val:0x7fe0000000000059; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffdffa4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000000a; op2val:0xbfeffffffffdffa4;
op3val:0x7fe0000000000023; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffefff4c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000000b; op2val:0xbfefffffffefff4c;
op3val:0x7fe000000000004e; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffff7ffa2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000000c; op2val:0xbfeffffffff7ffa2;
op3val:0x7fe0000000000022; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffbf9e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000000c; op2val:0xbfefffffffffbf9e;
op3val:0x7fe0000000000024; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffffbc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000000e; op2val:0xbfefffffffffffbc;
op3val:0x7fe000000000000b; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffff9c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000000f; op2val:0xbfefffffffffff9c;
op3val:0x7fe000000000001e; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000011 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffe6e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000011; op2val:0xbfeffffffffffe6e;
op3val:0x7fe0000000000037; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000014 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000014; op2val:0x7ff0000000000000;
op3val:0x7fe000000000005c; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000015 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000015; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000056; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000018 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffeff60 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000018; op2val:0xbfeffffffffeff60;
op3val:0x7fe0000000000037; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000001a; op2val:0x7ff0000000000000;
op3val:0x7fe000000000002e; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000001c; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000056; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000001d; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000015; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffdfffb2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000001d; op2val:0xbfefffffffdfffb2;
op3val:0x7fe0000000000009; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000021 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000021; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000012; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000022 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffbfff9a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000022; op2val:0xbfefffffffbfff9a;
op3val:0x7fe0000000000010; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000022 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffff54 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000022; op2val:0xbfefffffffffff54;
op3val:0x7fe0000000000023; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000023 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffe76 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000023; op2val:0xbfeffffffffffe76;
op3val:0x7fe0000000000061; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000027 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000027; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000010; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000029 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000029; op2val:0x7ff0000000000000;
op3val:0x7fe000000000000c; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000002b; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000043; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000002c; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000036; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000002f; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000013; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000033; op2val:0x7ff0000000000000;
op3val:0x7fe000000000003f; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffb6e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000034; op2val:0xbfeffffffffffb6e;
op3val:0x7fe0000000000014; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000037 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000037; op2val:0x7ff0000000000000;
op3val:0x7fe000000000000a; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000039 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000039; op2val:0x7ff0000000000000;
op3val:0x7fe000000000005b; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffff7fff84 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000003b; op2val:0xbfefffffff7fff84;
op3val:0x7fe0000000000002; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000003c; op2val:0x7ff0000000000000;
op3val:0x7fe000000000001d; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000042 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000042; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000034; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000042 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffff64 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000042; op2val:0xbfefffffffffff64;
op3val:0x7fe0000000000009; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000045 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffff6f0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000045; op2val:0xbfeffffffffff6f0;
op3val:0x7fe0000000000042; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000047 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000047; op2val:0x7ff0000000000000;
op3val:0x7fe000000000003b; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffeeea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000004a; op2val:0xbfefffffffffeeea;
op3val:0x7fe0000000000040; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000050 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffff10 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000050; op2val:0xbfefffffffffff10;
op3val:0x7fe0000000000026; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000053; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000055; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000057 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffd0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000057; op2val:0xbfeffffffffffd0c;
op3val:0x7fe0000000000022; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffdef6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000005a; op2val:0xbfefffffffffdef6;
op3val:0x7fe000000000002a; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000005b; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000038; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000005d; op2val:0x7ff0000000000000;
op3val:0x7fe000000000002f; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000060 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000060; op2val:0x7ff0000000000000;
op3val:0x7fe000000000000d; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x40e and fm2 == 0x0094000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1; op2val:0x40e0094000000000;
op3val:0x49; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x432 and fm2 == 0xffffffff0007a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1; op2val:0x432ffffffff0007a;
op3val:0x3e; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x431 and fm2 == 0xffffffff7ff44 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2; op2val:0xc31ffffffff7ff44;
op3val:0x5d; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x40a and fm2 == 0xfcf8000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4; op2val:0xc0afcf8000000000;
op3val:0x62; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x430 and fm2 == 0xffffffffff7d6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4; op2val:0xc30ffffffffff7d6;
op3val:0x14; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7; op2val:0x4000000000000000;
op3val:0xa; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 0 and fe2 == 0x40a and fm2 == 0x24d6db6db6db7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7; op2val:0x40a24d6db6db6db7;
op3val:0xe; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8400000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x8; op2val:0x4028400000000000;
op3val:0x41; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x0920000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x8; op2val:0x4070920000000000;
op3val:0x49; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 0 and fe2 == 0x40e and fm2 == 0x999f333333333 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xa; op2val:0x40e999f333333333;
op3val:0x1b; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x40f and fm2 == 0x9998000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xa; op2val:0xc0f9998000000000;
op3val:0x10; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 858*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(1,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(4841369599422234746,64,FLEN)
NAN_BOXED(4841369599422234746,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(14060238036650164036,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4832362400168541958,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(13884544324869292032,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4611686018427387904,64,FLEN)
NAN_BOXED(4611686018427387904,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4657370098269121975,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(10,64,FLEN)
NAN_BOXED(4677438957816066867,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(10,64,FLEN)
NAN_BOXED(13905314099517980672,64,FLEN)
NAN_BOXED(16,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(13831782710098621533,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(13882126348866408820,64,FLEN)
NAN_BOXED(74,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(4624821517340551851,64,FLEN)
NAN_BOXED(56,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(4616449441110183621,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(4666770536045155249,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(4612168546958891886,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(4617556782227353015,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(4615889378079600367,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(16,64,FLEN)
NAN_BOXED(4643243101656186880,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(16,64,FLEN)
NAN_BOXED(4683743771379105792,64,FLEN)
NAN_BOXED(74,64,FLEN)
NAN_BOXED(17,64,FLEN)
NAN_BOXED(4617580435586740465,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(17,64,FLEN)
NAN_BOXED(14046197402518051411,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(14045726437847655209,64,FLEN)
NAN_BOXED(56,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(4677818329835972716,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(4659431871058909594,64,FLEN)
NAN_BOXED(69,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(4681942457800196096,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(4641093451708491678,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(13895651378927429818,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(13909162588564595433,64,FLEN)
NAN_BOXED(97,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(14044270728880919619,64,FLEN)
NAN_BOXED(17,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(4609884578576439706,64,FLEN)
NAN_BOXED(48,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(4631017719827875758,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(4820112609182094492,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(14043484646031501521,64,FLEN)
NAN_BOXED(28,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(4819890893508050997,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(4635189178982727680,64,FLEN)
NAN_BOXED(57,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(4819685601217269984,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(13858235434614458747,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(28,64,FLEN)
NAN_BOXED(4612731496912313198,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(4661691731430252262,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(4819317490903037190,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(30,64,FLEN)
NAN_BOXED(4819151841261553865,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(30,64,FLEN)
NAN_BOXED(4819151841261588763,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(4625451052772334823,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(13866556864394690560,64,FLEN)
NAN_BOXED(24,64,FLEN)
NAN_BOXED(33,64,FLEN)
NAN_BOXED(4683470762824139745,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(4818321766036150920,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(13841515422394937585,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(4817850801369236928,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(37,64,FLEN)
NAN_BOXED(13892386502404812911,64,FLEN)
NAN_BOXED(78,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(4668811405459138668,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(13878469706377767595,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(4681942296309425766,64,FLEN)
NAN_BOXED(72,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(13850683349111272323,64,FLEN)
NAN_BOXED(60,64,FLEN)
NAN_BOXED(42,64,FLEN)
NAN_BOXED(4602678819172646912,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(43,64,FLEN)
NAN_BOXED(14039919470889993673,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(4640817079227300399,64,FLEN)
NAN_BOXED(77,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(13828507364915079354,64,FLEN)
NAN_BOXED(95,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(4816249521501724935,64,FLEN)
NAN_BOXED(58,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(14039621558356456942,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(4816110279774118285,64,FLEN)
NAN_BOXED(94,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(4611398554621385532,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(4815976963226395858,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(13859146623900768735,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(13859178065254550245,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(50,64,FLEN)
NAN_BOXED(14038981046409499651,64,FLEN)
NAN_BOXED(92,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(4610273124426644219,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(4612348312490236506,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(4613496288865840750,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(4653366995102769313,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(4621829943549614238,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(4815387293880761214,64,FLEN)
NAN_BOXED(95,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(4617211267970226707,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(56,64,FLEN)
NAN_BOXED(14038363409889174570,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(4610693699865424913,64,FLEN)
NAN_BOXED(88,64,FLEN)
NAN_BOXED(60,64,FLEN)
NAN_BOXED(4606131578886964292,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(60,64,FLEN)
NAN_BOXED(14038020278488993940,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(4596846288507691679,64,FLEN)
NAN_BOXED(16,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(14037941527020082875,64,FLEN)
NAN_BOXED(85,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(4600354380655294398,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(4617842148563188703,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(14037865315921170535,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(13836465430165716992,64,FLEN)
NAN_BOXED(88,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(13880091027898892288,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(13902473388589785970,64,FLEN)
NAN_BOXED(43,64,FLEN)
NAN_BOXED(66,64,FLEN)
NAN_BOXED(4608342436885855263,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(66,64,FLEN)
NAN_BOXED(13897835279733283126,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(4813944694229743522,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(13848148742258736907,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(13884192833976761879,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(13870547186123353389,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(14037190203261583177,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(69,64,FLEN)
NAN_BOXED(4599154262942530872,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(69,64,FLEN)
NAN_BOXED(13842515102491251816,64,FLEN)
NAN_BOXED(55,64,FLEN)
NAN_BOXED(69,64,FLEN)
NAN_BOXED(13897455479589274075,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(4624744871572245663,64,FLEN)
NAN_BOXED(55,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(14036832004784377092,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(72,64,FLEN)
NAN_BOXED(4607933018737912491,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(72,64,FLEN)
NAN_BOXED(4660225364167083804,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(13828456888705059012,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(74,64,FLEN)
NAN_BOXED(4607425856617713110,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(74,64,FLEN)
NAN_BOXED(4646515456276161619,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(4641893912927975506,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(13851529970919271301,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(76,64,FLEN)
NAN_BOXED(14036297849157820744,64,FLEN)
NAN_BOXED(60,64,FLEN)
NAN_BOXED(78,64,FLEN)
NAN_BOXED(4603602634480825475,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(4659515525800554029,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(4668522933823325612,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(4812637773952463987,64,FLEN)
NAN_BOXED(98,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(14036009810807226242,64,FLEN)
NAN_BOXED(77,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(4812546561807692720,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(13831736650556977971,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(81,64,FLEN)
NAN_BOXED(4636887585092200928,64,FLEN)
NAN_BOXED(81,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(4812370811578751268,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(4812286112669801031,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(13873527397195205126,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(4607611333050243170,64,FLEN)
NAN_BOXED(87,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(4812203430406333653,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(14035575467261908286,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(14035575467262700952,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(85,64,FLEN)
NAN_BOXED(4812122693601572814,64,FLEN)
NAN_BOXED(16,64,FLEN)
NAN_BOXED(88,64,FLEN)
NAN_BOXED(4598379928619247802,64,FLEN)
NAN_BOXED(24,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(4811817889508850718,64,FLEN)
NAN_BOXED(78,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(13841282131171675746,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(13859494985352939681,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(90,64,FLEN)
NAN_BOXED(13863968662890089313,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(90,64,FLEN)
NAN_BOXED(13877490359154111647,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(92,64,FLEN)
NAN_BOXED(13821547256400052224,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(4811539305117253693,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(14034911341972034695,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(14034911341972034962,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(94,64,FLEN)
NAN_BOXED(13881721656279079043,64,FLEN)
NAN_BOXED(58,64,FLEN)
NAN_BOXED(95,64,FLEN)
NAN_BOXED(4595236028209518829,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(14034717638762255515,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(97,64,FLEN)
NAN_BOXED(14034655733612738543,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(99,64,FLEN)
NAN_BOXED(13890420331578599114,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(4503599627370500,64,FLEN)
NAN_BOXED(4611686018427387917,64,FLEN)
NAN_BOXED(4503599627370529,64,FLEN)
NAN_BOXED(4503599627370504,64,FLEN)
NAN_BOXED(4611686018427912205,64,FLEN)
NAN_BOXED(4503599627370538,64,FLEN)
NAN_BOXED(4503599627370512,64,FLEN)
NAN_BOXED(4611686018427650068,64,FLEN)
NAN_BOXED(4503599627370568,64,FLEN)
NAN_BOXED(4503599627370513,64,FLEN)
NAN_BOXED(4611686018427387923,64,FLEN)
NAN_BOXED(4503599627370504,64,FLEN)
NAN_BOXED(4503599627370513,64,FLEN)
NAN_BOXED(4611686018427388945,64,FLEN)
NAN_BOXED(4503599627370565,64,FLEN)
NAN_BOXED(4503599627370515,64,FLEN)
NAN_BOXED(4611686018427453451,64,FLEN)
NAN_BOXED(4503599627370557,64,FLEN)
NAN_BOXED(4503599627370516,64,FLEN)
NAN_BOXED(4611686018427389966,64,FLEN)
NAN_BOXED(4503599627370564,64,FLEN)
NAN_BOXED(4503599627370516,64,FLEN)
NAN_BOXED(4611686018427420664,64,FLEN)
NAN_BOXED(4503599627370519,64,FLEN)
NAN_BOXED(4503599627370522,64,FLEN)
NAN_BOXED(13645515444793114574,64,FLEN)
NAN_BOXED(4503599627370585,64,FLEN)
NAN_BOXED(4503599627370524,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(4503599627370534,64,FLEN)
NAN_BOXED(4503599627370528,64,FLEN)
NAN_BOXED(4392417011569786838,64,FLEN)
NAN_BOXED(4503599627370521,64,FLEN)
NAN_BOXED(4503599627370528,64,FLEN)
NAN_BOXED(13663896530430459840,64,FLEN)
NAN_BOXED(4503599627370586,64,FLEN)
NAN_BOXED(4503599627370532,64,FLEN)
NAN_BOXED(13600870874658897848,64,FLEN)
NAN_BOXED(4503599627370502,64,FLEN)
NAN_BOXED(4503599627370532,64,FLEN)
NAN_BOXED(13650282927211151289,64,FLEN)
NAN_BOXED(4503599627370554,64,FLEN)
NAN_BOXED(4503599627370537,64,FLEN)
NAN_BOXED(13690942824256634798,64,FLEN)
NAN_BOXED(4503599627370506,64,FLEN)
NAN_BOXED(4503599627370538,64,FLEN)
NAN_BOXED(4611686018427387870,64,FLEN)
NAN_BOXED(4503599627370530,64,FLEN)
NAN_BOXED(4503599627370547,64,FLEN)
NAN_BOXED(13686438777952665498,64,FLEN)
NAN_BOXED(4503599627370553,64,FLEN)
NAN_BOXED(4503599627370550,64,FLEN)
NAN_BOXED(4611686018427388394,64,FLEN)
NAN_BOXED(4503599627370561,64,FLEN)
NAN_BOXED(4503599627370550,64,FLEN)
NAN_BOXED(13681935393073659796,64,FLEN)
NAN_BOXED(4503599627370512,64,FLEN)
NAN_BOXED(4503599627370553,64,FLEN)
NAN_BOXED(4611686018427396051,64,FLEN)
NAN_BOXED(4503599627370520,64,FLEN)
NAN_BOXED(4503599627370553,64,FLEN)
NAN_BOXED(13630918328422760353,64,FLEN)
NAN_BOXED(4503599627370538,64,FLEN)
NAN_BOXED(4503599627370554,64,FLEN)
NAN_BOXED(13677431449848905612,64,FLEN)
NAN_BOXED(4503599627370514,64,FLEN)
NAN_BOXED(4503599627370555,64,FLEN)
NAN_BOXED(4611686018427388015,64,FLEN)
NAN_BOXED(4503599627370581,64,FLEN)
NAN_BOXED(4503599627370558,64,FLEN)
NAN_BOXED(4389320786825969563,64,FLEN)
NAN_BOXED(4503599627370510,64,FLEN)
NAN_BOXED(4503599627370558,64,FLEN)
NAN_BOXED(13659381935686811524,64,FLEN)
NAN_BOXED(4503599627370561,64,FLEN)
NAN_BOXED(4503599627370561,64,FLEN)
NAN_BOXED(4393824386453340054,64,FLEN)
NAN_BOXED(4503599627370554,64,FLEN)
NAN_BOXED(4503599627370561,64,FLEN)
NAN_BOXED(4611686018427387810,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(4503599627370562,64,FLEN)
NAN_BOXED(4611686018427391936,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(4503599627370562,64,FLEN)
NAN_BOXED(13654838203885027197,64,FLEN)
NAN_BOXED(4503599627370565,64,FLEN)
NAN_BOXED(4503599627370563,64,FLEN)
NAN_BOXED(13668420196145037178,64,FLEN)
NAN_BOXED(4503599627370530,64,FLEN)
NAN_BOXED(4503599627370564,64,FLEN)
NAN_BOXED(4611686018429485024,64,FLEN)
NAN_BOXED(4503599627370568,64,FLEN)
NAN_BOXED(4503599627370566,64,FLEN)
NAN_BOXED(4611686018427387850,64,FLEN)
NAN_BOXED(4503599627370550,64,FLEN)
NAN_BOXED(4503599627370568,64,FLEN)
NAN_BOXED(4384254237245177748,64,FLEN)
NAN_BOXED(4503599627370504,64,FLEN)
NAN_BOXED(4503599627370568,64,FLEN)
NAN_BOXED(13622825922842328953,64,FLEN)
NAN_BOXED(4503599627370500,64,FLEN)
NAN_BOXED(4503599627370568,64,FLEN)
NAN_BOXED(13672926681990430576,64,FLEN)
NAN_BOXED(4503599627370522,64,FLEN)
NAN_BOXED(4503599627370571,64,FLEN)
NAN_BOXED(4611686018427388119,64,FLEN)
NAN_BOXED(4503599627370563,64,FLEN)
NAN_BOXED(4503599627370574,64,FLEN)
NAN_BOXED(4611686018427404210,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(4503599627370574,64,FLEN)
NAN_BOXED(13640822729165766510,64,FLEN)
NAN_BOXED(4503599627370562,64,FLEN)
NAN_BOXED(4503599627370575,64,FLEN)
NAN_BOXED(13635756179584974710,64,FLEN)
NAN_BOXED(4503599627370561,64,FLEN)
NAN_BOXED(4503599627370576,64,FLEN)
NAN_BOXED(4611686018427518942,64,FLEN)
NAN_BOXED(4503599627370589,64,FLEN)
NAN_BOXED(4503599627370582,64,FLEN)
NAN_BOXED(13695446400261685076,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(4503599627370584,64,FLEN)
NAN_BOXED(4611686018428436426,64,FLEN)
NAN_BOXED(4503599627370563,64,FLEN)
NAN_BOXED(4503599627370591,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(4503599627370542,64,FLEN)
NAN_BOXED(4503599627370594,64,FLEN)
NAN_BOXED(4611686018427387792,64,FLEN)
NAN_BOXED(4503599627370572,64,FLEN)
NAN_BOXED(4503599627370594,64,FLEN)
NAN_BOXED(13627259153725521738,64,FLEN)
NAN_BOXED(4503599627370505,64,FLEN)
NAN_BOXED(4503599627370595,64,FLEN)
NAN_BOXED(13603122674472583020,64,FLEN)
NAN_BOXED(4503599627370509,64,FLEN)
NAN_BOXED(4575657221408423937,64,FLEN)
NAN_BOXED(13681935341534052350,64,FLEN)
NAN_BOXED(4575657221408423955,64,FLEN)
NAN_BOXED(4575657221408423938,64,FLEN)
NAN_BOXED(13668416210415386620,64,FLEN)
NAN_BOXED(4575657221408423999,64,FLEN)
NAN_BOXED(4575657221408423947,64,FLEN)
NAN_BOXED(13654888781419905002,64,FLEN)
NAN_BOXED(4575657221408423959,64,FLEN)
NAN_BOXED(4575657221408423956,64,FLEN)
NAN_BOXED(13659401177140297688,64,FLEN)
NAN_BOXED(4575657221408423966,64,FLEN)
NAN_BOXED(4575657221408423958,64,FLEN)
NAN_BOXED(4393824386453340124,64,FLEN)
NAN_BOXED(4575657221408423994,64,FLEN)
NAN_BOXED(4575657221408423964,64,FLEN)
NAN_BOXED(4402409373243015125,64,FLEN)
NAN_BOXED(4575657221408424035,64,FLEN)
NAN_BOXED(4575657221408423966,64,FLEN)
NAN_BOXED(13650366490094862276,64,FLEN)
NAN_BOXED(4575657221408423956,64,FLEN)
NAN_BOXED(4575657221408423970,64,FLEN)
NAN_BOXED(13677430797013876668,64,FLEN)
NAN_BOXED(4575657221408423973,64,FLEN)
NAN_BOXED(4575657221408423972,64,FLEN)
NAN_BOXED(13626625835027922882,64,FLEN)
NAN_BOXED(4575657221408423954,64,FLEN)
NAN_BOXED(4575657221408423972,64,FLEN)
NAN_BOXED(13635298782747819973,64,FLEN)
NAN_BOXED(4575657221408424027,64,FLEN)
NAN_BOXED(4575657221408423973,64,FLEN)
NAN_BOXED(4390446686732812219,64,FLEN)
NAN_BOXED(4575657221408423953,64,FLEN)
NAN_BOXED(4575657221408423984,64,FLEN)
NAN_BOXED(13690942527903891360,64,FLEN)
NAN_BOXED(4575657221408424015,64,FLEN)
NAN_BOXED(4575657221408423987,64,FLEN)
NAN_BOXED(4397061348685512635,64,FLEN)
NAN_BOXED(4575657221408423987,64,FLEN)
NAN_BOXED(4575657221408423988,64,FLEN)
NAN_BOXED(4385380137152020389,64,FLEN)
NAN_BOXED(4575657221408424007,64,FLEN)
NAN_BOXED(4575657221408423990,64,FLEN)
NAN_BOXED(13640998651026210713,64,FLEN)
NAN_BOXED(4575657221408423982,64,FLEN)
NAN_BOXED(4575657221408423990,64,FLEN)
NAN_BOXED(13686438674873450388,64,FLEN)
NAN_BOXED(4575657221408424005,64,FLEN)
NAN_BOXED(4575657221408423992,64,FLEN)
NAN_BOXED(13629897981632184239,64,FLEN)
NAN_BOXED(4575657221408424007,64,FLEN)
NAN_BOXED(4575657221408424000,64,FLEN)
NAN_BOXED(13606500374193110960,64,FLEN)
NAN_BOXED(4575657221408423947,64,FLEN)
NAN_BOXED(4575657221408424009,64,FLEN)
NAN_BOXED(13695446378786848622,64,FLEN)
NAN_BOXED(4575657221408423977,64,FLEN)
NAN_BOXED(4575657221408424012,64,FLEN)
NAN_BOXED(13672926819429384040,64,FLEN)
NAN_BOXED(4575657221408423960,64,FLEN)
NAN_BOXED(4575657221408424021,64,FLEN)
NAN_BOXED(13663913023104876374,64,FLEN)
NAN_BOXED(4575657221408423966,64,FLEN)
NAN_BOXED(4575657221408424024,64,FLEN)
NAN_BOXED(13645691366653558612,64,FLEN)
NAN_BOXED(4575657221408423985,64,FLEN)
NAN_BOXED(4575657221408424031,64,FLEN)
NAN_BOXED(4394387336406761306,64,FLEN)
NAN_BOXED(4575657221408423968,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(4611686018427650075,64,FLEN)
NAN_BOXED(4607182418800017468,64,FLEN)
NAN_BOXED(4607182418800017414,64,FLEN)
NAN_BOXED(4611686018427387943,64,FLEN)
NAN_BOXED(4607182418800017494,64,FLEN)
NAN_BOXED(4607182418800017417,64,FLEN)
NAN_BOXED(4611686018427388157,64,FLEN)
NAN_BOXED(4607182418800017420,64,FLEN)
NAN_BOXED(4607182418800017417,64,FLEN)
NAN_BOXED(4611686018427389947,64,FLEN)
NAN_BOXED(4607182418800017416,64,FLEN)
NAN_BOXED(4607182418800017418,64,FLEN)
NAN_BOXED(4611686018427387947,64,FLEN)
NAN_BOXED(4607182418800017506,64,FLEN)
NAN_BOXED(4607182418800017443,64,FLEN)
NAN_BOXED(4611686018427388411,64,FLEN)
NAN_BOXED(4607182418800017469,64,FLEN)
NAN_BOXED(4607182418800017448,64,FLEN)
NAN_BOXED(4611686018427396098,64,FLEN)
NAN_BOXED(4607182418800017491,64,FLEN)
NAN_BOXED(4607182418800017449,64,FLEN)
NAN_BOXED(4611686018427387898,64,FLEN)
NAN_BOXED(4607182418800017452,64,FLEN)
NAN_BOXED(4607182418800017452,64,FLEN)
NAN_BOXED(4611686018427387836,64,FLEN)
NAN_BOXED(4607182418800017428,64,FLEN)
NAN_BOXED(4607182418800017454,64,FLEN)
NAN_BOXED(4611686018427912157,64,FLEN)
NAN_BOXED(4607182418800017430,64,FLEN)
NAN_BOXED(4607182418800017466,64,FLEN)
NAN_BOXED(4611686018427420632,64,FLEN)
NAN_BOXED(4607182418800017445,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(4611686018427387834,64,FLEN)
NAN_BOXED(4607182418800017462,64,FLEN)
NAN_BOXED(4607182418800017472,64,FLEN)
NAN_BOXED(4611686018429484996,64,FLEN)
NAN_BOXED(4607182418800017416,64,FLEN)
NAN_BOXED(4607182418800017480,64,FLEN)
NAN_BOXED(4611686018427387850,64,FLEN)
NAN_BOXED(4607182418800017482,64,FLEN)
NAN_BOXED(4607182418800017482,64,FLEN)
NAN_BOXED(4611686018427404258,64,FLEN)
NAN_BOXED(4607182418800017496,64,FLEN)
NAN_BOXED(4607182418800017483,64,FLEN)
NAN_BOXED(4611686018427387987,64,FLEN)
NAN_BOXED(4607182418800017467,64,FLEN)
NAN_BOXED(4607182418800017485,64,FLEN)
NAN_BOXED(4611686018427387923,64,FLEN)
NAN_BOXED(4607182418800017472,64,FLEN)
NAN_BOXED(4607182418800017487,64,FLEN)
NAN_BOXED(4611686018428436409,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(4607182418800017494,64,FLEN)
NAN_BOXED(4611686018427518912,64,FLEN)
NAN_BOXED(4607182418800017453,64,FLEN)
NAN_BOXED(4607182418800017497,64,FLEN)
NAN_BOXED(4611686018427387834,64,FLEN)
NAN_BOXED(4607182418800017453,64,FLEN)
NAN_BOXED(4607182418800017498,64,FLEN)
NAN_BOXED(4611686018427388881,64,FLEN)
NAN_BOXED(4607182418800017494,64,FLEN)
NAN_BOXED(4607182418800017500,64,FLEN)
NAN_BOXED(4611686018427453373,64,FLEN)
NAN_BOXED(4607182418800017458,64,FLEN)
NAN_BOXED(4607182418800017502,64,FLEN)
NAN_BOXED(4611686018427391951,64,FLEN)
NAN_BOXED(4607182418800017498,64,FLEN)
NAN_BOXED(9214364837600034819,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034860,64,FLEN)
NAN_BOXED(9214364837600034819,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034866,64,FLEN)
NAN_BOXED(9214364837600034819,64,FLEN)
NAN_BOXED(13830554455654530900,64,FLEN)
NAN_BOXED(9214364837600034898,64,FLEN)
NAN_BOXED(9214364837600034822,64,FLEN)
NAN_BOXED(13830554455654793090,64,FLEN)
NAN_BOXED(9214364837600034840,64,FLEN)
NAN_BOXED(9214364837600034824,64,FLEN)
NAN_BOXED(13830554455654760252,64,FLEN)
NAN_BOXED(9214364837600034905,64,FLEN)
NAN_BOXED(9214364837600034826,64,FLEN)
NAN_BOXED(13830554455654662052,64,FLEN)
NAN_BOXED(9214364837600034851,64,FLEN)
NAN_BOXED(9214364837600034827,64,FLEN)
NAN_BOXED(13830554455653744460,64,FLEN)
NAN_BOXED(9214364837600034894,64,FLEN)
NAN_BOXED(9214364837600034828,64,FLEN)
NAN_BOXED(13830554455654268834,64,FLEN)
NAN_BOXED(9214364837600034850,64,FLEN)
NAN_BOXED(9214364837600034828,64,FLEN)
NAN_BOXED(13830554455654776734,64,FLEN)
NAN_BOXED(9214364837600034852,64,FLEN)
NAN_BOXED(9214364837600034830,64,FLEN)
NAN_BOXED(13830554455654793148,64,FLEN)
NAN_BOXED(9214364837600034827,64,FLEN)
NAN_BOXED(9214364837600034831,64,FLEN)
NAN_BOXED(13830554455654793116,64,FLEN)
NAN_BOXED(9214364837600034846,64,FLEN)
NAN_BOXED(9214364837600034833,64,FLEN)
NAN_BOXED(13830554455654792814,64,FLEN)
NAN_BOXED(9214364837600034871,64,FLEN)
NAN_BOXED(9214364837600034836,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034908,64,FLEN)
NAN_BOXED(9214364837600034837,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034902,64,FLEN)
NAN_BOXED(9214364837600034840,64,FLEN)
NAN_BOXED(13830554455654727520,64,FLEN)
NAN_BOXED(9214364837600034871,64,FLEN)
NAN_BOXED(9214364837600034842,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034862,64,FLEN)
NAN_BOXED(9214364837600034844,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034902,64,FLEN)
NAN_BOXED(9214364837600034845,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034837,64,FLEN)
NAN_BOXED(9214364837600034845,64,FLEN)
NAN_BOXED(13830554455652695986,64,FLEN)
NAN_BOXED(9214364837600034825,64,FLEN)
NAN_BOXED(9214364837600034849,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034834,64,FLEN)
NAN_BOXED(9214364837600034850,64,FLEN)
NAN_BOXED(13830554455650598810,64,FLEN)
NAN_BOXED(9214364837600034832,64,FLEN)
NAN_BOXED(9214364837600034850,64,FLEN)
NAN_BOXED(13830554455654793044,64,FLEN)
NAN_BOXED(9214364837600034851,64,FLEN)
NAN_BOXED(9214364837600034851,64,FLEN)
NAN_BOXED(13830554455654792822,64,FLEN)
NAN_BOXED(9214364837600034913,64,FLEN)
NAN_BOXED(9214364837600034855,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034832,64,FLEN)
NAN_BOXED(9214364837600034857,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034828,64,FLEN)
NAN_BOXED(9214364837600034859,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034883,64,FLEN)
NAN_BOXED(9214364837600034860,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034870,64,FLEN)
NAN_BOXED(9214364837600034863,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034835,64,FLEN)
NAN_BOXED(9214364837600034867,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034879,64,FLEN)
NAN_BOXED(9214364837600034868,64,FLEN)
NAN_BOXED(13830554455654792046,64,FLEN)
NAN_BOXED(9214364837600034836,64,FLEN)
NAN_BOXED(9214364837600034871,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034826,64,FLEN)
NAN_BOXED(9214364837600034873,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034907,64,FLEN)
NAN_BOXED(9214364837600034875,64,FLEN)
NAN_BOXED(13830554455646404484,64,FLEN)
NAN_BOXED(9214364837600034818,64,FLEN)
NAN_BOXED(9214364837600034876,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034845,64,FLEN)
NAN_BOXED(9214364837600034882,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034868,64,FLEN)
NAN_BOXED(9214364837600034882,64,FLEN)
NAN_BOXED(13830554455654793060,64,FLEN)
NAN_BOXED(9214364837600034825,64,FLEN)
NAN_BOXED(9214364837600034885,64,FLEN)
NAN_BOXED(13830554455654790896,64,FLEN)
NAN_BOXED(9214364837600034882,64,FLEN)
NAN_BOXED(9214364837600034887,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034875,64,FLEN)
NAN_BOXED(9214364837600034890,64,FLEN)
NAN_BOXED(13830554455654788842,64,FLEN)
NAN_BOXED(9214364837600034880,64,FLEN)
NAN_BOXED(9214364837600034896,64,FLEN)
NAN_BOXED(13830554455654792976,64,FLEN)
NAN_BOXED(9214364837600034854,64,FLEN)
NAN_BOXED(9214364837600034899,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034901,64,FLEN)
NAN_BOXED(9214364837600034903,64,FLEN)
NAN_BOXED(13830554455654792460,64,FLEN)
NAN_BOXED(9214364837600034850,64,FLEN)
NAN_BOXED(9214364837600034906,64,FLEN)
NAN_BOXED(13830554455654784758,64,FLEN)
NAN_BOXED(9214364837600034858,64,FLEN)
NAN_BOXED(9214364837600034907,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034872,64,FLEN)
NAN_BOXED(9214364837600034909,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034863,64,FLEN)
NAN_BOXED(9214364837600034912,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(9214364837600034829,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(4674746583693131776,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(4841369599422234746,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(14060238036650164036,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(13884544324869292032,64,FLEN)
NAN_BOXED(98,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(14055734437023315926,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4611686018427387904,64,FLEN)
NAN_BOXED(10,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4657370098269121975,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4623015386239991808,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4643371744516636672,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(10,64,FLEN)
NAN_BOXED(4677438957816066867,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(10,64,FLEN)
NAN_BOXED(13905314099517980672,64,FLEN)
NAN_BOXED(16,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 62*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
