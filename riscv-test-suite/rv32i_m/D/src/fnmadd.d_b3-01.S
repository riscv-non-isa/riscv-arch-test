
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b3 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b3)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f20, rs2==f20, rs3==f1, rd==f8,fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xd9a84a89337ff and fs2 == 0 and fe2 == 0x409 and fm2 == 0x6ed5a71e5433a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x535cf46588f5e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f20; op2:f20; op3:f1; dest:f8; op1val:0x7f3d9a84a89337ff; op2val:0x7f3d9a84a89337ff;
op3val:0x7fe535cf46588f5e; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f8, f20, f20, f1, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f29, rs2==f14, rs3==f29, rd==f7,fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xd9a84a89337ff and fs2 == 0 and fe2 == 0x409 and fm2 == 0x6ed5a71e5433a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x535cf46588f5e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f29; op2:f14; op3:f29; dest:f7; op1val:0x7f3d9a84a89337ff; op2val:0x4096ed5a71e5433a;
op3val:0x7f3d9a84a89337ff; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f7, f29, f14, f29, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rs3 == rd, rs1==f10, rs2==f10, rs3==f10, rd==f10,fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xd9a84a89337ff and fs2 == 0 and fe2 == 0x409 and fm2 == 0x6ed5a71e5433a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x535cf46588f5e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f10; op2:f10; op3:f10; dest:f10; op1val:0x7f3d9a84a89337ff; op2val:0x7f3d9a84a89337ff;
op3val:0x7f3d9a84a89337ff; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f10, f10, f10, f10, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==f17, rs2==f31, rs3==f17, rd==f17,fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xd9a84a89337ff and fs2 == 0 and fe2 == 0x409 and fm2 == 0x6ed5a71e5433a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x535cf46588f5e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f17; op2:f31; op3:f17; dest:f17; op1val:0x7f3d9a84a89337ff; op2val:0x4096ed5a71e5433a;
op3val:0x7f3d9a84a89337ff; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f17, f17, f31, f17, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==f8, rs2==f8, rs3==f8, rd==f12,fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xd9a84a89337ff and fs2 == 0 and fe2 == 0x409 and fm2 == 0x6ed5a71e5433a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x535cf46588f5e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f8; op2:f8; op3:f8; dest:f12; op1val:0x7f3d9a84a89337ff; op2val:0x7f3d9a84a89337ff;
op3val:0x7f3d9a84a89337ff; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f12, f8, f8, f8, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f5, rs2==f29, rs3==f26, rd==f29,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x91fb87d28a9ff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x1fb84d9a794fa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc3ca63e9e063f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f5; op2:f29; op3:f26; dest:f29; op1val:0x7f591fb87d28a9ff; op2val:0x4081fb84d9a794fa;
op3val:0x7fec3ca63e9e063f; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f29, f5, f29, f26, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f23, rs2==f23, rs3==f30, rd==f23,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x91fb87d28a9ff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x1fb84d9a794fa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc3ca63e9e063f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f23; op2:f23; op3:f30; dest:f23; op1val:0x7f591fb87d28a9ff; op2val:0x7f591fb87d28a9ff;
op3val:0x7fec3ca63e9e063f; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f23, f23, f23, f30, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f15, rs2==f11, rs3==f11, rd==f14,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x91fb87d28a9ff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x1fb84d9a794fa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc3ca63e9e063f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f15; op2:f11; op3:f11; dest:f14; op1val:0x7f591fb87d28a9ff; op2val:0x4081fb84d9a794fa;
op3val:0x4081fb84d9a794fa; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f14, f15, f11, f11, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f19, rs2==f1, rs3==f31, rd==f31,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x91fb87d28a9ff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x1fb84d9a794fa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc3ca63e9e063f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f19; op2:f1; op3:f31; dest:f31; op1val:0x7f591fb87d28a9ff; op2val:0x4081fb84d9a794fa;
op3val:0x7fec3ca63e9e063f; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f19, f1, f31, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f0, rs2==f27, rs3==f21, rd==f0,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x91fb87d28a9ff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x1fb84d9a794fa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc3ca63e9e063f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f0; op2:f27; op3:f21; dest:f0; op1val:0x7f591fb87d28a9ff; op2val:0x4081fb84d9a794fa;
op3val:0x7fec3ca63e9e063f; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f0, f0, f27, f21, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f14, rs2==f19, rs3==f20, rd==f5,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x3cc38f90f797f and fs2 == 0 and fe2 == 0x403 and fm2 == 0xb8073605348df and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x103c8578e3d2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f14; op2:f19; op3:f20; dest:f5; op1val:0x7f93cc38f90f797f; op2val:0x403b8073605348df;
op3val:0x7fe103c8578e3d2d; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f5, f14, f19, f20, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rd == rs2 == rs3 != rs1, rs1==f9, rs2==f24, rs3==f24, rd==f24,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x3cc38f90f797f and fs2 == 0 and fe2 == 0x403 and fm2 == 0xb8073605348df and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x103c8578e3d2d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f9; op2:f24; op3:f24; dest:f24; op1val:0x7f93cc38f90f797f; op2val:0x403b8073605348df;
op3val:0x403b8073605348df; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f24, f9, f24, f24, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f26, rs2==f2, rs3==f18, rd==f16,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x3cc38f90f797f and fs2 == 0 and fe2 == 0x403 and fm2 == 0xb8073605348df and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x103c8578e3d2d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f26; op2:f2; op3:f18; dest:f16; op1val:0x7f93cc38f90f797f; op2val:0x403b8073605348df;
op3val:0x7fe103c8578e3d2d; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f16, f26, f2, f18, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f28, rs2==f5, rs3==f4, rd==f27,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x3cc38f90f797f and fs2 == 0 and fe2 == 0x403 and fm2 == 0xb8073605348df and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x103c8578e3d2d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f28; op2:f5; op3:f4; dest:f27; op1val:0x7f93cc38f90f797f; op2val:0x403b8073605348df;
op3val:0x7fe103c8578e3d2d; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f27, f28, f5, f4, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f2, rs2==f0, rs3==f15, rd==f9,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x3cc38f90f797f and fs2 == 0 and fe2 == 0x403 and fm2 == 0xb8073605348df and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x103c8578e3d2d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f2; op2:f0; op3:f15; dest:f9; op1val:0x7f93cc38f90f797f; op2val:0x403b8073605348df;
op3val:0x7fe103c8578e3d2d; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f9, f2, f0, f15, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f16, rs2==f28, rs3==f25, rd==f19,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xcaf8bae2074df and fs2 == 0 and fe2 == 0x404 and fm2 == 0x071b7eb928643 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd7b6d36c4d7ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f16; op2:f28; op3:f25; dest:f19; op1val:0x7f9caf8bae2074df; op2val:0x404071b7eb928643;
op3val:0x7fed7b6d36c4d7ca; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f19, f16, f28, f25, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f6, rs2==f25, rs3==f19, rd==f30,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xcaf8bae2074df and fs2 == 0 and fe2 == 0x404 and fm2 == 0x071b7eb928643 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd7b6d36c4d7ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f6; op2:f25; op3:f19; dest:f30; op1val:0x7f9caf8bae2074df; op2val:0x404071b7eb928643;
op3val:0x7fed7b6d36c4d7ca; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f30, f6, f25, f19, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f4, rs2==f3, rs3==f0, rd==f15,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xcaf8bae2074df and fs2 == 0 and fe2 == 0x404 and fm2 == 0x071b7eb928643 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd7b6d36c4d7ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f4; op2:f3; op3:f0; dest:f15; op1val:0x7f9caf8bae2074df; op2val:0x404071b7eb928643;
op3val:0x7fed7b6d36c4d7ca; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f15, f4, f3, f0, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f27, rs2==f6, rs3==f12, rd==f20,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xcaf8bae2074df and fs2 == 0 and fe2 == 0x404 and fm2 == 0x071b7eb928643 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd7b6d36c4d7ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f27; op2:f6; op3:f12; dest:f20; op1val:0x7f9caf8bae2074df; op2val:0x404071b7eb928643;
op3val:0x7fed7b6d36c4d7ca; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f20, f27, f6, f12, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f24, rs2==f22, rs3==f28, rd==f11,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xcaf8bae2074df and fs2 == 0 and fe2 == 0x404 and fm2 == 0x071b7eb928643 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd7b6d36c4d7ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f24; op2:f22; op3:f28; dest:f11; op1val:0x7f9caf8bae2074df; op2val:0x404071b7eb928643;
op3val:0x7fed7b6d36c4d7ca; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f11, f24, f22, f28, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f25, rs2==f18, rs3==f16, rd==f1,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x96deab3c53820 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f25; op2:f18; op3:f16; dest:f1; op1val:0x7f9d1aa6d115d25f; op2val:0x40296deab3c53820;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f1, f25, f18, f16, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f1, rs2==f16, rs3==f13, rd==f21,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x96deab3c53820 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f1; op2:f16; op3:f13; dest:f21; op1val:0x7f9d1aa6d115d25f; op2val:0x40296deab3c53820;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f21, f1, f16, f13, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f30, rs2==f12, rs3==f5, rd==f28,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x96deab3c53820 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f12; op3:f5; dest:f28; op1val:0x7f9d1aa6d115d25f; op2val:0x40296deab3c53820;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f28, f30, f12, f5, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f18, rs2==f15, rs3==f14, rd==f4,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x96deab3c53820 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f18; op2:f15; op3:f14; dest:f4; op1val:0x7f9d1aa6d115d25f; op2val:0x40296deab3c53820;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f4, f18, f15, f14, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f11, rs2==f9, rs3==f22, rd==f3,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x96deab3c53820 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f11; op2:f9; op3:f22; dest:f3; op1val:0x7f9d1aa6d115d25f; op2val:0x40296deab3c53820;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f3, f11, f9, f22, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f3, rs2==f7, rs3==f27, rd==f22,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe97c53d658d5f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x0a121df841057 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfcbdd3285fa40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f3; op2:f7; op3:f27; dest:f22; op1val:0x7f9e97c53d658d5f; op2val:0x4040a121df841057;
op3val:0x7fefcbdd3285fa40; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f22, f3, f7, f27, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f7, rs2==f13, rs3==f3, rd==f26,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe97c53d658d5f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x0a121df841057 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfcbdd3285fa40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f7; op2:f13; op3:f3; dest:f26; op1val:0x7f9e97c53d658d5f; op2val:0x4040a121df841057;
op3val:0x7fefcbdd3285fa40; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f26, f7, f13, f3, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f21, rs2==f26, rs3==f2, rd==f25,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe97c53d658d5f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x0a121df841057 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfcbdd3285fa40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f21; op2:f26; op3:f2; dest:f25; op1val:0x7f9e97c53d658d5f; op2val:0x4040a121df841057;
op3val:0x7fefcbdd3285fa40; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f25, f21, f26, f2, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f13, rs2==f30, rs3==f7, rd==f18,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe97c53d658d5f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x0a121df841057 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfcbdd3285fa40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f13; op2:f30; op3:f7; dest:f18; op1val:0x7f9e97c53d658d5f; op2val:0x4040a121df841057;
op3val:0x7fefcbdd3285fa40; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f18, f13, f30, f7, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f12, rs2==f17, rs3==f6, rd==f2,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe97c53d658d5f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x0a121df841057 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfcbdd3285fa40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f12; op2:f17; op3:f6; dest:f2; op1val:0x7f9e97c53d658d5f; op2val:0x4040a121df841057;
op3val:0x7fefcbdd3285fa40; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f2, f12, f17, f6, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f31, rs2==f21, rs3==f9, rd==f6,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xed5da4e13385f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x9b0757709ef4e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8c11bee4771c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f31; op2:f21; op3:f9; dest:f6; op1val:0x7f9ed5da4e13385f; op2val:0x4039b0757709ef4e;
op3val:0x7fe8c11bee4771c7; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f6, f31, f21, f9, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f22, rs2==f4, rs3==f23, rd==f13,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xed5da4e13385f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x9b0757709ef4e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8c11bee4771c7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f22; op2:f4; op3:f23; dest:f13; op1val:0x7f9ed5da4e13385f; op2val:0x4039b0757709ef4e;
op3val:0x7fe8c11bee4771c7; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f13, f22, f4, f23, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xed5da4e13385f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x9b0757709ef4e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8c11bee4771c7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9ed5da4e13385f; op2val:0x4039b0757709ef4e;
op3val:0x7fe8c11bee4771c7; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xed5da4e13385f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x9b0757709ef4e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8c11bee4771c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9ed5da4e13385f; op2val:0x4039b0757709ef4e;
op3val:0x7fe8c11bee4771c7; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xed5da4e13385f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x9b0757709ef4e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8c11bee4771c7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9ed5da4e13385f; op2val:0x4039b0757709ef4e;
op3val:0x7fe8c11bee4771c7; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xf350697c4563f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x13d9f585b265d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0d043fad51483 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9f350697c4563f; op2val:0x40313d9f585b265d;
op3val:0x7fe0d043fad51483; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xf350697c4563f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x13d9f585b265d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0d043fad51483 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9f350697c4563f; op2val:0x40313d9f585b265d;
op3val:0x7fe0d043fad51483; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xf350697c4563f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x13d9f585b265d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0d043fad51483 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9f350697c4563f; op2val:0x40313d9f585b265d;
op3val:0x7fe0d043fad51483; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xf350697c4563f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x13d9f585b265d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0d043fad51483 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9f350697c4563f; op2val:0x40313d9f585b265d;
op3val:0x7fe0d043fad51483; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xf350697c4563f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x13d9f585b265d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0d043fad51483 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9f350697c4563f; op2val:0x40313d9f585b265d;
op3val:0x7fe0d043fad51483; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x07a03c3d506bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0dda3a9010ee0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x15e41a0e62eed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa07a03c3d506bf; op2val:0x4030dda3a9010ee0;
op3val:0x7fe15e41a0e62eed; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x07a03c3d506bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0dda3a9010ee0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x15e41a0e62eed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa07a03c3d506bf; op2val:0x4030dda3a9010ee0;
op3val:0x7fe15e41a0e62eed; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x07a03c3d506bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0dda3a9010ee0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x15e41a0e62eed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa07a03c3d506bf; op2val:0x4030dda3a9010ee0;
op3val:0x7fe15e41a0e62eed; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x07a03c3d506bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0dda3a9010ee0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x15e41a0e62eed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa07a03c3d506bf; op2val:0x4030dda3a9010ee0;
op3val:0x7fe15e41a0e62eed; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x07a03c3d506bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0dda3a9010ee0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x15e41a0e62eed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa07a03c3d506bf; op2val:0x4030dda3a9010ee0;
op3val:0x7fe15e41a0e62eed; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0bfb9af4c823f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5308ec38881fa and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x62e785561d103 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0bfb9af4c823f; op2val:0x4015308ec38881fa;
op3val:0x7fc62e785561d103; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0bfb9af4c823f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5308ec38881fa and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x62e785561d103 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0bfb9af4c823f; op2val:0x4015308ec38881fa;
op3val:0x7fc62e785561d103; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0bfb9af4c823f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5308ec38881fa and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x62e785561d103 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0bfb9af4c823f; op2val:0x4015308ec38881fa;
op3val:0x7fc62e785561d103; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0bfb9af4c823f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5308ec38881fa and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x62e785561d103 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0bfb9af4c823f; op2val:0x4015308ec38881fa;
op3val:0x7fc62e785561d103; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0bfb9af4c823f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5308ec38881fa and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x62e785561d103 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0bfb9af4c823f; op2val:0x4015308ec38881fa;
op3val:0x7fc62e785561d103; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0c373d72bd3df and fs2 == 0 and fe2 == 0x402 and fm2 == 0x66d44a9bbe736 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x77f3abd87c689 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0c373d72bd3df; op2val:0x40266d44a9bbe736;
op3val:0x7fd77f3abd87c689; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0c373d72bd3df and fs2 == 0 and fe2 == 0x402 and fm2 == 0x66d44a9bbe736 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x77f3abd87c689 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0c373d72bd3df; op2val:0x40266d44a9bbe736;
op3val:0x7fd77f3abd87c689; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0c373d72bd3df and fs2 == 0 and fe2 == 0x402 and fm2 == 0x66d44a9bbe736 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x77f3abd87c689 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0c373d72bd3df; op2val:0x40266d44a9bbe736;
op3val:0x7fd77f3abd87c689; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0c373d72bd3df and fs2 == 0 and fe2 == 0x402 and fm2 == 0x66d44a9bbe736 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x77f3abd87c689 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0c373d72bd3df; op2val:0x40266d44a9bbe736;
op3val:0x7fd77f3abd87c689; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0c373d72bd3df and fs2 == 0 and fe2 == 0x402 and fm2 == 0x66d44a9bbe736 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x77f3abd87c689 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0c373d72bd3df; op2val:0x40266d44a9bbe736;
op3val:0x7fd77f3abd87c689; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x46a079e389d6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3090a9e293cab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x849723c3ca606 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa46a079e389d6f; op2val:0x4033090a9e293cab;
op3val:0x7fe849723c3ca606; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x46a079e389d6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3090a9e293cab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x849723c3ca606 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa46a079e389d6f; op2val:0x4033090a9e293cab;
op3val:0x7fe849723c3ca606; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x46a079e389d6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3090a9e293cab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x849723c3ca606 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa46a079e389d6f; op2val:0x4033090a9e293cab;
op3val:0x7fe849723c3ca606; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x46a079e389d6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3090a9e293cab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x849723c3ca606 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa46a079e389d6f; op2val:0x4033090a9e293cab;
op3val:0x7fe849723c3ca606; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x46a079e389d6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3090a9e293cab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x849723c3ca606 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa46a079e389d6f; op2val:0x4033090a9e293cab;
op3val:0x7fe849723c3ca606; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xb8e934bdcc1bf and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf6db8ea3f5db5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb109b94c05e59 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fab8e934bdcc1bf; op2val:0x401f6db8ea3f5db5;
op3val:0x7fdb109b94c05e59; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xb8e934bdcc1bf and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf6db8ea3f5db5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb109b94c05e59 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fab8e934bdcc1bf; op2val:0x401f6db8ea3f5db5;
op3val:0x7fdb109b94c05e59; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xb8e934bdcc1bf and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf6db8ea3f5db5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb109b94c05e59 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fab8e934bdcc1bf; op2val:0x401f6db8ea3f5db5;
op3val:0x7fdb109b94c05e59; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xb8e934bdcc1bf and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf6db8ea3f5db5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb109b94c05e59 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fab8e934bdcc1bf; op2val:0x401f6db8ea3f5db5;
op3val:0x7fdb109b94c05e59; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xb8e934bdcc1bf and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf6db8ea3f5db5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb109b94c05e59 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fab8e934bdcc1bf; op2val:0x401f6db8ea3f5db5;
op3val:0x7fdb109b94c05e59; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x04cafda9b0ce7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x922c1147c87ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99b3a6d2ac342 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb04cafda9b0ce7; op2val:0x402922c1147c87ff;
op3val:0x7fe99b3a6d2ac342; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x04cafda9b0ce7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x922c1147c87ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99b3a6d2ac342 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb04cafda9b0ce7; op2val:0x402922c1147c87ff;
op3val:0x7fe99b3a6d2ac342; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x04cafda9b0ce7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x922c1147c87ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99b3a6d2ac342 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb04cafda9b0ce7; op2val:0x402922c1147c87ff;
op3val:0x7fe99b3a6d2ac342; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x04cafda9b0ce7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x922c1147c87ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99b3a6d2ac342 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb04cafda9b0ce7; op2val:0x402922c1147c87ff;
op3val:0x7fe99b3a6d2ac342; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x04cafda9b0ce7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x922c1147c87ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99b3a6d2ac342 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb04cafda9b0ce7; op2val:0x402922c1147c87ff;
op3val:0x7fe99b3a6d2ac342; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x114c7285ec6df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf888257869929 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0d4fed0a8cdaf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb114c7285ec6df; op2val:0x3fff888257869929;
op3val:0x7fc0d4fed0a8cdaf; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x114c7285ec6df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf888257869929 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0d4fed0a8cdaf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb114c7285ec6df; op2val:0x3fff888257869929;
op3val:0x7fc0d4fed0a8cdaf; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x114c7285ec6df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf888257869929 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0d4fed0a8cdaf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb114c7285ec6df; op2val:0x3fff888257869929;
op3val:0x7fc0d4fed0a8cdaf; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x114c7285ec6df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf888257869929 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0d4fed0a8cdaf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb114c7285ec6df; op2val:0x3fff888257869929;
op3val:0x7fc0d4fed0a8cdaf; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x114c7285ec6df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf888257869929 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0d4fed0a8cdaf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb114c7285ec6df; op2val:0x3fff888257869929;
op3val:0x7fc0d4fed0a8cdaf; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x16e32cf849ecf and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x36742322e556a and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x52359dac1d2ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb16e32cf849ecf; op2val:0x3fa36742322e556a;
op3val:0x7f652359dac1d2ff; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x16e32cf849ecf and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x36742322e556a and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x52359dac1d2ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb16e32cf849ecf; op2val:0x3fa36742322e556a;
op3val:0x7f652359dac1d2ff; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x16e32cf849ecf and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x36742322e556a and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x52359dac1d2ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb16e32cf849ecf; op2val:0x3fa36742322e556a;
op3val:0x7f652359dac1d2ff; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x16e32cf849ecf and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x36742322e556a and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x52359dac1d2ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb16e32cf849ecf; op2val:0x3fa36742322e556a;
op3val:0x7f652359dac1d2ff; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x16e32cf849ecf and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x36742322e556a and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x52359dac1d2ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb16e32cf849ecf; op2val:0x3fa36742322e556a;
op3val:0x7f652359dac1d2ff; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x204462f4d98ff and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb862baf8a644f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xefe4b6cc650a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb204462f4d98ff; op2val:0x3ffb862baf8a644f;
op3val:0x7fbefe4b6cc650a7; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x204462f4d98ff and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb862baf8a644f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xefe4b6cc650a7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb204462f4d98ff; op2val:0x3ffb862baf8a644f;
op3val:0x7fbefe4b6cc650a7; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x204462f4d98ff and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb862baf8a644f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xefe4b6cc650a7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb204462f4d98ff; op2val:0x3ffb862baf8a644f;
op3val:0x7fbefe4b6cc650a7; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x204462f4d98ff and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb862baf8a644f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xefe4b6cc650a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb204462f4d98ff; op2val:0x3ffb862baf8a644f;
op3val:0x7fbefe4b6cc650a7; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x204462f4d98ff and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb862baf8a644f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xefe4b6cc650a7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb204462f4d98ff; op2val:0x3ffb862baf8a644f;
op3val:0x7fbefe4b6cc650a7; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2efc48b367db7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xc222f1cec7041 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0a6069be9fb0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2efc48b367db7; op2val:0x401c222f1cec7041;
op3val:0x7fe0a6069be9fb0f; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2efc48b367db7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xc222f1cec7041 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0a6069be9fb0f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2efc48b367db7; op2val:0x401c222f1cec7041;
op3val:0x7fe0a6069be9fb0f; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2efc48b367db7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xc222f1cec7041 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0a6069be9fb0f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2efc48b367db7; op2val:0x401c222f1cec7041;
op3val:0x7fe0a6069be9fb0f; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2efc48b367db7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xc222f1cec7041 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0a6069be9fb0f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2efc48b367db7; op2val:0x401c222f1cec7041;
op3val:0x7fe0a6069be9fb0f; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2efc48b367db7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xc222f1cec7041 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0a6069be9fb0f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2efc48b367db7; op2val:0x401c222f1cec7041;
op3val:0x7fe0a6069be9fb0f; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5631ca527644f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xd985d78d050af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c7a736865391 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5631ca527644f; op2val:0x401d985d78d050af;
op3val:0x7fe3c7a736865391; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5631ca527644f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xd985d78d050af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c7a736865391 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5631ca527644f; op2val:0x401d985d78d050af;
op3val:0x7fe3c7a736865391; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5631ca527644f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xd985d78d050af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c7a736865391 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5631ca527644f; op2val:0x401d985d78d050af;
op3val:0x7fe3c7a736865391; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5631ca527644f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xd985d78d050af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c7a736865391 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5631ca527644f; op2val:0x401d985d78d050af;
op3val:0x7fe3c7a736865391; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5631ca527644f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xd985d78d050af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c7a736865391 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5631ca527644f; op2val:0x401d985d78d050af;
op3val:0x7fe3c7a736865391; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5ecba47fc8667 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3107e90cda7fd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1fb75e6b2ed1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5ecba47fc8667; op2val:0x4023107e90cda7fd;
op3val:0x7fea1fb75e6b2ed1; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5ecba47fc8667 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3107e90cda7fd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1fb75e6b2ed1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5ecba47fc8667; op2val:0x4023107e90cda7fd;
op3val:0x7fea1fb75e6b2ed1; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5ecba47fc8667 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3107e90cda7fd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1fb75e6b2ed1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5ecba47fc8667; op2val:0x4023107e90cda7fd;
op3val:0x7fea1fb75e6b2ed1; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5ecba47fc8667 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3107e90cda7fd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1fb75e6b2ed1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5ecba47fc8667; op2val:0x4023107e90cda7fd;
op3val:0x7fea1fb75e6b2ed1; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5ecba47fc8667 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3107e90cda7fd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1fb75e6b2ed1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5ecba47fc8667; op2val:0x4023107e90cda7fd;
op3val:0x7fea1fb75e6b2ed1; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x62ff402c49baf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x69d6ce2107cb9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf5c3d0b54c586 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb62ff402c49baf; op2val:0x40269d6ce2107cb9;
op3val:0x7fef5c3d0b54c586; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x62ff402c49baf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x69d6ce2107cb9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf5c3d0b54c586 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb62ff402c49baf; op2val:0x40269d6ce2107cb9;
op3val:0x7fef5c3d0b54c586; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x62ff402c49baf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x69d6ce2107cb9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf5c3d0b54c586 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb62ff402c49baf; op2val:0x40269d6ce2107cb9;
op3val:0x7fef5c3d0b54c586; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x62ff402c49baf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x69d6ce2107cb9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf5c3d0b54c586 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb62ff402c49baf; op2val:0x40269d6ce2107cb9;
op3val:0x7fef5c3d0b54c586; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x62ff402c49baf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x69d6ce2107cb9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf5c3d0b54c586 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb62ff402c49baf; op2val:0x40269d6ce2107cb9;
op3val:0x7fef5c3d0b54c586; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x12f7d90af6886 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7d7ab2b96a7d7; op2val:0x40212f7d90af6886;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x12f7d90af6886 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7d7ab2b96a7d7; op2val:0x40212f7d90af6886;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x12f7d90af6886 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7d7ab2b96a7d7; op2val:0x40212f7d90af6886;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x12f7d90af6886 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7d7ab2b96a7d7; op2val:0x40212f7d90af6886;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x12f7d90af6886 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7d7ab2b96a7d7; op2val:0x40212f7d90af6886;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7fb56f2b7523f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x96be7753f5751 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30d39ce94e382 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7fb56f2b7523f; op2val:0x40196be7753f5751;
op3val:0x7fe30d39ce94e382; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7fb56f2b7523f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x96be7753f5751 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30d39ce94e382 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7fb56f2b7523f; op2val:0x40196be7753f5751;
op3val:0x7fe30d39ce94e382; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7fb56f2b7523f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x96be7753f5751 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30d39ce94e382 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7fb56f2b7523f; op2val:0x40196be7753f5751;
op3val:0x7fe30d39ce94e382; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7fb56f2b7523f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x96be7753f5751 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30d39ce94e382 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7fb56f2b7523f; op2val:0x40196be7753f5751;
op3val:0x7fe30d39ce94e382; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7fb56f2b7523f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x96be7753f5751 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30d39ce94e382 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7fb56f2b7523f; op2val:0x40196be7753f5751;
op3val:0x7fe30d39ce94e382; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0d1acf34aef92 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb801fd982d9eb7; op2val:0x4000d1acf34aef92;
op3val:0x7fc93c9b1b3642af; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0d1acf34aef92 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb801fd982d9eb7; op2val:0x4000d1acf34aef92;
op3val:0x7fc93c9b1b3642af; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0d1acf34aef92 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb801fd982d9eb7; op2val:0x4000d1acf34aef92;
op3val:0x7fc93c9b1b3642af; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0d1acf34aef92 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb801fd982d9eb7; op2val:0x4000d1acf34aef92;
op3val:0x7fc93c9b1b3642af; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0d1acf34aef92 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb801fd982d9eb7; op2val:0x4000d1acf34aef92;
op3val:0x7fc93c9b1b3642af; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a32fb58f33bf and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd5dc4397c31a5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x78702b4c3d43b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9a32fb58f33bf; op2val:0x400d5dc4397c31a5;
op3val:0x7fd78702b4c3d43b; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a32fb58f33bf and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd5dc4397c31a5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x78702b4c3d43b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9a32fb58f33bf; op2val:0x400d5dc4397c31a5;
op3val:0x7fd78702b4c3d43b; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a32fb58f33bf and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd5dc4397c31a5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x78702b4c3d43b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9a32fb58f33bf; op2val:0x400d5dc4397c31a5;
op3val:0x7fd78702b4c3d43b; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a32fb58f33bf and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd5dc4397c31a5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x78702b4c3d43b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9a32fb58f33bf; op2val:0x400d5dc4397c31a5;
op3val:0x7fd78702b4c3d43b; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a32fb58f33bf and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd5dc4397c31a5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x78702b4c3d43b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9a32fb58f33bf; op2val:0x400d5dc4397c31a5;
op3val:0x7fd78702b4c3d43b; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a3c26bde85df and fs2 == 0 and fe2 == 0x400 and fm2 == 0xce9b661b8773e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x72a8c9fb21963 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9a3c26bde85df; op2val:0x400ce9b661b8773e;
op3val:0x7fd72a8c9fb21963; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a3c26bde85df and fs2 == 0 and fe2 == 0x400 and fm2 == 0xce9b661b8773e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x72a8c9fb21963 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9a3c26bde85df; op2val:0x400ce9b661b8773e;
op3val:0x7fd72a8c9fb21963; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a3c26bde85df and fs2 == 0 and fe2 == 0x400 and fm2 == 0xce9b661b8773e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x72a8c9fb21963 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9a3c26bde85df; op2val:0x400ce9b661b8773e;
op3val:0x7fd72a8c9fb21963; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a3c26bde85df and fs2 == 0 and fe2 == 0x400 and fm2 == 0xce9b661b8773e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x72a8c9fb21963 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9a3c26bde85df; op2val:0x400ce9b661b8773e;
op3val:0x7fd72a8c9fb21963; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a3c26bde85df and fs2 == 0 and fe2 == 0x400 and fm2 == 0xce9b661b8773e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x72a8c9fb21963 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9a3c26bde85df; op2val:0x400ce9b661b8773e;
op3val:0x7fd72a8c9fb21963; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa181ad799b50f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x06578856de17d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xabd978f6f936d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba181ad799b50f; op2val:0x40206578856de17d;
op3val:0x7feabd978f6f936d; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa181ad799b50f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x06578856de17d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xabd978f6f936d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba181ad799b50f; op2val:0x40206578856de17d;
op3val:0x7feabd978f6f936d; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa181ad799b50f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x06578856de17d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xabd978f6f936d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba181ad799b50f; op2val:0x40206578856de17d;
op3val:0x7feabd978f6f936d; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa181ad799b50f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x06578856de17d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xabd978f6f936d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba181ad799b50f; op2val:0x40206578856de17d;
op3val:0x7feabd978f6f936d; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa181ad799b50f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x06578856de17d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xabd978f6f936d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba181ad799b50f; op2val:0x40206578856de17d;
op3val:0x7feabd978f6f936d; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xafd8e8172cff7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x87e14bf298e14 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4a882c1e9583d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbafd8e8172cff7; op2val:0x40187e14bf298e14;
op3val:0x7fe4a882c1e9583d; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xafd8e8172cff7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x87e14bf298e14 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4a882c1e9583d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbafd8e8172cff7; op2val:0x40187e14bf298e14;
op3val:0x7fe4a882c1e9583d; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xafd8e8172cff7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x87e14bf298e14 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4a882c1e9583d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbafd8e8172cff7; op2val:0x40187e14bf298e14;
op3val:0x7fe4a882c1e9583d; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xafd8e8172cff7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x87e14bf298e14 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4a882c1e9583d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbafd8e8172cff7; op2val:0x40187e14bf298e14;
op3val:0x7fe4a882c1e9583d; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xafd8e8172cff7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x87e14bf298e14 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4a882c1e9583d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbafd8e8172cff7; op2val:0x40187e14bf298e14;
op3val:0x7fe4a882c1e9583d; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc023212d8c577 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x60ccb89feb1d2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cb56672140d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc023212d8c577; op2val:0x40160ccb89feb1d2;
op3val:0x7fe34cb56672140d; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc023212d8c577 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x60ccb89feb1d2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cb56672140d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc023212d8c577; op2val:0x40160ccb89feb1d2;
op3val:0x7fe34cb56672140d; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc023212d8c577 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x60ccb89feb1d2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cb56672140d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc023212d8c577; op2val:0x40160ccb89feb1d2;
op3val:0x7fe34cb56672140d; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc023212d8c577 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x60ccb89feb1d2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cb56672140d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc023212d8c577; op2val:0x40160ccb89feb1d2;
op3val:0x7fe34cb56672140d; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc023212d8c577 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x60ccb89feb1d2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cb56672140d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc023212d8c577; op2val:0x40160ccb89feb1d2;
op3val:0x7fe34cb56672140d; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc4a83973f181f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x63a715946bbbe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3a6e5bc8bf800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc4a83973f181f; op2val:0x40163a715946bbbe;
op3val:0x7fe3a6e5bc8bf800; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc4a83973f181f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x63a715946bbbe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3a6e5bc8bf800 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc4a83973f181f; op2val:0x40163a715946bbbe;
op3val:0x7fe3a6e5bc8bf800; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc4a83973f181f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x63a715946bbbe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3a6e5bc8bf800 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc4a83973f181f; op2val:0x40163a715946bbbe;
op3val:0x7fe3a6e5bc8bf800; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc4a83973f181f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x63a715946bbbe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3a6e5bc8bf800 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc4a83973f181f; op2val:0x40163a715946bbbe;
op3val:0x7fe3a6e5bc8bf800; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc4a83973f181f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x63a715946bbbe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3a6e5bc8bf800 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc4a83973f181f; op2val:0x40163a715946bbbe;
op3val:0x7fe3a6e5bc8bf800; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xcb550d5d3bb27 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9a0e906be3f15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6fe02c97bce1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbcb550d5d3bb27; op2val:0x4019a0e906be3f15;
op3val:0x7fe6fe02c97bce1c; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xcb550d5d3bb27 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9a0e906be3f15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6fe02c97bce1c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbcb550d5d3bb27; op2val:0x4019a0e906be3f15;
op3val:0x7fe6fe02c97bce1c; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xcb550d5d3bb27 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9a0e906be3f15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6fe02c97bce1c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbcb550d5d3bb27; op2val:0x4019a0e906be3f15;
op3val:0x7fe6fe02c97bce1c; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xcb550d5d3bb27 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9a0e906be3f15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6fe02c97bce1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbcb550d5d3bb27; op2val:0x4019a0e906be3f15;
op3val:0x7fe6fe02c97bce1c; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xcb550d5d3bb27 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9a0e906be3f15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6fe02c97bce1c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbcb550d5d3bb27; op2val:0x4019a0e906be3f15;
op3val:0x7fe6fe02c97bce1c; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd55eb74d3e867 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8d1eaf92ca954 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6c0e12a293e24 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd55eb74d3e867; op2val:0x4018d1eaf92ca954;
op3val:0x7fe6c0e12a293e24; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd55eb74d3e867 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8d1eaf92ca954 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6c0e12a293e24 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd55eb74d3e867; op2val:0x4018d1eaf92ca954;
op3val:0x7fe6c0e12a293e24; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd55eb74d3e867 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8d1eaf92ca954 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6c0e12a293e24 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd55eb74d3e867; op2val:0x4018d1eaf92ca954;
op3val:0x7fe6c0e12a293e24; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd55eb74d3e867 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8d1eaf92ca954 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6c0e12a293e24 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd55eb74d3e867; op2val:0x4018d1eaf92ca954;
op3val:0x7fe6c0e12a293e24; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd55eb74d3e867 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8d1eaf92ca954 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6c0e12a293e24 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd55eb74d3e867; op2val:0x4018d1eaf92ca954;
op3val:0x7fe6c0e12a293e24; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6b11ecf872f9d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbde8341376716f; op2val:0x4016b11ecf872f9d;
op3val:0x7fe5352cf9125058; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6b11ecf872f9d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbde8341376716f; op2val:0x4016b11ecf872f9d;
op3val:0x7fe5352cf9125058; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6b11ecf872f9d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbde8341376716f; op2val:0x4016b11ecf872f9d;
op3val:0x7fe5352cf9125058; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6b11ecf872f9d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbde8341376716f; op2val:0x4016b11ecf872f9d;
op3val:0x7fe5352cf9125058; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6b11ecf872f9d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbde8341376716f; op2val:0x4016b11ecf872f9d;
op3val:0x7fe5352cf9125058; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfb88e73d746f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x032591e533529 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe59e1f30d27e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbdfb88e73d746f; op2val:0x402032591e533529;
op3val:0x7fee59e1f30d27e6; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfb88e73d746f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x032591e533529 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe59e1f30d27e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbdfb88e73d746f; op2val:0x402032591e533529;
op3val:0x7fee59e1f30d27e6; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfb88e73d746f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x032591e533529 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe59e1f30d27e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbdfb88e73d746f; op2val:0x402032591e533529;
op3val:0x7fee59e1f30d27e6; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfb88e73d746f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x032591e533529 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe59e1f30d27e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbdfb88e73d746f; op2val:0x402032591e533529;
op3val:0x7fee59e1f30d27e6; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfb88e73d746f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x032591e533529 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe59e1f30d27e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbdfb88e73d746f; op2val:0x402032591e533529;
op3val:0x7fee59e1f30d27e6; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xebc259ea86bbf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xde9682afb4452 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcbab01676665f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbebc259ea86bbf; op2val:0x3fede9682afb4452;
op3val:0x7fbcbab01676665f; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xebc259ea86bbf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xde9682afb4452 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcbab01676665f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbebc259ea86bbf; op2val:0x3fede9682afb4452;
op3val:0x7fbcbab01676665f; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xebc259ea86bbf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xde9682afb4452 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcbab01676665f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbebc259ea86bbf; op2val:0x3fede9682afb4452;
op3val:0x7fbcbab01676665f; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xebc259ea86bbf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xde9682afb4452 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcbab01676665f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbebc259ea86bbf; op2val:0x3fede9682afb4452;
op3val:0x7fbcbab01676665f; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xebc259ea86bbf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xde9682afb4452 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcbab01676665f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbebc259ea86bbf; op2val:0x3fede9682afb4452;
op3val:0x7fbcbab01676665f; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf9d6388095197 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x31752ce11af56 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2dc7e0735054e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf9d6388095197; op2val:0x40131752ce11af56;
op3val:0x7fe2dc7e0735054e; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf9d6388095197 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x31752ce11af56 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2dc7e0735054e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf9d6388095197; op2val:0x40131752ce11af56;
op3val:0x7fe2dc7e0735054e; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf9d6388095197 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x31752ce11af56 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2dc7e0735054e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf9d6388095197; op2val:0x40131752ce11af56;
op3val:0x7fe2dc7e0735054e; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf9d6388095197 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x31752ce11af56 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2dc7e0735054e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf9d6388095197; op2val:0x40131752ce11af56;
op3val:0x7fe2dc7e0735054e; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf9d6388095197 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x31752ce11af56 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2dc7e0735054e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf9d6388095197; op2val:0x40131752ce11af56;
op3val:0x7fe2dc7e0735054e; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x03c1ecadc137f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf8884c44e2025 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfff0165f47cec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc03c1ecadc137f; op2val:0x401f8884c44e2025;
op3val:0x7fefff0165f47cec; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x03c1ecadc137f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf8884c44e2025 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfff0165f47cec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc03c1ecadc137f; op2val:0x401f8884c44e2025;
op3val:0x7fefff0165f47cec; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x03c1ecadc137f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf8884c44e2025 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfff0165f47cec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc03c1ecadc137f; op2val:0x401f8884c44e2025;
op3val:0x7fefff0165f47cec; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x03c1ecadc137f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf8884c44e2025 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfff0165f47cec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc03c1ecadc137f; op2val:0x401f8884c44e2025;
op3val:0x7fefff0165f47cec; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x03c1ecadc137f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf8884c44e2025 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfff0165f47cec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc03c1ecadc137f; op2val:0x401f8884c44e2025;
op3val:0x7fefff0165f47cec; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x041c0b9ddaa1b and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa396879bb08c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa52d93b25d1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc041c0b9ddaa1b; op2val:0x401a396879bb08c6;
op3val:0x7feaa52d93b25d1f; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x041c0b9ddaa1b and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa396879bb08c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa52d93b25d1f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc041c0b9ddaa1b; op2val:0x401a396879bb08c6;
op3val:0x7feaa52d93b25d1f; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x041c0b9ddaa1b and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa396879bb08c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa52d93b25d1f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc041c0b9ddaa1b; op2val:0x401a396879bb08c6;
op3val:0x7feaa52d93b25d1f; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x041c0b9ddaa1b and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa396879bb08c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa52d93b25d1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc041c0b9ddaa1b; op2val:0x401a396879bb08c6;
op3val:0x7feaa52d93b25d1f; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x041c0b9ddaa1b and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa396879bb08c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa52d93b25d1f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc041c0b9ddaa1b; op2val:0x401a396879bb08c6;
op3val:0x7feaa52d93b25d1f; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0f1d33203d307 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9558ab3e1c04a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad471945dbc7b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0f1d33203d307; op2val:0x4009558ab3e1c04a;
op3val:0x7fdad471945dbc7b; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0f1d33203d307 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9558ab3e1c04a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad471945dbc7b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0f1d33203d307; op2val:0x4009558ab3e1c04a;
op3val:0x7fdad471945dbc7b; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0f1d33203d307 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9558ab3e1c04a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad471945dbc7b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0f1d33203d307; op2val:0x4009558ab3e1c04a;
op3val:0x7fdad471945dbc7b; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0f1d33203d307 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9558ab3e1c04a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad471945dbc7b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0f1d33203d307; op2val:0x4009558ab3e1c04a;
op3val:0x7fdad471945dbc7b; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0f1d33203d307 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9558ab3e1c04a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad471945dbc7b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0f1d33203d307; op2val:0x4009558ab3e1c04a;
op3val:0x7fdad471945dbc7b; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x181c884c8efbf and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9f8aed5259957 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc6ae44021a677 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc181c884c8efbf; op2val:0x4019f8aed5259957;
op3val:0x7fec6ae44021a677; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x181c884c8efbf and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9f8aed5259957 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc6ae44021a677 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc181c884c8efbf; op2val:0x4019f8aed5259957;
op3val:0x7fec6ae44021a677; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x181c884c8efbf and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9f8aed5259957 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc6ae44021a677 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc181c884c8efbf; op2val:0x4019f8aed5259957;
op3val:0x7fec6ae44021a677; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x181c884c8efbf and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9f8aed5259957 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc6ae44021a677 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc181c884c8efbf; op2val:0x4019f8aed5259957;
op3val:0x7fec6ae44021a677; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x181c884c8efbf and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9f8aed5259957 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc6ae44021a677 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc181c884c8efbf; op2val:0x4019f8aed5259957;
op3val:0x7fec6ae44021a677; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x18b935d178c4f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb87b52cfcd2bd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe305904c15338 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc18b935d178c4f; op2val:0x401b87b52cfcd2bd;
op3val:0x7fee305904c15338; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x18b935d178c4f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb87b52cfcd2bd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe305904c15338 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc18b935d178c4f; op2val:0x401b87b52cfcd2bd;
op3val:0x7fee305904c15338; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x18b935d178c4f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb87b52cfcd2bd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe305904c15338 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc18b935d178c4f; op2val:0x401b87b52cfcd2bd;
op3val:0x7fee305904c15338; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x18b935d178c4f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb87b52cfcd2bd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe305904c15338 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc18b935d178c4f; op2val:0x401b87b52cfcd2bd;
op3val:0x7fee305904c15338; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x18b935d178c4f and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb87b52cfcd2bd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe305904c15338 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc18b935d178c4f; op2val:0x401b87b52cfcd2bd;
op3val:0x7fee305904c15338; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x1d7d6707c81f3 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x20c908f9b7990 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x420d45610d2ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc1d7d6707c81f3; op2val:0x3fb20c908f9b7990;
op3val:0x7f8420d45610d2ff; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x1d7d6707c81f3 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x20c908f9b7990 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x420d45610d2ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc1d7d6707c81f3; op2val:0x3fb20c908f9b7990;
op3val:0x7f8420d45610d2ff; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x1d7d6707c81f3 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x20c908f9b7990 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x420d45610d2ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc1d7d6707c81f3; op2val:0x3fb20c908f9b7990;
op3val:0x7f8420d45610d2ff; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x1d7d6707c81f3 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x20c908f9b7990 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x420d45610d2ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc1d7d6707c81f3; op2val:0x3fb20c908f9b7990;
op3val:0x7f8420d45610d2ff; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x1d7d6707c81f3 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x20c908f9b7990 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x420d45610d2ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc1d7d6707c81f3; op2val:0x3fb20c908f9b7990;
op3val:0x7f8420d45610d2ff; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x28e011ae50327 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1433eebd8af82 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x404dcc8f93360 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc28e011ae50327; op2val:0x4011433eebd8af82;
op3val:0x7fe404dcc8f93360; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x28e011ae50327 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1433eebd8af82 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x404dcc8f93360 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc28e011ae50327; op2val:0x4011433eebd8af82;
op3val:0x7fe404dcc8f93360; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x28e011ae50327 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1433eebd8af82 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x404dcc8f93360 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc28e011ae50327; op2val:0x4011433eebd8af82;
op3val:0x7fe404dcc8f93360; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x28e011ae50327 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1433eebd8af82 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x404dcc8f93360 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc28e011ae50327; op2val:0x4011433eebd8af82;
op3val:0x7fe404dcc8f93360; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x28e011ae50327 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1433eebd8af82 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x404dcc8f93360 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc28e011ae50327; op2val:0x4011433eebd8af82;
op3val:0x7fe404dcc8f93360; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2daf305ed151f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x21eb6f6396855 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55a838b0c3724 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2daf305ed151f; op2val:0x40121eb6f6396855;
op3val:0x7fe55a838b0c3724; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2daf305ed151f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x21eb6f6396855 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55a838b0c3724 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2daf305ed151f; op2val:0x40121eb6f6396855;
op3val:0x7fe55a838b0c3724; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2daf305ed151f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x21eb6f6396855 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55a838b0c3724 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2daf305ed151f; op2val:0x40121eb6f6396855;
op3val:0x7fe55a838b0c3724; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2daf305ed151f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x21eb6f6396855 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55a838b0c3724 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2daf305ed151f; op2val:0x40121eb6f6396855;
op3val:0x7fe55a838b0c3724; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2daf305ed151f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x21eb6f6396855 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55a838b0c3724 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2daf305ed151f; op2val:0x40121eb6f6396855;
op3val:0x7fe55a838b0c3724; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x33d0b32f07673 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdfd140f0f49e2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x20778d5e9769f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc33d0b32f07673; op2val:0x3ffdfd140f0f49e2;
op3val:0x7fd20778d5e9769f; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x33d0b32f07673 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdfd140f0f49e2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x20778d5e9769f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc33d0b32f07673; op2val:0x3ffdfd140f0f49e2;
op3val:0x7fd20778d5e9769f; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x33d0b32f07673 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdfd140f0f49e2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x20778d5e9769f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc33d0b32f07673; op2val:0x3ffdfd140f0f49e2;
op3val:0x7fd20778d5e9769f; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x33d0b32f07673 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdfd140f0f49e2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x20778d5e9769f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc33d0b32f07673; op2val:0x3ffdfd140f0f49e2;
op3val:0x7fd20778d5e9769f; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x33d0b32f07673 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdfd140f0f49e2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x20778d5e9769f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc33d0b32f07673; op2val:0x3ffdfd140f0f49e2;
op3val:0x7fd20778d5e9769f; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35406181dfc67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe1d92982a5bdb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x230a26766788c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc35406181dfc67; op2val:0x400e1d92982a5bdb;
op3val:0x7fe230a26766788c; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35406181dfc67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe1d92982a5bdb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x230a26766788c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc35406181dfc67; op2val:0x400e1d92982a5bdb;
op3val:0x7fe230a26766788c; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35406181dfc67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe1d92982a5bdb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x230a26766788c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc35406181dfc67; op2val:0x400e1d92982a5bdb;
op3val:0x7fe230a26766788c; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35406181dfc67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe1d92982a5bdb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x230a26766788c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc35406181dfc67; op2val:0x400e1d92982a5bdb;
op3val:0x7fe230a26766788c; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35406181dfc67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe1d92982a5bdb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x230a26766788c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc35406181dfc67; op2val:0x400e1d92982a5bdb;
op3val:0x7fe230a26766788c; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4e335bc1ddd33 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf08485d88dfd4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4418417f288ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4e335bc1ddd33; op2val:0x3fff08485d88dfd4;
op3val:0x7fd4418417f288ed; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4e335bc1ddd33 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf08485d88dfd4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4418417f288ed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4e335bc1ddd33; op2val:0x3fff08485d88dfd4;
op3val:0x7fd4418417f288ed; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4e335bc1ddd33 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf08485d88dfd4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4418417f288ed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4e335bc1ddd33; op2val:0x3fff08485d88dfd4;
op3val:0x7fd4418417f288ed; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4e335bc1ddd33 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf08485d88dfd4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4418417f288ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4e335bc1ddd33; op2val:0x3fff08485d88dfd4;
op3val:0x7fd4418417f288ed; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4e335bc1ddd33 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf08485d88dfd4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4418417f288ed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4e335bc1ddd33; op2val:0x3fff08485d88dfd4;
op3val:0x7fd4418417f288ed; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5022a4b0b3f6b and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe7c8f3de00c66 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x403ce14898e4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5022a4b0b3f6b; op2val:0x400e7c8f3de00c66;
op3val:0x7fe403ce14898e4f; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5022a4b0b3f6b and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe7c8f3de00c66 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x403ce14898e4f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5022a4b0b3f6b; op2val:0x400e7c8f3de00c66;
op3val:0x7fe403ce14898e4f; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5022a4b0b3f6b and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe7c8f3de00c66 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x403ce14898e4f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5022a4b0b3f6b; op2val:0x400e7c8f3de00c66;
op3val:0x7fe403ce14898e4f; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5022a4b0b3f6b and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe7c8f3de00c66 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x403ce14898e4f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5022a4b0b3f6b; op2val:0x400e7c8f3de00c66;
op3val:0x7fe403ce14898e4f; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5022a4b0b3f6b and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe7c8f3de00c66 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x403ce14898e4f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5022a4b0b3f6b; op2val:0x400e7c8f3de00c66;
op3val:0x7fe403ce14898e4f; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x595145e4cc727 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf61026fb4a229 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x529d945c07226 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc595145e4cc727; op2val:0x400f61026fb4a229;
op3val:0x7fe529d945c07226; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x595145e4cc727 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf61026fb4a229 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x529d945c07226 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc595145e4cc727; op2val:0x400f61026fb4a229;
op3val:0x7fe529d945c07226; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x595145e4cc727 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf61026fb4a229 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x529d945c07226 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc595145e4cc727; op2val:0x400f61026fb4a229;
op3val:0x7fe529d945c07226; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x595145e4cc727 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf61026fb4a229 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x529d945c07226 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc595145e4cc727; op2val:0x400f61026fb4a229;
op3val:0x7fe529d945c07226; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x595145e4cc727 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf61026fb4a229 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x529d945c07226 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc595145e4cc727; op2val:0x400f61026fb4a229;
op3val:0x7fe529d945c07226; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6084b304bf18f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0440723dc138b and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x665f844db4adf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6084b304bf18f; op2val:0x3fc0440723dc138b;
op3val:0x7f9665f844db4adf; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6084b304bf18f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0440723dc138b and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x665f844db4adf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6084b304bf18f; op2val:0x3fc0440723dc138b;
op3val:0x7f9665f844db4adf; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6084b304bf18f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0440723dc138b and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x665f844db4adf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6084b304bf18f; op2val:0x3fc0440723dc138b;
op3val:0x7f9665f844db4adf; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6084b304bf18f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0440723dc138b and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x665f844db4adf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6084b304bf18f; op2val:0x3fc0440723dc138b;
op3val:0x7f9665f844db4adf; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6084b304bf18f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0440723dc138b and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x665f844db4adf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6084b304bf18f; op2val:0x3fc0440723dc138b;
op3val:0x7f9665f844db4adf; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x66ac2ff7114a7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0d0231972be25 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x78e60139bf53f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc66ac2ff7114a7; op2val:0x3ff0d0231972be25;
op3val:0x7fc78e60139bf53f; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x66ac2ff7114a7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0d0231972be25 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x78e60139bf53f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc66ac2ff7114a7; op2val:0x3ff0d0231972be25;
op3val:0x7fc78e60139bf53f; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x66ac2ff7114a7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0d0231972be25 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x78e60139bf53f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc66ac2ff7114a7; op2val:0x3ff0d0231972be25;
op3val:0x7fc78e60139bf53f; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x66ac2ff7114a7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0d0231972be25 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x78e60139bf53f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc66ac2ff7114a7; op2val:0x3ff0d0231972be25;
op3val:0x7fc78e60139bf53f; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x66ac2ff7114a7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0d0231972be25 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x78e60139bf53f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc66ac2ff7114a7; op2val:0x3ff0d0231972be25;
op3val:0x7fc78e60139bf53f; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x746a063e32f3f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x57ebfae2b872f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf45158aa6d635 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc746a063e32f3f; op2val:0x40157ebfae2b872f;
op3val:0x7fef45158aa6d635; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x746a063e32f3f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x57ebfae2b872f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf45158aa6d635 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc746a063e32f3f; op2val:0x40157ebfae2b872f;
op3val:0x7fef45158aa6d635; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x746a063e32f3f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x57ebfae2b872f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf45158aa6d635 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc746a063e32f3f; op2val:0x40157ebfae2b872f;
op3val:0x7fef45158aa6d635; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x746a063e32f3f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x57ebfae2b872f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf45158aa6d635 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc746a063e32f3f; op2val:0x40157ebfae2b872f;
op3val:0x7fef45158aa6d635; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x746a063e32f3f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x57ebfae2b872f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf45158aa6d635 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc746a063e32f3f; op2val:0x40157ebfae2b872f;
op3val:0x7fef45158aa6d635; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8152cec29ef7f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xba9139c781bd0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4d11c7ed6eb1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8152cec29ef7f; op2val:0x3ffba9139c781bd0;
op3val:0x7fd4d11c7ed6eb1b; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8152cec29ef7f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xba9139c781bd0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4d11c7ed6eb1b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8152cec29ef7f; op2val:0x3ffba9139c781bd0;
op3val:0x7fd4d11c7ed6eb1b; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8152cec29ef7f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xba9139c781bd0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4d11c7ed6eb1b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8152cec29ef7f; op2val:0x3ffba9139c781bd0;
op3val:0x7fd4d11c7ed6eb1b; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8152cec29ef7f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xba9139c781bd0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4d11c7ed6eb1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8152cec29ef7f; op2val:0x3ffba9139c781bd0;
op3val:0x7fd4d11c7ed6eb1b; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8152cec29ef7f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xba9139c781bd0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4d11c7ed6eb1b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8152cec29ef7f; op2val:0x3ffba9139c781bd0;
op3val:0x7fd4d11c7ed6eb1b; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a4decc210893 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2a1f12d67acdb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcb2e920d67af3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a4decc210893; op2val:0x4002a1f12d67acdb;
op3val:0x7fdcb2e920d67af3; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a4decc210893 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2a1f12d67acdb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcb2e920d67af3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a4decc210893; op2val:0x4002a1f12d67acdb;
op3val:0x7fdcb2e920d67af3; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a4decc210893 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2a1f12d67acdb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcb2e920d67af3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a4decc210893; op2val:0x4002a1f12d67acdb;
op3val:0x7fdcb2e920d67af3; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a4decc210893 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2a1f12d67acdb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcb2e920d67af3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a4decc210893; op2val:0x4002a1f12d67acdb;
op3val:0x7fdcb2e920d67af3; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a4decc210893 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2a1f12d67acdb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcb2e920d67af3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a4decc210893; op2val:0x4002a1f12d67acdb;
op3val:0x7fdcb2e920d67af3; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a82752785fdf and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3ac2fa289aaaf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe5107c113b71d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a82752785fdf; op2val:0x4013ac2fa289aaaf;
op3val:0x7fee5107c113b71d; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a82752785fdf and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3ac2fa289aaaf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe5107c113b71d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a82752785fdf; op2val:0x4013ac2fa289aaaf;
op3val:0x7fee5107c113b71d; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a82752785fdf and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3ac2fa289aaaf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe5107c113b71d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a82752785fdf; op2val:0x4013ac2fa289aaaf;
op3val:0x7fee5107c113b71d; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a82752785fdf and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3ac2fa289aaaf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe5107c113b71d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a82752785fdf; op2val:0x4013ac2fa289aaaf;
op3val:0x7fee5107c113b71d; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a82752785fdf and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3ac2fa289aaaf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe5107c113b71d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a82752785fdf; op2val:0x4013ac2fa289aaaf;
op3val:0x7fee5107c113b71d; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6f3177f7676dd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8b3ba7903c2ab; op2val:0x4006f3177f7676dd;
op3val:0x7fe1b73726cc4ff0; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6f3177f7676dd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8b3ba7903c2ab; op2val:0x4006f3177f7676dd;
op3val:0x7fe1b73726cc4ff0; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6f3177f7676dd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8b3ba7903c2ab; op2val:0x4006f3177f7676dd;
op3val:0x7fe1b73726cc4ff0; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6f3177f7676dd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8b3ba7903c2ab; op2val:0x4006f3177f7676dd;
op3val:0x7fe1b73726cc4ff0; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6f3177f7676dd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8b3ba7903c2ab; op2val:0x4006f3177f7676dd;
op3val:0x7fe1b73726cc4ff0; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa1a2014c80658 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b63fed3f1873; op2val:0x400a1a2014c80658;
op3val:0x7fe4f911cba6947d; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa1a2014c80658 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b63fed3f1873; op2val:0x400a1a2014c80658;
op3val:0x7fe4f911cba6947d; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa1a2014c80658 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b63fed3f1873; op2val:0x400a1a2014c80658;
op3val:0x7fe4f911cba6947d; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa1a2014c80658 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b63fed3f1873; op2val:0x400a1a2014c80658;
op3val:0x7fe4f911cba6947d; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa1a2014c80658 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b63fed3f1873; op2val:0x400a1a2014c80658;
op3val:0x7fe4f911cba6947d; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x07ed749af0a91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcadd854d58145f; op2val:0x40107ed749af0a91;
op3val:0x7febb27f4381021f; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x07ed749af0a91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcadd854d58145f; op2val:0x40107ed749af0a91;
op3val:0x7febb27f4381021f; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x07ed749af0a91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcadd854d58145f; op2val:0x40107ed749af0a91;
op3val:0x7febb27f4381021f; valaddr_reg:x3; val_offset:861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 861*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x07ed749af0a91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcadd854d58145f; op2val:0x40107ed749af0a91;
op3val:0x7febb27f4381021f; valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x07ed749af0a91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcadd854d58145f; op2val:0x40107ed749af0a91;
op3val:0x7febb27f4381021f; valaddr_reg:x3; val_offset:867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 867*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc5d403b21099f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x45d0bd32bed6c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x20cc1a2dc61a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc5d403b21099f; op2val:0x40045d0bd32bed6c;
op3val:0x7fe20cc1a2dc61a1; valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc5d403b21099f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x45d0bd32bed6c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x20cc1a2dc61a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc5d403b21099f; op2val:0x40045d0bd32bed6c;
op3val:0x7fe20cc1a2dc61a1; valaddr_reg:x3; val_offset:873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 873*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc5d403b21099f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x45d0bd32bed6c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x20cc1a2dc61a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc5d403b21099f; op2val:0x40045d0bd32bed6c;
op3val:0x7fe20cc1a2dc61a1; valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc5d403b21099f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x45d0bd32bed6c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x20cc1a2dc61a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc5d403b21099f; op2val:0x40045d0bd32bed6c;
op3val:0x7fe20cc1a2dc61a1; valaddr_reg:x3; val_offset:879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 879*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc5d403b21099f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x45d0bd32bed6c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x20cc1a2dc61a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc5d403b21099f; op2val:0x40045d0bd32bed6c;
op3val:0x7fe20cc1a2dc61a1; valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec34018f9e9cb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x30d63352622ac and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x250ccc004e0f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec34018f9e9cb; op2val:0x40030d63352622ac;
op3val:0x7fe250ccc004e0f7; valaddr_reg:x3; val_offset:885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 885*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec34018f9e9cb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x30d63352622ac and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x250ccc004e0f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec34018f9e9cb; op2val:0x40030d63352622ac;
op3val:0x7fe250ccc004e0f7; valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec34018f9e9cb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x30d63352622ac and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x250ccc004e0f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec34018f9e9cb; op2val:0x40030d63352622ac;
op3val:0x7fe250ccc004e0f7; valaddr_reg:x3; val_offset:891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 891*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec34018f9e9cb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x30d63352622ac and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x250ccc004e0f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec34018f9e9cb; op2val:0x40030d63352622ac;
op3val:0x7fe250ccc004e0f7; valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec34018f9e9cb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x30d63352622ac and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x250ccc004e0f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec34018f9e9cb; op2val:0x40030d63352622ac;
op3val:0x7fe250ccc004e0f7; valaddr_reg:x3; val_offset:897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 897*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01ddc928e0d81 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e118a6368321 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1009954929043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01ddc928e0d81; op2val:0x3fe0e118a6368321;
op3val:0x7fc1009954929043; valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01ddc928e0d81 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e118a6368321 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1009954929043 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01ddc928e0d81; op2val:0x3fe0e118a6368321;
op3val:0x7fc1009954929043; valaddr_reg:x3; val_offset:903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 903*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01ddc928e0d81 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e118a6368321 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1009954929043 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01ddc928e0d81; op2val:0x3fe0e118a6368321;
op3val:0x7fc1009954929043; valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01ddc928e0d81 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e118a6368321 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1009954929043 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01ddc928e0d81; op2val:0x3fe0e118a6368321;
op3val:0x7fc1009954929043; valaddr_reg:x3; val_offset:909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 909*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01ddc928e0d81 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e118a6368321 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1009954929043 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01ddc928e0d81; op2val:0x3fe0e118a6368321;
op3val:0x7fc1009954929043; valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x04e0b27da3cc5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c9081d6ba08b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa46ce1f6a5a39 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd04e0b27da3cc5; op2val:0x3ff9c9081d6ba08b;
op3val:0x7fda46ce1f6a5a39; valaddr_reg:x3; val_offset:915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 915*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x04e0b27da3cc5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c9081d6ba08b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa46ce1f6a5a39 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd04e0b27da3cc5; op2val:0x3ff9c9081d6ba08b;
op3val:0x7fda46ce1f6a5a39; valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x04e0b27da3cc5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c9081d6ba08b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa46ce1f6a5a39 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd04e0b27da3cc5; op2val:0x3ff9c9081d6ba08b;
op3val:0x7fda46ce1f6a5a39; valaddr_reg:x3; val_offset:921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 921*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x04e0b27da3cc5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c9081d6ba08b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa46ce1f6a5a39 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd04e0b27da3cc5; op2val:0x3ff9c9081d6ba08b;
op3val:0x7fda46ce1f6a5a39; valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x04e0b27da3cc5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c9081d6ba08b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa46ce1f6a5a39 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd04e0b27da3cc5; op2val:0x3ff9c9081d6ba08b;
op3val:0x7fda46ce1f6a5a39; valaddr_reg:x3; val_offset:927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 927*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x125e354d1e3c9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc58f1f9e05a4f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe61a18d4013af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd125e354d1e3c9; op2val:0x3ffc58f1f9e05a4f;
op3val:0x7fde61a18d4013af; valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x125e354d1e3c9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc58f1f9e05a4f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe61a18d4013af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd125e354d1e3c9; op2val:0x3ffc58f1f9e05a4f;
op3val:0x7fde61a18d4013af; valaddr_reg:x3; val_offset:933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 933*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x125e354d1e3c9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc58f1f9e05a4f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe61a18d4013af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd125e354d1e3c9; op2val:0x3ffc58f1f9e05a4f;
op3val:0x7fde61a18d4013af; valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x125e354d1e3c9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc58f1f9e05a4f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe61a18d4013af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd125e354d1e3c9; op2val:0x3ffc58f1f9e05a4f;
op3val:0x7fde61a18d4013af; valaddr_reg:x3; val_offset:939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 939*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x125e354d1e3c9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc58f1f9e05a4f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe61a18d4013af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd125e354d1e3c9; op2val:0x3ffc58f1f9e05a4f;
op3val:0x7fde61a18d4013af; valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x173e2abe9259b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x7867ec4d41237 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a94aa8cadc89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd173e2abe9259b; op2val:0x4007867ec4d41237;
op3val:0x7fe9a94aa8cadc89; valaddr_reg:x3; val_offset:945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 945*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x173e2abe9259b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x7867ec4d41237 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a94aa8cadc89 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd173e2abe9259b; op2val:0x4007867ec4d41237;
op3val:0x7fe9a94aa8cadc89; valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x173e2abe9259b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x7867ec4d41237 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a94aa8cadc89 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd173e2abe9259b; op2val:0x4007867ec4d41237;
op3val:0x7fe9a94aa8cadc89; valaddr_reg:x3; val_offset:951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 951*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x173e2abe9259b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x7867ec4d41237 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a94aa8cadc89 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd173e2abe9259b; op2val:0x4007867ec4d41237;
op3val:0x7fe9a94aa8cadc89; valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x173e2abe9259b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x7867ec4d41237 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a94aa8cadc89 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd173e2abe9259b; op2val:0x4007867ec4d41237;
op3val:0x7fe9a94aa8cadc89; valaddr_reg:x3; val_offset:957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 957*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x193ffdf23ced1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x50276b6180376 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x714f4c067d1ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd193ffdf23ced1; op2val:0x40050276b6180376;
op3val:0x7fe714f4c067d1ec; valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x193ffdf23ced1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x50276b6180376 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x714f4c067d1ec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd193ffdf23ced1; op2val:0x40050276b6180376;
op3val:0x7fe714f4c067d1ec; valaddr_reg:x3; val_offset:963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 963*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x193ffdf23ced1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x50276b6180376 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x714f4c067d1ec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd193ffdf23ced1; op2val:0x40050276b6180376;
op3val:0x7fe714f4c067d1ec; valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x193ffdf23ced1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x50276b6180376 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x714f4c067d1ec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd193ffdf23ced1; op2val:0x40050276b6180376;
op3val:0x7fe714f4c067d1ec; valaddr_reg:x3; val_offset:969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 969*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x193ffdf23ced1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x50276b6180376 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x714f4c067d1ec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd193ffdf23ced1; op2val:0x40050276b6180376;
op3val:0x7fe714f4c067d1ec; valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1b0a743d1c7c5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x49f03722a8815 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6cca06251390e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1b0a743d1c7c5; op2val:0x40049f03722a8815;
op3val:0x7fe6cca06251390e; valaddr_reg:x3; val_offset:975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 975*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1b0a743d1c7c5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x49f03722a8815 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6cca06251390e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1b0a743d1c7c5; op2val:0x40049f03722a8815;
op3val:0x7fe6cca06251390e; valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1b0a743d1c7c5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x49f03722a8815 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6cca06251390e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1b0a743d1c7c5; op2val:0x40049f03722a8815;
op3val:0x7fe6cca06251390e; valaddr_reg:x3; val_offset:981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 981*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1b0a743d1c7c5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x49f03722a8815 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6cca06251390e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1b0a743d1c7c5; op2val:0x40049f03722a8815;
op3val:0x7fe6cca06251390e; valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1b0a743d1c7c5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x49f03722a8815 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6cca06251390e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1b0a743d1c7c5; op2val:0x40049f03722a8815;
op3val:0x7fe6cca06251390e; valaddr_reg:x3; val_offset:987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 987*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x29c4cac7a9799 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x5ce4d98b74cf6 and fs3 == 0 and fe3 == 0x7f7 and fm3 == 0x95d1b3f609cff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd29c4cac7a9799; op2val:0x3f95ce4d98b74cf6;
op3val:0x7f795d1b3f609cff; valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x29c4cac7a9799 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x5ce4d98b74cf6 and fs3 == 0 and fe3 == 0x7f7 and fm3 == 0x95d1b3f609cff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd29c4cac7a9799; op2val:0x3f95ce4d98b74cf6;
op3val:0x7f795d1b3f609cff; valaddr_reg:x3; val_offset:993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 993*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x29c4cac7a9799 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x5ce4d98b74cf6 and fs3 == 0 and fe3 == 0x7f7 and fm3 == 0x95d1b3f609cff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd29c4cac7a9799; op2val:0x3f95ce4d98b74cf6;
op3val:0x7f795d1b3f609cff; valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x29c4cac7a9799 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x5ce4d98b74cf6 and fs3 == 0 and fe3 == 0x7f7 and fm3 == 0x95d1b3f609cff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd29c4cac7a9799; op2val:0x3f95ce4d98b74cf6;
op3val:0x7f795d1b3f609cff; valaddr_reg:x3; val_offset:999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 999*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x29c4cac7a9799 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x5ce4d98b74cf6 and fs3 == 0 and fe3 == 0x7f7 and fm3 == 0x95d1b3f609cff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd29c4cac7a9799; op2val:0x3f95ce4d98b74cf6;
op3val:0x7f795d1b3f609cff; valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c8ac78bde04d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9addc8b902ed2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe25aa309e4f15 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c8ac78bde04d; op2val:0x3ff9addc8b902ed2;
op3val:0x7fde25aa309e4f15; valaddr_reg:x3; val_offset:1005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1005*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c8ac78bde04d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9addc8b902ed2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe25aa309e4f15 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c8ac78bde04d; op2val:0x3ff9addc8b902ed2;
op3val:0x7fde25aa309e4f15; valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c8ac78bde04d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9addc8b902ed2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe25aa309e4f15 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c8ac78bde04d; op2val:0x3ff9addc8b902ed2;
op3val:0x7fde25aa309e4f15; valaddr_reg:x3; val_offset:1011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1011*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c8ac78bde04d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9addc8b902ed2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe25aa309e4f15 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c8ac78bde04d; op2val:0x3ff9addc8b902ed2;
op3val:0x7fde25aa309e4f15; valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c8ac78bde04d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9addc8b902ed2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe25aa309e4f15 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c8ac78bde04d; op2val:0x3ff9addc8b902ed2;
op3val:0x7fde25aa309e4f15; valaddr_reg:x3; val_offset:1017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1017*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x383dd5169c637 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1527d01b8191f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x520b76d0b75a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd383dd5169c637; op2val:0x3fd1527d01b8191f;
op3val:0x7fb520b76d0b75a7; valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x383dd5169c637 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1527d01b8191f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x520b76d0b75a7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd383dd5169c637; op2val:0x3fd1527d01b8191f;
op3val:0x7fb520b76d0b75a7; valaddr_reg:x3; val_offset:1023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1023*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x383dd5169c637 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1527d01b8191f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x520b76d0b75a7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd383dd5169c637; op2val:0x3fd1527d01b8191f;
op3val:0x7fb520b76d0b75a7; valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x383dd5169c637 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1527d01b8191f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x520b76d0b75a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd383dd5169c637; op2val:0x3fd1527d01b8191f;
op3val:0x7fb520b76d0b75a7; valaddr_reg:x3; val_offset:1029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1029*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x383dd5169c637 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1527d01b8191f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x520b76d0b75a7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd383dd5169c637; op2val:0x3fd1527d01b8191f;
op3val:0x7fb520b76d0b75a7; valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41b82ca2e0c7d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3fc6805c084d1; op2val:0x3fe41b82ca2e0c7d;
op3val:0x7fc91ddf5613b02f; valaddr_reg:x3; val_offset:1035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1035*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41b82ca2e0c7d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3fc6805c084d1; op2val:0x3fe41b82ca2e0c7d;
op3val:0x7fc91ddf5613b02f; valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41b82ca2e0c7d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3fc6805c084d1; op2val:0x3fe41b82ca2e0c7d;
op3val:0x7fc91ddf5613b02f; valaddr_reg:x3; val_offset:1041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1041*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41b82ca2e0c7d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3fc6805c084d1; op2val:0x3fe41b82ca2e0c7d;
op3val:0x7fc91ddf5613b02f; valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41b82ca2e0c7d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3fc6805c084d1; op2val:0x3fe41b82ca2e0c7d;
op3val:0x7fc91ddf5613b02f; valaddr_reg:x3; val_offset:1047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1047*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5bbe5dcd5070e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54e6e64764369; op2val:0x4005bbe5dcd5070e;
op3val:0x7fecf127a6af77f2; valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5bbe5dcd5070e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54e6e64764369; op2val:0x4005bbe5dcd5070e;
op3val:0x7fecf127a6af77f2; valaddr_reg:x3; val_offset:1053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1053*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5bbe5dcd5070e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54e6e64764369; op2val:0x4005bbe5dcd5070e;
op3val:0x7fecf127a6af77f2; valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5bbe5dcd5070e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54e6e64764369; op2val:0x4005bbe5dcd5070e;
op3val:0x7fecf127a6af77f2; valaddr_reg:x3; val_offset:1059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1059*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5bbe5dcd5070e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54e6e64764369; op2val:0x4005bbe5dcd5070e;
op3val:0x7fecf127a6af77f2; valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fb8b9f14c19d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcea965fb571c3 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x3dd40e50b5657 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5fb8b9f14c19d; op2val:0x3fccea965fb571c3;
op3val:0x7fb3dd40e50b5657; valaddr_reg:x3; val_offset:1065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1065*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fb8b9f14c19d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcea965fb571c3 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x3dd40e50b5657 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5fb8b9f14c19d; op2val:0x3fccea965fb571c3;
op3val:0x7fb3dd40e50b5657; valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fb8b9f14c19d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcea965fb571c3 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x3dd40e50b5657 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5fb8b9f14c19d; op2val:0x3fccea965fb571c3;
op3val:0x7fb3dd40e50b5657; valaddr_reg:x3; val_offset:1071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1071*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fb8b9f14c19d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcea965fb571c3 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x3dd40e50b5657 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5fb8b9f14c19d; op2val:0x3fccea965fb571c3;
op3val:0x7fb3dd40e50b5657; valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fb8b9f14c19d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcea965fb571c3 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x3dd40e50b5657 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5fb8b9f14c19d; op2val:0x3fccea965fb571c3;
op3val:0x7fb3dd40e50b5657; valaddr_reg:x3; val_offset:1077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1077*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6776f6ab4f0a7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcd9eda2830b60 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x441823f93c0d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6776f6ab4f0a7; op2val:0x3fdcd9eda2830b60;
op3val:0x7fc441823f93c0d7; valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6776f6ab4f0a7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcd9eda2830b60 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x441823f93c0d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6776f6ab4f0a7; op2val:0x3fdcd9eda2830b60;
op3val:0x7fc441823f93c0d7; valaddr_reg:x3; val_offset:1083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1083*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6776f6ab4f0a7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcd9eda2830b60 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x441823f93c0d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6776f6ab4f0a7; op2val:0x3fdcd9eda2830b60;
op3val:0x7fc441823f93c0d7; valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6776f6ab4f0a7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcd9eda2830b60 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x441823f93c0d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6776f6ab4f0a7; op2val:0x3fdcd9eda2830b60;
op3val:0x7fc441823f93c0d7; valaddr_reg:x3; val_offset:1089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1089*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6776f6ab4f0a7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcd9eda2830b60 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x441823f93c0d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6776f6ab4f0a7; op2val:0x3fdcd9eda2830b60;
op3val:0x7fc441823f93c0d7; valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4b4a64f556751 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7107573e4c40b; op2val:0x4004b4a64f556751;
op3val:0x7fedd8fbb754b55c; valaddr_reg:x3; val_offset:1095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1095*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4b4a64f556751 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7107573e4c40b; op2val:0x4004b4a64f556751;
op3val:0x7fedd8fbb754b55c; valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4b4a64f556751 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7107573e4c40b; op2val:0x4004b4a64f556751;
op3val:0x7fedd8fbb754b55c; valaddr_reg:x3; val_offset:1101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1101*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4b4a64f556751 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7107573e4c40b; op2val:0x4004b4a64f556751;
op3val:0x7fedd8fbb754b55c; valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4b4a64f556751 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7107573e4c40b; op2val:0x4004b4a64f556751;
op3val:0x7fedd8fbb754b55c; valaddr_reg:x3; val_offset:1107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1107*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71b6dc9801ef7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b7942aa29dad and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0676b54059abb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71b6dc9801ef7; op2val:0x3fe6b7942aa29dad;
op3val:0x7fd0676b54059abb; valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71b6dc9801ef7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b7942aa29dad and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0676b54059abb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71b6dc9801ef7; op2val:0x3fe6b7942aa29dad;
op3val:0x7fd0676b54059abb; valaddr_reg:x3; val_offset:1113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1113*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71b6dc9801ef7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b7942aa29dad and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0676b54059abb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71b6dc9801ef7; op2val:0x3fe6b7942aa29dad;
op3val:0x7fd0676b54059abb; valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71b6dc9801ef7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b7942aa29dad and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0676b54059abb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71b6dc9801ef7; op2val:0x3fe6b7942aa29dad;
op3val:0x7fd0676b54059abb; valaddr_reg:x3; val_offset:1119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1119*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71b6dc9801ef7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b7942aa29dad and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0676b54059abb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71b6dc9801ef7; op2val:0x3fe6b7942aa29dad;
op3val:0x7fd0676b54059abb; valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x72b318fdc5f95 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4bd059a2635c8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe07b449fd6117 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd72b318fdc5f95; op2val:0x4004bd059a2635c8;
op3val:0x7fee07b449fd6117; valaddr_reg:x3; val_offset:1125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1125*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x72b318fdc5f95 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4bd059a2635c8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe07b449fd6117 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd72b318fdc5f95; op2val:0x4004bd059a2635c8;
op3val:0x7fee07b449fd6117; valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x72b318fdc5f95 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4bd059a2635c8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe07b449fd6117 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd72b318fdc5f95; op2val:0x4004bd059a2635c8;
op3val:0x7fee07b449fd6117; valaddr_reg:x3; val_offset:1131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1131*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x72b318fdc5f95 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4bd059a2635c8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe07b449fd6117 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd72b318fdc5f95; op2val:0x4004bd059a2635c8;
op3val:0x7fee07b449fd6117; valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x72b318fdc5f95 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4bd059a2635c8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe07b449fd6117 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd72b318fdc5f95; op2val:0x4004bd059a2635c8;
op3val:0x7fee07b449fd6117; valaddr_reg:x3; val_offset:1137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1137*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7397d51c953cf and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xe3a5d84ef4fee and fs3 == 0 and fe3 == 0x7f7 and fm3 == 0x5f0418f60057f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7397d51c953cf; op2val:0x3f8e3a5d84ef4fee;
op3val:0x7f75f0418f60057f; valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7397d51c953cf and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xe3a5d84ef4fee and fs3 == 0 and fe3 == 0x7f7 and fm3 == 0x5f0418f60057f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7397d51c953cf; op2val:0x3f8e3a5d84ef4fee;
op3val:0x7f75f0418f60057f; valaddr_reg:x3; val_offset:1143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1143*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7397d51c953cf and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xe3a5d84ef4fee and fs3 == 0 and fe3 == 0x7f7 and fm3 == 0x5f0418f60057f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7397d51c953cf; op2val:0x3f8e3a5d84ef4fee;
op3val:0x7f75f0418f60057f; valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7397d51c953cf and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xe3a5d84ef4fee and fs3 == 0 and fe3 == 0x7f7 and fm3 == 0x5f0418f60057f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7397d51c953cf; op2val:0x3f8e3a5d84ef4fee;
op3val:0x7f75f0418f60057f; valaddr_reg:x3; val_offset:1149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1149*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7397d51c953cf and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xe3a5d84ef4fee and fs3 == 0 and fe3 == 0x7f7 and fm3 == 0x5f0418f60057f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7397d51c953cf; op2val:0x3f8e3a5d84ef4fee;
op3val:0x7f75f0418f60057f; valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b61610417617 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1fcfbfd7f78c9 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaa860bcebd8af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7b61610417617; op2val:0x3fc1fcfbfd7f78c9;
op3val:0x7faaa860bcebd8af; valaddr_reg:x3; val_offset:1155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1155*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b61610417617 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1fcfbfd7f78c9 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaa860bcebd8af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7b61610417617; op2val:0x3fc1fcfbfd7f78c9;
op3val:0x7faaa860bcebd8af; valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b61610417617 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1fcfbfd7f78c9 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaa860bcebd8af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7b61610417617; op2val:0x3fc1fcfbfd7f78c9;
op3val:0x7faaa860bcebd8af; valaddr_reg:x3; val_offset:1161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1161*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b61610417617 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1fcfbfd7f78c9 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaa860bcebd8af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7b61610417617; op2val:0x3fc1fcfbfd7f78c9;
op3val:0x7faaa860bcebd8af; valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b61610417617 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1fcfbfd7f78c9 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaa860bcebd8af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7b61610417617; op2val:0x3fc1fcfbfd7f78c9;
op3val:0x7faaa860bcebd8af; valaddr_reg:x3; val_offset:1167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1167*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7be4444b4f445 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x270188837b78d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb5c6512b6df3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7be4444b4f445; op2val:0x400270188837b78d;
op3val:0x7feb5c6512b6df3f; valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7be4444b4f445 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x270188837b78d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb5c6512b6df3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7be4444b4f445; op2val:0x400270188837b78d;
op3val:0x7feb5c6512b6df3f; valaddr_reg:x3; val_offset:1173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1173*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7be4444b4f445 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x270188837b78d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb5c6512b6df3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7be4444b4f445; op2val:0x400270188837b78d;
op3val:0x7feb5c6512b6df3f; valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7be4444b4f445 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x270188837b78d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb5c6512b6df3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7be4444b4f445; op2val:0x400270188837b78d;
op3val:0x7feb5c6512b6df3f; valaddr_reg:x3; val_offset:1179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1179*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7be4444b4f445 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x270188837b78d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb5c6512b6df3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7be4444b4f445; op2val:0x400270188837b78d;
op3val:0x7feb5c6512b6df3f; valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e1bc5122bc39 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1da94c8484b62 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa619cf05ea0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e1bc5122bc39; op2val:0x4001da94c8484b62;
op3val:0x7feaa619cf05ea0d; valaddr_reg:x3; val_offset:1185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1185*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e1bc5122bc39 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1da94c8484b62 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa619cf05ea0d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e1bc5122bc39; op2val:0x4001da94c8484b62;
op3val:0x7feaa619cf05ea0d; valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e1bc5122bc39 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1da94c8484b62 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa619cf05ea0d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e1bc5122bc39; op2val:0x4001da94c8484b62;
op3val:0x7feaa619cf05ea0d; valaddr_reg:x3; val_offset:1191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1191*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e1bc5122bc39 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1da94c8484b62 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa619cf05ea0d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e1bc5122bc39; op2val:0x4001da94c8484b62;
op3val:0x7feaa619cf05ea0d; valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e1bc5122bc39 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1da94c8484b62 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa619cf05ea0d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e1bc5122bc39; op2val:0x4001da94c8484b62;
op3val:0x7feaa619cf05ea0d; valaddr_reg:x3; val_offset:1197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1197*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e1dc0a8e1a11 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x082b9acfac9b7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8a4fc4c166a46 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e1dc0a8e1a11; op2val:0x400082b9acfac9b7;
op3val:0x7fe8a4fc4c166a46; valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e1dc0a8e1a11 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x082b9acfac9b7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8a4fc4c166a46 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e1dc0a8e1a11; op2val:0x400082b9acfac9b7;
op3val:0x7fe8a4fc4c166a46; valaddr_reg:x3; val_offset:1203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1203*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e1dc0a8e1a11 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x082b9acfac9b7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8a4fc4c166a46 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e1dc0a8e1a11; op2val:0x400082b9acfac9b7;
op3val:0x7fe8a4fc4c166a46; valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e1dc0a8e1a11 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x082b9acfac9b7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8a4fc4c166a46 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e1dc0a8e1a11; op2val:0x400082b9acfac9b7;
op3val:0x7fe8a4fc4c166a46; valaddr_reg:x3; val_offset:1209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1209*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e1dc0a8e1a11 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x082b9acfac9b7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8a4fc4c166a46 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e1dc0a8e1a11; op2val:0x400082b9acfac9b7;
op3val:0x7fe8a4fc4c166a46; valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07fa3fe059060 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8276674380fc3; op2val:0x3ff07fa3fe059060;
op3val:0x7fd8e816c2502d73; valaddr_reg:x3; val_offset:1215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1215*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07fa3fe059060 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8276674380fc3; op2val:0x3ff07fa3fe059060;
op3val:0x7fd8e816c2502d73; valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07fa3fe059060 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8276674380fc3; op2val:0x3ff07fa3fe059060;
op3val:0x7fd8e816c2502d73; valaddr_reg:x3; val_offset:1221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1221*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07fa3fe059060 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8276674380fc3; op2val:0x3ff07fa3fe059060;
op3val:0x7fd8e816c2502d73; valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07fa3fe059060 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8276674380fc3; op2val:0x3ff07fa3fe059060;
op3val:0x7fd8e816c2502d73; valaddr_reg:x3; val_offset:1227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1227*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x82899f3f923cd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9e9b3e1b10de0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x39027b5136447 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd82899f3f923cd; op2val:0x3fe9e9b3e1b10de0;
op3val:0x7fd39027b5136447; valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x82899f3f923cd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9e9b3e1b10de0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x39027b5136447 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd82899f3f923cd; op2val:0x3fe9e9b3e1b10de0;
op3val:0x7fd39027b5136447; valaddr_reg:x3; val_offset:1233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1233*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x82899f3f923cd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9e9b3e1b10de0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x39027b5136447 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd82899f3f923cd; op2val:0x3fe9e9b3e1b10de0;
op3val:0x7fd39027b5136447; valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x82899f3f923cd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9e9b3e1b10de0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x39027b5136447 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd82899f3f923cd; op2val:0x3fe9e9b3e1b10de0;
op3val:0x7fd39027b5136447; valaddr_reg:x3; val_offset:1239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1239*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x82899f3f923cd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9e9b3e1b10de0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x39027b5136447 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd82899f3f923cd; op2val:0x3fe9e9b3e1b10de0;
op3val:0x7fd39027b5136447; valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x858851b4b719d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x52cd08d9ba0ff and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x01c2fbc0cad77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd858851b4b719d; op2val:0x3fd52cd08d9ba0ff;
op3val:0x7fc01c2fbc0cad77; valaddr_reg:x3; val_offset:1245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1245*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x858851b4b719d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x52cd08d9ba0ff and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x01c2fbc0cad77 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd858851b4b719d; op2val:0x3fd52cd08d9ba0ff;
op3val:0x7fc01c2fbc0cad77; valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x858851b4b719d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x52cd08d9ba0ff and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x01c2fbc0cad77 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd858851b4b719d; op2val:0x3fd52cd08d9ba0ff;
op3val:0x7fc01c2fbc0cad77; valaddr_reg:x3; val_offset:1251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1251*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x858851b4b719d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x52cd08d9ba0ff and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x01c2fbc0cad77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd858851b4b719d; op2val:0x3fd52cd08d9ba0ff;
op3val:0x7fc01c2fbc0cad77; valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x858851b4b719d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x52cd08d9ba0ff and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x01c2fbc0cad77 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd858851b4b719d; op2val:0x3fd52cd08d9ba0ff;
op3val:0x7fc01c2fbc0cad77; valaddr_reg:x3; val_offset:1257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1257*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x863a1b435dbbb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2836c6ec995be and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc386af013d02d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd863a1b435dbbb; op2val:0x3ff2836c6ec995be;
op3val:0x7fdc386af013d02d; valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x863a1b435dbbb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2836c6ec995be and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc386af013d02d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd863a1b435dbbb; op2val:0x3ff2836c6ec995be;
op3val:0x7fdc386af013d02d; valaddr_reg:x3; val_offset:1263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1263*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x863a1b435dbbb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2836c6ec995be and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc386af013d02d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd863a1b435dbbb; op2val:0x3ff2836c6ec995be;
op3val:0x7fdc386af013d02d; valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x863a1b435dbbb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2836c6ec995be and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc386af013d02d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd863a1b435dbbb; op2val:0x3ff2836c6ec995be;
op3val:0x7fdc386af013d02d; valaddr_reg:x3; val_offset:1269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1269*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x863a1b435dbbb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2836c6ec995be and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc386af013d02d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd863a1b435dbbb; op2val:0x3ff2836c6ec995be;
op3val:0x7fdc386af013d02d; valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x891e2efdb19e1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8bfa6e87db32d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x300911db76428 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd891e2efdb19e1; op2val:0x3ff8bfa6e87db32d;
op3val:0x7fe300911db76428; valaddr_reg:x3; val_offset:1275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1275*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x891e2efdb19e1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8bfa6e87db32d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x300911db76428 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd891e2efdb19e1; op2val:0x3ff8bfa6e87db32d;
op3val:0x7fe300911db76428; valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1278*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x891e2efdb19e1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8bfa6e87db32d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x300911db76428 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd891e2efdb19e1; op2val:0x3ff8bfa6e87db32d;
op3val:0x7fe300911db76428; valaddr_reg:x3; val_offset:1281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1281*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x891e2efdb19e1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8bfa6e87db32d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x300911db76428 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd891e2efdb19e1; op2val:0x3ff8bfa6e87db32d;
op3val:0x7fe300911db76428; valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x891e2efdb19e1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8bfa6e87db32d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x300911db76428 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd891e2efdb19e1; op2val:0x3ff8bfa6e87db32d;
op3val:0x7fe300911db76428; valaddr_reg:x3; val_offset:1287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1287*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8949f5778119b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9fd0507ccb587 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3f6776558027a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8949f5778119b; op2val:0x3ff9fd0507ccb587;
op3val:0x7fe3f6776558027a; valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8949f5778119b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9fd0507ccb587 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3f6776558027a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8949f5778119b; op2val:0x3ff9fd0507ccb587;
op3val:0x7fe3f6776558027a; valaddr_reg:x3; val_offset:1293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1293*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8949f5778119b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9fd0507ccb587 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3f6776558027a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8949f5778119b; op2val:0x3ff9fd0507ccb587;
op3val:0x7fe3f6776558027a; valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8949f5778119b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9fd0507ccb587 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3f6776558027a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8949f5778119b; op2val:0x3ff9fd0507ccb587;
op3val:0x7fe3f6776558027a; valaddr_reg:x3; val_offset:1299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1299*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8949f5778119b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9fd0507ccb587 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3f6776558027a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8949f5778119b; op2val:0x3ff9fd0507ccb587;
op3val:0x7fe3f6776558027a; valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x89ee780981d7f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4519b1a6eef31 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf443480c8c16f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd89ee780981d7f; op2val:0x3fc4519b1a6eef31;
op3val:0x7faf443480c8c16f; valaddr_reg:x3; val_offset:1305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1305*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x89ee780981d7f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4519b1a6eef31 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf443480c8c16f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd89ee780981d7f; op2val:0x3fc4519b1a6eef31;
op3val:0x7faf443480c8c16f; valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x89ee780981d7f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4519b1a6eef31 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf443480c8c16f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd89ee780981d7f; op2val:0x3fc4519b1a6eef31;
op3val:0x7faf443480c8c16f; valaddr_reg:x3; val_offset:1311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1311*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x89ee780981d7f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4519b1a6eef31 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf443480c8c16f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd89ee780981d7f; op2val:0x3fc4519b1a6eef31;
op3val:0x7faf443480c8c16f; valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x89ee780981d7f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4519b1a6eef31 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf443480c8c16f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd89ee780981d7f; op2val:0x3fc4519b1a6eef31;
op3val:0x7faf443480c8c16f; valaddr_reg:x3; val_offset:1317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1317*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8da0eee5f982f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x262463c31332c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8df57f1f0ae3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8da0eee5f982f; op2val:0x3fe262463c31332c;
op3val:0x7fcc8df57f1f0ae3; valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8da0eee5f982f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x262463c31332c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8df57f1f0ae3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8da0eee5f982f; op2val:0x3fe262463c31332c;
op3val:0x7fcc8df57f1f0ae3; valaddr_reg:x3; val_offset:1323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1323*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8da0eee5f982f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x262463c31332c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8df57f1f0ae3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8da0eee5f982f; op2val:0x3fe262463c31332c;
op3val:0x7fcc8df57f1f0ae3; valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8da0eee5f982f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x262463c31332c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8df57f1f0ae3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8da0eee5f982f; op2val:0x3fe262463c31332c;
op3val:0x7fcc8df57f1f0ae3; valaddr_reg:x3; val_offset:1329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1329*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8da0eee5f982f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x262463c31332c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8df57f1f0ae3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8da0eee5f982f; op2val:0x3fe262463c31332c;
op3val:0x7fcc8df57f1f0ae3; valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x970d2dec24b47 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x41348151b216e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfebb02e1f878d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd970d2dec24b47; op2val:0x40041348151b216e;
op3val:0x7fefebb02e1f878d; valaddr_reg:x3; val_offset:1335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1335*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x970d2dec24b47 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x41348151b216e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfebb02e1f878d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd970d2dec24b47; op2val:0x40041348151b216e;
op3val:0x7fefebb02e1f878d; valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x970d2dec24b47 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x41348151b216e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfebb02e1f878d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd970d2dec24b47; op2val:0x40041348151b216e;
op3val:0x7fefebb02e1f878d; valaddr_reg:x3; val_offset:1341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1341*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x970d2dec24b47 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x41348151b216e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfebb02e1f878d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd970d2dec24b47; op2val:0x40041348151b216e;
op3val:0x7fefebb02e1f878d; valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x970d2dec24b47 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x41348151b216e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfebb02e1f878d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd970d2dec24b47; op2val:0x40041348151b216e;
op3val:0x7fefebb02e1f878d; valaddr_reg:x3; val_offset:1347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1347*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d71ffccd475 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x39aaaebff3689 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf3b5f15d59e2f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d71ffccd475; op2val:0x3ff39aaaebff3689;
op3val:0x7fdf3b5f15d59e2f; valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d71ffccd475 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x39aaaebff3689 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf3b5f15d59e2f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d71ffccd475; op2val:0x3ff39aaaebff3689;
op3val:0x7fdf3b5f15d59e2f; valaddr_reg:x3; val_offset:1353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1353*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d71ffccd475 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x39aaaebff3689 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf3b5f15d59e2f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d71ffccd475; op2val:0x3ff39aaaebff3689;
op3val:0x7fdf3b5f15d59e2f; valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d71ffccd475 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x39aaaebff3689 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf3b5f15d59e2f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d71ffccd475; op2val:0x3ff39aaaebff3689;
op3val:0x7fdf3b5f15d59e2f; valaddr_reg:x3; val_offset:1359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1359*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d71ffccd475 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x39aaaebff3689 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf3b5f15d59e2f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d71ffccd475; op2val:0x3ff39aaaebff3689;
op3val:0x7fdf3b5f15d59e2f; valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa2e19c7869ae7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xae37b5cd92b9d and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x5ff90e6260e0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda2e19c7869ae7; op2val:0x3fcae37b5cd92b9d;
op3val:0x7fb5ff90e6260e0f; valaddr_reg:x3; val_offset:1365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1365*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa2e19c7869ae7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xae37b5cd92b9d and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x5ff90e6260e0f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda2e19c7869ae7; op2val:0x3fcae37b5cd92b9d;
op3val:0x7fb5ff90e6260e0f; valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa2e19c7869ae7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xae37b5cd92b9d and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x5ff90e6260e0f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda2e19c7869ae7; op2val:0x3fcae37b5cd92b9d;
op3val:0x7fb5ff90e6260e0f; valaddr_reg:x3; val_offset:1371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1371*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa2e19c7869ae7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xae37b5cd92b9d and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x5ff90e6260e0f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda2e19c7869ae7; op2val:0x3fcae37b5cd92b9d;
op3val:0x7fb5ff90e6260e0f; valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa2e19c7869ae7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xae37b5cd92b9d and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x5ff90e6260e0f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda2e19c7869ae7; op2val:0x3fcae37b5cd92b9d;
op3val:0x7fb5ff90e6260e0f; valaddr_reg:x3; val_offset:1377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1377*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc06cd5aa5a5af and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a7bb5fe34980 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x056bb1e6989a9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc06cd5aa5a5af; op2val:0x3fe2a7bb5fe34980;
op3val:0x7fd056bb1e6989a9; valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc06cd5aa5a5af and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a7bb5fe34980 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x056bb1e6989a9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc06cd5aa5a5af; op2val:0x3fe2a7bb5fe34980;
op3val:0x7fd056bb1e6989a9; valaddr_reg:x3; val_offset:1383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1383*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc06cd5aa5a5af and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a7bb5fe34980 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x056bb1e6989a9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc06cd5aa5a5af; op2val:0x3fe2a7bb5fe34980;
op3val:0x7fd056bb1e6989a9; valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc06cd5aa5a5af and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a7bb5fe34980 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x056bb1e6989a9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc06cd5aa5a5af; op2val:0x3fe2a7bb5fe34980;
op3val:0x7fd056bb1e6989a9; valaddr_reg:x3; val_offset:1389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1389*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc06cd5aa5a5af and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a7bb5fe34980 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x056bb1e6989a9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc06cd5aa5a5af; op2val:0x3fe2a7bb5fe34980;
op3val:0x7fd056bb1e6989a9; valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc6036c1db05b5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd2dc4a5d76216 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9dfc74d0d944b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc6036c1db05b5; op2val:0x3fdd2dc4a5d76216;
op3val:0x7fc9dfc74d0d944b; valaddr_reg:x3; val_offset:1395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1395*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc6036c1db05b5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd2dc4a5d76216 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9dfc74d0d944b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc6036c1db05b5; op2val:0x3fdd2dc4a5d76216;
op3val:0x7fc9dfc74d0d944b; valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc6036c1db05b5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd2dc4a5d76216 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9dfc74d0d944b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc6036c1db05b5; op2val:0x3fdd2dc4a5d76216;
op3val:0x7fc9dfc74d0d944b; valaddr_reg:x3; val_offset:1401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1401*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc6036c1db05b5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd2dc4a5d76216 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9dfc74d0d944b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc6036c1db05b5; op2val:0x3fdd2dc4a5d76216;
op3val:0x7fc9dfc74d0d944b; valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc6036c1db05b5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd2dc4a5d76216 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9dfc74d0d944b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc6036c1db05b5; op2val:0x3fdd2dc4a5d76216;
op3val:0x7fc9dfc74d0d944b; valaddr_reg:x3; val_offset:1407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1407*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc876832fcf335 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xc9cdda6e87c28 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x98254e48b36ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc876832fcf335; op2val:0x3f9c9cdda6e87c28;
op3val:0x7f898254e48b36ff; valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc876832fcf335 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xc9cdda6e87c28 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x98254e48b36ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc876832fcf335; op2val:0x3f9c9cdda6e87c28;
op3val:0x7f898254e48b36ff; valaddr_reg:x3; val_offset:1413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1413*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc876832fcf335 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xc9cdda6e87c28 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x98254e48b36ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc876832fcf335; op2val:0x3f9c9cdda6e87c28;
op3val:0x7f898254e48b36ff; valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc876832fcf335 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xc9cdda6e87c28 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x98254e48b36ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc876832fcf335; op2val:0x3f9c9cdda6e87c28;
op3val:0x7f898254e48b36ff; valaddr_reg:x3; val_offset:1419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1419*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc876832fcf335 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xc9cdda6e87c28 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x98254e48b36ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc876832fcf335; op2val:0x3f9c9cdda6e87c28;
op3val:0x7f898254e48b36ff; valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc9ed4464571af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdbdc83df362e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa99ad8d852394 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc9ed4464571af; op2val:0x3ffdbdc83df362e4;
op3val:0x7fea99ad8d852394; valaddr_reg:x3; val_offset:1425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1425*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc9ed4464571af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdbdc83df362e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa99ad8d852394 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc9ed4464571af; op2val:0x3ffdbdc83df362e4;
op3val:0x7fea99ad8d852394; valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc9ed4464571af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdbdc83df362e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa99ad8d852394 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc9ed4464571af; op2val:0x3ffdbdc83df362e4;
op3val:0x7fea99ad8d852394; valaddr_reg:x3; val_offset:1431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1431*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc9ed4464571af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdbdc83df362e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa99ad8d852394 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc9ed4464571af; op2val:0x3ffdbdc83df362e4;
op3val:0x7fea99ad8d852394; valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc9ed4464571af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdbdc83df362e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa99ad8d852394 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc9ed4464571af; op2val:0x3ffdbdc83df362e4;
op3val:0x7fea99ad8d852394; valaddr_reg:x3; val_offset:1437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1437*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcc2450fb79d8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x04435bc917dff and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd3cdf4baf5c7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcc2450fb79d8f; op2val:0x3fc04435bc917dff;
op3val:0x7fad3cdf4baf5c7f; valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcc2450fb79d8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x04435bc917dff and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd3cdf4baf5c7f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcc2450fb79d8f; op2val:0x3fc04435bc917dff;
op3val:0x7fad3cdf4baf5c7f; valaddr_reg:x3; val_offset:1443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1443*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcc2450fb79d8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x04435bc917dff and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd3cdf4baf5c7f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcc2450fb79d8f; op2val:0x3fc04435bc917dff;
op3val:0x7fad3cdf4baf5c7f; valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcc2450fb79d8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x04435bc917dff and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd3cdf4baf5c7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcc2450fb79d8f; op2val:0x3fc04435bc917dff;
op3val:0x7fad3cdf4baf5c7f; valaddr_reg:x3; val_offset:1449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1449*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcc2450fb79d8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x04435bc917dff and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd3cdf4baf5c7f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcc2450fb79d8f; op2val:0x3fc04435bc917dff;
op3val:0x7fad3cdf4baf5c7f; valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce5ebb2a2b181 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x06f43318ba050 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdaee022114709 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdce5ebb2a2b181; op2val:0x40006f43318ba050;
op3val:0x7fedaee022114709; valaddr_reg:x3; val_offset:1455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1455*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce5ebb2a2b181 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x06f43318ba050 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdaee022114709 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdce5ebb2a2b181; op2val:0x40006f43318ba050;
op3val:0x7fedaee022114709; valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce5ebb2a2b181 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x06f43318ba050 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdaee022114709 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdce5ebb2a2b181; op2val:0x40006f43318ba050;
op3val:0x7fedaee022114709; valaddr_reg:x3; val_offset:1461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1461*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce5ebb2a2b181 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x06f43318ba050 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdaee022114709 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdce5ebb2a2b181; op2val:0x40006f43318ba050;
op3val:0x7fedaee022114709; valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce5ebb2a2b181 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x06f43318ba050 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdaee022114709 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdce5ebb2a2b181; op2val:0x40006f43318ba050;
op3val:0x7fedaee022114709; valaddr_reg:x3; val_offset:1467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1467*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcfd26bc72299b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x15481bb0f0293 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf66153f88d9a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcfd26bc72299b; op2val:0x40015481bb0f0293;
op3val:0x7fef66153f88d9a0; valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcfd26bc72299b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x15481bb0f0293 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf66153f88d9a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcfd26bc72299b; op2val:0x40015481bb0f0293;
op3val:0x7fef66153f88d9a0; valaddr_reg:x3; val_offset:1473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1473*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcfd26bc72299b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x15481bb0f0293 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf66153f88d9a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcfd26bc72299b; op2val:0x40015481bb0f0293;
op3val:0x7fef66153f88d9a0; valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcfd26bc72299b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x15481bb0f0293 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf66153f88d9a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcfd26bc72299b; op2val:0x40015481bb0f0293;
op3val:0x7fef66153f88d9a0; valaddr_reg:x3; val_offset:1479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1479*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcfd26bc72299b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x15481bb0f0293 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf66153f88d9a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcfd26bc72299b; op2val:0x40015481bb0f0293;
op3val:0x7fef66153f88d9a0; valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd27e1bfc4fb5f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc3adeb30d049a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9b888b8c9068f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd27e1bfc4fb5f; op2val:0x3ffc3adeb30d049a;
op3val:0x7fe9b888b8c9068f; valaddr_reg:x3; val_offset:1485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1485*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd27e1bfc4fb5f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc3adeb30d049a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9b888b8c9068f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd27e1bfc4fb5f; op2val:0x3ffc3adeb30d049a;
op3val:0x7fe9b888b8c9068f; valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd27e1bfc4fb5f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc3adeb30d049a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9b888b8c9068f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd27e1bfc4fb5f; op2val:0x3ffc3adeb30d049a;
op3val:0x7fe9b888b8c9068f; valaddr_reg:x3; val_offset:1491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1491*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd27e1bfc4fb5f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc3adeb30d049a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9b888b8c9068f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd27e1bfc4fb5f; op2val:0x3ffc3adeb30d049a;
op3val:0x7fe9b888b8c9068f; valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd27e1bfc4fb5f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc3adeb30d049a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9b888b8c9068f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd27e1bfc4fb5f; op2val:0x3ffc3adeb30d049a;
op3val:0x7fe9b888b8c9068f; valaddr_reg:x3; val_offset:1497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1497*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd2aec528b7649 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1363fa816771e and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf608000b8eeef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd2aec528b7649; op2val:0x3fc1363fa816771e;
op3val:0x7faf608000b8eeef; valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd2aec528b7649 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1363fa816771e and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf608000b8eeef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd2aec528b7649; op2val:0x3fc1363fa816771e;
op3val:0x7faf608000b8eeef; valaddr_reg:x3; val_offset:1503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1503*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd2aec528b7649 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1363fa816771e and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf608000b8eeef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd2aec528b7649; op2val:0x3fc1363fa816771e;
op3val:0x7faf608000b8eeef; valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd2aec528b7649 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1363fa816771e and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf608000b8eeef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd2aec528b7649; op2val:0x3fc1363fa816771e;
op3val:0x7faf608000b8eeef; valaddr_reg:x3; val_offset:1509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1509*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd2aec528b7649 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1363fa816771e and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf608000b8eeef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd2aec528b7649; op2val:0x3fc1363fa816771e;
op3val:0x7faf608000b8eeef; valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd9d183dcaf23f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf1b40133408ed and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcc9675446a76e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd9d183dcaf23f; op2val:0x3fff1b40133408ed;
op3val:0x7fecc9675446a76e; valaddr_reg:x3; val_offset:1515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1515*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd9d183dcaf23f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf1b40133408ed and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcc9675446a76e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd9d183dcaf23f; op2val:0x3fff1b40133408ed;
op3val:0x7fecc9675446a76e; valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd9d183dcaf23f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf1b40133408ed and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcc9675446a76e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd9d183dcaf23f; op2val:0x3fff1b40133408ed;
op3val:0x7fecc9675446a76e; valaddr_reg:x3; val_offset:1521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1521*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd9d183dcaf23f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf1b40133408ed and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcc9675446a76e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd9d183dcaf23f; op2val:0x3fff1b40133408ed;
op3val:0x7fecc9675446a76e; valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd9d183dcaf23f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf1b40133408ed and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcc9675446a76e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd9d183dcaf23f; op2val:0x3fff1b40133408ed;
op3val:0x7fecc9675446a76e; valaddr_reg:x3; val_offset:1527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1527*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe04544df380a5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb97c5ea9a7a1f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9e205364cd953 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde04544df380a5; op2val:0x3feb97c5ea9a7a1f;
op3val:0x7fd9e205364cd953; valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe04544df380a5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb97c5ea9a7a1f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9e205364cd953 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde04544df380a5; op2val:0x3feb97c5ea9a7a1f;
op3val:0x7fd9e205364cd953; valaddr_reg:x3; val_offset:1533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1533*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe04544df380a5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb97c5ea9a7a1f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9e205364cd953 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde04544df380a5; op2val:0x3feb97c5ea9a7a1f;
op3val:0x7fd9e205364cd953; valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe04544df380a5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb97c5ea9a7a1f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9e205364cd953 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde04544df380a5; op2val:0x3feb97c5ea9a7a1f;
op3val:0x7fd9e205364cd953; valaddr_reg:x3; val_offset:1539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1539*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe04544df380a5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb97c5ea9a7a1f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9e205364cd953 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde04544df380a5; op2val:0x3feb97c5ea9a7a1f;
op3val:0x7fd9e205364cd953; valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe18a54fb9615f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d9644f56bb65 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84fb69ef078ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde18a54fb9615f; op2val:0x3ff9d9644f56bb65;
op3val:0x7fe84fb69ef078ea; valaddr_reg:x3; val_offset:1545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1545*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe18a54fb9615f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d9644f56bb65 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84fb69ef078ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde18a54fb9615f; op2val:0x3ff9d9644f56bb65;
op3val:0x7fe84fb69ef078ea; valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe18a54fb9615f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d9644f56bb65 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84fb69ef078ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde18a54fb9615f; op2val:0x3ff9d9644f56bb65;
op3val:0x7fe84fb69ef078ea; valaddr_reg:x3; val_offset:1551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1551*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe18a54fb9615f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d9644f56bb65 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84fb69ef078ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde18a54fb9615f; op2val:0x3ff9d9644f56bb65;
op3val:0x7fe84fb69ef078ea; valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe18a54fb9615f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d9644f56bb65 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84fb69ef078ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde18a54fb9615f; op2val:0x3ff9d9644f56bb65;
op3val:0x7fe84fb69ef078ea; valaddr_reg:x3; val_offset:1557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1557*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1bc7e1b91dcb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca213c005f7f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaf0ce1e93ae2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1bc7e1b91dcb; op2val:0x3ffca213c005f7f5;
op3val:0x7feaf0ce1e93ae2d; valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1bc7e1b91dcb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca213c005f7f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaf0ce1e93ae2d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1bc7e1b91dcb; op2val:0x3ffca213c005f7f5;
op3val:0x7feaf0ce1e93ae2d; valaddr_reg:x3; val_offset:1563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1563*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1bc7e1b91dcb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca213c005f7f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaf0ce1e93ae2d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1bc7e1b91dcb; op2val:0x3ffca213c005f7f5;
op3val:0x7feaf0ce1e93ae2d; valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1bc7e1b91dcb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca213c005f7f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaf0ce1e93ae2d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1bc7e1b91dcb; op2val:0x3ffca213c005f7f5;
op3val:0x7feaf0ce1e93ae2d; valaddr_reg:x3; val_offset:1569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1569*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1bc7e1b91dcb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca213c005f7f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaf0ce1e93ae2d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1bc7e1b91dcb; op2val:0x3ffca213c005f7f5;
op3val:0x7feaf0ce1e93ae2d; valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe23b6c26d7d59 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7f9b8fee36b4a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x694df7f442112 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde23b6c26d7d59; op2val:0x3ff7f9b8fee36b4a;
op3val:0x7fe694df7f442112; valaddr_reg:x3; val_offset:1575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1575*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe23b6c26d7d59 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7f9b8fee36b4a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x694df7f442112 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde23b6c26d7d59; op2val:0x3ff7f9b8fee36b4a;
op3val:0x7fe694df7f442112; valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe23b6c26d7d59 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7f9b8fee36b4a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x694df7f442112 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde23b6c26d7d59; op2val:0x3ff7f9b8fee36b4a;
op3val:0x7fe694df7f442112; valaddr_reg:x3; val_offset:1581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1581*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe23b6c26d7d59 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7f9b8fee36b4a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x694df7f442112 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde23b6c26d7d59; op2val:0x3ff7f9b8fee36b4a;
op3val:0x7fe694df7f442112; valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe23b6c26d7d59 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7f9b8fee36b4a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x694df7f442112 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde23b6c26d7d59; op2val:0x3ff7f9b8fee36b4a;
op3val:0x7fe694df7f442112; valaddr_reg:x3; val_offset:1587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1587*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea061fbefa949 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x30410dae8f33d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2331e5b8a5787 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea061fbefa949; op2val:0x3fd30410dae8f33d;
op3val:0x7fc2331e5b8a5787; valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea061fbefa949 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x30410dae8f33d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2331e5b8a5787 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea061fbefa949; op2val:0x3fd30410dae8f33d;
op3val:0x7fc2331e5b8a5787; valaddr_reg:x3; val_offset:1593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1593*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea061fbefa949 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x30410dae8f33d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2331e5b8a5787 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea061fbefa949; op2val:0x3fd30410dae8f33d;
op3val:0x7fc2331e5b8a5787; valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea061fbefa949 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x30410dae8f33d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2331e5b8a5787 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea061fbefa949; op2val:0x3fd30410dae8f33d;
op3val:0x7fc2331e5b8a5787; valaddr_reg:x3; val_offset:1599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1599*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea061fbefa949 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x30410dae8f33d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2331e5b8a5787 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea061fbefa949; op2val:0x3fd30410dae8f33d;
op3val:0x7fc2331e5b8a5787; valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xebf74076da493 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1fe6bb3f80fcb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x14a2cca067a89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdebf74076da493; op2val:0x3fe1fe6bb3f80fcb;
op3val:0x7fd14a2cca067a89; valaddr_reg:x3; val_offset:1605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1605*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xebf74076da493 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1fe6bb3f80fcb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x14a2cca067a89 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdebf74076da493; op2val:0x3fe1fe6bb3f80fcb;
op3val:0x7fd14a2cca067a89; valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xebf74076da493 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1fe6bb3f80fcb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x14a2cca067a89 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdebf74076da493; op2val:0x3fe1fe6bb3f80fcb;
op3val:0x7fd14a2cca067a89; valaddr_reg:x3; val_offset:1611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1611*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xebf74076da493 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1fe6bb3f80fcb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x14a2cca067a89 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdebf74076da493; op2val:0x3fe1fe6bb3f80fcb;
op3val:0x7fd14a2cca067a89; valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xebf74076da493 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1fe6bb3f80fcb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x14a2cca067a89 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdebf74076da493; op2val:0x3fe1fe6bb3f80fcb;
op3val:0x7fd14a2cca067a89; valaddr_reg:x3; val_offset:1617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1617*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x24583e9aa4a5b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdef5aa91c82b3d; op2val:0x3fd24583e9aa4a5b;
op3val:0x7fc1ad71498eb7bb; valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x24583e9aa4a5b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdef5aa91c82b3d; op2val:0x3fd24583e9aa4a5b;
op3val:0x7fc1ad71498eb7bb; valaddr_reg:x3; val_offset:1623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1623*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x24583e9aa4a5b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdef5aa91c82b3d; op2val:0x3fd24583e9aa4a5b;
op3val:0x7fc1ad71498eb7bb; valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x24583e9aa4a5b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdef5aa91c82b3d; op2val:0x3fd24583e9aa4a5b;
op3val:0x7fc1ad71498eb7bb; valaddr_reg:x3; val_offset:1629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1629*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x24583e9aa4a5b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdef5aa91c82b3d; op2val:0x3fd24583e9aa4a5b;
op3val:0x7fc1ad71498eb7bb; valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf0aceae190521 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x142a90077145a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0be68084b69b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf0aceae190521; op2val:0x3fe142a90077145a;
op3val:0x7fd0be68084b69b7; valaddr_reg:x3; val_offset:1635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1635*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf0aceae190521 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x142a90077145a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0be68084b69b7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf0aceae190521; op2val:0x3fe142a90077145a;
op3val:0x7fd0be68084b69b7; valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf0aceae190521 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x142a90077145a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0be68084b69b7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf0aceae190521; op2val:0x3fe142a90077145a;
op3val:0x7fd0be68084b69b7; valaddr_reg:x3; val_offset:1641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1641*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf0aceae190521 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x142a90077145a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0be68084b69b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf0aceae190521; op2val:0x3fe142a90077145a;
op3val:0x7fd0be68084b69b7; valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf0aceae190521 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x142a90077145a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0be68084b69b7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf0aceae190521; op2val:0x3fe142a90077145a;
op3val:0x7fd0be68084b69b7; valaddr_reg:x3; val_offset:1647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1647*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf35e30dc7f0d5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b93d26abc960 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x916c48fdc3c52 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf35e30dc7f0d5; op2val:0x3ff9b93d26abc960;
op3val:0x7fe916c48fdc3c52; valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf35e30dc7f0d5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b93d26abc960 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x916c48fdc3c52 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf35e30dc7f0d5; op2val:0x3ff9b93d26abc960;
op3val:0x7fe916c48fdc3c52; valaddr_reg:x3; val_offset:1653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1653*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf35e30dc7f0d5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b93d26abc960 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x916c48fdc3c52 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf35e30dc7f0d5; op2val:0x3ff9b93d26abc960;
op3val:0x7fe916c48fdc3c52; valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf35e30dc7f0d5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b93d26abc960 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x916c48fdc3c52 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf35e30dc7f0d5; op2val:0x3ff9b93d26abc960;
op3val:0x7fe916c48fdc3c52; valaddr_reg:x3; val_offset:1659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1659*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf35e30dc7f0d5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b93d26abc960 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x916c48fdc3c52 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf35e30dc7f0d5; op2val:0x3ff9b93d26abc960;
op3val:0x7fe916c48fdc3c52; valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf3c4bdf5e6f2d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7e22304d57ca3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x750128f1053a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf3c4bdf5e6f2d; op2val:0x3fe7e22304d57ca3;
op3val:0x7fd750128f1053a7; valaddr_reg:x3; val_offset:1665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1665*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf3c4bdf5e6f2d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7e22304d57ca3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x750128f1053a7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf3c4bdf5e6f2d; op2val:0x3fe7e22304d57ca3;
op3val:0x7fd750128f1053a7; valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf3c4bdf5e6f2d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7e22304d57ca3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x750128f1053a7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf3c4bdf5e6f2d; op2val:0x3fe7e22304d57ca3;
op3val:0x7fd750128f1053a7; valaddr_reg:x3; val_offset:1671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1671*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf3c4bdf5e6f2d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7e22304d57ca3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x750128f1053a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf3c4bdf5e6f2d; op2val:0x3fe7e22304d57ca3;
op3val:0x7fd750128f1053a7; valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf3c4bdf5e6f2d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7e22304d57ca3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x750128f1053a7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf3c4bdf5e6f2d; op2val:0x3fe7e22304d57ca3;
op3val:0x7fd750128f1053a7; valaddr_reg:x3; val_offset:1677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1677*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf77ea389b4723 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe84382d87f02b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe027179db45b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf77ea389b4723; op2val:0x3fee84382d87f02b;
op3val:0x7fde027179db45b7; valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf77ea389b4723 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe84382d87f02b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe027179db45b7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf77ea389b4723; op2val:0x3fee84382d87f02b;
op3val:0x7fde027179db45b7; valaddr_reg:x3; val_offset:1683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1683*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf77ea389b4723 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe84382d87f02b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe027179db45b7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf77ea389b4723; op2val:0x3fee84382d87f02b;
op3val:0x7fde027179db45b7; valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf77ea389b4723 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe84382d87f02b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe027179db45b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf77ea389b4723; op2val:0x3fee84382d87f02b;
op3val:0x7fde027179db45b7; valaddr_reg:x3; val_offset:1689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1689*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf77ea389b4723 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe84382d87f02b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe027179db45b7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf77ea389b4723; op2val:0x3fee84382d87f02b;
op3val:0x7fde027179db45b7; valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa664451d7f79 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37596618df133 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x33f18a418ff2f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfa664451d7f79; op2val:0x3fc37596618df133;
op3val:0x7fb33f18a418ff2f; valaddr_reg:x3; val_offset:1695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1695*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa664451d7f79 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37596618df133 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x33f18a418ff2f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfa664451d7f79; op2val:0x3fc37596618df133;
op3val:0x7fb33f18a418ff2f; valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa664451d7f79 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37596618df133 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x33f18a418ff2f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfa664451d7f79; op2val:0x3fc37596618df133;
op3val:0x7fb33f18a418ff2f; valaddr_reg:x3; val_offset:1701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1701*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa664451d7f79 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37596618df133 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x33f18a418ff2f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfa664451d7f79; op2val:0x3fc37596618df133;
op3val:0x7fb33f18a418ff2f; valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa664451d7f79 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37596618df133 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x33f18a418ff2f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfa664451d7f79; op2val:0x3fc37596618df133;
op3val:0x7fb33f18a418ff2f; valaddr_reg:x3; val_offset:1707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1707*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02a158a06a947 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcc8ef253ba14c and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd14a559084937 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02a158a06a947; op2val:0x3fccc8ef253ba14c;
op3val:0x7fbd14a559084937; valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02a158a06a947 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcc8ef253ba14c and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd14a559084937 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02a158a06a947; op2val:0x3fccc8ef253ba14c;
op3val:0x7fbd14a559084937; valaddr_reg:x3; val_offset:1713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1713*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02a158a06a947 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcc8ef253ba14c and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd14a559084937 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02a158a06a947; op2val:0x3fccc8ef253ba14c;
op3val:0x7fbd14a559084937; valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02a158a06a947 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcc8ef253ba14c and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd14a559084937 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02a158a06a947; op2val:0x3fccc8ef253ba14c;
op3val:0x7fbd14a559084937; valaddr_reg:x3; val_offset:1719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1719*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02a158a06a947 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcc8ef253ba14c and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd14a559084937 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02a158a06a947; op2val:0x3fccc8ef253ba14c;
op3val:0x7fbd14a559084937; valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x06f26a8a4514a and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde2ebabf2e17e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xeb28a24dd172f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe06f26a8a4514a; op2val:0x3fcde2ebabf2e17e;
op3val:0x7fbeb28a24dd172f; valaddr_reg:x3; val_offset:1725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1725*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x06f26a8a4514a and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde2ebabf2e17e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xeb28a24dd172f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe06f26a8a4514a; op2val:0x3fcde2ebabf2e17e;
op3val:0x7fbeb28a24dd172f; valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x06f26a8a4514a and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde2ebabf2e17e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xeb28a24dd172f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe06f26a8a4514a; op2val:0x3fcde2ebabf2e17e;
op3val:0x7fbeb28a24dd172f; valaddr_reg:x3; val_offset:1731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1731*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x06f26a8a4514a and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde2ebabf2e17e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xeb28a24dd172f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe06f26a8a4514a; op2val:0x3fcde2ebabf2e17e;
op3val:0x7fbeb28a24dd172f; valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x06f26a8a4514a and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde2ebabf2e17e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xeb28a24dd172f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe06f26a8a4514a; op2val:0x3fcde2ebabf2e17e;
op3val:0x7fbeb28a24dd172f; valaddr_reg:x3; val_offset:1737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1737*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a23e2fb712a3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd5dbaca2d5c3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe8781f0338de4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a23e2fb712a3; op2val:0x3ffd5dbaca2d5c3f;
op3val:0x7fee8781f0338de4; valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a23e2fb712a3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd5dbaca2d5c3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe8781f0338de4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a23e2fb712a3; op2val:0x3ffd5dbaca2d5c3f;
op3val:0x7fee8781f0338de4; valaddr_reg:x3; val_offset:1743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1743*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a23e2fb712a3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd5dbaca2d5c3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe8781f0338de4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a23e2fb712a3; op2val:0x3ffd5dbaca2d5c3f;
op3val:0x7fee8781f0338de4; valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a23e2fb712a3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd5dbaca2d5c3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe8781f0338de4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a23e2fb712a3; op2val:0x3ffd5dbaca2d5c3f;
op3val:0x7fee8781f0338de4; valaddr_reg:x3; val_offset:1749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1749*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a23e2fb712a3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd5dbaca2d5c3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe8781f0338de4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a23e2fb712a3; op2val:0x3ffd5dbaca2d5c3f;
op3val:0x7fee8781f0338de4; valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a6201a197557 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7e08a8a7b3795 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d8740fdfea01 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a6201a197557; op2val:0x3ff7e08a8a7b3795;
op3val:0x7fe8d8740fdfea01; valaddr_reg:x3; val_offset:1755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1755*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a6201a197557 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7e08a8a7b3795 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d8740fdfea01 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a6201a197557; op2val:0x3ff7e08a8a7b3795;
op3val:0x7fe8d8740fdfea01; valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a6201a197557 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7e08a8a7b3795 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d8740fdfea01 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a6201a197557; op2val:0x3ff7e08a8a7b3795;
op3val:0x7fe8d8740fdfea01; valaddr_reg:x3; val_offset:1761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1761*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a6201a197557 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7e08a8a7b3795 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d8740fdfea01 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a6201a197557; op2val:0x3ff7e08a8a7b3795;
op3val:0x7fe8d8740fdfea01; valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a6201a197557 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7e08a8a7b3795 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d8740fdfea01 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a6201a197557; op2val:0x3ff7e08a8a7b3795;
op3val:0x7fe8d8740fdfea01; valaddr_reg:x3; val_offset:1767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1767*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x445c6db753ea9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe139cbde283143; op2val:0x3ff445c6db753ea9;
op3val:0x7fe5d35e2c6078a3; valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x445c6db753ea9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe139cbde283143; op2val:0x3ff445c6db753ea9;
op3val:0x7fe5d35e2c6078a3; valaddr_reg:x3; val_offset:1773*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1773*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x445c6db753ea9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe139cbde283143; op2val:0x3ff445c6db753ea9;
op3val:0x7fe5d35e2c6078a3; valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x445c6db753ea9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe139cbde283143; op2val:0x3ff445c6db753ea9;
op3val:0x7fe5d35e2c6078a3; valaddr_reg:x3; val_offset:1779*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1779*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x445c6db753ea9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe139cbde283143; op2val:0x3ff445c6db753ea9;
op3val:0x7fe5d35e2c6078a3; valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x156c11719ec1a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x46db1d0dac269 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x62351125ab629 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe156c11719ec1a; op2val:0x3fe46db1d0dac269;
op3val:0x7fd62351125ab629; valaddr_reg:x3; val_offset:1785*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1785*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x156c11719ec1a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x46db1d0dac269 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x62351125ab629 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe156c11719ec1a; op2val:0x3fe46db1d0dac269;
op3val:0x7fd62351125ab629; valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x156c11719ec1a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x46db1d0dac269 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x62351125ab629 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe156c11719ec1a; op2val:0x3fe46db1d0dac269;
op3val:0x7fd62351125ab629; valaddr_reg:x3; val_offset:1791*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1791*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x156c11719ec1a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x46db1d0dac269 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x62351125ab629 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe156c11719ec1a; op2val:0x3fe46db1d0dac269;
op3val:0x7fd62351125ab629; valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x156c11719ec1a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x46db1d0dac269 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x62351125ab629 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe156c11719ec1a; op2val:0x3fe46db1d0dac269;
op3val:0x7fd62351125ab629; valaddr_reg:x3; val_offset:1797*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1797*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x16f008ac14225 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9f6b9217e094f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4a453917dc74 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe16f008ac14225; op2val:0x3ff9f6b9217e094f;
op3val:0x7fec4a453917dc74; valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x16f008ac14225 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9f6b9217e094f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4a453917dc74 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe16f008ac14225; op2val:0x3ff9f6b9217e094f;
op3val:0x7fec4a453917dc74; valaddr_reg:x3; val_offset:1803*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1803*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x16f008ac14225 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9f6b9217e094f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4a453917dc74 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe16f008ac14225; op2val:0x3ff9f6b9217e094f;
op3val:0x7fec4a453917dc74; valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x16f008ac14225 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9f6b9217e094f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4a453917dc74 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe16f008ac14225; op2val:0x3ff9f6b9217e094f;
op3val:0x7fec4a453917dc74; valaddr_reg:x3; val_offset:1809*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1809*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x16f008ac14225 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9f6b9217e094f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4a453917dc74 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe16f008ac14225; op2val:0x3ff9f6b9217e094f;
op3val:0x7fec4a453917dc74; valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1820d688af302 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb2424702b6247 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdb3031df1b4d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1820d688af302; op2val:0x3feb2424702b6247;
op3val:0x7fddb3031df1b4d9; valaddr_reg:x3; val_offset:1815*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1815*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1820d688af302 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb2424702b6247 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdb3031df1b4d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1820d688af302; op2val:0x3feb2424702b6247;
op3val:0x7fddb3031df1b4d9; valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1820d688af302 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb2424702b6247 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdb3031df1b4d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1820d688af302; op2val:0x3feb2424702b6247;
op3val:0x7fddb3031df1b4d9; valaddr_reg:x3; val_offset:1821*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1821*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1820d688af302 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb2424702b6247 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdb3031df1b4d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1820d688af302; op2val:0x3feb2424702b6247;
op3val:0x7fddb3031df1b4d9; valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1820d688af302 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb2424702b6247 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdb3031df1b4d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1820d688af302; op2val:0x3feb2424702b6247;
op3val:0x7fddb3031df1b4d9; valaddr_reg:x3; val_offset:1827*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1827*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1a24627666f3c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3392e0c107348 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52fb8288b883b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1a24627666f3c; op2val:0x3ff3392e0c107348;
op3val:0x7fe52fb8288b883b; valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1a24627666f3c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3392e0c107348 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52fb8288b883b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1a24627666f3c; op2val:0x3ff3392e0c107348;
op3val:0x7fe52fb8288b883b; valaddr_reg:x3; val_offset:1833*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1833*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1a24627666f3c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3392e0c107348 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52fb8288b883b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1a24627666f3c; op2val:0x3ff3392e0c107348;
op3val:0x7fe52fb8288b883b; valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1a24627666f3c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3392e0c107348 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52fb8288b883b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1a24627666f3c; op2val:0x3ff3392e0c107348;
op3val:0x7fe52fb8288b883b; valaddr_reg:x3; val_offset:1839*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1839*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1a24627666f3c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3392e0c107348 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52fb8288b883b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1a24627666f3c; op2val:0x3ff3392e0c107348;
op3val:0x7fe52fb8288b883b; valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2088d3e11fda6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1cc44e6d9293e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x40f50c3527b82 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2088d3e11fda6; op2val:0x3ff1cc44e6d9293e;
op3val:0x7fe40f50c3527b82; valaddr_reg:x3; val_offset:1845*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1845*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2088d3e11fda6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1cc44e6d9293e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x40f50c3527b82 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2088d3e11fda6; op2val:0x3ff1cc44e6d9293e;
op3val:0x7fe40f50c3527b82; valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2088d3e11fda6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1cc44e6d9293e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x40f50c3527b82 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2088d3e11fda6; op2val:0x3ff1cc44e6d9293e;
op3val:0x7fe40f50c3527b82; valaddr_reg:x3; val_offset:1851*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1851*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2088d3e11fda6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1cc44e6d9293e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x40f50c3527b82 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2088d3e11fda6; op2val:0x3ff1cc44e6d9293e;
op3val:0x7fe40f50c3527b82; valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2088d3e11fda6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1cc44e6d9293e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x40f50c3527b82 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2088d3e11fda6; op2val:0x3ff1cc44e6d9293e;
op3val:0x7fe40f50c3527b82; valaddr_reg:x3; val_offset:1857*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1857*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x216fdd2c02fec and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa1a7ccc099bf6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd834eebcde902 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe216fdd2c02fec; op2val:0x3ffa1a7ccc099bf6;
op3val:0x7fed834eebcde902; valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x216fdd2c02fec and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa1a7ccc099bf6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd834eebcde902 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe216fdd2c02fec; op2val:0x3ffa1a7ccc099bf6;
op3val:0x7fed834eebcde902; valaddr_reg:x3; val_offset:1863*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1863*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x216fdd2c02fec and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa1a7ccc099bf6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd834eebcde902 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe216fdd2c02fec; op2val:0x3ffa1a7ccc099bf6;
op3val:0x7fed834eebcde902; valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x216fdd2c02fec and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa1a7ccc099bf6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd834eebcde902 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe216fdd2c02fec; op2val:0x3ffa1a7ccc099bf6;
op3val:0x7fed834eebcde902; valaddr_reg:x3; val_offset:1869*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1869*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x216fdd2c02fec and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa1a7ccc099bf6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd834eebcde902 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe216fdd2c02fec; op2val:0x3ffa1a7ccc099bf6;
op3val:0x7fed834eebcde902; valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x24d08f17c0238 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x488d416b95f58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x77ccc90941495 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe24d08f17c0238; op2val:0x3ff488d416b95f58;
op3val:0x7fe77ccc90941495; valaddr_reg:x3; val_offset:1875*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1875*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x24d08f17c0238 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x488d416b95f58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x77ccc90941495 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe24d08f17c0238; op2val:0x3ff488d416b95f58;
op3val:0x7fe77ccc90941495; valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x24d08f17c0238 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x488d416b95f58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x77ccc90941495 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe24d08f17c0238; op2val:0x3ff488d416b95f58;
op3val:0x7fe77ccc90941495; valaddr_reg:x3; val_offset:1881*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1881*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x24d08f17c0238 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x488d416b95f58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x77ccc90941495 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe24d08f17c0238; op2val:0x3ff488d416b95f58;
op3val:0x7fe77ccc90941495; valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x24d08f17c0238 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x488d416b95f58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x77ccc90941495 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe24d08f17c0238; op2val:0x3ff488d416b95f58;
op3val:0x7fe77ccc90941495; valaddr_reg:x3; val_offset:1887*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1887*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37c47ae0bad3a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da5f3c7a7466; op2val:0x3fc37c47ae0bad3a;
op3val:0x7fb6f5c1f001498f; valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37c47ae0bad3a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da5f3c7a7466; op2val:0x3fc37c47ae0bad3a;
op3val:0x7fb6f5c1f001498f; valaddr_reg:x3; val_offset:1893*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1893*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37c47ae0bad3a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da5f3c7a7466; op2val:0x3fc37c47ae0bad3a;
op3val:0x7fb6f5c1f001498f; valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37c47ae0bad3a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da5f3c7a7466; op2val:0x3fc37c47ae0bad3a;
op3val:0x7fb6f5c1f001498f; valaddr_reg:x3; val_offset:1899*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1899*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37c47ae0bad3a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da5f3c7a7466; op2val:0x3fc37c47ae0bad3a;
op3val:0x7fb6f5c1f001498f; valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2e74ca276ff7d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd99ffd3a7ac76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x17c9679d77d6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2e74ca276ff7d; op2val:0x3fdd99ffd3a7ac76;
op3val:0x7fd17c9679d77d6b; valaddr_reg:x3; val_offset:1905*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1905*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2e74ca276ff7d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd99ffd3a7ac76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x17c9679d77d6b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2e74ca276ff7d; op2val:0x3fdd99ffd3a7ac76;
op3val:0x7fd17c9679d77d6b; valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2e74ca276ff7d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd99ffd3a7ac76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x17c9679d77d6b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2e74ca276ff7d; op2val:0x3fdd99ffd3a7ac76;
op3val:0x7fd17c9679d77d6b; valaddr_reg:x3; val_offset:1911*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1911*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2e74ca276ff7d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd99ffd3a7ac76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x17c9679d77d6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2e74ca276ff7d; op2val:0x3fdd99ffd3a7ac76;
op3val:0x7fd17c9679d77d6b; valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2e74ca276ff7d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd99ffd3a7ac76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x17c9679d77d6b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2e74ca276ff7d; op2val:0x3fdd99ffd3a7ac76;
op3val:0x7fd17c9679d77d6b; valaddr_reg:x3; val_offset:1917*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1917*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2ef0e618f004c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7737f3972157f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbc05171178e91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2ef0e618f004c; op2val:0x3ff7737f3972157f;
op3val:0x7febc05171178e91; valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2ef0e618f004c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7737f3972157f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbc05171178e91 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2ef0e618f004c; op2val:0x3ff7737f3972157f;
op3val:0x7febc05171178e91; valaddr_reg:x3; val_offset:1923*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1923*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2ef0e618f004c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7737f3972157f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbc05171178e91 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2ef0e618f004c; op2val:0x3ff7737f3972157f;
op3val:0x7febc05171178e91; valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2ef0e618f004c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7737f3972157f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbc05171178e91 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2ef0e618f004c; op2val:0x3ff7737f3972157f;
op3val:0x7febc05171178e91; valaddr_reg:x3; val_offset:1929*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1929*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2ef0e618f004c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7737f3972157f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbc05171178e91 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2ef0e618f004c; op2val:0x3ff7737f3972157f;
op3val:0x7febc05171178e91; valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f364dc0d6dea and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8d35f83ea038 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x050fd8437607f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f364dc0d6dea; op2val:0x3fdb8d35f83ea038;
op3val:0x7fd050fd8437607f; valaddr_reg:x3; val_offset:1935*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1935*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f364dc0d6dea and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8d35f83ea038 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x050fd8437607f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f364dc0d6dea; op2val:0x3fdb8d35f83ea038;
op3val:0x7fd050fd8437607f; valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f364dc0d6dea and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8d35f83ea038 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x050fd8437607f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f364dc0d6dea; op2val:0x3fdb8d35f83ea038;
op3val:0x7fd050fd8437607f; valaddr_reg:x3; val_offset:1941*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1941*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f364dc0d6dea and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8d35f83ea038 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x050fd8437607f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f364dc0d6dea; op2val:0x3fdb8d35f83ea038;
op3val:0x7fd050fd8437607f; valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f364dc0d6dea and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8d35f83ea038 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x050fd8437607f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f364dc0d6dea; op2val:0x3fdb8d35f83ea038;
op3val:0x7fd050fd8437607f; valaddr_reg:x3; val_offset:1947*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1947*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f75ebd929099 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x99337ab2ee957 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe5106bbe3c07b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f75ebd929099; op2val:0x3fe99337ab2ee957;
op3val:0x7fde5106bbe3c07b; valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f75ebd929099 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x99337ab2ee957 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe5106bbe3c07b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f75ebd929099; op2val:0x3fe99337ab2ee957;
op3val:0x7fde5106bbe3c07b; valaddr_reg:x3; val_offset:1953*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1953*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f75ebd929099 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x99337ab2ee957 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe5106bbe3c07b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f75ebd929099; op2val:0x3fe99337ab2ee957;
op3val:0x7fde5106bbe3c07b; valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f75ebd929099 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x99337ab2ee957 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe5106bbe3c07b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f75ebd929099; op2val:0x3fe99337ab2ee957;
op3val:0x7fde5106bbe3c07b; valaddr_reg:x3; val_offset:1959*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1959*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f75ebd929099 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x99337ab2ee957 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe5106bbe3c07b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f75ebd929099; op2val:0x3fe99337ab2ee957;
op3val:0x7fde5106bbe3c07b; valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x02efa596fbdf8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe341836db80049; op2val:0x3fe02efa596fbdf8;
op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x3; val_offset:1965*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1965*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x02efa596fbdf8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe341836db80049; op2val:0x3fe02efa596fbdf8;
op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x02efa596fbdf8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe341836db80049; op2val:0x3fe02efa596fbdf8;
op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x3; val_offset:1971*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1971*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x02efa596fbdf8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe341836db80049; op2val:0x3fe02efa596fbdf8;
op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x02efa596fbdf8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe341836db80049; op2val:0x3fe02efa596fbdf8;
op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x3; val_offset:1977*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1977*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x34c088d102eed and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0fca38061c1c4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x47cbb452b35f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe34c088d102eed; op2val:0x3fe0fca38061c1c4;
op3val:0x7fd47cbb452b35f3; valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x34c088d102eed and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0fca38061c1c4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x47cbb452b35f3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe34c088d102eed; op2val:0x3fe0fca38061c1c4;
op3val:0x7fd47cbb452b35f3; valaddr_reg:x3; val_offset:1983*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1983*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x34c088d102eed and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0fca38061c1c4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x47cbb452b35f3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe34c088d102eed; op2val:0x3fe0fca38061c1c4;
op3val:0x7fd47cbb452b35f3; valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x34c088d102eed and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0fca38061c1c4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x47cbb452b35f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe34c088d102eed; op2val:0x3fe0fca38061c1c4;
op3val:0x7fd47cbb452b35f3; valaddr_reg:x3; val_offset:1989*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1989*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x34c088d102eed and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0fca38061c1c4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x47cbb452b35f3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe34c088d102eed; op2val:0x3fe0fca38061c1c4;
op3val:0x7fd47cbb452b35f3; valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3691acd45f727 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe71eee6788145 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x277a5309a56af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3691acd45f727; op2val:0x3fce71eee6788145;
op3val:0x7fc277a5309a56af; valaddr_reg:x3; val_offset:1995*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1995*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3691acd45f727 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe71eee6788145 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x277a5309a56af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3691acd45f727; op2val:0x3fce71eee6788145;
op3val:0x7fc277a5309a56af; valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3691acd45f727 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe71eee6788145 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x277a5309a56af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3691acd45f727; op2val:0x3fce71eee6788145;
op3val:0x7fc277a5309a56af; valaddr_reg:x3; val_offset:2001*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2001*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3691acd45f727 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe71eee6788145 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x277a5309a56af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3691acd45f727; op2val:0x3fce71eee6788145;
op3val:0x7fc277a5309a56af; valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3691acd45f727 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe71eee6788145 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x277a5309a56af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3691acd45f727; op2val:0x3fce71eee6788145;
op3val:0x7fc277a5309a56af; valaddr_reg:x3; val_offset:2007*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2007*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a13d100f2dec and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x605083172db32 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb03e0667320ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a13d100f2dec; op2val:0x3fe605083172db32;
op3val:0x7fdb03e0667320ab; valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a13d100f2dec and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x605083172db32 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb03e0667320ab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a13d100f2dec; op2val:0x3fe605083172db32;
op3val:0x7fdb03e0667320ab; valaddr_reg:x3; val_offset:2013*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2013*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a13d100f2dec and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x605083172db32 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb03e0667320ab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a13d100f2dec; op2val:0x3fe605083172db32;
op3val:0x7fdb03e0667320ab; valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a13d100f2dec and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x605083172db32 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb03e0667320ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a13d100f2dec; op2val:0x3fe605083172db32;
op3val:0x7fdb03e0667320ab; valaddr_reg:x3; val_offset:2019*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2019*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a13d100f2dec and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x605083172db32 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb03e0667320ab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a13d100f2dec; op2val:0x3fe605083172db32;
op3val:0x7fdb03e0667320ab; valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf9620c1581628 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d93686797715; op2val:0x3fdf9620c1581628;
op3val:0x7fd3978b52ff3f23; valaddr_reg:x3; val_offset:2025*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2025*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf9620c1581628 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d93686797715; op2val:0x3fdf9620c1581628;
op3val:0x7fd3978b52ff3f23; valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf9620c1581628 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d93686797715; op2val:0x3fdf9620c1581628;
op3val:0x7fd3978b52ff3f23; valaddr_reg:x3; val_offset:2031*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2031*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf9620c1581628 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d93686797715; op2val:0x3fdf9620c1581628;
op3val:0x7fd3978b52ff3f23; valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf9620c1581628 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d93686797715; op2val:0x3fdf9620c1581628;
op3val:0x7fd3978b52ff3f23; valaddr_reg:x3; val_offset:2037*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2037*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eb883a7b3908 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3beeb9c2285de and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x895640ced1156 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eb883a7b3908; op2val:0x3ff3beeb9c2285de;
op3val:0x7fe895640ced1156; valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eb883a7b3908 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3beeb9c2285de and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x895640ced1156 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eb883a7b3908; op2val:0x3ff3beeb9c2285de;
op3val:0x7fe895640ced1156; valaddr_reg:x3; val_offset:2043*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2043*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eb883a7b3908 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3beeb9c2285de and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x895640ced1156 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eb883a7b3908; op2val:0x3ff3beeb9c2285de;
op3val:0x7fe895640ced1156; valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2046*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eb883a7b3908 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3beeb9c2285de and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x895640ced1156 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eb883a7b3908; op2val:0x3ff3beeb9c2285de;
op3val:0x7fe895640ced1156; valaddr_reg:x3; val_offset:2049*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2049*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eb883a7b3908 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3beeb9c2285de and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x895640ced1156 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eb883a7b3908; op2val:0x3ff3beeb9c2285de;
op3val:0x7fe895640ced1156; valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x418a2feac319d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3d60d72ed2614 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x8ea1bf6d88f07 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe418a2feac319d; op2val:0x3fc3d60d72ed2614;
op3val:0x7fb8ea1bf6d88f07; valaddr_reg:x3; val_offset:2055*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2055*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x418a2feac319d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3d60d72ed2614 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x8ea1bf6d88f07 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe418a2feac319d; op2val:0x3fc3d60d72ed2614;
op3val:0x7fb8ea1bf6d88f07; valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x418a2feac319d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3d60d72ed2614 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x8ea1bf6d88f07 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe418a2feac319d; op2val:0x3fc3d60d72ed2614;
op3val:0x7fb8ea1bf6d88f07; valaddr_reg:x3; val_offset:2061*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2061*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x418a2feac319d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3d60d72ed2614 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x8ea1bf6d88f07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe418a2feac319d; op2val:0x3fc3d60d72ed2614;
op3val:0x7fb8ea1bf6d88f07; valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x418a2feac319d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3d60d72ed2614 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x8ea1bf6d88f07 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe418a2feac319d; op2val:0x3fc3d60d72ed2614;
op3val:0x7fb8ea1bf6d88f07; valaddr_reg:x3; val_offset:2067*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2067*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x41fcd2880834a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5de106ad85473 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb810b29ea92a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe41fcd2880834a; op2val:0x3ff5de106ad85473;
op3val:0x7feb810b29ea92a5; valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x41fcd2880834a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5de106ad85473 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb810b29ea92a5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe41fcd2880834a; op2val:0x3ff5de106ad85473;
op3val:0x7feb810b29ea92a5; valaddr_reg:x3; val_offset:2073*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2073*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x41fcd2880834a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5de106ad85473 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb810b29ea92a5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe41fcd2880834a; op2val:0x3ff5de106ad85473;
op3val:0x7feb810b29ea92a5; valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x41fcd2880834a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5de106ad85473 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb810b29ea92a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe41fcd2880834a; op2val:0x3ff5de106ad85473;
op3val:0x7feb810b29ea92a5; valaddr_reg:x3; val_offset:2079*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2079*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x41fcd2880834a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5de106ad85473 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb810b29ea92a5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe41fcd2880834a; op2val:0x3ff5de106ad85473;
op3val:0x7feb810b29ea92a5; valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x422628c1f9624 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d5d6936bdb26 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x671a07a34a94c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe422628c1f9624; op2val:0x3ff1d5d6936bdb26;
op3val:0x7fe671a07a34a94c; valaddr_reg:x3; val_offset:2085*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2085*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x422628c1f9624 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d5d6936bdb26 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x671a07a34a94c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe422628c1f9624; op2val:0x3ff1d5d6936bdb26;
op3val:0x7fe671a07a34a94c; valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x422628c1f9624 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d5d6936bdb26 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x671a07a34a94c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe422628c1f9624; op2val:0x3ff1d5d6936bdb26;
op3val:0x7fe671a07a34a94c; valaddr_reg:x3; val_offset:2091*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2091*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x422628c1f9624 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d5d6936bdb26 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x671a07a34a94c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe422628c1f9624; op2val:0x3ff1d5d6936bdb26;
op3val:0x7fe671a07a34a94c; valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x422628c1f9624 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d5d6936bdb26 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x671a07a34a94c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe422628c1f9624; op2val:0x3ff1d5d6936bdb26;
op3val:0x7fe671a07a34a94c; valaddr_reg:x3; val_offset:2097*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2097*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd59f46589e2bf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45141572f8653; op2val:0x3fdd59f46589e2bf;
op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd59f46589e2bf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45141572f8653; op2val:0x3fdd59f46589e2bf;
op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x3; val_offset:2103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2103*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd59f46589e2bf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45141572f8653; op2val:0x3fdd59f46589e2bf;
op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd59f46589e2bf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45141572f8653; op2val:0x3fdd59f46589e2bf;
op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x3; val_offset:2109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2109*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd59f46589e2bf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45141572f8653; op2val:0x3fdd59f46589e2bf;
op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x46f2fe4f42ca2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xad5bc4ca22702 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x122d33efb5c32 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe46f2fe4f42ca2; op2val:0x3fead5bc4ca22702;
op3val:0x7fe122d33efb5c32; valaddr_reg:x3; val_offset:2115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2115*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x46f2fe4f42ca2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xad5bc4ca22702 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x122d33efb5c32 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe46f2fe4f42ca2; op2val:0x3fead5bc4ca22702;
op3val:0x7fe122d33efb5c32; valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x46f2fe4f42ca2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xad5bc4ca22702 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x122d33efb5c32 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe46f2fe4f42ca2; op2val:0x3fead5bc4ca22702;
op3val:0x7fe122d33efb5c32; valaddr_reg:x3; val_offset:2121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2121*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x46f2fe4f42ca2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xad5bc4ca22702 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x122d33efb5c32 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe46f2fe4f42ca2; op2val:0x3fead5bc4ca22702;
op3val:0x7fe122d33efb5c32; valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x46f2fe4f42ca2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xad5bc4ca22702 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x122d33efb5c32 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe46f2fe4f42ca2; op2val:0x3fead5bc4ca22702;
op3val:0x7fe122d33efb5c32; valaddr_reg:x3; val_offset:2127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2127*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x152f2078be37b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a0550fe15035; op2val:0x3ff152f2078be37b;
op3val:0x7fe655481791d37f; valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x152f2078be37b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a0550fe15035; op2val:0x3ff152f2078be37b;
op3val:0x7fe655481791d37f; valaddr_reg:x3; val_offset:2133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2133*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x152f2078be37b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a0550fe15035; op2val:0x3ff152f2078be37b;
op3val:0x7fe655481791d37f; valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x152f2078be37b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a0550fe15035; op2val:0x3ff152f2078be37b;
op3val:0x7fe655481791d37f; valaddr_reg:x3; val_offset:2139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2139*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x152f2078be37b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a0550fe15035; op2val:0x3ff152f2078be37b;
op3val:0x7fe655481791d37f; valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c83c1ea7b4eb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a78a696dafd2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x987651fde28b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4c83c1ea7b4eb; op2val:0x3ff3a78a696dafd2;
op3val:0x7fe987651fde28b0; valaddr_reg:x3; val_offset:2145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2145*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c83c1ea7b4eb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a78a696dafd2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x987651fde28b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4c83c1ea7b4eb; op2val:0x3ff3a78a696dafd2;
op3val:0x7fe987651fde28b0; valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c83c1ea7b4eb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a78a696dafd2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x987651fde28b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4c83c1ea7b4eb; op2val:0x3ff3a78a696dafd2;
op3val:0x7fe987651fde28b0; valaddr_reg:x3; val_offset:2151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2151*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c83c1ea7b4eb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a78a696dafd2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x987651fde28b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4c83c1ea7b4eb; op2val:0x3ff3a78a696dafd2;
op3val:0x7fe987651fde28b0; valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c83c1ea7b4eb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a78a696dafd2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x987651fde28b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4c83c1ea7b4eb; op2val:0x3ff3a78a696dafd2;
op3val:0x7fe987651fde28b0; valaddr_reg:x3; val_offset:2157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2157*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d4b3ded55275 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc381c96d1da30 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x25ea43a0ba6d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d4b3ded55275; op2val:0x3fdc381c96d1da30;
op3val:0x7fd25ea43a0ba6d5; valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d4b3ded55275 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc381c96d1da30 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x25ea43a0ba6d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d4b3ded55275; op2val:0x3fdc381c96d1da30;
op3val:0x7fd25ea43a0ba6d5; valaddr_reg:x3; val_offset:2163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2163*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d4b3ded55275 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc381c96d1da30 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x25ea43a0ba6d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d4b3ded55275; op2val:0x3fdc381c96d1da30;
op3val:0x7fd25ea43a0ba6d5; valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d4b3ded55275 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc381c96d1da30 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x25ea43a0ba6d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d4b3ded55275; op2val:0x3fdc381c96d1da30;
op3val:0x7fd25ea43a0ba6d5; valaddr_reg:x3; val_offset:2169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2169*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d4b3ded55275 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc381c96d1da30 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x25ea43a0ba6d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d4b3ded55275; op2val:0x3fdc381c96d1da30;
op3val:0x7fd25ea43a0ba6d5; valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5188518a6f19d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x78f8cbc2f063e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf108407a7033a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5188518a6f19d; op2val:0x3ff78f8cbc2f063e;
op3val:0x7fef108407a7033a; valaddr_reg:x3; val_offset:2175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2175*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5188518a6f19d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x78f8cbc2f063e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf108407a7033a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5188518a6f19d; op2val:0x3ff78f8cbc2f063e;
op3val:0x7fef108407a7033a; valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5188518a6f19d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x78f8cbc2f063e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf108407a7033a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5188518a6f19d; op2val:0x3ff78f8cbc2f063e;
op3val:0x7fef108407a7033a; valaddr_reg:x3; val_offset:2181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2181*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5188518a6f19d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x78f8cbc2f063e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf108407a7033a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5188518a6f19d; op2val:0x3ff78f8cbc2f063e;
op3val:0x7fef108407a7033a; valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5188518a6f19d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x78f8cbc2f063e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf108407a7033a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5188518a6f19d; op2val:0x3ff78f8cbc2f063e;
op3val:0x7fef108407a7033a; valaddr_reg:x3; val_offset:2187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2187*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x546d58b0516c7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x80a5f1550808a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xff80b06ea7427 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe546d58b0516c7; op2val:0x3fc80a5f1550808a;
op3val:0x7fbff80b06ea7427; valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x546d58b0516c7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x80a5f1550808a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xff80b06ea7427 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe546d58b0516c7; op2val:0x3fc80a5f1550808a;
op3val:0x7fbff80b06ea7427; valaddr_reg:x3; val_offset:2193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2193*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x546d58b0516c7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x80a5f1550808a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xff80b06ea7427 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe546d58b0516c7; op2val:0x3fc80a5f1550808a;
op3val:0x7fbff80b06ea7427; valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x546d58b0516c7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x80a5f1550808a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xff80b06ea7427 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe546d58b0516c7; op2val:0x3fc80a5f1550808a;
op3val:0x7fbff80b06ea7427; valaddr_reg:x3; val_offset:2199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2199*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x546d58b0516c7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x80a5f1550808a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xff80b06ea7427 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe546d58b0516c7; op2val:0x3fc80a5f1550808a;
op3val:0x7fbff80b06ea7427; valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5547440bd97d4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x75882bb7e991b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf1f65e498feec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5547440bd97d4; op2val:0x3ff75882bb7e991b;
op3val:0x7fef1f65e498feec; valaddr_reg:x3; val_offset:2205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2205*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5547440bd97d4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x75882bb7e991b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf1f65e498feec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5547440bd97d4; op2val:0x3ff75882bb7e991b;
op3val:0x7fef1f65e498feec; valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5547440bd97d4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x75882bb7e991b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf1f65e498feec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5547440bd97d4; op2val:0x3ff75882bb7e991b;
op3val:0x7fef1f65e498feec; valaddr_reg:x3; val_offset:2211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2211*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5547440bd97d4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x75882bb7e991b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf1f65e498feec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5547440bd97d4; op2val:0x3ff75882bb7e991b;
op3val:0x7fef1f65e498feec; valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5547440bd97d4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x75882bb7e991b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf1f65e498feec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5547440bd97d4; op2val:0x3ff75882bb7e991b;
op3val:0x7fef1f65e498feec; valaddr_reg:x3; val_offset:2217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2217*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5726b277b5dce and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x53c36b188da64 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc76e305c8d1af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5726b277b5dce; op2val:0x3ff53c36b188da64;
op3val:0x7fec76e305c8d1af; valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5726b277b5dce and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x53c36b188da64 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc76e305c8d1af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5726b277b5dce; op2val:0x3ff53c36b188da64;
op3val:0x7fec76e305c8d1af; valaddr_reg:x3; val_offset:2223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2223*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5726b277b5dce and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x53c36b188da64 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc76e305c8d1af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5726b277b5dce; op2val:0x3ff53c36b188da64;
op3val:0x7fec76e305c8d1af; valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5726b277b5dce and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x53c36b188da64 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc76e305c8d1af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5726b277b5dce; op2val:0x3ff53c36b188da64;
op3val:0x7fec76e305c8d1af; valaddr_reg:x3; val_offset:2229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2229*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5726b277b5dce and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x53c36b188da64 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc76e305c8d1af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5726b277b5dce; op2val:0x3ff53c36b188da64;
op3val:0x7fec76e305c8d1af; valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a1465bf903f8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14437285df6c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x75792bdb3899b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a1465bf903f8; op2val:0x3ff14437285df6c6;
op3val:0x7fe75792bdb3899b; valaddr_reg:x3; val_offset:2235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2235*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a1465bf903f8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14437285df6c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x75792bdb3899b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a1465bf903f8; op2val:0x3ff14437285df6c6;
op3val:0x7fe75792bdb3899b; valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a1465bf903f8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14437285df6c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x75792bdb3899b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a1465bf903f8; op2val:0x3ff14437285df6c6;
op3val:0x7fe75792bdb3899b; valaddr_reg:x3; val_offset:2241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2241*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a1465bf903f8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14437285df6c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x75792bdb3899b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a1465bf903f8; op2val:0x3ff14437285df6c6;
op3val:0x7fe75792bdb3899b; valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a1465bf903f8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14437285df6c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x75792bdb3899b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a1465bf903f8; op2val:0x3ff14437285df6c6;
op3val:0x7fe75792bdb3899b; valaddr_reg:x3; val_offset:2247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2247*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5b5915a348e93 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a569ee80546d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeba18021f5337 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5b5915a348e93; op2val:0x3fe6a569ee80546d;
op3val:0x7fdeba18021f5337; valaddr_reg:x3; val_offset:2250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2250*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5b5915a348e93 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a569ee80546d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeba18021f5337 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5b5915a348e93; op2val:0x3fe6a569ee80546d;
op3val:0x7fdeba18021f5337; valaddr_reg:x3; val_offset:2253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2253*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5b5915a348e93 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a569ee80546d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeba18021f5337 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5b5915a348e93; op2val:0x3fe6a569ee80546d;
op3val:0x7fdeba18021f5337; valaddr_reg:x3; val_offset:2256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2256*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5b5915a348e93 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a569ee80546d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeba18021f5337 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5b5915a348e93; op2val:0x3fe6a569ee80546d;
op3val:0x7fdeba18021f5337; valaddr_reg:x3; val_offset:2259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2259*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5b5915a348e93 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a569ee80546d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeba18021f5337 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5b5915a348e93; op2val:0x3fe6a569ee80546d;
op3val:0x7fdeba18021f5337; valaddr_reg:x3; val_offset:2262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2262*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5e26a2d52eba8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x22dc44e238e68 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8dd50be11d539 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5e26a2d52eba8; op2val:0x3ff22dc44e238e68;
op3val:0x7fe8dd50be11d539; valaddr_reg:x3; val_offset:2265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2265*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5e26a2d52eba8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x22dc44e238e68 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8dd50be11d539 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5e26a2d52eba8; op2val:0x3ff22dc44e238e68;
op3val:0x7fe8dd50be11d539; valaddr_reg:x3; val_offset:2268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2268*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5e26a2d52eba8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x22dc44e238e68 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8dd50be11d539 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5e26a2d52eba8; op2val:0x3ff22dc44e238e68;
op3val:0x7fe8dd50be11d539; valaddr_reg:x3; val_offset:2271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2271*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5e26a2d52eba8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x22dc44e238e68 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8dd50be11d539 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5e26a2d52eba8; op2val:0x3ff22dc44e238e68;
op3val:0x7fe8dd50be11d539; valaddr_reg:x3; val_offset:2274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2274*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5e26a2d52eba8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x22dc44e238e68 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8dd50be11d539 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5e26a2d52eba8; op2val:0x3ff22dc44e238e68;
op3val:0x7fe8dd50be11d539; valaddr_reg:x3; val_offset:2277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2277*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60093f30fd5e0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x220d4421487d9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8edcb7bdee2ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe60093f30fd5e0; op2val:0x3ff220d4421487d9;
op3val:0x7fe8edcb7bdee2ac; valaddr_reg:x3; val_offset:2280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2280*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60093f30fd5e0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x220d4421487d9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8edcb7bdee2ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe60093f30fd5e0; op2val:0x3ff220d4421487d9;
op3val:0x7fe8edcb7bdee2ac; valaddr_reg:x3; val_offset:2283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2283*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60093f30fd5e0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x220d4421487d9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8edcb7bdee2ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe60093f30fd5e0; op2val:0x3ff220d4421487d9;
op3val:0x7fe8edcb7bdee2ac; valaddr_reg:x3; val_offset:2286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2286*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60093f30fd5e0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x220d4421487d9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8edcb7bdee2ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe60093f30fd5e0; op2val:0x3ff220d4421487d9;
op3val:0x7fe8edcb7bdee2ac; valaddr_reg:x3; val_offset:2289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2289*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60093f30fd5e0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x220d4421487d9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8edcb7bdee2ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe60093f30fd5e0; op2val:0x3ff220d4421487d9;
op3val:0x7fe8edcb7bdee2ac; valaddr_reg:x3; val_offset:2292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2292*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6339ce014c510 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x23fcd3c280867 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x952987e8cbf7d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6339ce014c510; op2val:0x3ff23fcd3c280867;
op3val:0x7fe952987e8cbf7d; valaddr_reg:x3; val_offset:2295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2295*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6339ce014c510 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x23fcd3c280867 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x952987e8cbf7d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6339ce014c510; op2val:0x3ff23fcd3c280867;
op3val:0x7fe952987e8cbf7d; valaddr_reg:x3; val_offset:2298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2298*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6339ce014c510 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x23fcd3c280867 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x952987e8cbf7d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6339ce014c510; op2val:0x3ff23fcd3c280867;
op3val:0x7fe952987e8cbf7d; valaddr_reg:x3; val_offset:2301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2301*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6339ce014c510 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x23fcd3c280867 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x952987e8cbf7d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6339ce014c510; op2val:0x3ff23fcd3c280867;
op3val:0x7fe952987e8cbf7d; valaddr_reg:x3; val_offset:2304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2304*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6339ce014c510 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x23fcd3c280867 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x952987e8cbf7d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6339ce014c510; op2val:0x3ff23fcd3c280867;
op3val:0x7fe952987e8cbf7d; valaddr_reg:x3; val_offset:2307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2307*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63761262a7af5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b460c05202e0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9f8c2a72e7ad4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63761262a7af5; op2val:0x3ff2b460c05202e0;
op3val:0x7fe9f8c2a72e7ad4; valaddr_reg:x3; val_offset:2310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2310*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63761262a7af5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b460c05202e0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9f8c2a72e7ad4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63761262a7af5; op2val:0x3ff2b460c05202e0;
op3val:0x7fe9f8c2a72e7ad4; valaddr_reg:x3; val_offset:2313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2313*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63761262a7af5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b460c05202e0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9f8c2a72e7ad4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63761262a7af5; op2val:0x3ff2b460c05202e0;
op3val:0x7fe9f8c2a72e7ad4; valaddr_reg:x3; val_offset:2316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2316*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63761262a7af5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b460c05202e0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9f8c2a72e7ad4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63761262a7af5; op2val:0x3ff2b460c05202e0;
op3val:0x7fe9f8c2a72e7ad4; valaddr_reg:x3; val_offset:2319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2319*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63761262a7af5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b460c05202e0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9f8c2a72e7ad4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63761262a7af5; op2val:0x3ff2b460c05202e0;
op3val:0x7fe9f8c2a72e7ad4; valaddr_reg:x3; val_offset:2322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2322*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x25d92dbf7772b and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe657d95216ac01; op2val:0x3f925d92dbf7772b;
op3val:0x7f89a5803051b37f; valaddr_reg:x3; val_offset:2325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2325*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x25d92dbf7772b and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe657d95216ac01; op2val:0x3f925d92dbf7772b;
op3val:0x7f89a5803051b37f; valaddr_reg:x3; val_offset:2328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2328*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x25d92dbf7772b and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe657d95216ac01; op2val:0x3f925d92dbf7772b;
op3val:0x7f89a5803051b37f; valaddr_reg:x3; val_offset:2331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2331*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x25d92dbf7772b and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe657d95216ac01; op2val:0x3f925d92dbf7772b;
op3val:0x7f89a5803051b37f; valaddr_reg:x3; val_offset:2334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2334*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x25d92dbf7772b and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe657d95216ac01; op2val:0x3f925d92dbf7772b;
op3val:0x7f89a5803051b37f; valaddr_reg:x3; val_offset:2337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2337*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68f63eccb52d3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x207f98e3bcff2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x96c8f062c5808 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68f63eccb52d3; op2val:0x3ff207f98e3bcff2;
op3val:0x7fe96c8f062c5808; valaddr_reg:x3; val_offset:2340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2340*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68f63eccb52d3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x207f98e3bcff2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x96c8f062c5808 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68f63eccb52d3; op2val:0x3ff207f98e3bcff2;
op3val:0x7fe96c8f062c5808; valaddr_reg:x3; val_offset:2343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2343*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68f63eccb52d3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x207f98e3bcff2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x96c8f062c5808 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68f63eccb52d3; op2val:0x3ff207f98e3bcff2;
op3val:0x7fe96c8f062c5808; valaddr_reg:x3; val_offset:2346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2346*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68f63eccb52d3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x207f98e3bcff2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x96c8f062c5808 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68f63eccb52d3; op2val:0x3ff207f98e3bcff2;
op3val:0x7fe96c8f062c5808; valaddr_reg:x3; val_offset:2349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2349*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68f63eccb52d3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x207f98e3bcff2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x96c8f062c5808 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68f63eccb52d3; op2val:0x3ff207f98e3bcff2;
op3val:0x7fe96c8f062c5808; valaddr_reg:x3; val_offset:2352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2352*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6ec85d8ef4d3f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcd177dd63d0aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4a503c62cfadd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6ec85d8ef4d3f; op2val:0x3fecd177dd63d0aa;
op3val:0x7fe4a503c62cfadd; valaddr_reg:x3; val_offset:2355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2355*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6ec85d8ef4d3f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcd177dd63d0aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4a503c62cfadd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6ec85d8ef4d3f; op2val:0x3fecd177dd63d0aa;
op3val:0x7fe4a503c62cfadd; valaddr_reg:x3; val_offset:2358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2358*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6ec85d8ef4d3f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcd177dd63d0aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4a503c62cfadd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6ec85d8ef4d3f; op2val:0x3fecd177dd63d0aa;
op3val:0x7fe4a503c62cfadd; valaddr_reg:x3; val_offset:2361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2361*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6ec85d8ef4d3f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcd177dd63d0aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4a503c62cfadd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6ec85d8ef4d3f; op2val:0x3fecd177dd63d0aa;
op3val:0x7fe4a503c62cfadd; valaddr_reg:x3; val_offset:2364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2364*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6ec85d8ef4d3f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcd177dd63d0aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4a503c62cfadd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6ec85d8ef4d3f; op2val:0x3fecd177dd63d0aa;
op3val:0x7fe4a503c62cfadd; valaddr_reg:x3; val_offset:2367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2367*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fcc78313f886 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x04ce8c2de8bd5 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x76b46a008334f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6fcc78313f886; op2val:0x3fb04ce8c2de8bd5;
op3val:0x7fa76b46a008334f; valaddr_reg:x3; val_offset:2370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2370*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fcc78313f886 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x04ce8c2de8bd5 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x76b46a008334f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6fcc78313f886; op2val:0x3fb04ce8c2de8bd5;
op3val:0x7fa76b46a008334f; valaddr_reg:x3; val_offset:2373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2373*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fcc78313f886 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x04ce8c2de8bd5 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x76b46a008334f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6fcc78313f886; op2val:0x3fb04ce8c2de8bd5;
op3val:0x7fa76b46a008334f; valaddr_reg:x3; val_offset:2376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2376*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fcc78313f886 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x04ce8c2de8bd5 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x76b46a008334f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6fcc78313f886; op2val:0x3fb04ce8c2de8bd5;
op3val:0x7fa76b46a008334f; valaddr_reg:x3; val_offset:2379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2379*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fcc78313f886 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x04ce8c2de8bd5 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x76b46a008334f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6fcc78313f886; op2val:0x3fb04ce8c2de8bd5;
op3val:0x7fa76b46a008334f; valaddr_reg:x3; val_offset:2382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2382*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7077053f4f8c6 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb96fe80cefc2c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3daf0cd1e8f4b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7077053f4f8c6; op2val:0x3fcb96fe80cefc2c;
op3val:0x7fc3daf0cd1e8f4b; valaddr_reg:x3; val_offset:2385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2385*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7077053f4f8c6 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb96fe80cefc2c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3daf0cd1e8f4b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7077053f4f8c6; op2val:0x3fcb96fe80cefc2c;
op3val:0x7fc3daf0cd1e8f4b; valaddr_reg:x3; val_offset:2388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2388*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7077053f4f8c6 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb96fe80cefc2c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3daf0cd1e8f4b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7077053f4f8c6; op2val:0x3fcb96fe80cefc2c;
op3val:0x7fc3daf0cd1e8f4b; valaddr_reg:x3; val_offset:2391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2391*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7077053f4f8c6 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb96fe80cefc2c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3daf0cd1e8f4b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7077053f4f8c6; op2val:0x3fcb96fe80cefc2c;
op3val:0x7fc3daf0cd1e8f4b; valaddr_reg:x3; val_offset:2394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2394*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7077053f4f8c6 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb96fe80cefc2c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3daf0cd1e8f4b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7077053f4f8c6; op2val:0x3fcb96fe80cefc2c;
op3val:0x7fc3daf0cd1e8f4b; valaddr_reg:x3; val_offset:2397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2397*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c391e4b2abf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3184dd5e108c3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba7b6e43c3844 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c391e4b2abf; op2val:0x3ff3184dd5e108c3;
op3val:0x7feba7b6e43c3844; valaddr_reg:x3; val_offset:2400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2400*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c391e4b2abf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3184dd5e108c3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba7b6e43c3844 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c391e4b2abf; op2val:0x3ff3184dd5e108c3;
op3val:0x7feba7b6e43c3844; valaddr_reg:x3; val_offset:2403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2403*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c391e4b2abf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3184dd5e108c3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba7b6e43c3844 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c391e4b2abf; op2val:0x3ff3184dd5e108c3;
op3val:0x7feba7b6e43c3844; valaddr_reg:x3; val_offset:2406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2406*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c391e4b2abf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3184dd5e108c3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba7b6e43c3844 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c391e4b2abf; op2val:0x3ff3184dd5e108c3;
op3val:0x7feba7b6e43c3844; valaddr_reg:x3; val_offset:2409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2409*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c391e4b2abf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3184dd5e108c3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba7b6e43c3844 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c391e4b2abf; op2val:0x3ff3184dd5e108c3;
op3val:0x7feba7b6e43c3844; valaddr_reg:x3; val_offset:2412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2412*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x74b7ae7463e9a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x426308fed6fc4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd55f398fa1621 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe74b7ae7463e9a; op2val:0x3ff426308fed6fc4;
op3val:0x7fed55f398fa1621; valaddr_reg:x3; val_offset:2415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2415*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x74b7ae7463e9a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x426308fed6fc4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd55f398fa1621 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe74b7ae7463e9a; op2val:0x3ff426308fed6fc4;
op3val:0x7fed55f398fa1621; valaddr_reg:x3; val_offset:2418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2418*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x74b7ae7463e9a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x426308fed6fc4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd55f398fa1621 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe74b7ae7463e9a; op2val:0x3ff426308fed6fc4;
op3val:0x7fed55f398fa1621; valaddr_reg:x3; val_offset:2421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2421*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x74b7ae7463e9a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x426308fed6fc4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd55f398fa1621 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe74b7ae7463e9a; op2val:0x3ff426308fed6fc4;
op3val:0x7fed55f398fa1621; valaddr_reg:x3; val_offset:2424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2424*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x74b7ae7463e9a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x426308fed6fc4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd55f398fa1621 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe74b7ae7463e9a; op2val:0x3ff426308fed6fc4;
op3val:0x7fed55f398fa1621; valaddr_reg:x3; val_offset:2427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2427*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x75ab99b7d728b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2270fb41a1218 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa7f14df48da55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe75ab99b7d728b; op2val:0x3fe2270fb41a1218;
op3val:0x7fda7f14df48da55; valaddr_reg:x3; val_offset:2430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2430*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x75ab99b7d728b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2270fb41a1218 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa7f14df48da55 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe75ab99b7d728b; op2val:0x3fe2270fb41a1218;
op3val:0x7fda7f14df48da55; valaddr_reg:x3; val_offset:2433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2433*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x75ab99b7d728b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2270fb41a1218 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa7f14df48da55 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe75ab99b7d728b; op2val:0x3fe2270fb41a1218;
op3val:0x7fda7f14df48da55; valaddr_reg:x3; val_offset:2436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2436*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x75ab99b7d728b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2270fb41a1218 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa7f14df48da55 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe75ab99b7d728b; op2val:0x3fe2270fb41a1218;
op3val:0x7fda7f14df48da55; valaddr_reg:x3; val_offset:2439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2439*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x75ab99b7d728b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2270fb41a1218 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa7f14df48da55 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe75ab99b7d728b; op2val:0x3fe2270fb41a1218;
op3val:0x7fda7f14df48da55; valaddr_reg:x3; val_offset:2442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2442*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7689c5eb40a1f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3f42185eb0526 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd31660cc9f4c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7689c5eb40a1f; op2val:0x3fc3f42185eb0526;
op3val:0x7fbd31660cc9f4c7; valaddr_reg:x3; val_offset:2445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2445*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7689c5eb40a1f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3f42185eb0526 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd31660cc9f4c7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7689c5eb40a1f; op2val:0x3fc3f42185eb0526;
op3val:0x7fbd31660cc9f4c7; valaddr_reg:x3; val_offset:2448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2448*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7689c5eb40a1f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3f42185eb0526 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd31660cc9f4c7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7689c5eb40a1f; op2val:0x3fc3f42185eb0526;
op3val:0x7fbd31660cc9f4c7; valaddr_reg:x3; val_offset:2451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2451*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7689c5eb40a1f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3f42185eb0526 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd31660cc9f4c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7689c5eb40a1f; op2val:0x3fc3f42185eb0526;
op3val:0x7fbd31660cc9f4c7; valaddr_reg:x3; val_offset:2454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2454*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7689c5eb40a1f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3f42185eb0526 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd31660cc9f4c7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7689c5eb40a1f; op2val:0x3fc3f42185eb0526;
op3val:0x7fbd31660cc9f4c7; valaddr_reg:x3; val_offset:2457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2457*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7a5876fb5e6ee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d2c3c110ee11 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd4c0eb4fa8e3d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7a5876fb5e6ee; op2val:0x3fe3d2c3c110ee11;
op3val:0x7fdd4c0eb4fa8e3d; valaddr_reg:x3; val_offset:2460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2460*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7a5876fb5e6ee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d2c3c110ee11 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd4c0eb4fa8e3d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7a5876fb5e6ee; op2val:0x3fe3d2c3c110ee11;
op3val:0x7fdd4c0eb4fa8e3d; valaddr_reg:x3; val_offset:2463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2463*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7a5876fb5e6ee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d2c3c110ee11 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd4c0eb4fa8e3d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7a5876fb5e6ee; op2val:0x3fe3d2c3c110ee11;
op3val:0x7fdd4c0eb4fa8e3d; valaddr_reg:x3; val_offset:2466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2466*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7a5876fb5e6ee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d2c3c110ee11 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd4c0eb4fa8e3d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7a5876fb5e6ee; op2val:0x3fe3d2c3c110ee11;
op3val:0x7fdd4c0eb4fa8e3d; valaddr_reg:x3; val_offset:2469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2469*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7a5876fb5e6ee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d2c3c110ee11 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd4c0eb4fa8e3d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7a5876fb5e6ee; op2val:0x3fe3d2c3c110ee11;
op3val:0x7fdd4c0eb4fa8e3d; valaddr_reg:x3; val_offset:2472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2472*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7e1cbdffe4992 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x10e1c43d3c4e6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x974f860c491f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7e1cbdffe4992; op2val:0x3fe10e1c43d3c4e6;
op3val:0x7fd974f860c491f9; valaddr_reg:x3; val_offset:2475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2475*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7e1cbdffe4992 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x10e1c43d3c4e6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x974f860c491f9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7e1cbdffe4992; op2val:0x3fe10e1c43d3c4e6;
op3val:0x7fd974f860c491f9; valaddr_reg:x3; val_offset:2478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2478*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7e1cbdffe4992 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x10e1c43d3c4e6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x974f860c491f9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7e1cbdffe4992; op2val:0x3fe10e1c43d3c4e6;
op3val:0x7fd974f860c491f9; valaddr_reg:x3; val_offset:2481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2481*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7e1cbdffe4992 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x10e1c43d3c4e6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x974f860c491f9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7e1cbdffe4992; op2val:0x3fe10e1c43d3c4e6;
op3val:0x7fd974f860c491f9; valaddr_reg:x3; val_offset:2484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2484*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7e1cbdffe4992 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x10e1c43d3c4e6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x974f860c491f9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7e1cbdffe4992; op2val:0x3fe10e1c43d3c4e6;
op3val:0x7fd974f860c491f9; valaddr_reg:x3; val_offset:2487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2487*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7e3754ab88106 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ca05abdbc274 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x10330b39c61ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7e3754ab88106; op2val:0x3fd6ca05abdbc274;
op3val:0x7fd10330b39c61ab; valaddr_reg:x3; val_offset:2490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2490*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7e3754ab88106 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ca05abdbc274 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x10330b39c61ab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7e3754ab88106; op2val:0x3fd6ca05abdbc274;
op3val:0x7fd10330b39c61ab; valaddr_reg:x3; val_offset:2493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2493*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7e3754ab88106 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ca05abdbc274 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x10330b39c61ab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7e3754ab88106; op2val:0x3fd6ca05abdbc274;
op3val:0x7fd10330b39c61ab; valaddr_reg:x3; val_offset:2496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2496*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7e3754ab88106 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ca05abdbc274 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x10330b39c61ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7e3754ab88106; op2val:0x3fd6ca05abdbc274;
op3val:0x7fd10330b39c61ab; valaddr_reg:x3; val_offset:2499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2499*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7e3754ab88106 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ca05abdbc274 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x10330b39c61ab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7e3754ab88106; op2val:0x3fd6ca05abdbc274;
op3val:0x7fd10330b39c61ab; valaddr_reg:x3; val_offset:2502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2502*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x67373f406a831 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e5d8dcad33c4; op2val:0x3f967373f406a831;
op3val:0x7f9177d952f13e9f; valaddr_reg:x3; val_offset:2505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2505*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x67373f406a831 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e5d8dcad33c4; op2val:0x3f967373f406a831;
op3val:0x7f9177d952f13e9f; valaddr_reg:x3; val_offset:2508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2508*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x67373f406a831 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e5d8dcad33c4; op2val:0x3f967373f406a831;
op3val:0x7f9177d952f13e9f; valaddr_reg:x3; val_offset:2511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2511*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x67373f406a831 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e5d8dcad33c4; op2val:0x3f967373f406a831;
op3val:0x7f9177d952f13e9f; valaddr_reg:x3; val_offset:2514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2514*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x67373f406a831 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e5d8dcad33c4; op2val:0x3f967373f406a831;
op3val:0x7f9177d952f13e9f; valaddr_reg:x3; val_offset:2517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2517*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e974adc206cd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x260880d31e976 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9cefd477fe03 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e974adc206cd; op2val:0x3fe260880d31e976;
op3val:0x7fdc9cefd477fe03; valaddr_reg:x3; val_offset:2520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2520*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e974adc206cd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x260880d31e976 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9cefd477fe03 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e974adc206cd; op2val:0x3fe260880d31e976;
op3val:0x7fdc9cefd477fe03; valaddr_reg:x3; val_offset:2523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2523*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e974adc206cd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x260880d31e976 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9cefd477fe03 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e974adc206cd; op2val:0x3fe260880d31e976;
op3val:0x7fdc9cefd477fe03; valaddr_reg:x3; val_offset:2526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2526*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e974adc206cd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x260880d31e976 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9cefd477fe03 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e974adc206cd; op2val:0x3fe260880d31e976;
op3val:0x7fdc9cefd477fe03; valaddr_reg:x3; val_offset:2529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2529*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e974adc206cd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x260880d31e976 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9cefd477fe03 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e974adc206cd; op2val:0x3fe260880d31e976;
op3val:0x7fdc9cefd477fe03; valaddr_reg:x3; val_offset:2532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2532*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x90887e3335c40 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0a37a4da7a4ac and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa084e26197488 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe90887e3335c40; op2val:0x3ff0a37a4da7a4ac;
op3val:0x7fea084e26197488; valaddr_reg:x3; val_offset:2535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2535*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x90887e3335c40 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0a37a4da7a4ac and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa084e26197488 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe90887e3335c40; op2val:0x3ff0a37a4da7a4ac;
op3val:0x7fea084e26197488; valaddr_reg:x3; val_offset:2538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2538*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x90887e3335c40 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0a37a4da7a4ac and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa084e26197488 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe90887e3335c40; op2val:0x3ff0a37a4da7a4ac;
op3val:0x7fea084e26197488; valaddr_reg:x3; val_offset:2541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2541*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x90887e3335c40 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0a37a4da7a4ac and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa084e26197488 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe90887e3335c40; op2val:0x3ff0a37a4da7a4ac;
op3val:0x7fea084e26197488; valaddr_reg:x3; val_offset:2544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2544*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x90887e3335c40 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0a37a4da7a4ac and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa084e26197488 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe90887e3335c40; op2val:0x3ff0a37a4da7a4ac;
op3val:0x7fea084e26197488; valaddr_reg:x3; val_offset:2547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2547*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92a40ada09bc7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x25bb1366e5e7b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcdfbfcc37e2d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92a40ada09bc7; op2val:0x3fd25bb1366e5e7b;
op3val:0x7fccdfbfcc37e2d7; valaddr_reg:x3; val_offset:2550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2550*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92a40ada09bc7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x25bb1366e5e7b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcdfbfcc37e2d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92a40ada09bc7; op2val:0x3fd25bb1366e5e7b;
op3val:0x7fccdfbfcc37e2d7; valaddr_reg:x3; val_offset:2553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2553*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92a40ada09bc7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x25bb1366e5e7b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcdfbfcc37e2d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92a40ada09bc7; op2val:0x3fd25bb1366e5e7b;
op3val:0x7fccdfbfcc37e2d7; valaddr_reg:x3; val_offset:2556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2556*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92a40ada09bc7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x25bb1366e5e7b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcdfbfcc37e2d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92a40ada09bc7; op2val:0x3fd25bb1366e5e7b;
op3val:0x7fccdfbfcc37e2d7; valaddr_reg:x3; val_offset:2559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2559*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92a40ada09bc7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x25bb1366e5e7b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcdfbfcc37e2d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92a40ada09bc7; op2val:0x3fd25bb1366e5e7b;
op3val:0x7fccdfbfcc37e2d7; valaddr_reg:x3; val_offset:2562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2562*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92a566f38682f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7264e5116401a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2348dfd8bf745 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92a566f38682f; op2val:0x3fe7264e5116401a;
op3val:0x7fe2348dfd8bf745; valaddr_reg:x3; val_offset:2565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2565*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92a566f38682f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7264e5116401a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2348dfd8bf745 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92a566f38682f; op2val:0x3fe7264e5116401a;
op3val:0x7fe2348dfd8bf745; valaddr_reg:x3; val_offset:2568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2568*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92a566f38682f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7264e5116401a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2348dfd8bf745 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92a566f38682f; op2val:0x3fe7264e5116401a;
op3val:0x7fe2348dfd8bf745; valaddr_reg:x3; val_offset:2571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2571*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92a566f38682f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7264e5116401a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2348dfd8bf745 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92a566f38682f; op2val:0x3fe7264e5116401a;
op3val:0x7fe2348dfd8bf745; valaddr_reg:x3; val_offset:2574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2574*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x92a566f38682f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7264e5116401a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2348dfd8bf745 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe92a566f38682f; op2val:0x3fe7264e5116401a;
op3val:0x7fe2348dfd8bf745; valaddr_reg:x3; val_offset:2577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2577*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9338daa943159 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1632cecbb4fc2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb62fc4471f033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9338daa943159; op2val:0x3fd1632cecbb4fc2;
op3val:0x7fcb62fc4471f033; valaddr_reg:x3; val_offset:2580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2580*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9338daa943159 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1632cecbb4fc2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb62fc4471f033 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9338daa943159; op2val:0x3fd1632cecbb4fc2;
op3val:0x7fcb62fc4471f033; valaddr_reg:x3; val_offset:2583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2583*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9338daa943159 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1632cecbb4fc2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb62fc4471f033 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9338daa943159; op2val:0x3fd1632cecbb4fc2;
op3val:0x7fcb62fc4471f033; valaddr_reg:x3; val_offset:2586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2586*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9338daa943159 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1632cecbb4fc2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb62fc4471f033 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9338daa943159; op2val:0x3fd1632cecbb4fc2;
op3val:0x7fcb62fc4471f033; valaddr_reg:x3; val_offset:2589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2589*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9338daa943159 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1632cecbb4fc2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb62fc4471f033 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9338daa943159; op2val:0x3fd1632cecbb4fc2;
op3val:0x7fcb62fc4471f033; valaddr_reg:x3; val_offset:2592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2592*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x94c1056ed6745 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe25cdfd46ec52 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7d5321be53296 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe94c1056ed6745; op2val:0x3fee25cdfd46ec52;
op3val:0x7fe7d5321be53296; valaddr_reg:x3; val_offset:2595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2595*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x94c1056ed6745 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe25cdfd46ec52 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7d5321be53296 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe94c1056ed6745; op2val:0x3fee25cdfd46ec52;
op3val:0x7fe7d5321be53296; valaddr_reg:x3; val_offset:2598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2598*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x94c1056ed6745 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe25cdfd46ec52 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7d5321be53296 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe94c1056ed6745; op2val:0x3fee25cdfd46ec52;
op3val:0x7fe7d5321be53296; valaddr_reg:x3; val_offset:2601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2601*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x94c1056ed6745 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe25cdfd46ec52 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7d5321be53296 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe94c1056ed6745; op2val:0x3fee25cdfd46ec52;
op3val:0x7fe7d5321be53296; valaddr_reg:x3; val_offset:2604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2604*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x94c1056ed6745 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe25cdfd46ec52 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7d5321be53296 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe94c1056ed6745; op2val:0x3fee25cdfd46ec52;
op3val:0x7fe7d5321be53296; valaddr_reg:x3; val_offset:2607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2607*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9630abe4b977e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x093bbbbab15dc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa4d72905280d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9630abe4b977e; op2val:0x3ff093bbbbab15dc;
op3val:0x7fea4d72905280d4; valaddr_reg:x3; val_offset:2610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2610*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9630abe4b977e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x093bbbbab15dc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa4d72905280d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9630abe4b977e; op2val:0x3ff093bbbbab15dc;
op3val:0x7fea4d72905280d4; valaddr_reg:x3; val_offset:2613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2613*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9630abe4b977e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x093bbbbab15dc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa4d72905280d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9630abe4b977e; op2val:0x3ff093bbbbab15dc;
op3val:0x7fea4d72905280d4; valaddr_reg:x3; val_offset:2616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2616*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9630abe4b977e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x093bbbbab15dc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa4d72905280d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9630abe4b977e; op2val:0x3ff093bbbbab15dc;
op3val:0x7fea4d72905280d4; valaddr_reg:x3; val_offset:2619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2619*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9630abe4b977e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x093bbbbab15dc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa4d72905280d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9630abe4b977e; op2val:0x3ff093bbbbab15dc;
op3val:0x7fea4d72905280d4; valaddr_reg:x3; val_offset:2622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2622*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x963da34a1fbd1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e31bf46211f7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdf8ba7f4f8dff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe963da34a1fbd1; op2val:0x3ff2e31bf46211f7;
op3val:0x7fedf8ba7f4f8dff; valaddr_reg:x3; val_offset:2625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2625*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x963da34a1fbd1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e31bf46211f7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdf8ba7f4f8dff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe963da34a1fbd1; op2val:0x3ff2e31bf46211f7;
op3val:0x7fedf8ba7f4f8dff; valaddr_reg:x3; val_offset:2628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2628*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x963da34a1fbd1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e31bf46211f7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdf8ba7f4f8dff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe963da34a1fbd1; op2val:0x3ff2e31bf46211f7;
op3val:0x7fedf8ba7f4f8dff; valaddr_reg:x3; val_offset:2631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2631*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x963da34a1fbd1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e31bf46211f7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdf8ba7f4f8dff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe963da34a1fbd1; op2val:0x3ff2e31bf46211f7;
op3val:0x7fedf8ba7f4f8dff; valaddr_reg:x3; val_offset:2634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2634*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x963da34a1fbd1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e31bf46211f7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdf8ba7f4f8dff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe963da34a1fbd1; op2val:0x3ff2e31bf46211f7;
op3val:0x7fedf8ba7f4f8dff; valaddr_reg:x3; val_offset:2637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2637*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x979a4444e4e5b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4c4cc7050e2ce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x088b279b4a7a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe979a4444e4e5b; op2val:0x3fe4c4cc7050e2ce;
op3val:0x7fe088b279b4a7a5; valaddr_reg:x3; val_offset:2640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2640*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x979a4444e4e5b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4c4cc7050e2ce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x088b279b4a7a5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe979a4444e4e5b; op2val:0x3fe4c4cc7050e2ce;
op3val:0x7fe088b279b4a7a5; valaddr_reg:x3; val_offset:2643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2643*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x979a4444e4e5b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4c4cc7050e2ce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x088b279b4a7a5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe979a4444e4e5b; op2val:0x3fe4c4cc7050e2ce;
op3val:0x7fe088b279b4a7a5; valaddr_reg:x3; val_offset:2646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2646*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x979a4444e4e5b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4c4cc7050e2ce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x088b279b4a7a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe979a4444e4e5b; op2val:0x3fe4c4cc7050e2ce;
op3val:0x7fe088b279b4a7a5; valaddr_reg:x3; val_offset:2649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2649*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x979a4444e4e5b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4c4cc7050e2ce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x088b279b4a7a5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe979a4444e4e5b; op2val:0x3fe4c4cc7050e2ce;
op3val:0x7fe088b279b4a7a5; valaddr_reg:x3; val_offset:2652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2652*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb500d269fc9eb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b52b2a70b02a; op2val:0x3feb500d269fc9eb;
op3val:0x7fe5f12be85a3941; valaddr_reg:x3; val_offset:2655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2655*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb500d269fc9eb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b52b2a70b02a; op2val:0x3feb500d269fc9eb;
op3val:0x7fe5f12be85a3941; valaddr_reg:x3; val_offset:2658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2658*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb500d269fc9eb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b52b2a70b02a; op2val:0x3feb500d269fc9eb;
op3val:0x7fe5f12be85a3941; valaddr_reg:x3; val_offset:2661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2661*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb500d269fc9eb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b52b2a70b02a; op2val:0x3feb500d269fc9eb;
op3val:0x7fe5f12be85a3941; valaddr_reg:x3; val_offset:2664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2664*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb500d269fc9eb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b52b2a70b02a; op2val:0x3feb500d269fc9eb;
op3val:0x7fe5f12be85a3941; valaddr_reg:x3; val_offset:2667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2667*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c07029de79b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9b8038f3396c0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4b26d02ee8b7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c07029de79b8; op2val:0x3fd9b8038f3396c0;
op3val:0x7fd4b26d02ee8b7f; valaddr_reg:x3; val_offset:2670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2670*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c07029de79b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9b8038f3396c0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4b26d02ee8b7f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c07029de79b8; op2val:0x3fd9b8038f3396c0;
op3val:0x7fd4b26d02ee8b7f; valaddr_reg:x3; val_offset:2673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2673*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c07029de79b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9b8038f3396c0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4b26d02ee8b7f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c07029de79b8; op2val:0x3fd9b8038f3396c0;
op3val:0x7fd4b26d02ee8b7f; valaddr_reg:x3; val_offset:2676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2676*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c07029de79b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9b8038f3396c0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4b26d02ee8b7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c07029de79b8; op2val:0x3fd9b8038f3396c0;
op3val:0x7fd4b26d02ee8b7f; valaddr_reg:x3; val_offset:2679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2679*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c07029de79b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9b8038f3396c0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4b26d02ee8b7f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c07029de79b8; op2val:0x3fd9b8038f3396c0;
op3val:0x7fd4b26d02ee8b7f; valaddr_reg:x3; val_offset:2682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2682*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b3e375a83590 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c0c529007f92; op2val:0x3fe1b3e375a83590;
op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x3; val_offset:2685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2685*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b3e375a83590 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c0c529007f92; op2val:0x3fe1b3e375a83590;
op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x3; val_offset:2688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2688*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b3e375a83590 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c0c529007f92; op2val:0x3fe1b3e375a83590;
op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x3; val_offset:2691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2691*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b3e375a83590 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c0c529007f92; op2val:0x3fe1b3e375a83590;
op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x3; val_offset:2694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2694*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b3e375a83590 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c0c529007f92; op2val:0x3fe1b3e375a83590;
op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x3; val_offset:2697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2697*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x51b4351475892 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c39382ea6198; op2val:0x3fd51b4351475892;
op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x3; val_offset:2700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2700*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x51b4351475892 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c39382ea6198; op2val:0x3fd51b4351475892;
op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x3; val_offset:2703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2703*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x51b4351475892 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c39382ea6198; op2val:0x3fd51b4351475892;
op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x3; val_offset:2706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2706*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x51b4351475892 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c39382ea6198; op2val:0x3fd51b4351475892;
op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x3; val_offset:2709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2709*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x51b4351475892 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c39382ea6198; op2val:0x3fd51b4351475892;
op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x3; val_offset:2712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2712*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c4ac16f8b53d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd955fc1f7a7e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d284d22cd9ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c4ac16f8b53d; op2val:0x3fdd955fc1f7a7e7;
op3val:0x7fd7d284d22cd9ad; valaddr_reg:x3; val_offset:2715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2715*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c4ac16f8b53d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd955fc1f7a7e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d284d22cd9ad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c4ac16f8b53d; op2val:0x3fdd955fc1f7a7e7;
op3val:0x7fd7d284d22cd9ad; valaddr_reg:x3; val_offset:2718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2718*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c4ac16f8b53d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd955fc1f7a7e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d284d22cd9ad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c4ac16f8b53d; op2val:0x3fdd955fc1f7a7e7;
op3val:0x7fd7d284d22cd9ad; valaddr_reg:x3; val_offset:2721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2721*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c4ac16f8b53d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd955fc1f7a7e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d284d22cd9ad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c4ac16f8b53d; op2val:0x3fdd955fc1f7a7e7;
op3val:0x7fd7d284d22cd9ad; valaddr_reg:x3; val_offset:2724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2724*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c4ac16f8b53d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd955fc1f7a7e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d284d22cd9ad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c4ac16f8b53d; op2val:0x3fdd955fc1f7a7e7;
op3val:0x7fd7d284d22cd9ad; valaddr_reg:x3; val_offset:2727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2727*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x364e03ef31b27 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c6b24203c777; op2val:0x3ff364e03ef31b27;
op3val:0x7fef3e76cbaa48e2; valaddr_reg:x3; val_offset:2730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2730*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x364e03ef31b27 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c6b24203c777; op2val:0x3ff364e03ef31b27;
op3val:0x7fef3e76cbaa48e2; valaddr_reg:x3; val_offset:2733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2733*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x364e03ef31b27 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c6b24203c777; op2val:0x3ff364e03ef31b27;
op3val:0x7fef3e76cbaa48e2; valaddr_reg:x3; val_offset:2736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2736*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x364e03ef31b27 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c6b24203c777; op2val:0x3ff364e03ef31b27;
op3val:0x7fef3e76cbaa48e2; valaddr_reg:x3; val_offset:2739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2739*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x364e03ef31b27 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c6b24203c777; op2val:0x3ff364e03ef31b27;
op3val:0x7fef3e76cbaa48e2; valaddr_reg:x3; val_offset:2742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2742*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9de2bd8b45031 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6cdc2677914ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x26f12946f0a28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9de2bd8b45031; op2val:0x3fe6cdc2677914ea;
op3val:0x7fe26f12946f0a28; valaddr_reg:x3; val_offset:2745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2745*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9de2bd8b45031 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6cdc2677914ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x26f12946f0a28 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9de2bd8b45031; op2val:0x3fe6cdc2677914ea;
op3val:0x7fe26f12946f0a28; valaddr_reg:x3; val_offset:2748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2748*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9de2bd8b45031 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6cdc2677914ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x26f12946f0a28 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9de2bd8b45031; op2val:0x3fe6cdc2677914ea;
op3val:0x7fe26f12946f0a28; valaddr_reg:x3; val_offset:2751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2751*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9de2bd8b45031 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6cdc2677914ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x26f12946f0a28 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9de2bd8b45031; op2val:0x3fe6cdc2677914ea;
op3val:0x7fe26f12946f0a28; valaddr_reg:x3; val_offset:2754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2754*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9de2bd8b45031 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6cdc2677914ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x26f12946f0a28 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9de2bd8b45031; op2val:0x3fe6cdc2677914ea;
op3val:0x7fe26f12946f0a28; valaddr_reg:x3; val_offset:2757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2757*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa81b0950e06a0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb0c82a2c2a677 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x667c9d5aae277 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea81b0950e06a0; op2val:0x3fbb0c82a2c2a677;
op3val:0x7fb667c9d5aae277; valaddr_reg:x3; val_offset:2760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2760*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa81b0950e06a0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb0c82a2c2a677 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x667c9d5aae277 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea81b0950e06a0; op2val:0x3fbb0c82a2c2a677;
op3val:0x7fb667c9d5aae277; valaddr_reg:x3; val_offset:2763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2763*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa81b0950e06a0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb0c82a2c2a677 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x667c9d5aae277 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea81b0950e06a0; op2val:0x3fbb0c82a2c2a677;
op3val:0x7fb667c9d5aae277; valaddr_reg:x3; val_offset:2766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2766*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa81b0950e06a0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb0c82a2c2a677 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x667c9d5aae277 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea81b0950e06a0; op2val:0x3fbb0c82a2c2a677;
op3val:0x7fb667c9d5aae277; valaddr_reg:x3; val_offset:2769*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2769*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa81b0950e06a0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb0c82a2c2a677 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x667c9d5aae277 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea81b0950e06a0; op2val:0x3fbb0c82a2c2a677;
op3val:0x7fb667c9d5aae277; valaddr_reg:x3; val_offset:2772*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2772*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaa38d0be280e1 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xfd41d096ecf1d and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xa7f0456043a7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaa38d0be280e1; op2val:0x3fafd41d096ecf1d;
op3val:0x7faa7f0456043a7f; valaddr_reg:x3; val_offset:2775*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2775*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaa38d0be280e1 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xfd41d096ecf1d and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xa7f0456043a7f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaa38d0be280e1; op2val:0x3fafd41d096ecf1d;
op3val:0x7faa7f0456043a7f; valaddr_reg:x3; val_offset:2778*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2778*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaa38d0be280e1 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xfd41d096ecf1d and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xa7f0456043a7f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaa38d0be280e1; op2val:0x3fafd41d096ecf1d;
op3val:0x7faa7f0456043a7f; valaddr_reg:x3; val_offset:2781*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2781*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaa38d0be280e1 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xfd41d096ecf1d and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xa7f0456043a7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaa38d0be280e1; op2val:0x3fafd41d096ecf1d;
op3val:0x7faa7f0456043a7f; valaddr_reg:x3; val_offset:2784*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2784*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaa38d0be280e1 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xfd41d096ecf1d and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xa7f0456043a7f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaa38d0be280e1; op2val:0x3fafd41d096ecf1d;
op3val:0x7faa7f0456043a7f; valaddr_reg:x3; val_offset:2787*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2787*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad148409a7a4d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xfbb22c4238730 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa97921f8b9297 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead148409a7a4d; op2val:0x3fbfbb22c4238730;
op3val:0x7fba97921f8b9297; valaddr_reg:x3; val_offset:2790*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2790*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad148409a7a4d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xfbb22c4238730 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa97921f8b9297 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead148409a7a4d; op2val:0x3fbfbb22c4238730;
op3val:0x7fba97921f8b9297; valaddr_reg:x3; val_offset:2793*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2793*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad148409a7a4d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xfbb22c4238730 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa97921f8b9297 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead148409a7a4d; op2val:0x3fbfbb22c4238730;
op3val:0x7fba97921f8b9297; valaddr_reg:x3; val_offset:2796*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2796*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad148409a7a4d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xfbb22c4238730 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa97921f8b9297 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead148409a7a4d; op2val:0x3fbfbb22c4238730;
op3val:0x7fba97921f8b9297; valaddr_reg:x3; val_offset:2799*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2799*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad148409a7a4d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xfbb22c4238730 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa97921f8b9297 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead148409a7a4d; op2val:0x3fbfbb22c4238730;
op3val:0x7fba97921f8b9297; valaddr_reg:x3; val_offset:2802*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2802*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9703f7515ec33 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb045c5db2e460; op2val:0x3fd9703f7515ec33;
op3val:0x7fd57a2cffec0101; valaddr_reg:x3; val_offset:2805*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2805*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9703f7515ec33 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb045c5db2e460; op2val:0x3fd9703f7515ec33;
op3val:0x7fd57a2cffec0101; valaddr_reg:x3; val_offset:2808*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2808*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9703f7515ec33 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb045c5db2e460; op2val:0x3fd9703f7515ec33;
op3val:0x7fd57a2cffec0101; valaddr_reg:x3; val_offset:2811*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2811*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9703f7515ec33 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb045c5db2e460; op2val:0x3fd9703f7515ec33;
op3val:0x7fd57a2cffec0101; valaddr_reg:x3; val_offset:2814*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2814*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9703f7515ec33 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb045c5db2e460; op2val:0x3fd9703f7515ec33;
op3val:0x7fd57a2cffec0101; valaddr_reg:x3; val_offset:2817*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2817*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb4fcdae5be740 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x2add24a985c2b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xfe27d3ad5610f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb4fcdae5be740; op2val:0x3fb2add24a985c2b;
op3val:0x7fafe27d3ad5610f; valaddr_reg:x3; val_offset:2820*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2820*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb4fcdae5be740 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x2add24a985c2b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xfe27d3ad5610f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb4fcdae5be740; op2val:0x3fb2add24a985c2b;
op3val:0x7fafe27d3ad5610f; valaddr_reg:x3; val_offset:2823*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2823*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb4fcdae5be740 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x2add24a985c2b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xfe27d3ad5610f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb4fcdae5be740; op2val:0x3fb2add24a985c2b;
op3val:0x7fafe27d3ad5610f; valaddr_reg:x3; val_offset:2826*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2826*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb4fcdae5be740 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x2add24a985c2b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xfe27d3ad5610f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb4fcdae5be740; op2val:0x3fb2add24a985c2b;
op3val:0x7fafe27d3ad5610f; valaddr_reg:x3; val_offset:2829*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2829*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb4fcdae5be740 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x2add24a985c2b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xfe27d3ad5610f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb4fcdae5be740; op2val:0x3fb2add24a985c2b;
op3val:0x7fafe27d3ad5610f; valaddr_reg:x3; val_offset:2832*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2832*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb5c21cc0aeb77 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x94872c41ac66c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x59debd3573af1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb5c21cc0aeb77; op2val:0x3fd94872c41ac66c;
op3val:0x7fd59debd3573af1; valaddr_reg:x3; val_offset:2835*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2835*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb5c21cc0aeb77 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x94872c41ac66c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x59debd3573af1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb5c21cc0aeb77; op2val:0x3fd94872c41ac66c;
op3val:0x7fd59debd3573af1; valaddr_reg:x3; val_offset:2838*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2838*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb5c21cc0aeb77 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x94872c41ac66c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x59debd3573af1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb5c21cc0aeb77; op2val:0x3fd94872c41ac66c;
op3val:0x7fd59debd3573af1; valaddr_reg:x3; val_offset:2841*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2841*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb5c21cc0aeb77 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x94872c41ac66c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x59debd3573af1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb5c21cc0aeb77; op2val:0x3fd94872c41ac66c;
op3val:0x7fd59debd3573af1; valaddr_reg:x3; val_offset:2844*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2844*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb5c21cc0aeb77 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x94872c41ac66c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x59debd3573af1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb5c21cc0aeb77; op2val:0x3fd94872c41ac66c;
op3val:0x7fd59debd3573af1; valaddr_reg:x3; val_offset:2847*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2847*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7561a51a6716 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4de99f77c351a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e85f7a31631d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7561a51a6716; op2val:0x3fd4de99f77c351a;
op3val:0x7fd1e85f7a31631d; valaddr_reg:x3; val_offset:2850*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2850*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7561a51a6716 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4de99f77c351a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e85f7a31631d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7561a51a6716; op2val:0x3fd4de99f77c351a;
op3val:0x7fd1e85f7a31631d; valaddr_reg:x3; val_offset:2853*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2853*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7561a51a6716 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4de99f77c351a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e85f7a31631d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7561a51a6716; op2val:0x3fd4de99f77c351a;
op3val:0x7fd1e85f7a31631d; valaddr_reg:x3; val_offset:2856*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2856*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7561a51a6716 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4de99f77c351a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e85f7a31631d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7561a51a6716; op2val:0x3fd4de99f77c351a;
op3val:0x7fd1e85f7a31631d; valaddr_reg:x3; val_offset:2859*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2859*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7561a51a6716 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4de99f77c351a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e85f7a31631d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7561a51a6716; op2val:0x3fd4de99f77c351a;
op3val:0x7fd1e85f7a31631d; valaddr_reg:x3; val_offset:2862*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2862*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7f239e9dfb7e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd00ee4219c2c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ec05022473c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7f239e9dfb7e; op2val:0x3fed00ee4219c2c6;
op3val:0x7fe8ec05022473c9; valaddr_reg:x3; val_offset:2865*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2865*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7f239e9dfb7e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd00ee4219c2c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ec05022473c9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7f239e9dfb7e; op2val:0x3fed00ee4219c2c6;
op3val:0x7fe8ec05022473c9; valaddr_reg:x3; val_offset:2868*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2868*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7f239e9dfb7e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd00ee4219c2c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ec05022473c9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7f239e9dfb7e; op2val:0x3fed00ee4219c2c6;
op3val:0x7fe8ec05022473c9; valaddr_reg:x3; val_offset:2871*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2871*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7f239e9dfb7e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd00ee4219c2c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ec05022473c9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7f239e9dfb7e; op2val:0x3fed00ee4219c2c6;
op3val:0x7fe8ec05022473c9; valaddr_reg:x3; val_offset:2874*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2874*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7f239e9dfb7e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd00ee4219c2c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ec05022473c9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7f239e9dfb7e; op2val:0x3fed00ee4219c2c6;
op3val:0x7fe8ec05022473c9; valaddr_reg:x3; val_offset:2877*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2877*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb9382d77a6dfe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b5d5677dd48d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0fc47f311a49b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb9382d77a6dfe; op2val:0x3fe3b5d5677dd48d;
op3val:0x7fe0fc47f311a49b; valaddr_reg:x3; val_offset:2880*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2880*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb9382d77a6dfe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b5d5677dd48d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0fc47f311a49b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb9382d77a6dfe; op2val:0x3fe3b5d5677dd48d;
op3val:0x7fe0fc47f311a49b; valaddr_reg:x3; val_offset:2883*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2883*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb9382d77a6dfe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b5d5677dd48d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0fc47f311a49b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb9382d77a6dfe; op2val:0x3fe3b5d5677dd48d;
op3val:0x7fe0fc47f311a49b; valaddr_reg:x3; val_offset:2886*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2886*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb9382d77a6dfe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b5d5677dd48d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0fc47f311a49b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb9382d77a6dfe; op2val:0x3fe3b5d5677dd48d;
op3val:0x7fe0fc47f311a49b; valaddr_reg:x3; val_offset:2889*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2889*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb9382d77a6dfe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b5d5677dd48d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0fc47f311a49b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb9382d77a6dfe; op2val:0x3fe3b5d5677dd48d;
op3val:0x7fe0fc47f311a49b; valaddr_reg:x3; val_offset:2892*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2892*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc232ce1afdd5d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64763af91c8ad and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x396f48df10de5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec232ce1afdd5d; op2val:0x3fe64763af91c8ad;
op3val:0x7fe396f48df10de5; valaddr_reg:x3; val_offset:2895*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2895*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc232ce1afdd5d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64763af91c8ad and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x396f48df10de5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec232ce1afdd5d; op2val:0x3fe64763af91c8ad;
op3val:0x7fe396f48df10de5; valaddr_reg:x3; val_offset:2898*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2898*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc232ce1afdd5d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64763af91c8ad and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x396f48df10de5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec232ce1afdd5d; op2val:0x3fe64763af91c8ad;
op3val:0x7fe396f48df10de5; valaddr_reg:x3; val_offset:2901*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2901*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc232ce1afdd5d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64763af91c8ad and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x396f48df10de5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec232ce1afdd5d; op2val:0x3fe64763af91c8ad;
op3val:0x7fe396f48df10de5; valaddr_reg:x3; val_offset:2904*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2904*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc232ce1afdd5d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64763af91c8ad and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x396f48df10de5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec232ce1afdd5d; op2val:0x3fe64763af91c8ad;
op3val:0x7fe396f48df10de5; valaddr_reg:x3; val_offset:2907*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2907*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x31948e12564a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec299b1ab6e737; op2val:0x3fe31948e12564a2;
op3val:0x7fe0cef4bccbe789; valaddr_reg:x3; val_offset:2910*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2910*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x31948e12564a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec299b1ab6e737; op2val:0x3fe31948e12564a2;
op3val:0x7fe0cef4bccbe789; valaddr_reg:x3; val_offset:2913*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2913*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x31948e12564a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec299b1ab6e737; op2val:0x3fe31948e12564a2;
op3val:0x7fe0cef4bccbe789; valaddr_reg:x3; val_offset:2916*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2916*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x31948e12564a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec299b1ab6e737; op2val:0x3fe31948e12564a2;
op3val:0x7fe0cef4bccbe789; valaddr_reg:x3; val_offset:2919*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2919*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x31948e12564a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec299b1ab6e737; op2val:0x3fe31948e12564a2;
op3val:0x7fe0cef4bccbe789; valaddr_reg:x3; val_offset:2922*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2922*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc95dea29dfb56 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x030f05c9863cc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xced4dabff5ebf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec95dea29dfb56; op2val:0x3fe030f05c9863cc;
op3val:0x7fdced4dabff5ebf; valaddr_reg:x3; val_offset:2925*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2925*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc95dea29dfb56 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x030f05c9863cc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xced4dabff5ebf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec95dea29dfb56; op2val:0x3fe030f05c9863cc;
op3val:0x7fdced4dabff5ebf; valaddr_reg:x3; val_offset:2928*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2928*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc95dea29dfb56 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x030f05c9863cc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xced4dabff5ebf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec95dea29dfb56; op2val:0x3fe030f05c9863cc;
op3val:0x7fdced4dabff5ebf; valaddr_reg:x3; val_offset:2931*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2931*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc95dea29dfb56 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x030f05c9863cc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xced4dabff5ebf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec95dea29dfb56; op2val:0x3fe030f05c9863cc;
op3val:0x7fdced4dabff5ebf; valaddr_reg:x3; val_offset:2934*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2934*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc95dea29dfb56 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x030f05c9863cc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xced4dabff5ebf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec95dea29dfb56; op2val:0x3fe030f05c9863cc;
op3val:0x7fdced4dabff5ebf; valaddr_reg:x3; val_offset:2937*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2937*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc7784d8dacdb and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5f7c825fb0e2b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3c1be9c53e823 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc7784d8dacdb; op2val:0x3fc5f7c825fb0e2b;
op3val:0x7fc3c1be9c53e823; valaddr_reg:x3; val_offset:2940*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2940*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc7784d8dacdb and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5f7c825fb0e2b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3c1be9c53e823 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc7784d8dacdb; op2val:0x3fc5f7c825fb0e2b;
op3val:0x7fc3c1be9c53e823; valaddr_reg:x3; val_offset:2943*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2943*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc7784d8dacdb and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5f7c825fb0e2b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3c1be9c53e823 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc7784d8dacdb; op2val:0x3fc5f7c825fb0e2b;
op3val:0x7fc3c1be9c53e823; valaddr_reg:x3; val_offset:2946*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2946*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc7784d8dacdb and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5f7c825fb0e2b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3c1be9c53e823 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc7784d8dacdb; op2val:0x3fc5f7c825fb0e2b;
op3val:0x7fc3c1be9c53e823; valaddr_reg:x3; val_offset:2949*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2949*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc7784d8dacdb and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5f7c825fb0e2b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3c1be9c53e823 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc7784d8dacdb; op2val:0x3fc5f7c825fb0e2b;
op3val:0x7fc3c1be9c53e823; valaddr_reg:x3; val_offset:2952*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2952*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd14ade7bc89c9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf0c9a79b5326b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc377c9bd553c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed14ade7bc89c9; op2val:0x3fdf0c9a79b5326b;
op3val:0x7fdc377c9bd553c7; valaddr_reg:x3; val_offset:2955*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2955*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd14ade7bc89c9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf0c9a79b5326b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc377c9bd553c7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed14ade7bc89c9; op2val:0x3fdf0c9a79b5326b;
op3val:0x7fdc377c9bd553c7; valaddr_reg:x3; val_offset:2958*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2958*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd14ade7bc89c9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf0c9a79b5326b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc377c9bd553c7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed14ade7bc89c9; op2val:0x3fdf0c9a79b5326b;
op3val:0x7fdc377c9bd553c7; valaddr_reg:x3; val_offset:2961*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2961*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd14ade7bc89c9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf0c9a79b5326b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc377c9bd553c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed14ade7bc89c9; op2val:0x3fdf0c9a79b5326b;
op3val:0x7fdc377c9bd553c7; valaddr_reg:x3; val_offset:2964*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2964*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd14ade7bc89c9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf0c9a79b5326b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc377c9bd553c7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed14ade7bc89c9; op2val:0x3fdf0c9a79b5326b;
op3val:0x7fdc377c9bd553c7; valaddr_reg:x3; val_offset:2967*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2967*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x21b7b40acb837 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ab73cc65f52; op2val:0x3fe21b7b40acb837;
op3val:0x7fe07805b64db437; valaddr_reg:x3; val_offset:2970*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2970*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x21b7b40acb837 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ab73cc65f52; op2val:0x3fe21b7b40acb837;
op3val:0x7fe07805b64db437; valaddr_reg:x3; val_offset:2973*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2973*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x21b7b40acb837 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ab73cc65f52; op2val:0x3fe21b7b40acb837;
op3val:0x7fe07805b64db437; valaddr_reg:x3; val_offset:2976*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2976*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x21b7b40acb837 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ab73cc65f52; op2val:0x3fe21b7b40acb837;
op3val:0x7fe07805b64db437; valaddr_reg:x3; val_offset:2979*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2979*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x21b7b40acb837 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ab73cc65f52; op2val:0x3fe21b7b40acb837;
op3val:0x7fe07805b64db437; valaddr_reg:x3; val_offset:2982*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2982*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd22227ba705ff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd6b123fbc8aee and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac86a00971463 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed22227ba705ff; op2val:0x3fed6b123fbc8aee;
op3val:0x7feac86a00971463; valaddr_reg:x3; val_offset:2985*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2985*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd22227ba705ff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd6b123fbc8aee and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac86a00971463 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed22227ba705ff; op2val:0x3fed6b123fbc8aee;
op3val:0x7feac86a00971463; valaddr_reg:x3; val_offset:2988*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2988*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd22227ba705ff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd6b123fbc8aee and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac86a00971463 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed22227ba705ff; op2val:0x3fed6b123fbc8aee;
op3val:0x7feac86a00971463; valaddr_reg:x3; val_offset:2991*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2991*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd22227ba705ff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd6b123fbc8aee and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac86a00971463 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed22227ba705ff; op2val:0x3fed6b123fbc8aee;
op3val:0x7feac86a00971463; valaddr_reg:x3; val_offset:2994*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2994*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd22227ba705ff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd6b123fbc8aee and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac86a00971463 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed22227ba705ff; op2val:0x3fed6b123fbc8aee;
op3val:0x7feac86a00971463; valaddr_reg:x3; val_offset:2997*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2997*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd23797880df4f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd756466804b1c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad30b3586df9d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed23797880df4f; op2val:0x3fdd756466804b1c;
op3val:0x7fdad30b3586df9d; valaddr_reg:x3; val_offset:3000*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd23797880df4f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd756466804b1c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad30b3586df9d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed23797880df4f; op2val:0x3fdd756466804b1c;
op3val:0x7fdad30b3586df9d; valaddr_reg:x3; val_offset:3003*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3003*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd23797880df4f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd756466804b1c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad30b3586df9d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed23797880df4f; op2val:0x3fdd756466804b1c;
op3val:0x7fdad30b3586df9d; valaddr_reg:x3; val_offset:3006*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3006*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd23797880df4f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd756466804b1c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad30b3586df9d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed23797880df4f; op2val:0x3fdd756466804b1c;
op3val:0x7fdad30b3586df9d; valaddr_reg:x3; val_offset:3009*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3009*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd23797880df4f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd756466804b1c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad30b3586df9d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed23797880df4f; op2val:0x3fdd756466804b1c;
op3val:0x7fdad30b3586df9d; valaddr_reg:x3; val_offset:3012*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3012*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2a2cdd0f8cb3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfdf05ad534fe3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd0c1e8b5a87f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2a2cdd0f8cb3; op2val:0x3fefdf05ad534fe3;
op3val:0x7fed0c1e8b5a87f3; valaddr_reg:x3; val_offset:3015*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3015*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2a2cdd0f8cb3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfdf05ad534fe3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd0c1e8b5a87f3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2a2cdd0f8cb3; op2val:0x3fefdf05ad534fe3;
op3val:0x7fed0c1e8b5a87f3; valaddr_reg:x3; val_offset:3018*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3018*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2a2cdd0f8cb3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfdf05ad534fe3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd0c1e8b5a87f3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2a2cdd0f8cb3; op2val:0x3fefdf05ad534fe3;
op3val:0x7fed0c1e8b5a87f3; valaddr_reg:x3; val_offset:3021*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3021*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2a2cdd0f8cb3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfdf05ad534fe3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd0c1e8b5a87f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2a2cdd0f8cb3; op2val:0x3fefdf05ad534fe3;
op3val:0x7fed0c1e8b5a87f3; valaddr_reg:x3; val_offset:3024*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3024*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2a2cdd0f8cb3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfdf05ad534fe3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd0c1e8b5a87f3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2a2cdd0f8cb3; op2val:0x3fefdf05ad534fe3;
op3val:0x7fed0c1e8b5a87f3; valaddr_reg:x3; val_offset:3027*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3027*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2c6e3c45eb41 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x33b6e78f0a0df and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x188901605910f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2c6e3c45eb41; op2val:0x3fd33b6e78f0a0df;
op3val:0x7fd188901605910f; valaddr_reg:x3; val_offset:3030*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3030*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2c6e3c45eb41 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x33b6e78f0a0df and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x188901605910f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2c6e3c45eb41; op2val:0x3fd33b6e78f0a0df;
op3val:0x7fd188901605910f; valaddr_reg:x3; val_offset:3033*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3033*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2c6e3c45eb41 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x33b6e78f0a0df and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x188901605910f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2c6e3c45eb41; op2val:0x3fd33b6e78f0a0df;
op3val:0x7fd188901605910f; valaddr_reg:x3; val_offset:3036*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3036*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2c6e3c45eb41 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x33b6e78f0a0df and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x188901605910f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2c6e3c45eb41; op2val:0x3fd33b6e78f0a0df;
op3val:0x7fd188901605910f; valaddr_reg:x3; val_offset:3039*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3039*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2c6e3c45eb41 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x33b6e78f0a0df and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x188901605910f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2c6e3c45eb41; op2val:0x3fd33b6e78f0a0df;
op3val:0x7fd188901605910f; valaddr_reg:x3; val_offset:3042*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3042*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd69ac69d51396 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe47ab05a54153 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbd4f14ba45087 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed69ac69d51396; op2val:0x3fee47ab05a54153;
op3val:0x7febd4f14ba45087; valaddr_reg:x3; val_offset:3045*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3045*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd69ac69d51396 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe47ab05a54153 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbd4f14ba45087 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed69ac69d51396; op2val:0x3fee47ab05a54153;
op3val:0x7febd4f14ba45087; valaddr_reg:x3; val_offset:3048*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3048*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd69ac69d51396 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe47ab05a54153 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbd4f14ba45087 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed69ac69d51396; op2val:0x3fee47ab05a54153;
op3val:0x7febd4f14ba45087; valaddr_reg:x3; val_offset:3051*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3051*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd69ac69d51396 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe47ab05a54153 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbd4f14ba45087 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed69ac69d51396; op2val:0x3fee47ab05a54153;
op3val:0x7febd4f14ba45087; valaddr_reg:x3; val_offset:3054*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3054*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd69ac69d51396 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe47ab05a54153 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbd4f14ba45087 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed69ac69d51396; op2val:0x3fee47ab05a54153;
op3val:0x7febd4f14ba45087; valaddr_reg:x3; val_offset:3057*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3057*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd6f02241f1dfe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa18b735e6fe18 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x800ed835cf169 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed6f02241f1dfe; op2val:0x3fea18b735e6fe18;
op3val:0x7fe800ed835cf169; valaddr_reg:x3; val_offset:3060*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3060*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd6f02241f1dfe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa18b735e6fe18 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x800ed835cf169 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed6f02241f1dfe; op2val:0x3fea18b735e6fe18;
op3val:0x7fe800ed835cf169; valaddr_reg:x3; val_offset:3063*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3063*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd6f02241f1dfe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa18b735e6fe18 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x800ed835cf169 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed6f02241f1dfe; op2val:0x3fea18b735e6fe18;
op3val:0x7fe800ed835cf169; valaddr_reg:x3; val_offset:3066*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3066*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd6f02241f1dfe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa18b735e6fe18 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x800ed835cf169 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed6f02241f1dfe; op2val:0x3fea18b735e6fe18;
op3val:0x7fe800ed835cf169; valaddr_reg:x3; val_offset:3069*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3069*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd6f02241f1dfe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa18b735e6fe18 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x800ed835cf169 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed6f02241f1dfe; op2val:0x3fea18b735e6fe18;
op3val:0x7fe800ed835cf169; valaddr_reg:x3; val_offset:3072*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3072*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd825bfd7c5ea9 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x1b7fbece18bf1 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x056eaadaea1df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed825bfd7c5ea9; op2val:0x3fa1b7fbece18bf1;
op3val:0x7fa056eaadaea1df; valaddr_reg:x3; val_offset:3075*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3075*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd825bfd7c5ea9 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x1b7fbece18bf1 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x056eaadaea1df and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed825bfd7c5ea9; op2val:0x3fa1b7fbece18bf1;
op3val:0x7fa056eaadaea1df; valaddr_reg:x3; val_offset:3078*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3078*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd825bfd7c5ea9 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x1b7fbece18bf1 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x056eaadaea1df and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed825bfd7c5ea9; op2val:0x3fa1b7fbece18bf1;
op3val:0x7fa056eaadaea1df; valaddr_reg:x3; val_offset:3081*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3081*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd825bfd7c5ea9 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x1b7fbece18bf1 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x056eaadaea1df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed825bfd7c5ea9; op2val:0x3fa1b7fbece18bf1;
op3val:0x7fa056eaadaea1df; valaddr_reg:x3; val_offset:3084*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3084*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd825bfd7c5ea9 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x1b7fbece18bf1 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x056eaadaea1df and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed825bfd7c5ea9; op2val:0x3fa1b7fbece18bf1;
op3val:0x7fa056eaadaea1df; valaddr_reg:x3; val_offset:3087*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3087*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd89dbaa7a4f33 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa127f980d5f2f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x81115cd8e3d03 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed89dbaa7a4f33; op2val:0x3fda127f980d5f2f;
op3val:0x7fd81115cd8e3d03; valaddr_reg:x3; val_offset:3090*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3090*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd89dbaa7a4f33 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa127f980d5f2f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x81115cd8e3d03 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed89dbaa7a4f33; op2val:0x3fda127f980d5f2f;
op3val:0x7fd81115cd8e3d03; valaddr_reg:x3; val_offset:3093*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3093*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd89dbaa7a4f33 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa127f980d5f2f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x81115cd8e3d03 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed89dbaa7a4f33; op2val:0x3fda127f980d5f2f;
op3val:0x7fd81115cd8e3d03; valaddr_reg:x3; val_offset:3096*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3096*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd89dbaa7a4f33 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa127f980d5f2f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x81115cd8e3d03 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed89dbaa7a4f33; op2val:0x3fda127f980d5f2f;
op3val:0x7fd81115cd8e3d03; valaddr_reg:x3; val_offset:3099*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3099*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd89dbaa7a4f33 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa127f980d5f2f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x81115cd8e3d03 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed89dbaa7a4f33; op2val:0x3fda127f980d5f2f;
op3val:0x7fd81115cd8e3d03; valaddr_reg:x3; val_offset:3102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3102*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xda6e456917f2c and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8a60cf86df806 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6d70906372287 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feda6e456917f2c; op2val:0x3fb8a60cf86df806;
op3val:0x7fb6d70906372287; valaddr_reg:x3; val_offset:3105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3105*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xda6e456917f2c and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8a60cf86df806 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6d70906372287 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feda6e456917f2c; op2val:0x3fb8a60cf86df806;
op3val:0x7fb6d70906372287; valaddr_reg:x3; val_offset:3108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3108*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xda6e456917f2c and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8a60cf86df806 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6d70906372287 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feda6e456917f2c; op2val:0x3fb8a60cf86df806;
op3val:0x7fb6d70906372287; valaddr_reg:x3; val_offset:3111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3111*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xda6e456917f2c and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8a60cf86df806 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6d70906372287 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feda6e456917f2c; op2val:0x3fb8a60cf86df806;
op3val:0x7fb6d70906372287; valaddr_reg:x3; val_offset:3114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3114*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xda6e456917f2c and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8a60cf86df806 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6d70906372287 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feda6e456917f2c; op2val:0x3fb8a60cf86df806;
op3val:0x7fb6d70906372287; valaddr_reg:x3; val_offset:3117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3117*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe11c9b022ae56 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6cc42eab1a937 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x56c2af013b477 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee11c9b022ae56; op2val:0x3fb6cc42eab1a937;
op3val:0x7fb56c2af013b477; valaddr_reg:x3; val_offset:3120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3120*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe11c9b022ae56 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6cc42eab1a937 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x56c2af013b477 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee11c9b022ae56; op2val:0x3fb6cc42eab1a937;
op3val:0x7fb56c2af013b477; valaddr_reg:x3; val_offset:3123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3123*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe11c9b022ae56 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6cc42eab1a937 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x56c2af013b477 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee11c9b022ae56; op2val:0x3fb6cc42eab1a937;
op3val:0x7fb56c2af013b477; valaddr_reg:x3; val_offset:3126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3126*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe11c9b022ae56 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6cc42eab1a937 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x56c2af013b477 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee11c9b022ae56; op2val:0x3fb6cc42eab1a937;
op3val:0x7fb56c2af013b477; valaddr_reg:x3; val_offset:3129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3129*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe11c9b022ae56 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6cc42eab1a937 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x56c2af013b477 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee11c9b022ae56; op2val:0x3fb6cc42eab1a937;
op3val:0x7fb56c2af013b477; valaddr_reg:x3; val_offset:3132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3132*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe550f455cc69b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd69c0af4bbfae and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbe153957c4525 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee550f455cc69b; op2val:0x3fdd69c0af4bbfae;
op3val:0x7fdbe153957c4525; valaddr_reg:x3; val_offset:3135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3135*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe550f455cc69b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd69c0af4bbfae and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbe153957c4525 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee550f455cc69b; op2val:0x3fdd69c0af4bbfae;
op3val:0x7fdbe153957c4525; valaddr_reg:x3; val_offset:3138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3138*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe550f455cc69b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd69c0af4bbfae and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbe153957c4525 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee550f455cc69b; op2val:0x3fdd69c0af4bbfae;
op3val:0x7fdbe153957c4525; valaddr_reg:x3; val_offset:3141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3141*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe550f455cc69b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd69c0af4bbfae and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbe153957c4525 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee550f455cc69b; op2val:0x3fdd69c0af4bbfae;
op3val:0x7fdbe153957c4525; valaddr_reg:x3; val_offset:3144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3144*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe550f455cc69b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd69c0af4bbfae and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbe153957c4525 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee550f455cc69b; op2val:0x3fdd69c0af4bbfae;
op3val:0x7fdbe153957c4525; valaddr_reg:x3; val_offset:3147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3147*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe56a317b6b243 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb52e4839f4db4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9e7b04402a756 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee56a317b6b243; op2val:0x3feb52e4839f4db4;
op3val:0x7fe9e7b04402a756; valaddr_reg:x3; val_offset:3150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3150*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe56a317b6b243 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb52e4839f4db4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9e7b04402a756 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee56a317b6b243; op2val:0x3feb52e4839f4db4;
op3val:0x7fe9e7b04402a756; valaddr_reg:x3; val_offset:3153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3153*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe56a317b6b243 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb52e4839f4db4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9e7b04402a756 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee56a317b6b243; op2val:0x3feb52e4839f4db4;
op3val:0x7fe9e7b04402a756; valaddr_reg:x3; val_offset:3156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3156*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe56a317b6b243 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb52e4839f4db4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9e7b04402a756 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee56a317b6b243; op2val:0x3feb52e4839f4db4;
op3val:0x7fe9e7b04402a756; valaddr_reg:x3; val_offset:3159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3159*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe56a317b6b243 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb52e4839f4db4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9e7b04402a756 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee56a317b6b243; op2val:0x3feb52e4839f4db4;
op3val:0x7fe9e7b04402a756; valaddr_reg:x3; val_offset:3162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3162*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64bc90d6330a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x79b6b2db9076f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x66c0545bb6d20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee64bc90d6330a; op2val:0x3fe79b6b2db9076f;
op3val:0x7fe66c0545bb6d20; valaddr_reg:x3; val_offset:3165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3165*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64bc90d6330a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x79b6b2db9076f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x66c0545bb6d20 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee64bc90d6330a; op2val:0x3fe79b6b2db9076f;
op3val:0x7fe66c0545bb6d20; valaddr_reg:x3; val_offset:3168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3168*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64bc90d6330a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x79b6b2db9076f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x66c0545bb6d20 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee64bc90d6330a; op2val:0x3fe79b6b2db9076f;
op3val:0x7fe66c0545bb6d20; valaddr_reg:x3; val_offset:3171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3171*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64bc90d6330a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x79b6b2db9076f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x66c0545bb6d20 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee64bc90d6330a; op2val:0x3fe79b6b2db9076f;
op3val:0x7fe66c0545bb6d20; valaddr_reg:x3; val_offset:3174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3174*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64bc90d6330a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x79b6b2db9076f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x66c0545bb6d20 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee64bc90d6330a; op2val:0x3fe79b6b2db9076f;
op3val:0x7fe66c0545bb6d20; valaddr_reg:x3; val_offset:3177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3177*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3cc01737b632f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee71a5cc2ec78b; op2val:0x3fe3cc01737b632f;
op3val:0x7fe2d590539c6e1b; valaddr_reg:x3; val_offset:3180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3180*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3cc01737b632f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee71a5cc2ec78b; op2val:0x3fe3cc01737b632f;
op3val:0x7fe2d590539c6e1b; valaddr_reg:x3; val_offset:3183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3183*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3cc01737b632f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee71a5cc2ec78b; op2val:0x3fe3cc01737b632f;
op3val:0x7fe2d590539c6e1b; valaddr_reg:x3; val_offset:3186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3186*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3cc01737b632f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee71a5cc2ec78b; op2val:0x3fe3cc01737b632f;
op3val:0x7fe2d590539c6e1b; valaddr_reg:x3; val_offset:3189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3189*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3cc01737b632f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee71a5cc2ec78b; op2val:0x3fe3cc01737b632f;
op3val:0x7fe2d590539c6e1b; valaddr_reg:x3; val_offset:3192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3192*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeeb4761e47455 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc873bef0856d7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9088f38dc9ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeeb4761e47455; op2val:0x3fdc873bef0856d7;
op3val:0x7fdb9088f38dc9ef; valaddr_reg:x3; val_offset:3195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3195*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeeb4761e47455 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc873bef0856d7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9088f38dc9ef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeeb4761e47455; op2val:0x3fdc873bef0856d7;
op3val:0x7fdb9088f38dc9ef; valaddr_reg:x3; val_offset:3198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3198*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeeb4761e47455 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc873bef0856d7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9088f38dc9ef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeeb4761e47455; op2val:0x3fdc873bef0856d7;
op3val:0x7fdb9088f38dc9ef; valaddr_reg:x3; val_offset:3201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3201*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeeb4761e47455 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc873bef0856d7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9088f38dc9ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeeb4761e47455; op2val:0x3fdc873bef0856d7;
op3val:0x7fdb9088f38dc9ef; valaddr_reg:x3; val_offset:3204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3204*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeeb4761e47455 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc873bef0856d7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9088f38dc9ef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeeb4761e47455; op2val:0x3fdc873bef0856d7;
op3val:0x7fdb9088f38dc9ef; valaddr_reg:x3; val_offset:3207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3207*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf133c25543bea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4a0b71feadc19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x40817990df4c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef133c25543bea; op2val:0x3fe4a0b71feadc19;
op3val:0x7fe40817990df4c0; valaddr_reg:x3; val_offset:3210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3210*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf133c25543bea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4a0b71feadc19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x40817990df4c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef133c25543bea; op2val:0x3fe4a0b71feadc19;
op3val:0x7fe40817990df4c0; valaddr_reg:x3; val_offset:3213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3213*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf133c25543bea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4a0b71feadc19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x40817990df4c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef133c25543bea; op2val:0x3fe4a0b71feadc19;
op3val:0x7fe40817990df4c0; valaddr_reg:x3; val_offset:3216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3216*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf133c25543bea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4a0b71feadc19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x40817990df4c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef133c25543bea; op2val:0x3fe4a0b71feadc19;
op3val:0x7fe40817990df4c0; valaddr_reg:x3; val_offset:3219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3219*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf133c25543bea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4a0b71feadc19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x40817990df4c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef133c25543bea; op2val:0x3fe4a0b71feadc19;
op3val:0x7fe40817990df4c0; valaddr_reg:x3; val_offset:3222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3222*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf4c67f9742a6f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2b809bf6aeb86 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x24efb5ae19209 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef4c67f9742a6f; op2val:0x3fd2b809bf6aeb86;
op3val:0x7fd24efb5ae19209; valaddr_reg:x3; val_offset:3225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3225*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf4c67f9742a6f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2b809bf6aeb86 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x24efb5ae19209 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef4c67f9742a6f; op2val:0x3fd2b809bf6aeb86;
op3val:0x7fd24efb5ae19209; valaddr_reg:x3; val_offset:3228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3228*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf4c67f9742a6f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2b809bf6aeb86 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x24efb5ae19209 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef4c67f9742a6f; op2val:0x3fd2b809bf6aeb86;
op3val:0x7fd24efb5ae19209; valaddr_reg:x3; val_offset:3231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3231*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf4c67f9742a6f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2b809bf6aeb86 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x24efb5ae19209 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef4c67f9742a6f; op2val:0x3fd2b809bf6aeb86;
op3val:0x7fd24efb5ae19209; valaddr_reg:x3; val_offset:3234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3234*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf4c67f9742a6f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2b809bf6aeb86 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x24efb5ae19209 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef4c67f9742a6f; op2val:0x3fd2b809bf6aeb86;
op3val:0x7fd24efb5ae19209; valaddr_reg:x3; val_offset:3237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3237*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5610c05b31c8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd2834dff0917f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc8d5e8a69a864 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5610c05b31c8; op2val:0x3fed2834dff0917f;
op3val:0x7fec8d5e8a69a864; valaddr_reg:x3; val_offset:3240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3240*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5610c05b31c8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd2834dff0917f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc8d5e8a69a864 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5610c05b31c8; op2val:0x3fed2834dff0917f;
op3val:0x7fec8d5e8a69a864; valaddr_reg:x3; val_offset:3243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3243*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5610c05b31c8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd2834dff0917f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc8d5e8a69a864 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5610c05b31c8; op2val:0x3fed2834dff0917f;
op3val:0x7fec8d5e8a69a864; valaddr_reg:x3; val_offset:3246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3246*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5610c05b31c8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd2834dff0917f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc8d5e8a69a864 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5610c05b31c8; op2val:0x3fed2834dff0917f;
op3val:0x7fec8d5e8a69a864; valaddr_reg:x3; val_offset:3249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3249*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5610c05b31c8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd2834dff0917f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc8d5e8a69a864 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5610c05b31c8; op2val:0x3fed2834dff0917f;
op3val:0x7fec8d5e8a69a864; valaddr_reg:x3; val_offset:3252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3252*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf642299c3d7ea and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x001214aa3225f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf665a2ce400e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef642299c3d7ea; op2val:0x3fd001214aa3225f;
op3val:0x7fcf665a2ce400e3; valaddr_reg:x3; val_offset:3255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3255*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf642299c3d7ea and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x001214aa3225f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf665a2ce400e3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef642299c3d7ea; op2val:0x3fd001214aa3225f;
op3val:0x7fcf665a2ce400e3; valaddr_reg:x3; val_offset:3258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3258*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf642299c3d7ea and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x001214aa3225f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf665a2ce400e3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef642299c3d7ea; op2val:0x3fd001214aa3225f;
op3val:0x7fcf665a2ce400e3; valaddr_reg:x3; val_offset:3261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3261*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf642299c3d7ea and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x001214aa3225f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf665a2ce400e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef642299c3d7ea; op2val:0x3fd001214aa3225f;
op3val:0x7fcf665a2ce400e3; valaddr_reg:x3; val_offset:3264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3264*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf642299c3d7ea and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x001214aa3225f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf665a2ce400e3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef642299c3d7ea; op2val:0x3fd001214aa3225f;
op3val:0x7fcf665a2ce400e3; valaddr_reg:x3; val_offset:3267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3267*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf76c60cb611bb and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa0af53f41063f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x99b472bc5fdef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef76c60cb611bb; op2val:0x3faa0af53f41063f;
op3val:0x7fa99b472bc5fdef; valaddr_reg:x3; val_offset:3270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3270*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf76c60cb611bb and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa0af53f41063f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x99b472bc5fdef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef76c60cb611bb; op2val:0x3faa0af53f41063f;
op3val:0x7fa99b472bc5fdef; valaddr_reg:x3; val_offset:3273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3273*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf76c60cb611bb and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa0af53f41063f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x99b472bc5fdef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef76c60cb611bb; op2val:0x3faa0af53f41063f;
op3val:0x7fa99b472bc5fdef; valaddr_reg:x3; val_offset:3276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3276*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf76c60cb611bb and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa0af53f41063f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x99b472bc5fdef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef76c60cb611bb; op2val:0x3faa0af53f41063f;
op3val:0x7fa99b472bc5fdef; valaddr_reg:x3; val_offset:3279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3279*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf76c60cb611bb and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa0af53f41063f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x99b472bc5fdef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef76c60cb611bb; op2val:0x3faa0af53f41063f;
op3val:0x7fa99b472bc5fdef; valaddr_reg:x3; val_offset:3282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3282*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfa68e3be688d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbe12f565ed7fe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9341ecae0589 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefa68e3be688d9; op2val:0x3febe12f565ed7fe;
op3val:0x7feb9341ecae0589; valaddr_reg:x3; val_offset:3285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3285*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfa68e3be688d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbe12f565ed7fe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9341ecae0589 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefa68e3be688d9; op2val:0x3febe12f565ed7fe;
op3val:0x7feb9341ecae0589; valaddr_reg:x3; val_offset:3288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3288*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfa68e3be688d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbe12f565ed7fe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9341ecae0589 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefa68e3be688d9; op2val:0x3febe12f565ed7fe;
op3val:0x7feb9341ecae0589; valaddr_reg:x3; val_offset:3291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3291*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfa68e3be688d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbe12f565ed7fe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9341ecae0589 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefa68e3be688d9; op2val:0x3febe12f565ed7fe;
op3val:0x7feb9341ecae0589; valaddr_reg:x3; val_offset:3294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3294*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfa68e3be688d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbe12f565ed7fe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9341ecae0589 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefa68e3be688d9; op2val:0x3febe12f565ed7fe;
op3val:0x7feb9341ecae0589; valaddr_reg:x3; val_offset:3297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3297*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc6fc16f59a72 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a86f00163dab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x87c7ff70142ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefc6fc16f59a72; op2val:0x3fe8a86f00163dab;
op3val:0x7fe87c7ff70142ef; valaddr_reg:x3; val_offset:3300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3300*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc6fc16f59a72 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a86f00163dab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x87c7ff70142ef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefc6fc16f59a72; op2val:0x3fe8a86f00163dab;
op3val:0x7fe87c7ff70142ef; valaddr_reg:x3; val_offset:3303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3303*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc6fc16f59a72 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a86f00163dab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x87c7ff70142ef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefc6fc16f59a72; op2val:0x3fe8a86f00163dab;
op3val:0x7fe87c7ff70142ef; valaddr_reg:x3; val_offset:3306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3306*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc6fc16f59a72 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a86f00163dab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x87c7ff70142ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefc6fc16f59a72; op2val:0x3fe8a86f00163dab;
op3val:0x7fe87c7ff70142ef; valaddr_reg:x3; val_offset:3309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3309*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc6fc16f59a72 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a86f00163dab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x87c7ff70142ef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefc6fc16f59a72; op2val:0x3fe8a86f00163dab;
op3val:0x7fe87c7ff70142ef; valaddr_reg:x3; val_offset:3312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3312*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfcfca53c51fe2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf353c5b2ee007 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf063828829338 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefcfca53c51fe2; op2val:0x3fef353c5b2ee007;
op3val:0x7fef063828829338; valaddr_reg:x3; val_offset:3315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3315*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfcfca53c51fe2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf353c5b2ee007 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf063828829338 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefcfca53c51fe2; op2val:0x3fef353c5b2ee007;
op3val:0x7fef063828829338; valaddr_reg:x3; val_offset:3318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3318*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfcfca53c51fe2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf353c5b2ee007 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf063828829338 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefcfca53c51fe2; op2val:0x3fef353c5b2ee007;
op3val:0x7fef063828829338; valaddr_reg:x3; val_offset:3321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3321*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfcfca53c51fe2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf353c5b2ee007 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf063828829338 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefcfca53c51fe2; op2val:0x3fef353c5b2ee007;
op3val:0x7fef063828829338; valaddr_reg:x3; val_offset:3324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3324*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfcfca53c51fe2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf353c5b2ee007 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf063828829338 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefcfca53c51fe2; op2val:0x3fef353c5b2ee007;
op3val:0x7fef063828829338; valaddr_reg:x3; val_offset:3327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3327*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd23aa95094cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb15f6ba660af1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaef38ced97dfd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefd23aa95094cb; op2val:0x3feb15f6ba660af1;
op3val:0x7feaef38ced97dfd; valaddr_reg:x3; val_offset:3330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3330*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd23aa95094cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb15f6ba660af1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaef38ced97dfd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefd23aa95094cb; op2val:0x3feb15f6ba660af1;
op3val:0x7feaef38ced97dfd; valaddr_reg:x3; val_offset:3333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3333*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd23aa95094cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb15f6ba660af1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaef38ced97dfd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefd23aa95094cb; op2val:0x3feb15f6ba660af1;
op3val:0x7feaef38ced97dfd; valaddr_reg:x3; val_offset:3336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3336*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd23aa95094cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb15f6ba660af1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaef38ced97dfd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefd23aa95094cb; op2val:0x3feb15f6ba660af1;
op3val:0x7feaef38ced97dfd; valaddr_reg:x3; val_offset:3339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3339*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd23aa95094cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb15f6ba660af1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaef38ced97dfd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefd23aa95094cb; op2val:0x3feb15f6ba660af1;
op3val:0x7feaef38ced97dfd; valaddr_reg:x3; val_offset:3342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3342*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd7f793e002b0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6c604e008a06d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6a9875b7c4913 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefd7f793e002b0; op2val:0x3fe6c604e008a06d;
op3val:0x7fe6a9875b7c4913; valaddr_reg:x3; val_offset:3345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3345*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd7f793e002b0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6c604e008a06d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6a9875b7c4913 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefd7f793e002b0; op2val:0x3fe6c604e008a06d;
op3val:0x7fe6a9875b7c4913; valaddr_reg:x3; val_offset:3348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3348*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd7f793e002b0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6c604e008a06d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6a9875b7c4913 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefd7f793e002b0; op2val:0x3fe6c604e008a06d;
op3val:0x7fe6a9875b7c4913; valaddr_reg:x3; val_offset:3351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3351*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd7f793e002b0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6c604e008a06d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6a9875b7c4913 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefd7f793e002b0; op2val:0x3fe6c604e008a06d;
op3val:0x7fe6a9875b7c4913; valaddr_reg:x3; val_offset:3354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3354*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd7f793e002b0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6c604e008a06d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6a9875b7c4913 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefd7f793e002b0; op2val:0x3fe6c604e008a06d;
op3val:0x7fe6a9875b7c4913; valaddr_reg:x3; val_offset:3357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3357*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xd9a84a89337ff and fs2 == 0 and fe2 == 0x409 and fm2 == 0x6ed5a71e5433a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x535cf46588f5e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9a84a89337ff; op2val:0x4096ed5a71e5433a;
op3val:0x7fe535cf46588f5e; valaddr_reg:x3; val_offset:3360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3360*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xd9a84a89337ff and fs2 == 0 and fe2 == 0x409 and fm2 == 0x6ed5a71e5433a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x535cf46588f5e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9a84a89337ff; op2val:0x4096ed5a71e5433a;
op3val:0x7fe535cf46588f5e; valaddr_reg:x3; val_offset:3363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3363*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xd9a84a89337ff and fs2 == 0 and fe2 == 0x409 and fm2 == 0x6ed5a71e5433a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x535cf46588f5e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9a84a89337ff; op2val:0x4096ed5a71e5433a;
op3val:0x7fe535cf46588f5e; valaddr_reg:x3; val_offset:3366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3366*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xd9a84a89337ff and fs2 == 0 and fe2 == 0x409 and fm2 == 0x6ed5a71e5433a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x535cf46588f5e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9a84a89337ff; op2val:0x4096ed5a71e5433a;
op3val:0x7fe535cf46588f5e; valaddr_reg:x3; val_offset:3369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3369*FLEN/8, x4, x1, x2)

inst_1124:
// fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xd9a84a89337ff and fs2 == 0 and fe2 == 0x409 and fm2 == 0x6ed5a71e5433a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x535cf46588f5e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9a84a89337ff; op2val:0x4096ed5a71e5433a;
op3val:0x7fe535cf46588f5e; valaddr_reg:x3; val_offset:3372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3372*FLEN/8, x4, x1, x2)

inst_1125:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x91fb87d28a9ff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x1fb84d9a794fa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc3ca63e9e063f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f591fb87d28a9ff; op2val:0x4081fb84d9a794fa;
op3val:0x7fec3ca63e9e063f; valaddr_reg:x3; val_offset:3375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3375*FLEN/8, x4, x1, x2)

inst_1126:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x91fb87d28a9ff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x1fb84d9a794fa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc3ca63e9e063f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f591fb87d28a9ff; op2val:0x4081fb84d9a794fa;
op3val:0x7fec3ca63e9e063f; valaddr_reg:x3; val_offset:3378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3378*FLEN/8, x4, x1, x2)

inst_1127:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x91fb87d28a9ff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x1fb84d9a794fa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc3ca63e9e063f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f591fb87d28a9ff; op2val:0x4081fb84d9a794fa;
op3val:0x7fec3ca63e9e063f; valaddr_reg:x3; val_offset:3381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3381*FLEN/8, x4, x1, x2)

inst_1128:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x91fb87d28a9ff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x1fb84d9a794fa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc3ca63e9e063f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f591fb87d28a9ff; op2val:0x4081fb84d9a794fa;
op3val:0x7fec3ca63e9e063f; valaddr_reg:x3; val_offset:3384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3384*FLEN/8, x4, x1, x2)

inst_1129:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x91fb87d28a9ff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x1fb84d9a794fa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc3ca63e9e063f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f591fb87d28a9ff; op2val:0x4081fb84d9a794fa;
op3val:0x7fec3ca63e9e063f; valaddr_reg:x3; val_offset:3387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3387*FLEN/8, x4, x1, x2)

inst_1130:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x3cc38f90f797f and fs2 == 0 and fe2 == 0x403 and fm2 == 0xb8073605348df and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x103c8578e3d2d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f93cc38f90f797f; op2val:0x403b8073605348df;
op3val:0x7fe103c8578e3d2d; valaddr_reg:x3; val_offset:3390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3390*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(9215831376838299486,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(4654168237647676218,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(4654168237647676218,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(4648272838428955898,64,FLEN)
NAN_BOXED(9217809222033344063,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(9217809222033344063,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(4648272838428955898,64,FLEN)
NAN_BOXED(4648272838428955898,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(4648272838428955898,64,FLEN)
NAN_BOXED(9217809222033344063,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(4648272838428955898,64,FLEN)
NAN_BOXED(9217809222033344063,64,FLEN)
NAN_BOXED(9192915809462090111,64,FLEN)
NAN_BOXED(4628434275078981855,64,FLEN)
NAN_BOXED(9214650471574027565,64,FLEN)
NAN_BOXED(9192915809462090111,64,FLEN)
NAN_BOXED(4628434275078981855,64,FLEN)
NAN_BOXED(4628434275078981855,64,FLEN)
NAN_BOXED(9192915809462090111,64,FLEN)
NAN_BOXED(4628434275078981855,64,FLEN)
NAN_BOXED(9214650471574027565,64,FLEN)
NAN_BOXED(9192915809462090111,64,FLEN)
NAN_BOXED(4628434275078981855,64,FLEN)
NAN_BOXED(9214650471574027565,64,FLEN)
NAN_BOXED(9192915809462090111,64,FLEN)
NAN_BOXED(4628434275078981855,64,FLEN)
NAN_BOXED(9214650471574027565,64,FLEN)
NAN_BOXED(9195417553640387807,64,FLEN)
NAN_BOXED(4629825451682072131,64,FLEN)
NAN_BOXED(9218159721297795018,64,FLEN)
NAN_BOXED(9195417553640387807,64,FLEN)
NAN_BOXED(4629825451682072131,64,FLEN)
NAN_BOXED(9218159721297795018,64,FLEN)
NAN_BOXED(9195417553640387807,64,FLEN)
NAN_BOXED(4629825451682072131,64,FLEN)
NAN_BOXED(9218159721297795018,64,FLEN)
NAN_BOXED(9195417553640387807,64,FLEN)
NAN_BOXED(4629825451682072131,64,FLEN)
NAN_BOXED(9218159721297795018,64,FLEN)
NAN_BOXED(9195417553640387807,64,FLEN)
NAN_BOXED(4629825451682072131,64,FLEN)
NAN_BOXED(9218159721297795018,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4623347347278346272,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4623347347278346272,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4623347347278346272,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4623347347278346272,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4623347347278346272,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9195954362531548511,64,FLEN)
NAN_BOXED(4629877583792836695,64,FLEN)
NAN_BOXED(9218811113146546752,64,FLEN)
NAN_BOXED(9195954362531548511,64,FLEN)
NAN_BOXED(4629877583792836695,64,FLEN)
NAN_BOXED(9218811113146546752,64,FLEN)
NAN_BOXED(9195954362531548511,64,FLEN)
NAN_BOXED(4629877583792836695,64,FLEN)
NAN_BOXED(9218811113146546752,64,FLEN)
NAN_BOXED(9195954362531548511,64,FLEN)
NAN_BOXED(4629877583792836695,64,FLEN)
NAN_BOXED(9218811113146546752,64,FLEN)
NAN_BOXED(9195954362531548511,64,FLEN)
NAN_BOXED(4629877583792836695,64,FLEN)
NAN_BOXED(9218811113146546752,64,FLEN)
NAN_BOXED(9196022622726600799,64,FLEN)
NAN_BOXED(4627924110654697294,64,FLEN)
NAN_BOXED(9216828963119657415,64,FLEN)
NAN_BOXED(9196022622726600799,64,FLEN)
NAN_BOXED(4627924110654697294,64,FLEN)
NAN_BOXED(9216828963119657415,64,FLEN)
NAN_BOXED(9196022622726600799,64,FLEN)
NAN_BOXED(4627924110654697294,64,FLEN)
NAN_BOXED(9216828963119657415,64,FLEN)
NAN_BOXED(9196022622726600799,64,FLEN)
NAN_BOXED(4627924110654697294,64,FLEN)
NAN_BOXED(9216828963119657415,64,FLEN)
NAN_BOXED(9196022622726600799,64,FLEN)
NAN_BOXED(4627924110654697294,64,FLEN)
NAN_BOXED(9216828963119657415,64,FLEN)
NAN_BOXED(9196127266546144831,64,FLEN)
NAN_BOXED(4625546046877673053,64,FLEN)
NAN_BOXED(9214593827989689475,64,FLEN)
NAN_BOXED(9196127266546144831,64,FLEN)
NAN_BOXED(4625546046877673053,64,FLEN)
NAN_BOXED(9214593827989689475,64,FLEN)
NAN_BOXED(9196127266546144831,64,FLEN)
NAN_BOXED(4625546046877673053,64,FLEN)
NAN_BOXED(9214593827989689475,64,FLEN)
NAN_BOXED(9196127266546144831,64,FLEN)
NAN_BOXED(4625546046877673053,64,FLEN)
NAN_BOXED(9214593827989689475,64,FLEN)
NAN_BOXED(9196127266546144831,64,FLEN)
NAN_BOXED(4625546046877673053,64,FLEN)
NAN_BOXED(9214593827989689475,64,FLEN)
NAN_BOXED(9196484595679561407,64,FLEN)
NAN_BOXED(4625440512294325984,64,FLEN)
NAN_BOXED(9214749948542070509,64,FLEN)
NAN_BOXED(9196484595679561407,64,FLEN)
NAN_BOXED(4625440512294325984,64,FLEN)
NAN_BOXED(9214749948542070509,64,FLEN)
NAN_BOXED(9196484595679561407,64,FLEN)
NAN_BOXED(4625440512294325984,64,FLEN)
NAN_BOXED(9214749948542070509,64,FLEN)
NAN_BOXED(9196484595679561407,64,FLEN)
NAN_BOXED(4625440512294325984,64,FLEN)
NAN_BOXED(9214749948542070509,64,FLEN)
NAN_BOXED(9196484595679561407,64,FLEN)
NAN_BOXED(4625440512294325984,64,FLEN)
NAN_BOXED(9214749948542070509,64,FLEN)
NAN_BOXED(9196561243321434687,64,FLEN)
NAN_BOXED(4617650382662304250,64,FLEN)
NAN_BOXED(9207097582568984835,64,FLEN)
NAN_BOXED(9196561243321434687,64,FLEN)
NAN_BOXED(4617650382662304250,64,FLEN)
NAN_BOXED(9207097582568984835,64,FLEN)
NAN_BOXED(9196561243321434687,64,FLEN)
NAN_BOXED(4617650382662304250,64,FLEN)
NAN_BOXED(9207097582568984835,64,FLEN)
NAN_BOXED(9196561243321434687,64,FLEN)
NAN_BOXED(4617650382662304250,64,FLEN)
NAN_BOXED(9207097582568984835,64,FLEN)
NAN_BOXED(9196561243321434687,64,FLEN)
NAN_BOXED(4617650382662304250,64,FLEN)
NAN_BOXED(9207097582568984835,64,FLEN)
NAN_BOXED(9196565341389181919,64,FLEN)
NAN_BOXED(4622502209215260470,64,FLEN)
NAN_BOXED(9211971453074261641,64,FLEN)
NAN_BOXED(9196565341389181919,64,FLEN)
NAN_BOXED(4622502209215260470,64,FLEN)
NAN_BOXED(9211971453074261641,64,FLEN)
NAN_BOXED(9196565341389181919,64,FLEN)
NAN_BOXED(4622502209215260470,64,FLEN)
NAN_BOXED(9211971453074261641,64,FLEN)
NAN_BOXED(9196565341389181919,64,FLEN)
NAN_BOXED(4622502209215260470,64,FLEN)
NAN_BOXED(9211971453074261641,64,FLEN)
NAN_BOXED(9196565341389181919,64,FLEN)
NAN_BOXED(4622502209215260470,64,FLEN)
NAN_BOXED(9211971453074261641,64,FLEN)
NAN_BOXED(9197592919949221231,64,FLEN)
NAN_BOXED(4626051183447456939,64,FLEN)
NAN_BOXED(9216697392399427078,64,FLEN)
NAN_BOXED(9197592919949221231,64,FLEN)
NAN_BOXED(4626051183447456939,64,FLEN)
NAN_BOXED(9216697392399427078,64,FLEN)
NAN_BOXED(9197592919949221231,64,FLEN)
NAN_BOXED(4626051183447456939,64,FLEN)
NAN_BOXED(9216697392399427078,64,FLEN)
NAN_BOXED(9197592919949221231,64,FLEN)
NAN_BOXED(4626051183447456939,64,FLEN)
NAN_BOXED(9216697392399427078,64,FLEN)
NAN_BOXED(9197592919949221231,64,FLEN)
NAN_BOXED(4626051183447456939,64,FLEN)
NAN_BOXED(9216697392399427078,64,FLEN)
NAN_BOXED(9199603427118465471,64,FLEN)
NAN_BOXED(4620532383676849589,64,FLEN)
NAN_BOXED(9212975723118091865,64,FLEN)
NAN_BOXED(9199603427118465471,64,FLEN)
NAN_BOXED(4620532383676849589,64,FLEN)
NAN_BOXED(9212975723118091865,64,FLEN)
NAN_BOXED(9199603427118465471,64,FLEN)
NAN_BOXED(4620532383676849589,64,FLEN)
NAN_BOXED(9212975723118091865,64,FLEN)
NAN_BOXED(9199603427118465471,64,FLEN)
NAN_BOXED(4620532383676849589,64,FLEN)
NAN_BOXED(9212975723118091865,64,FLEN)
NAN_BOXED(9199603427118465471,64,FLEN)
NAN_BOXED(4620532383676849589,64,FLEN)
NAN_BOXED(9212975723118091865,64,FLEN)
NAN_BOXED(9200938356888505575,64,FLEN)
NAN_BOXED(4623264705140262911,64,FLEN)
NAN_BOXED(9217068787632358210,64,FLEN)
NAN_BOXED(9200938356888505575,64,FLEN)
NAN_BOXED(4623264705140262911,64,FLEN)
NAN_BOXED(9217068787632358210,64,FLEN)
NAN_BOXED(9200938356888505575,64,FLEN)
NAN_BOXED(4623264705140262911,64,FLEN)
NAN_BOXED(9217068787632358210,64,FLEN)
NAN_BOXED(9200938356888505575,64,FLEN)
NAN_BOXED(4623264705140262911,64,FLEN)
NAN_BOXED(9217068787632358210,64,FLEN)
NAN_BOXED(9200938356888505575,64,FLEN)
NAN_BOXED(4623264705140262911,64,FLEN)
NAN_BOXED(9217068787632358210,64,FLEN)
NAN_BOXED(9201158359302981343,64,FLEN)
NAN_BOXED(4611554636846242089,64,FLEN)
NAN_BOXED(9205591829232799151,64,FLEN)
NAN_BOXED(9201158359302981343,64,FLEN)
NAN_BOXED(4611554636846242089,64,FLEN)
NAN_BOXED(9205591829232799151,64,FLEN)
NAN_BOXED(9201158359302981343,64,FLEN)
NAN_BOXED(4611554636846242089,64,FLEN)
NAN_BOXED(9205591829232799151,64,FLEN)
NAN_BOXED(9201158359302981343,64,FLEN)
NAN_BOXED(4611554636846242089,64,FLEN)
NAN_BOXED(9205591829232799151,64,FLEN)
NAN_BOXED(9201158359302981343,64,FLEN)
NAN_BOXED(4611554636846242089,64,FLEN)
NAN_BOXED(9205591829232799151,64,FLEN)
NAN_BOXED(9201256678203629263,64,FLEN)
NAN_BOXED(4585622379600696682,64,FLEN)
NAN_BOXED(9179782284293821183,64,FLEN)
NAN_BOXED(9201256678203629263,64,FLEN)
NAN_BOXED(4585622379600696682,64,FLEN)
NAN_BOXED(9179782284293821183,64,FLEN)
NAN_BOXED(9201256678203629263,64,FLEN)
NAN_BOXED(4585622379600696682,64,FLEN)
NAN_BOXED(9179782284293821183,64,FLEN)
NAN_BOXED(9201256678203629263,64,FLEN)
NAN_BOXED(4585622379600696682,64,FLEN)
NAN_BOXED(9179782284293821183,64,FLEN)
NAN_BOXED(9201256678203629263,64,FLEN)
NAN_BOXED(4585622379600696682,64,FLEN)
NAN_BOXED(9179782284293821183,64,FLEN)
NAN_BOXED(9201421688159181055,64,FLEN)
NAN_BOXED(4610426165730632783,64,FLEN)
NAN_BOXED(9205074288292810919,64,FLEN)
NAN_BOXED(9201421688159181055,64,FLEN)
NAN_BOXED(4610426165730632783,64,FLEN)
NAN_BOXED(9205074288292810919,64,FLEN)
NAN_BOXED(9201421688159181055,64,FLEN)
NAN_BOXED(4610426165730632783,64,FLEN)
NAN_BOXED(9205074288292810919,64,FLEN)
NAN_BOXED(9201421688159181055,64,FLEN)
NAN_BOXED(4610426165730632783,64,FLEN)
NAN_BOXED(9205074288292810919,64,FLEN)
NAN_BOXED(9201421688159181055,64,FLEN)
NAN_BOXED(4610426165730632783,64,FLEN)
NAN_BOXED(9205074288292810919,64,FLEN)
NAN_BOXED(9201680616099577271,64,FLEN)
NAN_BOXED(4619604903519350849,64,FLEN)
NAN_BOXED(9214547384915852047,64,FLEN)
NAN_BOXED(9201680616099577271,64,FLEN)
NAN_BOXED(4619604903519350849,64,FLEN)
NAN_BOXED(9214547384915852047,64,FLEN)
NAN_BOXED(9201680616099577271,64,FLEN)
NAN_BOXED(4619604903519350849,64,FLEN)
NAN_BOXED(9214547384915852047,64,FLEN)
NAN_BOXED(9201680616099577271,64,FLEN)
NAN_BOXED(4619604903519350849,64,FLEN)
NAN_BOXED(9214547384915852047,64,FLEN)
NAN_BOXED(9201680616099577271,64,FLEN)
NAN_BOXED(4619604903519350849,64,FLEN)
NAN_BOXED(9214547384915852047,64,FLEN)
NAN_BOXED(9202370388282532943,64,FLEN)
NAN_BOXED(4620016319978295471,64,FLEN)
NAN_BOXED(9215428783518405521,64,FLEN)
NAN_BOXED(9202370388282532943,64,FLEN)
NAN_BOXED(4620016319978295471,64,FLEN)
NAN_BOXED(9215428783518405521,64,FLEN)
NAN_BOXED(9202370388282532943,64,FLEN)
NAN_BOXED(4620016319978295471,64,FLEN)
NAN_BOXED(9215428783518405521,64,FLEN)
NAN_BOXED(9202370388282532943,64,FLEN)
NAN_BOXED(4620016319978295471,64,FLEN)
NAN_BOXED(9215428783518405521,64,FLEN)
NAN_BOXED(9202370388282532943,64,FLEN)
NAN_BOXED(4620016319978295471,64,FLEN)
NAN_BOXED(9215428783518405521,64,FLEN)
NAN_BOXED(9202521698417280615,64,FLEN)
NAN_BOXED(4621555778393581565,64,FLEN)
NAN_BOXED(9217214459790700241,64,FLEN)
NAN_BOXED(9202521698417280615,64,FLEN)
NAN_BOXED(4621555778393581565,64,FLEN)
NAN_BOXED(9217214459790700241,64,FLEN)
NAN_BOXED(9202521698417280615,64,FLEN)
NAN_BOXED(4621555778393581565,64,FLEN)
NAN_BOXED(9217214459790700241,64,FLEN)
NAN_BOXED(9202521698417280615,64,FLEN)
NAN_BOXED(4621555778393581565,64,FLEN)
NAN_BOXED(9217214459790700241,64,FLEN)
NAN_BOXED(9202521698417280615,64,FLEN)
NAN_BOXED(4621555778393581565,64,FLEN)
NAN_BOXED(9217214459790700241,64,FLEN)
NAN_BOXED(9202595613643152303,64,FLEN)
NAN_BOXED(4622555158517152953,64,FLEN)
NAN_BOXED(9218688379503560070,64,FLEN)
NAN_BOXED(9202595613643152303,64,FLEN)
NAN_BOXED(4622555158517152953,64,FLEN)
NAN_BOXED(9218688379503560070,64,FLEN)
NAN_BOXED(9202595613643152303,64,FLEN)
NAN_BOXED(4622555158517152953,64,FLEN)
NAN_BOXED(9218688379503560070,64,FLEN)
NAN_BOXED(9202595613643152303,64,FLEN)
NAN_BOXED(4622555158517152953,64,FLEN)
NAN_BOXED(9218688379503560070,64,FLEN)
NAN_BOXED(9202595613643152303,64,FLEN)
NAN_BOXED(4622555158517152953,64,FLEN)
NAN_BOXED(9218688379503560070,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(4621026909003671686,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(4621026909003671686,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(4621026909003671686,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(4621026909003671686,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(4621026909003671686,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203100714412757567,64,FLEN)
NAN_BOXED(4618841534693857105,64,FLEN)
NAN_BOXED(9215223804460327810,64,FLEN)
NAN_BOXED(9203100714412757567,64,FLEN)
NAN_BOXED(4618841534693857105,64,FLEN)
NAN_BOXED(9215223804460327810,64,FLEN)
NAN_BOXED(9203100714412757567,64,FLEN)
NAN_BOXED(4618841534693857105,64,FLEN)
NAN_BOXED(9215223804460327810,64,FLEN)
NAN_BOXED(9203100714412757567,64,FLEN)
NAN_BOXED(4618841534693857105,64,FLEN)
NAN_BOXED(9215223804460327810,64,FLEN)
NAN_BOXED(9203100714412757567,64,FLEN)
NAN_BOXED(4618841534693857105,64,FLEN)
NAN_BOXED(9215223804460327810,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(4611916559173742482,64,FLEN)
NAN_BOXED(9207957550009828015,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(4611916559173742482,64,FLEN)
NAN_BOXED(9207957550009828015,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(4611916559173742482,64,FLEN)
NAN_BOXED(9207957550009828015,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(4611916559173742482,64,FLEN)
NAN_BOXED(9207957550009828015,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(4611916559173742482,64,FLEN)
NAN_BOXED(9207957550009828015,64,FLEN)
NAN_BOXED(9203566738813170623,64,FLEN)
NAN_BOXED(4615448290484040101,64,FLEN)
NAN_BOXED(9211980008502055995,64,FLEN)
NAN_BOXED(9203566738813170623,64,FLEN)
NAN_BOXED(4615448290484040101,64,FLEN)
NAN_BOXED(9211980008502055995,64,FLEN)
NAN_BOXED(9203566738813170623,64,FLEN)
NAN_BOXED(4615448290484040101,64,FLEN)
NAN_BOXED(9211980008502055995,64,FLEN)
NAN_BOXED(9203566738813170623,64,FLEN)
NAN_BOXED(4615448290484040101,64,FLEN)
NAN_BOXED(9211980008502055995,64,FLEN)
NAN_BOXED(9203566738813170623,64,FLEN)
NAN_BOXED(4615448290484040101,64,FLEN)
NAN_BOXED(9211980008502055995,64,FLEN)
NAN_BOXED(9203567368937047519,64,FLEN)
NAN_BOXED(4615320687680714558,64,FLEN)
NAN_BOXED(9211878346272676195,64,FLEN)
NAN_BOXED(9203567368937047519,64,FLEN)
NAN_BOXED(4615320687680714558,64,FLEN)
NAN_BOXED(9211878346272676195,64,FLEN)
NAN_BOXED(9203567368937047519,64,FLEN)
NAN_BOXED(4615320687680714558,64,FLEN)
NAN_BOXED(9211878346272676195,64,FLEN)
NAN_BOXED(9203567368937047519,64,FLEN)
NAN_BOXED(4615320687680714558,64,FLEN)
NAN_BOXED(9211878346272676195,64,FLEN)
NAN_BOXED(9203567368937047519,64,FLEN)
NAN_BOXED(4615320687680714558,64,FLEN)
NAN_BOXED(9211878346272676195,64,FLEN)
NAN_BOXED(9203695292050421007,64,FLEN)
NAN_BOXED(4620804785991180669,64,FLEN)
NAN_BOXED(9217388046011306861,64,FLEN)
NAN_BOXED(9203695292050421007,64,FLEN)
NAN_BOXED(4620804785991180669,64,FLEN)
NAN_BOXED(9217388046011306861,64,FLEN)
NAN_BOXED(9203695292050421007,64,FLEN)
NAN_BOXED(4620804785991180669,64,FLEN)
NAN_BOXED(9217388046011306861,64,FLEN)
NAN_BOXED(9203695292050421007,64,FLEN)
NAN_BOXED(4620804785991180669,64,FLEN)
NAN_BOXED(9217388046011306861,64,FLEN)
NAN_BOXED(9203695292050421007,64,FLEN)
NAN_BOXED(4620804785991180669,64,FLEN)
NAN_BOXED(9217388046011306861,64,FLEN)
NAN_BOXED(9203947576983998455,64,FLEN)
NAN_BOXED(4618580045440060948,64,FLEN)
NAN_BOXED(9215676017059387453,64,FLEN)
NAN_BOXED(9203947576983998455,64,FLEN)
NAN_BOXED(4618580045440060948,64,FLEN)
NAN_BOXED(9215676017059387453,64,FLEN)
NAN_BOXED(9203947576983998455,64,FLEN)
NAN_BOXED(4618580045440060948,64,FLEN)
NAN_BOXED(9215676017059387453,64,FLEN)
NAN_BOXED(9203947576983998455,64,FLEN)
NAN_BOXED(4618580045440060948,64,FLEN)
NAN_BOXED(9215676017059387453,64,FLEN)
NAN_BOXED(9203947576983998455,64,FLEN)
NAN_BOXED(4618580045440060948,64,FLEN)
NAN_BOXED(9215676017059387453,64,FLEN)
NAN_BOXED(9204234152526267767,64,FLEN)
NAN_BOXED(4617892536248086994,64,FLEN)
NAN_BOXED(9215293604521710605,64,FLEN)
NAN_BOXED(9204234152526267767,64,FLEN)
NAN_BOXED(4617892536248086994,64,FLEN)
NAN_BOXED(9215293604521710605,64,FLEN)
NAN_BOXED(9204234152526267767,64,FLEN)
NAN_BOXED(4617892536248086994,64,FLEN)
NAN_BOXED(9215293604521710605,64,FLEN)
NAN_BOXED(9204234152526267767,64,FLEN)
NAN_BOXED(4617892536248086994,64,FLEN)
NAN_BOXED(9215293604521710605,64,FLEN)
NAN_BOXED(9204234152526267767,64,FLEN)
NAN_BOXED(4617892536248086994,64,FLEN)
NAN_BOXED(9215293604521710605,64,FLEN)
NAN_BOXED(9204313667477116959,64,FLEN)
NAN_BOXED(4617942726418545598,64,FLEN)
NAN_BOXED(9215392768171177984,64,FLEN)
NAN_BOXED(9204313667477116959,64,FLEN)
NAN_BOXED(4617942726418545598,64,FLEN)
NAN_BOXED(9215392768171177984,64,FLEN)
NAN_BOXED(9204313667477116959,64,FLEN)
NAN_BOXED(4617942726418545598,64,FLEN)
NAN_BOXED(9215392768171177984,64,FLEN)
NAN_BOXED(9204313667477116959,64,FLEN)
NAN_BOXED(4617942726418545598,64,FLEN)
NAN_BOXED(9215392768171177984,64,FLEN)
NAN_BOXED(9204313667477116959,64,FLEN)
NAN_BOXED(4617942726418545598,64,FLEN)
NAN_BOXED(9215392768171177984,64,FLEN)
NAN_BOXED(9204431097227885351,64,FLEN)
NAN_BOXED(4618899815546109717,64,FLEN)
NAN_BOXED(9216332975384022556,64,FLEN)
NAN_BOXED(9204431097227885351,64,FLEN)
NAN_BOXED(4618899815546109717,64,FLEN)
NAN_BOXED(9216332975384022556,64,FLEN)
NAN_BOXED(9204431097227885351,64,FLEN)
NAN_BOXED(4618899815546109717,64,FLEN)
NAN_BOXED(9216332975384022556,64,FLEN)
NAN_BOXED(9204431097227885351,64,FLEN)
NAN_BOXED(4618899815546109717,64,FLEN)
NAN_BOXED(9216332975384022556,64,FLEN)
NAN_BOXED(9204431097227885351,64,FLEN)
NAN_BOXED(4618899815546109717,64,FLEN)
NAN_BOXED(9216332975384022556,64,FLEN)
NAN_BOXED(9204607683180882023,64,FLEN)
NAN_BOXED(4618672225001449812,64,FLEN)
NAN_BOXED(9216265760767819300,64,FLEN)
NAN_BOXED(9204607683180882023,64,FLEN)
NAN_BOXED(4618672225001449812,64,FLEN)
NAN_BOXED(9216265760767819300,64,FLEN)
NAN_BOXED(9204607683180882023,64,FLEN)
NAN_BOXED(4618672225001449812,64,FLEN)
NAN_BOXED(9216265760767819300,64,FLEN)
NAN_BOXED(9204607683180882023,64,FLEN)
NAN_BOXED(4618672225001449812,64,FLEN)
NAN_BOXED(9216265760767819300,64,FLEN)
NAN_BOXED(9204607683180882023,64,FLEN)
NAN_BOXED(4618672225001449812,64,FLEN)
NAN_BOXED(9216265760767819300,64,FLEN)
NAN_BOXED(9204768523777634671,64,FLEN)
NAN_BOXED(4618073213803900829,64,FLEN)
NAN_BOXED(9215830679757148248,64,FLEN)
NAN_BOXED(9204768523777634671,64,FLEN)
NAN_BOXED(4618073213803900829,64,FLEN)
NAN_BOXED(9215830679757148248,64,FLEN)
NAN_BOXED(9204768523777634671,64,FLEN)
NAN_BOXED(4618073213803900829,64,FLEN)
NAN_BOXED(9215830679757148248,64,FLEN)
NAN_BOXED(9204768523777634671,64,FLEN)
NAN_BOXED(4618073213803900829,64,FLEN)
NAN_BOXED(9215830679757148248,64,FLEN)
NAN_BOXED(9204768523777634671,64,FLEN)
NAN_BOXED(4618073213803900829,64,FLEN)
NAN_BOXED(9215830679757148248,64,FLEN)
NAN_BOXED(9204789778828850287,64,FLEN)
NAN_BOXED(4620748576024376617,64,FLEN)
NAN_BOXED(9218404314254223334,64,FLEN)
NAN_BOXED(9204789778828850287,64,FLEN)
NAN_BOXED(4620748576024376617,64,FLEN)
NAN_BOXED(9218404314254223334,64,FLEN)
NAN_BOXED(9204789778828850287,64,FLEN)
NAN_BOXED(4620748576024376617,64,FLEN)
NAN_BOXED(9218404314254223334,64,FLEN)
NAN_BOXED(9204789778828850287,64,FLEN)
NAN_BOXED(4620748576024376617,64,FLEN)
NAN_BOXED(9218404314254223334,64,FLEN)
NAN_BOXED(9204789778828850287,64,FLEN)
NAN_BOXED(4620748576024376617,64,FLEN)
NAN_BOXED(9218404314254223334,64,FLEN)
NAN_BOXED(9205001558153522111,64,FLEN)
NAN_BOXED(4606594627476866130,64,FLEN)
NAN_BOXED(9204437003892319839,64,FLEN)
NAN_BOXED(9205001558153522111,64,FLEN)
NAN_BOXED(4606594627476866130,64,FLEN)
NAN_BOXED(9204437003892319839,64,FLEN)
NAN_BOXED(9205001558153522111,64,FLEN)
NAN_BOXED(4606594627476866130,64,FLEN)
NAN_BOXED(9204437003892319839,64,FLEN)
NAN_BOXED(9205001558153522111,64,FLEN)
NAN_BOXED(4606594627476866130,64,FLEN)
NAN_BOXED(9204437003892319839,64,FLEN)
NAN_BOXED(9205001558153522111,64,FLEN)
NAN_BOXED(4606594627476866130,64,FLEN)
NAN_BOXED(9204437003892319839,64,FLEN)
NAN_BOXED(9205249214178218391,64,FLEN)
NAN_BOXED(4617059687396912982,64,FLEN)
NAN_BOXED(9215170221398361422,64,FLEN)
NAN_BOXED(9205249214178218391,64,FLEN)
NAN_BOXED(4617059687396912982,64,FLEN)
NAN_BOXED(9215170221398361422,64,FLEN)
NAN_BOXED(9205249214178218391,64,FLEN)
NAN_BOXED(4617059687396912982,64,FLEN)
NAN_BOXED(9215170221398361422,64,FLEN)
NAN_BOXED(9205249214178218391,64,FLEN)
NAN_BOXED(4617059687396912982,64,FLEN)
NAN_BOXED(9215170221398361422,64,FLEN)
NAN_BOXED(9205249214178218391,64,FLEN)
NAN_BOXED(4617059687396912982,64,FLEN)
NAN_BOXED(9215170221398361422,64,FLEN)
NAN_BOXED(9205423741295399807,64,FLEN)
NAN_BOXED(4620561846515933221,64,FLEN)
NAN_BOXED(9218867343721266412,64,FLEN)
NAN_BOXED(9205423741295399807,64,FLEN)
NAN_BOXED(4620561846515933221,64,FLEN)
NAN_BOXED(9218867343721266412,64,FLEN)
NAN_BOXED(9205423741295399807,64,FLEN)
NAN_BOXED(4620561846515933221,64,FLEN)
NAN_BOXED(9218867343721266412,64,FLEN)
NAN_BOXED(9205423741295399807,64,FLEN)
NAN_BOXED(4620561846515933221,64,FLEN)
NAN_BOXED(9218867343721266412,64,FLEN)
NAN_BOXED(9205423741295399807,64,FLEN)
NAN_BOXED(4620561846515933221,64,FLEN)
NAN_BOXED(9218867343721266412,64,FLEN)
NAN_BOXED(9205429934353132059,64,FLEN)
NAN_BOXED(4619067488703547590,64,FLEN)
NAN_BOXED(9217361202537192735,64,FLEN)
NAN_BOXED(9205429934353132059,64,FLEN)
NAN_BOXED(4619067488703547590,64,FLEN)
NAN_BOXED(9217361202537192735,64,FLEN)
NAN_BOXED(9205429934353132059,64,FLEN)
NAN_BOXED(4619067488703547590,64,FLEN)
NAN_BOXED(9217361202537192735,64,FLEN)
NAN_BOXED(9205429934353132059,64,FLEN)
NAN_BOXED(4619067488703547590,64,FLEN)
NAN_BOXED(9217361202537192735,64,FLEN)
NAN_BOXED(9205429934353132059,64,FLEN)
NAN_BOXED(4619067488703547590,64,FLEN)
NAN_BOXED(9217361202537192735,64,FLEN)
NAN_BOXED(9205623527724798727,64,FLEN)
NAN_BOXED(4614313347429548106,64,FLEN)
NAN_BOXED(9212909572025334907,64,FLEN)
NAN_BOXED(9205623527724798727,64,FLEN)
NAN_BOXED(4614313347429548106,64,FLEN)
NAN_BOXED(9212909572025334907,64,FLEN)
NAN_BOXED(9205623527724798727,64,FLEN)
NAN_BOXED(4614313347429548106,64,FLEN)
NAN_BOXED(9212909572025334907,64,FLEN)
NAN_BOXED(9205623527724798727,64,FLEN)
NAN_BOXED(4614313347429548106,64,FLEN)
NAN_BOXED(9212909572025334907,64,FLEN)
NAN_BOXED(9205623527724798727,64,FLEN)
NAN_BOXED(4614313347429548106,64,FLEN)
NAN_BOXED(9212909572025334907,64,FLEN)
NAN_BOXED(9205781811543207871,64,FLEN)
NAN_BOXED(4618996322629163351,64,FLEN)
NAN_BOXED(9217860065881597559,64,FLEN)
NAN_BOXED(9205781811543207871,64,FLEN)
NAN_BOXED(4618996322629163351,64,FLEN)
NAN_BOXED(9217860065881597559,64,FLEN)
NAN_BOXED(9205781811543207871,64,FLEN)
NAN_BOXED(4618996322629163351,64,FLEN)
NAN_BOXED(9217860065881597559,64,FLEN)
NAN_BOXED(9205781811543207871,64,FLEN)
NAN_BOXED(4618996322629163351,64,FLEN)
NAN_BOXED(9217860065881597559,64,FLEN)
NAN_BOXED(9205781811543207871,64,FLEN)
NAN_BOXED(4618996322629163351,64,FLEN)
NAN_BOXED(9217860065881597559,64,FLEN)
NAN_BOXED(9205792578360282191,64,FLEN)
NAN_BOXED(4619435055012172477,64,FLEN)
NAN_BOXED(9218358646163985208,64,FLEN)
NAN_BOXED(9205792578360282191,64,FLEN)
NAN_BOXED(4619435055012172477,64,FLEN)
NAN_BOXED(9218358646163985208,64,FLEN)
NAN_BOXED(9205792578360282191,64,FLEN)
NAN_BOXED(4619435055012172477,64,FLEN)
NAN_BOXED(9218358646163985208,64,FLEN)
NAN_BOXED(9205792578360282191,64,FLEN)
NAN_BOXED(4619435055012172477,64,FLEN)
NAN_BOXED(9218358646163985208,64,FLEN)
NAN_BOXED(9205792578360282191,64,FLEN)
NAN_BOXED(4619435055012172477,64,FLEN)
NAN_BOXED(9218358646163985208,64,FLEN)
NAN_BOXED(9205876429332185587,64,FLEN)
NAN_BOXED(4589744785268111760,64,FLEN)
NAN_BOXED(9188505236091753215,64,FLEN)
NAN_BOXED(9205876429332185587,64,FLEN)
NAN_BOXED(4589744785268111760,64,FLEN)
NAN_BOXED(9188505236091753215,64,FLEN)
NAN_BOXED(9205876429332185587,64,FLEN)
NAN_BOXED(4589744785268111760,64,FLEN)
NAN_BOXED(9188505236091753215,64,FLEN)
NAN_BOXED(9205876429332185587,64,FLEN)
NAN_BOXED(4589744785268111760,64,FLEN)
NAN_BOXED(9188505236091753215,64,FLEN)
NAN_BOXED(9205876429332185587,64,FLEN)
NAN_BOXED(4589744785268111760,64,FLEN)
NAN_BOXED(9188505236091753215,64,FLEN)
NAN_BOXED(9206076723696042791,64,FLEN)
NAN_BOXED(4616545030555348866,64,FLEN)
NAN_BOXED(9215496083817968480,64,FLEN)
NAN_BOXED(9206076723696042791,64,FLEN)
NAN_BOXED(4616545030555348866,64,FLEN)
NAN_BOXED(9215496083817968480,64,FLEN)
NAN_BOXED(9206076723696042791,64,FLEN)
NAN_BOXED(4616545030555348866,64,FLEN)
NAN_BOXED(9215496083817968480,64,FLEN)
NAN_BOXED(9206076723696042791,64,FLEN)
NAN_BOXED(4616545030555348866,64,FLEN)
NAN_BOXED(9215496083817968480,64,FLEN)
NAN_BOXED(9206076723696042791,64,FLEN)
NAN_BOXED(4616545030555348866,64,FLEN)
NAN_BOXED(9215496083817968480,64,FLEN)
NAN_BOXED(9206161325610046751,64,FLEN)
NAN_BOXED(4616786339172018261,64,FLEN)
NAN_BOXED(9215871733503637284,64,FLEN)
NAN_BOXED(9206161325610046751,64,FLEN)
NAN_BOXED(4616786339172018261,64,FLEN)
NAN_BOXED(9215871733503637284,64,FLEN)
NAN_BOXED(9206161325610046751,64,FLEN)
NAN_BOXED(4616786339172018261,64,FLEN)
NAN_BOXED(9215871733503637284,64,FLEN)
NAN_BOXED(9206161325610046751,64,FLEN)
NAN_BOXED(4616786339172018261,64,FLEN)
NAN_BOXED(9215871733503637284,64,FLEN)
NAN_BOXED(9206161325610046751,64,FLEN)
NAN_BOXED(4616786339172018261,64,FLEN)
NAN_BOXED(9215871733503637284,64,FLEN)
NAN_BOXED(9206269181583980147,64,FLEN)
NAN_BOXED(4611119856091089378,64,FLEN)
NAN_BOXED(9210432403492402847,64,FLEN)
NAN_BOXED(9206269181583980147,64,FLEN)
NAN_BOXED(4611119856091089378,64,FLEN)
NAN_BOXED(9210432403492402847,64,FLEN)
NAN_BOXED(9206269181583980147,64,FLEN)
NAN_BOXED(4611119856091089378,64,FLEN)
NAN_BOXED(9210432403492402847,64,FLEN)
NAN_BOXED(9206269181583980147,64,FLEN)
NAN_BOXED(4611119856091089378,64,FLEN)
NAN_BOXED(9210432403492402847,64,FLEN)
NAN_BOXED(9206269181583980147,64,FLEN)
NAN_BOXED(4611119856091089378,64,FLEN)
NAN_BOXED(9210432403492402847,64,FLEN)
NAN_BOXED(9206294448426581095,64,FLEN)
NAN_BOXED(4615659183556680667,64,FLEN)
NAN_BOXED(9214981261631060108,64,FLEN)
NAN_BOXED(9206294448426581095,64,FLEN)
NAN_BOXED(4615659183556680667,64,FLEN)
NAN_BOXED(9214981261631060108,64,FLEN)
NAN_BOXED(9206294448426581095,64,FLEN)
NAN_BOXED(4615659183556680667,64,FLEN)
NAN_BOXED(9214981261631060108,64,FLEN)
NAN_BOXED(9206294448426581095,64,FLEN)
NAN_BOXED(4615659183556680667,64,FLEN)
NAN_BOXED(9214981261631060108,64,FLEN)
NAN_BOXED(9206294448426581095,64,FLEN)
NAN_BOXED(4615659183556680667,64,FLEN)
NAN_BOXED(9214981261631060108,64,FLEN)
NAN_BOXED(9206733358180982067,64,FLEN)
NAN_BOXED(4611413650350596052,64,FLEN)
NAN_BOXED(9211059173472766189,64,FLEN)
NAN_BOXED(9206733358180982067,64,FLEN)
NAN_BOXED(4611413650350596052,64,FLEN)
NAN_BOXED(9211059173472766189,64,FLEN)
NAN_BOXED(9206733358180982067,64,FLEN)
NAN_BOXED(4611413650350596052,64,FLEN)
NAN_BOXED(9211059173472766189,64,FLEN)
NAN_BOXED(9206733358180982067,64,FLEN)
NAN_BOXED(4611413650350596052,64,FLEN)
NAN_BOXED(9211059173472766189,64,FLEN)
NAN_BOXED(9206733358180982067,64,FLEN)
NAN_BOXED(4611413650350596052,64,FLEN)
NAN_BOXED(9211059173472766189,64,FLEN)
NAN_BOXED(9206767393899757419,64,FLEN)
NAN_BOXED(4615763622761598054,64,FLEN)
NAN_BOXED(9215494921149582927,64,FLEN)
NAN_BOXED(9206767393899757419,64,FLEN)
NAN_BOXED(4615763622761598054,64,FLEN)
NAN_BOXED(9215494921149582927,64,FLEN)
NAN_BOXED(9206767393899757419,64,FLEN)
NAN_BOXED(4615763622761598054,64,FLEN)
NAN_BOXED(9215494921149582927,64,FLEN)
NAN_BOXED(9206767393899757419,64,FLEN)
NAN_BOXED(4615763622761598054,64,FLEN)
NAN_BOXED(9215494921149582927,64,FLEN)
NAN_BOXED(9206767393899757419,64,FLEN)
NAN_BOXED(4615763622761598054,64,FLEN)
NAN_BOXED(9215494921149582927,64,FLEN)
NAN_BOXED(9206928927942821671,64,FLEN)
NAN_BOXED(4616014806169985577,64,FLEN)
NAN_BOXED(9215818225638470182,64,FLEN)
NAN_BOXED(9206928927942821671,64,FLEN)
NAN_BOXED(4616014806169985577,64,FLEN)
NAN_BOXED(9215818225638470182,64,FLEN)
NAN_BOXED(9206928927942821671,64,FLEN)
NAN_BOXED(4616014806169985577,64,FLEN)
NAN_BOXED(9215818225638470182,64,FLEN)
NAN_BOXED(9206928927942821671,64,FLEN)
NAN_BOXED(4616014806169985577,64,FLEN)
NAN_BOXED(9215818225638470182,64,FLEN)
NAN_BOXED(9206928927942821671,64,FLEN)
NAN_BOXED(4616014806169985577,64,FLEN)
NAN_BOXED(9215818225638470182,64,FLEN)
NAN_BOXED(9207055607231410575,64,FLEN)
NAN_BOXED(4593746417374991243,64,FLEN)
NAN_BOXED(9193647806304963295,64,FLEN)
NAN_BOXED(9207055607231410575,64,FLEN)
NAN_BOXED(4593746417374991243,64,FLEN)
NAN_BOXED(9193647806304963295,64,FLEN)
NAN_BOXED(9207055607231410575,64,FLEN)
NAN_BOXED(4593746417374991243,64,FLEN)
NAN_BOXED(9193647806304963295,64,FLEN)
NAN_BOXED(9207055607231410575,64,FLEN)
NAN_BOXED(4593746417374991243,64,FLEN)
NAN_BOXED(9193647806304963295,64,FLEN)
NAN_BOXED(9207055607231410575,64,FLEN)
NAN_BOXED(4593746417374991243,64,FLEN)
NAN_BOXED(9193647806304963295,64,FLEN)
NAN_BOXED(9207163873947358375,64,FLEN)
NAN_BOXED(4607411267969400357,64,FLEN)
NAN_BOXED(9207484506479260991,64,FLEN)
NAN_BOXED(9207163873947358375,64,FLEN)
NAN_BOXED(4607411267969400357,64,FLEN)
NAN_BOXED(9207484506479260991,64,FLEN)
NAN_BOXED(9207163873947358375,64,FLEN)
NAN_BOXED(4607411267969400357,64,FLEN)
NAN_BOXED(9207484506479260991,64,FLEN)
NAN_BOXED(9207163873947358375,64,FLEN)
NAN_BOXED(4607411267969400357,64,FLEN)
NAN_BOXED(9207484506479260991,64,FLEN)
NAN_BOXED(9207163873947358375,64,FLEN)
NAN_BOXED(4607411267969400357,64,FLEN)
NAN_BOXED(9207484506479260991,64,FLEN)
NAN_BOXED(9207405617866813247,64,FLEN)
NAN_BOXED(4617736354664253231,64,FLEN)
NAN_BOXED(9218662921073514037,64,FLEN)
NAN_BOXED(9207405617866813247,64,FLEN)
NAN_BOXED(4617736354664253231,64,FLEN)
NAN_BOXED(9218662921073514037,64,FLEN)
NAN_BOXED(9207405617866813247,64,FLEN)
NAN_BOXED(4617736354664253231,64,FLEN)
NAN_BOXED(9218662921073514037,64,FLEN)
NAN_BOXED(9207405617866813247,64,FLEN)
NAN_BOXED(4617736354664253231,64,FLEN)
NAN_BOXED(9218662921073514037,64,FLEN)
NAN_BOXED(9207405617866813247,64,FLEN)
NAN_BOXED(4617736354664253231,64,FLEN)
NAN_BOXED(9218662921073514037,64,FLEN)
NAN_BOXED(9207632720843894655,64,FLEN)
NAN_BOXED(4610464545238424528,64,FLEN)
NAN_BOXED(9211217058196810523,64,FLEN)
NAN_BOXED(9207632720843894655,64,FLEN)
NAN_BOXED(4610464545238424528,64,FLEN)
NAN_BOXED(9211217058196810523,64,FLEN)
NAN_BOXED(9207632720843894655,64,FLEN)
NAN_BOXED(4610464545238424528,64,FLEN)
NAN_BOXED(9211217058196810523,64,FLEN)
NAN_BOXED(9207632720843894655,64,FLEN)
NAN_BOXED(4610464545238424528,64,FLEN)
NAN_BOXED(9211217058196810523,64,FLEN)
NAN_BOXED(9207632720843894655,64,FLEN)
NAN_BOXED(4610464545238424528,64,FLEN)
NAN_BOXED(9211217058196810523,64,FLEN)
NAN_BOXED(9207790714973390995,64,FLEN)
NAN_BOXED(4612427025601768667,64,FLEN)
NAN_BOXED(9213435652041243379,64,FLEN)
NAN_BOXED(9207790714973390995,64,FLEN)
NAN_BOXED(4612427025601768667,64,FLEN)
NAN_BOXED(9213435652041243379,64,FLEN)
NAN_BOXED(9207790714973390995,64,FLEN)
NAN_BOXED(4612427025601768667,64,FLEN)
NAN_BOXED(9213435652041243379,64,FLEN)
NAN_BOXED(9207790714973390995,64,FLEN)
NAN_BOXED(4612427025601768667,64,FLEN)
NAN_BOXED(9213435652041243379,64,FLEN)
NAN_BOXED(9207790714973390995,64,FLEN)
NAN_BOXED(4612427025601768667,64,FLEN)
NAN_BOXED(9213435652041243379,64,FLEN)
NAN_BOXED(9207794324999790559,64,FLEN)
NAN_BOXED(4617223363575261871,64,FLEN)
NAN_BOXED(9218394581019899677,64,FLEN)
NAN_BOXED(9207794324999790559,64,FLEN)
NAN_BOXED(4617223363575261871,64,FLEN)
NAN_BOXED(9218394581019899677,64,FLEN)
NAN_BOXED(9207794324999790559,64,FLEN)
NAN_BOXED(4617223363575261871,64,FLEN)
NAN_BOXED(9218394581019899677,64,FLEN)
NAN_BOXED(9207794324999790559,64,FLEN)
NAN_BOXED(4617223363575261871,64,FLEN)
NAN_BOXED(9218394581019899677,64,FLEN)
NAN_BOXED(9207794324999790559,64,FLEN)
NAN_BOXED(4617223363575261871,64,FLEN)
NAN_BOXED(9218394581019899677,64,FLEN)
NAN_BOXED(9207807051634557611,64,FLEN)
NAN_BOXED(4613642150535919325,64,FLEN)
NAN_BOXED(9214847760078753776,64,FLEN)
NAN_BOXED(9207807051634557611,64,FLEN)
NAN_BOXED(4613642150535919325,64,FLEN)
NAN_BOXED(9214847760078753776,64,FLEN)
NAN_BOXED(9207807051634557611,64,FLEN)
NAN_BOXED(4613642150535919325,64,FLEN)
NAN_BOXED(9214847760078753776,64,FLEN)
NAN_BOXED(9207807051634557611,64,FLEN)
NAN_BOXED(4613642150535919325,64,FLEN)
NAN_BOXED(9214847760078753776,64,FLEN)
NAN_BOXED(9207807051634557611,64,FLEN)
NAN_BOXED(4613642150535919325,64,FLEN)
NAN_BOXED(9214847760078753776,64,FLEN)
NAN_BOXED(9208091298815219827,64,FLEN)
NAN_BOXED(4614529493284423256,64,FLEN)
NAN_BOXED(9215764592333329533,64,FLEN)
NAN_BOXED(9208091298815219827,64,FLEN)
NAN_BOXED(4614529493284423256,64,FLEN)
NAN_BOXED(9215764592333329533,64,FLEN)
NAN_BOXED(9208091298815219827,64,FLEN)
NAN_BOXED(4614529493284423256,64,FLEN)
NAN_BOXED(9215764592333329533,64,FLEN)
NAN_BOXED(9208091298815219827,64,FLEN)
NAN_BOXED(4614529493284423256,64,FLEN)
NAN_BOXED(9215764592333329533,64,FLEN)
NAN_BOXED(9208091298815219827,64,FLEN)
NAN_BOXED(4614529493284423256,64,FLEN)
NAN_BOXED(9215764592333329533,64,FLEN)
NAN_BOXED(9208415952710407263,64,FLEN)
NAN_BOXED(4616329081174035089,64,FLEN)
NAN_BOXED(9217657322006970911,64,FLEN)
NAN_BOXED(9208415952710407263,64,FLEN)
NAN_BOXED(4616329081174035089,64,FLEN)
NAN_BOXED(9217657322006970911,64,FLEN)
NAN_BOXED(9208415952710407263,64,FLEN)
NAN_BOXED(4616329081174035089,64,FLEN)
NAN_BOXED(9217657322006970911,64,FLEN)
NAN_BOXED(9208415952710407263,64,FLEN)
NAN_BOXED(4616329081174035089,64,FLEN)
NAN_BOXED(9217657322006970911,64,FLEN)
NAN_BOXED(9208415952710407263,64,FLEN)
NAN_BOXED(4616329081174035089,64,FLEN)
NAN_BOXED(9217657322006970911,64,FLEN)
NAN_BOXED(9208837868517132703,64,FLEN)
NAN_BOXED(4612914223703125356,64,FLEN)
NAN_BOXED(9214941813354029473,64,FLEN)
NAN_BOXED(9208837868517132703,64,FLEN)
NAN_BOXED(4612914223703125356,64,FLEN)
NAN_BOXED(9214941813354029473,64,FLEN)
NAN_BOXED(9208837868517132703,64,FLEN)
NAN_BOXED(4612914223703125356,64,FLEN)
NAN_BOXED(9214941813354029473,64,FLEN)
NAN_BOXED(9208837868517132703,64,FLEN)
NAN_BOXED(4612914223703125356,64,FLEN)
NAN_BOXED(9214941813354029473,64,FLEN)
NAN_BOXED(9208837868517132703,64,FLEN)
NAN_BOXED(4612914223703125356,64,FLEN)
NAN_BOXED(9214941813354029473,64,FLEN)
NAN_BOXED(9209512968083597771,64,FLEN)
NAN_BOXED(4612545163102134956,64,FLEN)
NAN_BOXED(9215016627878551799,64,FLEN)
NAN_BOXED(9209512968083597771,64,FLEN)
NAN_BOXED(4612545163102134956,64,FLEN)
NAN_BOXED(9215016627878551799,64,FLEN)
NAN_BOXED(9209512968083597771,64,FLEN)
NAN_BOXED(4612545163102134956,64,FLEN)
NAN_BOXED(9215016627878551799,64,FLEN)
NAN_BOXED(9209512968083597771,64,FLEN)
NAN_BOXED(4612545163102134956,64,FLEN)
NAN_BOXED(9215016627878551799,64,FLEN)
NAN_BOXED(9209512968083597771,64,FLEN)
NAN_BOXED(4612545163102134956,64,FLEN)
NAN_BOXED(9215016627878551799,64,FLEN)
NAN_BOXED(9209894071161458049,64,FLEN)
NAN_BOXED(4602926315156701985,64,FLEN)
NAN_BOXED(9205639771870892099,64,FLEN)
NAN_BOXED(9209894071161458049,64,FLEN)
NAN_BOXED(4602926315156701985,64,FLEN)
NAN_BOXED(9205639771870892099,64,FLEN)
NAN_BOXED(9209894071161458049,64,FLEN)
NAN_BOXED(4602926315156701985,64,FLEN)
NAN_BOXED(9205639771870892099,64,FLEN)
NAN_BOXED(9209894071161458049,64,FLEN)
NAN_BOXED(4602926315156701985,64,FLEN)
NAN_BOXED(9205639771870892099,64,FLEN)
NAN_BOXED(9209894071161458049,64,FLEN)
NAN_BOXED(4602926315156701985,64,FLEN)
NAN_BOXED(9205639771870892099,64,FLEN)
NAN_BOXED(9209947047792884933,64,FLEN)
NAN_BOXED(4609936730280927371,64,FLEN)
NAN_BOXED(9212753838844041785,64,FLEN)
NAN_BOXED(9209947047792884933,64,FLEN)
NAN_BOXED(4609936730280927371,64,FLEN)
NAN_BOXED(9212753838844041785,64,FLEN)
NAN_BOXED(9209947047792884933,64,FLEN)
NAN_BOXED(4609936730280927371,64,FLEN)
NAN_BOXED(9212753838844041785,64,FLEN)
NAN_BOXED(9209947047792884933,64,FLEN)
NAN_BOXED(4609936730280927371,64,FLEN)
NAN_BOXED(9212753838844041785,64,FLEN)
NAN_BOXED(9209947047792884933,64,FLEN)
NAN_BOXED(4609936730280927371,64,FLEN)
NAN_BOXED(9212753838844041785,64,FLEN)
NAN_BOXED(9210184371260220361,64,FLEN)
NAN_BOXED(4610657914823137871,64,FLEN)
NAN_BOXED(9213909234134029231,64,FLEN)
NAN_BOXED(9210184371260220361,64,FLEN)
NAN_BOXED(4610657914823137871,64,FLEN)
NAN_BOXED(9213909234134029231,64,FLEN)
NAN_BOXED(9210184371260220361,64,FLEN)
NAN_BOXED(4610657914823137871,64,FLEN)
NAN_BOXED(9213909234134029231,64,FLEN)
NAN_BOXED(9210184371260220361,64,FLEN)
NAN_BOXED(4610657914823137871,64,FLEN)
NAN_BOXED(9213909234134029231,64,FLEN)
NAN_BOXED(9210184371260220361,64,FLEN)
NAN_BOXED(4610657914823137871,64,FLEN)
NAN_BOXED(9213909234134029231,64,FLEN)
NAN_BOXED(9210270130333361563,64,FLEN)
NAN_BOXED(4613804222290596407,64,FLEN)
NAN_BOXED(9217084250514971785,64,FLEN)
NAN_BOXED(9210270130333361563,64,FLEN)
NAN_BOXED(4613804222290596407,64,FLEN)
NAN_BOXED(9217084250514971785,64,FLEN)
NAN_BOXED(9210270130333361563,64,FLEN)
NAN_BOXED(4613804222290596407,64,FLEN)
NAN_BOXED(9217084250514971785,64,FLEN)
NAN_BOXED(9210270130333361563,64,FLEN)
NAN_BOXED(4613804222290596407,64,FLEN)
NAN_BOXED(9217084250514971785,64,FLEN)
NAN_BOXED(9210270130333361563,64,FLEN)
NAN_BOXED(4613804222290596407,64,FLEN)
NAN_BOXED(9217084250514971785,64,FLEN)
NAN_BOXED(9210305440118984401,64,FLEN)
NAN_BOXED(4613096102195364726,64,FLEN)
NAN_BOXED(9216358203869614572,64,FLEN)
NAN_BOXED(9210305440118984401,64,FLEN)
NAN_BOXED(4613096102195364726,64,FLEN)
NAN_BOXED(9216358203869614572,64,FLEN)
NAN_BOXED(9210305440118984401,64,FLEN)
NAN_BOXED(4613096102195364726,64,FLEN)
NAN_BOXED(9216358203869614572,64,FLEN)
NAN_BOXED(9210305440118984401,64,FLEN)
NAN_BOXED(4613096102195364726,64,FLEN)
NAN_BOXED(9216358203869614572,64,FLEN)
NAN_BOXED(9210305440118984401,64,FLEN)
NAN_BOXED(4613096102195364726,64,FLEN)
NAN_BOXED(9216358203869614572,64,FLEN)
NAN_BOXED(9210336945393223621,64,FLEN)
NAN_BOXED(4612986755483338773,64,FLEN)
NAN_BOXED(9216278676676622606,64,FLEN)
NAN_BOXED(9210336945393223621,64,FLEN)
NAN_BOXED(4612986755483338773,64,FLEN)
NAN_BOXED(9216278676676622606,64,FLEN)
NAN_BOXED(9210336945393223621,64,FLEN)
NAN_BOXED(4612986755483338773,64,FLEN)
NAN_BOXED(9216278676676622606,64,FLEN)
NAN_BOXED(9210336945393223621,64,FLEN)
NAN_BOXED(4612986755483338773,64,FLEN)
NAN_BOXED(9216278676676622606,64,FLEN)
NAN_BOXED(9210336945393223621,64,FLEN)
NAN_BOXED(4612986755483338773,64,FLEN)
NAN_BOXED(9216278676676622606,64,FLEN)
NAN_BOXED(9210596041051248537,64,FLEN)
NAN_BOXED(4581795028589300982,64,FLEN)
NAN_BOXED(9185475286607633663,64,FLEN)
NAN_BOXED(9210596041051248537,64,FLEN)
NAN_BOXED(4581795028589300982,64,FLEN)
NAN_BOXED(9185475286607633663,64,FLEN)
NAN_BOXED(9210596041051248537,64,FLEN)
NAN_BOXED(4581795028589300982,64,FLEN)
NAN_BOXED(9185475286607633663,64,FLEN)
NAN_BOXED(9210596041051248537,64,FLEN)
NAN_BOXED(4581795028589300982,64,FLEN)
NAN_BOXED(9185475286607633663,64,FLEN)
NAN_BOXED(9210596041051248537,64,FLEN)
NAN_BOXED(4581795028589300982,64,FLEN)
NAN_BOXED(9185475286607633663,64,FLEN)
NAN_BOXED(9210644831011725389,64,FLEN)
NAN_BOXED(4609906856336305874,64,FLEN)
NAN_BOXED(9213843300536962837,64,FLEN)
NAN_BOXED(9210644831011725389,64,FLEN)
NAN_BOXED(4609906856336305874,64,FLEN)
NAN_BOXED(9213843300536962837,64,FLEN)
NAN_BOXED(9210644831011725389,64,FLEN)
NAN_BOXED(4609906856336305874,64,FLEN)
NAN_BOXED(9213843300536962837,64,FLEN)
NAN_BOXED(9210644831011725389,64,FLEN)
NAN_BOXED(4609906856336305874,64,FLEN)
NAN_BOXED(9213843300536962837,64,FLEN)
NAN_BOXED(9210644831011725389,64,FLEN)
NAN_BOXED(4609906856336305874,64,FLEN)
NAN_BOXED(9213843300536962837,64,FLEN)
NAN_BOXED(9210850649479693879,64,FLEN)
NAN_BOXED(4598547391375218975,64,FLEN)
NAN_BOXED(9202297385782048167,64,FLEN)
NAN_BOXED(9210850649479693879,64,FLEN)
NAN_BOXED(4598547391375218975,64,FLEN)
NAN_BOXED(9202297385782048167,64,FLEN)
NAN_BOXED(9210850649479693879,64,FLEN)
NAN_BOXED(4598547391375218975,64,FLEN)
NAN_BOXED(9202297385782048167,64,FLEN)
NAN_BOXED(9210850649479693879,64,FLEN)
NAN_BOXED(4598547391375218975,64,FLEN)
NAN_BOXED(9202297385782048167,64,FLEN)
NAN_BOXED(9210850649479693879,64,FLEN)
NAN_BOXED(4598547391375218975,64,FLEN)
NAN_BOXED(9202297385782048167,64,FLEN)
NAN_BOXED(9210983186606097617,64,FLEN)
NAN_BOXED(4603834967631203453,64,FLEN)
NAN_BOXED(9207923758194733103,64,FLEN)
NAN_BOXED(9210983186606097617,64,FLEN)
NAN_BOXED(4603834967631203453,64,FLEN)
NAN_BOXED(9207923758194733103,64,FLEN)
NAN_BOXED(9210983186606097617,64,FLEN)
NAN_BOXED(4603834967631203453,64,FLEN)
NAN_BOXED(9207923758194733103,64,FLEN)
NAN_BOXED(9210983186606097617,64,FLEN)
NAN_BOXED(4603834967631203453,64,FLEN)
NAN_BOXED(9207923758194733103,64,FLEN)
NAN_BOXED(9210983186606097617,64,FLEN)
NAN_BOXED(4603834967631203453,64,FLEN)
NAN_BOXED(9207923758194733103,64,FLEN)
NAN_BOXED(9211354848895058793,64,FLEN)
NAN_BOXED(4613299989237794574,64,FLEN)
NAN_BOXED(9218007689923098610,64,FLEN)
NAN_BOXED(9211354848895058793,64,FLEN)
NAN_BOXED(4613299989237794574,64,FLEN)
NAN_BOXED(9218007689923098610,64,FLEN)
NAN_BOXED(9211354848895058793,64,FLEN)
NAN_BOXED(4613299989237794574,64,FLEN)
NAN_BOXED(9218007689923098610,64,FLEN)
NAN_BOXED(9211354848895058793,64,FLEN)
NAN_BOXED(4613299989237794574,64,FLEN)
NAN_BOXED(9218007689923098610,64,FLEN)
NAN_BOXED(9211354848895058793,64,FLEN)
NAN_BOXED(4613299989237794574,64,FLEN)
NAN_BOXED(9218007689923098610,64,FLEN)
NAN_BOXED(9211545189944181149,64,FLEN)
NAN_BOXED(4597307251210154435,64,FLEN)
NAN_BOXED(9201941734438426199,64,FLEN)
NAN_BOXED(9211545189944181149,64,FLEN)
NAN_BOXED(4597307251210154435,64,FLEN)
NAN_BOXED(9201941734438426199,64,FLEN)
NAN_BOXED(9211545189944181149,64,FLEN)
NAN_BOXED(4597307251210154435,64,FLEN)
NAN_BOXED(9201941734438426199,64,FLEN)
NAN_BOXED(9211545189944181149,64,FLEN)
NAN_BOXED(4597307251210154435,64,FLEN)
NAN_BOXED(9201941734438426199,64,FLEN)
NAN_BOXED(9211545189944181149,64,FLEN)
NAN_BOXED(4597307251210154435,64,FLEN)
NAN_BOXED(9201941734438426199,64,FLEN)
NAN_BOXED(9211681408248246439,64,FLEN)
NAN_BOXED(4601792533922777952,64,FLEN)
NAN_BOXED(9206555565920338135,64,FLEN)
NAN_BOXED(9211681408248246439,64,FLEN)
NAN_BOXED(4601792533922777952,64,FLEN)
NAN_BOXED(9206555565920338135,64,FLEN)
NAN_BOXED(9211681408248246439,64,FLEN)
NAN_BOXED(4601792533922777952,64,FLEN)
NAN_BOXED(9206555565920338135,64,FLEN)
NAN_BOXED(9211681408248246439,64,FLEN)
NAN_BOXED(4601792533922777952,64,FLEN)
NAN_BOXED(9206555565920338135,64,FLEN)
NAN_BOXED(9211681408248246439,64,FLEN)
NAN_BOXED(4601792533922777952,64,FLEN)
NAN_BOXED(9206555565920338135,64,FLEN)
NAN_BOXED(9211849659451229195,64,FLEN)
NAN_BOXED(4613010544722798417,64,FLEN)
NAN_BOXED(9218262587921446236,64,FLEN)
NAN_BOXED(9211849659451229195,64,FLEN)
NAN_BOXED(4613010544722798417,64,FLEN)
NAN_BOXED(9218262587921446236,64,FLEN)
NAN_BOXED(9211849659451229195,64,FLEN)
NAN_BOXED(4613010544722798417,64,FLEN)
NAN_BOXED(9218262587921446236,64,FLEN)
NAN_BOXED(9211849659451229195,64,FLEN)
NAN_BOXED(4613010544722798417,64,FLEN)
NAN_BOXED(9218262587921446236,64,FLEN)
NAN_BOXED(9211849659451229195,64,FLEN)
NAN_BOXED(4613010544722798417,64,FLEN)
NAN_BOXED(9218262587921446236,64,FLEN)
NAN_BOXED(9211861721155641079,64,FLEN)
NAN_BOXED(4604569516031253933,64,FLEN)
NAN_BOXED(9209974948641479355,64,FLEN)
NAN_BOXED(9211861721155641079,64,FLEN)
NAN_BOXED(4604569516031253933,64,FLEN)
NAN_BOXED(9209974948641479355,64,FLEN)
NAN_BOXED(9211861721155641079,64,FLEN)
NAN_BOXED(4604569516031253933,64,FLEN)
NAN_BOXED(9209974948641479355,64,FLEN)
NAN_BOXED(9211861721155641079,64,FLEN)
NAN_BOXED(4604569516031253933,64,FLEN)
NAN_BOXED(9209974948641479355,64,FLEN)
NAN_BOXED(9211861721155641079,64,FLEN)
NAN_BOXED(4604569516031253933,64,FLEN)
NAN_BOXED(9209974948641479355,64,FLEN)
NAN_BOXED(9211879054676615061,64,FLEN)
NAN_BOXED(4613019750092912072,64,FLEN)
NAN_BOXED(9218313958190833943,64,FLEN)
NAN_BOXED(9211879054676615061,64,FLEN)
NAN_BOXED(4613019750092912072,64,FLEN)
NAN_BOXED(9218313958190833943,64,FLEN)
NAN_BOXED(9211879054676615061,64,FLEN)
NAN_BOXED(4613019750092912072,64,FLEN)
NAN_BOXED(9218313958190833943,64,FLEN)
NAN_BOXED(9211879054676615061,64,FLEN)
NAN_BOXED(4613019750092912072,64,FLEN)
NAN_BOXED(9218313958190833943,64,FLEN)
NAN_BOXED(9211879054676615061,64,FLEN)
NAN_BOXED(4613019750092912072,64,FLEN)
NAN_BOXED(9218313958190833943,64,FLEN)
NAN_BOXED(9211894773215482831,64,FLEN)
NAN_BOXED(4579662044419018734,64,FLEN)
NAN_BOXED(9184511179460969855,64,FLEN)
NAN_BOXED(9211894773215482831,64,FLEN)
NAN_BOXED(4579662044419018734,64,FLEN)
NAN_BOXED(9184511179460969855,64,FLEN)
NAN_BOXED(9211894773215482831,64,FLEN)
NAN_BOXED(4579662044419018734,64,FLEN)
NAN_BOXED(9184511179460969855,64,FLEN)
NAN_BOXED(9211894773215482831,64,FLEN)
NAN_BOXED(4579662044419018734,64,FLEN)
NAN_BOXED(9184511179460969855,64,FLEN)
NAN_BOXED(9211894773215482831,64,FLEN)
NAN_BOXED(4579662044419018734,64,FLEN)
NAN_BOXED(9184511179460969855,64,FLEN)
NAN_BOXED(9212031768687900183,64,FLEN)
NAN_BOXED(4594231254114597065,64,FLEN)
NAN_BOXED(9199350322297559215,64,FLEN)
NAN_BOXED(9212031768687900183,64,FLEN)
NAN_BOXED(4594231254114597065,64,FLEN)
NAN_BOXED(9199350322297559215,64,FLEN)
NAN_BOXED(9212031768687900183,64,FLEN)
NAN_BOXED(4594231254114597065,64,FLEN)
NAN_BOXED(9199350322297559215,64,FLEN)
NAN_BOXED(9212031768687900183,64,FLEN)
NAN_BOXED(4594231254114597065,64,FLEN)
NAN_BOXED(9199350322297559215,64,FLEN)
NAN_BOXED(9212031768687900183,64,FLEN)
NAN_BOXED(4594231254114597065,64,FLEN)
NAN_BOXED(9199350322297559215,64,FLEN)
NAN_BOXED(9212040763229402181,64,FLEN)
NAN_BOXED(4612372219047688077,64,FLEN)
NAN_BOXED(9217562651519278911,64,FLEN)
NAN_BOXED(9212040763229402181,64,FLEN)
NAN_BOXED(4612372219047688077,64,FLEN)
NAN_BOXED(9217562651519278911,64,FLEN)
NAN_BOXED(9212040763229402181,64,FLEN)
NAN_BOXED(4612372219047688077,64,FLEN)
NAN_BOXED(9217562651519278911,64,FLEN)
NAN_BOXED(9212040763229402181,64,FLEN)
NAN_BOXED(4612372219047688077,64,FLEN)
NAN_BOXED(9217562651519278911,64,FLEN)
NAN_BOXED(9212040763229402181,64,FLEN)
NAN_BOXED(4612372219047688077,64,FLEN)
NAN_BOXED(9217562651519278911,64,FLEN)
NAN_BOXED(9212079761740971065,64,FLEN)
NAN_BOXED(4612207825954294626,64,FLEN)
NAN_BOXED(9217362217144805901,64,FLEN)
NAN_BOXED(9212079761740971065,64,FLEN)
NAN_BOXED(4612207825954294626,64,FLEN)
NAN_BOXED(9217362217144805901,64,FLEN)
NAN_BOXED(9212079761740971065,64,FLEN)
NAN_BOXED(4612207825954294626,64,FLEN)
NAN_BOXED(9217362217144805901,64,FLEN)
NAN_BOXED(9212079761740971065,64,FLEN)
NAN_BOXED(4612207825954294626,64,FLEN)
NAN_BOXED(9217362217144805901,64,FLEN)
NAN_BOXED(9212079761740971065,64,FLEN)
NAN_BOXED(4612207825954294626,64,FLEN)
NAN_BOXED(9217362217144805901,64,FLEN)
NAN_BOXED(9212079897995778577,64,FLEN)
NAN_BOXED(4611829752410065335,64,FLEN)
NAN_BOXED(9216798040928971334,64,FLEN)
NAN_BOXED(9212079897995778577,64,FLEN)
NAN_BOXED(4611829752410065335,64,FLEN)
NAN_BOXED(9216798040928971334,64,FLEN)
NAN_BOXED(9212079897995778577,64,FLEN)
NAN_BOXED(4611829752410065335,64,FLEN)
NAN_BOXED(9216798040928971334,64,FLEN)
NAN_BOXED(9212079897995778577,64,FLEN)
NAN_BOXED(4611829752410065335,64,FLEN)
NAN_BOXED(9216798040928971334,64,FLEN)
NAN_BOXED(9212079897995778577,64,FLEN)
NAN_BOXED(4611829752410065335,64,FLEN)
NAN_BOXED(9216798040928971334,64,FLEN)
NAN_BOXED(9212156358776328131,64,FLEN)
NAN_BOXED(4607322761118191712,64,FLEN)
NAN_BOXED(9212368222233308531,64,FLEN)
NAN_BOXED(9212156358776328131,64,FLEN)
NAN_BOXED(4607322761118191712,64,FLEN)
NAN_BOXED(9212368222233308531,64,FLEN)
NAN_BOXED(9212156358776328131,64,FLEN)
NAN_BOXED(4607322761118191712,64,FLEN)
NAN_BOXED(9212368222233308531,64,FLEN)
NAN_BOXED(9212156358776328131,64,FLEN)
NAN_BOXED(4607322761118191712,64,FLEN)
NAN_BOXED(9212368222233308531,64,FLEN)
NAN_BOXED(9212156358776328131,64,FLEN)
NAN_BOXED(4607322761118191712,64,FLEN)
NAN_BOXED(9212368222233308531,64,FLEN)
NAN_BOXED(9212157679474648013,64,FLEN)
NAN_BOXED(4605469052757937632,64,FLEN)
NAN_BOXED(9210864163118867527,64,FLEN)
NAN_BOXED(9212157679474648013,64,FLEN)
NAN_BOXED(4605469052757937632,64,FLEN)
NAN_BOXED(9210864163118867527,64,FLEN)
NAN_BOXED(9212157679474648013,64,FLEN)
NAN_BOXED(4605469052757937632,64,FLEN)
NAN_BOXED(9210864163118867527,64,FLEN)
NAN_BOXED(9212157679474648013,64,FLEN)
NAN_BOXED(4605469052757937632,64,FLEN)
NAN_BOXED(9210864163118867527,64,FLEN)
NAN_BOXED(9212157679474648013,64,FLEN)
NAN_BOXED(4605469052757937632,64,FLEN)
NAN_BOXED(9210864163118867527,64,FLEN)
NAN_BOXED(9212210366498173341,64,FLEN)
NAN_BOXED(4599631868669436159,64,FLEN)
NAN_BOXED(9205388629689281911,64,FLEN)
NAN_BOXED(9212210366498173341,64,FLEN)
NAN_BOXED(4599631868669436159,64,FLEN)
NAN_BOXED(9205388629689281911,64,FLEN)
NAN_BOXED(9212210366498173341,64,FLEN)
NAN_BOXED(4599631868669436159,64,FLEN)
NAN_BOXED(9205388629689281911,64,FLEN)
NAN_BOXED(9212210366498173341,64,FLEN)
NAN_BOXED(4599631868669436159,64,FLEN)
NAN_BOXED(9205388629689281911,64,FLEN)
NAN_BOXED(9212210366498173341,64,FLEN)
NAN_BOXED(4599631868669436159,64,FLEN)
NAN_BOXED(9205388629689281911,64,FLEN)
NAN_BOXED(9212222583950662587,64,FLEN)
NAN_BOXED(4607889870491850174,64,FLEN)
NAN_BOXED(9213300969638711341,64,FLEN)
NAN_BOXED(9212222583950662587,64,FLEN)
NAN_BOXED(4607889870491850174,64,FLEN)
NAN_BOXED(9213300969638711341,64,FLEN)
NAN_BOXED(9212222583950662587,64,FLEN)
NAN_BOXED(4607889870491850174,64,FLEN)
NAN_BOXED(9213300969638711341,64,FLEN)
NAN_BOXED(9212222583950662587,64,FLEN)
NAN_BOXED(4607889870491850174,64,FLEN)
NAN_BOXED(9213300969638711341,64,FLEN)
NAN_BOXED(9212222583950662587,64,FLEN)
NAN_BOXED(4607889870491850174,64,FLEN)
NAN_BOXED(9213300969638711341,64,FLEN)
NAN_BOXED(9212273441659099617,64,FLEN)
NAN_BOXED(4609644942199730989,64,FLEN)
NAN_BOXED(9215209885798982696,64,FLEN)
NAN_BOXED(9212273441659099617,64,FLEN)
NAN_BOXED(4609644942199730989,64,FLEN)
NAN_BOXED(9215209885798982696,64,FLEN)
NAN_BOXED(9212273441659099617,64,FLEN)
NAN_BOXED(4609644942199730989,64,FLEN)
NAN_BOXED(9215209885798982696,64,FLEN)
NAN_BOXED(9212273441659099617,64,FLEN)
NAN_BOXED(4609644942199730989,64,FLEN)
NAN_BOXED(9215209885798982696,64,FLEN)
NAN_BOXED(9212273441659099617,64,FLEN)
NAN_BOXED(4609644942199730989,64,FLEN)
NAN_BOXED(9215209885798982696,64,FLEN)
NAN_BOXED(9212276449874547099,64,FLEN)
NAN_BOXED(4609993891637933447,64,FLEN)
NAN_BOXED(9215480255191974522,64,FLEN)
NAN_BOXED(9212276449874547099,64,FLEN)
NAN_BOXED(4609993891637933447,64,FLEN)
NAN_BOXED(9215480255191974522,64,FLEN)
NAN_BOXED(9212276449874547099,64,FLEN)
NAN_BOXED(4609993891637933447,64,FLEN)
NAN_BOXED(9215480255191974522,64,FLEN)
NAN_BOXED(9212276449874547099,64,FLEN)
NAN_BOXED(4609993891637933447,64,FLEN)
NAN_BOXED(9215480255191974522,64,FLEN)
NAN_BOXED(9212276449874547099,64,FLEN)
NAN_BOXED(4609993891637933447,64,FLEN)
NAN_BOXED(9215480255191974522,64,FLEN)
NAN_BOXED(9212287754918436223,64,FLEN)
NAN_BOXED(4594887246430007089,64,FLEN)
NAN_BOXED(9200647556030841199,64,FLEN)
NAN_BOXED(9212287754918436223,64,FLEN)
NAN_BOXED(4594887246430007089,64,FLEN)
NAN_BOXED(9200647556030841199,64,FLEN)
NAN_BOXED(9212287754918436223,64,FLEN)
NAN_BOXED(4594887246430007089,64,FLEN)
NAN_BOXED(9200647556030841199,64,FLEN)
NAN_BOXED(9212287754918436223,64,FLEN)
NAN_BOXED(4594887246430007089,64,FLEN)
NAN_BOXED(9200647556030841199,64,FLEN)
NAN_BOXED(9212287754918436223,64,FLEN)
NAN_BOXED(4594887246430007089,64,FLEN)
NAN_BOXED(9200647556030841199,64,FLEN)
NAN_BOXED(9212352795449989167,64,FLEN)
NAN_BOXED(4603349822923158316,64,FLEN)
NAN_BOXED(9208891423605066467,64,FLEN)
NAN_BOXED(9212352795449989167,64,FLEN)
NAN_BOXED(4603349822923158316,64,FLEN)
NAN_BOXED(9208891423605066467,64,FLEN)
NAN_BOXED(9212352795449989167,64,FLEN)
NAN_BOXED(4603349822923158316,64,FLEN)
NAN_BOXED(9208891423605066467,64,FLEN)
NAN_BOXED(9212352795449989167,64,FLEN)
NAN_BOXED(4603349822923158316,64,FLEN)
NAN_BOXED(9208891423605066467,64,FLEN)
NAN_BOXED(9212352795449989167,64,FLEN)
NAN_BOXED(4603349822923158316,64,FLEN)
NAN_BOXED(9208891423605066467,64,FLEN)
NAN_BOXED(9212518563745778503,64,FLEN)
NAN_BOXED(4612833118646903150,64,FLEN)
NAN_BOXED(9218846104171284365,64,FLEN)
NAN_BOXED(9212518563745778503,64,FLEN)
NAN_BOXED(4612833118646903150,64,FLEN)
NAN_BOXED(9218846104171284365,64,FLEN)
NAN_BOXED(9212518563745778503,64,FLEN)
NAN_BOXED(4612833118646903150,64,FLEN)
NAN_BOXED(9218846104171284365,64,FLEN)
NAN_BOXED(9212518563745778503,64,FLEN)
NAN_BOXED(4612833118646903150,64,FLEN)
NAN_BOXED(9218846104171284365,64,FLEN)
NAN_BOXED(9212518563745778503,64,FLEN)
NAN_BOXED(4612833118646903150,64,FLEN)
NAN_BOXED(9218846104171284365,64,FLEN)
NAN_BOXED(9212532441339450485,64,FLEN)
NAN_BOXED(4608196902624638601,64,FLEN)
NAN_BOXED(9214148642197577263,64,FLEN)
NAN_BOXED(9212532441339450485,64,FLEN)
NAN_BOXED(4608196902624638601,64,FLEN)
NAN_BOXED(9214148642197577263,64,FLEN)
NAN_BOXED(9212532441339450485,64,FLEN)
NAN_BOXED(4608196902624638601,64,FLEN)
NAN_BOXED(9214148642197577263,64,FLEN)
NAN_BOXED(9212532441339450485,64,FLEN)
NAN_BOXED(4608196902624638601,64,FLEN)
NAN_BOXED(9214148642197577263,64,FLEN)
NAN_BOXED(9212532441339450485,64,FLEN)
NAN_BOXED(4608196902624638601,64,FLEN)
NAN_BOXED(9214148642197577263,64,FLEN)
NAN_BOXED(9212726675996318439,64,FLEN)
NAN_BOXED(4596736488663231389,64,FLEN)
NAN_BOXED(9202542411403103759,64,FLEN)
NAN_BOXED(9212726675996318439,64,FLEN)
NAN_BOXED(4596736488663231389,64,FLEN)
NAN_BOXED(9202542411403103759,64,FLEN)
NAN_BOXED(9212726675996318439,64,FLEN)
NAN_BOXED(4596736488663231389,64,FLEN)
NAN_BOXED(9202542411403103759,64,FLEN)
NAN_BOXED(9212726675996318439,64,FLEN)
NAN_BOXED(4596736488663231389,64,FLEN)
NAN_BOXED(9202542411403103759,64,FLEN)
NAN_BOXED(9212726675996318439,64,FLEN)
NAN_BOXED(4596736488663231389,64,FLEN)
NAN_BOXED(9202542411403103759,64,FLEN)
NAN_BOXED(9213246416752059823,64,FLEN)
NAN_BOXED(4603426192335522176,64,FLEN)
NAN_BOXED(9209956599641770409,64,FLEN)
NAN_BOXED(9213246416752059823,64,FLEN)
NAN_BOXED(4603426192335522176,64,FLEN)
NAN_BOXED(9209956599641770409,64,FLEN)
NAN_BOXED(9213246416752059823,64,FLEN)
NAN_BOXED(4603426192335522176,64,FLEN)
NAN_BOXED(9209956599641770409,64,FLEN)
NAN_BOXED(9213246416752059823,64,FLEN)
NAN_BOXED(4603426192335522176,64,FLEN)
NAN_BOXED(9209956599641770409,64,FLEN)
NAN_BOXED(9213246416752059823,64,FLEN)
NAN_BOXED(4603426192335522176,64,FLEN)
NAN_BOXED(9209956599641770409,64,FLEN)
NAN_BOXED(9213344725990049205,64,FLEN)
NAN_BOXED(4601884716861710870,64,FLEN)
NAN_BOXED(9208136960219911243,64,FLEN)
NAN_BOXED(9213344725990049205,64,FLEN)
NAN_BOXED(4601884716861710870,64,FLEN)
NAN_BOXED(9208136960219911243,64,FLEN)
NAN_BOXED(9213344725990049205,64,FLEN)
NAN_BOXED(4601884716861710870,64,FLEN)
NAN_BOXED(9208136960219911243,64,FLEN)
NAN_BOXED(9213344725990049205,64,FLEN)
NAN_BOXED(4601884716861710870,64,FLEN)
NAN_BOXED(9208136960219911243,64,FLEN)
NAN_BOXED(9213344725990049205,64,FLEN)
NAN_BOXED(4601884716861710870,64,FLEN)
NAN_BOXED(9208136960219911243,64,FLEN)
NAN_BOXED(9213387819294978869,64,FLEN)
NAN_BOXED(4583710996558281768,64,FLEN)
NAN_BOXED(9190019815749400319,64,FLEN)
NAN_BOXED(9213387819294978869,64,FLEN)
NAN_BOXED(4583710996558281768,64,FLEN)
NAN_BOXED(9190019815749400319,64,FLEN)
NAN_BOXED(9213387819294978869,64,FLEN)
NAN_BOXED(4583710996558281768,64,FLEN)
NAN_BOXED(9190019815749400319,64,FLEN)
NAN_BOXED(9213387819294978869,64,FLEN)
NAN_BOXED(4583710996558281768,64,FLEN)
NAN_BOXED(9190019815749400319,64,FLEN)
NAN_BOXED(9213387819294978869,64,FLEN)
NAN_BOXED(4583710996558281768,64,FLEN)
NAN_BOXED(9190019815749400319,64,FLEN)
NAN_BOXED(9213413572242403759,64,FLEN)
NAN_BOXED(4611050261227725540,64,FLEN)
NAN_BOXED(9217348558049846164,64,FLEN)
NAN_BOXED(9213413572242403759,64,FLEN)
NAN_BOXED(4611050261227725540,64,FLEN)
NAN_BOXED(9217348558049846164,64,FLEN)
NAN_BOXED(9213413572242403759,64,FLEN)
NAN_BOXED(4611050261227725540,64,FLEN)
NAN_BOXED(9217348558049846164,64,FLEN)
NAN_BOXED(9213413572242403759,64,FLEN)
NAN_BOXED(4611050261227725540,64,FLEN)
NAN_BOXED(9217348558049846164,64,FLEN)
NAN_BOXED(9213413572242403759,64,FLEN)
NAN_BOXED(4611050261227725540,64,FLEN)
NAN_BOXED(9217348558049846164,64,FLEN)
NAN_BOXED(9213452539565415823,64,FLEN)
NAN_BOXED(4593746617505512959,64,FLEN)
NAN_BOXED(9200076543532948607,64,FLEN)
NAN_BOXED(9213452539565415823,64,FLEN)
NAN_BOXED(4593746617505512959,64,FLEN)
NAN_BOXED(9200076543532948607,64,FLEN)
NAN_BOXED(9213452539565415823,64,FLEN)
NAN_BOXED(4593746617505512959,64,FLEN)
NAN_BOXED(9200076543532948607,64,FLEN)
NAN_BOXED(9213452539565415823,64,FLEN)
NAN_BOXED(4593746617505512959,64,FLEN)
NAN_BOXED(9200076543532948607,64,FLEN)
NAN_BOXED(9213452539565415823,64,FLEN)
NAN_BOXED(4593746617505512959,64,FLEN)
NAN_BOXED(9200076543532948607,64,FLEN)
NAN_BOXED(9213491738170274177,64,FLEN)
NAN_BOXED(4611808352812114000,64,FLEN)
NAN_BOXED(9218216289964738313,64,FLEN)
NAN_BOXED(9213491738170274177,64,FLEN)
NAN_BOXED(4611808352812114000,64,FLEN)
NAN_BOXED(9218216289964738313,64,FLEN)
NAN_BOXED(9213491738170274177,64,FLEN)
NAN_BOXED(4611808352812114000,64,FLEN)
NAN_BOXED(9218216289964738313,64,FLEN)
NAN_BOXED(9213491738170274177,64,FLEN)
NAN_BOXED(4611808352812114000,64,FLEN)
NAN_BOXED(9218216289964738313,64,FLEN)
NAN_BOXED(9213491738170274177,64,FLEN)
NAN_BOXED(4611808352812114000,64,FLEN)
NAN_BOXED(9218216289964738313,64,FLEN)
NAN_BOXED(9213517280505375131,64,FLEN)
NAN_BOXED(4612060409569936019,64,FLEN)
NAN_BOXED(9218699203696974240,64,FLEN)
NAN_BOXED(9213517280505375131,64,FLEN)
NAN_BOXED(4612060409569936019,64,FLEN)
NAN_BOXED(9218699203696974240,64,FLEN)
NAN_BOXED(9213517280505375131,64,FLEN)
NAN_BOXED(4612060409569936019,64,FLEN)
NAN_BOXED(9218699203696974240,64,FLEN)
NAN_BOXED(9213517280505375131,64,FLEN)
NAN_BOXED(4612060409569936019,64,FLEN)
NAN_BOXED(9218699203696974240,64,FLEN)
NAN_BOXED(9213517280505375131,64,FLEN)
NAN_BOXED(4612060409569936019,64,FLEN)
NAN_BOXED(9218699203696974240,64,FLEN)
NAN_BOXED(9213564263208385375,64,FLEN)
NAN_BOXED(4610624846681670810,64,FLEN)
NAN_BOXED(9217101009745675919,64,FLEN)
NAN_BOXED(9213564263208385375,64,FLEN)
NAN_BOXED(4610624846681670810,64,FLEN)
NAN_BOXED(9217101009745675919,64,FLEN)
NAN_BOXED(9213564263208385375,64,FLEN)
NAN_BOXED(4610624846681670810,64,FLEN)
NAN_BOXED(9217101009745675919,64,FLEN)
NAN_BOXED(9213564263208385375,64,FLEN)
NAN_BOXED(4610624846681670810,64,FLEN)
NAN_BOXED(9217101009745675919,64,FLEN)
NAN_BOXED(9213564263208385375,64,FLEN)
NAN_BOXED(4610624846681670810,64,FLEN)
NAN_BOXED(9217101009745675919,64,FLEN)
NAN_BOXED(9213567607155422793,64,FLEN)
NAN_BOXED(4594012741925500702,64,FLEN)
NAN_BOXED(9200678666625412847,64,FLEN)
NAN_BOXED(9213567607155422793,64,FLEN)
NAN_BOXED(4594012741925500702,64,FLEN)
NAN_BOXED(9200678666625412847,64,FLEN)
NAN_BOXED(9213567607155422793,64,FLEN)
NAN_BOXED(4594012741925500702,64,FLEN)
NAN_BOXED(9200678666625412847,64,FLEN)
NAN_BOXED(9213567607155422793,64,FLEN)
NAN_BOXED(4594012741925500702,64,FLEN)
NAN_BOXED(9200678666625412847,64,FLEN)
NAN_BOXED(9213567607155422793,64,FLEN)
NAN_BOXED(4594012741925500702,64,FLEN)
NAN_BOXED(9200678666625412847,64,FLEN)
NAN_BOXED(9213693140111389247,64,FLEN)
NAN_BOXED(4611434505464711405,64,FLEN)
NAN_BOXED(9217963982953293678,64,FLEN)
NAN_BOXED(9213693140111389247,64,FLEN)
NAN_BOXED(4611434505464711405,64,FLEN)
NAN_BOXED(9217963982953293678,64,FLEN)
NAN_BOXED(9213693140111389247,64,FLEN)
NAN_BOXED(4611434505464711405,64,FLEN)
NAN_BOXED(9217963982953293678,64,FLEN)
NAN_BOXED(9213693140111389247,64,FLEN)
NAN_BOXED(4611434505464711405,64,FLEN)
NAN_BOXED(9217963982953293678,64,FLEN)
NAN_BOXED(9213693140111389247,64,FLEN)
NAN_BOXED(4611434505464711405,64,FLEN)
NAN_BOXED(9217963982953293678,64,FLEN)
NAN_BOXED(9213806647778181285,64,FLEN)
NAN_BOXED(4605941920216807967,64,FLEN)
NAN_BOXED(9212643024776780115,64,FLEN)
NAN_BOXED(9213806647778181285,64,FLEN)
NAN_BOXED(4605941920216807967,64,FLEN)
NAN_BOXED(9212643024776780115,64,FLEN)
NAN_BOXED(9213806647778181285,64,FLEN)
NAN_BOXED(4605941920216807967,64,FLEN)
NAN_BOXED(9212643024776780115,64,FLEN)
NAN_BOXED(9213806647778181285,64,FLEN)
NAN_BOXED(4605941920216807967,64,FLEN)
NAN_BOXED(9212643024776780115,64,FLEN)
NAN_BOXED(9213806647778181285,64,FLEN)
NAN_BOXED(4605941920216807967,64,FLEN)
NAN_BOXED(9212643024776780115,64,FLEN)
NAN_BOXED(9213828985932833119,64,FLEN)
NAN_BOXED(4609954718441454437,64,FLEN)
NAN_BOXED(9216704283182921962,64,FLEN)
NAN_BOXED(9213828985932833119,64,FLEN)
NAN_BOXED(4609954718441454437,64,FLEN)
NAN_BOXED(9216704283182921962,64,FLEN)
NAN_BOXED(9213828985932833119,64,FLEN)
NAN_BOXED(4609954718441454437,64,FLEN)
NAN_BOXED(9216704283182921962,64,FLEN)
NAN_BOXED(9213828985932833119,64,FLEN)
NAN_BOXED(4609954718441454437,64,FLEN)
NAN_BOXED(9216704283182921962,64,FLEN)
NAN_BOXED(9213828985932833119,64,FLEN)
NAN_BOXED(4609954718441454437,64,FLEN)
NAN_BOXED(9216704283182921962,64,FLEN)
NAN_BOXED(9213832432946060747,64,FLEN)
NAN_BOXED(4610738324230240245,64,FLEN)
NAN_BOXED(9217444355434065453,64,FLEN)
NAN_BOXED(9213832432946060747,64,FLEN)
NAN_BOXED(4610738324230240245,64,FLEN)
NAN_BOXED(9217444355434065453,64,FLEN)
NAN_BOXED(9213832432946060747,64,FLEN)
NAN_BOXED(4610738324230240245,64,FLEN)
NAN_BOXED(9217444355434065453,64,FLEN)
NAN_BOXED(9213832432946060747,64,FLEN)
NAN_BOXED(4610738324230240245,64,FLEN)
NAN_BOXED(9217444355434065453,64,FLEN)
NAN_BOXED(9213832432946060747,64,FLEN)
NAN_BOXED(4610738324230240245,64,FLEN)
NAN_BOXED(9217444355434065453,64,FLEN)
NAN_BOXED(9213841155499588953,64,FLEN)
NAN_BOXED(4609427316582607690,64,FLEN)
NAN_BOXED(9216217375094087954,64,FLEN)
NAN_BOXED(9213841155499588953,64,FLEN)
NAN_BOXED(4609427316582607690,64,FLEN)
NAN_BOXED(9216217375094087954,64,FLEN)
NAN_BOXED(9213841155499588953,64,FLEN)
NAN_BOXED(4609427316582607690,64,FLEN)
NAN_BOXED(9216217375094087954,64,FLEN)
NAN_BOXED(9213841155499588953,64,FLEN)
NAN_BOXED(4609427316582607690,64,FLEN)
NAN_BOXED(9216217375094087954,64,FLEN)
NAN_BOXED(9213841155499588953,64,FLEN)
NAN_BOXED(4609427316582607690,64,FLEN)
NAN_BOXED(9216217375094087954,64,FLEN)
NAN_BOXED(9213978230345673033,64,FLEN)
NAN_BOXED(4599024114914095933,64,FLEN)
NAN_BOXED(9205976793776543623,64,FLEN)
NAN_BOXED(9213978230345673033,64,FLEN)
NAN_BOXED(4599024114914095933,64,FLEN)
NAN_BOXED(9205976793776543623,64,FLEN)
NAN_BOXED(9213978230345673033,64,FLEN)
NAN_BOXED(4599024114914095933,64,FLEN)
NAN_BOXED(9205976793776543623,64,FLEN)
NAN_BOXED(9213978230345673033,64,FLEN)
NAN_BOXED(4599024114914095933,64,FLEN)
NAN_BOXED(9205976793776543623,64,FLEN)
NAN_BOXED(9213978230345673033,64,FLEN)
NAN_BOXED(4599024114914095933,64,FLEN)
NAN_BOXED(9205976793776543623,64,FLEN)
NAN_BOXED(9214012392708351123,64,FLEN)
NAN_BOXED(4603240032683691979,64,FLEN)
NAN_BOXED(9210224269177813641,64,FLEN)
NAN_BOXED(9214012392708351123,64,FLEN)
NAN_BOXED(4603240032683691979,64,FLEN)
NAN_BOXED(9210224269177813641,64,FLEN)
NAN_BOXED(9214012392708351123,64,FLEN)
NAN_BOXED(4603240032683691979,64,FLEN)
NAN_BOXED(9210224269177813641,64,FLEN)
NAN_BOXED(9214012392708351123,64,FLEN)
NAN_BOXED(4603240032683691979,64,FLEN)
NAN_BOXED(9210224269177813641,64,FLEN)
NAN_BOXED(9214012392708351123,64,FLEN)
NAN_BOXED(4603240032683691979,64,FLEN)
NAN_BOXED(9210224269177813641,64,FLEN)
NAN_BOXED(9214072000585673533,64,FLEN)
NAN_BOXED(4598814602361981531,64,FLEN)
NAN_BOXED(9205829815399004091,64,FLEN)
NAN_BOXED(9214072000585673533,64,FLEN)
NAN_BOXED(4598814602361981531,64,FLEN)
NAN_BOXED(9205829815399004091,64,FLEN)
NAN_BOXED(9214072000585673533,64,FLEN)
NAN_BOXED(4598814602361981531,64,FLEN)
NAN_BOXED(9205829815399004091,64,FLEN)
NAN_BOXED(9214072000585673533,64,FLEN)
NAN_BOXED(4598814602361981531,64,FLEN)
NAN_BOXED(9205829815399004091,64,FLEN)
NAN_BOXED(9214072000585673533,64,FLEN)
NAN_BOXED(4598814602361981531,64,FLEN)
NAN_BOXED(9205829815399004091,64,FLEN)
NAN_BOXED(9214095245423740193,64,FLEN)
NAN_BOXED(4603033587774067802,64,FLEN)
NAN_BOXED(9210070591997700535,64,FLEN)
NAN_BOXED(9214095245423740193,64,FLEN)
NAN_BOXED(4603033587774067802,64,FLEN)
NAN_BOXED(9210070591997700535,64,FLEN)
NAN_BOXED(9214095245423740193,64,FLEN)
NAN_BOXED(4603033587774067802,64,FLEN)
NAN_BOXED(9210070591997700535,64,FLEN)
NAN_BOXED(9214095245423740193,64,FLEN)
NAN_BOXED(4603033587774067802,64,FLEN)
NAN_BOXED(9210070591997700535,64,FLEN)
NAN_BOXED(9214095245423740193,64,FLEN)
NAN_BOXED(4603033587774067802,64,FLEN)
NAN_BOXED(9210070591997700535,64,FLEN)
NAN_BOXED(9214142611928379605,64,FLEN)
NAN_BOXED(4609919365883349344,64,FLEN)
NAN_BOXED(9216923145873407058,64,FLEN)
NAN_BOXED(9214142611928379605,64,FLEN)
NAN_BOXED(4609919365883349344,64,FLEN)
NAN_BOXED(9216923145873407058,64,FLEN)
NAN_BOXED(9214142611928379605,64,FLEN)
NAN_BOXED(4609919365883349344,64,FLEN)
NAN_BOXED(9216923145873407058,64,FLEN)
NAN_BOXED(9214142611928379605,64,FLEN)
NAN_BOXED(4609919365883349344,64,FLEN)
NAN_BOXED(9216923145873407058,64,FLEN)
NAN_BOXED(9214142611928379605,64,FLEN)
NAN_BOXED(4609919365883349344,64,FLEN)
NAN_BOXED(9216923145873407058,64,FLEN)
NAN_BOXED(9214149659191045933,64,FLEN)
NAN_BOXED(4604897784042454179,64,FLEN)
NAN_BOXED(9211919603449484199,64,FLEN)
NAN_BOXED(9214149659191045933,64,FLEN)
NAN_BOXED(4604897784042454179,64,FLEN)
NAN_BOXED(9211919603449484199,64,FLEN)
NAN_BOXED(9214149659191045933,64,FLEN)
NAN_BOXED(4604897784042454179,64,FLEN)
NAN_BOXED(9211919603449484199,64,FLEN)
NAN_BOXED(9214149659191045933,64,FLEN)
NAN_BOXED(4604897784042454179,64,FLEN)
NAN_BOXED(9211919603449484199,64,FLEN)
NAN_BOXED(9214149659191045933,64,FLEN)
NAN_BOXED(4604897784042454179,64,FLEN)
NAN_BOXED(9211919603449484199,64,FLEN)
NAN_BOXED(9214215210479077155,64,FLEN)
NAN_BOXED(4606764845663514667,64,FLEN)
NAN_BOXED(9213804574045586871,64,FLEN)
NAN_BOXED(9214215210479077155,64,FLEN)
NAN_BOXED(4606764845663514667,64,FLEN)
NAN_BOXED(9213804574045586871,64,FLEN)
NAN_BOXED(9214215210479077155,64,FLEN)
NAN_BOXED(4606764845663514667,64,FLEN)
NAN_BOXED(9213804574045586871,64,FLEN)
NAN_BOXED(9214215210479077155,64,FLEN)
NAN_BOXED(4606764845663514667,64,FLEN)
NAN_BOXED(9213804574045586871,64,FLEN)
NAN_BOXED(9214215210479077155,64,FLEN)
NAN_BOXED(4606764845663514667,64,FLEN)
NAN_BOXED(9213804574045586871,64,FLEN)
NAN_BOXED(9214266312209825657,64,FLEN)
NAN_BOXED(4594645333590274355,64,FLEN)
NAN_BOXED(9201767838712921903,64,FLEN)
NAN_BOXED(9214266312209825657,64,FLEN)
NAN_BOXED(4594645333590274355,64,FLEN)
NAN_BOXED(9201767838712921903,64,FLEN)
NAN_BOXED(9214266312209825657,64,FLEN)
NAN_BOXED(4594645333590274355,64,FLEN)
NAN_BOXED(9201767838712921903,64,FLEN)
NAN_BOXED(9214266312209825657,64,FLEN)
NAN_BOXED(4594645333590274355,64,FLEN)
NAN_BOXED(9201767838712921903,64,FLEN)
NAN_BOXED(9214266312209825657,64,FLEN)
NAN_BOXED(4594645333590274355,64,FLEN)
NAN_BOXED(9201767838712921903,64,FLEN)
NAN_BOXED(9214411109598406983,64,FLEN)
NAN_BOXED(4597270249085837644,64,FLEN)
NAN_BOXED(9204535913811036471,64,FLEN)
NAN_BOXED(9214411109598406983,64,FLEN)
NAN_BOXED(4597270249085837644,64,FLEN)
NAN_BOXED(9204535913811036471,64,FLEN)
NAN_BOXED(9214411109598406983,64,FLEN)
NAN_BOXED(4597270249085837644,64,FLEN)
NAN_BOXED(9204535913811036471,64,FLEN)
NAN_BOXED(9214411109598406983,64,FLEN)
NAN_BOXED(4597270249085837644,64,FLEN)
NAN_BOXED(9204535913811036471,64,FLEN)
NAN_BOXED(9214411109598406983,64,FLEN)
NAN_BOXED(4597270249085837644,64,FLEN)
NAN_BOXED(9204535913811036471,64,FLEN)
NAN_BOXED(9214487049428816202,64,FLEN)
NAN_BOXED(4597580296445157758,64,FLEN)
NAN_BOXED(9204990994785572655,64,FLEN)
NAN_BOXED(9214487049428816202,64,FLEN)
NAN_BOXED(4597580296445157758,64,FLEN)
NAN_BOXED(9204990994785572655,64,FLEN)
NAN_BOXED(9214487049428816202,64,FLEN)
NAN_BOXED(4597580296445157758,64,FLEN)
NAN_BOXED(9204990994785572655,64,FLEN)
NAN_BOXED(9214487049428816202,64,FLEN)
NAN_BOXED(4597580296445157758,64,FLEN)
NAN_BOXED(9204990994785572655,64,FLEN)
NAN_BOXED(9214487049428816202,64,FLEN)
NAN_BOXED(4597580296445157758,64,FLEN)
NAN_BOXED(9204990994785572655,64,FLEN)
NAN_BOXED(9214543225572233891,64,FLEN)
NAN_BOXED(4610944650334526527,64,FLEN)
NAN_BOXED(9218454479424425444,64,FLEN)
NAN_BOXED(9214543225572233891,64,FLEN)
NAN_BOXED(4610944650334526527,64,FLEN)
NAN_BOXED(9218454479424425444,64,FLEN)
NAN_BOXED(9214543225572233891,64,FLEN)
NAN_BOXED(4610944650334526527,64,FLEN)
NAN_BOXED(9218454479424425444,64,FLEN)
NAN_BOXED(9214543225572233891,64,FLEN)
NAN_BOXED(4610944650334526527,64,FLEN)
NAN_BOXED(9218454479424425444,64,FLEN)
NAN_BOXED(9214543225572233891,64,FLEN)
NAN_BOXED(4610944650334526527,64,FLEN)
NAN_BOXED(9218454479424425444,64,FLEN)
NAN_BOXED(9214547494407075159,64,FLEN)
NAN_BOXED(4609399629270431637,64,FLEN)
NAN_BOXED(9216854630407858689,64,FLEN)
NAN_BOXED(9214547494407075159,64,FLEN)
NAN_BOXED(4609399629270431637,64,FLEN)
NAN_BOXED(9216854630407858689,64,FLEN)
NAN_BOXED(9214547494407075159,64,FLEN)
NAN_BOXED(4609399629270431637,64,FLEN)
NAN_BOXED(9216854630407858689,64,FLEN)
NAN_BOXED(9214547494407075159,64,FLEN)
NAN_BOXED(4609399629270431637,64,FLEN)
NAN_BOXED(9216854630407858689,64,FLEN)
NAN_BOXED(9214547494407075159,64,FLEN)
NAN_BOXED(4609399629270431637,64,FLEN)
NAN_BOXED(9216854630407858689,64,FLEN)
NAN_BOXED(9214709860345065795,64,FLEN)
NAN_BOXED(4608385039094595241,64,FLEN)
NAN_BOXED(9216004613908494499,64,FLEN)
NAN_BOXED(9214709860345065795,64,FLEN)
NAN_BOXED(4608385039094595241,64,FLEN)
NAN_BOXED(9216004613908494499,64,FLEN)
NAN_BOXED(9214709860345065795,64,FLEN)
NAN_BOXED(4608385039094595241,64,FLEN)
NAN_BOXED(9216004613908494499,64,FLEN)
NAN_BOXED(9214709860345065795,64,FLEN)
NAN_BOXED(4608385039094595241,64,FLEN)
NAN_BOXED(9216004613908494499,64,FLEN)
NAN_BOXED(9214709860345065795,64,FLEN)
NAN_BOXED(4608385039094595241,64,FLEN)
NAN_BOXED(9216004613908494499,64,FLEN)
NAN_BOXED(9214741699892997146,64,FLEN)
NAN_BOXED(4603925329560126057,64,FLEN)
NAN_BOXED(9211588918940186153,64,FLEN)
NAN_BOXED(9214741699892997146,64,FLEN)
NAN_BOXED(4603925329560126057,64,FLEN)
NAN_BOXED(9211588918940186153,64,FLEN)
NAN_BOXED(9214741699892997146,64,FLEN)
NAN_BOXED(4603925329560126057,64,FLEN)
NAN_BOXED(9211588918940186153,64,FLEN)
NAN_BOXED(9214741699892997146,64,FLEN)
NAN_BOXED(4603925329560126057,64,FLEN)
NAN_BOXED(9211588918940186153,64,FLEN)
NAN_BOXED(9214741699892997146,64,FLEN)
NAN_BOXED(4603925329560126057,64,FLEN)
NAN_BOXED(9211588918940186153,64,FLEN)
NAN_BOXED(9214768360695349797,64,FLEN)
NAN_BOXED(4609986968581704015,64,FLEN)
NAN_BOXED(9217824198491626612,64,FLEN)
NAN_BOXED(9214768360695349797,64,FLEN)
NAN_BOXED(4609986968581704015,64,FLEN)
NAN_BOXED(9217824198491626612,64,FLEN)
NAN_BOXED(9214768360695349797,64,FLEN)
NAN_BOXED(4609986968581704015,64,FLEN)
NAN_BOXED(9217824198491626612,64,FLEN)
NAN_BOXED(9214768360695349797,64,FLEN)
NAN_BOXED(4609986968581704015,64,FLEN)
NAN_BOXED(9217824198491626612,64,FLEN)
NAN_BOXED(9214768360695349797,64,FLEN)
NAN_BOXED(4609986968581704015,64,FLEN)
NAN_BOXED(9217824198491626612,64,FLEN)
NAN_BOXED(9214789306676867842,64,FLEN)
NAN_BOXED(4605814782835778119,64,FLEN)
NAN_BOXED(9213717238638556377,64,FLEN)
NAN_BOXED(9214789306676867842,64,FLEN)
NAN_BOXED(4605814782835778119,64,FLEN)
NAN_BOXED(9213717238638556377,64,FLEN)
NAN_BOXED(9214789306676867842,64,FLEN)
NAN_BOXED(4605814782835778119,64,FLEN)
NAN_BOXED(9213717238638556377,64,FLEN)
NAN_BOXED(9214789306676867842,64,FLEN)
NAN_BOXED(4605814782835778119,64,FLEN)
NAN_BOXED(9213717238638556377,64,FLEN)
NAN_BOXED(9214789306676867842,64,FLEN)
NAN_BOXED(4605814782835778119,64,FLEN)
NAN_BOXED(9213717238638556377,64,FLEN)
NAN_BOXED(9214824734769180476,64,FLEN)
NAN_BOXED(4608089713663832904,64,FLEN)
NAN_BOXED(9215824680484309051,64,FLEN)
NAN_BOXED(9214824734769180476,64,FLEN)
NAN_BOXED(4608089713663832904,64,FLEN)
NAN_BOXED(9215824680484309051,64,FLEN)
NAN_BOXED(9214824734769180476,64,FLEN)
NAN_BOXED(4608089713663832904,64,FLEN)
NAN_BOXED(9215824680484309051,64,FLEN)
NAN_BOXED(9214824734769180476,64,FLEN)
NAN_BOXED(4608089713663832904,64,FLEN)
NAN_BOXED(9215824680484309051,64,FLEN)
NAN_BOXED(9214824734769180476,64,FLEN)
NAN_BOXED(4608089713663832904,64,FLEN)
NAN_BOXED(9215824680484309051,64,FLEN)
NAN_BOXED(9214937190278233510,64,FLEN)
NAN_BOXED(4607688490079562046,64,FLEN)
NAN_BOXED(9215507577055640450,64,FLEN)
NAN_BOXED(9214937190278233510,64,FLEN)
NAN_BOXED(4607688490079562046,64,FLEN)
NAN_BOXED(9215507577055640450,64,FLEN)
NAN_BOXED(9214937190278233510,64,FLEN)
NAN_BOXED(4607688490079562046,64,FLEN)
NAN_BOXED(9215507577055640450,64,FLEN)
NAN_BOXED(9214937190278233510,64,FLEN)
NAN_BOXED(4607688490079562046,64,FLEN)
NAN_BOXED(9215507577055640450,64,FLEN)
NAN_BOXED(9214937190278233510,64,FLEN)
NAN_BOXED(4607688490079562046,64,FLEN)
NAN_BOXED(9215507577055640450,64,FLEN)
NAN_BOXED(9214953066971803628,64,FLEN)
NAN_BOXED(4610026291868572662,64,FLEN)
NAN_BOXED(9218168387284101378,64,FLEN)
NAN_BOXED(9214953066971803628,64,FLEN)
NAN_BOXED(4610026291868572662,64,FLEN)
NAN_BOXED(9218168387284101378,64,FLEN)
NAN_BOXED(9214953066971803628,64,FLEN)
NAN_BOXED(4610026291868572662,64,FLEN)
NAN_BOXED(9218168387284101378,64,FLEN)
NAN_BOXED(9214953066971803628,64,FLEN)
NAN_BOXED(4610026291868572662,64,FLEN)
NAN_BOXED(9218168387284101378,64,FLEN)
NAN_BOXED(9214953066971803628,64,FLEN)
NAN_BOXED(4610026291868572662,64,FLEN)
NAN_BOXED(9218168387284101378,64,FLEN)
NAN_BOXED(9215012488359969336,64,FLEN)
NAN_BOXED(4608458763202551640,64,FLEN)
NAN_BOXED(9216472380477805717,64,FLEN)
NAN_BOXED(9215012488359969336,64,FLEN)
NAN_BOXED(4608458763202551640,64,FLEN)
NAN_BOXED(9216472380477805717,64,FLEN)
NAN_BOXED(9215012488359969336,64,FLEN)
NAN_BOXED(4608458763202551640,64,FLEN)
NAN_BOXED(9216472380477805717,64,FLEN)
NAN_BOXED(9215012488359969336,64,FLEN)
NAN_BOXED(4608458763202551640,64,FLEN)
NAN_BOXED(9216472380477805717,64,FLEN)
NAN_BOXED(9215012488359969336,64,FLEN)
NAN_BOXED(4608458763202551640,64,FLEN)
NAN_BOXED(9216472380477805717,64,FLEN)
NAN_BOXED(9215167890124862566,64,FLEN)
NAN_BOXED(4594652692152560954,64,FLEN)
NAN_BOXED(9202813101882296719,64,FLEN)
NAN_BOXED(9215167890124862566,64,FLEN)
NAN_BOXED(4594652692152560954,64,FLEN)
NAN_BOXED(9202813101882296719,64,FLEN)
NAN_BOXED(9215167890124862566,64,FLEN)
NAN_BOXED(4594652692152560954,64,FLEN)
NAN_BOXED(9202813101882296719,64,FLEN)
NAN_BOXED(9215167890124862566,64,FLEN)
NAN_BOXED(4594652692152560954,64,FLEN)
NAN_BOXED(9202813101882296719,64,FLEN)
NAN_BOXED(9215167890124862566,64,FLEN)
NAN_BOXED(4594652692152560954,64,FLEN)
NAN_BOXED(9202813101882296719,64,FLEN)
NAN_BOXED(9215182103882694525,64,FLEN)
NAN_BOXED(4602003718289206390,64,FLEN)
NAN_BOXED(9210279698680479083,64,FLEN)
NAN_BOXED(9215182103882694525,64,FLEN)
NAN_BOXED(4602003718289206390,64,FLEN)
NAN_BOXED(9210279698680479083,64,FLEN)
NAN_BOXED(9215182103882694525,64,FLEN)
NAN_BOXED(4602003718289206390,64,FLEN)
NAN_BOXED(9210279698680479083,64,FLEN)
NAN_BOXED(9215182103882694525,64,FLEN)
NAN_BOXED(4602003718289206390,64,FLEN)
NAN_BOXED(9210279698680479083,64,FLEN)
NAN_BOXED(9215182103882694525,64,FLEN)
NAN_BOXED(4602003718289206390,64,FLEN)
NAN_BOXED(9210279698680479083,64,FLEN)
NAN_BOXED(9215190632598798412,64,FLEN)
NAN_BOXED(4609279733898810751,64,FLEN)
NAN_BOXED(9217672518366105233,64,FLEN)
NAN_BOXED(9215190632598798412,64,FLEN)
NAN_BOXED(4609279733898810751,64,FLEN)
NAN_BOXED(9217672518366105233,64,FLEN)
NAN_BOXED(9215190632598798412,64,FLEN)
NAN_BOXED(4609279733898810751,64,FLEN)
NAN_BOXED(9217672518366105233,64,FLEN)
NAN_BOXED(9215190632598798412,64,FLEN)
NAN_BOXED(4609279733898810751,64,FLEN)
NAN_BOXED(9217672518366105233,64,FLEN)
NAN_BOXED(9215190632598798412,64,FLEN)
NAN_BOXED(4609279733898810751,64,FLEN)
NAN_BOXED(9217672518366105233,64,FLEN)
NAN_BOXED(9215195402067602922,64,FLEN)
NAN_BOXED(4601426707226730552,64,FLEN)
NAN_BOXED(9209950287747833983,64,FLEN)
NAN_BOXED(9215195402067602922,64,FLEN)
NAN_BOXED(4601426707226730552,64,FLEN)
NAN_BOXED(9209950287747833983,64,FLEN)
NAN_BOXED(9215195402067602922,64,FLEN)
NAN_BOXED(4601426707226730552,64,FLEN)
NAN_BOXED(9209950287747833983,64,FLEN)
NAN_BOXED(9215195402067602922,64,FLEN)
NAN_BOXED(4601426707226730552,64,FLEN)
NAN_BOXED(9209950287747833983,64,FLEN)
NAN_BOXED(9215195402067602922,64,FLEN)
NAN_BOXED(4601426707226730552,64,FLEN)
NAN_BOXED(9209950287747833983,64,FLEN)
NAN_BOXED(9215199773832941721,64,FLEN)
NAN_BOXED(4605373961267505495,64,FLEN)
NAN_BOXED(9213890977010532475,64,FLEN)
NAN_BOXED(9215199773832941721,64,FLEN)
NAN_BOXED(4605373961267505495,64,FLEN)
NAN_BOXED(9213890977010532475,64,FLEN)
NAN_BOXED(9215199773832941721,64,FLEN)
NAN_BOXED(4605373961267505495,64,FLEN)
NAN_BOXED(9213890977010532475,64,FLEN)
NAN_BOXED(9215199773832941721,64,FLEN)
NAN_BOXED(4605373961267505495,64,FLEN)
NAN_BOXED(9213890977010532475,64,FLEN)
NAN_BOXED(9215199773832941721,64,FLEN)
NAN_BOXED(4605373961267505495,64,FLEN)
NAN_BOXED(9213890977010532475,64,FLEN)
NAN_BOXED(9215281295267463241,64,FLEN)
NAN_BOXED(4602730471949843960,64,FLEN)
NAN_BOXED(9210839859472361943,64,FLEN)
NAN_BOXED(9215281295267463241,64,FLEN)
NAN_BOXED(4602730471949843960,64,FLEN)
NAN_BOXED(9210839859472361943,64,FLEN)
NAN_BOXED(9215281295267463241,64,FLEN)
NAN_BOXED(4602730471949843960,64,FLEN)
NAN_BOXED(9210839859472361943,64,FLEN)
NAN_BOXED(9215281295267463241,64,FLEN)
NAN_BOXED(4602730471949843960,64,FLEN)
NAN_BOXED(9210839859472361943,64,FLEN)
NAN_BOXED(9215281295267463241,64,FLEN)
NAN_BOXED(4602730471949843960,64,FLEN)
NAN_BOXED(9210839859472361943,64,FLEN)
NAN_BOXED(9215292862140264173,64,FLEN)
NAN_BOXED(4602956598336405956,64,FLEN)
NAN_BOXED(9211124281640695283,64,FLEN)
NAN_BOXED(9215292862140264173,64,FLEN)
NAN_BOXED(4602956598336405956,64,FLEN)
NAN_BOXED(9211124281640695283,64,FLEN)
NAN_BOXED(9215292862140264173,64,FLEN)
NAN_BOXED(4602956598336405956,64,FLEN)
NAN_BOXED(9211124281640695283,64,FLEN)
NAN_BOXED(9215292862140264173,64,FLEN)
NAN_BOXED(4602956598336405956,64,FLEN)
NAN_BOXED(9211124281640695283,64,FLEN)
NAN_BOXED(9215292862140264173,64,FLEN)
NAN_BOXED(4602956598336405956,64,FLEN)
NAN_BOXED(9211124281640695283,64,FLEN)
NAN_BOXED(9215324826364147495,64,FLEN)
NAN_BOXED(4597737540474667333,64,FLEN)
NAN_BOXED(9206052139667445423,64,FLEN)
NAN_BOXED(9215324826364147495,64,FLEN)
NAN_BOXED(4597737540474667333,64,FLEN)
NAN_BOXED(9206052139667445423,64,FLEN)
NAN_BOXED(9215324826364147495,64,FLEN)
NAN_BOXED(4597737540474667333,64,FLEN)
NAN_BOXED(9206052139667445423,64,FLEN)
NAN_BOXED(9215324826364147495,64,FLEN)
NAN_BOXED(4597737540474667333,64,FLEN)
NAN_BOXED(9206052139667445423,64,FLEN)
NAN_BOXED(9215324826364147495,64,FLEN)
NAN_BOXED(4597737540474667333,64,FLEN)
NAN_BOXED(9206052139667445423,64,FLEN)
NAN_BOXED(9215386546164674028,64,FLEN)
NAN_BOXED(4604373201780398898,64,FLEN)
NAN_BOXED(9212961725042860203,64,FLEN)
NAN_BOXED(9215386546164674028,64,FLEN)
NAN_BOXED(4604373201780398898,64,FLEN)
NAN_BOXED(9212961725042860203,64,FLEN)
NAN_BOXED(9215386546164674028,64,FLEN)
NAN_BOXED(4604373201780398898,64,FLEN)
NAN_BOXED(9212961725042860203,64,FLEN)
NAN_BOXED(9215386546164674028,64,FLEN)
NAN_BOXED(4604373201780398898,64,FLEN)
NAN_BOXED(9212961725042860203,64,FLEN)
NAN_BOXED(9215386546164674028,64,FLEN)
NAN_BOXED(4604373201780398898,64,FLEN)
NAN_BOXED(9212961725042860203,64,FLEN)
NAN_BOXED(9215448090737735445,64,FLEN)
NAN_BOXED(4602562411622831656,64,FLEN)
NAN_BOXED(9210872287551504163,64,FLEN)
NAN_BOXED(9215448090737735445,64,FLEN)
NAN_BOXED(4602562411622831656,64,FLEN)
NAN_BOXED(9210872287551504163,64,FLEN)
NAN_BOXED(9215448090737735445,64,FLEN)
NAN_BOXED(4602562411622831656,64,FLEN)
NAN_BOXED(9210872287551504163,64,FLEN)
NAN_BOXED(9215448090737735445,64,FLEN)
NAN_BOXED(4602562411622831656,64,FLEN)
NAN_BOXED(9210872287551504163,64,FLEN)
NAN_BOXED(9215448090737735445,64,FLEN)
NAN_BOXED(4602562411622831656,64,FLEN)
NAN_BOXED(9210872287551504163,64,FLEN)
NAN_BOXED(9215468232859400456,64,FLEN)
NAN_BOXED(4608236762876249566,64,FLEN)
NAN_BOXED(9216780894359851350,64,FLEN)
NAN_BOXED(9215468232859400456,64,FLEN)
NAN_BOXED(4608236762876249566,64,FLEN)
NAN_BOXED(9216780894359851350,64,FLEN)
NAN_BOXED(9215468232859400456,64,FLEN)
NAN_BOXED(4608236762876249566,64,FLEN)
NAN_BOXED(9216780894359851350,64,FLEN)
NAN_BOXED(9215468232859400456,64,FLEN)
NAN_BOXED(4608236762876249566,64,FLEN)
NAN_BOXED(9216780894359851350,64,FLEN)
NAN_BOXED(9215468232859400456,64,FLEN)
NAN_BOXED(4608236762876249566,64,FLEN)
NAN_BOXED(9216780894359851350,64,FLEN)
NAN_BOXED(9215517825843343773,64,FLEN)
NAN_BOXED(4594751398099101204,64,FLEN)
NAN_BOXED(9203363244358012679,64,FLEN)
NAN_BOXED(9215517825843343773,64,FLEN)
NAN_BOXED(4594751398099101204,64,FLEN)
NAN_BOXED(9203363244358012679,64,FLEN)
NAN_BOXED(9215517825843343773,64,FLEN)
NAN_BOXED(4594751398099101204,64,FLEN)
NAN_BOXED(9203363244358012679,64,FLEN)
NAN_BOXED(9215517825843343773,64,FLEN)
NAN_BOXED(4594751398099101204,64,FLEN)
NAN_BOXED(9203363244358012679,64,FLEN)
NAN_BOXED(9215517825843343773,64,FLEN)
NAN_BOXED(4594751398099101204,64,FLEN)
NAN_BOXED(9203363244358012679,64,FLEN)
NAN_BOXED(9215525703515145034,64,FLEN)
NAN_BOXED(4608833955776975987,64,FLEN)
NAN_BOXED(9217602947291714213,64,FLEN)
NAN_BOXED(9215525703515145034,64,FLEN)
NAN_BOXED(4608833955776975987,64,FLEN)
NAN_BOXED(9217602947291714213,64,FLEN)
NAN_BOXED(9215525703515145034,64,FLEN)
NAN_BOXED(4608833955776975987,64,FLEN)
NAN_BOXED(9217602947291714213,64,FLEN)
NAN_BOXED(9215525703515145034,64,FLEN)
NAN_BOXED(4608833955776975987,64,FLEN)
NAN_BOXED(9217602947291714213,64,FLEN)
NAN_BOXED(9215525703515145034,64,FLEN)
NAN_BOXED(4608833955776975987,64,FLEN)
NAN_BOXED(9217602947291714213,64,FLEN)
NAN_BOXED(9215528544159897124,64,FLEN)
NAN_BOXED(4607699011349764902,64,FLEN)
NAN_BOXED(9216178621519276364,64,FLEN)
NAN_BOXED(9215528544159897124,64,FLEN)
NAN_BOXED(4607699011349764902,64,FLEN)
NAN_BOXED(9216178621519276364,64,FLEN)
NAN_BOXED(9215528544159897124,64,FLEN)
NAN_BOXED(4607699011349764902,64,FLEN)
NAN_BOXED(9216178621519276364,64,FLEN)
NAN_BOXED(9215528544159897124,64,FLEN)
NAN_BOXED(4607699011349764902,64,FLEN)
NAN_BOXED(9216178621519276364,64,FLEN)
NAN_BOXED(9215528544159897124,64,FLEN)
NAN_BOXED(4607699011349764902,64,FLEN)
NAN_BOXED(9216178621519276364,64,FLEN)
NAN_BOXED(9215580078584333907,64,FLEN)
NAN_BOXED(4601933300452942527,64,FLEN)
NAN_BOXED(9210603135067211973,64,FLEN)
NAN_BOXED(9215580078584333907,64,FLEN)
NAN_BOXED(4601933300452942527,64,FLEN)
NAN_BOXED(9210603135067211973,64,FLEN)
NAN_BOXED(9215580078584333907,64,FLEN)
NAN_BOXED(4601933300452942527,64,FLEN)
NAN_BOXED(9210603135067211973,64,FLEN)
NAN_BOXED(9215580078584333907,64,FLEN)
NAN_BOXED(4601933300452942527,64,FLEN)
NAN_BOXED(9210603135067211973,64,FLEN)
NAN_BOXED(9215580078584333907,64,FLEN)
NAN_BOXED(4601933300452942527,64,FLEN)
NAN_BOXED(9210603135067211973,64,FLEN)
NAN_BOXED(9215612989002230946,64,FLEN)
NAN_BOXED(4605728573656016642,64,FLEN)
NAN_BOXED(9214684603266849842,64,FLEN)
NAN_BOXED(9215612989002230946,64,FLEN)
NAN_BOXED(4605728573656016642,64,FLEN)
NAN_BOXED(9214684603266849842,64,FLEN)
NAN_BOXED(9215612989002230946,64,FLEN)
NAN_BOXED(4605728573656016642,64,FLEN)
NAN_BOXED(9214684603266849842,64,FLEN)
NAN_BOXED(9215612989002230946,64,FLEN)
NAN_BOXED(4605728573656016642,64,FLEN)
NAN_BOXED(9214684603266849842,64,FLEN)
NAN_BOXED(9215612989002230946,64,FLEN)
NAN_BOXED(4605728573656016642,64,FLEN)
NAN_BOXED(9214684603266849842,64,FLEN)
NAN_BOXED(9215667024705966133,64,FLEN)
NAN_BOXED(4607555093238899579,64,FLEN)
NAN_BOXED(9216147455581737855,64,FLEN)
NAN_BOXED(9215667024705966133,64,FLEN)
NAN_BOXED(4607555093238899579,64,FLEN)
NAN_BOXED(9216147455581737855,64,FLEN)
NAN_BOXED(9215667024705966133,64,FLEN)
NAN_BOXED(4607555093238899579,64,FLEN)
NAN_BOXED(9216147455581737855,64,FLEN)
NAN_BOXED(9215667024705966133,64,FLEN)
NAN_BOXED(4607555093238899579,64,FLEN)
NAN_BOXED(9216147455581737855,64,FLEN)
NAN_BOXED(9215667024705966133,64,FLEN)
NAN_BOXED(4607555093238899579,64,FLEN)
NAN_BOXED(9216147455581737855,64,FLEN)
NAN_BOXED(9215710898044777707,64,FLEN)
NAN_BOXED(4608211056646270930,64,FLEN)
NAN_BOXED(9217046980786530480,64,FLEN)
NAN_BOXED(9215710898044777707,64,FLEN)
NAN_BOXED(4608211056646270930,64,FLEN)
NAN_BOXED(9217046980786530480,64,FLEN)
NAN_BOXED(9215710898044777707,64,FLEN)
NAN_BOXED(4608211056646270930,64,FLEN)
NAN_BOXED(9217046980786530480,64,FLEN)
NAN_BOXED(9215710898044777707,64,FLEN)
NAN_BOXED(4608211056646270930,64,FLEN)
NAN_BOXED(9217046980786530480,64,FLEN)
NAN_BOXED(9215710898044777707,64,FLEN)
NAN_BOXED(4608211056646270930,64,FLEN)
NAN_BOXED(9217046980786530480,64,FLEN)
NAN_BOXED(9215724606509634165,64,FLEN)
NAN_BOXED(4601614614706379312,64,FLEN)
NAN_BOXED(9210528247367575253,64,FLEN)
NAN_BOXED(9215724606509634165,64,FLEN)
NAN_BOXED(4601614614706379312,64,FLEN)
NAN_BOXED(9210528247367575253,64,FLEN)
NAN_BOXED(9215724606509634165,64,FLEN)
NAN_BOXED(4601614614706379312,64,FLEN)
NAN_BOXED(9210528247367575253,64,FLEN)
NAN_BOXED(9215724606509634165,64,FLEN)
NAN_BOXED(4601614614706379312,64,FLEN)
NAN_BOXED(9210528247367575253,64,FLEN)
NAN_BOXED(9215724606509634165,64,FLEN)
NAN_BOXED(4601614614706379312,64,FLEN)
NAN_BOXED(9210528247367575253,64,FLEN)
NAN_BOXED(9215799172406899101,64,FLEN)
NAN_BOXED(4609310578252383806,64,FLEN)
NAN_BOXED(9218605121500807994,64,FLEN)
NAN_BOXED(9215799172406899101,64,FLEN)
NAN_BOXED(4609310578252383806,64,FLEN)
NAN_BOXED(9218605121500807994,64,FLEN)
NAN_BOXED(9215799172406899101,64,FLEN)
NAN_BOXED(4609310578252383806,64,FLEN)
NAN_BOXED(9218605121500807994,64,FLEN)
NAN_BOXED(9215799172406899101,64,FLEN)
NAN_BOXED(4609310578252383806,64,FLEN)
NAN_BOXED(9218605121500807994,64,FLEN)
NAN_BOXED(9215799172406899101,64,FLEN)
NAN_BOXED(4609310578252383806,64,FLEN)
NAN_BOXED(9218605121500807994,64,FLEN)
NAN_BOXED(9215850095457932999,64,FLEN)
NAN_BOXED(4595934823227359370,64,FLEN)
NAN_BOXED(9205348889612940327,64,FLEN)
NAN_BOXED(9215850095457932999,64,FLEN)
NAN_BOXED(4595934823227359370,64,FLEN)
NAN_BOXED(9205348889612940327,64,FLEN)
NAN_BOXED(9215850095457932999,64,FLEN)
NAN_BOXED(4595934823227359370,64,FLEN)
NAN_BOXED(9205348889612940327,64,FLEN)
NAN_BOXED(9215850095457932999,64,FLEN)
NAN_BOXED(4595934823227359370,64,FLEN)
NAN_BOXED(9205348889612940327,64,FLEN)
NAN_BOXED(9215850095457932999,64,FLEN)
NAN_BOXED(4595934823227359370,64,FLEN)
NAN_BOXED(9205348889612940327,64,FLEN)
NAN_BOXED(9215865070762694612,64,FLEN)
NAN_BOXED(4609250062151620891,64,FLEN)
NAN_BOXED(9218621484738084588,64,FLEN)
NAN_BOXED(9215865070762694612,64,FLEN)
NAN_BOXED(4609250062151620891,64,FLEN)
NAN_BOXED(9218621484738084588,64,FLEN)
NAN_BOXED(9215865070762694612,64,FLEN)
NAN_BOXED(4609250062151620891,64,FLEN)
NAN_BOXED(9218621484738084588,64,FLEN)
NAN_BOXED(9215865070762694612,64,FLEN)
NAN_BOXED(4609250062151620891,64,FLEN)
NAN_BOXED(9218621484738084588,64,FLEN)
NAN_BOXED(9215865070762694612,64,FLEN)
NAN_BOXED(4609250062151620891,64,FLEN)
NAN_BOXED(9218621484738084588,64,FLEN)
NAN_BOXED(9215898017033051598,64,FLEN)
NAN_BOXED(4608655999288007268,64,FLEN)
NAN_BOXED(9217873254747263407,64,FLEN)
NAN_BOXED(9215898017033051598,64,FLEN)
NAN_BOXED(4608655999288007268,64,FLEN)
NAN_BOXED(9217873254747263407,64,FLEN)
NAN_BOXED(9215898017033051598,64,FLEN)
NAN_BOXED(4608655999288007268,64,FLEN)
NAN_BOXED(9217873254747263407,64,FLEN)
NAN_BOXED(9215898017033051598,64,FLEN)
NAN_BOXED(4608655999288007268,64,FLEN)
NAN_BOXED(9217873254747263407,64,FLEN)
NAN_BOXED(9215898017033051598,64,FLEN)
NAN_BOXED(4608655999288007268,64,FLEN)
NAN_BOXED(9217873254747263407,64,FLEN)
NAN_BOXED(9215949536046416888,64,FLEN)
NAN_BOXED(4607538897467864774,64,FLEN)
NAN_BOXED(9216431450196511131,64,FLEN)
NAN_BOXED(9215949536046416888,64,FLEN)
NAN_BOXED(4607538897467864774,64,FLEN)
NAN_BOXED(9216431450196511131,64,FLEN)
NAN_BOXED(9215949536046416888,64,FLEN)
NAN_BOXED(4607538897467864774,64,FLEN)
NAN_BOXED(9216431450196511131,64,FLEN)
NAN_BOXED(9215949536046416888,64,FLEN)
NAN_BOXED(4607538897467864774,64,FLEN)
NAN_BOXED(9216431450196511131,64,FLEN)
NAN_BOXED(9215949536046416888,64,FLEN)
NAN_BOXED(4607538897467864774,64,FLEN)
NAN_BOXED(9216431450196511131,64,FLEN)
NAN_BOXED(9215971848371867283,64,FLEN)
NAN_BOXED(4604549543424447597,64,FLEN)
NAN_BOXED(9214006499924202295,64,FLEN)
NAN_BOXED(9215971848371867283,64,FLEN)
NAN_BOXED(4604549543424447597,64,FLEN)
NAN_BOXED(9214006499924202295,64,FLEN)
NAN_BOXED(9215971848371867283,64,FLEN)
NAN_BOXED(4604549543424447597,64,FLEN)
NAN_BOXED(9214006499924202295,64,FLEN)
NAN_BOXED(9215971848371867283,64,FLEN)
NAN_BOXED(4604549543424447597,64,FLEN)
NAN_BOXED(9214006499924202295,64,FLEN)
NAN_BOXED(9215971848371867283,64,FLEN)
NAN_BOXED(4604549543424447597,64,FLEN)
NAN_BOXED(9214006499924202295,64,FLEN)
NAN_BOXED(9216021158138407848,64,FLEN)
NAN_BOXED(4607795689901231720,64,FLEN)
NAN_BOXED(9216859976269681977,64,FLEN)
NAN_BOXED(9216021158138407848,64,FLEN)
NAN_BOXED(4607795689901231720,64,FLEN)
NAN_BOXED(9216859976269681977,64,FLEN)
NAN_BOXED(9216021158138407848,64,FLEN)
NAN_BOXED(4607795689901231720,64,FLEN)
NAN_BOXED(9216859976269681977,64,FLEN)
NAN_BOXED(9216021158138407848,64,FLEN)
NAN_BOXED(4607795689901231720,64,FLEN)
NAN_BOXED(9216859976269681977,64,FLEN)
NAN_BOXED(9216021158138407848,64,FLEN)
NAN_BOXED(4607795689901231720,64,FLEN)
NAN_BOXED(9216859976269681977,64,FLEN)
NAN_BOXED(9216054322898392544,64,FLEN)
NAN_BOXED(4607781464767236057,64,FLEN)
NAN_BOXED(9216878095626068652,64,FLEN)
NAN_BOXED(9216054322898392544,64,FLEN)
NAN_BOXED(4607781464767236057,64,FLEN)
NAN_BOXED(9216878095626068652,64,FLEN)
NAN_BOXED(9216054322898392544,64,FLEN)
NAN_BOXED(4607781464767236057,64,FLEN)
NAN_BOXED(9216878095626068652,64,FLEN)
NAN_BOXED(9216054322898392544,64,FLEN)
NAN_BOXED(4607781464767236057,64,FLEN)
NAN_BOXED(9216878095626068652,64,FLEN)
NAN_BOXED(9216054322898392544,64,FLEN)
NAN_BOXED(4607781464767236057,64,FLEN)
NAN_BOXED(9216878095626068652,64,FLEN)
NAN_BOXED(9216110436327671056,64,FLEN)
NAN_BOXED(4607815519463540839,64,FLEN)
NAN_BOXED(9216988927302090621,64,FLEN)
NAN_BOXED(9216110436327671056,64,FLEN)
NAN_BOXED(4607815519463540839,64,FLEN)
NAN_BOXED(9216988927302090621,64,FLEN)
NAN_BOXED(9216110436327671056,64,FLEN)
NAN_BOXED(4607815519463540839,64,FLEN)
NAN_BOXED(9216988927302090621,64,FLEN)
NAN_BOXED(9216110436327671056,64,FLEN)
NAN_BOXED(4607815519463540839,64,FLEN)
NAN_BOXED(9216988927302090621,64,FLEN)
NAN_BOXED(9216110436327671056,64,FLEN)
NAN_BOXED(4607815519463540839,64,FLEN)
NAN_BOXED(9216988927302090621,64,FLEN)
NAN_BOXED(9216114577851972341,64,FLEN)
NAN_BOXED(4607943696389898976,64,FLEN)
NAN_BOXED(9217171627302615764,64,FLEN)
NAN_BOXED(9216114577851972341,64,FLEN)
NAN_BOXED(4607943696389898976,64,FLEN)
NAN_BOXED(9217171627302615764,64,FLEN)
NAN_BOXED(9216114577851972341,64,FLEN)
NAN_BOXED(4607943696389898976,64,FLEN)
NAN_BOXED(9217171627302615764,64,FLEN)
NAN_BOXED(9216114577851972341,64,FLEN)
NAN_BOXED(4607943696389898976,64,FLEN)
NAN_BOXED(9217171627302615764,64,FLEN)
NAN_BOXED(9216114577851972341,64,FLEN)
NAN_BOXED(4607943696389898976,64,FLEN)
NAN_BOXED(9217171627302615764,64,FLEN)
NAN_BOXED(9216150278357036033,64,FLEN)
NAN_BOXED(4580826656326252331,64,FLEN)
NAN_BOXED(9190058484611265407,64,FLEN)
NAN_BOXED(9216150278357036033,64,FLEN)
NAN_BOXED(4580826656326252331,64,FLEN)
NAN_BOXED(9190058484611265407,64,FLEN)
NAN_BOXED(9216150278357036033,64,FLEN)
NAN_BOXED(4580826656326252331,64,FLEN)
NAN_BOXED(9190058484611265407,64,FLEN)
NAN_BOXED(9216150278357036033,64,FLEN)
NAN_BOXED(4580826656326252331,64,FLEN)
NAN_BOXED(9190058484611265407,64,FLEN)
NAN_BOXED(9216150278357036033,64,FLEN)
NAN_BOXED(4580826656326252331,64,FLEN)
NAN_BOXED(9190058484611265407,64,FLEN)
NAN_BOXED(9216211346797581011,64,FLEN)
NAN_BOXED(4607754137167974386,64,FLEN)
NAN_BOXED(9217017473930123272,64,FLEN)
NAN_BOXED(9216211346797581011,64,FLEN)
NAN_BOXED(4607754137167974386,64,FLEN)
NAN_BOXED(9217017473930123272,64,FLEN)
NAN_BOXED(9216211346797581011,64,FLEN)
NAN_BOXED(4607754137167974386,64,FLEN)
NAN_BOXED(9217017473930123272,64,FLEN)
NAN_BOXED(9216211346797581011,64,FLEN)
NAN_BOXED(4607754137167974386,64,FLEN)
NAN_BOXED(9217017473930123272,64,FLEN)
NAN_BOXED(9216211346797581011,64,FLEN)
NAN_BOXED(4607754137167974386,64,FLEN)
NAN_BOXED(9217017473930123272,64,FLEN)
NAN_BOXED(9216313747074665791,64,FLEN)
NAN_BOXED(4606286831638794410,64,FLEN)
NAN_BOXED(9215672173135198941,64,FLEN)
NAN_BOXED(9216313747074665791,64,FLEN)
NAN_BOXED(4606286831638794410,64,FLEN)
NAN_BOXED(9215672173135198941,64,FLEN)
NAN_BOXED(9216313747074665791,64,FLEN)
NAN_BOXED(4606286831638794410,64,FLEN)
NAN_BOXED(9215672173135198941,64,FLEN)
NAN_BOXED(9216313747074665791,64,FLEN)
NAN_BOXED(4606286831638794410,64,FLEN)
NAN_BOXED(9215672173135198941,64,FLEN)
NAN_BOXED(9216313747074665791,64,FLEN)
NAN_BOXED(4606286831638794410,64,FLEN)
NAN_BOXED(9215672173135198941,64,FLEN)
NAN_BOXED(9216331621288114310,64,FLEN)
NAN_BOXED(4589252582876023765,64,FLEN)
NAN_BOXED(9198438715004302159,64,FLEN)
NAN_BOXED(9216331621288114310,64,FLEN)
NAN_BOXED(4589252582876023765,64,FLEN)
NAN_BOXED(9198438715004302159,64,FLEN)
NAN_BOXED(9216331621288114310,64,FLEN)
NAN_BOXED(4589252582876023765,64,FLEN)
NAN_BOXED(9198438715004302159,64,FLEN)
NAN_BOXED(9216331621288114310,64,FLEN)
NAN_BOXED(4589252582876023765,64,FLEN)
NAN_BOXED(9198438715004302159,64,FLEN)
NAN_BOXED(9216331621288114310,64,FLEN)
NAN_BOXED(4589252582876023765,64,FLEN)
NAN_BOXED(9198438715004302159,64,FLEN)
NAN_BOXED(9216343341463304390,64,FLEN)
NAN_BOXED(4596933864488631340,64,FLEN)
NAN_BOXED(9206442791043764043,64,FLEN)
NAN_BOXED(9216343341463304390,64,FLEN)
NAN_BOXED(4596933864488631340,64,FLEN)
NAN_BOXED(9206442791043764043,64,FLEN)
NAN_BOXED(9216343341463304390,64,FLEN)
NAN_BOXED(4596933864488631340,64,FLEN)
NAN_BOXED(9206442791043764043,64,FLEN)
NAN_BOXED(9216343341463304390,64,FLEN)
NAN_BOXED(4596933864488631340,64,FLEN)
NAN_BOXED(9206442791043764043,64,FLEN)
NAN_BOXED(9216343341463304390,64,FLEN)
NAN_BOXED(4596933864488631340,64,FLEN)
NAN_BOXED(9206442791043764043,64,FLEN)
NAN_BOXED(9216383786270010047,64,FLEN)
NAN_BOXED(4608053566309992643,64,FLEN)
NAN_BOXED(9217645466298890308,64,FLEN)
NAN_BOXED(9216383786270010047,64,FLEN)
NAN_BOXED(4608053566309992643,64,FLEN)
NAN_BOXED(9217645466298890308,64,FLEN)
NAN_BOXED(9216383786270010047,64,FLEN)
NAN_BOXED(4608053566309992643,64,FLEN)
NAN_BOXED(9217645466298890308,64,FLEN)
NAN_BOXED(9216383786270010047,64,FLEN)
NAN_BOXED(4608053566309992643,64,FLEN)
NAN_BOXED(9217645466298890308,64,FLEN)
NAN_BOXED(9216383786270010047,64,FLEN)
NAN_BOXED(4608053566309992643,64,FLEN)
NAN_BOXED(9217645466298890308,64,FLEN)
NAN_BOXED(9216418153675243162,64,FLEN)
NAN_BOXED(4608350308721848260,64,FLEN)
NAN_BOXED(9218118517029213729,64,FLEN)
NAN_BOXED(9216418153675243162,64,FLEN)
NAN_BOXED(4608350308721848260,64,FLEN)
NAN_BOXED(9218118517029213729,64,FLEN)
NAN_BOXED(9216418153675243162,64,FLEN)
NAN_BOXED(4608350308721848260,64,FLEN)
NAN_BOXED(9218118517029213729,64,FLEN)
NAN_BOXED(9216418153675243162,64,FLEN)
NAN_BOXED(4608350308721848260,64,FLEN)
NAN_BOXED(9218118517029213729,64,FLEN)
NAN_BOXED(9216418153675243162,64,FLEN)
NAN_BOXED(4608350308721848260,64,FLEN)
NAN_BOXED(9218118517029213729,64,FLEN)
NAN_BOXED(9216434915661148811,64,FLEN)
NAN_BOXED(4603284717525668376,64,FLEN)
NAN_BOXED(9212815715361938005,64,FLEN)
NAN_BOXED(9216434915661148811,64,FLEN)
NAN_BOXED(4603284717525668376,64,FLEN)
NAN_BOXED(9212815715361938005,64,FLEN)
NAN_BOXED(9216434915661148811,64,FLEN)
NAN_BOXED(4603284717525668376,64,FLEN)
NAN_BOXED(9212815715361938005,64,FLEN)
NAN_BOXED(9216434915661148811,64,FLEN)
NAN_BOXED(4603284717525668376,64,FLEN)
NAN_BOXED(9212815715361938005,64,FLEN)
NAN_BOXED(9216434915661148811,64,FLEN)
NAN_BOXED(4603284717525668376,64,FLEN)
NAN_BOXED(9212815715361938005,64,FLEN)
NAN_BOXED(9216450183250053663,64,FLEN)
NAN_BOXED(4594784469665908006,64,FLEN)
NAN_BOXED(9204567527786149063,64,FLEN)
NAN_BOXED(9216450183250053663,64,FLEN)
NAN_BOXED(4594784469665908006,64,FLEN)
NAN_BOXED(9204567527786149063,64,FLEN)
NAN_BOXED(9216450183250053663,64,FLEN)
NAN_BOXED(4594784469665908006,64,FLEN)
NAN_BOXED(9204567527786149063,64,FLEN)
NAN_BOXED(9216450183250053663,64,FLEN)
NAN_BOXED(4594784469665908006,64,FLEN)
NAN_BOXED(9204567527786149063,64,FLEN)
NAN_BOXED(9216450183250053663,64,FLEN)
NAN_BOXED(4594784469665908006,64,FLEN)
NAN_BOXED(9204567527786149063,64,FLEN)
NAN_BOXED(9216517163550369518,64,FLEN)
NAN_BOXED(4603754982302346769,64,FLEN)
NAN_BOXED(9213604038719475261,64,FLEN)
NAN_BOXED(9216517163550369518,64,FLEN)
NAN_BOXED(4603754982302346769,64,FLEN)
NAN_BOXED(9213604038719475261,64,FLEN)
NAN_BOXED(9216517163550369518,64,FLEN)
NAN_BOXED(4603754982302346769,64,FLEN)
NAN_BOXED(9213604038719475261,64,FLEN)
NAN_BOXED(9216517163550369518,64,FLEN)
NAN_BOXED(4603754982302346769,64,FLEN)
NAN_BOXED(9213604038719475261,64,FLEN)
NAN_BOXED(9216517163550369518,64,FLEN)
NAN_BOXED(4603754982302346769,64,FLEN)
NAN_BOXED(9213604038719475261,64,FLEN)
NAN_BOXED(9216583428189604242,64,FLEN)
NAN_BOXED(4602975808709182694,64,FLEN)
NAN_BOXED(9212523122887266809,64,FLEN)
NAN_BOXED(9216583428189604242,64,FLEN)
NAN_BOXED(4602975808709182694,64,FLEN)
NAN_BOXED(9212523122887266809,64,FLEN)
NAN_BOXED(9216583428189604242,64,FLEN)
NAN_BOXED(4602975808709182694,64,FLEN)
NAN_BOXED(9212523122887266809,64,FLEN)
NAN_BOXED(9216583428189604242,64,FLEN)
NAN_BOXED(4602975808709182694,64,FLEN)
NAN_BOXED(9212523122887266809,64,FLEN)
NAN_BOXED(9216583428189604242,64,FLEN)
NAN_BOXED(4602975808709182694,64,FLEN)
NAN_BOXED(9212523122887266809,64,FLEN)
NAN_BOXED(9216585255341293830,64,FLEN)
NAN_BOXED(4600086195112493684,64,FLEN)
NAN_BOXED(9210146220656058795,64,FLEN)
NAN_BOXED(9216585255341293830,64,FLEN)
NAN_BOXED(4600086195112493684,64,FLEN)
NAN_BOXED(9210146220656058795,64,FLEN)
NAN_BOXED(9216585255341293830,64,FLEN)
NAN_BOXED(4600086195112493684,64,FLEN)
NAN_BOXED(9210146220656058795,64,FLEN)
NAN_BOXED(9216585255341293830,64,FLEN)
NAN_BOXED(4600086195112493684,64,FLEN)
NAN_BOXED(9210146220656058795,64,FLEN)
NAN_BOXED(9216585255341293830,64,FLEN)
NAN_BOXED(4600086195112493684,64,FLEN)
NAN_BOXED(9210146220656058795,64,FLEN)
NAN_BOXED(9216869356991755204,64,FLEN)
NAN_BOXED(4581976612748568625,64,FLEN)
NAN_BOXED(9192260089723043487,64,FLEN)
NAN_BOXED(9216869356991755204,64,FLEN)
NAN_BOXED(4581976612748568625,64,FLEN)
NAN_BOXED(9192260089723043487,64,FLEN)
NAN_BOXED(9216869356991755204,64,FLEN)
NAN_BOXED(4581976612748568625,64,FLEN)
NAN_BOXED(9192260089723043487,64,FLEN)
NAN_BOXED(9216869356991755204,64,FLEN)
NAN_BOXED(4581976612748568625,64,FLEN)
NAN_BOXED(9192260089723043487,64,FLEN)
NAN_BOXED(9216869356991755204,64,FLEN)
NAN_BOXED(4581976612748568625,64,FLEN)
NAN_BOXED(9192260089723043487,64,FLEN)
NAN_BOXED(9216873324754372301,64,FLEN)
NAN_BOXED(4603347906579261814,64,FLEN)
NAN_BOXED(9213411491568942595,64,FLEN)
NAN_BOXED(9216873324754372301,64,FLEN)
NAN_BOXED(4603347906579261814,64,FLEN)
NAN_BOXED(9213411491568942595,64,FLEN)
NAN_BOXED(9216873324754372301,64,FLEN)
NAN_BOXED(4603347906579261814,64,FLEN)
NAN_BOXED(9213411491568942595,64,FLEN)
NAN_BOXED(9216873324754372301,64,FLEN)
NAN_BOXED(4603347906579261814,64,FLEN)
NAN_BOXED(9213411491568942595,64,FLEN)
NAN_BOXED(9216873324754372301,64,FLEN)
NAN_BOXED(4603347906579261814,64,FLEN)
NAN_BOXED(9213411491568942595,64,FLEN)
NAN_BOXED(9216907492115831872,64,FLEN)
NAN_BOXED(4607362164484187308,64,FLEN)
NAN_BOXED(9217188719106815112,64,FLEN)
NAN_BOXED(9216907492115831872,64,FLEN)
NAN_BOXED(4607362164484187308,64,FLEN)
NAN_BOXED(9217188719106815112,64,FLEN)
NAN_BOXED(9216907492115831872,64,FLEN)
NAN_BOXED(4607362164484187308,64,FLEN)
NAN_BOXED(9217188719106815112,64,FLEN)
NAN_BOXED(9216907492115831872,64,FLEN)
NAN_BOXED(4607362164484187308,64,FLEN)
NAN_BOXED(9217188719106815112,64,FLEN)
NAN_BOXED(9216907492115831872,64,FLEN)
NAN_BOXED(4607362164484187308,64,FLEN)
NAN_BOXED(9217188719106815112,64,FLEN)
NAN_BOXED(9216944569669688263,64,FLEN)
NAN_BOXED(4598838986179239547,64,FLEN)
NAN_BOXED(9208981352923783895,64,FLEN)
NAN_BOXED(9216944569669688263,64,FLEN)
NAN_BOXED(4598838986179239547,64,FLEN)
NAN_BOXED(9208981352923783895,64,FLEN)
NAN_BOXED(9216944569669688263,64,FLEN)
NAN_BOXED(4598838986179239547,64,FLEN)
NAN_BOXED(9208981352923783895,64,FLEN)
NAN_BOXED(9216944569669688263,64,FLEN)
NAN_BOXED(4598838986179239547,64,FLEN)
NAN_BOXED(9208981352923783895,64,FLEN)
NAN_BOXED(9216944569669688263,64,FLEN)
NAN_BOXED(4598838986179239547,64,FLEN)
NAN_BOXED(9208981352923783895,64,FLEN)
NAN_BOXED(9216944663111952431,64,FLEN)
NAN_BOXED(4604691261819338778,64,FLEN)
NAN_BOXED(9214985572002297669,64,FLEN)
NAN_BOXED(9216944663111952431,64,FLEN)
NAN_BOXED(4604691261819338778,64,FLEN)
NAN_BOXED(9214985572002297669,64,FLEN)
NAN_BOXED(9216944663111952431,64,FLEN)
NAN_BOXED(4604691261819338778,64,FLEN)
NAN_BOXED(9214985572002297669,64,FLEN)
NAN_BOXED(9216944663111952431,64,FLEN)
NAN_BOXED(4604691261819338778,64,FLEN)
NAN_BOXED(9214985572002297669,64,FLEN)
NAN_BOXED(9216944663111952431,64,FLEN)
NAN_BOXED(4604691261819338778,64,FLEN)
NAN_BOXED(9214985572002297669,64,FLEN)
NAN_BOXED(9216954795935674713,64,FLEN)
NAN_BOXED(4598565739123396546,64,FLEN)
NAN_BOXED(9208562698708709427,64,FLEN)
NAN_BOXED(9216954795935674713,64,FLEN)
NAN_BOXED(4598565739123396546,64,FLEN)
NAN_BOXED(9208562698708709427,64,FLEN)
NAN_BOXED(9216954795935674713,64,FLEN)
NAN_BOXED(4598565739123396546,64,FLEN)
NAN_BOXED(9208562698708709427,64,FLEN)
NAN_BOXED(9216954795935674713,64,FLEN)
NAN_BOXED(4598565739123396546,64,FLEN)
NAN_BOXED(9208562698708709427,64,FLEN)
NAN_BOXED(9216954795935674713,64,FLEN)
NAN_BOXED(4598565739123396546,64,FLEN)
NAN_BOXED(9208562698708709427,64,FLEN)
NAN_BOXED(9216981745452017477,64,FLEN)
NAN_BOXED(4606661035494403154,64,FLEN)
NAN_BOXED(9216569573630096022,64,FLEN)
NAN_BOXED(9216981745452017477,64,FLEN)
NAN_BOXED(4606661035494403154,64,FLEN)
NAN_BOXED(9216569573630096022,64,FLEN)
NAN_BOXED(9216981745452017477,64,FLEN)
NAN_BOXED(4606661035494403154,64,FLEN)
NAN_BOXED(9216569573630096022,64,FLEN)
NAN_BOXED(9216981745452017477,64,FLEN)
NAN_BOXED(4606661035494403154,64,FLEN)
NAN_BOXED(9216569573630096022,64,FLEN)
NAN_BOXED(9216981745452017477,64,FLEN)
NAN_BOXED(4606661035494403154,64,FLEN)
NAN_BOXED(9216569573630096022,64,FLEN)
NAN_BOXED(9217007010183878526,64,FLEN)
NAN_BOXED(4607344853316736476,64,FLEN)
NAN_BOXED(9217264741810077908,64,FLEN)
NAN_BOXED(9217007010183878526,64,FLEN)
NAN_BOXED(4607344853316736476,64,FLEN)
NAN_BOXED(9217264741810077908,64,FLEN)
NAN_BOXED(9217007010183878526,64,FLEN)
NAN_BOXED(4607344853316736476,64,FLEN)
NAN_BOXED(9217264741810077908,64,FLEN)
NAN_BOXED(9217007010183878526,64,FLEN)
NAN_BOXED(4607344853316736476,64,FLEN)
NAN_BOXED(9217264741810077908,64,FLEN)
NAN_BOXED(9217007010183878526,64,FLEN)
NAN_BOXED(4607344853316736476,64,FLEN)
NAN_BOXED(9217264741810077908,64,FLEN)
NAN_BOXED(9217007901227482065,64,FLEN)
NAN_BOXED(4607995077957128695,64,FLEN)
NAN_BOXED(9218297492180798975,64,FLEN)
NAN_BOXED(9217007901227482065,64,FLEN)
NAN_BOXED(4607995077957128695,64,FLEN)
NAN_BOXED(9218297492180798975,64,FLEN)
NAN_BOXED(9217007901227482065,64,FLEN)
NAN_BOXED(4607995077957128695,64,FLEN)
NAN_BOXED(9218297492180798975,64,FLEN)
NAN_BOXED(9217007901227482065,64,FLEN)
NAN_BOXED(4607995077957128695,64,FLEN)
NAN_BOXED(9218297492180798975,64,FLEN)
NAN_BOXED(9217007901227482065,64,FLEN)
NAN_BOXED(4607995077957128695,64,FLEN)
NAN_BOXED(9218297492180798975,64,FLEN)
NAN_BOXED(9217031858818010715,64,FLEN)
NAN_BOXED(4604021101416211150,64,FLEN)
NAN_BOXED(9214515137727473573,64,FLEN)
NAN_BOXED(9217031858818010715,64,FLEN)
NAN_BOXED(4604021101416211150,64,FLEN)
NAN_BOXED(9214515137727473573,64,FLEN)
NAN_BOXED(9217031858818010715,64,FLEN)
NAN_BOXED(4604021101416211150,64,FLEN)
NAN_BOXED(9214515137727473573,64,FLEN)
NAN_BOXED(9217031858818010715,64,FLEN)
NAN_BOXED(4604021101416211150,64,FLEN)
NAN_BOXED(9214515137727473573,64,FLEN)
NAN_BOXED(9217031858818010715,64,FLEN)
NAN_BOXED(4604021101416211150,64,FLEN)
NAN_BOXED(9214515137727473573,64,FLEN)
NAN_BOXED(9217097309390680106,64,FLEN)
NAN_BOXED(4605863061329267179,64,FLEN)
NAN_BOXED(9216037383367702849,64,FLEN)
NAN_BOXED(9217097309390680106,64,FLEN)
NAN_BOXED(4605863061329267179,64,FLEN)
NAN_BOXED(9216037383367702849,64,FLEN)
NAN_BOXED(9217097309390680106,64,FLEN)
NAN_BOXED(4605863061329267179,64,FLEN)
NAN_BOXED(9216037383367702849,64,FLEN)
NAN_BOXED(9217097309390680106,64,FLEN)
NAN_BOXED(4605863061329267179,64,FLEN)
NAN_BOXED(9216037383367702849,64,FLEN)
NAN_BOXED(9217097309390680106,64,FLEN)
NAN_BOXED(4605863061329267179,64,FLEN)
NAN_BOXED(9216037383367702849,64,FLEN)
NAN_BOXED(9217109700361746872,64,FLEN)
NAN_BOXED(4600910819762607808,64,FLEN)
NAN_BOXED(9211183319149874047,64,FLEN)
NAN_BOXED(9217109700361746872,64,FLEN)
NAN_BOXED(4600910819762607808,64,FLEN)
NAN_BOXED(9211183319149874047,64,FLEN)
NAN_BOXED(9217109700361746872,64,FLEN)
NAN_BOXED(4600910819762607808,64,FLEN)
NAN_BOXED(9211183319149874047,64,FLEN)
NAN_BOXED(9217109700361746872,64,FLEN)
NAN_BOXED(4600910819762607808,64,FLEN)
NAN_BOXED(9211183319149874047,64,FLEN)
NAN_BOXED(9217109700361746872,64,FLEN)
NAN_BOXED(4600910819762607808,64,FLEN)
NAN_BOXED(9211183319149874047,64,FLEN)
NAN_BOXED(9217110065419419538,64,FLEN)
NAN_BOXED(4603158083662263696,64,FLEN)
NAN_BOXED(9213377872194491101,64,FLEN)
NAN_BOXED(9217110065419419538,64,FLEN)
NAN_BOXED(4603158083662263696,64,FLEN)
NAN_BOXED(9213377872194491101,64,FLEN)
NAN_BOXED(9217110065419419538,64,FLEN)
NAN_BOXED(4603158083662263696,64,FLEN)
NAN_BOXED(9213377872194491101,64,FLEN)
NAN_BOXED(9217110065419419538,64,FLEN)
NAN_BOXED(4603158083662263696,64,FLEN)
NAN_BOXED(9213377872194491101,64,FLEN)
NAN_BOXED(9217110065419419538,64,FLEN)
NAN_BOXED(4603158083662263696,64,FLEN)
NAN_BOXED(9213377872194491101,64,FLEN)
NAN_BOXED(9217113150714438040,64,FLEN)
NAN_BOXED(4599612570369218706,64,FLEN)
NAN_BOXED(9210140840432606859,64,FLEN)
NAN_BOXED(9217113150714438040,64,FLEN)
NAN_BOXED(4599612570369218706,64,FLEN)
NAN_BOXED(9210140840432606859,64,FLEN)
NAN_BOXED(9217113150714438040,64,FLEN)
NAN_BOXED(4599612570369218706,64,FLEN)
NAN_BOXED(9210140840432606859,64,FLEN)
NAN_BOXED(9217113150714438040,64,FLEN)
NAN_BOXED(4599612570369218706,64,FLEN)
NAN_BOXED(9210140840432606859,64,FLEN)
NAN_BOXED(9217113150714438040,64,FLEN)
NAN_BOXED(4599612570369218706,64,FLEN)
NAN_BOXED(9210140840432606859,64,FLEN)
NAN_BOXED(9217114355789247805,64,FLEN)
NAN_BOXED(4601998632751179751,64,FLEN)
NAN_BOXED(9212063030713309613,64,FLEN)
NAN_BOXED(9217114355789247805,64,FLEN)
NAN_BOXED(4601998632751179751,64,FLEN)
NAN_BOXED(9212063030713309613,64,FLEN)
NAN_BOXED(9217114355789247805,64,FLEN)
NAN_BOXED(4601998632751179751,64,FLEN)
NAN_BOXED(9212063030713309613,64,FLEN)
NAN_BOXED(9217114355789247805,64,FLEN)
NAN_BOXED(4601998632751179751,64,FLEN)
NAN_BOXED(9212063030713309613,64,FLEN)
NAN_BOXED(9217114355789247805,64,FLEN)
NAN_BOXED(4601998632751179751,64,FLEN)
NAN_BOXED(9212063030713309613,64,FLEN)
NAN_BOXED(9217116581304452983,64,FLEN)
NAN_BOXED(4608137758021720871,64,FLEN)
NAN_BOXED(9218655642194692322,64,FLEN)
NAN_BOXED(9217116581304452983,64,FLEN)
NAN_BOXED(4608137758021720871,64,FLEN)
NAN_BOXED(9218655642194692322,64,FLEN)
NAN_BOXED(9217116581304452983,64,FLEN)
NAN_BOXED(4608137758021720871,64,FLEN)
NAN_BOXED(9218655642194692322,64,FLEN)
NAN_BOXED(9217116581304452983,64,FLEN)
NAN_BOXED(4608137758021720871,64,FLEN)
NAN_BOXED(9218655642194692322,64,FLEN)
NAN_BOXED(9217116581304452983,64,FLEN)
NAN_BOXED(4608137758021720871,64,FLEN)
NAN_BOXED(9218655642194692322,64,FLEN)
NAN_BOXED(9217142392291086385,64,FLEN)
NAN_BOXED(4604593903876248810,64,FLEN)
NAN_BOXED(9215049913143855656,64,FLEN)
NAN_BOXED(9217142392291086385,64,FLEN)
NAN_BOXED(4604593903876248810,64,FLEN)
NAN_BOXED(9215049913143855656,64,FLEN)
NAN_BOXED(9217142392291086385,64,FLEN)
NAN_BOXED(4604593903876248810,64,FLEN)
NAN_BOXED(9215049913143855656,64,FLEN)
NAN_BOXED(9217142392291086385,64,FLEN)
NAN_BOXED(4604593903876248810,64,FLEN)
NAN_BOXED(9215049913143855656,64,FLEN)
NAN_BOXED(9217142392291086385,64,FLEN)
NAN_BOXED(4604593903876248810,64,FLEN)
NAN_BOXED(9215049913143855656,64,FLEN)
NAN_BOXED(9217322182782092960,64,FLEN)
NAN_BOXED(4592278000250300023,64,FLEN)
NAN_BOXED(9202657005149020791,64,FLEN)
NAN_BOXED(9217322182782092960,64,FLEN)
NAN_BOXED(4592278000250300023,64,FLEN)
NAN_BOXED(9202657005149020791,64,FLEN)
NAN_BOXED(9217322182782092960,64,FLEN)
NAN_BOXED(4592278000250300023,64,FLEN)
NAN_BOXED(9202657005149020791,64,FLEN)
NAN_BOXED(9217322182782092960,64,FLEN)
NAN_BOXED(4592278000250300023,64,FLEN)
NAN_BOXED(9202657005149020791,64,FLEN)
NAN_BOXED(9217322182782092960,64,FLEN)
NAN_BOXED(4592278000250300023,64,FLEN)
NAN_BOXED(9202657005149020791,64,FLEN)
NAN_BOXED(9217359413552251105,64,FLEN)
NAN_BOXED(4589119766491221789,64,FLEN)
NAN_BOXED(9199304845457373823,64,FLEN)
NAN_BOXED(9217359413552251105,64,FLEN)
NAN_BOXED(4589119766491221789,64,FLEN)
NAN_BOXED(9199304845457373823,64,FLEN)
NAN_BOXED(9217359413552251105,64,FLEN)
NAN_BOXED(4589119766491221789,64,FLEN)
NAN_BOXED(9199304845457373823,64,FLEN)
NAN_BOXED(9217359413552251105,64,FLEN)
NAN_BOXED(4589119766491221789,64,FLEN)
NAN_BOXED(9199304845457373823,64,FLEN)
NAN_BOXED(9217359413552251105,64,FLEN)
NAN_BOXED(4589119766491221789,64,FLEN)
NAN_BOXED(9199304845457373823,64,FLEN)
NAN_BOXED(9217409695618857549,64,FLEN)
NAN_BOXED(4593595902935140144,64,FLEN)
NAN_BOXED(9203835442335290007,64,FLEN)
NAN_BOXED(9217409695618857549,64,FLEN)
NAN_BOXED(4593595902935140144,64,FLEN)
NAN_BOXED(9203835442335290007,64,FLEN)
NAN_BOXED(9217409695618857549,64,FLEN)
NAN_BOXED(4593595902935140144,64,FLEN)
NAN_BOXED(9203835442335290007,64,FLEN)
NAN_BOXED(9217409695618857549,64,FLEN)
NAN_BOXED(4593595902935140144,64,FLEN)
NAN_BOXED(9203835442335290007,64,FLEN)
NAN_BOXED(9217409695618857549,64,FLEN)
NAN_BOXED(4593595902935140144,64,FLEN)
NAN_BOXED(9203835442335290007,64,FLEN)
NAN_BOXED(9217465857099359328,64,FLEN)
NAN_BOXED(4600831912185293875,64,FLEN)
NAN_BOXED(9211402946547024129,64,FLEN)
NAN_BOXED(9217465857099359328,64,FLEN)
NAN_BOXED(4600831912185293875,64,FLEN)
NAN_BOXED(9211402946547024129,64,FLEN)
NAN_BOXED(9217465857099359328,64,FLEN)
NAN_BOXED(4600831912185293875,64,FLEN)
NAN_BOXED(9211402946547024129,64,FLEN)
NAN_BOXED(9217465857099359328,64,FLEN)
NAN_BOXED(4600831912185293875,64,FLEN)
NAN_BOXED(9211402946547024129,64,FLEN)
NAN_BOXED(9217465857099359328,64,FLEN)
NAN_BOXED(4600831912185293875,64,FLEN)
NAN_BOXED(9211402946547024129,64,FLEN)
NAN_BOXED(9217548807156000576,64,FLEN)
NAN_BOXED(4589922088950193195,64,FLEN)
NAN_BOXED(9200821591227064591,64,FLEN)
NAN_BOXED(9217548807156000576,64,FLEN)
NAN_BOXED(4589922088950193195,64,FLEN)
NAN_BOXED(9200821591227064591,64,FLEN)
NAN_BOXED(9217548807156000576,64,FLEN)
NAN_BOXED(4589922088950193195,64,FLEN)
NAN_BOXED(9200821591227064591,64,FLEN)
NAN_BOXED(9217548807156000576,64,FLEN)
NAN_BOXED(4589922088950193195,64,FLEN)
NAN_BOXED(9200821591227064591,64,FLEN)
NAN_BOXED(9217548807156000576,64,FLEN)
NAN_BOXED(4589922088950193195,64,FLEN)
NAN_BOXED(9200821591227064591,64,FLEN)
NAN_BOXED(9217562362570795895,64,FLEN)
NAN_BOXED(4600788152089233004,64,FLEN)
NAN_BOXED(9211442249044802289,64,FLEN)
NAN_BOXED(9217562362570795895,64,FLEN)
NAN_BOXED(4600788152089233004,64,FLEN)
NAN_BOXED(9211442249044802289,64,FLEN)
NAN_BOXED(9217562362570795895,64,FLEN)
NAN_BOXED(4600788152089233004,64,FLEN)
NAN_BOXED(9211442249044802289,64,FLEN)
NAN_BOXED(9217562362570795895,64,FLEN)
NAN_BOXED(4600788152089233004,64,FLEN)
NAN_BOXED(9211442249044802289,64,FLEN)
NAN_BOXED(9217562362570795895,64,FLEN)
NAN_BOXED(4600788152089233004,64,FLEN)
NAN_BOXED(9211442249044802289,64,FLEN)
NAN_BOXED(9217590124586100502,64,FLEN)
NAN_BOXED(4599545872315594010,64,FLEN)
NAN_BOXED(9210398209718969117,64,FLEN)
NAN_BOXED(9217590124586100502,64,FLEN)
NAN_BOXED(4599545872315594010,64,FLEN)
NAN_BOXED(9210398209718969117,64,FLEN)
NAN_BOXED(9217590124586100502,64,FLEN)
NAN_BOXED(4599545872315594010,64,FLEN)
NAN_BOXED(9210398209718969117,64,FLEN)
NAN_BOXED(9217590124586100502,64,FLEN)
NAN_BOXED(4599545872315594010,64,FLEN)
NAN_BOXED(9210398209718969117,64,FLEN)
NAN_BOXED(9217590124586100502,64,FLEN)
NAN_BOXED(4599545872315594010,64,FLEN)
NAN_BOXED(9210398209718969117,64,FLEN)
NAN_BOXED(9217600853305588606,64,FLEN)
NAN_BOXED(4606339017181086406,64,FLEN)
NAN_BOXED(9216876143668655049,64,FLEN)
NAN_BOXED(9217600853305588606,64,FLEN)
NAN_BOXED(4606339017181086406,64,FLEN)
NAN_BOXED(9216876143668655049,64,FLEN)
NAN_BOXED(9217600853305588606,64,FLEN)
NAN_BOXED(4606339017181086406,64,FLEN)
NAN_BOXED(9216876143668655049,64,FLEN)
NAN_BOXED(9217600853305588606,64,FLEN)
NAN_BOXED(4606339017181086406,64,FLEN)
NAN_BOXED(9216876143668655049,64,FLEN)
NAN_BOXED(9217600853305588606,64,FLEN)
NAN_BOXED(4606339017181086406,64,FLEN)
NAN_BOXED(9216876143668655049,64,FLEN)
NAN_BOXED(9217623252514008574,64,FLEN)
NAN_BOXED(4603723172271740045,64,FLEN)
NAN_BOXED(9214642223550932123,64,FLEN)
NAN_BOXED(9217623252514008574,64,FLEN)
NAN_BOXED(4603723172271740045,64,FLEN)
NAN_BOXED(9214642223550932123,64,FLEN)
NAN_BOXED(9217623252514008574,64,FLEN)
NAN_BOXED(4603723172271740045,64,FLEN)
NAN_BOXED(9214642223550932123,64,FLEN)
NAN_BOXED(9217623252514008574,64,FLEN)
NAN_BOXED(4603723172271740045,64,FLEN)
NAN_BOXED(9214642223550932123,64,FLEN)
NAN_BOXED(9217623252514008574,64,FLEN)
NAN_BOXED(4603723172271740045,64,FLEN)
NAN_BOXED(9214642223550932123,64,FLEN)
NAN_BOXED(9217781212992494941,64,FLEN)
NAN_BOXED(4604446162505812141,64,FLEN)
NAN_BOXED(9215375239627738597,64,FLEN)
NAN_BOXED(9217781212992494941,64,FLEN)
NAN_BOXED(4604446162505812141,64,FLEN)
NAN_BOXED(9215375239627738597,64,FLEN)
NAN_BOXED(9217781212992494941,64,FLEN)
NAN_BOXED(4604446162505812141,64,FLEN)
NAN_BOXED(9215375239627738597,64,FLEN)
NAN_BOXED(9217781212992494941,64,FLEN)
NAN_BOXED(4604446162505812141,64,FLEN)
NAN_BOXED(9215375239627738597,64,FLEN)
NAN_BOXED(9217781212992494941,64,FLEN)
NAN_BOXED(4604446162505812141,64,FLEN)
NAN_BOXED(9215375239627738597,64,FLEN)
NAN_BOXED(9217788283465426743,64,FLEN)
NAN_BOXED(4603551044908442786,64,FLEN)
NAN_BOXED(9214592388134856585,64,FLEN)
NAN_BOXED(9217788283465426743,64,FLEN)
NAN_BOXED(4603551044908442786,64,FLEN)
NAN_BOXED(9214592388134856585,64,FLEN)
NAN_BOXED(9217788283465426743,64,FLEN)
NAN_BOXED(4603551044908442786,64,FLEN)
NAN_BOXED(9214592388134856585,64,FLEN)
NAN_BOXED(9217788283465426743,64,FLEN)
NAN_BOXED(4603551044908442786,64,FLEN)
NAN_BOXED(9214592388134856585,64,FLEN)
NAN_BOXED(9217788283465426743,64,FLEN)
NAN_BOXED(4603551044908442786,64,FLEN)
NAN_BOXED(9214592388134856585,64,FLEN)
NAN_BOXED(9217907320764103510,64,FLEN)
NAN_BOXED(4602732628076422092,64,FLEN)
NAN_BOXED(9213499855547096767,64,FLEN)
NAN_BOXED(9217907320764103510,64,FLEN)
NAN_BOXED(4602732628076422092,64,FLEN)
NAN_BOXED(9213499855547096767,64,FLEN)
NAN_BOXED(9217907320764103510,64,FLEN)
NAN_BOXED(4602732628076422092,64,FLEN)
NAN_BOXED(9213499855547096767,64,FLEN)
NAN_BOXED(9217907320764103510,64,FLEN)
NAN_BOXED(4602732628076422092,64,FLEN)
NAN_BOXED(9213499855547096767,64,FLEN)
NAN_BOXED(9217907320764103510,64,FLEN)
NAN_BOXED(4602732628076422092,64,FLEN)
NAN_BOXED(9213499855547096767,64,FLEN)
NAN_BOXED(9217961856831696091,64,FLEN)
NAN_BOXED(4595351433804189227,64,FLEN)
NAN_BOXED(9206415087686117411,64,FLEN)
NAN_BOXED(9217961856831696091,64,FLEN)
NAN_BOXED(4595351433804189227,64,FLEN)
NAN_BOXED(9206415087686117411,64,FLEN)
NAN_BOXED(9217961856831696091,64,FLEN)
NAN_BOXED(4595351433804189227,64,FLEN)
NAN_BOXED(9206415087686117411,64,FLEN)
NAN_BOXED(9217961856831696091,64,FLEN)
NAN_BOXED(4595351433804189227,64,FLEN)
NAN_BOXED(9206415087686117411,64,FLEN)
NAN_BOXED(9217961856831696091,64,FLEN)
NAN_BOXED(4595351433804189227,64,FLEN)
NAN_BOXED(9206415087686117411,64,FLEN)
NAN_BOXED(9218046749447064009,64,FLEN)
NAN_BOXED(4602411201802351211,64,FLEN)
NAN_BOXED(9213299946023113671,64,FLEN)
NAN_BOXED(9218046749447064009,64,FLEN)
NAN_BOXED(4602411201802351211,64,FLEN)
NAN_BOXED(9213299946023113671,64,FLEN)
NAN_BOXED(9218046749447064009,64,FLEN)
NAN_BOXED(4602411201802351211,64,FLEN)
NAN_BOXED(9213299946023113671,64,FLEN)
NAN_BOXED(9218046749447064009,64,FLEN)
NAN_BOXED(4602411201802351211,64,FLEN)
NAN_BOXED(9213299946023113671,64,FLEN)
NAN_BOXED(9218046749447064009,64,FLEN)
NAN_BOXED(4602411201802351211,64,FLEN)
NAN_BOXED(9213299946023113671,64,FLEN)
NAN_BOXED(9218053386598244178,64,FLEN)
NAN_BOXED(4603271985306056759,64,FLEN)
NAN_BOXED(9214496803528750135,64,FLEN)
NAN_BOXED(9218053386598244178,64,FLEN)
NAN_BOXED(4603271985306056759,64,FLEN)
NAN_BOXED(9214496803528750135,64,FLEN)
NAN_BOXED(9218053386598244178,64,FLEN)
NAN_BOXED(4603271985306056759,64,FLEN)
NAN_BOXED(9214496803528750135,64,FLEN)
NAN_BOXED(9218053386598244178,64,FLEN)
NAN_BOXED(4603271985306056759,64,FLEN)
NAN_BOXED(9214496803528750135,64,FLEN)
NAN_BOXED(9218053386598244178,64,FLEN)
NAN_BOXED(4603271985306056759,64,FLEN)
NAN_BOXED(9214496803528750135,64,FLEN)
NAN_BOXED(9218061543796049407,64,FLEN)
NAN_BOXED(4606455719992789742,64,FLEN)
NAN_BOXED(9217399944969131107,64,FLEN)
NAN_BOXED(9218061543796049407,64,FLEN)
NAN_BOXED(4606455719992789742,64,FLEN)
NAN_BOXED(9217399944969131107,64,FLEN)
NAN_BOXED(9218061543796049407,64,FLEN)
NAN_BOXED(4606455719992789742,64,FLEN)
NAN_BOXED(9217399944969131107,64,FLEN)
NAN_BOXED(9218061543796049407,64,FLEN)
NAN_BOXED(4606455719992789742,64,FLEN)
NAN_BOXED(9217399944969131107,64,FLEN)
NAN_BOXED(9218061543796049407,64,FLEN)
NAN_BOXED(4606455719992789742,64,FLEN)
NAN_BOXED(9217399944969131107,64,FLEN)
NAN_BOXED(9218063016917000015,64,FLEN)
NAN_BOXED(4601963468319378204,64,FLEN)
NAN_BOXED(9212908032835903389,64,FLEN)
NAN_BOXED(9218063016917000015,64,FLEN)
NAN_BOXED(4601963468319378204,64,FLEN)
NAN_BOXED(9212908032835903389,64,FLEN)
NAN_BOXED(9218063016917000015,64,FLEN)
NAN_BOXED(4601963468319378204,64,FLEN)
NAN_BOXED(9212908032835903389,64,FLEN)
NAN_BOXED(9218063016917000015,64,FLEN)
NAN_BOXED(4601963468319378204,64,FLEN)
NAN_BOXED(9212908032835903389,64,FLEN)
NAN_BOXED(9218063016917000015,64,FLEN)
NAN_BOXED(4601963468319378204,64,FLEN)
NAN_BOXED(9212908032835903389,64,FLEN)
NAN_BOXED(9218070384472984755,64,FLEN)
NAN_BOXED(4607146159299055587,64,FLEN)
NAN_BOXED(9218037337623791603,64,FLEN)
NAN_BOXED(9218070384472984755,64,FLEN)
NAN_BOXED(4607146159299055587,64,FLEN)
NAN_BOXED(9218037337623791603,64,FLEN)
NAN_BOXED(9218070384472984755,64,FLEN)
NAN_BOXED(4607146159299055587,64,FLEN)
NAN_BOXED(9218037337623791603,64,FLEN)
NAN_BOXED(9218070384472984755,64,FLEN)
NAN_BOXED(4607146159299055587,64,FLEN)
NAN_BOXED(9218037337623791603,64,FLEN)
NAN_BOXED(9218070384472984755,64,FLEN)
NAN_BOXED(4607146159299055587,64,FLEN)
NAN_BOXED(9218037337623791603,64,FLEN)
NAN_BOXED(9218072864266513217,64,FLEN)
NAN_BOXED(4599084990136885471,64,FLEN)
NAN_BOXED(9210292865375506703,64,FLEN)
NAN_BOXED(9218072864266513217,64,FLEN)
NAN_BOXED(4599084990136885471,64,FLEN)
NAN_BOXED(9210292865375506703,64,FLEN)
NAN_BOXED(9218072864266513217,64,FLEN)
NAN_BOXED(4599084990136885471,64,FLEN)
NAN_BOXED(9210292865375506703,64,FLEN)
NAN_BOXED(9218072864266513217,64,FLEN)
NAN_BOXED(4599084990136885471,64,FLEN)
NAN_BOXED(9210292865375506703,64,FLEN)
NAN_BOXED(9218072864266513217,64,FLEN)
NAN_BOXED(4599084990136885471,64,FLEN)
NAN_BOXED(9210292865375506703,64,FLEN)
NAN_BOXED(9218140201528136598,64,FLEN)
NAN_BOXED(4606698268706292051,64,FLEN)
NAN_BOXED(9217695195165118599,64,FLEN)
NAN_BOXED(9218140201528136598,64,FLEN)
NAN_BOXED(4606698268706292051,64,FLEN)
NAN_BOXED(9217695195165118599,64,FLEN)
NAN_BOXED(9218140201528136598,64,FLEN)
NAN_BOXED(4606698268706292051,64,FLEN)
NAN_BOXED(9217695195165118599,64,FLEN)
NAN_BOXED(9218140201528136598,64,FLEN)
NAN_BOXED(4606698268706292051,64,FLEN)
NAN_BOXED(9217695195165118599,64,FLEN)
NAN_BOXED(9218140201528136598,64,FLEN)
NAN_BOXED(4606698268706292051,64,FLEN)
NAN_BOXED(9217695195165118599,64,FLEN)
NAN_BOXED(9218146067283910142,64,FLEN)
NAN_BOXED(4605520744102166040,64,FLEN)
NAN_BOXED(9216617657524875625,64,FLEN)
NAN_BOXED(9218146067283910142,64,FLEN)
NAN_BOXED(4605520744102166040,64,FLEN)
NAN_BOXED(9216617657524875625,64,FLEN)
NAN_BOXED(9218146067283910142,64,FLEN)
NAN_BOXED(4605520744102166040,64,FLEN)
NAN_BOXED(9216617657524875625,64,FLEN)
NAN_BOXED(9218146067283910142,64,FLEN)
NAN_BOXED(4605520744102166040,64,FLEN)
NAN_BOXED(9216617657524875625,64,FLEN)
NAN_BOXED(9218146067283910142,64,FLEN)
NAN_BOXED(4605520744102166040,64,FLEN)
NAN_BOXED(9216617657524875625,64,FLEN)
NAN_BOXED(9218167343903694505,64,FLEN)
NAN_BOXED(4585148188278754289,64,FLEN)
NAN_BOXED(9196446005026791903,64,FLEN)
NAN_BOXED(9218167343903694505,64,FLEN)
NAN_BOXED(4585148188278754289,64,FLEN)
NAN_BOXED(9196446005026791903,64,FLEN)
NAN_BOXED(9218167343903694505,64,FLEN)
NAN_BOXED(4585148188278754289,64,FLEN)
NAN_BOXED(9196446005026791903,64,FLEN)
NAN_BOXED(9218167343903694505,64,FLEN)
NAN_BOXED(4585148188278754289,64,FLEN)
NAN_BOXED(9196446005026791903,64,FLEN)
NAN_BOXED(9218167343903694505,64,FLEN)
NAN_BOXED(4585148188278754289,64,FLEN)
NAN_BOXED(9196446005026791903,64,FLEN)
NAN_BOXED(9218175588848258867,64,FLEN)
NAN_BOXED(4601010308533542703,64,FLEN)
NAN_BOXED(9212131823126985987,64,FLEN)
NAN_BOXED(9218175588848258867,64,FLEN)
NAN_BOXED(4601010308533542703,64,FLEN)
NAN_BOXED(9212131823126985987,64,FLEN)
NAN_BOXED(9218175588848258867,64,FLEN)
NAN_BOXED(4601010308533542703,64,FLEN)
NAN_BOXED(9212131823126985987,64,FLEN)
NAN_BOXED(9218175588848258867,64,FLEN)
NAN_BOXED(4601010308533542703,64,FLEN)
NAN_BOXED(9212131823126985987,64,FLEN)
NAN_BOXED(9218175588848258867,64,FLEN)
NAN_BOXED(4601010308533542703,64,FLEN)
NAN_BOXED(9212131823126985987,64,FLEN)
NAN_BOXED(9218207511932403500,64,FLEN)
NAN_BOXED(4591602394741995526,64,FLEN)
NAN_BOXED(9202779322337141383,64,FLEN)
NAN_BOXED(9218207511932403500,64,FLEN)
NAN_BOXED(4591602394741995526,64,FLEN)
NAN_BOXED(9202779322337141383,64,FLEN)
NAN_BOXED(9218207511932403500,64,FLEN)
NAN_BOXED(4591602394741995526,64,FLEN)
NAN_BOXED(9202779322337141383,64,FLEN)
NAN_BOXED(9218207511932403500,64,FLEN)
NAN_BOXED(4591602394741995526,64,FLEN)
NAN_BOXED(9202779322337141383,64,FLEN)
NAN_BOXED(9218207511932403500,64,FLEN)
NAN_BOXED(4591602394741995526,64,FLEN)
NAN_BOXED(9202779322337141383,64,FLEN)
NAN_BOXED(9218325045215145558,64,FLEN)
NAN_BOXED(4591081457928218935,64,FLEN)
NAN_BOXED(9202380345273726071,64,FLEN)
NAN_BOXED(9218325045215145558,64,FLEN)
NAN_BOXED(4591081457928218935,64,FLEN)
NAN_BOXED(9202380345273726071,64,FLEN)
NAN_BOXED(9218325045215145558,64,FLEN)
NAN_BOXED(4591081457928218935,64,FLEN)
NAN_BOXED(9202380345273726071,64,FLEN)
NAN_BOXED(9218325045215145558,64,FLEN)
NAN_BOXED(4591081457928218935,64,FLEN)
NAN_BOXED(9202380345273726071,64,FLEN)
NAN_BOXED(9218325045215145558,64,FLEN)
NAN_BOXED(4591081457928218935,64,FLEN)
NAN_BOXED(9202380345273726071,64,FLEN)
NAN_BOXED(9218399011350562459,64,FLEN)
NAN_BOXED(4601950670538129326,64,FLEN)
NAN_BOXED(9213205211822966053,64,FLEN)
NAN_BOXED(9218399011350562459,64,FLEN)
NAN_BOXED(4601950670538129326,64,FLEN)
NAN_BOXED(9213205211822966053,64,FLEN)
NAN_BOXED(9218399011350562459,64,FLEN)
NAN_BOXED(4601950670538129326,64,FLEN)
NAN_BOXED(9213205211822966053,64,FLEN)
NAN_BOXED(9218399011350562459,64,FLEN)
NAN_BOXED(4601950670538129326,64,FLEN)
NAN_BOXED(9213205211822966053,64,FLEN)
NAN_BOXED(9218399011350562459,64,FLEN)
NAN_BOXED(4601950670538129326,64,FLEN)
NAN_BOXED(9213205211822966053,64,FLEN)
NAN_BOXED(9218400745751491139,64,FLEN)
NAN_BOXED(4605866185330740660,64,FLEN)
NAN_BOXED(9217152856631715670,64,FLEN)
NAN_BOXED(9218400745751491139,64,FLEN)
NAN_BOXED(4605866185330740660,64,FLEN)
NAN_BOXED(9217152856631715670,64,FLEN)
NAN_BOXED(9218400745751491139,64,FLEN)
NAN_BOXED(4605866185330740660,64,FLEN)
NAN_BOXED(9217152856631715670,64,FLEN)
NAN_BOXED(9218400745751491139,64,FLEN)
NAN_BOXED(4605866185330740660,64,FLEN)
NAN_BOXED(9217152856631715670,64,FLEN)
NAN_BOXED(9218400745751491139,64,FLEN)
NAN_BOXED(4605866185330740660,64,FLEN)
NAN_BOXED(9217152856631715670,64,FLEN)
NAN_BOXED(9218416248320570122,64,FLEN)
NAN_BOXED(4604820028640528239,64,FLEN)
NAN_BOXED(9216172457360846112,64,FLEN)
NAN_BOXED(9218416248320570122,64,FLEN)
NAN_BOXED(4604820028640528239,64,FLEN)
NAN_BOXED(9216172457360846112,64,FLEN)
NAN_BOXED(9218416248320570122,64,FLEN)
NAN_BOXED(4604820028640528239,64,FLEN)
NAN_BOXED(9216172457360846112,64,FLEN)
NAN_BOXED(9218416248320570122,64,FLEN)
NAN_BOXED(4604820028640528239,64,FLEN)
NAN_BOXED(9216172457360846112,64,FLEN)
NAN_BOXED(9218416248320570122,64,FLEN)
NAN_BOXED(4604820028640528239,64,FLEN)
NAN_BOXED(9216172457360846112,64,FLEN)
NAN_BOXED(9218430444183144331,64,FLEN)
NAN_BOXED(4603747550707278639,64,FLEN)
NAN_BOXED(9215162603408223771,64,FLEN)
NAN_BOXED(9218430444183144331,64,FLEN)
NAN_BOXED(4603747550707278639,64,FLEN)
NAN_BOXED(9215162603408223771,64,FLEN)
NAN_BOXED(9218430444183144331,64,FLEN)
NAN_BOXED(4603747550707278639,64,FLEN)
NAN_BOXED(9215162603408223771,64,FLEN)
NAN_BOXED(9218430444183144331,64,FLEN)
NAN_BOXED(4603747550707278639,64,FLEN)
NAN_BOXED(9215162603408223771,64,FLEN)
NAN_BOXED(9218430444183144331,64,FLEN)
NAN_BOXED(4603747550707278639,64,FLEN)
NAN_BOXED(9215162603408223771,64,FLEN)
NAN_BOXED(9218564179091551317,64,FLEN)
NAN_BOXED(4601701610748925655,64,FLEN)
NAN_BOXED(9213116380592589295,64,FLEN)
NAN_BOXED(9218564179091551317,64,FLEN)
NAN_BOXED(4601701610748925655,64,FLEN)
NAN_BOXED(9213116380592589295,64,FLEN)
NAN_BOXED(9218564179091551317,64,FLEN)
NAN_BOXED(4601701610748925655,64,FLEN)
NAN_BOXED(9213116380592589295,64,FLEN)
NAN_BOXED(9218564179091551317,64,FLEN)
NAN_BOXED(4601701610748925655,64,FLEN)
NAN_BOXED(9213116380592589295,64,FLEN)
NAN_BOXED(9218564179091551317,64,FLEN)
NAN_BOXED(4601701610748925655,64,FLEN)
NAN_BOXED(9213116380592589295,64,FLEN)
NAN_BOXED(9218608111295937514,64,FLEN)
NAN_BOXED(4603981427454434329,64,FLEN)
NAN_BOXED(9215499634951976128,64,FLEN)
NAN_BOXED(9218608111295937514,64,FLEN)
NAN_BOXED(4603981427454434329,64,FLEN)
NAN_BOXED(9215499634951976128,64,FLEN)
NAN_BOXED(9218608111295937514,64,FLEN)
NAN_BOXED(4603981427454434329,64,FLEN)
NAN_BOXED(9215499634951976128,64,FLEN)
NAN_BOXED(9218608111295937514,64,FLEN)
NAN_BOXED(4603981427454434329,64,FLEN)
NAN_BOXED(9215499634951976128,64,FLEN)
NAN_BOXED(9218608111295937514,64,FLEN)
NAN_BOXED(4603981427454434329,64,FLEN)
NAN_BOXED(9215499634951976128,64,FLEN)
NAN_BOXED(9218670971701176943,64,FLEN)
NAN_BOXED(4598940521504369542,64,FLEN)
NAN_BOXED(9210511029394575881,64,FLEN)
NAN_BOXED(9218670971701176943,64,FLEN)
NAN_BOXED(4598940521504369542,64,FLEN)
NAN_BOXED(9210511029394575881,64,FLEN)
NAN_BOXED(9218670971701176943,64,FLEN)
NAN_BOXED(4598940521504369542,64,FLEN)
NAN_BOXED(9210511029394575881,64,FLEN)
NAN_BOXED(9218670971701176943,64,FLEN)
NAN_BOXED(4598940521504369542,64,FLEN)
NAN_BOXED(9210511029394575881,64,FLEN)
NAN_BOXED(9218670971701176943,64,FLEN)
NAN_BOXED(4598940521504369542,64,FLEN)
NAN_BOXED(9210511029394575881,64,FLEN)
NAN_BOXED(9218681592197362120,64,FLEN)
NAN_BOXED(4606382201430380927,64,FLEN)
NAN_BOXED(9217897974509185124,64,FLEN)
NAN_BOXED(9218681592197362120,64,FLEN)
NAN_BOXED(4606382201430380927,64,FLEN)
NAN_BOXED(9217897974509185124,64,FLEN)
NAN_BOXED(9218681592197362120,64,FLEN)
NAN_BOXED(4606382201430380927,64,FLEN)
NAN_BOXED(9217897974509185124,64,FLEN)
NAN_BOXED(9218681592197362120,64,FLEN)
NAN_BOXED(4606382201430380927,64,FLEN)
NAN_BOXED(9217897974509185124,64,FLEN)
NAN_BOXED(9218681592197362120,64,FLEN)
NAN_BOXED(4606382201430380927,64,FLEN)
NAN_BOXED(9217897974509185124,64,FLEN)
NAN_BOXED(9218697062022109162,64,FLEN)
NAN_BOXED(4598176462043030111,64,FLEN)
NAN_BOXED(9209692300482183395,64,FLEN)
NAN_BOXED(9218697062022109162,64,FLEN)
NAN_BOXED(4598176462043030111,64,FLEN)
NAN_BOXED(9209692300482183395,64,FLEN)
NAN_BOXED(9218697062022109162,64,FLEN)
NAN_BOXED(4598176462043030111,64,FLEN)
NAN_BOXED(9209692300482183395,64,FLEN)
NAN_BOXED(9218697062022109162,64,FLEN)
NAN_BOXED(4598176462043030111,64,FLEN)
NAN_BOXED(9209692300482183395,64,FLEN)
NAN_BOXED(9218697062022109162,64,FLEN)
NAN_BOXED(4598176462043030111,64,FLEN)
NAN_BOXED(9209692300482183395,64,FLEN)
NAN_BOXED(9218717555239555515,64,FLEN)
NAN_BOXED(4587491218874762815,64,FLEN)
NAN_BOXED(9199054443860327919,64,FLEN)
NAN_BOXED(9218717555239555515,64,FLEN)
NAN_BOXED(4587491218874762815,64,FLEN)
NAN_BOXED(9199054443860327919,64,FLEN)
NAN_BOXED(9218717555239555515,64,FLEN)
NAN_BOXED(4587491218874762815,64,FLEN)
NAN_BOXED(9199054443860327919,64,FLEN)
NAN_BOXED(9218717555239555515,64,FLEN)
NAN_BOXED(4587491218874762815,64,FLEN)
NAN_BOXED(9199054443860327919,64,FLEN)
NAN_BOXED(9218717555239555515,64,FLEN)
NAN_BOXED(4587491218874762815,64,FLEN)
NAN_BOXED(9199054443860327919,64,FLEN)
NAN_BOXED(9218770092071225561,64,FLEN)
NAN_BOXED(4606022637345232894,64,FLEN)
NAN_BOXED(9217622973696837001,64,FLEN)
NAN_BOXED(9218770092071225561,64,FLEN)
NAN_BOXED(4606022637345232894,64,FLEN)
NAN_BOXED(9217622973696837001,64,FLEN)
NAN_BOXED(9218770092071225561,64,FLEN)
NAN_BOXED(4606022637345232894,64,FLEN)
NAN_BOXED(9217622973696837001,64,FLEN)
NAN_BOXED(9218770092071225561,64,FLEN)
NAN_BOXED(4606022637345232894,64,FLEN)
NAN_BOXED(9217622973696837001,64,FLEN)
NAN_BOXED(9218770092071225561,64,FLEN)
NAN_BOXED(4606022637345232894,64,FLEN)
NAN_BOXED(9217622973696837001,64,FLEN)
NAN_BOXED(9218805748269947506,64,FLEN)
NAN_BOXED(4605115813682625963,64,FLEN)
NAN_BOXED(9216753526460465903,64,FLEN)
NAN_BOXED(9218805748269947506,64,FLEN)
NAN_BOXED(4605115813682625963,64,FLEN)
NAN_BOXED(9216753526460465903,64,FLEN)
NAN_BOXED(9218805748269947506,64,FLEN)
NAN_BOXED(4605115813682625963,64,FLEN)
NAN_BOXED(9216753526460465903,64,FLEN)
NAN_BOXED(9218805748269947506,64,FLEN)
NAN_BOXED(4605115813682625963,64,FLEN)
NAN_BOXED(9216753526460465903,64,FLEN)
NAN_BOXED(9218805748269947506,64,FLEN)
NAN_BOXED(4605115813682625963,64,FLEN)
NAN_BOXED(9216753526460465903,64,FLEN)
NAN_BOXED(9218815430146465762,64,FLEN)
NAN_BOXED(4606959477167415303,64,FLEN)
NAN_BOXED(9218593800518275896,64,FLEN)
NAN_BOXED(9218815430146465762,64,FLEN)
NAN_BOXED(4606959477167415303,64,FLEN)
NAN_BOXED(9218593800518275896,64,FLEN)
NAN_BOXED(9218815430146465762,64,FLEN)
NAN_BOXED(4606959477167415303,64,FLEN)
NAN_BOXED(9218593800518275896,64,FLEN)
NAN_BOXED(9218815430146465762,64,FLEN)
NAN_BOXED(4606959477167415303,64,FLEN)
NAN_BOXED(9218593800518275896,64,FLEN)
NAN_BOXED(9218815430146465762,64,FLEN)
NAN_BOXED(4606959477167415303,64,FLEN)
NAN_BOXED(9218593800518275896,64,FLEN)
NAN_BOXED(9218818111641261259,64,FLEN)
NAN_BOXED(4605799193349851889,64,FLEN)
NAN_BOXED(9217442614634708477,64,FLEN)
NAN_BOXED(9218818111641261259,64,FLEN)
NAN_BOXED(4605799193349851889,64,FLEN)
NAN_BOXED(9217442614634708477,64,FLEN)
NAN_BOXED(9218818111641261259,64,FLEN)
NAN_BOXED(4605799193349851889,64,FLEN)
NAN_BOXED(9217442614634708477,64,FLEN)
NAN_BOXED(9218818111641261259,64,FLEN)
NAN_BOXED(4605799193349851889,64,FLEN)
NAN_BOXED(9217442614634708477,64,FLEN)
NAN_BOXED(9218818111641261259,64,FLEN)
NAN_BOXED(4605799193349851889,64,FLEN)
NAN_BOXED(9217442614634708477,64,FLEN)
NAN_BOXED(9218824420588520112,64,FLEN)
NAN_BOXED(4604585393273741421,64,FLEN)
NAN_BOXED(9216240086280849683,64,FLEN)
NAN_BOXED(9218824420588520112,64,FLEN)
NAN_BOXED(4604585393273741421,64,FLEN)
NAN_BOXED(9216240086280849683,64,FLEN)
NAN_BOXED(9218824420588520112,64,FLEN)
NAN_BOXED(4604585393273741421,64,FLEN)
NAN_BOXED(9216240086280849683,64,FLEN)
NAN_BOXED(9218824420588520112,64,FLEN)
NAN_BOXED(4604585393273741421,64,FLEN)
NAN_BOXED(9216240086280849683,64,FLEN)
NAN_BOXED(9218824420588520112,64,FLEN)
NAN_BOXED(4604585393273741421,64,FLEN)
NAN_BOXED(9216240086280849683,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(4654168237647676218,64,FLEN)
NAN_BOXED(9215831376838299486,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(4654168237647676218,64,FLEN)
NAN_BOXED(9215831376838299486,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(4654168237647676218,64,FLEN)
NAN_BOXED(9215831376838299486,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(4654168237647676218,64,FLEN)
NAN_BOXED(9215831376838299486,64,FLEN)
NAN_BOXED(9168654310950778879,64,FLEN)
NAN_BOXED(4654168237647676218,64,FLEN)
NAN_BOXED(9215831376838299486,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(4648272838428955898,64,FLEN)
NAN_BOXED(9217809222033344063,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(4648272838428955898,64,FLEN)
NAN_BOXED(9217809222033344063,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(4648272838428955898,64,FLEN)
NAN_BOXED(9217809222033344063,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(4648272838428955898,64,FLEN)
NAN_BOXED(9217809222033344063,64,FLEN)
NAN_BOXED(9176400592978356735,64,FLEN)
NAN_BOXED(4648272838428955898,64,FLEN)
NAN_BOXED(9217809222033344063,64,FLEN)
NAN_BOXED(9192915809462090111,64,FLEN)
NAN_BOXED(4628434275078981855,64,FLEN)
NAN_BOXED(9214650471574027565,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 214*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
