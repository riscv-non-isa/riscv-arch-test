
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b5 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b5)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f6, rs2==f15, rs3==f24, rd==f6,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f6; op2:f15; op3:f24; dest:f6; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f6, f6, f15, f24, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f2, rs2==f27, rs3==f18, rd==f30,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f2; op2:f27; op3:f18; dest:f30; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f30, f2, f27, f18, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f5, rs2==f5, rs3==f31, rd==f5,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f5; op2:f5; op3:f31; dest:f5; op1val:0x7f5d144fc758c3ff; op2val:0x7f5d144fc758c3ff;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f5, f5, f5, f31, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rs3 == rd, rs1==f3, rs2==f3, rs3==f3, rd==f3,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f3; op2:f3; op3:f3; dest:f3; op1val:0x7f5d144fc758c3ff; op2val:0x7f5d144fc758c3ff;
op3val:0x7f5d144fc758c3ff; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f3, f3, f3, f3, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f4, rs2==f4, rs3==f25, rd==f8,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f4; op2:f4; op3:f25; dest:f8; op1val:0x7f5d144fc758c3ff; op2val:0x7f5d144fc758c3ff;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f8, f4, f4, f25, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f21, rs2==f17, rs3==f16, rd==f17,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f21; op2:f17; op3:f16; dest:f17; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f17, f21, f17, f16, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f8, rs2==f23, rs3==f23, rd==f4,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f8; op2:f23; op3:f23; dest:f4; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0xc0690c64fc55e97f; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f4, f8, f23, f23, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f0, rs2==f13, rs3==f0, rd==f23,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f0; op2:f13; op3:f0; dest:f23; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7f6bb6ea62484dff; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f23, f0, f13, f0, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f19, rs2==f14, rs3==f27, rd==f27,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f19; op2:f14; op3:f27; dest:f27; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f27, f19, f14, f27, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rd == rs2 == rs3 != rs1, rs1==f18, rs2==f22, rs3==f22, rd==f22,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f18; op2:f22; op3:f22; dest:f22; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0xc0690c64fc55e97f; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f22, f18, f22, f22, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f14, rs2==f18, rs3==f14, rd==f14,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f14; op2:f18; op3:f14; dest:f14; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7f8297b073ec28bf; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f14, f14, f18, f14, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 == rs3 != rd, rs1==f7, rs2==f7, rs3==f7, rd==f10,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f7; op2:f7; op3:f7; dest:f10; op1val:0x7f8297b073ec28bf; op2val:0x7f8297b073ec28bf;
op3val:0x7f8297b073ec28bf; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f10, f7, f7, f7, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f16, rs2==f12, rs3==f10, rd==f11,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f16; op2:f12; op3:f10; dest:f11; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7fa7ec9ded4be93f; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f11, f16, f12, f10, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f12, rs2==f31, rs3==f1, rd==f20,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f12; op2:f31; op3:f1; dest:f20; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7fa7ec9ded4be93f; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f20, f12, f31, f1, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f15, rs2==f11, rs3==f5, rd==f29,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f15; op2:f11; op3:f5; dest:f29; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7fa7ec9ded4be93f; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f29, f15, f11, f5, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f9, rs2==f16, rs3==f21, rd==f1,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xadb9cbb2edaff and fs2 == 1 and fe2 == 0x403 and fm2 == 0x086bf70a767c0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbbdcd5687c963 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f9; op2:f16; op3:f21; dest:f1; op1val:0x7f8adb9cbb2edaff; op2val:0xc03086bf70a767c0;
op3val:0x7fcbbdcd5687c963; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f1, f9, f16, f21, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f20, rs2==f9, rs3==f12, rd==f16,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xadb9cbb2edaff and fs2 == 1 and fe2 == 0x403 and fm2 == 0x086bf70a767c0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbbdcd5687c963 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f20; op2:f9; op3:f12; dest:f16; op1val:0x7f8adb9cbb2edaff; op2val:0xc03086bf70a767c0;
op3val:0x7fcbbdcd5687c963; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f16, f20, f9, f12, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f22, rs2==f6, rs3==f17, rd==f12,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xadb9cbb2edaff and fs2 == 1 and fe2 == 0x403 and fm2 == 0x086bf70a767c0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbbdcd5687c963 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f22; op2:f6; op3:f17; dest:f12; op1val:0x7f8adb9cbb2edaff; op2val:0xc03086bf70a767c0;
op3val:0x7fcbbdcd5687c963; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f12, f22, f6, f17, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f11, rs2==f2, rs3==f30, rd==f15,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xadb9cbb2edaff and fs2 == 1 and fe2 == 0x403 and fm2 == 0x086bf70a767c0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbbdcd5687c963 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f11; op2:f2; op3:f30; dest:f15; op1val:0x7f8adb9cbb2edaff; op2val:0xc03086bf70a767c0;
op3val:0x7fcbbdcd5687c963; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f15, f11, f2, f30, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f27, rs2==f25, rs3==f4, rd==f0,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xadb9cbb2edaff and fs2 == 1 and fe2 == 0x403 and fm2 == 0x086bf70a767c0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbbdcd5687c963 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f27; op2:f25; op3:f4; dest:f0; op1val:0x7f8adb9cbb2edaff; op2val:0xc03086bf70a767c0;
op3val:0x7fcbbdcd5687c963; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f0, f27, f25, f4, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f30, rs2==f1, rs3==f6, rd==f2,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x2804bc647cadf and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5ccc17c4e0cf2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x93526f5ace10b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f1; op3:f6; dest:f2; op1val:0x7f92804bc647cadf; op2val:0xc045ccc17c4e0cf2;
op3val:0x7fe93526f5ace10b; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f2, f30, f1, f6, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f17, rs2==f29, rs3==f28, rd==f13,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x2804bc647cadf and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5ccc17c4e0cf2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x93526f5ace10b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f17; op2:f29; op3:f28; dest:f13; op1val:0x7f92804bc647cadf; op2val:0xc045ccc17c4e0cf2;
op3val:0x7fe93526f5ace10b; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f13, f17, f29, f28, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f24, rs2==f30, rs3==f13, rd==f7,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x2804bc647cadf and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5ccc17c4e0cf2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x93526f5ace10b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f24; op2:f30; op3:f13; dest:f7; op1val:0x7f92804bc647cadf; op2val:0xc045ccc17c4e0cf2;
op3val:0x7fe93526f5ace10b; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f7, f24, f30, f13, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f23, rs2==f24, rs3==f9, rd==f26,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x2804bc647cadf and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5ccc17c4e0cf2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x93526f5ace10b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f23; op2:f24; op3:f9; dest:f26; op1val:0x7f92804bc647cadf; op2val:0xc045ccc17c4e0cf2;
op3val:0x7fe93526f5ace10b; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f26, f23, f24, f9, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f10, rs2==f19, rs3==f2, rd==f21,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x2804bc647cadf and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5ccc17c4e0cf2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x93526f5ace10b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f10; op2:f19; op3:f2; dest:f21; op1val:0x7f92804bc647cadf; op2val:0xc045ccc17c4e0cf2;
op3val:0x7fe93526f5ace10b; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f21, f10, f19, f2, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f29, rs2==f10, rs3==f20, rd==f31,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdb38beb9086df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x00d954e12d2fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdccc2f63529c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f29; op2:f10; op3:f20; dest:f31; op1val:0x7f9db38beb9086df; op2val:0xc0300d954e12d2fc;
op3val:0x7fddccc2f63529c1; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f29, f10, f20, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f1, rs2==f21, rs3==f29, rd==f25,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdb38beb9086df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x00d954e12d2fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdccc2f63529c1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f1; op2:f21; op3:f29; dest:f25; op1val:0x7f9db38beb9086df; op2val:0xc0300d954e12d2fc;
op3val:0x7fddccc2f63529c1; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f25, f1, f21, f29, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f31, rs2==f20, rs3==f15, rd==f24,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdb38beb9086df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x00d954e12d2fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdccc2f63529c1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f31; op2:f20; op3:f15; dest:f24; op1val:0x7f9db38beb9086df; op2val:0xc0300d954e12d2fc;
op3val:0x7fddccc2f63529c1; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f24, f31, f20, f15, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f28, rs2==f26, rs3==f19, rd==f18,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdb38beb9086df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x00d954e12d2fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdccc2f63529c1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f28; op2:f26; op3:f19; dest:f18; op1val:0x7f9db38beb9086df; op2val:0xc0300d954e12d2fc;
op3val:0x7fddccc2f63529c1; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f18, f28, f26, f19, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f25, rs2==f0, rs3==f11, rd==f9,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdb38beb9086df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x00d954e12d2fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdccc2f63529c1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f25; op2:f0; op3:f11; dest:f9; op1val:0x7f9db38beb9086df; op2val:0xc0300d954e12d2fc;
op3val:0x7fddccc2f63529c1; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f9, f25, f0, f11, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f13, rs2==f8, rs3==f26, rd==f19,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2c15fdbb5e3cf and fs2 == 1 and fe2 == 0x403 and fm2 == 0x9d1bad7655f2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe43febfe9d259 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f13; op2:f8; op3:f26; dest:f19; op1val:0x7fa2c15fdbb5e3cf; op2val:0xc039d1bad7655f2a;
op3val:0x7fee43febfe9d259; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f19, f13, f8, f26, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f26,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2c15fdbb5e3cf and fs2 == 1 and fe2 == 0x403 and fm2 == 0x9d1bad7655f2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe43febfe9d259 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f26; op2:f28; op3:f10; dest:f3; op1val:0x7fa2c15fdbb5e3cf; op2val:0xc039d1bad7655f2a;
op3val:0x7fee43febfe9d259; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f3, f26, f28, f10, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// rs3==f8,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2c15fdbb5e3cf and fs2 == 1 and fe2 == 0x403 and fm2 == 0x9d1bad7655f2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe43febfe9d259 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f11; op2:f18; op3:f8; dest:f13; op1val:0x7fa2c15fdbb5e3cf; op2val:0xc039d1bad7655f2a;
op3val:0x7fee43febfe9d259; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f13, f11, f18, f8, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// rd==f28,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2c15fdbb5e3cf and fs2 == 1 and fe2 == 0x403 and fm2 == 0x9d1bad7655f2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe43febfe9d259 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f29; op2:f1; op3:f14; dest:f28; op1val:0x7fa2c15fdbb5e3cf; op2val:0xc039d1bad7655f2a;
op3val:0x7fee43febfe9d259; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f28, f29, f1, f14, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2c15fdbb5e3cf and fs2 == 1 and fe2 == 0x403 and fm2 == 0x9d1bad7655f2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe43febfe9d259 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2c15fdbb5e3cf; op2val:0xc039d1bad7655f2a;
op3val:0x7fee43febfe9d259; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba95a52df5767 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb4734aa2ffab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f2e07b1fbb17 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba95a52df5767; op2val:0xc01bb4734aa2ffab;
op3val:0x7fe7f2e07b1fbb17; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba95a52df5767 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb4734aa2ffab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f2e07b1fbb17 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba95a52df5767; op2val:0xc01bb4734aa2ffab;
op3val:0x7fe7f2e07b1fbb17; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba95a52df5767 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb4734aa2ffab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f2e07b1fbb17 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba95a52df5767; op2val:0xc01bb4734aa2ffab;
op3val:0x7fe7f2e07b1fbb17; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba95a52df5767 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb4734aa2ffab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f2e07b1fbb17 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba95a52df5767; op2val:0xc01bb4734aa2ffab;
op3val:0x7fe7f2e07b1fbb17; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba95a52df5767 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb4734aa2ffab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f2e07b1fbb17 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba95a52df5767; op2val:0xc01bb4734aa2ffab;
op3val:0x7fe7f2e07b1fbb17; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2a65c343892db and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9ce16305fb76 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0acff0a9e8d47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2a65c343892db; op2val:0xbfdc9ce16305fb76;
op3val:0x7fb0acff0a9e8d47; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2a65c343892db and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9ce16305fb76 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0acff0a9e8d47 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2a65c343892db; op2val:0xbfdc9ce16305fb76;
op3val:0x7fb0acff0a9e8d47; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2a65c343892db and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9ce16305fb76 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0acff0a9e8d47 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2a65c343892db; op2val:0xbfdc9ce16305fb76;
op3val:0x7fb0acff0a9e8d47; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2a65c343892db and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9ce16305fb76 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0acff0a9e8d47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2a65c343892db; op2val:0xbfdc9ce16305fb76;
op3val:0x7fb0acff0a9e8d47; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2a65c343892db and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9ce16305fb76 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0acff0a9e8d47 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2a65c343892db; op2val:0xbfdc9ce16305fb76;
op3val:0x7fb0acff0a9e8d47; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7285ea9faba7f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x51e4ba7320788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe90d56fd14cc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7285ea9faba7f; op2val:0xc0151e4ba7320788;
op3val:0x7fee90d56fd14cc8; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7285ea9faba7f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x51e4ba7320788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe90d56fd14cc8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7285ea9faba7f; op2val:0xc0151e4ba7320788;
op3val:0x7fee90d56fd14cc8; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7285ea9faba7f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x51e4ba7320788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe90d56fd14cc8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7285ea9faba7f; op2val:0xc0151e4ba7320788;
op3val:0x7fee90d56fd14cc8; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7285ea9faba7f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x51e4ba7320788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe90d56fd14cc8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7285ea9faba7f; op2val:0xc0151e4ba7320788;
op3val:0x7fee90d56fd14cc8; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7285ea9faba7f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x51e4ba7320788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe90d56fd14cc8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7285ea9faba7f; op2val:0xc0151e4ba7320788;
op3val:0x7fee90d56fd14cc8; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9279f41e78217 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xec3b664f905e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x82efe20fbfe2b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9279f41e78217; op2val:0xc00ec3b664f905e6;
op3val:0x7fe82efe20fbfe2b; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9279f41e78217 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xec3b664f905e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x82efe20fbfe2b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9279f41e78217; op2val:0xc00ec3b664f905e6;
op3val:0x7fe82efe20fbfe2b; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9279f41e78217 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xec3b664f905e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x82efe20fbfe2b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9279f41e78217; op2val:0xc00ec3b664f905e6;
op3val:0x7fe82efe20fbfe2b; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9279f41e78217 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xec3b664f905e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x82efe20fbfe2b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9279f41e78217; op2val:0xc00ec3b664f905e6;
op3val:0x7fe82efe20fbfe2b; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9279f41e78217 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xec3b664f905e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x82efe20fbfe2b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9279f41e78217; op2val:0xc00ec3b664f905e6;
op3val:0x7fe82efe20fbfe2b; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa363712e81d63 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x26159c540d020 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe1c79b3dfcd57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca363712e81d63; op2val:0xc0126159c540d020;
op3val:0x7fee1c79b3dfcd57; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa363712e81d63 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x26159c540d020 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe1c79b3dfcd57 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca363712e81d63; op2val:0xc0126159c540d020;
op3val:0x7fee1c79b3dfcd57; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa363712e81d63 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x26159c540d020 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe1c79b3dfcd57 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca363712e81d63; op2val:0xc0126159c540d020;
op3val:0x7fee1c79b3dfcd57; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa363712e81d63 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x26159c540d020 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe1c79b3dfcd57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca363712e81d63; op2val:0xc0126159c540d020;
op3val:0x7fee1c79b3dfcd57; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa363712e81d63 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x26159c540d020 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe1c79b3dfcd57 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca363712e81d63; op2val:0xc0126159c540d020;
op3val:0x7fee1c79b3dfcd57; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xacf777c60a3c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x075d1281c18a5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb94e30f5cae37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcacf777c60a3c7; op2val:0xbff075d1281c18a5;
op3val:0x7fcb94e30f5cae37; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xacf777c60a3c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x075d1281c18a5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb94e30f5cae37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcacf777c60a3c7; op2val:0xbff075d1281c18a5;
op3val:0x7fcb94e30f5cae37; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xacf777c60a3c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x075d1281c18a5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb94e30f5cae37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcacf777c60a3c7; op2val:0xbff075d1281c18a5;
op3val:0x7fcb94e30f5cae37; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xacf777c60a3c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x075d1281c18a5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb94e30f5cae37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcacf777c60a3c7; op2val:0xbff075d1281c18a5;
op3val:0x7fcb94e30f5cae37; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xacf777c60a3c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x075d1281c18a5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb94e30f5cae37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcacf777c60a3c7; op2val:0xbff075d1281c18a5;
op3val:0x7fcb94e30f5cae37; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1e30a0174e413 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa3ad354c23d0e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd52b387784731 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1e30a0174e413; op2val:0xc00a3ad354c23d0e;
op3val:0x7fed52b387784731; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1e30a0174e413 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa3ad354c23d0e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd52b387784731 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1e30a0174e413; op2val:0xc00a3ad354c23d0e;
op3val:0x7fed52b387784731; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1e30a0174e413 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa3ad354c23d0e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd52b387784731 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1e30a0174e413; op2val:0xc00a3ad354c23d0e;
op3val:0x7fed52b387784731; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1e30a0174e413 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa3ad354c23d0e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd52b387784731 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1e30a0174e413; op2val:0xc00a3ad354c23d0e;
op3val:0x7fed52b387784731; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1e30a0174e413 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa3ad354c23d0e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd52b387784731 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1e30a0174e413; op2val:0xc00a3ad354c23d0e;
op3val:0x7fed52b387784731; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x283f9d2825ba3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa9654e761f0b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec46d7ccba9a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd283f9d2825ba3; op2val:0xc00a9654e761f0b1;
op3val:0x7feec46d7ccba9a3; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x283f9d2825ba3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa9654e761f0b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec46d7ccba9a3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd283f9d2825ba3; op2val:0xc00a9654e761f0b1;
op3val:0x7feec46d7ccba9a3; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x283f9d2825ba3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa9654e761f0b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec46d7ccba9a3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd283f9d2825ba3; op2val:0xc00a9654e761f0b1;
op3val:0x7feec46d7ccba9a3; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x283f9d2825ba3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa9654e761f0b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec46d7ccba9a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd283f9d2825ba3; op2val:0xc00a9654e761f0b1;
op3val:0x7feec46d7ccba9a3; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x283f9d2825ba3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa9654e761f0b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec46d7ccba9a3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd283f9d2825ba3; op2val:0xc00a9654e761f0b1;
op3val:0x7feec46d7ccba9a3; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x34977ae8a092b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x002a99ffaa461 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cad56583569 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd34977ae8a092b; op2val:0xc00002a99ffaa461;
op3val:0x7fe34cad56583569; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x34977ae8a092b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x002a99ffaa461 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cad56583569 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd34977ae8a092b; op2val:0xc00002a99ffaa461;
op3val:0x7fe34cad56583569; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x34977ae8a092b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x002a99ffaa461 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cad56583569 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd34977ae8a092b; op2val:0xc00002a99ffaa461;
op3val:0x7fe34cad56583569; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x34977ae8a092b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x002a99ffaa461 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cad56583569 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd34977ae8a092b; op2val:0xc00002a99ffaa461;
op3val:0x7fe34cad56583569; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x34977ae8a092b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x002a99ffaa461 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cad56583569 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd34977ae8a092b; op2val:0xc00002a99ffaa461;
op3val:0x7fe34cad56583569; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x435f4497a6a63 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x861a6c82110d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xecc4833c7c22d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd435f4497a6a63; op2val:0xbff861a6c82110d2;
op3val:0x7fdecc4833c7c22d; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x435f4497a6a63 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x861a6c82110d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xecc4833c7c22d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd435f4497a6a63; op2val:0xbff861a6c82110d2;
op3val:0x7fdecc4833c7c22d; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x435f4497a6a63 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x861a6c82110d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xecc4833c7c22d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd435f4497a6a63; op2val:0xbff861a6c82110d2;
op3val:0x7fdecc4833c7c22d; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x435f4497a6a63 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x861a6c82110d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xecc4833c7c22d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd435f4497a6a63; op2val:0xbff861a6c82110d2;
op3val:0x7fdecc4833c7c22d; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x435f4497a6a63 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x861a6c82110d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xecc4833c7c22d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd435f4497a6a63; op2val:0xbff861a6c82110d2;
op3val:0x7fdecc4833c7c22d; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a01a288736c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd5aa56f017c02 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d659cad7c271 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a01a288736c5; op2val:0xbfed5aa56f017c02;
op3val:0x7fd3d659cad7c271; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a01a288736c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd5aa56f017c02 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d659cad7c271 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a01a288736c5; op2val:0xbfed5aa56f017c02;
op3val:0x7fd3d659cad7c271; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a01a288736c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd5aa56f017c02 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d659cad7c271 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a01a288736c5; op2val:0xbfed5aa56f017c02;
op3val:0x7fd3d659cad7c271; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a01a288736c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd5aa56f017c02 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d659cad7c271 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a01a288736c5; op2val:0xbfed5aa56f017c02;
op3val:0x7fd3d659cad7c271; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a01a288736c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd5aa56f017c02 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d659cad7c271 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a01a288736c5; op2val:0xbfed5aa56f017c02;
op3val:0x7fd3d659cad7c271; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60a5a04199781 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07bd4acb086bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6b4ee8f2445b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60a5a04199781; op2val:0xbff07bd4acb086bc;
op3val:0x7fd6b4ee8f2445b5; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60a5a04199781 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07bd4acb086bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6b4ee8f2445b5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60a5a04199781; op2val:0xbff07bd4acb086bc;
op3val:0x7fd6b4ee8f2445b5; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60a5a04199781 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07bd4acb086bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6b4ee8f2445b5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60a5a04199781; op2val:0xbff07bd4acb086bc;
op3val:0x7fd6b4ee8f2445b5; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60a5a04199781 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07bd4acb086bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6b4ee8f2445b5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60a5a04199781; op2val:0xbff07bd4acb086bc;
op3val:0x7fd6b4ee8f2445b5; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60a5a04199781 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07bd4acb086bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6b4ee8f2445b5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60a5a04199781; op2val:0xbff07bd4acb086bc;
op3val:0x7fd6b4ee8f2445b5; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71dbc6351ba9b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd67f63a22c8b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x53e0c4ef901b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71dbc6351ba9b; op2val:0xbfdd67f63a22c8b1;
op3val:0x7fc53e0c4ef901b7; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71dbc6351ba9b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd67f63a22c8b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x53e0c4ef901b7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71dbc6351ba9b; op2val:0xbfdd67f63a22c8b1;
op3val:0x7fc53e0c4ef901b7; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71dbc6351ba9b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd67f63a22c8b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x53e0c4ef901b7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71dbc6351ba9b; op2val:0xbfdd67f63a22c8b1;
op3val:0x7fc53e0c4ef901b7; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71dbc6351ba9b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd67f63a22c8b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x53e0c4ef901b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71dbc6351ba9b; op2val:0xbfdd67f63a22c8b1;
op3val:0x7fc53e0c4ef901b7; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71dbc6351ba9b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd67f63a22c8b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x53e0c4ef901b7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71dbc6351ba9b; op2val:0xbfdd67f63a22c8b1;
op3val:0x7fc53e0c4ef901b7; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x76f910302cbdd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x94717562172c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28339eb5d6c77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd76f910302cbdd; op2val:0xbff94717562172c6;
op3val:0x7fe28339eb5d6c77; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x76f910302cbdd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x94717562172c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28339eb5d6c77 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd76f910302cbdd; op2val:0xbff94717562172c6;
op3val:0x7fe28339eb5d6c77; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x76f910302cbdd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x94717562172c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28339eb5d6c77 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd76f910302cbdd; op2val:0xbff94717562172c6;
op3val:0x7fe28339eb5d6c77; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x76f910302cbdd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x94717562172c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28339eb5d6c77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd76f910302cbdd; op2val:0xbff94717562172c6;
op3val:0x7fe28339eb5d6c77; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x76f910302cbdd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x94717562172c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28339eb5d6c77 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd76f910302cbdd; op2val:0xbff94717562172c6;
op3val:0x7fe28339eb5d6c77; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe053a2ef29387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0d23dd9377bc1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf8fb2d617959b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde053a2ef29387; op2val:0xbfe0d23dd9377bc1;
op3val:0x7fcf8fb2d617959b; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe053a2ef29387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0d23dd9377bc1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf8fb2d617959b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde053a2ef29387; op2val:0xbfe0d23dd9377bc1;
op3val:0x7fcf8fb2d617959b; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe053a2ef29387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0d23dd9377bc1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf8fb2d617959b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde053a2ef29387; op2val:0xbfe0d23dd9377bc1;
op3val:0x7fcf8fb2d617959b; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe053a2ef29387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0d23dd9377bc1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf8fb2d617959b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde053a2ef29387; op2val:0xbfe0d23dd9377bc1;
op3val:0x7fcf8fb2d617959b; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe053a2ef29387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0d23dd9377bc1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf8fb2d617959b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde053a2ef29387; op2val:0xbfe0d23dd9377bc1;
op3val:0x7fcf8fb2d617959b; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ca5b7900ea57 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7a69ea0a9f7a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d1bd69d9f548 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ca5b7900ea57; op2val:0xbff7a69ea0a9f7a6;
op3val:0x7fe8d1bd69d9f548; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ca5b7900ea57 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7a69ea0a9f7a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d1bd69d9f548 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ca5b7900ea57; op2val:0xbff7a69ea0a9f7a6;
op3val:0x7fe8d1bd69d9f548; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ca5b7900ea57 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7a69ea0a9f7a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d1bd69d9f548 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ca5b7900ea57; op2val:0xbff7a69ea0a9f7a6;
op3val:0x7fe8d1bd69d9f548; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ca5b7900ea57 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7a69ea0a9f7a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d1bd69d9f548 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ca5b7900ea57; op2val:0xbff7a69ea0a9f7a6;
op3val:0x7fe8d1bd69d9f548; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ca5b7900ea57 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7a69ea0a9f7a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d1bd69d9f548 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ca5b7900ea57; op2val:0xbff7a69ea0a9f7a6;
op3val:0x7fe8d1bd69d9f548; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1415193812551 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x41cdfb6a8087a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b0c98a80bf69 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1415193812551; op2val:0xbff41cdfb6a8087a;
op3val:0x7fe5b0c98a80bf69; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1415193812551 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x41cdfb6a8087a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b0c98a80bf69 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1415193812551; op2val:0xbff41cdfb6a8087a;
op3val:0x7fe5b0c98a80bf69; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1415193812551 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x41cdfb6a8087a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b0c98a80bf69 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1415193812551; op2val:0xbff41cdfb6a8087a;
op3val:0x7fe5b0c98a80bf69; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1415193812551 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x41cdfb6a8087a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b0c98a80bf69 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1415193812551; op2val:0xbff41cdfb6a8087a;
op3val:0x7fe5b0c98a80bf69; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1415193812551 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x41cdfb6a8087a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b0c98a80bf69 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1415193812551; op2val:0xbff41cdfb6a8087a;
op3val:0x7fe5b0c98a80bf69; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1667d2c686bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e3570e2acd1c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25db9e8ff508c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1667d2c686bf9; op2val:0xbff0e3570e2acd1c;
op3val:0x7fe25db9e8ff508c; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1667d2c686bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e3570e2acd1c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25db9e8ff508c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1667d2c686bf9; op2val:0xbff0e3570e2acd1c;
op3val:0x7fe25db9e8ff508c; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1667d2c686bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e3570e2acd1c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25db9e8ff508c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1667d2c686bf9; op2val:0xbff0e3570e2acd1c;
op3val:0x7fe25db9e8ff508c; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1667d2c686bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e3570e2acd1c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25db9e8ff508c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1667d2c686bf9; op2val:0xbff0e3570e2acd1c;
op3val:0x7fe25db9e8ff508c; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1667d2c686bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e3570e2acd1c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25db9e8ff508c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1667d2c686bf9; op2val:0xbff0e3570e2acd1c;
op3val:0x7fe25db9e8ff508c; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c22bc9c78300 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa43e2dae46a30 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x037ae321da893 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c22bc9c78300; op2val:0xbfca43e2dae46a30;
op3val:0x7fc037ae321da893; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c22bc9c78300 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa43e2dae46a30 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x037ae321da893 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c22bc9c78300; op2val:0xbfca43e2dae46a30;
op3val:0x7fc037ae321da893; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c22bc9c78300 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa43e2dae46a30 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x037ae321da893 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c22bc9c78300; op2val:0xbfca43e2dae46a30;
op3val:0x7fc037ae321da893; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c22bc9c78300 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa43e2dae46a30 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x037ae321da893 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c22bc9c78300; op2val:0xbfca43e2dae46a30;
op3val:0x7fc037ae321da893; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c22bc9c78300 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa43e2dae46a30 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x037ae321da893 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c22bc9c78300; op2val:0xbfca43e2dae46a30;
op3val:0x7fc037ae321da893; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eecf8905935f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30dc050910ea3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7bcb8116f23ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eecf8905935f; op2val:0xbff30dc050910ea3;
op3val:0x7fe7bcb8116f23ed; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eecf8905935f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30dc050910ea3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7bcb8116f23ed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eecf8905935f; op2val:0xbff30dc050910ea3;
op3val:0x7fe7bcb8116f23ed; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eecf8905935f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30dc050910ea3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7bcb8116f23ed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eecf8905935f; op2val:0xbff30dc050910ea3;
op3val:0x7fe7bcb8116f23ed; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eecf8905935f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30dc050910ea3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7bcb8116f23ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eecf8905935f; op2val:0xbff30dc050910ea3;
op3val:0x7fe7bcb8116f23ed; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eecf8905935f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30dc050910ea3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7bcb8116f23ed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eecf8905935f; op2val:0xbff30dc050910ea3;
op3val:0x7fe7bcb8116f23ed; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x619bd20c99aa7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6646aaf5982ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeee1847dc4239 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe619bd20c99aa7; op2val:0xbff6646aaf5982ba;
op3val:0x7feeee1847dc4239; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x619bd20c99aa7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6646aaf5982ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeee1847dc4239 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe619bd20c99aa7; op2val:0xbff6646aaf5982ba;
op3val:0x7feeee1847dc4239; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x619bd20c99aa7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6646aaf5982ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeee1847dc4239 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe619bd20c99aa7; op2val:0xbff6646aaf5982ba;
op3val:0x7feeee1847dc4239; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x619bd20c99aa7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6646aaf5982ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeee1847dc4239 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe619bd20c99aa7; op2val:0xbff6646aaf5982ba;
op3val:0x7feeee1847dc4239; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x619bd20c99aa7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6646aaf5982ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeee1847dc4239 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe619bd20c99aa7; op2val:0xbff6646aaf5982ba;
op3val:0x7feeee1847dc4239; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68ca648b458d1 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4b53acb56a497 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd2f39d065486f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68ca648b458d1; op2val:0xbfb4b53acb56a497;
op3val:0x7fad2f39d065486f; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68ca648b458d1 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4b53acb56a497 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd2f39d065486f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68ca648b458d1; op2val:0xbfb4b53acb56a497;
op3val:0x7fad2f39d065486f; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68ca648b458d1 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4b53acb56a497 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd2f39d065486f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68ca648b458d1; op2val:0xbfb4b53acb56a497;
op3val:0x7fad2f39d065486f; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68ca648b458d1 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4b53acb56a497 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd2f39d065486f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68ca648b458d1; op2val:0xbfb4b53acb56a497;
op3val:0x7fad2f39d065486f; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68ca648b458d1 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4b53acb56a497 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd2f39d065486f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68ca648b458d1; op2val:0xbfb4b53acb56a497;
op3val:0x7fad2f39d065486f; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ad3fc69bae31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3f1e4b04626ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd83afb61ec2c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ad3fc69bae31; op2val:0xbff3f1e4b04626ba;
op3val:0x7fed83afb61ec2c3; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ad3fc69bae31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3f1e4b04626ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd83afb61ec2c3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ad3fc69bae31; op2val:0xbff3f1e4b04626ba;
op3val:0x7fed83afb61ec2c3; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ad3fc69bae31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3f1e4b04626ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd83afb61ec2c3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ad3fc69bae31; op2val:0xbff3f1e4b04626ba;
op3val:0x7fed83afb61ec2c3; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ad3fc69bae31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3f1e4b04626ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd83afb61ec2c3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ad3fc69bae31; op2val:0xbff3f1e4b04626ba;
op3val:0x7fed83afb61ec2c3; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ad3fc69bae31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3f1e4b04626ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd83afb61ec2c3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ad3fc69bae31; op2val:0xbff3f1e4b04626ba;
op3val:0x7fed83afb61ec2c3; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fe52216e3a3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x207700538aa86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0943a59dff43 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fe52216e3a3d; op2val:0xbff207700538aa86;
op3val:0x7feb0943a59dff43; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fe52216e3a3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x207700538aa86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0943a59dff43 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fe52216e3a3d; op2val:0xbff207700538aa86;
op3val:0x7feb0943a59dff43; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fe52216e3a3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x207700538aa86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0943a59dff43 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fe52216e3a3d; op2val:0xbff207700538aa86;
op3val:0x7feb0943a59dff43; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fe52216e3a3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x207700538aa86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0943a59dff43 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fe52216e3a3d; op2val:0xbff207700538aa86;
op3val:0x7feb0943a59dff43; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fe52216e3a3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x207700538aa86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0943a59dff43 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fe52216e3a3d; op2val:0xbff207700538aa86;
op3val:0x7feb0943a59dff43; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x880d2a98ec8a6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaae02012bf970 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x46de92c30d8b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe880d2a98ec8a6; op2val:0xbfcaae02012bf970;
op3val:0x7fc46de92c30d8b3; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x880d2a98ec8a6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaae02012bf970 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x46de92c30d8b3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe880d2a98ec8a6; op2val:0xbfcaae02012bf970;
op3val:0x7fc46de92c30d8b3; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x880d2a98ec8a6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaae02012bf970 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x46de92c30d8b3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe880d2a98ec8a6; op2val:0xbfcaae02012bf970;
op3val:0x7fc46de92c30d8b3; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x880d2a98ec8a6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaae02012bf970 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x46de92c30d8b3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe880d2a98ec8a6; op2val:0xbfcaae02012bf970;
op3val:0x7fc46de92c30d8b3; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x880d2a98ec8a6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaae02012bf970 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x46de92c30d8b3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe880d2a98ec8a6; op2val:0xbfcaae02012bf970;
op3val:0x7fc46de92c30d8b3; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97239c6c3047e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f682f6148f16 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe288d7f5db50b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97239c6c3047e; op2val:0xbff2f682f6148f16;
op3val:0x7fee288d7f5db50b; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97239c6c3047e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f682f6148f16 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe288d7f5db50b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97239c6c3047e; op2val:0xbff2f682f6148f16;
op3val:0x7fee288d7f5db50b; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97239c6c3047e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f682f6148f16 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe288d7f5db50b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97239c6c3047e; op2val:0xbff2f682f6148f16;
op3val:0x7fee288d7f5db50b; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97239c6c3047e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f682f6148f16 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe288d7f5db50b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97239c6c3047e; op2val:0xbff2f682f6148f16;
op3val:0x7fee288d7f5db50b; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97239c6c3047e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f682f6148f16 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe288d7f5db50b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97239c6c3047e; op2val:0xbff2f682f6148f16;
op3val:0x7fee288d7f5db50b; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9823a6849a878 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x648419e5f7622 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1c32179e3068f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9823a6849a878; op2val:0xbfc648419e5f7622;
op3val:0x7fc1c32179e3068f; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9823a6849a878 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x648419e5f7622 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1c32179e3068f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9823a6849a878; op2val:0xbfc648419e5f7622;
op3val:0x7fc1c32179e3068f; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9823a6849a878 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x648419e5f7622 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1c32179e3068f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9823a6849a878; op2val:0xbfc648419e5f7622;
op3val:0x7fc1c32179e3068f; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9823a6849a878 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x648419e5f7622 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1c32179e3068f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9823a6849a878; op2val:0xbfc648419e5f7622;
op3val:0x7fc1c32179e3068f; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9823a6849a878 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x648419e5f7622 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1c32179e3068f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9823a6849a878; op2val:0xbfc648419e5f7622;
op3val:0x7fc1c32179e3068f; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x982e185781cc1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x140f26a707f49 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb829da92ef6eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe982e185781cc1; op2val:0xbff140f26a707f49;
op3val:0x7feb829da92ef6eb; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x982e185781cc1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x140f26a707f49 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb829da92ef6eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe982e185781cc1; op2val:0xbff140f26a707f49;
op3val:0x7feb829da92ef6eb; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x982e185781cc1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x140f26a707f49 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb829da92ef6eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe982e185781cc1; op2val:0xbff140f26a707f49;
op3val:0x7feb829da92ef6eb; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x982e185781cc1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x140f26a707f49 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb829da92ef6eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe982e185781cc1; op2val:0xbff140f26a707f49;
op3val:0x7feb829da92ef6eb; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x982e185781cc1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x140f26a707f49 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb829da92ef6eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe982e185781cc1; op2val:0xbff140f26a707f49;
op3val:0x7feb829da92ef6eb; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa314cd13968e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2cb7501dfc887 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec4877592448b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea314cd13968e7; op2val:0xbfe2cb7501dfc887;
op3val:0x7fdec4877592448b; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa314cd13968e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2cb7501dfc887 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec4877592448b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea314cd13968e7; op2val:0xbfe2cb7501dfc887;
op3val:0x7fdec4877592448b; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa314cd13968e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2cb7501dfc887 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec4877592448b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea314cd13968e7; op2val:0xbfe2cb7501dfc887;
op3val:0x7fdec4877592448b; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa314cd13968e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2cb7501dfc887 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec4877592448b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea314cd13968e7; op2val:0xbfe2cb7501dfc887;
op3val:0x7fdec4877592448b; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa314cd13968e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2cb7501dfc887 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec4877592448b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea314cd13968e7; op2val:0xbfe2cb7501dfc887;
op3val:0x7fdec4877592448b; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc998825886bbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5655fb54b9f4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x31f5b782c2cff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec998825886bbc; op2val:0xbfd5655fb54b9f4c;
op3val:0x7fd31f5b782c2cff; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc998825886bbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5655fb54b9f4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x31f5b782c2cff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec998825886bbc; op2val:0xbfd5655fb54b9f4c;
op3val:0x7fd31f5b782c2cff; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc998825886bbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5655fb54b9f4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x31f5b782c2cff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec998825886bbc; op2val:0xbfd5655fb54b9f4c;
op3val:0x7fd31f5b782c2cff; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc998825886bbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5655fb54b9f4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x31f5b782c2cff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec998825886bbc; op2val:0xbfd5655fb54b9f4c;
op3val:0x7fd31f5b782c2cff; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc998825886bbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5655fb54b9f4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x31f5b782c2cff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec998825886bbc; op2val:0xbfd5655fb54b9f4c;
op3val:0x7fd31f5b782c2cff; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd42d44a09da1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0159563e0931a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcfb10ebe5bb27 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd42d44a09da1; op2val:0xbfc0159563e0931a;
op3val:0x7fbcfb10ebe5bb27; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd42d44a09da1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0159563e0931a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcfb10ebe5bb27 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd42d44a09da1; op2val:0xbfc0159563e0931a;
op3val:0x7fbcfb10ebe5bb27; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd42d44a09da1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0159563e0931a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcfb10ebe5bb27 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd42d44a09da1; op2val:0xbfc0159563e0931a;
op3val:0x7fbcfb10ebe5bb27; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd42d44a09da1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0159563e0931a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcfb10ebe5bb27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd42d44a09da1; op2val:0xbfc0159563e0931a;
op3val:0x7fbcfb10ebe5bb27; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd42d44a09da1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0159563e0931a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcfb10ebe5bb27 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd42d44a09da1; op2val:0xbfc0159563e0931a;
op3val:0x7fbcfb10ebe5bb27; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdbfbc83472936 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x036953caa3e91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe253919d94c5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedbfbc83472936; op2val:0xbff036953caa3e91;
op3val:0x7fee253919d94c5b; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdbfbc83472936 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x036953caa3e91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe253919d94c5b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedbfbc83472936; op2val:0xbff036953caa3e91;
op3val:0x7fee253919d94c5b; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdbfbc83472936 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x036953caa3e91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe253919d94c5b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedbfbc83472936; op2val:0xbff036953caa3e91;
op3val:0x7fee253919d94c5b; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdbfbc83472936 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x036953caa3e91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe253919d94c5b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedbfbc83472936; op2val:0xbff036953caa3e91;
op3val:0x7fee253919d94c5b; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdbfbc83472936 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x036953caa3e91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe253919d94c5b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedbfbc83472936; op2val:0xbff036953caa3e91;
op3val:0x7fee253919d94c5b; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2ffa6cff07a7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6039e999a6b85 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4c46648351903 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2ffa6cff07a7; op2val:0xbfe6039e999a6b85;
op3val:0x7fe4c46648351903; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2ffa6cff07a7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6039e999a6b85 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4c46648351903 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2ffa6cff07a7; op2val:0xbfe6039e999a6b85;
op3val:0x7fe4c46648351903; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2ffa6cff07a7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6039e999a6b85 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4c46648351903 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2ffa6cff07a7; op2val:0xbfe6039e999a6b85;
op3val:0x7fe4c46648351903; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2ffa6cff07a7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6039e999a6b85 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4c46648351903 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2ffa6cff07a7; op2val:0xbfe6039e999a6b85;
op3val:0x7fe4c46648351903; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2ffa6cff07a7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6039e999a6b85 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4c46648351903 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2ffa6cff07a7; op2val:0xbfe6039e999a6b85;
op3val:0x7fe4c46648351903; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3403ffc18c4e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x80322f838f766 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x76a11f9800e5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3403ffc18c4e; op2val:0xbf980322f838f766;
op3val:0x7f976a11f9800e5f; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3403ffc18c4e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x80322f838f766 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x76a11f9800e5f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3403ffc18c4e; op2val:0xbf980322f838f766;
op3val:0x7f976a11f9800e5f; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3403ffc18c4e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x80322f838f766 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x76a11f9800e5f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3403ffc18c4e; op2val:0xbf980322f838f766;
op3val:0x7f976a11f9800e5f; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3403ffc18c4e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x80322f838f766 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x76a11f9800e5f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3403ffc18c4e; op2val:0xbf980322f838f766;
op3val:0x7f976a11f9800e5f; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3403ffc18c4e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x80322f838f766 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x76a11f9800e5f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3403ffc18c4e; op2val:0xbf980322f838f766;
op3val:0x7f976a11f9800e5f; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6ffe64a9d644 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc6aa504850cbd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbeac3b0aa7ae7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6ffe64a9d644; op2val:0xbfec6aa504850cbd;
op3val:0x7febeac3b0aa7ae7; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6ffe64a9d644 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc6aa504850cbd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbeac3b0aa7ae7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6ffe64a9d644; op2val:0xbfec6aa504850cbd;
op3val:0x7febeac3b0aa7ae7; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6ffe64a9d644 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc6aa504850cbd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbeac3b0aa7ae7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6ffe64a9d644; op2val:0xbfec6aa504850cbd;
op3val:0x7febeac3b0aa7ae7; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6ffe64a9d644 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc6aa504850cbd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbeac3b0aa7ae7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6ffe64a9d644; op2val:0xbfec6aa504850cbd;
op3val:0x7febeac3b0aa7ae7; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6ffe64a9d644 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc6aa504850cbd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbeac3b0aa7ae7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6ffe64a9d644; op2val:0xbfec6aa504850cbd;
op3val:0x7febeac3b0aa7ae7; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7fa7ec9ded4be93f; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7fa7ec9ded4be93f; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 660*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9198580926962723135,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9198580926962723135,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9198580926962723135,64,FLEN)
NAN_BOXED(9190399455804709631,64,FLEN)
NAN_BOXED(13848717010951169984,64,FLEN)
NAN_BOXED(9208662552706795875,64,FLEN)
NAN_BOXED(9190399455804709631,64,FLEN)
NAN_BOXED(13848717010951169984,64,FLEN)
NAN_BOXED(9208662552706795875,64,FLEN)
NAN_BOXED(9190399455804709631,64,FLEN)
NAN_BOXED(13848717010951169984,64,FLEN)
NAN_BOXED(9208662552706795875,64,FLEN)
NAN_BOXED(9190399455804709631,64,FLEN)
NAN_BOXED(13848717010951169984,64,FLEN)
NAN_BOXED(9208662552706795875,64,FLEN)
NAN_BOXED(9190399455804709631,64,FLEN)
NAN_BOXED(13848717010951169984,64,FLEN)
NAN_BOXED(9208662552706795875,64,FLEN)
NAN_BOXED(9192550852354099935,64,FLEN)
NAN_BOXED(13854704960061443314,64,FLEN)
NAN_BOXED(9216956553837207819,64,FLEN)
NAN_BOXED(9192550852354099935,64,FLEN)
NAN_BOXED(13854704960061443314,64,FLEN)
NAN_BOXED(9216956553837207819,64,FLEN)
NAN_BOXED(9192550852354099935,64,FLEN)
NAN_BOXED(13854704960061443314,64,FLEN)
NAN_BOXED(9216956553837207819,64,FLEN)
NAN_BOXED(9192550852354099935,64,FLEN)
NAN_BOXED(13854704960061443314,64,FLEN)
NAN_BOXED(9216956553837207819,64,FLEN)
NAN_BOXED(9192550852354099935,64,FLEN)
NAN_BOXED(13854704960061443314,64,FLEN)
NAN_BOXED(9216956553837207819,64,FLEN)
NAN_BOXED(9195703427694364383,64,FLEN)
NAN_BOXED(13848583789075419900,64,FLEN)
NAN_BOXED(9213745550396303809,64,FLEN)
NAN_BOXED(9195703427694364383,64,FLEN)
NAN_BOXED(13848583789075419900,64,FLEN)
NAN_BOXED(9213745550396303809,64,FLEN)
NAN_BOXED(9195703427694364383,64,FLEN)
NAN_BOXED(13848583789075419900,64,FLEN)
NAN_BOXED(9213745550396303809,64,FLEN)
NAN_BOXED(9195703427694364383,64,FLEN)
NAN_BOXED(13848583789075419900,64,FLEN)
NAN_BOXED(9213745550396303809,64,FLEN)
NAN_BOXED(9195703427694364383,64,FLEN)
NAN_BOXED(13848583789075419900,64,FLEN)
NAN_BOXED(9213745550396303809,64,FLEN)
NAN_BOXED(9197126006496158671,64,FLEN)
NAN_BOXED(13851332729362538282,64,FLEN)
NAN_BOXED(9218380248694510169,64,FLEN)
NAN_BOXED(9197126006496158671,64,FLEN)
NAN_BOXED(13851332729362538282,64,FLEN)
NAN_BOXED(9218380248694510169,64,FLEN)
NAN_BOXED(9197126006496158671,64,FLEN)
NAN_BOXED(13851332729362538282,64,FLEN)
NAN_BOXED(9218380248694510169,64,FLEN)
NAN_BOXED(9197126006496158671,64,FLEN)
NAN_BOXED(13851332729362538282,64,FLEN)
NAN_BOXED(9218380248694510169,64,FLEN)
NAN_BOXED(9197126006496158671,64,FLEN)
NAN_BOXED(13851332729362538282,64,FLEN)
NAN_BOXED(9218380248694510169,64,FLEN)
NAN_BOXED(9204136468864259943,64,FLEN)
NAN_BOXED(13842856286919786411,64,FLEN)
NAN_BOXED(9216602208389282583,64,FLEN)
NAN_BOXED(9204136468864259943,64,FLEN)
NAN_BOXED(13842856286919786411,64,FLEN)
NAN_BOXED(9216602208389282583,64,FLEN)
NAN_BOXED(9204136468864259943,64,FLEN)
NAN_BOXED(13842856286919786411,64,FLEN)
NAN_BOXED(9216602208389282583,64,FLEN)
NAN_BOXED(9204136468864259943,64,FLEN)
NAN_BOXED(13842856286919786411,64,FLEN)
NAN_BOXED(9216602208389282583,64,FLEN)
NAN_BOXED(9204136468864259943,64,FLEN)
NAN_BOXED(13842856286919786411,64,FLEN)
NAN_BOXED(9216602208389282583,64,FLEN)
NAN_BOXED(9206103503242040027,64,FLEN)
NAN_BOXED(13825097447963491190,64,FLEN)
NAN_BOXED(9201044250112724295,64,FLEN)
NAN_BOXED(9206103503242040027,64,FLEN)
NAN_BOXED(13825097447963491190,64,FLEN)
NAN_BOXED(9201044250112724295,64,FLEN)
NAN_BOXED(9206103503242040027,64,FLEN)
NAN_BOXED(13825097447963491190,64,FLEN)
NAN_BOXED(9201044250112724295,64,FLEN)
NAN_BOXED(9206103503242040027,64,FLEN)
NAN_BOXED(13825097447963491190,64,FLEN)
NAN_BOXED(9201044250112724295,64,FLEN)
NAN_BOXED(9206103503242040027,64,FLEN)
NAN_BOXED(13825097447963491190,64,FLEN)
NAN_BOXED(9201044250112724295,64,FLEN)
NAN_BOXED(9207372350226086527,64,FLEN)
NAN_BOXED(13841002340069541768,64,FLEN)
NAN_BOXED(9218464733652405448,64,FLEN)
NAN_BOXED(9207372350226086527,64,FLEN)
NAN_BOXED(13841002340069541768,64,FLEN)
NAN_BOXED(9218464733652405448,64,FLEN)
NAN_BOXED(9207372350226086527,64,FLEN)
NAN_BOXED(13841002340069541768,64,FLEN)
NAN_BOXED(9218464733652405448,64,FLEN)
NAN_BOXED(9207372350226086527,64,FLEN)
NAN_BOXED(13841002340069541768,64,FLEN)
NAN_BOXED(9218464733652405448,64,FLEN)
NAN_BOXED(9207372350226086527,64,FLEN)
NAN_BOXED(13841002340069541768,64,FLEN)
NAN_BOXED(9218464733652405448,64,FLEN)
NAN_BOXED(9207934478094664215,64,FLEN)
NAN_BOXED(13839213893101618662,64,FLEN)
NAN_BOXED(9216668306423676459,64,FLEN)
NAN_BOXED(9207934478094664215,64,FLEN)
NAN_BOXED(13839213893101618662,64,FLEN)
NAN_BOXED(9216668306423676459,64,FLEN)
NAN_BOXED(9207934478094664215,64,FLEN)
NAN_BOXED(13839213893101618662,64,FLEN)
NAN_BOXED(9216668306423676459,64,FLEN)
NAN_BOXED(9207934478094664215,64,FLEN)
NAN_BOXED(13839213893101618662,64,FLEN)
NAN_BOXED(9216668306423676459,64,FLEN)
NAN_BOXED(9207934478094664215,64,FLEN)
NAN_BOXED(13839213893101618662,64,FLEN)
NAN_BOXED(9216668306423676459,64,FLEN)
NAN_BOXED(9208231998280703331,64,FLEN)
NAN_BOXED(13840231643052298272,64,FLEN)
NAN_BOXED(9218336796308393303,64,FLEN)
NAN_BOXED(9208231998280703331,64,FLEN)
NAN_BOXED(13840231643052298272,64,FLEN)
NAN_BOXED(9218336796308393303,64,FLEN)
NAN_BOXED(9208231998280703331,64,FLEN)
NAN_BOXED(13840231643052298272,64,FLEN)
NAN_BOXED(9218336796308393303,64,FLEN)
NAN_BOXED(9208231998280703331,64,FLEN)
NAN_BOXED(13840231643052298272,64,FLEN)
NAN_BOXED(9218336796308393303,64,FLEN)
NAN_BOXED(9208231998280703331,64,FLEN)
NAN_BOXED(13840231643052298272,64,FLEN)
NAN_BOXED(9218336796308393303,64,FLEN)
NAN_BOXED(9208400500207166407,64,FLEN)
NAN_BOXED(13830683996836337829,64,FLEN)
NAN_BOXED(9208617566025330231,64,FLEN)
NAN_BOXED(9208400500207166407,64,FLEN)
NAN_BOXED(13830683996836337829,64,FLEN)
NAN_BOXED(9208617566025330231,64,FLEN)
NAN_BOXED(9208400500207166407,64,FLEN)
NAN_BOXED(13830683996836337829,64,FLEN)
NAN_BOXED(9208617566025330231,64,FLEN)
NAN_BOXED(9208400500207166407,64,FLEN)
NAN_BOXED(13830683996836337829,64,FLEN)
NAN_BOXED(9208617566025330231,64,FLEN)
NAN_BOXED(9208400500207166407,64,FLEN)
NAN_BOXED(13830683996836337829,64,FLEN)
NAN_BOXED(9208617566025330231,64,FLEN)
NAN_BOXED(9210392345062990867,64,FLEN)
NAN_BOXED(13837937484383796494,64,FLEN)
NAN_BOXED(9218114943322703665,64,FLEN)
NAN_BOXED(9210392345062990867,64,FLEN)
NAN_BOXED(13837937484383796494,64,FLEN)
NAN_BOXED(9218114943322703665,64,FLEN)
NAN_BOXED(9210392345062990867,64,FLEN)
NAN_BOXED(13837937484383796494,64,FLEN)
NAN_BOXED(9218114943322703665,64,FLEN)
NAN_BOXED(9210392345062990867,64,FLEN)
NAN_BOXED(13837937484383796494,64,FLEN)
NAN_BOXED(9218114943322703665,64,FLEN)
NAN_BOXED(9210392345062990867,64,FLEN)
NAN_BOXED(13837937484383796494,64,FLEN)
NAN_BOXED(9218114943322703665,64,FLEN)
NAN_BOXED(9210569296927939491,64,FLEN)
NAN_BOXED(13838038096452645041,64,FLEN)
NAN_BOXED(9218521461798185379,64,FLEN)
NAN_BOXED(9210569296927939491,64,FLEN)
NAN_BOXED(13838038096452645041,64,FLEN)
NAN_BOXED(9218521461798185379,64,FLEN)
NAN_BOXED(9210569296927939491,64,FLEN)
NAN_BOXED(13838038096452645041,64,FLEN)
NAN_BOXED(9218521461798185379,64,FLEN)
NAN_BOXED(9210569296927939491,64,FLEN)
NAN_BOXED(13838038096452645041,64,FLEN)
NAN_BOXED(9218521461798185379,64,FLEN)
NAN_BOXED(9210569296927939491,64,FLEN)
NAN_BOXED(13838038096452645041,64,FLEN)
NAN_BOXED(9218521461798185379,64,FLEN)
NAN_BOXED(9210786441281014059,64,FLEN)
NAN_BOXED(13835060982838895713,64,FLEN)
NAN_BOXED(9215293569891841385,64,FLEN)
NAN_BOXED(9210786441281014059,64,FLEN)
NAN_BOXED(13835060982838895713,64,FLEN)
NAN_BOXED(9215293569891841385,64,FLEN)
NAN_BOXED(9210786441281014059,64,FLEN)
NAN_BOXED(13835060982838895713,64,FLEN)
NAN_BOXED(9215293569891841385,64,FLEN)
NAN_BOXED(9210786441281014059,64,FLEN)
NAN_BOXED(13835060982838895713,64,FLEN)
NAN_BOXED(9215293569891841385,64,FLEN)
NAN_BOXED(9210786441281014059,64,FLEN)
NAN_BOXED(13835060982838895713,64,FLEN)
NAN_BOXED(9215293569891841385,64,FLEN)
NAN_BOXED(9211046461200558691,64,FLEN)
NAN_BOXED(13832913624418554066,64,FLEN)
NAN_BOXED(9214026498125054509,64,FLEN)
NAN_BOXED(9211046461200558691,64,FLEN)
NAN_BOXED(13832913624418554066,64,FLEN)
NAN_BOXED(9214026498125054509,64,FLEN)
NAN_BOXED(9211046461200558691,64,FLEN)
NAN_BOXED(13832913624418554066,64,FLEN)
NAN_BOXED(9214026498125054509,64,FLEN)
NAN_BOXED(9211046461200558691,64,FLEN)
NAN_BOXED(13832913624418554066,64,FLEN)
NAN_BOXED(9214026498125054509,64,FLEN)
NAN_BOXED(9211046461200558691,64,FLEN)
NAN_BOXED(13832913624418554066,64,FLEN)
NAN_BOXED(9214026498125054509,64,FLEN)
NAN_BOXED(9211444647065761477,64,FLEN)
NAN_BOXED(13829809697303133186,64,FLEN)
NAN_BOXED(9210941344046367345,64,FLEN)
NAN_BOXED(9211444647065761477,64,FLEN)
NAN_BOXED(13829809697303133186,64,FLEN)
NAN_BOXED(9210941344046367345,64,FLEN)
NAN_BOXED(9211444647065761477,64,FLEN)
NAN_BOXED(13829809697303133186,64,FLEN)
NAN_BOXED(9210941344046367345,64,FLEN)
NAN_BOXED(9211444647065761477,64,FLEN)
NAN_BOXED(13829809697303133186,64,FLEN)
NAN_BOXED(9210941344046367345,64,FLEN)
NAN_BOXED(9211444647065761477,64,FLEN)
NAN_BOXED(13829809697303133186,64,FLEN)
NAN_BOXED(9210941344046367345,64,FLEN)
NAN_BOXED(9211561469565048705,64,FLEN)
NAN_BOXED(13830690609015326396,64,FLEN)
NAN_BOXED(9211749024529663413,64,FLEN)
NAN_BOXED(9211561469565048705,64,FLEN)
NAN_BOXED(13830690609015326396,64,FLEN)
NAN_BOXED(9211749024529663413,64,FLEN)
NAN_BOXED(9211561469565048705,64,FLEN)
NAN_BOXED(13830690609015326396,64,FLEN)
NAN_BOXED(9211749024529663413,64,FLEN)
NAN_BOXED(9211561469565048705,64,FLEN)
NAN_BOXED(13830690609015326396,64,FLEN)
NAN_BOXED(9211749024529663413,64,FLEN)
NAN_BOXED(9211561469565048705,64,FLEN)
NAN_BOXED(13830690609015326396,64,FLEN)
NAN_BOXED(9211749024529663413,64,FLEN)
NAN_BOXED(9211864257766996635,64,FLEN)
NAN_BOXED(13825320738332264625,64,FLEN)
NAN_BOXED(9206833235814318519,64,FLEN)
NAN_BOXED(9211864257766996635,64,FLEN)
NAN_BOXED(13825320738332264625,64,FLEN)
NAN_BOXED(9206833235814318519,64,FLEN)
NAN_BOXED(9211864257766996635,64,FLEN)
NAN_BOXED(13825320738332264625,64,FLEN)
NAN_BOXED(9206833235814318519,64,FLEN)
NAN_BOXED(9211864257766996635,64,FLEN)
NAN_BOXED(13825320738332264625,64,FLEN)
NAN_BOXED(9206833235814318519,64,FLEN)
NAN_BOXED(9211864257766996635,64,FLEN)
NAN_BOXED(13825320738332264625,64,FLEN)
NAN_BOXED(9206833235814318519,64,FLEN)
NAN_BOXED(9211954231421094877,64,FLEN)
NAN_BOXED(13833165896000041670,64,FLEN)
NAN_BOXED(9215072072338599031,64,FLEN)
NAN_BOXED(9211954231421094877,64,FLEN)
NAN_BOXED(13833165896000041670,64,FLEN)
NAN_BOXED(9215072072338599031,64,FLEN)
NAN_BOXED(9211954231421094877,64,FLEN)
NAN_BOXED(13833165896000041670,64,FLEN)
NAN_BOXED(9215072072338599031,64,FLEN)
NAN_BOXED(9211954231421094877,64,FLEN)
NAN_BOXED(13833165896000041670,64,FLEN)
NAN_BOXED(9215072072338599031,64,FLEN)
NAN_BOXED(9211954231421094877,64,FLEN)
NAN_BOXED(13833165896000041670,64,FLEN)
NAN_BOXED(9215072072338599031,64,FLEN)
NAN_BOXED(9213807635100504967,64,FLEN)
NAN_BOXED(13826282019106552769,64,FLEN)
NAN_BOXED(9209737761254774171,64,FLEN)
NAN_BOXED(9213807635100504967,64,FLEN)
NAN_BOXED(13826282019106552769,64,FLEN)
NAN_BOXED(9209737761254774171,64,FLEN)
NAN_BOXED(9213807635100504967,64,FLEN)
NAN_BOXED(13826282019106552769,64,FLEN)
NAN_BOXED(9209737761254774171,64,FLEN)
NAN_BOXED(9213807635100504967,64,FLEN)
NAN_BOXED(13826282019106552769,64,FLEN)
NAN_BOXED(9209737761254774171,64,FLEN)
NAN_BOXED(9213807635100504967,64,FLEN)
NAN_BOXED(13826282019106552769,64,FLEN)
NAN_BOXED(9209737761254774171,64,FLEN)
NAN_BOXED(9214587331820972631,64,FLEN)
NAN_BOXED(13832707980722304934,64,FLEN)
NAN_BOXED(9216847248868635976,64,FLEN)
NAN_BOXED(9214587331820972631,64,FLEN)
NAN_BOXED(13832707980722304934,64,FLEN)
NAN_BOXED(9216847248868635976,64,FLEN)
NAN_BOXED(9214587331820972631,64,FLEN)
NAN_BOXED(13832707980722304934,64,FLEN)
NAN_BOXED(9216847248868635976,64,FLEN)
NAN_BOXED(9214587331820972631,64,FLEN)
NAN_BOXED(13832707980722304934,64,FLEN)
NAN_BOXED(9216847248868635976,64,FLEN)
NAN_BOXED(9214587331820972631,64,FLEN)
NAN_BOXED(13832707980722304934,64,FLEN)
NAN_BOXED(9216847248868635976,64,FLEN)
NAN_BOXED(9214718131199616337,64,FLEN)
NAN_BOXED(13831712102729386106,64,FLEN)
NAN_BOXED(9215966592142196585,64,FLEN)
NAN_BOXED(9214718131199616337,64,FLEN)
NAN_BOXED(13831712102729386106,64,FLEN)
NAN_BOXED(9215966592142196585,64,FLEN)
NAN_BOXED(9214718131199616337,64,FLEN)
NAN_BOXED(13831712102729386106,64,FLEN)
NAN_BOXED(9215966592142196585,64,FLEN)
NAN_BOXED(9214718131199616337,64,FLEN)
NAN_BOXED(13831712102729386106,64,FLEN)
NAN_BOXED(9215966592142196585,64,FLEN)
NAN_BOXED(9214718131199616337,64,FLEN)
NAN_BOXED(13831712102729386106,64,FLEN)
NAN_BOXED(9215966592142196585,64,FLEN)
NAN_BOXED(9214759000378731513,64,FLEN)
NAN_BOXED(13830804418694139164,64,FLEN)
NAN_BOXED(9215030840612835468,64,FLEN)
NAN_BOXED(9214759000378731513,64,FLEN)
NAN_BOXED(13830804418694139164,64,FLEN)
NAN_BOXED(9215030840612835468,64,FLEN)
NAN_BOXED(9214759000378731513,64,FLEN)
NAN_BOXED(13830804418694139164,64,FLEN)
NAN_BOXED(9215030840612835468,64,FLEN)
NAN_BOXED(9214759000378731513,64,FLEN)
NAN_BOXED(13830804418694139164,64,FLEN)
NAN_BOXED(9215030840612835468,64,FLEN)
NAN_BOXED(9214759000378731513,64,FLEN)
NAN_BOXED(13830804418694139164,64,FLEN)
NAN_BOXED(9215030840612835468,64,FLEN)
NAN_BOXED(9215422755854844672,64,FLEN)
NAN_BOXED(13819933048153860656,64,FLEN)
NAN_BOXED(9205418859649935507,64,FLEN)
NAN_BOXED(9215422755854844672,64,FLEN)
NAN_BOXED(13819933048153860656,64,FLEN)
NAN_BOXED(9205418859649935507,64,FLEN)
NAN_BOXED(9215422755854844672,64,FLEN)
NAN_BOXED(13819933048153860656,64,FLEN)
NAN_BOXED(9205418859649935507,64,FLEN)
NAN_BOXED(9215422755854844672,64,FLEN)
NAN_BOXED(13819933048153860656,64,FLEN)
NAN_BOXED(9205418859649935507,64,FLEN)
NAN_BOXED(9215422755854844672,64,FLEN)
NAN_BOXED(13819933048153860656,64,FLEN)
NAN_BOXED(9205418859649935507,64,FLEN)
NAN_BOXED(9215471837654651743,64,FLEN)
NAN_BOXED(13831414000221490851,64,FLEN)
NAN_BOXED(9216542661189510125,64,FLEN)
NAN_BOXED(9215471837654651743,64,FLEN)
NAN_BOXED(13831414000221490851,64,FLEN)
NAN_BOXED(9216542661189510125,64,FLEN)
NAN_BOXED(9215471837654651743,64,FLEN)
NAN_BOXED(13831414000221490851,64,FLEN)
NAN_BOXED(9216542661189510125,64,FLEN)
NAN_BOXED(9215471837654651743,64,FLEN)
NAN_BOXED(13831414000221490851,64,FLEN)
NAN_BOXED(9216542661189510125,64,FLEN)
NAN_BOXED(9215471837654651743,64,FLEN)
NAN_BOXED(13831414000221490851,64,FLEN)
NAN_BOXED(9216542661189510125,64,FLEN)
NAN_BOXED(9216081987549895335,64,FLEN)
NAN_BOXED(13832353714886247098,64,FLEN)
NAN_BOXED(9218567275326227001,64,FLEN)
NAN_BOXED(9216081987549895335,64,FLEN)
NAN_BOXED(13832353714886247098,64,FLEN)
NAN_BOXED(9218567275326227001,64,FLEN)
NAN_BOXED(9216081987549895335,64,FLEN)
NAN_BOXED(13832353714886247098,64,FLEN)
NAN_BOXED(9218567275326227001,64,FLEN)
NAN_BOXED(9216081987549895335,64,FLEN)
NAN_BOXED(13832353714886247098,64,FLEN)
NAN_BOXED(9218567275326227001,64,FLEN)
NAN_BOXED(9216081987549895335,64,FLEN)
NAN_BOXED(13832353714886247098,64,FLEN)
NAN_BOXED(9218567275326227001,64,FLEN)
NAN_BOXED(9216208333272537297,64,FLEN)
NAN_BOXED(13813865221176337559,64,FLEN)
NAN_BOXED(9200061539143731311,64,FLEN)
NAN_BOXED(9216208333272537297,64,FLEN)
NAN_BOXED(13813865221176337559,64,FLEN)
NAN_BOXED(9200061539143731311,64,FLEN)
NAN_BOXED(9216208333272537297,64,FLEN)
NAN_BOXED(13813865221176337559,64,FLEN)
NAN_BOXED(9200061539143731311,64,FLEN)
NAN_BOXED(9216208333272537297,64,FLEN)
NAN_BOXED(13813865221176337559,64,FLEN)
NAN_BOXED(9200061539143731311,64,FLEN)
NAN_BOXED(9216208333272537297,64,FLEN)
NAN_BOXED(13813865221176337559,64,FLEN)
NAN_BOXED(9200061539143731311,64,FLEN)
NAN_BOXED(9216525651863645745,64,FLEN)
NAN_BOXED(13831664845097150138,64,FLEN)
NAN_BOXED(9218168802995258051,64,FLEN)
NAN_BOXED(9216525651863645745,64,FLEN)
NAN_BOXED(13831664845097150138,64,FLEN)
NAN_BOXED(9218168802995258051,64,FLEN)
NAN_BOXED(9216525651863645745,64,FLEN)
NAN_BOXED(13831664845097150138,64,FLEN)
NAN_BOXED(9218168802995258051,64,FLEN)
NAN_BOXED(9216525651863645745,64,FLEN)
NAN_BOXED(13831664845097150138,64,FLEN)
NAN_BOXED(9218168802995258051,64,FLEN)
NAN_BOXED(9216525651863645745,64,FLEN)
NAN_BOXED(13831664845097150138,64,FLEN)
NAN_BOXED(9218168802995258051,64,FLEN)
NAN_BOXED(9216614791138654781,64,FLEN)
NAN_BOXED(13831125583313545862,64,FLEN)
NAN_BOXED(9217471248489905987,64,FLEN)
NAN_BOXED(9216614791138654781,64,FLEN)
NAN_BOXED(13831125583313545862,64,FLEN)
NAN_BOXED(9217471248489905987,64,FLEN)
NAN_BOXED(9216614791138654781,64,FLEN)
NAN_BOXED(13831125583313545862,64,FLEN)
NAN_BOXED(9217471248489905987,64,FLEN)
NAN_BOXED(9216614791138654781,64,FLEN)
NAN_BOXED(13831125583313545862,64,FLEN)
NAN_BOXED(9217471248489905987,64,FLEN)
NAN_BOXED(9216614791138654781,64,FLEN)
NAN_BOXED(13831125583313545862,64,FLEN)
NAN_BOXED(9217471248489905987,64,FLEN)
NAN_BOXED(9216758279689914534,64,FLEN)
NAN_BOXED(13820049730172615024,64,FLEN)
NAN_BOXED(9206604386488342707,64,FLEN)
NAN_BOXED(9216758279689914534,64,FLEN)
NAN_BOXED(13820049730172615024,64,FLEN)
NAN_BOXED(9206604386488342707,64,FLEN)
NAN_BOXED(9216758279689914534,64,FLEN)
NAN_BOXED(13820049730172615024,64,FLEN)
NAN_BOXED(9206604386488342707,64,FLEN)
NAN_BOXED(9216758279689914534,64,FLEN)
NAN_BOXED(13820049730172615024,64,FLEN)
NAN_BOXED(9206604386488342707,64,FLEN)
NAN_BOXED(9216758279689914534,64,FLEN)
NAN_BOXED(13820049730172615024,64,FLEN)
NAN_BOXED(9206604386488342707,64,FLEN)
NAN_BOXED(9217023704863802494,64,FLEN)
NAN_BOXED(13831388447942938390,64,FLEN)
NAN_BOXED(9218350075466331403,64,FLEN)
NAN_BOXED(9217023704863802494,64,FLEN)
NAN_BOXED(13831388447942938390,64,FLEN)
NAN_BOXED(9218350075466331403,64,FLEN)
NAN_BOXED(9217023704863802494,64,FLEN)
NAN_BOXED(13831388447942938390,64,FLEN)
NAN_BOXED(9218350075466331403,64,FLEN)
NAN_BOXED(9217023704863802494,64,FLEN)
NAN_BOXED(13831388447942938390,64,FLEN)
NAN_BOXED(9218350075466331403,64,FLEN)
NAN_BOXED(9217023704863802494,64,FLEN)
NAN_BOXED(13831388447942938390,64,FLEN)
NAN_BOXED(9218350075466331403,64,FLEN)
NAN_BOXED(9217041299759802488,64,FLEN)
NAN_BOXED(13818811953300076066,64,FLEN)
NAN_BOXED(9205853661868263055,64,FLEN)
NAN_BOXED(9217041299759802488,64,FLEN)
NAN_BOXED(13818811953300076066,64,FLEN)
NAN_BOXED(9205853661868263055,64,FLEN)
NAN_BOXED(9217041299759802488,64,FLEN)
NAN_BOXED(13818811953300076066,64,FLEN)
NAN_BOXED(9205853661868263055,64,FLEN)
NAN_BOXED(9217041299759802488,64,FLEN)
NAN_BOXED(13818811953300076066,64,FLEN)
NAN_BOXED(9205853661868263055,64,FLEN)
NAN_BOXED(9217041299759802488,64,FLEN)
NAN_BOXED(13818811953300076066,64,FLEN)
NAN_BOXED(9205853661868263055,64,FLEN)
NAN_BOXED(9217042017508924609,64,FLEN)
NAN_BOXED(13830907340543524681,64,FLEN)
NAN_BOXED(9217604676003755755,64,FLEN)
NAN_BOXED(9217042017508924609,64,FLEN)
NAN_BOXED(13830907340543524681,64,FLEN)
NAN_BOXED(9217604676003755755,64,FLEN)
NAN_BOXED(9217042017508924609,64,FLEN)
NAN_BOXED(13830907340543524681,64,FLEN)
NAN_BOXED(9217604676003755755,64,FLEN)
NAN_BOXED(9217042017508924609,64,FLEN)
NAN_BOXED(13830907340543524681,64,FLEN)
NAN_BOXED(9217604676003755755,64,FLEN)
NAN_BOXED(9217042017508924609,64,FLEN)
NAN_BOXED(13830907340543524681,64,FLEN)
NAN_BOXED(9217604676003755755,64,FLEN)
NAN_BOXED(9217233793364617447,64,FLEN)
NAN_BOXED(13826837509383899271,64,FLEN)
NAN_BOXED(9214017973718762635,64,FLEN)
NAN_BOXED(9217233793364617447,64,FLEN)
NAN_BOXED(13826837509383899271,64,FLEN)
NAN_BOXED(9214017973718762635,64,FLEN)
NAN_BOXED(9217233793364617447,64,FLEN)
NAN_BOXED(13826837509383899271,64,FLEN)
NAN_BOXED(9214017973718762635,64,FLEN)
NAN_BOXED(9217233793364617447,64,FLEN)
NAN_BOXED(13826837509383899271,64,FLEN)
NAN_BOXED(9214017973718762635,64,FLEN)
NAN_BOXED(9217233793364617447,64,FLEN)
NAN_BOXED(13826837509383899271,64,FLEN)
NAN_BOXED(9214017973718762635,64,FLEN)
NAN_BOXED(9217911347344862140,64,FLEN)
NAN_BOXED(13823066093021536076,64,FLEN)
NAN_BOXED(9210740140621442303,64,FLEN)
NAN_BOXED(9217911347344862140,64,FLEN)
NAN_BOXED(13823066093021536076,64,FLEN)
NAN_BOXED(9210740140621442303,64,FLEN)
NAN_BOXED(9217911347344862140,64,FLEN)
NAN_BOXED(13823066093021536076,64,FLEN)
NAN_BOXED(9210740140621442303,64,FLEN)
NAN_BOXED(9217911347344862140,64,FLEN)
NAN_BOXED(13823066093021536076,64,FLEN)
NAN_BOXED(9210740140621442303,64,FLEN)
NAN_BOXED(9217911347344862140,64,FLEN)
NAN_BOXED(13823066093021536076,64,FLEN)
NAN_BOXED(9210740140621442303,64,FLEN)
NAN_BOXED(9217975828210556321,64,FLEN)
NAN_BOXED(13817067388142654234,64,FLEN)
NAN_BOXED(9204507788534201127,64,FLEN)
NAN_BOXED(9217975828210556321,64,FLEN)
NAN_BOXED(13817067388142654234,64,FLEN)
NAN_BOXED(9204507788534201127,64,FLEN)
NAN_BOXED(9217975828210556321,64,FLEN)
NAN_BOXED(13817067388142654234,64,FLEN)
NAN_BOXED(9204507788534201127,64,FLEN)
NAN_BOXED(9217975828210556321,64,FLEN)
NAN_BOXED(13817067388142654234,64,FLEN)
NAN_BOXED(9204507788534201127,64,FLEN)
NAN_BOXED(9217975828210556321,64,FLEN)
NAN_BOXED(13817067388142654234,64,FLEN)
NAN_BOXED(9204507788534201127,64,FLEN)
NAN_BOXED(9218234828674509110,64,FLEN)
NAN_BOXED(13830614470250610321,64,FLEN)
NAN_BOXED(9218346414451018843,64,FLEN)
NAN_BOXED(9218234828674509110,64,FLEN)
NAN_BOXED(13830614470250610321,64,FLEN)
NAN_BOXED(9218346414451018843,64,FLEN)
NAN_BOXED(9218234828674509110,64,FLEN)
NAN_BOXED(13830614470250610321,64,FLEN)
NAN_BOXED(9218346414451018843,64,FLEN)
NAN_BOXED(9218234828674509110,64,FLEN)
NAN_BOXED(13830614470250610321,64,FLEN)
NAN_BOXED(9218346414451018843,64,FLEN)
NAN_BOXED(9218234828674509110,64,FLEN)
NAN_BOXED(13830614470250610321,64,FLEN)
NAN_BOXED(9218346414451018843,64,FLEN)
NAN_BOXED(9218358239890966439,64,FLEN)
NAN_BOXED(13827743685604436869,64,FLEN)
NAN_BOXED(9215706681084025091,64,FLEN)
NAN_BOXED(9218358239890966439,64,FLEN)
NAN_BOXED(13827743685604436869,64,FLEN)
NAN_BOXED(9215706681084025091,64,FLEN)
NAN_BOXED(9218358239890966439,64,FLEN)
NAN_BOXED(13827743685604436869,64,FLEN)
NAN_BOXED(9215706681084025091,64,FLEN)
NAN_BOXED(9218358239890966439,64,FLEN)
NAN_BOXED(13827743685604436869,64,FLEN)
NAN_BOXED(9215706681084025091,64,FLEN)
NAN_BOXED(9218358239890966439,64,FLEN)
NAN_BOXED(13827743685604436869,64,FLEN)
NAN_BOXED(9215706681084025091,64,FLEN)
NAN_BOXED(9218644154031115342,64,FLEN)
NAN_BOXED(13805788106432509798,64,FLEN)
NAN_BOXED(9193933789733064287,64,FLEN)
NAN_BOXED(9218644154031115342,64,FLEN)
NAN_BOXED(13805788106432509798,64,FLEN)
NAN_BOXED(9193933789733064287,64,FLEN)
NAN_BOXED(9218644154031115342,64,FLEN)
NAN_BOXED(13805788106432509798,64,FLEN)
NAN_BOXED(9193933789733064287,64,FLEN)
NAN_BOXED(9218644154031115342,64,FLEN)
NAN_BOXED(13805788106432509798,64,FLEN)
NAN_BOXED(9193933789733064287,64,FLEN)
NAN_BOXED(9218644154031115342,64,FLEN)
NAN_BOXED(13805788106432509798,64,FLEN)
NAN_BOXED(9193933789733064287,64,FLEN)
NAN_BOXED(9218710100651923012,64,FLEN)
NAN_BOXED(13829545812725927101,64,FLEN)
NAN_BOXED(9217719188547336935,64,FLEN)
NAN_BOXED(9218710100651923012,64,FLEN)
NAN_BOXED(13829545812725927101,64,FLEN)
NAN_BOXED(9217719188547336935,64,FLEN)
NAN_BOXED(9218710100651923012,64,FLEN)
NAN_BOXED(13829545812725927101,64,FLEN)
NAN_BOXED(9217719188547336935,64,FLEN)
NAN_BOXED(9218710100651923012,64,FLEN)
NAN_BOXED(13829545812725927101,64,FLEN)
NAN_BOXED(9217719188547336935,64,FLEN)
NAN_BOXED(9218710100651923012,64,FLEN)
NAN_BOXED(13829545812725927101,64,FLEN)
NAN_BOXED(9217719188547336935,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9198580926962723135,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9198580926962723135,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 186*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
