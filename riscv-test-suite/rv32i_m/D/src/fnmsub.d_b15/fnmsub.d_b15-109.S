
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmsub.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmsub.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fnmsub.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_82944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7f800000000000; valaddr_reg:x3; val_offset:248832*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248832*0 + 3*0*FLEN/8, x4, x1, x2)

inst_82945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fc00000000000; valaddr_reg:x3; val_offset:248835*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248835*0 + 3*1*FLEN/8, x4, x1, x2)

inst_82946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fe00000000000; valaddr_reg:x3; val_offset:248838*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248838*0 + 3*2*FLEN/8, x4, x1, x2)

inst_82947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ff00000000000; valaddr_reg:x3; val_offset:248841*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248841*0 + 3*3*FLEN/8, x4, x1, x2)

inst_82948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ff80000000000; valaddr_reg:x3; val_offset:248844*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248844*0 + 3*4*FLEN/8, x4, x1, x2)

inst_82949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffc0000000000; valaddr_reg:x3; val_offset:248847*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248847*0 + 3*5*FLEN/8, x4, x1, x2)

inst_82950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffe0000000000; valaddr_reg:x3; val_offset:248850*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248850*0 + 3*6*FLEN/8, x4, x1, x2)

inst_82951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fff0000000000; valaddr_reg:x3; val_offset:248853*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248853*0 + 3*7*FLEN/8, x4, x1, x2)

inst_82952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fff8000000000; valaddr_reg:x3; val_offset:248856*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248856*0 + 3*8*FLEN/8, x4, x1, x2)

inst_82953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffc000000000; valaddr_reg:x3; val_offset:248859*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248859*0 + 3*9*FLEN/8, x4, x1, x2)

inst_82954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffe000000000; valaddr_reg:x3; val_offset:248862*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248862*0 + 3*10*FLEN/8, x4, x1, x2)

inst_82955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffff000000000; valaddr_reg:x3; val_offset:248865*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248865*0 + 3*11*FLEN/8, x4, x1, x2)

inst_82956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffff800000000; valaddr_reg:x3; val_offset:248868*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248868*0 + 3*12*FLEN/8, x4, x1, x2)

inst_82957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffc00000000; valaddr_reg:x3; val_offset:248871*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248871*0 + 3*13*FLEN/8, x4, x1, x2)

inst_82958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffe00000000; valaddr_reg:x3; val_offset:248874*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248874*0 + 3*14*FLEN/8, x4, x1, x2)

inst_82959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffff00000000; valaddr_reg:x3; val_offset:248877*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248877*0 + 3*15*FLEN/8, x4, x1, x2)

inst_82960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffff80000000; valaddr_reg:x3; val_offset:248880*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248880*0 + 3*16*FLEN/8, x4, x1, x2)

inst_82961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffc0000000; valaddr_reg:x3; val_offset:248883*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248883*0 + 3*17*FLEN/8, x4, x1, x2)

inst_82962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffe0000000; valaddr_reg:x3; val_offset:248886*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248886*0 + 3*18*FLEN/8, x4, x1, x2)

inst_82963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffff0000000; valaddr_reg:x3; val_offset:248889*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248889*0 + 3*19*FLEN/8, x4, x1, x2)

inst_82964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffff8000000; valaddr_reg:x3; val_offset:248892*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248892*0 + 3*20*FLEN/8, x4, x1, x2)

inst_82965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffc000000; valaddr_reg:x3; val_offset:248895*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248895*0 + 3*21*FLEN/8, x4, x1, x2)

inst_82966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffe000000; valaddr_reg:x3; val_offset:248898*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248898*0 + 3*22*FLEN/8, x4, x1, x2)

inst_82967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffff000000; valaddr_reg:x3; val_offset:248901*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248901*0 + 3*23*FLEN/8, x4, x1, x2)

inst_82968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffff800000; valaddr_reg:x3; val_offset:248904*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248904*0 + 3*24*FLEN/8, x4, x1, x2)

inst_82969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffc00000; valaddr_reg:x3; val_offset:248907*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248907*0 + 3*25*FLEN/8, x4, x1, x2)

inst_82970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffe00000; valaddr_reg:x3; val_offset:248910*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248910*0 + 3*26*FLEN/8, x4, x1, x2)

inst_82971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffff00000; valaddr_reg:x3; val_offset:248913*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248913*0 + 3*27*FLEN/8, x4, x1, x2)

inst_82972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffff80000; valaddr_reg:x3; val_offset:248916*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248916*0 + 3*28*FLEN/8, x4, x1, x2)

inst_82973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffffc0000; valaddr_reg:x3; val_offset:248919*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248919*0 + 3*29*FLEN/8, x4, x1, x2)

inst_82974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffffe0000; valaddr_reg:x3; val_offset:248922*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248922*0 + 3*30*FLEN/8, x4, x1, x2)

inst_82975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffff0000; valaddr_reg:x3; val_offset:248925*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248925*0 + 3*31*FLEN/8, x4, x1, x2)

inst_82976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffff8000; valaddr_reg:x3; val_offset:248928*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248928*0 + 3*32*FLEN/8, x4, x1, x2)

inst_82977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffffc000; valaddr_reg:x3; val_offset:248931*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248931*0 + 3*33*FLEN/8, x4, x1, x2)

inst_82978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffffe000; valaddr_reg:x3; val_offset:248934*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248934*0 + 3*34*FLEN/8, x4, x1, x2)

inst_82979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffffff000; valaddr_reg:x3; val_offset:248937*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248937*0 + 3*35*FLEN/8, x4, x1, x2)

inst_82980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffffff800; valaddr_reg:x3; val_offset:248940*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248940*0 + 3*36*FLEN/8, x4, x1, x2)

inst_82981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffffffc00; valaddr_reg:x3; val_offset:248943*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248943*0 + 3*37*FLEN/8, x4, x1, x2)

inst_82982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffffffe00; valaddr_reg:x3; val_offset:248946*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248946*0 + 3*38*FLEN/8, x4, x1, x2)

inst_82983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffffff00; valaddr_reg:x3; val_offset:248949*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248949*0 + 3*39*FLEN/8, x4, x1, x2)

inst_82984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffffff80; valaddr_reg:x3; val_offset:248952*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248952*0 + 3*40*FLEN/8, x4, x1, x2)

inst_82985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffffffc0; valaddr_reg:x3; val_offset:248955*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248955*0 + 3*41*FLEN/8, x4, x1, x2)

inst_82986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffffffe0; valaddr_reg:x3; val_offset:248958*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248958*0 + 3*42*FLEN/8, x4, x1, x2)

inst_82987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffffffff0; valaddr_reg:x3; val_offset:248961*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248961*0 + 3*43*FLEN/8, x4, x1, x2)

inst_82988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffffffff8; valaddr_reg:x3; val_offset:248964*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248964*0 + 3*44*FLEN/8, x4, x1, x2)

inst_82989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffffffffc; valaddr_reg:x3; val_offset:248967*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248967*0 + 3*45*FLEN/8, x4, x1, x2)

inst_82990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7ffffffffffffe; valaddr_reg:x3; val_offset:248970*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248970*0 + 3*46*FLEN/8, x4, x1, x2)

inst_82991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x990919457fcd4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x007 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa990919457fcd4; op2val:0x0;
op3val:0x7fffffffffffff; valaddr_reg:x3; val_offset:248973*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248973*0 + 3*47*FLEN/8, x4, x1, x2)

inst_82992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:248976*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248976*0 + 3*48*FLEN/8, x4, x1, x2)

inst_82993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:248979*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248979*0 + 3*49*FLEN/8, x4, x1, x2)

inst_82994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:248982*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248982*0 + 3*50*FLEN/8, x4, x1, x2)

inst_82995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:248985*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248985*0 + 3*51*FLEN/8, x4, x1, x2)

inst_82996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:248988*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248988*0 + 3*52*FLEN/8, x4, x1, x2)

inst_82997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:248991*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248991*0 + 3*53*FLEN/8, x4, x1, x2)

inst_82998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:248994*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248994*0 + 3*54*FLEN/8, x4, x1, x2)

inst_82999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:248997*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 248997*0 + 3*55*FLEN/8, x4, x1, x2)

inst_83000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:249000*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249000*0 + 3*56*FLEN/8, x4, x1, x2)

inst_83001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:249003*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249003*0 + 3*57*FLEN/8, x4, x1, x2)

inst_83002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:249006*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249006*0 + 3*58*FLEN/8, x4, x1, x2)

inst_83003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:249009*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249009*0 + 3*59*FLEN/8, x4, x1, x2)

inst_83004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:249012*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249012*0 + 3*60*FLEN/8, x4, x1, x2)

inst_83005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:249015*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249015*0 + 3*61*FLEN/8, x4, x1, x2)

inst_83006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:249018*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249018*0 + 3*62*FLEN/8, x4, x1, x2)

inst_83007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:249021*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249021*0 + 3*63*FLEN/8, x4, x1, x2)

inst_83008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:249024*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249024*0 + 3*64*FLEN/8, x4, x1, x2)

inst_83009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:249027*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249027*0 + 3*65*FLEN/8, x4, x1, x2)

inst_83010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:249030*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249030*0 + 3*66*FLEN/8, x4, x1, x2)

inst_83011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:249033*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249033*0 + 3*67*FLEN/8, x4, x1, x2)

inst_83012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:249036*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249036*0 + 3*68*FLEN/8, x4, x1, x2)

inst_83013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:249039*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249039*0 + 3*69*FLEN/8, x4, x1, x2)

inst_83014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000000000000; valaddr_reg:x3; val_offset:249042*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249042*0 + 3*70*FLEN/8, x4, x1, x2)

inst_83015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000000000001; valaddr_reg:x3; val_offset:249045*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249045*0 + 3*71*FLEN/8, x4, x1, x2)

inst_83016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000000000003; valaddr_reg:x3; val_offset:249048*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249048*0 + 3*72*FLEN/8, x4, x1, x2)

inst_83017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000000000007; valaddr_reg:x3; val_offset:249051*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249051*0 + 3*73*FLEN/8, x4, x1, x2)

inst_83018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000000000000f; valaddr_reg:x3; val_offset:249054*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249054*0 + 3*74*FLEN/8, x4, x1, x2)

inst_83019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000000000001f; valaddr_reg:x3; val_offset:249057*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249057*0 + 3*75*FLEN/8, x4, x1, x2)

inst_83020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000000000003f; valaddr_reg:x3; val_offset:249060*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249060*0 + 3*76*FLEN/8, x4, x1, x2)

inst_83021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000000000007f; valaddr_reg:x3; val_offset:249063*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249063*0 + 3*77*FLEN/8, x4, x1, x2)

inst_83022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100000000000ff; valaddr_reg:x3; val_offset:249066*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249066*0 + 3*78*FLEN/8, x4, x1, x2)

inst_83023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100000000001ff; valaddr_reg:x3; val_offset:249069*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249069*0 + 3*79*FLEN/8, x4, x1, x2)

inst_83024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100000000003ff; valaddr_reg:x3; val_offset:249072*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249072*0 + 3*80*FLEN/8, x4, x1, x2)

inst_83025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100000000007ff; valaddr_reg:x3; val_offset:249075*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249075*0 + 3*81*FLEN/8, x4, x1, x2)

inst_83026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000000000fff; valaddr_reg:x3; val_offset:249078*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249078*0 + 3*82*FLEN/8, x4, x1, x2)

inst_83027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000000001fff; valaddr_reg:x3; val_offset:249081*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249081*0 + 3*83*FLEN/8, x4, x1, x2)

inst_83028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000000003fff; valaddr_reg:x3; val_offset:249084*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249084*0 + 3*84*FLEN/8, x4, x1, x2)

inst_83029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000000007fff; valaddr_reg:x3; val_offset:249087*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249087*0 + 3*85*FLEN/8, x4, x1, x2)

inst_83030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000000000ffff; valaddr_reg:x3; val_offset:249090*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249090*0 + 3*86*FLEN/8, x4, x1, x2)

inst_83031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000000001ffff; valaddr_reg:x3; val_offset:249093*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249093*0 + 3*87*FLEN/8, x4, x1, x2)

inst_83032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000000003ffff; valaddr_reg:x3; val_offset:249096*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249096*0 + 3*88*FLEN/8, x4, x1, x2)

inst_83033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000000007ffff; valaddr_reg:x3; val_offset:249099*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249099*0 + 3*89*FLEN/8, x4, x1, x2)

inst_83034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100000000fffff; valaddr_reg:x3; val_offset:249102*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249102*0 + 3*90*FLEN/8, x4, x1, x2)

inst_83035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100000001fffff; valaddr_reg:x3; val_offset:249105*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249105*0 + 3*91*FLEN/8, x4, x1, x2)

inst_83036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100000003fffff; valaddr_reg:x3; val_offset:249108*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249108*0 + 3*92*FLEN/8, x4, x1, x2)

inst_83037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100000007fffff; valaddr_reg:x3; val_offset:249111*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249111*0 + 3*93*FLEN/8, x4, x1, x2)

inst_83038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000000ffffff; valaddr_reg:x3; val_offset:249114*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249114*0 + 3*94*FLEN/8, x4, x1, x2)

inst_83039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000001ffffff; valaddr_reg:x3; val_offset:249117*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249117*0 + 3*95*FLEN/8, x4, x1, x2)

inst_83040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000003ffffff; valaddr_reg:x3; val_offset:249120*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249120*0 + 3*96*FLEN/8, x4, x1, x2)

inst_83041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000007ffffff; valaddr_reg:x3; val_offset:249123*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249123*0 + 3*97*FLEN/8, x4, x1, x2)

inst_83042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000000fffffff; valaddr_reg:x3; val_offset:249126*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249126*0 + 3*98*FLEN/8, x4, x1, x2)

inst_83043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000001fffffff; valaddr_reg:x3; val_offset:249129*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249129*0 + 3*99*FLEN/8, x4, x1, x2)

inst_83044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000003fffffff; valaddr_reg:x3; val_offset:249132*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249132*0 + 3*100*FLEN/8, x4, x1, x2)

inst_83045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000007fffffff; valaddr_reg:x3; val_offset:249135*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249135*0 + 3*101*FLEN/8, x4, x1, x2)

inst_83046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100000ffffffff; valaddr_reg:x3; val_offset:249138*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249138*0 + 3*102*FLEN/8, x4, x1, x2)

inst_83047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100001ffffffff; valaddr_reg:x3; val_offset:249141*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249141*0 + 3*103*FLEN/8, x4, x1, x2)

inst_83048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100003ffffffff; valaddr_reg:x3; val_offset:249144*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249144*0 + 3*104*FLEN/8, x4, x1, x2)

inst_83049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100007ffffffff; valaddr_reg:x3; val_offset:249147*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249147*0 + 3*105*FLEN/8, x4, x1, x2)

inst_83050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10000fffffffff; valaddr_reg:x3; val_offset:249150*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249150*0 + 3*106*FLEN/8, x4, x1, x2)

inst_83051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10001fffffffff; valaddr_reg:x3; val_offset:249153*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249153*0 + 3*107*FLEN/8, x4, x1, x2)

inst_83052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10003fffffffff; valaddr_reg:x3; val_offset:249156*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249156*0 + 3*108*FLEN/8, x4, x1, x2)

inst_83053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10007fffffffff; valaddr_reg:x3; val_offset:249159*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249159*0 + 3*109*FLEN/8, x4, x1, x2)

inst_83054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1000ffffffffff; valaddr_reg:x3; val_offset:249162*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249162*0 + 3*110*FLEN/8, x4, x1, x2)

inst_83055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1001ffffffffff; valaddr_reg:x3; val_offset:249165*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249165*0 + 3*111*FLEN/8, x4, x1, x2)

inst_83056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1003ffffffffff; valaddr_reg:x3; val_offset:249168*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249168*0 + 3*112*FLEN/8, x4, x1, x2)

inst_83057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1007ffffffffff; valaddr_reg:x3; val_offset:249171*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249171*0 + 3*113*FLEN/8, x4, x1, x2)

inst_83058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a100fffffffffff; valaddr_reg:x3; val_offset:249174*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249174*0 + 3*114*FLEN/8, x4, x1, x2)

inst_83059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a101fffffffffff; valaddr_reg:x3; val_offset:249177*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249177*0 + 3*115*FLEN/8, x4, x1, x2)

inst_83060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a103fffffffffff; valaddr_reg:x3; val_offset:249180*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249180*0 + 3*116*FLEN/8, x4, x1, x2)

inst_83061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a107fffffffffff; valaddr_reg:x3; val_offset:249183*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249183*0 + 3*117*FLEN/8, x4, x1, x2)

inst_83062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a10ffffffffffff; valaddr_reg:x3; val_offset:249186*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249186*0 + 3*118*FLEN/8, x4, x1, x2)

inst_83063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a11ffffffffffff; valaddr_reg:x3; val_offset:249189*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249189*0 + 3*119*FLEN/8, x4, x1, x2)

inst_83064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a13ffffffffffff; valaddr_reg:x3; val_offset:249192*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249192*0 + 3*120*FLEN/8, x4, x1, x2)

inst_83065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a17ffffffffffff; valaddr_reg:x3; val_offset:249195*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249195*0 + 3*121*FLEN/8, x4, x1, x2)

inst_83066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a18000000000000; valaddr_reg:x3; val_offset:249198*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249198*0 + 3*122*FLEN/8, x4, x1, x2)

inst_83067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1c000000000000; valaddr_reg:x3; val_offset:249201*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249201*0 + 3*123*FLEN/8, x4, x1, x2)

inst_83068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1e000000000000; valaddr_reg:x3; val_offset:249204*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249204*0 + 3*124*FLEN/8, x4, x1, x2)

inst_83069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1f000000000000; valaddr_reg:x3; val_offset:249207*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249207*0 + 3*125*FLEN/8, x4, x1, x2)

inst_83070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1f800000000000; valaddr_reg:x3; val_offset:249210*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249210*0 + 3*126*FLEN/8, x4, x1, x2)

inst_83071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fc00000000000; valaddr_reg:x3; val_offset:249213*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249213*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_83072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fe00000000000; valaddr_reg:x3; val_offset:249216*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249216*0 + 3*128*FLEN/8, x4, x1, x2)

inst_83073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ff00000000000; valaddr_reg:x3; val_offset:249219*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249219*0 + 3*129*FLEN/8, x4, x1, x2)

inst_83074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ff80000000000; valaddr_reg:x3; val_offset:249222*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249222*0 + 3*130*FLEN/8, x4, x1, x2)

inst_83075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffc0000000000; valaddr_reg:x3; val_offset:249225*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249225*0 + 3*131*FLEN/8, x4, x1, x2)

inst_83076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffe0000000000; valaddr_reg:x3; val_offset:249228*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249228*0 + 3*132*FLEN/8, x4, x1, x2)

inst_83077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fff0000000000; valaddr_reg:x3; val_offset:249231*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249231*0 + 3*133*FLEN/8, x4, x1, x2)

inst_83078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fff8000000000; valaddr_reg:x3; val_offset:249234*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249234*0 + 3*134*FLEN/8, x4, x1, x2)

inst_83079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffc000000000; valaddr_reg:x3; val_offset:249237*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249237*0 + 3*135*FLEN/8, x4, x1, x2)

inst_83080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffe000000000; valaddr_reg:x3; val_offset:249240*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249240*0 + 3*136*FLEN/8, x4, x1, x2)

inst_83081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffff000000000; valaddr_reg:x3; val_offset:249243*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249243*0 + 3*137*FLEN/8, x4, x1, x2)

inst_83082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffff800000000; valaddr_reg:x3; val_offset:249246*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249246*0 + 3*138*FLEN/8, x4, x1, x2)

inst_83083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffc00000000; valaddr_reg:x3; val_offset:249249*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249249*0 + 3*139*FLEN/8, x4, x1, x2)

inst_83084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffe00000000; valaddr_reg:x3; val_offset:249252*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249252*0 + 3*140*FLEN/8, x4, x1, x2)

inst_83085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffff00000000; valaddr_reg:x3; val_offset:249255*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249255*0 + 3*141*FLEN/8, x4, x1, x2)

inst_83086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffff80000000; valaddr_reg:x3; val_offset:249258*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249258*0 + 3*142*FLEN/8, x4, x1, x2)

inst_83087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffc0000000; valaddr_reg:x3; val_offset:249261*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249261*0 + 3*143*FLEN/8, x4, x1, x2)

inst_83088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffe0000000; valaddr_reg:x3; val_offset:249264*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249264*0 + 3*144*FLEN/8, x4, x1, x2)

inst_83089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffff0000000; valaddr_reg:x3; val_offset:249267*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249267*0 + 3*145*FLEN/8, x4, x1, x2)

inst_83090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffff8000000; valaddr_reg:x3; val_offset:249270*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249270*0 + 3*146*FLEN/8, x4, x1, x2)

inst_83091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffc000000; valaddr_reg:x3; val_offset:249273*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249273*0 + 3*147*FLEN/8, x4, x1, x2)

inst_83092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffe000000; valaddr_reg:x3; val_offset:249276*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249276*0 + 3*148*FLEN/8, x4, x1, x2)

inst_83093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffff000000; valaddr_reg:x3; val_offset:249279*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249279*0 + 3*149*FLEN/8, x4, x1, x2)

inst_83094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffff800000; valaddr_reg:x3; val_offset:249282*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249282*0 + 3*150*FLEN/8, x4, x1, x2)

inst_83095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffc00000; valaddr_reg:x3; val_offset:249285*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249285*0 + 3*151*FLEN/8, x4, x1, x2)

inst_83096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffe00000; valaddr_reg:x3; val_offset:249288*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249288*0 + 3*152*FLEN/8, x4, x1, x2)

inst_83097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffff00000; valaddr_reg:x3; val_offset:249291*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249291*0 + 3*153*FLEN/8, x4, x1, x2)

inst_83098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffff80000; valaddr_reg:x3; val_offset:249294*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249294*0 + 3*154*FLEN/8, x4, x1, x2)

inst_83099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffffc0000; valaddr_reg:x3; val_offset:249297*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249297*0 + 3*155*FLEN/8, x4, x1, x2)

inst_83100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffffe0000; valaddr_reg:x3; val_offset:249300*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249300*0 + 3*156*FLEN/8, x4, x1, x2)

inst_83101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffff0000; valaddr_reg:x3; val_offset:249303*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249303*0 + 3*157*FLEN/8, x4, x1, x2)

inst_83102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffff8000; valaddr_reg:x3; val_offset:249306*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249306*0 + 3*158*FLEN/8, x4, x1, x2)

inst_83103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffffc000; valaddr_reg:x3; val_offset:249309*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249309*0 + 3*159*FLEN/8, x4, x1, x2)

inst_83104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffffe000; valaddr_reg:x3; val_offset:249312*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249312*0 + 3*160*FLEN/8, x4, x1, x2)

inst_83105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffffff000; valaddr_reg:x3; val_offset:249315*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249315*0 + 3*161*FLEN/8, x4, x1, x2)

inst_83106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffffff800; valaddr_reg:x3; val_offset:249318*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249318*0 + 3*162*FLEN/8, x4, x1, x2)

inst_83107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffffffc00; valaddr_reg:x3; val_offset:249321*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249321*0 + 3*163*FLEN/8, x4, x1, x2)

inst_83108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffffffe00; valaddr_reg:x3; val_offset:249324*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249324*0 + 3*164*FLEN/8, x4, x1, x2)

inst_83109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffffff00; valaddr_reg:x3; val_offset:249327*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249327*0 + 3*165*FLEN/8, x4, x1, x2)

inst_83110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffffff80; valaddr_reg:x3; val_offset:249330*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249330*0 + 3*166*FLEN/8, x4, x1, x2)

inst_83111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffffffc0; valaddr_reg:x3; val_offset:249333*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249333*0 + 3*167*FLEN/8, x4, x1, x2)

inst_83112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffffffe0; valaddr_reg:x3; val_offset:249336*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249336*0 + 3*168*FLEN/8, x4, x1, x2)

inst_83113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffffffff0; valaddr_reg:x3; val_offset:249339*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249339*0 + 3*169*FLEN/8, x4, x1, x2)

inst_83114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffffffff8; valaddr_reg:x3; val_offset:249342*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249342*0 + 3*170*FLEN/8, x4, x1, x2)

inst_83115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffffffffc; valaddr_reg:x3; val_offset:249345*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249345*0 + 3*171*FLEN/8, x4, x1, x2)

inst_83116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1ffffffffffffe; valaddr_reg:x3; val_offset:249348*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249348*0 + 3*172*FLEN/8, x4, x1, x2)

inst_83117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99e7a144435ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x1a1 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99e7a144435ef; op2val:0x8000;
op3val:0x9a1fffffffffffff; valaddr_reg:x3; val_offset:249351*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249351*0 + 3*173*FLEN/8, x4, x1, x2)

inst_83118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000000000000; valaddr_reg:x3; val_offset:249354*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249354*0 + 3*174*FLEN/8, x4, x1, x2)

inst_83119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000000000001; valaddr_reg:x3; val_offset:249357*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249357*0 + 3*175*FLEN/8, x4, x1, x2)

inst_83120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000000000003; valaddr_reg:x3; val_offset:249360*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249360*0 + 3*176*FLEN/8, x4, x1, x2)

inst_83121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000000000007; valaddr_reg:x3; val_offset:249363*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249363*0 + 3*177*FLEN/8, x4, x1, x2)

inst_83122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000000000000f; valaddr_reg:x3; val_offset:249366*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249366*0 + 3*178*FLEN/8, x4, x1, x2)

inst_83123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000000000001f; valaddr_reg:x3; val_offset:249369*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249369*0 + 3*179*FLEN/8, x4, x1, x2)

inst_83124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000000000003f; valaddr_reg:x3; val_offset:249372*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249372*0 + 3*180*FLEN/8, x4, x1, x2)

inst_83125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000000000007f; valaddr_reg:x3; val_offset:249375*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249375*0 + 3*181*FLEN/8, x4, x1, x2)

inst_83126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800000000000ff; valaddr_reg:x3; val_offset:249378*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249378*0 + 3*182*FLEN/8, x4, x1, x2)

inst_83127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800000000001ff; valaddr_reg:x3; val_offset:249381*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249381*0 + 3*183*FLEN/8, x4, x1, x2)

inst_83128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800000000003ff; valaddr_reg:x3; val_offset:249384*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249384*0 + 3*184*FLEN/8, x4, x1, x2)

inst_83129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800000000007ff; valaddr_reg:x3; val_offset:249387*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249387*0 + 3*185*FLEN/8, x4, x1, x2)

inst_83130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000000000fff; valaddr_reg:x3; val_offset:249390*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249390*0 + 3*186*FLEN/8, x4, x1, x2)

inst_83131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000000001fff; valaddr_reg:x3; val_offset:249393*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249393*0 + 3*187*FLEN/8, x4, x1, x2)

inst_83132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000000003fff; valaddr_reg:x3; val_offset:249396*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249396*0 + 3*188*FLEN/8, x4, x1, x2)

inst_83133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000000007fff; valaddr_reg:x3; val_offset:249399*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249399*0 + 3*189*FLEN/8, x4, x1, x2)

inst_83134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000000000ffff; valaddr_reg:x3; val_offset:249402*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249402*0 + 3*190*FLEN/8, x4, x1, x2)

inst_83135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000000001ffff; valaddr_reg:x3; val_offset:249405*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249405*0 + 3*191*FLEN/8, x4, x1, x2)

inst_83136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000000003ffff; valaddr_reg:x3; val_offset:249408*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249408*0 + 3*192*FLEN/8, x4, x1, x2)

inst_83137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000000007ffff; valaddr_reg:x3; val_offset:249411*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249411*0 + 3*193*FLEN/8, x4, x1, x2)

inst_83138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800000000fffff; valaddr_reg:x3; val_offset:249414*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249414*0 + 3*194*FLEN/8, x4, x1, x2)

inst_83139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800000001fffff; valaddr_reg:x3; val_offset:249417*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249417*0 + 3*195*FLEN/8, x4, x1, x2)

inst_83140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800000003fffff; valaddr_reg:x3; val_offset:249420*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249420*0 + 3*196*FLEN/8, x4, x1, x2)

inst_83141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800000007fffff; valaddr_reg:x3; val_offset:249423*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249423*0 + 3*197*FLEN/8, x4, x1, x2)

inst_83142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000000ffffff; valaddr_reg:x3; val_offset:249426*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249426*0 + 3*198*FLEN/8, x4, x1, x2)

inst_83143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000001ffffff; valaddr_reg:x3; val_offset:249429*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249429*0 + 3*199*FLEN/8, x4, x1, x2)

inst_83144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000003ffffff; valaddr_reg:x3; val_offset:249432*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249432*0 + 3*200*FLEN/8, x4, x1, x2)

inst_83145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000007ffffff; valaddr_reg:x3; val_offset:249435*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249435*0 + 3*201*FLEN/8, x4, x1, x2)

inst_83146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000000fffffff; valaddr_reg:x3; val_offset:249438*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249438*0 + 3*202*FLEN/8, x4, x1, x2)

inst_83147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000001fffffff; valaddr_reg:x3; val_offset:249441*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249441*0 + 3*203*FLEN/8, x4, x1, x2)

inst_83148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000003fffffff; valaddr_reg:x3; val_offset:249444*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249444*0 + 3*204*FLEN/8, x4, x1, x2)

inst_83149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000007fffffff; valaddr_reg:x3; val_offset:249447*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249447*0 + 3*205*FLEN/8, x4, x1, x2)

inst_83150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800000ffffffff; valaddr_reg:x3; val_offset:249450*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249450*0 + 3*206*FLEN/8, x4, x1, x2)

inst_83151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800001ffffffff; valaddr_reg:x3; val_offset:249453*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249453*0 + 3*207*FLEN/8, x4, x1, x2)

inst_83152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800003ffffffff; valaddr_reg:x3; val_offset:249456*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249456*0 + 3*208*FLEN/8, x4, x1, x2)

inst_83153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800007ffffffff; valaddr_reg:x3; val_offset:249459*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249459*0 + 3*209*FLEN/8, x4, x1, x2)

inst_83154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780000fffffffff; valaddr_reg:x3; val_offset:249462*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249462*0 + 3*210*FLEN/8, x4, x1, x2)

inst_83155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780001fffffffff; valaddr_reg:x3; val_offset:249465*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249465*0 + 3*211*FLEN/8, x4, x1, x2)

inst_83156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780003fffffffff; valaddr_reg:x3; val_offset:249468*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249468*0 + 3*212*FLEN/8, x4, x1, x2)

inst_83157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780007fffffffff; valaddr_reg:x3; val_offset:249471*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249471*0 + 3*213*FLEN/8, x4, x1, x2)

inst_83158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78000ffffffffff; valaddr_reg:x3; val_offset:249474*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249474*0 + 3*214*FLEN/8, x4, x1, x2)

inst_83159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78001ffffffffff; valaddr_reg:x3; val_offset:249477*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249477*0 + 3*215*FLEN/8, x4, x1, x2)

inst_83160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78003ffffffffff; valaddr_reg:x3; val_offset:249480*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249480*0 + 3*216*FLEN/8, x4, x1, x2)

inst_83161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78007ffffffffff; valaddr_reg:x3; val_offset:249483*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249483*0 + 3*217*FLEN/8, x4, x1, x2)

inst_83162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7800fffffffffff; valaddr_reg:x3; val_offset:249486*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249486*0 + 3*218*FLEN/8, x4, x1, x2)

inst_83163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7801fffffffffff; valaddr_reg:x3; val_offset:249489*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249489*0 + 3*219*FLEN/8, x4, x1, x2)

inst_83164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7803fffffffffff; valaddr_reg:x3; val_offset:249492*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249492*0 + 3*220*FLEN/8, x4, x1, x2)

inst_83165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb7807fffffffffff; valaddr_reg:x3; val_offset:249495*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249495*0 + 3*221*FLEN/8, x4, x1, x2)

inst_83166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb780ffffffffffff; valaddr_reg:x3; val_offset:249498*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249498*0 + 3*222*FLEN/8, x4, x1, x2)

inst_83167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb781ffffffffffff; valaddr_reg:x3; val_offset:249501*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249501*0 + 3*223*FLEN/8, x4, x1, x2)

inst_83168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb783ffffffffffff; valaddr_reg:x3; val_offset:249504*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249504*0 + 3*224*FLEN/8, x4, x1, x2)

inst_83169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb787ffffffffffff; valaddr_reg:x3; val_offset:249507*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249507*0 + 3*225*FLEN/8, x4, x1, x2)

inst_83170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb788000000000000; valaddr_reg:x3; val_offset:249510*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249510*0 + 3*226*FLEN/8, x4, x1, x2)

inst_83171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78c000000000000; valaddr_reg:x3; val_offset:249513*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249513*0 + 3*227*FLEN/8, x4, x1, x2)

inst_83172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78e000000000000; valaddr_reg:x3; val_offset:249516*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249516*0 + 3*228*FLEN/8, x4, x1, x2)

inst_83173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78f000000000000; valaddr_reg:x3; val_offset:249519*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249519*0 + 3*229*FLEN/8, x4, x1, x2)

inst_83174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78f800000000000; valaddr_reg:x3; val_offset:249522*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249522*0 + 3*230*FLEN/8, x4, x1, x2)

inst_83175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fc00000000000; valaddr_reg:x3; val_offset:249525*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249525*0 + 3*231*FLEN/8, x4, x1, x2)

inst_83176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fe00000000000; valaddr_reg:x3; val_offset:249528*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249528*0 + 3*232*FLEN/8, x4, x1, x2)

inst_83177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ff00000000000; valaddr_reg:x3; val_offset:249531*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249531*0 + 3*233*FLEN/8, x4, x1, x2)

inst_83178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ff80000000000; valaddr_reg:x3; val_offset:249534*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249534*0 + 3*234*FLEN/8, x4, x1, x2)

inst_83179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffc0000000000; valaddr_reg:x3; val_offset:249537*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249537*0 + 3*235*FLEN/8, x4, x1, x2)

inst_83180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffe0000000000; valaddr_reg:x3; val_offset:249540*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249540*0 + 3*236*FLEN/8, x4, x1, x2)

inst_83181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fff0000000000; valaddr_reg:x3; val_offset:249543*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249543*0 + 3*237*FLEN/8, x4, x1, x2)

inst_83182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fff8000000000; valaddr_reg:x3; val_offset:249546*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249546*0 + 3*238*FLEN/8, x4, x1, x2)

inst_83183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffc000000000; valaddr_reg:x3; val_offset:249549*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249549*0 + 3*239*FLEN/8, x4, x1, x2)

inst_83184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffe000000000; valaddr_reg:x3; val_offset:249552*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249552*0 + 3*240*FLEN/8, x4, x1, x2)

inst_83185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffff000000000; valaddr_reg:x3; val_offset:249555*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249555*0 + 3*241*FLEN/8, x4, x1, x2)

inst_83186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffff800000000; valaddr_reg:x3; val_offset:249558*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249558*0 + 3*242*FLEN/8, x4, x1, x2)

inst_83187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffc00000000; valaddr_reg:x3; val_offset:249561*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249561*0 + 3*243*FLEN/8, x4, x1, x2)

inst_83188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffe00000000; valaddr_reg:x3; val_offset:249564*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249564*0 + 3*244*FLEN/8, x4, x1, x2)

inst_83189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffff00000000; valaddr_reg:x3; val_offset:249567*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249567*0 + 3*245*FLEN/8, x4, x1, x2)

inst_83190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffff80000000; valaddr_reg:x3; val_offset:249570*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249570*0 + 3*246*FLEN/8, x4, x1, x2)

inst_83191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffc0000000; valaddr_reg:x3; val_offset:249573*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249573*0 + 3*247*FLEN/8, x4, x1, x2)

inst_83192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffe0000000; valaddr_reg:x3; val_offset:249576*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249576*0 + 3*248*FLEN/8, x4, x1, x2)

inst_83193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffff0000000; valaddr_reg:x3; val_offset:249579*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249579*0 + 3*249*FLEN/8, x4, x1, x2)

inst_83194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffff8000000; valaddr_reg:x3; val_offset:249582*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249582*0 + 3*250*FLEN/8, x4, x1, x2)

inst_83195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffc000000; valaddr_reg:x3; val_offset:249585*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249585*0 + 3*251*FLEN/8, x4, x1, x2)

inst_83196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffe000000; valaddr_reg:x3; val_offset:249588*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249588*0 + 3*252*FLEN/8, x4, x1, x2)

inst_83197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffff000000; valaddr_reg:x3; val_offset:249591*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249591*0 + 3*253*FLEN/8, x4, x1, x2)

inst_83198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffff800000; valaddr_reg:x3; val_offset:249594*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249594*0 + 3*254*FLEN/8, x4, x1, x2)

inst_83199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffc00000; valaddr_reg:x3; val_offset:249597*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249597*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_83200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffe00000; valaddr_reg:x3; val_offset:249600*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249600*0 + 3*256*FLEN/8, x4, x1, x2)

inst_83201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffff00000; valaddr_reg:x3; val_offset:249603*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249603*0 + 3*257*FLEN/8, x4, x1, x2)

inst_83202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffff80000; valaddr_reg:x3; val_offset:249606*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249606*0 + 3*258*FLEN/8, x4, x1, x2)

inst_83203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffffc0000; valaddr_reg:x3; val_offset:249609*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249609*0 + 3*259*FLEN/8, x4, x1, x2)

inst_83204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffffe0000; valaddr_reg:x3; val_offset:249612*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249612*0 + 3*260*FLEN/8, x4, x1, x2)

inst_83205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffff0000; valaddr_reg:x3; val_offset:249615*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249615*0 + 3*261*FLEN/8, x4, x1, x2)

inst_83206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffff8000; valaddr_reg:x3; val_offset:249618*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249618*0 + 3*262*FLEN/8, x4, x1, x2)

inst_83207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffffc000; valaddr_reg:x3; val_offset:249621*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249621*0 + 3*263*FLEN/8, x4, x1, x2)

inst_83208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffffe000; valaddr_reg:x3; val_offset:249624*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249624*0 + 3*264*FLEN/8, x4, x1, x2)

inst_83209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffffff000; valaddr_reg:x3; val_offset:249627*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249627*0 + 3*265*FLEN/8, x4, x1, x2)

inst_83210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffffff800; valaddr_reg:x3; val_offset:249630*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249630*0 + 3*266*FLEN/8, x4, x1, x2)

inst_83211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffffffc00; valaddr_reg:x3; val_offset:249633*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249633*0 + 3*267*FLEN/8, x4, x1, x2)

inst_83212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffffffe00; valaddr_reg:x3; val_offset:249636*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249636*0 + 3*268*FLEN/8, x4, x1, x2)

inst_83213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffffff00; valaddr_reg:x3; val_offset:249639*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249639*0 + 3*269*FLEN/8, x4, x1, x2)

inst_83214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffffff80; valaddr_reg:x3; val_offset:249642*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249642*0 + 3*270*FLEN/8, x4, x1, x2)

inst_83215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffffffc0; valaddr_reg:x3; val_offset:249645*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249645*0 + 3*271*FLEN/8, x4, x1, x2)

inst_83216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffffffe0; valaddr_reg:x3; val_offset:249648*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249648*0 + 3*272*FLEN/8, x4, x1, x2)

inst_83217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffffffff0; valaddr_reg:x3; val_offset:249651*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249651*0 + 3*273*FLEN/8, x4, x1, x2)

inst_83218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffffffff8; valaddr_reg:x3; val_offset:249654*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249654*0 + 3*274*FLEN/8, x4, x1, x2)

inst_83219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffffffffc; valaddr_reg:x3; val_offset:249657*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249657*0 + 3*275*FLEN/8, x4, x1, x2)

inst_83220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78ffffffffffffe; valaddr_reg:x3; val_offset:249660*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249660*0 + 3*276*FLEN/8, x4, x1, x2)

inst_83221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x378 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xb78fffffffffffff; valaddr_reg:x3; val_offset:249663*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249663*0 + 3*277*FLEN/8, x4, x1, x2)

inst_83222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:249666*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249666*0 + 3*278*FLEN/8, x4, x1, x2)

inst_83223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:249669*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249669*0 + 3*279*FLEN/8, x4, x1, x2)

inst_83224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:249672*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249672*0 + 3*280*FLEN/8, x4, x1, x2)

inst_83225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:249675*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249675*0 + 3*281*FLEN/8, x4, x1, x2)

inst_83226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:249678*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249678*0 + 3*282*FLEN/8, x4, x1, x2)

inst_83227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:249681*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249681*0 + 3*283*FLEN/8, x4, x1, x2)

inst_83228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:249684*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249684*0 + 3*284*FLEN/8, x4, x1, x2)

inst_83229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:249687*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249687*0 + 3*285*FLEN/8, x4, x1, x2)

inst_83230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:249690*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249690*0 + 3*286*FLEN/8, x4, x1, x2)

inst_83231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:249693*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249693*0 + 3*287*FLEN/8, x4, x1, x2)

inst_83232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:249696*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249696*0 + 3*288*FLEN/8, x4, x1, x2)

inst_83233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:249699*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249699*0 + 3*289*FLEN/8, x4, x1, x2)

inst_83234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:249702*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249702*0 + 3*290*FLEN/8, x4, x1, x2)

inst_83235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:249705*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249705*0 + 3*291*FLEN/8, x4, x1, x2)

inst_83236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:249708*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249708*0 + 3*292*FLEN/8, x4, x1, x2)

inst_83237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:249711*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249711*0 + 3*293*FLEN/8, x4, x1, x2)

inst_83238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:249714*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249714*0 + 3*294*FLEN/8, x4, x1, x2)

inst_83239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:249717*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249717*0 + 3*295*FLEN/8, x4, x1, x2)

inst_83240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:249720*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249720*0 + 3*296*FLEN/8, x4, x1, x2)

inst_83241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:249723*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249723*0 + 3*297*FLEN/8, x4, x1, x2)

inst_83242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:249726*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249726*0 + 3*298*FLEN/8, x4, x1, x2)

inst_83243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a31c342c7b5b and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3f894b8cdd8b7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a31c342c7b5b; op2val:0x9fc3f894b8cdd8b7;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:249729*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249729*0 + 3*299*FLEN/8, x4, x1, x2)

inst_83244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:249732*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249732*0 + 3*300*FLEN/8, x4, x1, x2)

inst_83245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x10000000000003; valaddr_reg:x3; val_offset:249735*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249735*0 + 3*301*FLEN/8, x4, x1, x2)

inst_83246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:249738*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249738*0 + 3*302*FLEN/8, x4, x1, x2)

inst_83247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1000000000000f; valaddr_reg:x3; val_offset:249741*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249741*0 + 3*303*FLEN/8, x4, x1, x2)

inst_83248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:249744*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249744*0 + 3*304*FLEN/8, x4, x1, x2)

inst_83249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:249747*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249747*0 + 3*305*FLEN/8, x4, x1, x2)

inst_83250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x13333333333333; valaddr_reg:x3; val_offset:249750*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249750*0 + 3*306*FLEN/8, x4, x1, x2)

inst_83251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x14924924924924; valaddr_reg:x3; val_offset:249753*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249753*0 + 3*307*FLEN/8, x4, x1, x2)

inst_83252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x16666666666666; valaddr_reg:x3; val_offset:249756*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249756*0 + 3*308*FLEN/8, x4, x1, x2)

inst_83253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x16db6db6db6db6; valaddr_reg:x3; val_offset:249759*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249759*0 + 3*309*FLEN/8, x4, x1, x2)

inst_83254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x17777777777777; valaddr_reg:x3; val_offset:249762*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249762*0 + 3*310*FLEN/8, x4, x1, x2)

inst_83255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x18888888888888; valaddr_reg:x3; val_offset:249765*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249765*0 + 3*311*FLEN/8, x4, x1, x2)

inst_83256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x19999999999999; valaddr_reg:x3; val_offset:249768*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249768*0 + 3*312*FLEN/8, x4, x1, x2)

inst_83257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1b6db6db6db6db; valaddr_reg:x3; val_offset:249771*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249771*0 + 3*313*FLEN/8, x4, x1, x2)

inst_83258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1ccccccccccccc; valaddr_reg:x3; val_offset:249774*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249774*0 + 3*314*FLEN/8, x4, x1, x2)

inst_83259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1db6db6db6db6d; valaddr_reg:x3; val_offset:249777*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249777*0 + 3*315*FLEN/8, x4, x1, x2)

inst_83260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1fffffffffffc0; valaddr_reg:x3; val_offset:249780*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249780*0 + 3*316*FLEN/8, x4, x1, x2)

inst_83261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1fffffffffffe0; valaddr_reg:x3; val_offset:249783*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249783*0 + 3*317*FLEN/8, x4, x1, x2)

inst_83262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1ffffffffffff0; valaddr_reg:x3; val_offset:249786*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249786*0 + 3*318*FLEN/8, x4, x1, x2)

inst_83263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1ffffffffffff8; valaddr_reg:x3; val_offset:249789*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249789*0 + 3*319*FLEN/8, x4, x1, x2)

inst_83264:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1ffffffffffffc; valaddr_reg:x3; val_offset:249792*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249792*0 + 3*320*FLEN/8, x4, x1, x2)

inst_83265:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0x1ffffffffffffe; valaddr_reg:x3; val_offset:249795*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249795*0 + 3*321*FLEN/8, x4, x1, x2)

inst_83266:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000000000000; valaddr_reg:x3; val_offset:249798*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249798*0 + 3*322*FLEN/8, x4, x1, x2)

inst_83267:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000000000001; valaddr_reg:x3; val_offset:249801*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249801*0 + 3*323*FLEN/8, x4, x1, x2)

inst_83268:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000000000003; valaddr_reg:x3; val_offset:249804*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249804*0 + 3*324*FLEN/8, x4, x1, x2)

inst_83269:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000000000007; valaddr_reg:x3; val_offset:249807*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249807*0 + 3*325*FLEN/8, x4, x1, x2)

inst_83270:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000000000000f; valaddr_reg:x3; val_offset:249810*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249810*0 + 3*326*FLEN/8, x4, x1, x2)

inst_83271:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000000000001f; valaddr_reg:x3; val_offset:249813*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249813*0 + 3*327*FLEN/8, x4, x1, x2)

inst_83272:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000000000003f; valaddr_reg:x3; val_offset:249816*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249816*0 + 3*328*FLEN/8, x4, x1, x2)

inst_83273:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000000000007f; valaddr_reg:x3; val_offset:249819*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249819*0 + 3*329*FLEN/8, x4, x1, x2)

inst_83274:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00000000000ff; valaddr_reg:x3; val_offset:249822*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249822*0 + 3*330*FLEN/8, x4, x1, x2)

inst_83275:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00000000001ff; valaddr_reg:x3; val_offset:249825*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249825*0 + 3*331*FLEN/8, x4, x1, x2)

inst_83276:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00000000003ff; valaddr_reg:x3; val_offset:249828*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249828*0 + 3*332*FLEN/8, x4, x1, x2)

inst_83277:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00000000007ff; valaddr_reg:x3; val_offset:249831*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249831*0 + 3*333*FLEN/8, x4, x1, x2)

inst_83278:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000000000fff; valaddr_reg:x3; val_offset:249834*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249834*0 + 3*334*FLEN/8, x4, x1, x2)

inst_83279:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000000001fff; valaddr_reg:x3; val_offset:249837*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249837*0 + 3*335*FLEN/8, x4, x1, x2)

inst_83280:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000000003fff; valaddr_reg:x3; val_offset:249840*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249840*0 + 3*336*FLEN/8, x4, x1, x2)

inst_83281:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000000007fff; valaddr_reg:x3; val_offset:249843*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249843*0 + 3*337*FLEN/8, x4, x1, x2)

inst_83282:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000000000ffff; valaddr_reg:x3; val_offset:249846*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249846*0 + 3*338*FLEN/8, x4, x1, x2)

inst_83283:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000000001ffff; valaddr_reg:x3; val_offset:249849*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249849*0 + 3*339*FLEN/8, x4, x1, x2)

inst_83284:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000000003ffff; valaddr_reg:x3; val_offset:249852*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249852*0 + 3*340*FLEN/8, x4, x1, x2)

inst_83285:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000000007ffff; valaddr_reg:x3; val_offset:249855*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249855*0 + 3*341*FLEN/8, x4, x1, x2)

inst_83286:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00000000fffff; valaddr_reg:x3; val_offset:249858*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249858*0 + 3*342*FLEN/8, x4, x1, x2)

inst_83287:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00000001fffff; valaddr_reg:x3; val_offset:249861*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249861*0 + 3*343*FLEN/8, x4, x1, x2)

inst_83288:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00000003fffff; valaddr_reg:x3; val_offset:249864*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249864*0 + 3*344*FLEN/8, x4, x1, x2)

inst_83289:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00000007fffff; valaddr_reg:x3; val_offset:249867*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249867*0 + 3*345*FLEN/8, x4, x1, x2)

inst_83290:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000000ffffff; valaddr_reg:x3; val_offset:249870*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249870*0 + 3*346*FLEN/8, x4, x1, x2)

inst_83291:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000001ffffff; valaddr_reg:x3; val_offset:249873*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249873*0 + 3*347*FLEN/8, x4, x1, x2)

inst_83292:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000003ffffff; valaddr_reg:x3; val_offset:249876*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249876*0 + 3*348*FLEN/8, x4, x1, x2)

inst_83293:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000007ffffff; valaddr_reg:x3; val_offset:249879*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249879*0 + 3*349*FLEN/8, x4, x1, x2)

inst_83294:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000000fffffff; valaddr_reg:x3; val_offset:249882*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249882*0 + 3*350*FLEN/8, x4, x1, x2)

inst_83295:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000001fffffff; valaddr_reg:x3; val_offset:249885*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249885*0 + 3*351*FLEN/8, x4, x1, x2)

inst_83296:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000003fffffff; valaddr_reg:x3; val_offset:249888*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249888*0 + 3*352*FLEN/8, x4, x1, x2)

inst_83297:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000007fffffff; valaddr_reg:x3; val_offset:249891*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249891*0 + 3*353*FLEN/8, x4, x1, x2)

inst_83298:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00000ffffffff; valaddr_reg:x3; val_offset:249894*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249894*0 + 3*354*FLEN/8, x4, x1, x2)

inst_83299:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00001ffffffff; valaddr_reg:x3; val_offset:249897*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249897*0 + 3*355*FLEN/8, x4, x1, x2)

inst_83300:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00003ffffffff; valaddr_reg:x3; val_offset:249900*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249900*0 + 3*356*FLEN/8, x4, x1, x2)

inst_83301:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00007ffffffff; valaddr_reg:x3; val_offset:249903*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249903*0 + 3*357*FLEN/8, x4, x1, x2)

inst_83302:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0000fffffffff; valaddr_reg:x3; val_offset:249906*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249906*0 + 3*358*FLEN/8, x4, x1, x2)

inst_83303:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0001fffffffff; valaddr_reg:x3; val_offset:249909*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249909*0 + 3*359*FLEN/8, x4, x1, x2)

inst_83304:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0003fffffffff; valaddr_reg:x3; val_offset:249912*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249912*0 + 3*360*FLEN/8, x4, x1, x2)

inst_83305:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0007fffffffff; valaddr_reg:x3; val_offset:249915*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249915*0 + 3*361*FLEN/8, x4, x1, x2)

inst_83306:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe000ffffffffff; valaddr_reg:x3; val_offset:249918*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249918*0 + 3*362*FLEN/8, x4, x1, x2)

inst_83307:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe001ffffffffff; valaddr_reg:x3; val_offset:249921*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249921*0 + 3*363*FLEN/8, x4, x1, x2)

inst_83308:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe003ffffffffff; valaddr_reg:x3; val_offset:249924*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249924*0 + 3*364*FLEN/8, x4, x1, x2)

inst_83309:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe007ffffffffff; valaddr_reg:x3; val_offset:249927*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249927*0 + 3*365*FLEN/8, x4, x1, x2)

inst_83310:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe00fffffffffff; valaddr_reg:x3; val_offset:249930*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249930*0 + 3*366*FLEN/8, x4, x1, x2)

inst_83311:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe01fffffffffff; valaddr_reg:x3; val_offset:249933*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249933*0 + 3*367*FLEN/8, x4, x1, x2)

inst_83312:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe03fffffffffff; valaddr_reg:x3; val_offset:249936*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249936*0 + 3*368*FLEN/8, x4, x1, x2)

inst_83313:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe07fffffffffff; valaddr_reg:x3; val_offset:249939*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249939*0 + 3*369*FLEN/8, x4, x1, x2)

inst_83314:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe0ffffffffffff; valaddr_reg:x3; val_offset:249942*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249942*0 + 3*370*FLEN/8, x4, x1, x2)

inst_83315:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe1ffffffffffff; valaddr_reg:x3; val_offset:249945*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249945*0 + 3*371*FLEN/8, x4, x1, x2)

inst_83316:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe3ffffffffffff; valaddr_reg:x3; val_offset:249948*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249948*0 + 3*372*FLEN/8, x4, x1, x2)

inst_83317:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe7ffffffffffff; valaddr_reg:x3; val_offset:249951*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249951*0 + 3*373*FLEN/8, x4, x1, x2)

inst_83318:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xe8000000000000; valaddr_reg:x3; val_offset:249954*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249954*0 + 3*374*FLEN/8, x4, x1, x2)

inst_83319:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xec000000000000; valaddr_reg:x3; val_offset:249957*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249957*0 + 3*375*FLEN/8, x4, x1, x2)

inst_83320:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xee000000000000; valaddr_reg:x3; val_offset:249960*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249960*0 + 3*376*FLEN/8, x4, x1, x2)

inst_83321:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xef000000000000; valaddr_reg:x3; val_offset:249963*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249963*0 + 3*377*FLEN/8, x4, x1, x2)

inst_83322:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xef800000000000; valaddr_reg:x3; val_offset:249966*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249966*0 + 3*378*FLEN/8, x4, x1, x2)

inst_83323:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefc00000000000; valaddr_reg:x3; val_offset:249969*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249969*0 + 3*379*FLEN/8, x4, x1, x2)

inst_83324:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefe00000000000; valaddr_reg:x3; val_offset:249972*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249972*0 + 3*380*FLEN/8, x4, x1, x2)

inst_83325:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeff00000000000; valaddr_reg:x3; val_offset:249975*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249975*0 + 3*381*FLEN/8, x4, x1, x2)

inst_83326:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeff80000000000; valaddr_reg:x3; val_offset:249978*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249978*0 + 3*382*FLEN/8, x4, x1, x2)

inst_83327:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffc0000000000; valaddr_reg:x3; val_offset:249981*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249981*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_83328:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffe0000000000; valaddr_reg:x3; val_offset:249984*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249984*0 + 3*384*FLEN/8, x4, x1, x2)

inst_83329:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefff0000000000; valaddr_reg:x3; val_offset:249987*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249987*0 + 3*385*FLEN/8, x4, x1, x2)

inst_83330:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefff8000000000; valaddr_reg:x3; val_offset:249990*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249990*0 + 3*386*FLEN/8, x4, x1, x2)

inst_83331:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffc000000000; valaddr_reg:x3; val_offset:249993*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249993*0 + 3*387*FLEN/8, x4, x1, x2)

inst_83332:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffe000000000; valaddr_reg:x3; val_offset:249996*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249996*0 + 3*388*FLEN/8, x4, x1, x2)

inst_83333:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffff000000000; valaddr_reg:x3; val_offset:249999*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249999*0 + 3*389*FLEN/8, x4, x1, x2)

inst_83334:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffff800000000; valaddr_reg:x3; val_offset:250002*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250002*0 + 3*390*FLEN/8, x4, x1, x2)

inst_83335:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffc00000000; valaddr_reg:x3; val_offset:250005*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250005*0 + 3*391*FLEN/8, x4, x1, x2)

inst_83336:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffe00000000; valaddr_reg:x3; val_offset:250008*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250008*0 + 3*392*FLEN/8, x4, x1, x2)

inst_83337:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffff00000000; valaddr_reg:x3; val_offset:250011*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250011*0 + 3*393*FLEN/8, x4, x1, x2)

inst_83338:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffff80000000; valaddr_reg:x3; val_offset:250014*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250014*0 + 3*394*FLEN/8, x4, x1, x2)

inst_83339:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffc0000000; valaddr_reg:x3; val_offset:250017*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250017*0 + 3*395*FLEN/8, x4, x1, x2)

inst_83340:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffe0000000; valaddr_reg:x3; val_offset:250020*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250020*0 + 3*396*FLEN/8, x4, x1, x2)

inst_83341:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffff0000000; valaddr_reg:x3; val_offset:250023*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250023*0 + 3*397*FLEN/8, x4, x1, x2)

inst_83342:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffff8000000; valaddr_reg:x3; val_offset:250026*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250026*0 + 3*398*FLEN/8, x4, x1, x2)

inst_83343:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffc000000; valaddr_reg:x3; val_offset:250029*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250029*0 + 3*399*FLEN/8, x4, x1, x2)

inst_83344:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffe000000; valaddr_reg:x3; val_offset:250032*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250032*0 + 3*400*FLEN/8, x4, x1, x2)

inst_83345:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffff000000; valaddr_reg:x3; val_offset:250035*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250035*0 + 3*401*FLEN/8, x4, x1, x2)

inst_83346:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffff800000; valaddr_reg:x3; val_offset:250038*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250038*0 + 3*402*FLEN/8, x4, x1, x2)

inst_83347:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffc00000; valaddr_reg:x3; val_offset:250041*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250041*0 + 3*403*FLEN/8, x4, x1, x2)

inst_83348:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffe00000; valaddr_reg:x3; val_offset:250044*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250044*0 + 3*404*FLEN/8, x4, x1, x2)

inst_83349:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffff00000; valaddr_reg:x3; val_offset:250047*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250047*0 + 3*405*FLEN/8, x4, x1, x2)

inst_83350:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffff80000; valaddr_reg:x3; val_offset:250050*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250050*0 + 3*406*FLEN/8, x4, x1, x2)

inst_83351:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffffc0000; valaddr_reg:x3; val_offset:250053*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250053*0 + 3*407*FLEN/8, x4, x1, x2)

inst_83352:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffffe0000; valaddr_reg:x3; val_offset:250056*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250056*0 + 3*408*FLEN/8, x4, x1, x2)

inst_83353:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffff0000; valaddr_reg:x3; val_offset:250059*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250059*0 + 3*409*FLEN/8, x4, x1, x2)

inst_83354:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffff8000; valaddr_reg:x3; val_offset:250062*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250062*0 + 3*410*FLEN/8, x4, x1, x2)

inst_83355:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffffc000; valaddr_reg:x3; val_offset:250065*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250065*0 + 3*411*FLEN/8, x4, x1, x2)

inst_83356:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffffe000; valaddr_reg:x3; val_offset:250068*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250068*0 + 3*412*FLEN/8, x4, x1, x2)

inst_83357:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffffff000; valaddr_reg:x3; val_offset:250071*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250071*0 + 3*413*FLEN/8, x4, x1, x2)

inst_83358:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffffff800; valaddr_reg:x3; val_offset:250074*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250074*0 + 3*414*FLEN/8, x4, x1, x2)

inst_83359:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffffffc00; valaddr_reg:x3; val_offset:250077*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250077*0 + 3*415*FLEN/8, x4, x1, x2)

inst_83360:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffffffe00; valaddr_reg:x3; val_offset:250080*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250080*0 + 3*416*FLEN/8, x4, x1, x2)

inst_83361:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffffff00; valaddr_reg:x3; val_offset:250083*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250083*0 + 3*417*FLEN/8, x4, x1, x2)

inst_83362:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffffff80; valaddr_reg:x3; val_offset:250086*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250086*0 + 3*418*FLEN/8, x4, x1, x2)

inst_83363:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffffffc0; valaddr_reg:x3; val_offset:250089*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250089*0 + 3*419*FLEN/8, x4, x1, x2)

inst_83364:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffffffe0; valaddr_reg:x3; val_offset:250092*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250092*0 + 3*420*FLEN/8, x4, x1, x2)

inst_83365:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffffffff0; valaddr_reg:x3; val_offset:250095*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250095*0 + 3*421*FLEN/8, x4, x1, x2)

inst_83366:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffffffff8; valaddr_reg:x3; val_offset:250098*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250098*0 + 3*422*FLEN/8, x4, x1, x2)

inst_83367:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffffffffc; valaddr_reg:x3; val_offset:250101*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250101*0 + 3*423*FLEN/8, x4, x1, x2)

inst_83368:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xeffffffffffffe; valaddr_reg:x3; val_offset:250104*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250104*0 + 3*424*FLEN/8, x4, x1, x2)

inst_83369:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9a49c8691cc03 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9a49c8691cc03; op2val:0x0;
op3val:0xefffffffffffff; valaddr_reg:x3; val_offset:250107*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250107*0 + 3*425*FLEN/8, x4, x1, x2)

inst_83370:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000000000000; valaddr_reg:x3; val_offset:250110*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250110*0 + 3*426*FLEN/8, x4, x1, x2)

inst_83371:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000000000001; valaddr_reg:x3; val_offset:250113*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250113*0 + 3*427*FLEN/8, x4, x1, x2)

inst_83372:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000000000003; valaddr_reg:x3; val_offset:250116*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250116*0 + 3*428*FLEN/8, x4, x1, x2)

inst_83373:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000000000007; valaddr_reg:x3; val_offset:250119*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250119*0 + 3*429*FLEN/8, x4, x1, x2)

inst_83374:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000000000000f; valaddr_reg:x3; val_offset:250122*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250122*0 + 3*430*FLEN/8, x4, x1, x2)

inst_83375:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000000000001f; valaddr_reg:x3; val_offset:250125*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250125*0 + 3*431*FLEN/8, x4, x1, x2)

inst_83376:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000000000003f; valaddr_reg:x3; val_offset:250128*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250128*0 + 3*432*FLEN/8, x4, x1, x2)

inst_83377:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000000000007f; valaddr_reg:x3; val_offset:250131*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250131*0 + 3*433*FLEN/8, x4, x1, x2)

inst_83378:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100000000000ff; valaddr_reg:x3; val_offset:250134*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250134*0 + 3*434*FLEN/8, x4, x1, x2)

inst_83379:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100000000001ff; valaddr_reg:x3; val_offset:250137*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250137*0 + 3*435*FLEN/8, x4, x1, x2)

inst_83380:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100000000003ff; valaddr_reg:x3; val_offset:250140*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250140*0 + 3*436*FLEN/8, x4, x1, x2)

inst_83381:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100000000007ff; valaddr_reg:x3; val_offset:250143*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250143*0 + 3*437*FLEN/8, x4, x1, x2)

inst_83382:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000000000fff; valaddr_reg:x3; val_offset:250146*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250146*0 + 3*438*FLEN/8, x4, x1, x2)

inst_83383:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000000001fff; valaddr_reg:x3; val_offset:250149*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250149*0 + 3*439*FLEN/8, x4, x1, x2)

inst_83384:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000000003fff; valaddr_reg:x3; val_offset:250152*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250152*0 + 3*440*FLEN/8, x4, x1, x2)

inst_83385:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000000007fff; valaddr_reg:x3; val_offset:250155*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250155*0 + 3*441*FLEN/8, x4, x1, x2)

inst_83386:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000000000ffff; valaddr_reg:x3; val_offset:250158*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250158*0 + 3*442*FLEN/8, x4, x1, x2)

inst_83387:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000000001ffff; valaddr_reg:x3; val_offset:250161*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250161*0 + 3*443*FLEN/8, x4, x1, x2)

inst_83388:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000000003ffff; valaddr_reg:x3; val_offset:250164*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250164*0 + 3*444*FLEN/8, x4, x1, x2)

inst_83389:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000000007ffff; valaddr_reg:x3; val_offset:250167*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250167*0 + 3*445*FLEN/8, x4, x1, x2)

inst_83390:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100000000fffff; valaddr_reg:x3; val_offset:250170*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250170*0 + 3*446*FLEN/8, x4, x1, x2)

inst_83391:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100000001fffff; valaddr_reg:x3; val_offset:250173*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250173*0 + 3*447*FLEN/8, x4, x1, x2)

inst_83392:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100000003fffff; valaddr_reg:x3; val_offset:250176*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250176*0 + 3*448*FLEN/8, x4, x1, x2)

inst_83393:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100000007fffff; valaddr_reg:x3; val_offset:250179*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250179*0 + 3*449*FLEN/8, x4, x1, x2)

inst_83394:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000000ffffff; valaddr_reg:x3; val_offset:250182*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250182*0 + 3*450*FLEN/8, x4, x1, x2)

inst_83395:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000001ffffff; valaddr_reg:x3; val_offset:250185*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250185*0 + 3*451*FLEN/8, x4, x1, x2)

inst_83396:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000003ffffff; valaddr_reg:x3; val_offset:250188*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250188*0 + 3*452*FLEN/8, x4, x1, x2)

inst_83397:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000007ffffff; valaddr_reg:x3; val_offset:250191*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250191*0 + 3*453*FLEN/8, x4, x1, x2)

inst_83398:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000000fffffff; valaddr_reg:x3; val_offset:250194*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250194*0 + 3*454*FLEN/8, x4, x1, x2)

inst_83399:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000001fffffff; valaddr_reg:x3; val_offset:250197*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250197*0 + 3*455*FLEN/8, x4, x1, x2)

inst_83400:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000003fffffff; valaddr_reg:x3; val_offset:250200*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250200*0 + 3*456*FLEN/8, x4, x1, x2)

inst_83401:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000007fffffff; valaddr_reg:x3; val_offset:250203*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250203*0 + 3*457*FLEN/8, x4, x1, x2)

inst_83402:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100000ffffffff; valaddr_reg:x3; val_offset:250206*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250206*0 + 3*458*FLEN/8, x4, x1, x2)

inst_83403:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100001ffffffff; valaddr_reg:x3; val_offset:250209*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250209*0 + 3*459*FLEN/8, x4, x1, x2)

inst_83404:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100003ffffffff; valaddr_reg:x3; val_offset:250212*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250212*0 + 3*460*FLEN/8, x4, x1, x2)

inst_83405:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100007ffffffff; valaddr_reg:x3; val_offset:250215*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250215*0 + 3*461*FLEN/8, x4, x1, x2)

inst_83406:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10000fffffffff; valaddr_reg:x3; val_offset:250218*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250218*0 + 3*462*FLEN/8, x4, x1, x2)

inst_83407:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10001fffffffff; valaddr_reg:x3; val_offset:250221*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250221*0 + 3*463*FLEN/8, x4, x1, x2)

inst_83408:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10003fffffffff; valaddr_reg:x3; val_offset:250224*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250224*0 + 3*464*FLEN/8, x4, x1, x2)

inst_83409:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10007fffffffff; valaddr_reg:x3; val_offset:250227*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250227*0 + 3*465*FLEN/8, x4, x1, x2)

inst_83410:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1000ffffffffff; valaddr_reg:x3; val_offset:250230*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250230*0 + 3*466*FLEN/8, x4, x1, x2)

inst_83411:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1001ffffffffff; valaddr_reg:x3; val_offset:250233*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250233*0 + 3*467*FLEN/8, x4, x1, x2)

inst_83412:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1003ffffffffff; valaddr_reg:x3; val_offset:250236*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250236*0 + 3*468*FLEN/8, x4, x1, x2)

inst_83413:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1007ffffffffff; valaddr_reg:x3; val_offset:250239*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250239*0 + 3*469*FLEN/8, x4, x1, x2)

inst_83414:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c100fffffffffff; valaddr_reg:x3; val_offset:250242*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250242*0 + 3*470*FLEN/8, x4, x1, x2)

inst_83415:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c101fffffffffff; valaddr_reg:x3; val_offset:250245*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250245*0 + 3*471*FLEN/8, x4, x1, x2)

inst_83416:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c103fffffffffff; valaddr_reg:x3; val_offset:250248*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250248*0 + 3*472*FLEN/8, x4, x1, x2)

inst_83417:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c107fffffffffff; valaddr_reg:x3; val_offset:250251*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250251*0 + 3*473*FLEN/8, x4, x1, x2)

inst_83418:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c10ffffffffffff; valaddr_reg:x3; val_offset:250254*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250254*0 + 3*474*FLEN/8, x4, x1, x2)

inst_83419:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c11ffffffffffff; valaddr_reg:x3; val_offset:250257*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250257*0 + 3*475*FLEN/8, x4, x1, x2)

inst_83420:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c13ffffffffffff; valaddr_reg:x3; val_offset:250260*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250260*0 + 3*476*FLEN/8, x4, x1, x2)

inst_83421:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c17ffffffffffff; valaddr_reg:x3; val_offset:250263*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250263*0 + 3*477*FLEN/8, x4, x1, x2)

inst_83422:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c18000000000000; valaddr_reg:x3; val_offset:250266*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250266*0 + 3*478*FLEN/8, x4, x1, x2)

inst_83423:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1c000000000000; valaddr_reg:x3; val_offset:250269*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250269*0 + 3*479*FLEN/8, x4, x1, x2)

inst_83424:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1e000000000000; valaddr_reg:x3; val_offset:250272*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250272*0 + 3*480*FLEN/8, x4, x1, x2)

inst_83425:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1f000000000000; valaddr_reg:x3; val_offset:250275*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250275*0 + 3*481*FLEN/8, x4, x1, x2)

inst_83426:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1f800000000000; valaddr_reg:x3; val_offset:250278*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250278*0 + 3*482*FLEN/8, x4, x1, x2)

inst_83427:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fc00000000000; valaddr_reg:x3; val_offset:250281*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250281*0 + 3*483*FLEN/8, x4, x1, x2)

inst_83428:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fe00000000000; valaddr_reg:x3; val_offset:250284*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250284*0 + 3*484*FLEN/8, x4, x1, x2)

inst_83429:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ff00000000000; valaddr_reg:x3; val_offset:250287*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250287*0 + 3*485*FLEN/8, x4, x1, x2)

inst_83430:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ff80000000000; valaddr_reg:x3; val_offset:250290*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250290*0 + 3*486*FLEN/8, x4, x1, x2)

inst_83431:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffc0000000000; valaddr_reg:x3; val_offset:250293*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250293*0 + 3*487*FLEN/8, x4, x1, x2)

inst_83432:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffe0000000000; valaddr_reg:x3; val_offset:250296*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250296*0 + 3*488*FLEN/8, x4, x1, x2)

inst_83433:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fff0000000000; valaddr_reg:x3; val_offset:250299*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250299*0 + 3*489*FLEN/8, x4, x1, x2)

inst_83434:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fff8000000000; valaddr_reg:x3; val_offset:250302*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250302*0 + 3*490*FLEN/8, x4, x1, x2)

inst_83435:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffc000000000; valaddr_reg:x3; val_offset:250305*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250305*0 + 3*491*FLEN/8, x4, x1, x2)

inst_83436:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffe000000000; valaddr_reg:x3; val_offset:250308*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250308*0 + 3*492*FLEN/8, x4, x1, x2)

inst_83437:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffff000000000; valaddr_reg:x3; val_offset:250311*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250311*0 + 3*493*FLEN/8, x4, x1, x2)

inst_83438:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffff800000000; valaddr_reg:x3; val_offset:250314*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250314*0 + 3*494*FLEN/8, x4, x1, x2)

inst_83439:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffc00000000; valaddr_reg:x3; val_offset:250317*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250317*0 + 3*495*FLEN/8, x4, x1, x2)

inst_83440:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffe00000000; valaddr_reg:x3; val_offset:250320*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250320*0 + 3*496*FLEN/8, x4, x1, x2)

inst_83441:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffff00000000; valaddr_reg:x3; val_offset:250323*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250323*0 + 3*497*FLEN/8, x4, x1, x2)

inst_83442:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffff80000000; valaddr_reg:x3; val_offset:250326*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250326*0 + 3*498*FLEN/8, x4, x1, x2)

inst_83443:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffc0000000; valaddr_reg:x3; val_offset:250329*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250329*0 + 3*499*FLEN/8, x4, x1, x2)

inst_83444:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffe0000000; valaddr_reg:x3; val_offset:250332*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250332*0 + 3*500*FLEN/8, x4, x1, x2)

inst_83445:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffff0000000; valaddr_reg:x3; val_offset:250335*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250335*0 + 3*501*FLEN/8, x4, x1, x2)

inst_83446:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffff8000000; valaddr_reg:x3; val_offset:250338*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250338*0 + 3*502*FLEN/8, x4, x1, x2)

inst_83447:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffc000000; valaddr_reg:x3; val_offset:250341*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250341*0 + 3*503*FLEN/8, x4, x1, x2)

inst_83448:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffe000000; valaddr_reg:x3; val_offset:250344*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250344*0 + 3*504*FLEN/8, x4, x1, x2)

inst_83449:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffff000000; valaddr_reg:x3; val_offset:250347*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250347*0 + 3*505*FLEN/8, x4, x1, x2)

inst_83450:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffff800000; valaddr_reg:x3; val_offset:250350*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250350*0 + 3*506*FLEN/8, x4, x1, x2)

inst_83451:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffc00000; valaddr_reg:x3; val_offset:250353*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250353*0 + 3*507*FLEN/8, x4, x1, x2)

inst_83452:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffe00000; valaddr_reg:x3; val_offset:250356*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250356*0 + 3*508*FLEN/8, x4, x1, x2)

inst_83453:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffff00000; valaddr_reg:x3; val_offset:250359*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250359*0 + 3*509*FLEN/8, x4, x1, x2)

inst_83454:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffff80000; valaddr_reg:x3; val_offset:250362*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250362*0 + 3*510*FLEN/8, x4, x1, x2)

inst_83455:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffffc0000; valaddr_reg:x3; val_offset:250365*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250365*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_83456:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffffe0000; valaddr_reg:x3; val_offset:250368*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250368*0 + 3*512*FLEN/8, x4, x1, x2)

inst_83457:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffff0000; valaddr_reg:x3; val_offset:250371*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250371*0 + 3*513*FLEN/8, x4, x1, x2)

inst_83458:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffff8000; valaddr_reg:x3; val_offset:250374*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250374*0 + 3*514*FLEN/8, x4, x1, x2)

inst_83459:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffffc000; valaddr_reg:x3; val_offset:250377*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250377*0 + 3*515*FLEN/8, x4, x1, x2)

inst_83460:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffffe000; valaddr_reg:x3; val_offset:250380*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250380*0 + 3*516*FLEN/8, x4, x1, x2)

inst_83461:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffffff000; valaddr_reg:x3; val_offset:250383*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250383*0 + 3*517*FLEN/8, x4, x1, x2)

inst_83462:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffffff800; valaddr_reg:x3; val_offset:250386*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250386*0 + 3*518*FLEN/8, x4, x1, x2)

inst_83463:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffffffc00; valaddr_reg:x3; val_offset:250389*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250389*0 + 3*519*FLEN/8, x4, x1, x2)

inst_83464:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffffffe00; valaddr_reg:x3; val_offset:250392*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250392*0 + 3*520*FLEN/8, x4, x1, x2)

inst_83465:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffffff00; valaddr_reg:x3; val_offset:250395*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250395*0 + 3*521*FLEN/8, x4, x1, x2)

inst_83466:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffffff80; valaddr_reg:x3; val_offset:250398*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250398*0 + 3*522*FLEN/8, x4, x1, x2)

inst_83467:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffffffc0; valaddr_reg:x3; val_offset:250401*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250401*0 + 3*523*FLEN/8, x4, x1, x2)

inst_83468:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffffffe0; valaddr_reg:x3; val_offset:250404*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250404*0 + 3*524*FLEN/8, x4, x1, x2)

inst_83469:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffffffff0; valaddr_reg:x3; val_offset:250407*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250407*0 + 3*525*FLEN/8, x4, x1, x2)

inst_83470:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffffffff8; valaddr_reg:x3; val_offset:250410*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250410*0 + 3*526*FLEN/8, x4, x1, x2)

inst_83471:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffffffffc; valaddr_reg:x3; val_offset:250413*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250413*0 + 3*527*FLEN/8, x4, x1, x2)

inst_83472:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1ffffffffffffe; valaddr_reg:x3; val_offset:250416*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250416*0 + 3*528*FLEN/8, x4, x1, x2)

inst_83473:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3c1 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3c1fffffffffffff; valaddr_reg:x3; val_offset:250419*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250419*0 + 3*529*FLEN/8, x4, x1, x2)

inst_83474:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:250422*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250422*0 + 3*530*FLEN/8, x4, x1, x2)

inst_83475:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:250425*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250425*0 + 3*531*FLEN/8, x4, x1, x2)

inst_83476:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:250428*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250428*0 + 3*532*FLEN/8, x4, x1, x2)

inst_83477:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:250431*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250431*0 + 3*533*FLEN/8, x4, x1, x2)

inst_83478:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:250434*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250434*0 + 3*534*FLEN/8, x4, x1, x2)

inst_83479:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:250437*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250437*0 + 3*535*FLEN/8, x4, x1, x2)

inst_83480:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:250440*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250440*0 + 3*536*FLEN/8, x4, x1, x2)

inst_83481:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:250443*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250443*0 + 3*537*FLEN/8, x4, x1, x2)

inst_83482:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:250446*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250446*0 + 3*538*FLEN/8, x4, x1, x2)

inst_83483:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:250449*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250449*0 + 3*539*FLEN/8, x4, x1, x2)

inst_83484:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:250452*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250452*0 + 3*540*FLEN/8, x4, x1, x2)

inst_83485:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:250455*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250455*0 + 3*541*FLEN/8, x4, x1, x2)

inst_83486:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:250458*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250458*0 + 3*542*FLEN/8, x4, x1, x2)

inst_83487:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:250461*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250461*0 + 3*543*FLEN/8, x4, x1, x2)

inst_83488:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:250464*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250464*0 + 3*544*FLEN/8, x4, x1, x2)

inst_83489:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:250467*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250467*0 + 3*545*FLEN/8, x4, x1, x2)

inst_83490:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:250470*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250470*0 + 3*546*FLEN/8, x4, x1, x2)

inst_83491:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:250473*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250473*0 + 3*547*FLEN/8, x4, x1, x2)

inst_83492:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:250476*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250476*0 + 3*548*FLEN/8, x4, x1, x2)

inst_83493:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:250479*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250479*0 + 3*549*FLEN/8, x4, x1, x2)

inst_83494:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:250482*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250482*0 + 3*550*FLEN/8, x4, x1, x2)

inst_83495:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b1cbe2c65ac2 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x3ed2a83f81c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b1cbe2c65ac2; op2val:0x2033ed2a83f81c6e;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:250485*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250485*0 + 3*551*FLEN/8, x4, x1, x2)

inst_83496:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:250488*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250488*0 + 3*552*FLEN/8, x4, x1, x2)

inst_83497:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:250491*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250491*0 + 3*553*FLEN/8, x4, x1, x2)

inst_83498:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:250494*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250494*0 + 3*554*FLEN/8, x4, x1, x2)

inst_83499:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:250497*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250497*0 + 3*555*FLEN/8, x4, x1, x2)

inst_83500:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:250500*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250500*0 + 3*556*FLEN/8, x4, x1, x2)

inst_83501:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:250503*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250503*0 + 3*557*FLEN/8, x4, x1, x2)

inst_83502:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:250506*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250506*0 + 3*558*FLEN/8, x4, x1, x2)

inst_83503:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:250509*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250509*0 + 3*559*FLEN/8, x4, x1, x2)

inst_83504:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:250512*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250512*0 + 3*560*FLEN/8, x4, x1, x2)

inst_83505:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:250515*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250515*0 + 3*561*FLEN/8, x4, x1, x2)

inst_83506:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:250518*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250518*0 + 3*562*FLEN/8, x4, x1, x2)

inst_83507:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:250521*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250521*0 + 3*563*FLEN/8, x4, x1, x2)

inst_83508:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:250524*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250524*0 + 3*564*FLEN/8, x4, x1, x2)

inst_83509:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:250527*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250527*0 + 3*565*FLEN/8, x4, x1, x2)

inst_83510:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:250530*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250530*0 + 3*566*FLEN/8, x4, x1, x2)

inst_83511:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:250533*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250533*0 + 3*567*FLEN/8, x4, x1, x2)

inst_83512:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:250536*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250536*0 + 3*568*FLEN/8, x4, x1, x2)

inst_83513:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:250539*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250539*0 + 3*569*FLEN/8, x4, x1, x2)

inst_83514:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:250542*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250542*0 + 3*570*FLEN/8, x4, x1, x2)

inst_83515:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:250545*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250545*0 + 3*571*FLEN/8, x4, x1, x2)

inst_83516:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:250548*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250548*0 + 3*572*FLEN/8, x4, x1, x2)

inst_83517:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:250551*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250551*0 + 3*573*FLEN/8, x4, x1, x2)

inst_83518:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000000000000; valaddr_reg:x3; val_offset:250554*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250554*0 + 3*574*FLEN/8, x4, x1, x2)

inst_83519:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000000000001; valaddr_reg:x3; val_offset:250557*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250557*0 + 3*575*FLEN/8, x4, x1, x2)

inst_83520:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000000000003; valaddr_reg:x3; val_offset:250560*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250560*0 + 3*576*FLEN/8, x4, x1, x2)

inst_83521:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000000000007; valaddr_reg:x3; val_offset:250563*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250563*0 + 3*577*FLEN/8, x4, x1, x2)

inst_83522:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000000000000f; valaddr_reg:x3; val_offset:250566*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250566*0 + 3*578*FLEN/8, x4, x1, x2)

inst_83523:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000000000001f; valaddr_reg:x3; val_offset:250569*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250569*0 + 3*579*FLEN/8, x4, x1, x2)

inst_83524:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000000000003f; valaddr_reg:x3; val_offset:250572*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250572*0 + 3*580*FLEN/8, x4, x1, x2)

inst_83525:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000000000007f; valaddr_reg:x3; val_offset:250575*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250575*0 + 3*581*FLEN/8, x4, x1, x2)

inst_83526:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900000000000ff; valaddr_reg:x3; val_offset:250578*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250578*0 + 3*582*FLEN/8, x4, x1, x2)

inst_83527:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900000000001ff; valaddr_reg:x3; val_offset:250581*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250581*0 + 3*583*FLEN/8, x4, x1, x2)

inst_83528:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900000000003ff; valaddr_reg:x3; val_offset:250584*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250584*0 + 3*584*FLEN/8, x4, x1, x2)

inst_83529:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900000000007ff; valaddr_reg:x3; val_offset:250587*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250587*0 + 3*585*FLEN/8, x4, x1, x2)

inst_83530:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000000000fff; valaddr_reg:x3; val_offset:250590*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250590*0 + 3*586*FLEN/8, x4, x1, x2)

inst_83531:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000000001fff; valaddr_reg:x3; val_offset:250593*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250593*0 + 3*587*FLEN/8, x4, x1, x2)

inst_83532:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000000003fff; valaddr_reg:x3; val_offset:250596*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250596*0 + 3*588*FLEN/8, x4, x1, x2)

inst_83533:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000000007fff; valaddr_reg:x3; val_offset:250599*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250599*0 + 3*589*FLEN/8, x4, x1, x2)

inst_83534:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000000000ffff; valaddr_reg:x3; val_offset:250602*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250602*0 + 3*590*FLEN/8, x4, x1, x2)

inst_83535:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000000001ffff; valaddr_reg:x3; val_offset:250605*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250605*0 + 3*591*FLEN/8, x4, x1, x2)

inst_83536:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000000003ffff; valaddr_reg:x3; val_offset:250608*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250608*0 + 3*592*FLEN/8, x4, x1, x2)

inst_83537:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000000007ffff; valaddr_reg:x3; val_offset:250611*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250611*0 + 3*593*FLEN/8, x4, x1, x2)

inst_83538:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900000000fffff; valaddr_reg:x3; val_offset:250614*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250614*0 + 3*594*FLEN/8, x4, x1, x2)

inst_83539:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900000001fffff; valaddr_reg:x3; val_offset:250617*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250617*0 + 3*595*FLEN/8, x4, x1, x2)

inst_83540:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900000003fffff; valaddr_reg:x3; val_offset:250620*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250620*0 + 3*596*FLEN/8, x4, x1, x2)

inst_83541:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900000007fffff; valaddr_reg:x3; val_offset:250623*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250623*0 + 3*597*FLEN/8, x4, x1, x2)

inst_83542:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000000ffffff; valaddr_reg:x3; val_offset:250626*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250626*0 + 3*598*FLEN/8, x4, x1, x2)

inst_83543:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000001ffffff; valaddr_reg:x3; val_offset:250629*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250629*0 + 3*599*FLEN/8, x4, x1, x2)

inst_83544:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000003ffffff; valaddr_reg:x3; val_offset:250632*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250632*0 + 3*600*FLEN/8, x4, x1, x2)

inst_83545:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000007ffffff; valaddr_reg:x3; val_offset:250635*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250635*0 + 3*601*FLEN/8, x4, x1, x2)

inst_83546:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000000fffffff; valaddr_reg:x3; val_offset:250638*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250638*0 + 3*602*FLEN/8, x4, x1, x2)

inst_83547:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000001fffffff; valaddr_reg:x3; val_offset:250641*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250641*0 + 3*603*FLEN/8, x4, x1, x2)

inst_83548:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000003fffffff; valaddr_reg:x3; val_offset:250644*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250644*0 + 3*604*FLEN/8, x4, x1, x2)

inst_83549:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000007fffffff; valaddr_reg:x3; val_offset:250647*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250647*0 + 3*605*FLEN/8, x4, x1, x2)

inst_83550:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900000ffffffff; valaddr_reg:x3; val_offset:250650*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250650*0 + 3*606*FLEN/8, x4, x1, x2)

inst_83551:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900001ffffffff; valaddr_reg:x3; val_offset:250653*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250653*0 + 3*607*FLEN/8, x4, x1, x2)

inst_83552:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900003ffffffff; valaddr_reg:x3; val_offset:250656*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250656*0 + 3*608*FLEN/8, x4, x1, x2)

inst_83553:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900007ffffffff; valaddr_reg:x3; val_offset:250659*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250659*0 + 3*609*FLEN/8, x4, x1, x2)

inst_83554:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290000fffffffff; valaddr_reg:x3; val_offset:250662*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250662*0 + 3*610*FLEN/8, x4, x1, x2)

inst_83555:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290001fffffffff; valaddr_reg:x3; val_offset:250665*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250665*0 + 3*611*FLEN/8, x4, x1, x2)

inst_83556:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290003fffffffff; valaddr_reg:x3; val_offset:250668*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250668*0 + 3*612*FLEN/8, x4, x1, x2)

inst_83557:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290007fffffffff; valaddr_reg:x3; val_offset:250671*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250671*0 + 3*613*FLEN/8, x4, x1, x2)

inst_83558:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829000ffffffffff; valaddr_reg:x3; val_offset:250674*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250674*0 + 3*614*FLEN/8, x4, x1, x2)

inst_83559:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829001ffffffffff; valaddr_reg:x3; val_offset:250677*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250677*0 + 3*615*FLEN/8, x4, x1, x2)

inst_83560:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829003ffffffffff; valaddr_reg:x3; val_offset:250680*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250680*0 + 3*616*FLEN/8, x4, x1, x2)

inst_83561:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829007ffffffffff; valaddr_reg:x3; val_offset:250683*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250683*0 + 3*617*FLEN/8, x4, x1, x2)

inst_83562:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82900fffffffffff; valaddr_reg:x3; val_offset:250686*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250686*0 + 3*618*FLEN/8, x4, x1, x2)

inst_83563:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82901fffffffffff; valaddr_reg:x3; val_offset:250689*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250689*0 + 3*619*FLEN/8, x4, x1, x2)

inst_83564:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82903fffffffffff; valaddr_reg:x3; val_offset:250692*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250692*0 + 3*620*FLEN/8, x4, x1, x2)

inst_83565:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x82907fffffffffff; valaddr_reg:x3; val_offset:250695*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250695*0 + 3*621*FLEN/8, x4, x1, x2)

inst_83566:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8290ffffffffffff; valaddr_reg:x3; val_offset:250698*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250698*0 + 3*622*FLEN/8, x4, x1, x2)

inst_83567:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8291ffffffffffff; valaddr_reg:x3; val_offset:250701*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250701*0 + 3*623*FLEN/8, x4, x1, x2)

inst_83568:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8293ffffffffffff; valaddr_reg:x3; val_offset:250704*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250704*0 + 3*624*FLEN/8, x4, x1, x2)

inst_83569:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8297ffffffffffff; valaddr_reg:x3; val_offset:250707*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250707*0 + 3*625*FLEN/8, x4, x1, x2)

inst_83570:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x8298000000000000; valaddr_reg:x3; val_offset:250710*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250710*0 + 3*626*FLEN/8, x4, x1, x2)

inst_83571:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829c000000000000; valaddr_reg:x3; val_offset:250713*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250713*0 + 3*627*FLEN/8, x4, x1, x2)

inst_83572:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829e000000000000; valaddr_reg:x3; val_offset:250716*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250716*0 + 3*628*FLEN/8, x4, x1, x2)

inst_83573:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829f000000000000; valaddr_reg:x3; val_offset:250719*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250719*0 + 3*629*FLEN/8, x4, x1, x2)

inst_83574:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829f800000000000; valaddr_reg:x3; val_offset:250722*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250722*0 + 3*630*FLEN/8, x4, x1, x2)

inst_83575:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fc00000000000; valaddr_reg:x3; val_offset:250725*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250725*0 + 3*631*FLEN/8, x4, x1, x2)

inst_83576:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fe00000000000; valaddr_reg:x3; val_offset:250728*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250728*0 + 3*632*FLEN/8, x4, x1, x2)

inst_83577:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ff00000000000; valaddr_reg:x3; val_offset:250731*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250731*0 + 3*633*FLEN/8, x4, x1, x2)

inst_83578:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ff80000000000; valaddr_reg:x3; val_offset:250734*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250734*0 + 3*634*FLEN/8, x4, x1, x2)

inst_83579:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffc0000000000; valaddr_reg:x3; val_offset:250737*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250737*0 + 3*635*FLEN/8, x4, x1, x2)

inst_83580:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffe0000000000; valaddr_reg:x3; val_offset:250740*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250740*0 + 3*636*FLEN/8, x4, x1, x2)

inst_83581:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fff0000000000; valaddr_reg:x3; val_offset:250743*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250743*0 + 3*637*FLEN/8, x4, x1, x2)

inst_83582:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fff8000000000; valaddr_reg:x3; val_offset:250746*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250746*0 + 3*638*FLEN/8, x4, x1, x2)

inst_83583:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffc000000000; valaddr_reg:x3; val_offset:250749*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250749*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_83584:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffe000000000; valaddr_reg:x3; val_offset:250752*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250752*0 + 3*640*FLEN/8, x4, x1, x2)

inst_83585:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffff000000000; valaddr_reg:x3; val_offset:250755*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250755*0 + 3*641*FLEN/8, x4, x1, x2)

inst_83586:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffff800000000; valaddr_reg:x3; val_offset:250758*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250758*0 + 3*642*FLEN/8, x4, x1, x2)

inst_83587:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffc00000000; valaddr_reg:x3; val_offset:250761*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250761*0 + 3*643*FLEN/8, x4, x1, x2)

inst_83588:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffe00000000; valaddr_reg:x3; val_offset:250764*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250764*0 + 3*644*FLEN/8, x4, x1, x2)

inst_83589:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffff00000000; valaddr_reg:x3; val_offset:250767*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250767*0 + 3*645*FLEN/8, x4, x1, x2)

inst_83590:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffff80000000; valaddr_reg:x3; val_offset:250770*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250770*0 + 3*646*FLEN/8, x4, x1, x2)

inst_83591:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffc0000000; valaddr_reg:x3; val_offset:250773*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250773*0 + 3*647*FLEN/8, x4, x1, x2)

inst_83592:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffe0000000; valaddr_reg:x3; val_offset:250776*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250776*0 + 3*648*FLEN/8, x4, x1, x2)

inst_83593:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffff0000000; valaddr_reg:x3; val_offset:250779*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250779*0 + 3*649*FLEN/8, x4, x1, x2)

inst_83594:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffff8000000; valaddr_reg:x3; val_offset:250782*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250782*0 + 3*650*FLEN/8, x4, x1, x2)

inst_83595:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffc000000; valaddr_reg:x3; val_offset:250785*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250785*0 + 3*651*FLEN/8, x4, x1, x2)

inst_83596:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffe000000; valaddr_reg:x3; val_offset:250788*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250788*0 + 3*652*FLEN/8, x4, x1, x2)

inst_83597:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffff000000; valaddr_reg:x3; val_offset:250791*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250791*0 + 3*653*FLEN/8, x4, x1, x2)

inst_83598:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffff800000; valaddr_reg:x3; val_offset:250794*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250794*0 + 3*654*FLEN/8, x4, x1, x2)

inst_83599:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffc00000; valaddr_reg:x3; val_offset:250797*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250797*0 + 3*655*FLEN/8, x4, x1, x2)

inst_83600:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffe00000; valaddr_reg:x3; val_offset:250800*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250800*0 + 3*656*FLEN/8, x4, x1, x2)

inst_83601:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffff00000; valaddr_reg:x3; val_offset:250803*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250803*0 + 3*657*FLEN/8, x4, x1, x2)

inst_83602:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffff80000; valaddr_reg:x3; val_offset:250806*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250806*0 + 3*658*FLEN/8, x4, x1, x2)

inst_83603:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffffc0000; valaddr_reg:x3; val_offset:250809*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250809*0 + 3*659*FLEN/8, x4, x1, x2)

inst_83604:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffffe0000; valaddr_reg:x3; val_offset:250812*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250812*0 + 3*660*FLEN/8, x4, x1, x2)

inst_83605:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffff0000; valaddr_reg:x3; val_offset:250815*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250815*0 + 3*661*FLEN/8, x4, x1, x2)

inst_83606:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffff8000; valaddr_reg:x3; val_offset:250818*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250818*0 + 3*662*FLEN/8, x4, x1, x2)

inst_83607:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffffc000; valaddr_reg:x3; val_offset:250821*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250821*0 + 3*663*FLEN/8, x4, x1, x2)

inst_83608:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffffe000; valaddr_reg:x3; val_offset:250824*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250824*0 + 3*664*FLEN/8, x4, x1, x2)

inst_83609:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffffff000; valaddr_reg:x3; val_offset:250827*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250827*0 + 3*665*FLEN/8, x4, x1, x2)

inst_83610:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffffff800; valaddr_reg:x3; val_offset:250830*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250830*0 + 3*666*FLEN/8, x4, x1, x2)

inst_83611:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffffffc00; valaddr_reg:x3; val_offset:250833*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250833*0 + 3*667*FLEN/8, x4, x1, x2)

inst_83612:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffffffe00; valaddr_reg:x3; val_offset:250836*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250836*0 + 3*668*FLEN/8, x4, x1, x2)

inst_83613:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffffff00; valaddr_reg:x3; val_offset:250839*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250839*0 + 3*669*FLEN/8, x4, x1, x2)

inst_83614:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffffff80; valaddr_reg:x3; val_offset:250842*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250842*0 + 3*670*FLEN/8, x4, x1, x2)

inst_83615:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffffffc0; valaddr_reg:x3; val_offset:250845*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250845*0 + 3*671*FLEN/8, x4, x1, x2)

inst_83616:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffffffe0; valaddr_reg:x3; val_offset:250848*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250848*0 + 3*672*FLEN/8, x4, x1, x2)

inst_83617:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffffffff0; valaddr_reg:x3; val_offset:250851*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250851*0 + 3*673*FLEN/8, x4, x1, x2)

inst_83618:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffffffff8; valaddr_reg:x3; val_offset:250854*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250854*0 + 3*674*FLEN/8, x4, x1, x2)

inst_83619:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffffffffc; valaddr_reg:x3; val_offset:250857*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250857*0 + 3*675*FLEN/8, x4, x1, x2)

inst_83620:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829ffffffffffffe; valaddr_reg:x3; val_offset:250860*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250860*0 + 3*676*FLEN/8, x4, x1, x2)

inst_83621:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b3752dc7833d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b3752dc7833d; op2val:0x8000;
op3val:0x829fffffffffffff; valaddr_reg:x3; val_offset:250863*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250863*0 + 3*677*FLEN/8, x4, x1, x2)

inst_83622:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:250866*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250866*0 + 3*678*FLEN/8, x4, x1, x2)

inst_83623:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:250869*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250869*0 + 3*679*FLEN/8, x4, x1, x2)

inst_83624:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:250872*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250872*0 + 3*680*FLEN/8, x4, x1, x2)

inst_83625:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:250875*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250875*0 + 3*681*FLEN/8, x4, x1, x2)

inst_83626:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:250878*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250878*0 + 3*682*FLEN/8, x4, x1, x2)

inst_83627:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:250881*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250881*0 + 3*683*FLEN/8, x4, x1, x2)

inst_83628:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:250884*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250884*0 + 3*684*FLEN/8, x4, x1, x2)

inst_83629:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:250887*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250887*0 + 3*685*FLEN/8, x4, x1, x2)

inst_83630:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:250890*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250890*0 + 3*686*FLEN/8, x4, x1, x2)

inst_83631:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:250893*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250893*0 + 3*687*FLEN/8, x4, x1, x2)

inst_83632:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:250896*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250896*0 + 3*688*FLEN/8, x4, x1, x2)

inst_83633:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:250899*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250899*0 + 3*689*FLEN/8, x4, x1, x2)

inst_83634:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:250902*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250902*0 + 3*690*FLEN/8, x4, x1, x2)

inst_83635:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:250905*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250905*0 + 3*691*FLEN/8, x4, x1, x2)

inst_83636:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:250908*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250908*0 + 3*692*FLEN/8, x4, x1, x2)

inst_83637:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:250911*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250911*0 + 3*693*FLEN/8, x4, x1, x2)

inst_83638:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:250914*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250914*0 + 3*694*FLEN/8, x4, x1, x2)

inst_83639:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:250917*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250917*0 + 3*695*FLEN/8, x4, x1, x2)

inst_83640:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:250920*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250920*0 + 3*696*FLEN/8, x4, x1, x2)

inst_83641:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:250923*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250923*0 + 3*697*FLEN/8, x4, x1, x2)

inst_83642:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:250926*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250926*0 + 3*698*FLEN/8, x4, x1, x2)

inst_83643:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:250929*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250929*0 + 3*699*FLEN/8, x4, x1, x2)

inst_83644:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000000000000; valaddr_reg:x3; val_offset:250932*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250932*0 + 3*700*FLEN/8, x4, x1, x2)

inst_83645:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000000000001; valaddr_reg:x3; val_offset:250935*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250935*0 + 3*701*FLEN/8, x4, x1, x2)

inst_83646:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000000000003; valaddr_reg:x3; val_offset:250938*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250938*0 + 3*702*FLEN/8, x4, x1, x2)

inst_83647:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000000000007; valaddr_reg:x3; val_offset:250941*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250941*0 + 3*703*FLEN/8, x4, x1, x2)

inst_83648:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000000000000f; valaddr_reg:x3; val_offset:250944*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250944*0 + 3*704*FLEN/8, x4, x1, x2)

inst_83649:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000000000001f; valaddr_reg:x3; val_offset:250947*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250947*0 + 3*705*FLEN/8, x4, x1, x2)

inst_83650:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000000000003f; valaddr_reg:x3; val_offset:250950*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250950*0 + 3*706*FLEN/8, x4, x1, x2)

inst_83651:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000000000007f; valaddr_reg:x3; val_offset:250953*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250953*0 + 3*707*FLEN/8, x4, x1, x2)

inst_83652:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800000000000ff; valaddr_reg:x3; val_offset:250956*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250956*0 + 3*708*FLEN/8, x4, x1, x2)

inst_83653:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800000000001ff; valaddr_reg:x3; val_offset:250959*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250959*0 + 3*709*FLEN/8, x4, x1, x2)

inst_83654:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800000000003ff; valaddr_reg:x3; val_offset:250962*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250962*0 + 3*710*FLEN/8, x4, x1, x2)

inst_83655:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800000000007ff; valaddr_reg:x3; val_offset:250965*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250965*0 + 3*711*FLEN/8, x4, x1, x2)

inst_83656:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000000000fff; valaddr_reg:x3; val_offset:250968*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250968*0 + 3*712*FLEN/8, x4, x1, x2)

inst_83657:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000000001fff; valaddr_reg:x3; val_offset:250971*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250971*0 + 3*713*FLEN/8, x4, x1, x2)

inst_83658:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000000003fff; valaddr_reg:x3; val_offset:250974*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250974*0 + 3*714*FLEN/8, x4, x1, x2)

inst_83659:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000000007fff; valaddr_reg:x3; val_offset:250977*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250977*0 + 3*715*FLEN/8, x4, x1, x2)

inst_83660:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000000000ffff; valaddr_reg:x3; val_offset:250980*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250980*0 + 3*716*FLEN/8, x4, x1, x2)

inst_83661:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000000001ffff; valaddr_reg:x3; val_offset:250983*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250983*0 + 3*717*FLEN/8, x4, x1, x2)

inst_83662:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000000003ffff; valaddr_reg:x3; val_offset:250986*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250986*0 + 3*718*FLEN/8, x4, x1, x2)

inst_83663:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000000007ffff; valaddr_reg:x3; val_offset:250989*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250989*0 + 3*719*FLEN/8, x4, x1, x2)

inst_83664:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800000000fffff; valaddr_reg:x3; val_offset:250992*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250992*0 + 3*720*FLEN/8, x4, x1, x2)

inst_83665:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800000001fffff; valaddr_reg:x3; val_offset:250995*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250995*0 + 3*721*FLEN/8, x4, x1, x2)

inst_83666:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800000003fffff; valaddr_reg:x3; val_offset:250998*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 250998*0 + 3*722*FLEN/8, x4, x1, x2)

inst_83667:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800000007fffff; valaddr_reg:x3; val_offset:251001*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251001*0 + 3*723*FLEN/8, x4, x1, x2)

inst_83668:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000000ffffff; valaddr_reg:x3; val_offset:251004*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251004*0 + 3*724*FLEN/8, x4, x1, x2)

inst_83669:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000001ffffff; valaddr_reg:x3; val_offset:251007*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251007*0 + 3*725*FLEN/8, x4, x1, x2)

inst_83670:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000003ffffff; valaddr_reg:x3; val_offset:251010*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251010*0 + 3*726*FLEN/8, x4, x1, x2)

inst_83671:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000007ffffff; valaddr_reg:x3; val_offset:251013*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251013*0 + 3*727*FLEN/8, x4, x1, x2)

inst_83672:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000000fffffff; valaddr_reg:x3; val_offset:251016*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251016*0 + 3*728*FLEN/8, x4, x1, x2)

inst_83673:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000001fffffff; valaddr_reg:x3; val_offset:251019*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251019*0 + 3*729*FLEN/8, x4, x1, x2)

inst_83674:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000003fffffff; valaddr_reg:x3; val_offset:251022*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251022*0 + 3*730*FLEN/8, x4, x1, x2)

inst_83675:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000007fffffff; valaddr_reg:x3; val_offset:251025*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251025*0 + 3*731*FLEN/8, x4, x1, x2)

inst_83676:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800000ffffffff; valaddr_reg:x3; val_offset:251028*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251028*0 + 3*732*FLEN/8, x4, x1, x2)

inst_83677:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800001ffffffff; valaddr_reg:x3; val_offset:251031*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251031*0 + 3*733*FLEN/8, x4, x1, x2)

inst_83678:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800003ffffffff; valaddr_reg:x3; val_offset:251034*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251034*0 + 3*734*FLEN/8, x4, x1, x2)

inst_83679:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800007ffffffff; valaddr_reg:x3; val_offset:251037*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251037*0 + 3*735*FLEN/8, x4, x1, x2)

inst_83680:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280000fffffffff; valaddr_reg:x3; val_offset:251040*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251040*0 + 3*736*FLEN/8, x4, x1, x2)

inst_83681:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280001fffffffff; valaddr_reg:x3; val_offset:251043*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251043*0 + 3*737*FLEN/8, x4, x1, x2)

inst_83682:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280003fffffffff; valaddr_reg:x3; val_offset:251046*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251046*0 + 3*738*FLEN/8, x4, x1, x2)

inst_83683:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280007fffffffff; valaddr_reg:x3; val_offset:251049*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251049*0 + 3*739*FLEN/8, x4, x1, x2)

inst_83684:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828000ffffffffff; valaddr_reg:x3; val_offset:251052*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251052*0 + 3*740*FLEN/8, x4, x1, x2)

inst_83685:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828001ffffffffff; valaddr_reg:x3; val_offset:251055*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251055*0 + 3*741*FLEN/8, x4, x1, x2)

inst_83686:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828003ffffffffff; valaddr_reg:x3; val_offset:251058*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251058*0 + 3*742*FLEN/8, x4, x1, x2)

inst_83687:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828007ffffffffff; valaddr_reg:x3; val_offset:251061*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251061*0 + 3*743*FLEN/8, x4, x1, x2)

inst_83688:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82800fffffffffff; valaddr_reg:x3; val_offset:251064*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251064*0 + 3*744*FLEN/8, x4, x1, x2)

inst_83689:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82801fffffffffff; valaddr_reg:x3; val_offset:251067*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251067*0 + 3*745*FLEN/8, x4, x1, x2)

inst_83690:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82803fffffffffff; valaddr_reg:x3; val_offset:251070*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251070*0 + 3*746*FLEN/8, x4, x1, x2)

inst_83691:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x82807fffffffffff; valaddr_reg:x3; val_offset:251073*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251073*0 + 3*747*FLEN/8, x4, x1, x2)

inst_83692:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8280ffffffffffff; valaddr_reg:x3; val_offset:251076*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251076*0 + 3*748*FLEN/8, x4, x1, x2)

inst_83693:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8281ffffffffffff; valaddr_reg:x3; val_offset:251079*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251079*0 + 3*749*FLEN/8, x4, x1, x2)

inst_83694:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8283ffffffffffff; valaddr_reg:x3; val_offset:251082*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251082*0 + 3*750*FLEN/8, x4, x1, x2)

inst_83695:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8287ffffffffffff; valaddr_reg:x3; val_offset:251085*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251085*0 + 3*751*FLEN/8, x4, x1, x2)

inst_83696:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x8288000000000000; valaddr_reg:x3; val_offset:251088*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251088*0 + 3*752*FLEN/8, x4, x1, x2)

inst_83697:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828c000000000000; valaddr_reg:x3; val_offset:251091*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251091*0 + 3*753*FLEN/8, x4, x1, x2)

inst_83698:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828e000000000000; valaddr_reg:x3; val_offset:251094*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251094*0 + 3*754*FLEN/8, x4, x1, x2)

inst_83699:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828f000000000000; valaddr_reg:x3; val_offset:251097*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251097*0 + 3*755*FLEN/8, x4, x1, x2)

inst_83700:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828f800000000000; valaddr_reg:x3; val_offset:251100*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251100*0 + 3*756*FLEN/8, x4, x1, x2)

inst_83701:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828fc00000000000; valaddr_reg:x3; val_offset:251103*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251103*0 + 3*757*FLEN/8, x4, x1, x2)

inst_83702:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828fe00000000000; valaddr_reg:x3; val_offset:251106*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251106*0 + 3*758*FLEN/8, x4, x1, x2)

inst_83703:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828ff00000000000; valaddr_reg:x3; val_offset:251109*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251109*0 + 3*759*FLEN/8, x4, x1, x2)

inst_83704:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828ff80000000000; valaddr_reg:x3; val_offset:251112*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251112*0 + 3*760*FLEN/8, x4, x1, x2)

inst_83705:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828ffc0000000000; valaddr_reg:x3; val_offset:251115*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251115*0 + 3*761*FLEN/8, x4, x1, x2)

inst_83706:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828ffe0000000000; valaddr_reg:x3; val_offset:251118*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251118*0 + 3*762*FLEN/8, x4, x1, x2)

inst_83707:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828fff0000000000; valaddr_reg:x3; val_offset:251121*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251121*0 + 3*763*FLEN/8, x4, x1, x2)

inst_83708:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828fff8000000000; valaddr_reg:x3; val_offset:251124*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251124*0 + 3*764*FLEN/8, x4, x1, x2)

inst_83709:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828fffc000000000; valaddr_reg:x3; val_offset:251127*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251127*0 + 3*765*FLEN/8, x4, x1, x2)

inst_83710:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828fffe000000000; valaddr_reg:x3; val_offset:251130*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251130*0 + 3*766*FLEN/8, x4, x1, x2)

inst_83711:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b6ffa1ea1f4b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x028 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b6ffa1ea1f4b; op2val:0x8000;
op3val:0x828ffff000000000; valaddr_reg:x3; val_offset:251133*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 251133*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(35888059530608640,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(35958428274786304,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(35993612646875136,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36011204832919552,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36020000925941760,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36024398972452864,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36026597995708416,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36027697507336192,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028247263150080,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028522141057024,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028659580010496,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028728299487232,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028762659225600,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028779839094784,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028788429029376,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028792723996672,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028794871480320,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028795945222144,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028796482093056,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028796750528512,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028796884746240,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028796951855104,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028796985409536,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797002186752,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797010575360,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797014769664,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797016866816,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797017915392,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018439680,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018701824,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018832896,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018898432,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018931200,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018947584,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018955776,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018959872,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018961920,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018962944,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018963456,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018963712,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018963840,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018963904,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018963936,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018963952,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018963960,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018963964,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018963966,64,FLEN)
NAN_BOXED(6893199659600706772,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(36028797018963967,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468272640,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468272641,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468272643,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468272647,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468272655,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468272671,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468272703,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468272767,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468272895,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468273151,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468273663,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468274687,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468276735,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468280831,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468289023,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468305407,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468338175,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468403711,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468534783,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081468796927,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081469321215,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081470369791,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081472466943,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081476661247,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081485049855,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081501827071,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081535381503,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081602490367,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373081736708095,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373082005143551,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373082542014463,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373083615756287,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373085763239935,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373090058207231,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373098648141823,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373115828011007,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373150187749375,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373218907226111,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373356346179583,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101373631224086527,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101374180979900415,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101375280491528191,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101377479514783743,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101381877561294847,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101390673654317055,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101408265840361471,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101443450212450303,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101513818956627967,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101654556444983295,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11101936031421693951,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11102498981375115263,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11103624881281957887,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11103624881281957888,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11104750781188800512,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105313731142221824,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105595206118932480,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105735943607287808,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105806312351465472,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105841496723554304,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105859088909598720,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105867885002620928,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105872283049132032,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105874482072387584,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105875581584015360,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876131339829248,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876406217736192,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876543656689664,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876612376166400,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876646735904768,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876663915773952,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876672505708544,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876676800675840,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876678948159488,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876680021901312,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876680558772224,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876680827207680,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876680961425408,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681028534272,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681062088704,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681078865920,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681087254528,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681091448832,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681093545984,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681094594560,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095118848,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095380992,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095512064,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095577600,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095610368,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095626752,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095634944,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095639040,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095641088,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095642112,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095642624,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095642880,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095643008,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095643072,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095643104,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095643120,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095643128,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095643132,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095643134,64,FLEN)
NAN_BOXED(6893214951830468079,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(11105876681095643135,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959776256,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959776257,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959776259,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959776263,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959776271,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959776287,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959776319,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959776383,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959776511,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959776767,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959777279,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959778303,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959780351,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959784447,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959792639,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959809023,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959841791,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505959907327,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505960038399,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505960300543,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505960824831,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505961873407,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505963970559,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505968164863,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505976553471,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568505993330687,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568506026885119,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568506093993983,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568506228211711,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568506496647167,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568507033518079,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568508107259903,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568510254743551,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568514549710847,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568523139645439,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568540319514623,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568574679252991,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568643398729727,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222568780837683199,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222569055715590143,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222569605471404031,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222570704983031807,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222572904006287359,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222577302052798463,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222586098145820671,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222603690331865087,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222638874703953919,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222709243448131583,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13222849980936486911,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13223131455913197567,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13223694405866618879,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13224820305773461503,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13224820305773461504,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13225946205680304128,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13226509155633725440,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13226790630610436096,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13226931368098791424,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227001736842969088,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227036921215057920,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227054513401102336,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227063309494124544,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227067707540635648,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227069906563891200,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227071006075518976,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227071555831332864,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227071830709239808,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227071968148193280,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072036867670016,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072071227408384,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072088407277568,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072096997212160,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072101292179456,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072103439663104,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072104513404928,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105050275840,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105318711296,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105452929024,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105520037888,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105553592320,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105570369536,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105578758144,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105582952448,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105585049600,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105586098176,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105586622464,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105586884608,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587015680,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587081216,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587113984,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587130368,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587138560,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587142656,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587144704,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587145728,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587146240,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587146496,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587146624,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587146688,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587146720,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587146736,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587146744,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587146748,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587146750,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13227072105587146751,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6893220046196996955,64,FLEN)
NAN_BOXED(11512318390128466103,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5404319552844595,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5790342378047780,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6305039478318694,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6433713753386422,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6605279453476727,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6905519428634760,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7205759403792793,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7720456504063707,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8106479329266892,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8363827879402349,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740928,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740960,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740976,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740984,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740988,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740990,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186944,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186945,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186947,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186951,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186959,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186975,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783187007,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783187071,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783187199,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783187455,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783187967,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783188991,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783191039,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783195135,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783203327,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783219711,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783252479,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783318015,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783449087,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783711231,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394784235519,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394785284095,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394787381247,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394791575551,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394799964159,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394816741375,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394850295807,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394917404671,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050395051622399,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050395320057855,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050395856928767,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050396930670591,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050399078154239,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050403373121535,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050411963056127,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050429142925311,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050463502663679,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050532222140415,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050669661093887,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050944539000831,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63051494294814719,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63052593806442495,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63054792829698047,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63059190876209151,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63067986969231359,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63085579155275775,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63120763527364607,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63191132271542271,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63331869759897599,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63613344736608255,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(64176294690029567,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(65302194596872191,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(65302194596872192,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(66428094503714816,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(66991044457136128,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67272519433846784,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67413256922202112,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67483625666379776,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67518810038468608,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67536402224513024,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67545198317535232,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67549596364046336,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67551795387301888,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67552894898929664,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553444654743552,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553719532650496,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553856971603968,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553925691080704,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553960050819072,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553977230688256,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553985820622848,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553990115590144,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553992263073792,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553993336815616,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553993873686528,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994142121984,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994276339712,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994343448576,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994377003008,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994393780224,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994402168832,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994406363136,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994408460288,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994409508864,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410033152,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410295296,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410426368,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410491904,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410524672,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410541056,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410549248,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410553344,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410555392,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410556416,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410556928,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557184,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557312,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557376,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557408,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557424,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557432,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557436,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557438,64,FLEN)
NAN_BOXED(6893221696846810115,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557439,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903046656,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903046657,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903046659,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903046663,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903046671,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903046687,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903046719,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903046783,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903046911,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903047167,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903047679,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903048703,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903050751,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903054847,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903063039,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903079423,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903112191,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903177727,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903308799,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241903570943,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241904095231,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241905143807,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241907240959,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241911435263,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241919823871,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241936601087,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959241970155519,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959242037264383,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959242171482111,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959242439917567,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959242976788479,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959244050530303,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959246198013951,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959250492981247,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959259082915839,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959276262785023,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959310622523391,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959379342000127,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959516780953599,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327959791658860543,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327960341414674431,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327961440926302207,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327963639949557759,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327968037996068863,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327976834089091071,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4327994426275135487,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4328029610647224319,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4328099979391401983,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4328240716879757311,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4328522191856467967,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4329085141809889279,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4330211041716731903,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4330211041716731904,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4331336941623574528,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4331899891576995840,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332181366553706496,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332322104042061824,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332392472786239488,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332427657158328320,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332445249344372736,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332454045437394944,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332458443483906048,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332460642507161600,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332461742018789376,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462291774603264,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462566652510208,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462704091463680,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462772810940416,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462807170678784,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462824350547968,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462832940482560,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462837235449856,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462839382933504,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462840456675328,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462840993546240,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841261981696,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841396199424,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841463308288,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841496862720,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841513639936,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841522028544,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841526222848,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841528320000,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841529368576,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841529892864,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530155008,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530286080,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530351616,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530384384,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530400768,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530408960,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530413056,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530415104,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530416128,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530416640,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530416896,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530417024,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530417088,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530417120,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530417136,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530417144,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530417148,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530417150,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4332462841530417151,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6893236193908382402,64,FLEN)
NAN_BOXED(2320458999884422254,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966144,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966145,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966147,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966151,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966159,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966175,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966207,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966271,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966399,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966655,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576967167,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576968191,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576970239,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576974335,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576982527,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576998911,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577031679,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577097215,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577228287,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577490431,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621578014719,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621579063295,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621581160447,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621585354751,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621593743359,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621610520575,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621644075007,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621711183871,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621845401599,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019622113837055,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019622650707967,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019623724449791,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019625871933439,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019630166900735,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019638756835327,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019655936704511,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019690296442879,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019759015919615,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019896454873087,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408020171332780031,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408020721088593919,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408021820600221695,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408024019623477247,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408028417669988351,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408037213763010559,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408054805949054975,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408089990321143807,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408160359065321471,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408301096553676799,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408582571530387455,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9409145521483808767,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9410271421390651391,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9410271421390651392,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9411397321297494016,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9411960271250915328,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412241746227625984,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412382483715981312,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412452852460158976,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412488036832247808,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412505629018292224,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412514425111314432,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412518823157825536,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412521022181081088,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412522121692708864,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412522671448522752,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412522946326429696,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523083765383168,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523152484859904,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523186844598272,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523204024467456,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523212614402048,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523216909369344,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523219056852992,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523220130594816,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523220667465728,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523220935901184,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221070118912,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221137227776,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221170782208,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221187559424,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221195948032,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221200142336,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221202239488,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221203288064,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221203812352,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204074496,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204205568,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204271104,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204303872,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204320256,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204328448,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204332544,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204334592,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204335616,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336128,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336384,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336512,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336576,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336608,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336624,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336632,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336636,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336638,64,FLEN)
NAN_BOXED(6893238020527850301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336639,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949595648,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949595649,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949595651,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949595655,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949595663,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949595679,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949595711,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949595775,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949595903,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949596159,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949596671,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949597695,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949599743,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949603839,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949612031,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949628415,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949661183,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949726719,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021949857791,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021950119935,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021950644223,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021951692799,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021953789951,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021957984255,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021966372863,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516021983150079,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516022016704511,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516022083813375,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516022218031103,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516022486466559,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516023023337471,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516024097079295,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516026244562943,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516030539530239,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516039129464831,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516056309334015,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516090669072383,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516159388549119,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516296827502591,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403516571705409535,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403517121461223423,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403518220972851199,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403520419996106751,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403524818042617855,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403533614135640063,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403551206321684479,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403586390693773311,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403656759437950975,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9403797496926306303,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9404078971903016959,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9404641921856438271,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9405767821763280895,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9405767821763280896,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9406893721670123520,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9407456671623544832,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9407738146600255488,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9407878884088610816,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9407949252832788480,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9407984437204877312,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408002029390921728,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408010825483943936,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408015223530455040,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408017422553710592,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408018522065338368,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019071821152256,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019346699059200,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019484138012672,64,FLEN)
NAN_BOXED(6893241913716645707,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019552857489408,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
