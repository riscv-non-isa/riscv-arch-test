
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmsub.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmsub.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fnmsub.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_54528:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffe000000000; valaddr_reg:x3; val_offset:163584*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163584*0 + 3*0*FLEN/8, x4, x1, x2)

inst_54529:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffff000000000; valaddr_reg:x3; val_offset:163587*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163587*0 + 3*1*FLEN/8, x4, x1, x2)

inst_54530:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffff800000000; valaddr_reg:x3; val_offset:163590*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163590*0 + 3*2*FLEN/8, x4, x1, x2)

inst_54531:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffc00000000; valaddr_reg:x3; val_offset:163593*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163593*0 + 3*3*FLEN/8, x4, x1, x2)

inst_54532:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffe00000000; valaddr_reg:x3; val_offset:163596*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163596*0 + 3*4*FLEN/8, x4, x1, x2)

inst_54533:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffff00000000; valaddr_reg:x3; val_offset:163599*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163599*0 + 3*5*FLEN/8, x4, x1, x2)

inst_54534:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffff80000000; valaddr_reg:x3; val_offset:163602*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163602*0 + 3*6*FLEN/8, x4, x1, x2)

inst_54535:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffc0000000; valaddr_reg:x3; val_offset:163605*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163605*0 + 3*7*FLEN/8, x4, x1, x2)

inst_54536:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffe0000000; valaddr_reg:x3; val_offset:163608*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163608*0 + 3*8*FLEN/8, x4, x1, x2)

inst_54537:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffff0000000; valaddr_reg:x3; val_offset:163611*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163611*0 + 3*9*FLEN/8, x4, x1, x2)

inst_54538:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffff8000000; valaddr_reg:x3; val_offset:163614*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163614*0 + 3*10*FLEN/8, x4, x1, x2)

inst_54539:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffc000000; valaddr_reg:x3; val_offset:163617*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163617*0 + 3*11*FLEN/8, x4, x1, x2)

inst_54540:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffe000000; valaddr_reg:x3; val_offset:163620*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163620*0 + 3*12*FLEN/8, x4, x1, x2)

inst_54541:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffff000000; valaddr_reg:x3; val_offset:163623*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163623*0 + 3*13*FLEN/8, x4, x1, x2)

inst_54542:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffff800000; valaddr_reg:x3; val_offset:163626*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163626*0 + 3*14*FLEN/8, x4, x1, x2)

inst_54543:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffc00000; valaddr_reg:x3; val_offset:163629*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163629*0 + 3*15*FLEN/8, x4, x1, x2)

inst_54544:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffe00000; valaddr_reg:x3; val_offset:163632*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163632*0 + 3*16*FLEN/8, x4, x1, x2)

inst_54545:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffff00000; valaddr_reg:x3; val_offset:163635*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163635*0 + 3*17*FLEN/8, x4, x1, x2)

inst_54546:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffff80000; valaddr_reg:x3; val_offset:163638*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163638*0 + 3*18*FLEN/8, x4, x1, x2)

inst_54547:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffffc0000; valaddr_reg:x3; val_offset:163641*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163641*0 + 3*19*FLEN/8, x4, x1, x2)

inst_54548:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffffe0000; valaddr_reg:x3; val_offset:163644*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163644*0 + 3*20*FLEN/8, x4, x1, x2)

inst_54549:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffff0000; valaddr_reg:x3; val_offset:163647*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163647*0 + 3*21*FLEN/8, x4, x1, x2)

inst_54550:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffff8000; valaddr_reg:x3; val_offset:163650*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163650*0 + 3*22*FLEN/8, x4, x1, x2)

inst_54551:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffffc000; valaddr_reg:x3; val_offset:163653*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163653*0 + 3*23*FLEN/8, x4, x1, x2)

inst_54552:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffffe000; valaddr_reg:x3; val_offset:163656*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163656*0 + 3*24*FLEN/8, x4, x1, x2)

inst_54553:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffffff000; valaddr_reg:x3; val_offset:163659*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163659*0 + 3*25*FLEN/8, x4, x1, x2)

inst_54554:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffffff800; valaddr_reg:x3; val_offset:163662*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163662*0 + 3*26*FLEN/8, x4, x1, x2)

inst_54555:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffffffc00; valaddr_reg:x3; val_offset:163665*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163665*0 + 3*27*FLEN/8, x4, x1, x2)

inst_54556:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffffffe00; valaddr_reg:x3; val_offset:163668*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163668*0 + 3*28*FLEN/8, x4, x1, x2)

inst_54557:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffffff00; valaddr_reg:x3; val_offset:163671*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163671*0 + 3*29*FLEN/8, x4, x1, x2)

inst_54558:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffffff80; valaddr_reg:x3; val_offset:163674*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163674*0 + 3*30*FLEN/8, x4, x1, x2)

inst_54559:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffffffc0; valaddr_reg:x3; val_offset:163677*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163677*0 + 3*31*FLEN/8, x4, x1, x2)

inst_54560:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffffffe0; valaddr_reg:x3; val_offset:163680*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163680*0 + 3*32*FLEN/8, x4, x1, x2)

inst_54561:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffffffff0; valaddr_reg:x3; val_offset:163683*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163683*0 + 3*33*FLEN/8, x4, x1, x2)

inst_54562:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffffffff8; valaddr_reg:x3; val_offset:163686*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163686*0 + 3*34*FLEN/8, x4, x1, x2)

inst_54563:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffffffffc; valaddr_reg:x3; val_offset:163689*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163689*0 + 3*35*FLEN/8, x4, x1, x2)

inst_54564:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4ffffffffffffe; valaddr_reg:x3; val_offset:163692*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163692*0 + 3*36*FLEN/8, x4, x1, x2)

inst_54565:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3a4fffffffffffff; valaddr_reg:x3; val_offset:163695*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163695*0 + 3*37*FLEN/8, x4, x1, x2)

inst_54566:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:163698*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163698*0 + 3*38*FLEN/8, x4, x1, x2)

inst_54567:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:163701*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163701*0 + 3*39*FLEN/8, x4, x1, x2)

inst_54568:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:163704*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163704*0 + 3*40*FLEN/8, x4, x1, x2)

inst_54569:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:163707*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163707*0 + 3*41*FLEN/8, x4, x1, x2)

inst_54570:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:163710*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163710*0 + 3*42*FLEN/8, x4, x1, x2)

inst_54571:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:163713*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163713*0 + 3*43*FLEN/8, x4, x1, x2)

inst_54572:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:163716*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163716*0 + 3*44*FLEN/8, x4, x1, x2)

inst_54573:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:163719*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163719*0 + 3*45*FLEN/8, x4, x1, x2)

inst_54574:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:163722*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163722*0 + 3*46*FLEN/8, x4, x1, x2)

inst_54575:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:163725*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163725*0 + 3*47*FLEN/8, x4, x1, x2)

inst_54576:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:163728*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163728*0 + 3*48*FLEN/8, x4, x1, x2)

inst_54577:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:163731*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163731*0 + 3*49*FLEN/8, x4, x1, x2)

inst_54578:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:163734*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163734*0 + 3*50*FLEN/8, x4, x1, x2)

inst_54579:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:163737*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163737*0 + 3*51*FLEN/8, x4, x1, x2)

inst_54580:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:163740*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163740*0 + 3*52*FLEN/8, x4, x1, x2)

inst_54581:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:163743*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163743*0 + 3*53*FLEN/8, x4, x1, x2)

inst_54582:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:163746*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163746*0 + 3*54*FLEN/8, x4, x1, x2)

inst_54583:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:163749*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163749*0 + 3*55*FLEN/8, x4, x1, x2)

inst_54584:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:163752*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163752*0 + 3*56*FLEN/8, x4, x1, x2)

inst_54585:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:163755*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163755*0 + 3*57*FLEN/8, x4, x1, x2)

inst_54586:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:163758*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163758*0 + 3*58*FLEN/8, x4, x1, x2)

inst_54587:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x096b69b2cea22 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xedd4555b1bb2d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa096b69b2cea22; op2val:0x203edd4555b1bb2d;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:163761*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163761*0 + 3*59*FLEN/8, x4, x1, x2)

inst_54588:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:163764*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163764*0 + 3*60*FLEN/8, x4, x1, x2)

inst_54589:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:163767*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163767*0 + 3*61*FLEN/8, x4, x1, x2)

inst_54590:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:163770*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163770*0 + 3*62*FLEN/8, x4, x1, x2)

inst_54591:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:163773*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163773*0 + 3*63*FLEN/8, x4, x1, x2)

inst_54592:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:163776*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163776*0 + 3*64*FLEN/8, x4, x1, x2)

inst_54593:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:163779*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163779*0 + 3*65*FLEN/8, x4, x1, x2)

inst_54594:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:163782*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163782*0 + 3*66*FLEN/8, x4, x1, x2)

inst_54595:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:163785*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163785*0 + 3*67*FLEN/8, x4, x1, x2)

inst_54596:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:163788*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163788*0 + 3*68*FLEN/8, x4, x1, x2)

inst_54597:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:163791*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163791*0 + 3*69*FLEN/8, x4, x1, x2)

inst_54598:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:163794*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163794*0 + 3*70*FLEN/8, x4, x1, x2)

inst_54599:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:163797*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163797*0 + 3*71*FLEN/8, x4, x1, x2)

inst_54600:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:163800*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163800*0 + 3*72*FLEN/8, x4, x1, x2)

inst_54601:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:163803*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163803*0 + 3*73*FLEN/8, x4, x1, x2)

inst_54602:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:163806*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163806*0 + 3*74*FLEN/8, x4, x1, x2)

inst_54603:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:163809*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163809*0 + 3*75*FLEN/8, x4, x1, x2)

inst_54604:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:163812*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163812*0 + 3*76*FLEN/8, x4, x1, x2)

inst_54605:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:163815*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163815*0 + 3*77*FLEN/8, x4, x1, x2)

inst_54606:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:163818*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163818*0 + 3*78*FLEN/8, x4, x1, x2)

inst_54607:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:163821*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163821*0 + 3*79*FLEN/8, x4, x1, x2)

inst_54608:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:163824*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163824*0 + 3*80*FLEN/8, x4, x1, x2)

inst_54609:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:163827*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163827*0 + 3*81*FLEN/8, x4, x1, x2)

inst_54610:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000000000000; valaddr_reg:x3; val_offset:163830*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163830*0 + 3*82*FLEN/8, x4, x1, x2)

inst_54611:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000000000001; valaddr_reg:x3; val_offset:163833*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163833*0 + 3*83*FLEN/8, x4, x1, x2)

inst_54612:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000000000003; valaddr_reg:x3; val_offset:163836*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163836*0 + 3*84*FLEN/8, x4, x1, x2)

inst_54613:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000000000007; valaddr_reg:x3; val_offset:163839*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163839*0 + 3*85*FLEN/8, x4, x1, x2)

inst_54614:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000000000000f; valaddr_reg:x3; val_offset:163842*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163842*0 + 3*86*FLEN/8, x4, x1, x2)

inst_54615:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000000000001f; valaddr_reg:x3; val_offset:163845*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163845*0 + 3*87*FLEN/8, x4, x1, x2)

inst_54616:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000000000003f; valaddr_reg:x3; val_offset:163848*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163848*0 + 3*88*FLEN/8, x4, x1, x2)

inst_54617:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000000000007f; valaddr_reg:x3; val_offset:163851*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163851*0 + 3*89*FLEN/8, x4, x1, x2)

inst_54618:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00000000000ff; valaddr_reg:x3; val_offset:163854*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163854*0 + 3*90*FLEN/8, x4, x1, x2)

inst_54619:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00000000001ff; valaddr_reg:x3; val_offset:163857*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163857*0 + 3*91*FLEN/8, x4, x1, x2)

inst_54620:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00000000003ff; valaddr_reg:x3; val_offset:163860*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163860*0 + 3*92*FLEN/8, x4, x1, x2)

inst_54621:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00000000007ff; valaddr_reg:x3; val_offset:163863*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163863*0 + 3*93*FLEN/8, x4, x1, x2)

inst_54622:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000000000fff; valaddr_reg:x3; val_offset:163866*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163866*0 + 3*94*FLEN/8, x4, x1, x2)

inst_54623:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000000001fff; valaddr_reg:x3; val_offset:163869*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163869*0 + 3*95*FLEN/8, x4, x1, x2)

inst_54624:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000000003fff; valaddr_reg:x3; val_offset:163872*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163872*0 + 3*96*FLEN/8, x4, x1, x2)

inst_54625:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000000007fff; valaddr_reg:x3; val_offset:163875*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163875*0 + 3*97*FLEN/8, x4, x1, x2)

inst_54626:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000000000ffff; valaddr_reg:x3; val_offset:163878*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163878*0 + 3*98*FLEN/8, x4, x1, x2)

inst_54627:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000000001ffff; valaddr_reg:x3; val_offset:163881*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163881*0 + 3*99*FLEN/8, x4, x1, x2)

inst_54628:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000000003ffff; valaddr_reg:x3; val_offset:163884*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163884*0 + 3*100*FLEN/8, x4, x1, x2)

inst_54629:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000000007ffff; valaddr_reg:x3; val_offset:163887*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163887*0 + 3*101*FLEN/8, x4, x1, x2)

inst_54630:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00000000fffff; valaddr_reg:x3; val_offset:163890*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163890*0 + 3*102*FLEN/8, x4, x1, x2)

inst_54631:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00000001fffff; valaddr_reg:x3; val_offset:163893*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163893*0 + 3*103*FLEN/8, x4, x1, x2)

inst_54632:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00000003fffff; valaddr_reg:x3; val_offset:163896*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163896*0 + 3*104*FLEN/8, x4, x1, x2)

inst_54633:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00000007fffff; valaddr_reg:x3; val_offset:163899*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163899*0 + 3*105*FLEN/8, x4, x1, x2)

inst_54634:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000000ffffff; valaddr_reg:x3; val_offset:163902*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163902*0 + 3*106*FLEN/8, x4, x1, x2)

inst_54635:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000001ffffff; valaddr_reg:x3; val_offset:163905*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163905*0 + 3*107*FLEN/8, x4, x1, x2)

inst_54636:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000003ffffff; valaddr_reg:x3; val_offset:163908*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163908*0 + 3*108*FLEN/8, x4, x1, x2)

inst_54637:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000007ffffff; valaddr_reg:x3; val_offset:163911*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163911*0 + 3*109*FLEN/8, x4, x1, x2)

inst_54638:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000000fffffff; valaddr_reg:x3; val_offset:163914*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163914*0 + 3*110*FLEN/8, x4, x1, x2)

inst_54639:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000001fffffff; valaddr_reg:x3; val_offset:163917*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163917*0 + 3*111*FLEN/8, x4, x1, x2)

inst_54640:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000003fffffff; valaddr_reg:x3; val_offset:163920*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163920*0 + 3*112*FLEN/8, x4, x1, x2)

inst_54641:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000007fffffff; valaddr_reg:x3; val_offset:163923*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163923*0 + 3*113*FLEN/8, x4, x1, x2)

inst_54642:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00000ffffffff; valaddr_reg:x3; val_offset:163926*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163926*0 + 3*114*FLEN/8, x4, x1, x2)

inst_54643:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00001ffffffff; valaddr_reg:x3; val_offset:163929*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163929*0 + 3*115*FLEN/8, x4, x1, x2)

inst_54644:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00003ffffffff; valaddr_reg:x3; val_offset:163932*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163932*0 + 3*116*FLEN/8, x4, x1, x2)

inst_54645:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00007ffffffff; valaddr_reg:x3; val_offset:163935*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163935*0 + 3*117*FLEN/8, x4, x1, x2)

inst_54646:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0000fffffffff; valaddr_reg:x3; val_offset:163938*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163938*0 + 3*118*FLEN/8, x4, x1, x2)

inst_54647:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0001fffffffff; valaddr_reg:x3; val_offset:163941*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163941*0 + 3*119*FLEN/8, x4, x1, x2)

inst_54648:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0003fffffffff; valaddr_reg:x3; val_offset:163944*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163944*0 + 3*120*FLEN/8, x4, x1, x2)

inst_54649:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0007fffffffff; valaddr_reg:x3; val_offset:163947*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163947*0 + 3*121*FLEN/8, x4, x1, x2)

inst_54650:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d000ffffffffff; valaddr_reg:x3; val_offset:163950*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163950*0 + 3*122*FLEN/8, x4, x1, x2)

inst_54651:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d001ffffffffff; valaddr_reg:x3; val_offset:163953*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163953*0 + 3*123*FLEN/8, x4, x1, x2)

inst_54652:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d003ffffffffff; valaddr_reg:x3; val_offset:163956*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163956*0 + 3*124*FLEN/8, x4, x1, x2)

inst_54653:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d007ffffffffff; valaddr_reg:x3; val_offset:163959*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163959*0 + 3*125*FLEN/8, x4, x1, x2)

inst_54654:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d00fffffffffff; valaddr_reg:x3; val_offset:163962*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163962*0 + 3*126*FLEN/8, x4, x1, x2)

inst_54655:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d01fffffffffff; valaddr_reg:x3; val_offset:163965*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163965*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_54656:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d03fffffffffff; valaddr_reg:x3; val_offset:163968*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163968*0 + 3*128*FLEN/8, x4, x1, x2)

inst_54657:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d07fffffffffff; valaddr_reg:x3; val_offset:163971*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163971*0 + 3*129*FLEN/8, x4, x1, x2)

inst_54658:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d0ffffffffffff; valaddr_reg:x3; val_offset:163974*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163974*0 + 3*130*FLEN/8, x4, x1, x2)

inst_54659:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d1ffffffffffff; valaddr_reg:x3; val_offset:163977*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163977*0 + 3*131*FLEN/8, x4, x1, x2)

inst_54660:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d3ffffffffffff; valaddr_reg:x3; val_offset:163980*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163980*0 + 3*132*FLEN/8, x4, x1, x2)

inst_54661:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d7ffffffffffff; valaddr_reg:x3; val_offset:163983*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163983*0 + 3*133*FLEN/8, x4, x1, x2)

inst_54662:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80d8000000000000; valaddr_reg:x3; val_offset:163986*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163986*0 + 3*134*FLEN/8, x4, x1, x2)

inst_54663:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dc000000000000; valaddr_reg:x3; val_offset:163989*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163989*0 + 3*135*FLEN/8, x4, x1, x2)

inst_54664:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80de000000000000; valaddr_reg:x3; val_offset:163992*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163992*0 + 3*136*FLEN/8, x4, x1, x2)

inst_54665:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80df000000000000; valaddr_reg:x3; val_offset:163995*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163995*0 + 3*137*FLEN/8, x4, x1, x2)

inst_54666:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80df800000000000; valaddr_reg:x3; val_offset:163998*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 163998*0 + 3*138*FLEN/8, x4, x1, x2)

inst_54667:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfc00000000000; valaddr_reg:x3; val_offset:164001*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164001*0 + 3*139*FLEN/8, x4, x1, x2)

inst_54668:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfe00000000000; valaddr_reg:x3; val_offset:164004*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164004*0 + 3*140*FLEN/8, x4, x1, x2)

inst_54669:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dff00000000000; valaddr_reg:x3; val_offset:164007*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164007*0 + 3*141*FLEN/8, x4, x1, x2)

inst_54670:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dff80000000000; valaddr_reg:x3; val_offset:164010*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164010*0 + 3*142*FLEN/8, x4, x1, x2)

inst_54671:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffc0000000000; valaddr_reg:x3; val_offset:164013*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164013*0 + 3*143*FLEN/8, x4, x1, x2)

inst_54672:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffe0000000000; valaddr_reg:x3; val_offset:164016*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164016*0 + 3*144*FLEN/8, x4, x1, x2)

inst_54673:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfff0000000000; valaddr_reg:x3; val_offset:164019*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164019*0 + 3*145*FLEN/8, x4, x1, x2)

inst_54674:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfff8000000000; valaddr_reg:x3; val_offset:164022*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164022*0 + 3*146*FLEN/8, x4, x1, x2)

inst_54675:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffc000000000; valaddr_reg:x3; val_offset:164025*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164025*0 + 3*147*FLEN/8, x4, x1, x2)

inst_54676:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffe000000000; valaddr_reg:x3; val_offset:164028*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164028*0 + 3*148*FLEN/8, x4, x1, x2)

inst_54677:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffff000000000; valaddr_reg:x3; val_offset:164031*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164031*0 + 3*149*FLEN/8, x4, x1, x2)

inst_54678:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffff800000000; valaddr_reg:x3; val_offset:164034*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164034*0 + 3*150*FLEN/8, x4, x1, x2)

inst_54679:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffc00000000; valaddr_reg:x3; val_offset:164037*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164037*0 + 3*151*FLEN/8, x4, x1, x2)

inst_54680:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffe00000000; valaddr_reg:x3; val_offset:164040*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164040*0 + 3*152*FLEN/8, x4, x1, x2)

inst_54681:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffff00000000; valaddr_reg:x3; val_offset:164043*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164043*0 + 3*153*FLEN/8, x4, x1, x2)

inst_54682:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffff80000000; valaddr_reg:x3; val_offset:164046*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164046*0 + 3*154*FLEN/8, x4, x1, x2)

inst_54683:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffc0000000; valaddr_reg:x3; val_offset:164049*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164049*0 + 3*155*FLEN/8, x4, x1, x2)

inst_54684:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffe0000000; valaddr_reg:x3; val_offset:164052*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164052*0 + 3*156*FLEN/8, x4, x1, x2)

inst_54685:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffff0000000; valaddr_reg:x3; val_offset:164055*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164055*0 + 3*157*FLEN/8, x4, x1, x2)

inst_54686:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffff8000000; valaddr_reg:x3; val_offset:164058*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164058*0 + 3*158*FLEN/8, x4, x1, x2)

inst_54687:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffc000000; valaddr_reg:x3; val_offset:164061*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164061*0 + 3*159*FLEN/8, x4, x1, x2)

inst_54688:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffe000000; valaddr_reg:x3; val_offset:164064*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164064*0 + 3*160*FLEN/8, x4, x1, x2)

inst_54689:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffff000000; valaddr_reg:x3; val_offset:164067*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164067*0 + 3*161*FLEN/8, x4, x1, x2)

inst_54690:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffff800000; valaddr_reg:x3; val_offset:164070*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164070*0 + 3*162*FLEN/8, x4, x1, x2)

inst_54691:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffc00000; valaddr_reg:x3; val_offset:164073*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164073*0 + 3*163*FLEN/8, x4, x1, x2)

inst_54692:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffe00000; valaddr_reg:x3; val_offset:164076*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164076*0 + 3*164*FLEN/8, x4, x1, x2)

inst_54693:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffff00000; valaddr_reg:x3; val_offset:164079*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164079*0 + 3*165*FLEN/8, x4, x1, x2)

inst_54694:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffff80000; valaddr_reg:x3; val_offset:164082*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164082*0 + 3*166*FLEN/8, x4, x1, x2)

inst_54695:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffffc0000; valaddr_reg:x3; val_offset:164085*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164085*0 + 3*167*FLEN/8, x4, x1, x2)

inst_54696:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffffe0000; valaddr_reg:x3; val_offset:164088*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164088*0 + 3*168*FLEN/8, x4, x1, x2)

inst_54697:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffff0000; valaddr_reg:x3; val_offset:164091*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164091*0 + 3*169*FLEN/8, x4, x1, x2)

inst_54698:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffff8000; valaddr_reg:x3; val_offset:164094*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164094*0 + 3*170*FLEN/8, x4, x1, x2)

inst_54699:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffffc000; valaddr_reg:x3; val_offset:164097*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164097*0 + 3*171*FLEN/8, x4, x1, x2)

inst_54700:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffffe000; valaddr_reg:x3; val_offset:164100*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164100*0 + 3*172*FLEN/8, x4, x1, x2)

inst_54701:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffffff000; valaddr_reg:x3; val_offset:164103*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164103*0 + 3*173*FLEN/8, x4, x1, x2)

inst_54702:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffffff800; valaddr_reg:x3; val_offset:164106*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164106*0 + 3*174*FLEN/8, x4, x1, x2)

inst_54703:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffffffc00; valaddr_reg:x3; val_offset:164109*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164109*0 + 3*175*FLEN/8, x4, x1, x2)

inst_54704:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffffffe00; valaddr_reg:x3; val_offset:164112*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164112*0 + 3*176*FLEN/8, x4, x1, x2)

inst_54705:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffffff00; valaddr_reg:x3; val_offset:164115*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164115*0 + 3*177*FLEN/8, x4, x1, x2)

inst_54706:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffffff80; valaddr_reg:x3; val_offset:164118*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164118*0 + 3*178*FLEN/8, x4, x1, x2)

inst_54707:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffffffc0; valaddr_reg:x3; val_offset:164121*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164121*0 + 3*179*FLEN/8, x4, x1, x2)

inst_54708:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffffffe0; valaddr_reg:x3; val_offset:164124*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164124*0 + 3*180*FLEN/8, x4, x1, x2)

inst_54709:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffffffff0; valaddr_reg:x3; val_offset:164127*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164127*0 + 3*181*FLEN/8, x4, x1, x2)

inst_54710:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffffffff8; valaddr_reg:x3; val_offset:164130*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164130*0 + 3*182*FLEN/8, x4, x1, x2)

inst_54711:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffffffffc; valaddr_reg:x3; val_offset:164133*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164133*0 + 3*183*FLEN/8, x4, x1, x2)

inst_54712:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dffffffffffffe; valaddr_reg:x3; val_offset:164136*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164136*0 + 3*184*FLEN/8, x4, x1, x2)

inst_54713:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x099221cdb4e99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa099221cdb4e99; op2val:0x8000;
op3val:0x80dfffffffffffff; valaddr_reg:x3; val_offset:164139*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164139*0 + 3*185*FLEN/8, x4, x1, x2)

inst_54714:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000000000000; valaddr_reg:x3; val_offset:164142*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164142*0 + 3*186*FLEN/8, x4, x1, x2)

inst_54715:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000000000001; valaddr_reg:x3; val_offset:164145*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164145*0 + 3*187*FLEN/8, x4, x1, x2)

inst_54716:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000000000003; valaddr_reg:x3; val_offset:164148*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164148*0 + 3*188*FLEN/8, x4, x1, x2)

inst_54717:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000000000007; valaddr_reg:x3; val_offset:164151*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164151*0 + 3*189*FLEN/8, x4, x1, x2)

inst_54718:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000000000000f; valaddr_reg:x3; val_offset:164154*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164154*0 + 3*190*FLEN/8, x4, x1, x2)

inst_54719:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000000000001f; valaddr_reg:x3; val_offset:164157*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164157*0 + 3*191*FLEN/8, x4, x1, x2)

inst_54720:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000000000003f; valaddr_reg:x3; val_offset:164160*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164160*0 + 3*192*FLEN/8, x4, x1, x2)

inst_54721:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000000000007f; valaddr_reg:x3; val_offset:164163*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164163*0 + 3*193*FLEN/8, x4, x1, x2)

inst_54722:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400000000000ff; valaddr_reg:x3; val_offset:164166*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164166*0 + 3*194*FLEN/8, x4, x1, x2)

inst_54723:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400000000001ff; valaddr_reg:x3; val_offset:164169*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164169*0 + 3*195*FLEN/8, x4, x1, x2)

inst_54724:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400000000003ff; valaddr_reg:x3; val_offset:164172*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164172*0 + 3*196*FLEN/8, x4, x1, x2)

inst_54725:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400000000007ff; valaddr_reg:x3; val_offset:164175*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164175*0 + 3*197*FLEN/8, x4, x1, x2)

inst_54726:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000000000fff; valaddr_reg:x3; val_offset:164178*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164178*0 + 3*198*FLEN/8, x4, x1, x2)

inst_54727:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000000001fff; valaddr_reg:x3; val_offset:164181*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164181*0 + 3*199*FLEN/8, x4, x1, x2)

inst_54728:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000000003fff; valaddr_reg:x3; val_offset:164184*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164184*0 + 3*200*FLEN/8, x4, x1, x2)

inst_54729:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000000007fff; valaddr_reg:x3; val_offset:164187*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164187*0 + 3*201*FLEN/8, x4, x1, x2)

inst_54730:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000000000ffff; valaddr_reg:x3; val_offset:164190*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164190*0 + 3*202*FLEN/8, x4, x1, x2)

inst_54731:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000000001ffff; valaddr_reg:x3; val_offset:164193*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164193*0 + 3*203*FLEN/8, x4, x1, x2)

inst_54732:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000000003ffff; valaddr_reg:x3; val_offset:164196*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164196*0 + 3*204*FLEN/8, x4, x1, x2)

inst_54733:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000000007ffff; valaddr_reg:x3; val_offset:164199*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164199*0 + 3*205*FLEN/8, x4, x1, x2)

inst_54734:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400000000fffff; valaddr_reg:x3; val_offset:164202*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164202*0 + 3*206*FLEN/8, x4, x1, x2)

inst_54735:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400000001fffff; valaddr_reg:x3; val_offset:164205*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164205*0 + 3*207*FLEN/8, x4, x1, x2)

inst_54736:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400000003fffff; valaddr_reg:x3; val_offset:164208*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164208*0 + 3*208*FLEN/8, x4, x1, x2)

inst_54737:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400000007fffff; valaddr_reg:x3; val_offset:164211*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164211*0 + 3*209*FLEN/8, x4, x1, x2)

inst_54738:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000000ffffff; valaddr_reg:x3; val_offset:164214*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164214*0 + 3*210*FLEN/8, x4, x1, x2)

inst_54739:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000001ffffff; valaddr_reg:x3; val_offset:164217*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164217*0 + 3*211*FLEN/8, x4, x1, x2)

inst_54740:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000003ffffff; valaddr_reg:x3; val_offset:164220*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164220*0 + 3*212*FLEN/8, x4, x1, x2)

inst_54741:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000007ffffff; valaddr_reg:x3; val_offset:164223*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164223*0 + 3*213*FLEN/8, x4, x1, x2)

inst_54742:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000000fffffff; valaddr_reg:x3; val_offset:164226*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164226*0 + 3*214*FLEN/8, x4, x1, x2)

inst_54743:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000001fffffff; valaddr_reg:x3; val_offset:164229*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164229*0 + 3*215*FLEN/8, x4, x1, x2)

inst_54744:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000003fffffff; valaddr_reg:x3; val_offset:164232*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164232*0 + 3*216*FLEN/8, x4, x1, x2)

inst_54745:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000007fffffff; valaddr_reg:x3; val_offset:164235*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164235*0 + 3*217*FLEN/8, x4, x1, x2)

inst_54746:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400000ffffffff; valaddr_reg:x3; val_offset:164238*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164238*0 + 3*218*FLEN/8, x4, x1, x2)

inst_54747:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400001ffffffff; valaddr_reg:x3; val_offset:164241*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164241*0 + 3*219*FLEN/8, x4, x1, x2)

inst_54748:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400003ffffffff; valaddr_reg:x3; val_offset:164244*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164244*0 + 3*220*FLEN/8, x4, x1, x2)

inst_54749:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400007ffffffff; valaddr_reg:x3; val_offset:164247*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164247*0 + 3*221*FLEN/8, x4, x1, x2)

inst_54750:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40000fffffffff; valaddr_reg:x3; val_offset:164250*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164250*0 + 3*222*FLEN/8, x4, x1, x2)

inst_54751:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40001fffffffff; valaddr_reg:x3; val_offset:164253*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164253*0 + 3*223*FLEN/8, x4, x1, x2)

inst_54752:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40003fffffffff; valaddr_reg:x3; val_offset:164256*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164256*0 + 3*224*FLEN/8, x4, x1, x2)

inst_54753:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40007fffffffff; valaddr_reg:x3; val_offset:164259*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164259*0 + 3*225*FLEN/8, x4, x1, x2)

inst_54754:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4000ffffffffff; valaddr_reg:x3; val_offset:164262*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164262*0 + 3*226*FLEN/8, x4, x1, x2)

inst_54755:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4001ffffffffff; valaddr_reg:x3; val_offset:164265*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164265*0 + 3*227*FLEN/8, x4, x1, x2)

inst_54756:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4003ffffffffff; valaddr_reg:x3; val_offset:164268*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164268*0 + 3*228*FLEN/8, x4, x1, x2)

inst_54757:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4007ffffffffff; valaddr_reg:x3; val_offset:164271*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164271*0 + 3*229*FLEN/8, x4, x1, x2)

inst_54758:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e400fffffffffff; valaddr_reg:x3; val_offset:164274*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164274*0 + 3*230*FLEN/8, x4, x1, x2)

inst_54759:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e401fffffffffff; valaddr_reg:x3; val_offset:164277*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164277*0 + 3*231*FLEN/8, x4, x1, x2)

inst_54760:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e403fffffffffff; valaddr_reg:x3; val_offset:164280*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164280*0 + 3*232*FLEN/8, x4, x1, x2)

inst_54761:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e407fffffffffff; valaddr_reg:x3; val_offset:164283*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164283*0 + 3*233*FLEN/8, x4, x1, x2)

inst_54762:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e40ffffffffffff; valaddr_reg:x3; val_offset:164286*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164286*0 + 3*234*FLEN/8, x4, x1, x2)

inst_54763:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e41ffffffffffff; valaddr_reg:x3; val_offset:164289*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164289*0 + 3*235*FLEN/8, x4, x1, x2)

inst_54764:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e43ffffffffffff; valaddr_reg:x3; val_offset:164292*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164292*0 + 3*236*FLEN/8, x4, x1, x2)

inst_54765:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e47ffffffffffff; valaddr_reg:x3; val_offset:164295*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164295*0 + 3*237*FLEN/8, x4, x1, x2)

inst_54766:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e48000000000000; valaddr_reg:x3; val_offset:164298*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164298*0 + 3*238*FLEN/8, x4, x1, x2)

inst_54767:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4c000000000000; valaddr_reg:x3; val_offset:164301*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164301*0 + 3*239*FLEN/8, x4, x1, x2)

inst_54768:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4e000000000000; valaddr_reg:x3; val_offset:164304*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164304*0 + 3*240*FLEN/8, x4, x1, x2)

inst_54769:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4f000000000000; valaddr_reg:x3; val_offset:164307*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164307*0 + 3*241*FLEN/8, x4, x1, x2)

inst_54770:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4f800000000000; valaddr_reg:x3; val_offset:164310*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164310*0 + 3*242*FLEN/8, x4, x1, x2)

inst_54771:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fc00000000000; valaddr_reg:x3; val_offset:164313*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164313*0 + 3*243*FLEN/8, x4, x1, x2)

inst_54772:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fe00000000000; valaddr_reg:x3; val_offset:164316*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164316*0 + 3*244*FLEN/8, x4, x1, x2)

inst_54773:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ff00000000000; valaddr_reg:x3; val_offset:164319*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164319*0 + 3*245*FLEN/8, x4, x1, x2)

inst_54774:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ff80000000000; valaddr_reg:x3; val_offset:164322*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164322*0 + 3*246*FLEN/8, x4, x1, x2)

inst_54775:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffc0000000000; valaddr_reg:x3; val_offset:164325*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164325*0 + 3*247*FLEN/8, x4, x1, x2)

inst_54776:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffe0000000000; valaddr_reg:x3; val_offset:164328*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164328*0 + 3*248*FLEN/8, x4, x1, x2)

inst_54777:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fff0000000000; valaddr_reg:x3; val_offset:164331*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164331*0 + 3*249*FLEN/8, x4, x1, x2)

inst_54778:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fff8000000000; valaddr_reg:x3; val_offset:164334*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164334*0 + 3*250*FLEN/8, x4, x1, x2)

inst_54779:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffc000000000; valaddr_reg:x3; val_offset:164337*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164337*0 + 3*251*FLEN/8, x4, x1, x2)

inst_54780:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffe000000000; valaddr_reg:x3; val_offset:164340*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164340*0 + 3*252*FLEN/8, x4, x1, x2)

inst_54781:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffff000000000; valaddr_reg:x3; val_offset:164343*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164343*0 + 3*253*FLEN/8, x4, x1, x2)

inst_54782:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffff800000000; valaddr_reg:x3; val_offset:164346*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164346*0 + 3*254*FLEN/8, x4, x1, x2)

inst_54783:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffc00000000; valaddr_reg:x3; val_offset:164349*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164349*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_54784:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffe00000000; valaddr_reg:x3; val_offset:164352*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164352*0 + 3*256*FLEN/8, x4, x1, x2)

inst_54785:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffff00000000; valaddr_reg:x3; val_offset:164355*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164355*0 + 3*257*FLEN/8, x4, x1, x2)

inst_54786:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffff80000000; valaddr_reg:x3; val_offset:164358*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164358*0 + 3*258*FLEN/8, x4, x1, x2)

inst_54787:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffc0000000; valaddr_reg:x3; val_offset:164361*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164361*0 + 3*259*FLEN/8, x4, x1, x2)

inst_54788:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffe0000000; valaddr_reg:x3; val_offset:164364*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164364*0 + 3*260*FLEN/8, x4, x1, x2)

inst_54789:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffff0000000; valaddr_reg:x3; val_offset:164367*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164367*0 + 3*261*FLEN/8, x4, x1, x2)

inst_54790:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffff8000000; valaddr_reg:x3; val_offset:164370*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164370*0 + 3*262*FLEN/8, x4, x1, x2)

inst_54791:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffc000000; valaddr_reg:x3; val_offset:164373*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164373*0 + 3*263*FLEN/8, x4, x1, x2)

inst_54792:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffe000000; valaddr_reg:x3; val_offset:164376*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164376*0 + 3*264*FLEN/8, x4, x1, x2)

inst_54793:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffff000000; valaddr_reg:x3; val_offset:164379*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164379*0 + 3*265*FLEN/8, x4, x1, x2)

inst_54794:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffff800000; valaddr_reg:x3; val_offset:164382*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164382*0 + 3*266*FLEN/8, x4, x1, x2)

inst_54795:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffc00000; valaddr_reg:x3; val_offset:164385*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164385*0 + 3*267*FLEN/8, x4, x1, x2)

inst_54796:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffe00000; valaddr_reg:x3; val_offset:164388*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164388*0 + 3*268*FLEN/8, x4, x1, x2)

inst_54797:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffff00000; valaddr_reg:x3; val_offset:164391*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164391*0 + 3*269*FLEN/8, x4, x1, x2)

inst_54798:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffff80000; valaddr_reg:x3; val_offset:164394*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164394*0 + 3*270*FLEN/8, x4, x1, x2)

inst_54799:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffffc0000; valaddr_reg:x3; val_offset:164397*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164397*0 + 3*271*FLEN/8, x4, x1, x2)

inst_54800:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffffe0000; valaddr_reg:x3; val_offset:164400*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164400*0 + 3*272*FLEN/8, x4, x1, x2)

inst_54801:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffff0000; valaddr_reg:x3; val_offset:164403*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164403*0 + 3*273*FLEN/8, x4, x1, x2)

inst_54802:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffff8000; valaddr_reg:x3; val_offset:164406*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164406*0 + 3*274*FLEN/8, x4, x1, x2)

inst_54803:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffffc000; valaddr_reg:x3; val_offset:164409*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164409*0 + 3*275*FLEN/8, x4, x1, x2)

inst_54804:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffffe000; valaddr_reg:x3; val_offset:164412*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164412*0 + 3*276*FLEN/8, x4, x1, x2)

inst_54805:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffffff000; valaddr_reg:x3; val_offset:164415*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164415*0 + 3*277*FLEN/8, x4, x1, x2)

inst_54806:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffffff800; valaddr_reg:x3; val_offset:164418*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164418*0 + 3*278*FLEN/8, x4, x1, x2)

inst_54807:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffffffc00; valaddr_reg:x3; val_offset:164421*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164421*0 + 3*279*FLEN/8, x4, x1, x2)

inst_54808:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffffffe00; valaddr_reg:x3; val_offset:164424*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164424*0 + 3*280*FLEN/8, x4, x1, x2)

inst_54809:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffffff00; valaddr_reg:x3; val_offset:164427*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164427*0 + 3*281*FLEN/8, x4, x1, x2)

inst_54810:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffffff80; valaddr_reg:x3; val_offset:164430*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164430*0 + 3*282*FLEN/8, x4, x1, x2)

inst_54811:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffffffc0; valaddr_reg:x3; val_offset:164433*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164433*0 + 3*283*FLEN/8, x4, x1, x2)

inst_54812:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffffffe0; valaddr_reg:x3; val_offset:164436*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164436*0 + 3*284*FLEN/8, x4, x1, x2)

inst_54813:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffffffff0; valaddr_reg:x3; val_offset:164439*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164439*0 + 3*285*FLEN/8, x4, x1, x2)

inst_54814:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffffffff8; valaddr_reg:x3; val_offset:164442*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164442*0 + 3*286*FLEN/8, x4, x1, x2)

inst_54815:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffffffffc; valaddr_reg:x3; val_offset:164445*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164445*0 + 3*287*FLEN/8, x4, x1, x2)

inst_54816:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4ffffffffffffe; valaddr_reg:x3; val_offset:164448*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164448*0 + 3*288*FLEN/8, x4, x1, x2)

inst_54817:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3e4fffffffffffff; valaddr_reg:x3; val_offset:164451*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164451*0 + 3*289*FLEN/8, x4, x1, x2)

inst_54818:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:164454*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164454*0 + 3*290*FLEN/8, x4, x1, x2)

inst_54819:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:164457*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164457*0 + 3*291*FLEN/8, x4, x1, x2)

inst_54820:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:164460*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164460*0 + 3*292*FLEN/8, x4, x1, x2)

inst_54821:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:164463*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164463*0 + 3*293*FLEN/8, x4, x1, x2)

inst_54822:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:164466*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164466*0 + 3*294*FLEN/8, x4, x1, x2)

inst_54823:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:164469*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164469*0 + 3*295*FLEN/8, x4, x1, x2)

inst_54824:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:164472*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164472*0 + 3*296*FLEN/8, x4, x1, x2)

inst_54825:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:164475*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164475*0 + 3*297*FLEN/8, x4, x1, x2)

inst_54826:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:164478*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164478*0 + 3*298*FLEN/8, x4, x1, x2)

inst_54827:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:164481*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164481*0 + 3*299*FLEN/8, x4, x1, x2)

inst_54828:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:164484*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164484*0 + 3*300*FLEN/8, x4, x1, x2)

inst_54829:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:164487*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164487*0 + 3*301*FLEN/8, x4, x1, x2)

inst_54830:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:164490*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164490*0 + 3*302*FLEN/8, x4, x1, x2)

inst_54831:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:164493*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164493*0 + 3*303*FLEN/8, x4, x1, x2)

inst_54832:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:164496*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164496*0 + 3*304*FLEN/8, x4, x1, x2)

inst_54833:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:164499*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164499*0 + 3*305*FLEN/8, x4, x1, x2)

inst_54834:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:164502*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164502*0 + 3*306*FLEN/8, x4, x1, x2)

inst_54835:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:164505*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164505*0 + 3*307*FLEN/8, x4, x1, x2)

inst_54836:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:164508*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164508*0 + 3*308*FLEN/8, x4, x1, x2)

inst_54837:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:164511*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164511*0 + 3*309*FLEN/8, x4, x1, x2)

inst_54838:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:164514*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164514*0 + 3*310*FLEN/8, x4, x1, x2)

inst_54839:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a12739b122b7 and fs2 == 0 and fe2 == 0x203 and fm2 == 0xec9e4f4fca0db and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a12739b122b7; op2val:0x203ec9e4f4fca0db;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:164517*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164517*0 + 3*311*FLEN/8, x4, x1, x2)

inst_54840:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:164520*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164520*0 + 3*312*FLEN/8, x4, x1, x2)

inst_54841:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:164523*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164523*0 + 3*313*FLEN/8, x4, x1, x2)

inst_54842:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:164526*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164526*0 + 3*314*FLEN/8, x4, x1, x2)

inst_54843:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:164529*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164529*0 + 3*315*FLEN/8, x4, x1, x2)

inst_54844:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:164532*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164532*0 + 3*316*FLEN/8, x4, x1, x2)

inst_54845:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:164535*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164535*0 + 3*317*FLEN/8, x4, x1, x2)

inst_54846:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:164538*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164538*0 + 3*318*FLEN/8, x4, x1, x2)

inst_54847:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:164541*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164541*0 + 3*319*FLEN/8, x4, x1, x2)

inst_54848:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:164544*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164544*0 + 3*320*FLEN/8, x4, x1, x2)

inst_54849:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:164547*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164547*0 + 3*321*FLEN/8, x4, x1, x2)

inst_54850:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:164550*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164550*0 + 3*322*FLEN/8, x4, x1, x2)

inst_54851:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:164553*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164553*0 + 3*323*FLEN/8, x4, x1, x2)

inst_54852:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:164556*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164556*0 + 3*324*FLEN/8, x4, x1, x2)

inst_54853:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:164559*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164559*0 + 3*325*FLEN/8, x4, x1, x2)

inst_54854:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:164562*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164562*0 + 3*326*FLEN/8, x4, x1, x2)

inst_54855:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:164565*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164565*0 + 3*327*FLEN/8, x4, x1, x2)

inst_54856:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:164568*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164568*0 + 3*328*FLEN/8, x4, x1, x2)

inst_54857:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:164571*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164571*0 + 3*329*FLEN/8, x4, x1, x2)

inst_54858:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:164574*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164574*0 + 3*330*FLEN/8, x4, x1, x2)

inst_54859:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:164577*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164577*0 + 3*331*FLEN/8, x4, x1, x2)

inst_54860:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:164580*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164580*0 + 3*332*FLEN/8, x4, x1, x2)

inst_54861:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:164583*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164583*0 + 3*333*FLEN/8, x4, x1, x2)

inst_54862:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000000000000; valaddr_reg:x3; val_offset:164586*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164586*0 + 3*334*FLEN/8, x4, x1, x2)

inst_54863:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000000000001; valaddr_reg:x3; val_offset:164589*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164589*0 + 3*335*FLEN/8, x4, x1, x2)

inst_54864:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000000000003; valaddr_reg:x3; val_offset:164592*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164592*0 + 3*336*FLEN/8, x4, x1, x2)

inst_54865:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000000000007; valaddr_reg:x3; val_offset:164595*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164595*0 + 3*337*FLEN/8, x4, x1, x2)

inst_54866:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000000000000f; valaddr_reg:x3; val_offset:164598*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164598*0 + 3*338*FLEN/8, x4, x1, x2)

inst_54867:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000000000001f; valaddr_reg:x3; val_offset:164601*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164601*0 + 3*339*FLEN/8, x4, x1, x2)

inst_54868:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000000000003f; valaddr_reg:x3; val_offset:164604*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164604*0 + 3*340*FLEN/8, x4, x1, x2)

inst_54869:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000000000007f; valaddr_reg:x3; val_offset:164607*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164607*0 + 3*341*FLEN/8, x4, x1, x2)

inst_54870:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00000000000ff; valaddr_reg:x3; val_offset:164610*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164610*0 + 3*342*FLEN/8, x4, x1, x2)

inst_54871:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00000000001ff; valaddr_reg:x3; val_offset:164613*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164613*0 + 3*343*FLEN/8, x4, x1, x2)

inst_54872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00000000003ff; valaddr_reg:x3; val_offset:164616*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164616*0 + 3*344*FLEN/8, x4, x1, x2)

inst_54873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00000000007ff; valaddr_reg:x3; val_offset:164619*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164619*0 + 3*345*FLEN/8, x4, x1, x2)

inst_54874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000000000fff; valaddr_reg:x3; val_offset:164622*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164622*0 + 3*346*FLEN/8, x4, x1, x2)

inst_54875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000000001fff; valaddr_reg:x3; val_offset:164625*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164625*0 + 3*347*FLEN/8, x4, x1, x2)

inst_54876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000000003fff; valaddr_reg:x3; val_offset:164628*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164628*0 + 3*348*FLEN/8, x4, x1, x2)

inst_54877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000000007fff; valaddr_reg:x3; val_offset:164631*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164631*0 + 3*349*FLEN/8, x4, x1, x2)

inst_54878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000000000ffff; valaddr_reg:x3; val_offset:164634*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164634*0 + 3*350*FLEN/8, x4, x1, x2)

inst_54879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000000001ffff; valaddr_reg:x3; val_offset:164637*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164637*0 + 3*351*FLEN/8, x4, x1, x2)

inst_54880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000000003ffff; valaddr_reg:x3; val_offset:164640*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164640*0 + 3*352*FLEN/8, x4, x1, x2)

inst_54881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000000007ffff; valaddr_reg:x3; val_offset:164643*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164643*0 + 3*353*FLEN/8, x4, x1, x2)

inst_54882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00000000fffff; valaddr_reg:x3; val_offset:164646*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164646*0 + 3*354*FLEN/8, x4, x1, x2)

inst_54883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00000001fffff; valaddr_reg:x3; val_offset:164649*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164649*0 + 3*355*FLEN/8, x4, x1, x2)

inst_54884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00000003fffff; valaddr_reg:x3; val_offset:164652*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164652*0 + 3*356*FLEN/8, x4, x1, x2)

inst_54885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00000007fffff; valaddr_reg:x3; val_offset:164655*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164655*0 + 3*357*FLEN/8, x4, x1, x2)

inst_54886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000000ffffff; valaddr_reg:x3; val_offset:164658*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164658*0 + 3*358*FLEN/8, x4, x1, x2)

inst_54887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000001ffffff; valaddr_reg:x3; val_offset:164661*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164661*0 + 3*359*FLEN/8, x4, x1, x2)

inst_54888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000003ffffff; valaddr_reg:x3; val_offset:164664*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164664*0 + 3*360*FLEN/8, x4, x1, x2)

inst_54889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000007ffffff; valaddr_reg:x3; val_offset:164667*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164667*0 + 3*361*FLEN/8, x4, x1, x2)

inst_54890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000000fffffff; valaddr_reg:x3; val_offset:164670*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164670*0 + 3*362*FLEN/8, x4, x1, x2)

inst_54891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000001fffffff; valaddr_reg:x3; val_offset:164673*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164673*0 + 3*363*FLEN/8, x4, x1, x2)

inst_54892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000003fffffff; valaddr_reg:x3; val_offset:164676*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164676*0 + 3*364*FLEN/8, x4, x1, x2)

inst_54893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000007fffffff; valaddr_reg:x3; val_offset:164679*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164679*0 + 3*365*FLEN/8, x4, x1, x2)

inst_54894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00000ffffffff; valaddr_reg:x3; val_offset:164682*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164682*0 + 3*366*FLEN/8, x4, x1, x2)

inst_54895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00001ffffffff; valaddr_reg:x3; val_offset:164685*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164685*0 + 3*367*FLEN/8, x4, x1, x2)

inst_54896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00003ffffffff; valaddr_reg:x3; val_offset:164688*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164688*0 + 3*368*FLEN/8, x4, x1, x2)

inst_54897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00007ffffffff; valaddr_reg:x3; val_offset:164691*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164691*0 + 3*369*FLEN/8, x4, x1, x2)

inst_54898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0000fffffffff; valaddr_reg:x3; val_offset:164694*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164694*0 + 3*370*FLEN/8, x4, x1, x2)

inst_54899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0001fffffffff; valaddr_reg:x3; val_offset:164697*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164697*0 + 3*371*FLEN/8, x4, x1, x2)

inst_54900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0003fffffffff; valaddr_reg:x3; val_offset:164700*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164700*0 + 3*372*FLEN/8, x4, x1, x2)

inst_54901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0007fffffffff; valaddr_reg:x3; val_offset:164703*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164703*0 + 3*373*FLEN/8, x4, x1, x2)

inst_54902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d000ffffffffff; valaddr_reg:x3; val_offset:164706*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164706*0 + 3*374*FLEN/8, x4, x1, x2)

inst_54903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d001ffffffffff; valaddr_reg:x3; val_offset:164709*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164709*0 + 3*375*FLEN/8, x4, x1, x2)

inst_54904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d003ffffffffff; valaddr_reg:x3; val_offset:164712*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164712*0 + 3*376*FLEN/8, x4, x1, x2)

inst_54905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d007ffffffffff; valaddr_reg:x3; val_offset:164715*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164715*0 + 3*377*FLEN/8, x4, x1, x2)

inst_54906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d00fffffffffff; valaddr_reg:x3; val_offset:164718*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164718*0 + 3*378*FLEN/8, x4, x1, x2)

inst_54907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d01fffffffffff; valaddr_reg:x3; val_offset:164721*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164721*0 + 3*379*FLEN/8, x4, x1, x2)

inst_54908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d03fffffffffff; valaddr_reg:x3; val_offset:164724*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164724*0 + 3*380*FLEN/8, x4, x1, x2)

inst_54909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d07fffffffffff; valaddr_reg:x3; val_offset:164727*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164727*0 + 3*381*FLEN/8, x4, x1, x2)

inst_54910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d0ffffffffffff; valaddr_reg:x3; val_offset:164730*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164730*0 + 3*382*FLEN/8, x4, x1, x2)

inst_54911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d1ffffffffffff; valaddr_reg:x3; val_offset:164733*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164733*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_54912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d3ffffffffffff; valaddr_reg:x3; val_offset:164736*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164736*0 + 3*384*FLEN/8, x4, x1, x2)

inst_54913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d7ffffffffffff; valaddr_reg:x3; val_offset:164739*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164739*0 + 3*385*FLEN/8, x4, x1, x2)

inst_54914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81d8000000000000; valaddr_reg:x3; val_offset:164742*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164742*0 + 3*386*FLEN/8, x4, x1, x2)

inst_54915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dc000000000000; valaddr_reg:x3; val_offset:164745*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164745*0 + 3*387*FLEN/8, x4, x1, x2)

inst_54916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81de000000000000; valaddr_reg:x3; val_offset:164748*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164748*0 + 3*388*FLEN/8, x4, x1, x2)

inst_54917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81df000000000000; valaddr_reg:x3; val_offset:164751*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164751*0 + 3*389*FLEN/8, x4, x1, x2)

inst_54918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81df800000000000; valaddr_reg:x3; val_offset:164754*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164754*0 + 3*390*FLEN/8, x4, x1, x2)

inst_54919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfc00000000000; valaddr_reg:x3; val_offset:164757*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164757*0 + 3*391*FLEN/8, x4, x1, x2)

inst_54920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfe00000000000; valaddr_reg:x3; val_offset:164760*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164760*0 + 3*392*FLEN/8, x4, x1, x2)

inst_54921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dff00000000000; valaddr_reg:x3; val_offset:164763*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164763*0 + 3*393*FLEN/8, x4, x1, x2)

inst_54922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dff80000000000; valaddr_reg:x3; val_offset:164766*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164766*0 + 3*394*FLEN/8, x4, x1, x2)

inst_54923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffc0000000000; valaddr_reg:x3; val_offset:164769*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164769*0 + 3*395*FLEN/8, x4, x1, x2)

inst_54924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffe0000000000; valaddr_reg:x3; val_offset:164772*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164772*0 + 3*396*FLEN/8, x4, x1, x2)

inst_54925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfff0000000000; valaddr_reg:x3; val_offset:164775*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164775*0 + 3*397*FLEN/8, x4, x1, x2)

inst_54926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfff8000000000; valaddr_reg:x3; val_offset:164778*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164778*0 + 3*398*FLEN/8, x4, x1, x2)

inst_54927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffc000000000; valaddr_reg:x3; val_offset:164781*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164781*0 + 3*399*FLEN/8, x4, x1, x2)

inst_54928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffe000000000; valaddr_reg:x3; val_offset:164784*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164784*0 + 3*400*FLEN/8, x4, x1, x2)

inst_54929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffff000000000; valaddr_reg:x3; val_offset:164787*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164787*0 + 3*401*FLEN/8, x4, x1, x2)

inst_54930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffff800000000; valaddr_reg:x3; val_offset:164790*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164790*0 + 3*402*FLEN/8, x4, x1, x2)

inst_54931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffc00000000; valaddr_reg:x3; val_offset:164793*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164793*0 + 3*403*FLEN/8, x4, x1, x2)

inst_54932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffe00000000; valaddr_reg:x3; val_offset:164796*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164796*0 + 3*404*FLEN/8, x4, x1, x2)

inst_54933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffff00000000; valaddr_reg:x3; val_offset:164799*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164799*0 + 3*405*FLEN/8, x4, x1, x2)

inst_54934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffff80000000; valaddr_reg:x3; val_offset:164802*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164802*0 + 3*406*FLEN/8, x4, x1, x2)

inst_54935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffc0000000; valaddr_reg:x3; val_offset:164805*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164805*0 + 3*407*FLEN/8, x4, x1, x2)

inst_54936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffe0000000; valaddr_reg:x3; val_offset:164808*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164808*0 + 3*408*FLEN/8, x4, x1, x2)

inst_54937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffff0000000; valaddr_reg:x3; val_offset:164811*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164811*0 + 3*409*FLEN/8, x4, x1, x2)

inst_54938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffff8000000; valaddr_reg:x3; val_offset:164814*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164814*0 + 3*410*FLEN/8, x4, x1, x2)

inst_54939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffc000000; valaddr_reg:x3; val_offset:164817*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164817*0 + 3*411*FLEN/8, x4, x1, x2)

inst_54940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffe000000; valaddr_reg:x3; val_offset:164820*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164820*0 + 3*412*FLEN/8, x4, x1, x2)

inst_54941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffff000000; valaddr_reg:x3; val_offset:164823*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164823*0 + 3*413*FLEN/8, x4, x1, x2)

inst_54942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffff800000; valaddr_reg:x3; val_offset:164826*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164826*0 + 3*414*FLEN/8, x4, x1, x2)

inst_54943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffc00000; valaddr_reg:x3; val_offset:164829*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164829*0 + 3*415*FLEN/8, x4, x1, x2)

inst_54944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffe00000; valaddr_reg:x3; val_offset:164832*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164832*0 + 3*416*FLEN/8, x4, x1, x2)

inst_54945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffff00000; valaddr_reg:x3; val_offset:164835*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164835*0 + 3*417*FLEN/8, x4, x1, x2)

inst_54946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffff80000; valaddr_reg:x3; val_offset:164838*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164838*0 + 3*418*FLEN/8, x4, x1, x2)

inst_54947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffffc0000; valaddr_reg:x3; val_offset:164841*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164841*0 + 3*419*FLEN/8, x4, x1, x2)

inst_54948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffffe0000; valaddr_reg:x3; val_offset:164844*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164844*0 + 3*420*FLEN/8, x4, x1, x2)

inst_54949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffff0000; valaddr_reg:x3; val_offset:164847*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164847*0 + 3*421*FLEN/8, x4, x1, x2)

inst_54950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffff8000; valaddr_reg:x3; val_offset:164850*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164850*0 + 3*422*FLEN/8, x4, x1, x2)

inst_54951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffffc000; valaddr_reg:x3; val_offset:164853*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164853*0 + 3*423*FLEN/8, x4, x1, x2)

inst_54952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffffe000; valaddr_reg:x3; val_offset:164856*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164856*0 + 3*424*FLEN/8, x4, x1, x2)

inst_54953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffffff000; valaddr_reg:x3; val_offset:164859*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164859*0 + 3*425*FLEN/8, x4, x1, x2)

inst_54954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffffff800; valaddr_reg:x3; val_offset:164862*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164862*0 + 3*426*FLEN/8, x4, x1, x2)

inst_54955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffffffc00; valaddr_reg:x3; val_offset:164865*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164865*0 + 3*427*FLEN/8, x4, x1, x2)

inst_54956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffffffe00; valaddr_reg:x3; val_offset:164868*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164868*0 + 3*428*FLEN/8, x4, x1, x2)

inst_54957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffffff00; valaddr_reg:x3; val_offset:164871*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164871*0 + 3*429*FLEN/8, x4, x1, x2)

inst_54958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffffff80; valaddr_reg:x3; val_offset:164874*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164874*0 + 3*430*FLEN/8, x4, x1, x2)

inst_54959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffffffc0; valaddr_reg:x3; val_offset:164877*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164877*0 + 3*431*FLEN/8, x4, x1, x2)

inst_54960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffffffe0; valaddr_reg:x3; val_offset:164880*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164880*0 + 3*432*FLEN/8, x4, x1, x2)

inst_54961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffffffff0; valaddr_reg:x3; val_offset:164883*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164883*0 + 3*433*FLEN/8, x4, x1, x2)

inst_54962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffffffff8; valaddr_reg:x3; val_offset:164886*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164886*0 + 3*434*FLEN/8, x4, x1, x2)

inst_54963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffffffffc; valaddr_reg:x3; val_offset:164889*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164889*0 + 3*435*FLEN/8, x4, x1, x2)

inst_54964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dffffffffffffe; valaddr_reg:x3; val_offset:164892*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164892*0 + 3*436*FLEN/8, x4, x1, x2)

inst_54965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a470198b7628 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a470198b7628; op2val:0x8000;
op3val:0x81dfffffffffffff; valaddr_reg:x3; val_offset:164895*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164895*0 + 3*437*FLEN/8, x4, x1, x2)

inst_54966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:164898*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164898*0 + 3*438*FLEN/8, x4, x1, x2)

inst_54967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:164901*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164901*0 + 3*439*FLEN/8, x4, x1, x2)

inst_54968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:164904*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164904*0 + 3*440*FLEN/8, x4, x1, x2)

inst_54969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:164907*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164907*0 + 3*441*FLEN/8, x4, x1, x2)

inst_54970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:164910*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164910*0 + 3*442*FLEN/8, x4, x1, x2)

inst_54971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:164913*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164913*0 + 3*443*FLEN/8, x4, x1, x2)

inst_54972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:164916*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164916*0 + 3*444*FLEN/8, x4, x1, x2)

inst_54973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:164919*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164919*0 + 3*445*FLEN/8, x4, x1, x2)

inst_54974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:164922*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164922*0 + 3*446*FLEN/8, x4, x1, x2)

inst_54975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:164925*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164925*0 + 3*447*FLEN/8, x4, x1, x2)

inst_54976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:164928*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164928*0 + 3*448*FLEN/8, x4, x1, x2)

inst_54977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:164931*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164931*0 + 3*449*FLEN/8, x4, x1, x2)

inst_54978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:164934*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164934*0 + 3*450*FLEN/8, x4, x1, x2)

inst_54979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:164937*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164937*0 + 3*451*FLEN/8, x4, x1, x2)

inst_54980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:164940*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164940*0 + 3*452*FLEN/8, x4, x1, x2)

inst_54981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:164943*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164943*0 + 3*453*FLEN/8, x4, x1, x2)

inst_54982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:164946*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164946*0 + 3*454*FLEN/8, x4, x1, x2)

inst_54983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:164949*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164949*0 + 3*455*FLEN/8, x4, x1, x2)

inst_54984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:164952*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164952*0 + 3*456*FLEN/8, x4, x1, x2)

inst_54985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:164955*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164955*0 + 3*457*FLEN/8, x4, x1, x2)

inst_54986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:164958*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164958*0 + 3*458*FLEN/8, x4, x1, x2)

inst_54987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:164961*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164961*0 + 3*459*FLEN/8, x4, x1, x2)

inst_54988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000000000000; valaddr_reg:x3; val_offset:164964*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164964*0 + 3*460*FLEN/8, x4, x1, x2)

inst_54989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000000000001; valaddr_reg:x3; val_offset:164967*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164967*0 + 3*461*FLEN/8, x4, x1, x2)

inst_54990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000000000003; valaddr_reg:x3; val_offset:164970*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164970*0 + 3*462*FLEN/8, x4, x1, x2)

inst_54991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000000000007; valaddr_reg:x3; val_offset:164973*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164973*0 + 3*463*FLEN/8, x4, x1, x2)

inst_54992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000000000000f; valaddr_reg:x3; val_offset:164976*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164976*0 + 3*464*FLEN/8, x4, x1, x2)

inst_54993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000000000001f; valaddr_reg:x3; val_offset:164979*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164979*0 + 3*465*FLEN/8, x4, x1, x2)

inst_54994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000000000003f; valaddr_reg:x3; val_offset:164982*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164982*0 + 3*466*FLEN/8, x4, x1, x2)

inst_54995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000000000007f; valaddr_reg:x3; val_offset:164985*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164985*0 + 3*467*FLEN/8, x4, x1, x2)

inst_54996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900000000000ff; valaddr_reg:x3; val_offset:164988*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164988*0 + 3*468*FLEN/8, x4, x1, x2)

inst_54997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900000000001ff; valaddr_reg:x3; val_offset:164991*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164991*0 + 3*469*FLEN/8, x4, x1, x2)

inst_54998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900000000003ff; valaddr_reg:x3; val_offset:164994*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164994*0 + 3*470*FLEN/8, x4, x1, x2)

inst_54999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900000000007ff; valaddr_reg:x3; val_offset:164997*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 164997*0 + 3*471*FLEN/8, x4, x1, x2)

inst_55000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000000000fff; valaddr_reg:x3; val_offset:165000*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165000*0 + 3*472*FLEN/8, x4, x1, x2)

inst_55001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000000001fff; valaddr_reg:x3; val_offset:165003*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165003*0 + 3*473*FLEN/8, x4, x1, x2)

inst_55002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000000003fff; valaddr_reg:x3; val_offset:165006*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165006*0 + 3*474*FLEN/8, x4, x1, x2)

inst_55003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000000007fff; valaddr_reg:x3; val_offset:165009*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165009*0 + 3*475*FLEN/8, x4, x1, x2)

inst_55004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000000000ffff; valaddr_reg:x3; val_offset:165012*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165012*0 + 3*476*FLEN/8, x4, x1, x2)

inst_55005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000000001ffff; valaddr_reg:x3; val_offset:165015*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165015*0 + 3*477*FLEN/8, x4, x1, x2)

inst_55006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000000003ffff; valaddr_reg:x3; val_offset:165018*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165018*0 + 3*478*FLEN/8, x4, x1, x2)

inst_55007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000000007ffff; valaddr_reg:x3; val_offset:165021*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165021*0 + 3*479*FLEN/8, x4, x1, x2)

inst_55008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900000000fffff; valaddr_reg:x3; val_offset:165024*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165024*0 + 3*480*FLEN/8, x4, x1, x2)

inst_55009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900000001fffff; valaddr_reg:x3; val_offset:165027*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165027*0 + 3*481*FLEN/8, x4, x1, x2)

inst_55010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900000003fffff; valaddr_reg:x3; val_offset:165030*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165030*0 + 3*482*FLEN/8, x4, x1, x2)

inst_55011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900000007fffff; valaddr_reg:x3; val_offset:165033*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165033*0 + 3*483*FLEN/8, x4, x1, x2)

inst_55012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000000ffffff; valaddr_reg:x3; val_offset:165036*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165036*0 + 3*484*FLEN/8, x4, x1, x2)

inst_55013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000001ffffff; valaddr_reg:x3; val_offset:165039*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165039*0 + 3*485*FLEN/8, x4, x1, x2)

inst_55014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000003ffffff; valaddr_reg:x3; val_offset:165042*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165042*0 + 3*486*FLEN/8, x4, x1, x2)

inst_55015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000007ffffff; valaddr_reg:x3; val_offset:165045*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165045*0 + 3*487*FLEN/8, x4, x1, x2)

inst_55016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000000fffffff; valaddr_reg:x3; val_offset:165048*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165048*0 + 3*488*FLEN/8, x4, x1, x2)

inst_55017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000001fffffff; valaddr_reg:x3; val_offset:165051*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165051*0 + 3*489*FLEN/8, x4, x1, x2)

inst_55018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000003fffffff; valaddr_reg:x3; val_offset:165054*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165054*0 + 3*490*FLEN/8, x4, x1, x2)

inst_55019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000007fffffff; valaddr_reg:x3; val_offset:165057*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165057*0 + 3*491*FLEN/8, x4, x1, x2)

inst_55020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900000ffffffff; valaddr_reg:x3; val_offset:165060*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165060*0 + 3*492*FLEN/8, x4, x1, x2)

inst_55021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900001ffffffff; valaddr_reg:x3; val_offset:165063*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165063*0 + 3*493*FLEN/8, x4, x1, x2)

inst_55022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900003ffffffff; valaddr_reg:x3; val_offset:165066*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165066*0 + 3*494*FLEN/8, x4, x1, x2)

inst_55023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900007ffffffff; valaddr_reg:x3; val_offset:165069*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165069*0 + 3*495*FLEN/8, x4, x1, x2)

inst_55024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290000fffffffff; valaddr_reg:x3; val_offset:165072*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165072*0 + 3*496*FLEN/8, x4, x1, x2)

inst_55025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290001fffffffff; valaddr_reg:x3; val_offset:165075*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165075*0 + 3*497*FLEN/8, x4, x1, x2)

inst_55026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290003fffffffff; valaddr_reg:x3; val_offset:165078*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165078*0 + 3*498*FLEN/8, x4, x1, x2)

inst_55027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290007fffffffff; valaddr_reg:x3; val_offset:165081*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165081*0 + 3*499*FLEN/8, x4, x1, x2)

inst_55028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829000ffffffffff; valaddr_reg:x3; val_offset:165084*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165084*0 + 3*500*FLEN/8, x4, x1, x2)

inst_55029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829001ffffffffff; valaddr_reg:x3; val_offset:165087*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165087*0 + 3*501*FLEN/8, x4, x1, x2)

inst_55030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829003ffffffffff; valaddr_reg:x3; val_offset:165090*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165090*0 + 3*502*FLEN/8, x4, x1, x2)

inst_55031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829007ffffffffff; valaddr_reg:x3; val_offset:165093*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165093*0 + 3*503*FLEN/8, x4, x1, x2)

inst_55032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82900fffffffffff; valaddr_reg:x3; val_offset:165096*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165096*0 + 3*504*FLEN/8, x4, x1, x2)

inst_55033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82901fffffffffff; valaddr_reg:x3; val_offset:165099*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165099*0 + 3*505*FLEN/8, x4, x1, x2)

inst_55034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82903fffffffffff; valaddr_reg:x3; val_offset:165102*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165102*0 + 3*506*FLEN/8, x4, x1, x2)

inst_55035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x82907fffffffffff; valaddr_reg:x3; val_offset:165105*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165105*0 + 3*507*FLEN/8, x4, x1, x2)

inst_55036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8290ffffffffffff; valaddr_reg:x3; val_offset:165108*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165108*0 + 3*508*FLEN/8, x4, x1, x2)

inst_55037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8291ffffffffffff; valaddr_reg:x3; val_offset:165111*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165111*0 + 3*509*FLEN/8, x4, x1, x2)

inst_55038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8293ffffffffffff; valaddr_reg:x3; val_offset:165114*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165114*0 + 3*510*FLEN/8, x4, x1, x2)

inst_55039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8297ffffffffffff; valaddr_reg:x3; val_offset:165117*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165117*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_55040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x8298000000000000; valaddr_reg:x3; val_offset:165120*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165120*0 + 3*512*FLEN/8, x4, x1, x2)

inst_55041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829c000000000000; valaddr_reg:x3; val_offset:165123*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165123*0 + 3*513*FLEN/8, x4, x1, x2)

inst_55042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829e000000000000; valaddr_reg:x3; val_offset:165126*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165126*0 + 3*514*FLEN/8, x4, x1, x2)

inst_55043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829f000000000000; valaddr_reg:x3; val_offset:165129*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165129*0 + 3*515*FLEN/8, x4, x1, x2)

inst_55044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829f800000000000; valaddr_reg:x3; val_offset:165132*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165132*0 + 3*516*FLEN/8, x4, x1, x2)

inst_55045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fc00000000000; valaddr_reg:x3; val_offset:165135*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165135*0 + 3*517*FLEN/8, x4, x1, x2)

inst_55046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fe00000000000; valaddr_reg:x3; val_offset:165138*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165138*0 + 3*518*FLEN/8, x4, x1, x2)

inst_55047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ff00000000000; valaddr_reg:x3; val_offset:165141*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165141*0 + 3*519*FLEN/8, x4, x1, x2)

inst_55048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ff80000000000; valaddr_reg:x3; val_offset:165144*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165144*0 + 3*520*FLEN/8, x4, x1, x2)

inst_55049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffc0000000000; valaddr_reg:x3; val_offset:165147*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165147*0 + 3*521*FLEN/8, x4, x1, x2)

inst_55050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffe0000000000; valaddr_reg:x3; val_offset:165150*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165150*0 + 3*522*FLEN/8, x4, x1, x2)

inst_55051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fff0000000000; valaddr_reg:x3; val_offset:165153*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165153*0 + 3*523*FLEN/8, x4, x1, x2)

inst_55052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fff8000000000; valaddr_reg:x3; val_offset:165156*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165156*0 + 3*524*FLEN/8, x4, x1, x2)

inst_55053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffc000000000; valaddr_reg:x3; val_offset:165159*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165159*0 + 3*525*FLEN/8, x4, x1, x2)

inst_55054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffe000000000; valaddr_reg:x3; val_offset:165162*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165162*0 + 3*526*FLEN/8, x4, x1, x2)

inst_55055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffff000000000; valaddr_reg:x3; val_offset:165165*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165165*0 + 3*527*FLEN/8, x4, x1, x2)

inst_55056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffff800000000; valaddr_reg:x3; val_offset:165168*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165168*0 + 3*528*FLEN/8, x4, x1, x2)

inst_55057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffc00000000; valaddr_reg:x3; val_offset:165171*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165171*0 + 3*529*FLEN/8, x4, x1, x2)

inst_55058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffe00000000; valaddr_reg:x3; val_offset:165174*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165174*0 + 3*530*FLEN/8, x4, x1, x2)

inst_55059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffff00000000; valaddr_reg:x3; val_offset:165177*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165177*0 + 3*531*FLEN/8, x4, x1, x2)

inst_55060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffff80000000; valaddr_reg:x3; val_offset:165180*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165180*0 + 3*532*FLEN/8, x4, x1, x2)

inst_55061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffc0000000; valaddr_reg:x3; val_offset:165183*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165183*0 + 3*533*FLEN/8, x4, x1, x2)

inst_55062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffe0000000; valaddr_reg:x3; val_offset:165186*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165186*0 + 3*534*FLEN/8, x4, x1, x2)

inst_55063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffff0000000; valaddr_reg:x3; val_offset:165189*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165189*0 + 3*535*FLEN/8, x4, x1, x2)

inst_55064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffff8000000; valaddr_reg:x3; val_offset:165192*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165192*0 + 3*536*FLEN/8, x4, x1, x2)

inst_55065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffc000000; valaddr_reg:x3; val_offset:165195*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165195*0 + 3*537*FLEN/8, x4, x1, x2)

inst_55066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffe000000; valaddr_reg:x3; val_offset:165198*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165198*0 + 3*538*FLEN/8, x4, x1, x2)

inst_55067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffff000000; valaddr_reg:x3; val_offset:165201*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165201*0 + 3*539*FLEN/8, x4, x1, x2)

inst_55068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffff800000; valaddr_reg:x3; val_offset:165204*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165204*0 + 3*540*FLEN/8, x4, x1, x2)

inst_55069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffc00000; valaddr_reg:x3; val_offset:165207*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165207*0 + 3*541*FLEN/8, x4, x1, x2)

inst_55070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffe00000; valaddr_reg:x3; val_offset:165210*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165210*0 + 3*542*FLEN/8, x4, x1, x2)

inst_55071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffff00000; valaddr_reg:x3; val_offset:165213*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165213*0 + 3*543*FLEN/8, x4, x1, x2)

inst_55072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffff80000; valaddr_reg:x3; val_offset:165216*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165216*0 + 3*544*FLEN/8, x4, x1, x2)

inst_55073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffffc0000; valaddr_reg:x3; val_offset:165219*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165219*0 + 3*545*FLEN/8, x4, x1, x2)

inst_55074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffffe0000; valaddr_reg:x3; val_offset:165222*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165222*0 + 3*546*FLEN/8, x4, x1, x2)

inst_55075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffff0000; valaddr_reg:x3; val_offset:165225*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165225*0 + 3*547*FLEN/8, x4, x1, x2)

inst_55076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffff8000; valaddr_reg:x3; val_offset:165228*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165228*0 + 3*548*FLEN/8, x4, x1, x2)

inst_55077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffffc000; valaddr_reg:x3; val_offset:165231*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165231*0 + 3*549*FLEN/8, x4, x1, x2)

inst_55078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffffe000; valaddr_reg:x3; val_offset:165234*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165234*0 + 3*550*FLEN/8, x4, x1, x2)

inst_55079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffffff000; valaddr_reg:x3; val_offset:165237*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165237*0 + 3*551*FLEN/8, x4, x1, x2)

inst_55080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffffff800; valaddr_reg:x3; val_offset:165240*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165240*0 + 3*552*FLEN/8, x4, x1, x2)

inst_55081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffffffc00; valaddr_reg:x3; val_offset:165243*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165243*0 + 3*553*FLEN/8, x4, x1, x2)

inst_55082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffffffe00; valaddr_reg:x3; val_offset:165246*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165246*0 + 3*554*FLEN/8, x4, x1, x2)

inst_55083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffffff00; valaddr_reg:x3; val_offset:165249*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165249*0 + 3*555*FLEN/8, x4, x1, x2)

inst_55084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffffff80; valaddr_reg:x3; val_offset:165252*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165252*0 + 3*556*FLEN/8, x4, x1, x2)

inst_55085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffffffc0; valaddr_reg:x3; val_offset:165255*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165255*0 + 3*557*FLEN/8, x4, x1, x2)

inst_55086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffffffe0; valaddr_reg:x3; val_offset:165258*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165258*0 + 3*558*FLEN/8, x4, x1, x2)

inst_55087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffffffff0; valaddr_reg:x3; val_offset:165261*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165261*0 + 3*559*FLEN/8, x4, x1, x2)

inst_55088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffffffff8; valaddr_reg:x3; val_offset:165264*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165264*0 + 3*560*FLEN/8, x4, x1, x2)

inst_55089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffffffffc; valaddr_reg:x3; val_offset:165267*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165267*0 + 3*561*FLEN/8, x4, x1, x2)

inst_55090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829ffffffffffffe; valaddr_reg:x3; val_offset:165270*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165270*0 + 3*562*FLEN/8, x4, x1, x2)

inst_55091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0ad13253643d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0ad13253643d4; op2val:0x8000;
op3val:0x829fffffffffffff; valaddr_reg:x3; val_offset:165273*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165273*0 + 3*563*FLEN/8, x4, x1, x2)

inst_55092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:165276*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165276*0 + 3*564*FLEN/8, x4, x1, x2)

inst_55093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:165279*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165279*0 + 3*565*FLEN/8, x4, x1, x2)

inst_55094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:165282*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165282*0 + 3*566*FLEN/8, x4, x1, x2)

inst_55095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:165285*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165285*0 + 3*567*FLEN/8, x4, x1, x2)

inst_55096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:165288*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165288*0 + 3*568*FLEN/8, x4, x1, x2)

inst_55097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:165291*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165291*0 + 3*569*FLEN/8, x4, x1, x2)

inst_55098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:165294*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165294*0 + 3*570*FLEN/8, x4, x1, x2)

inst_55099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:165297*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165297*0 + 3*571*FLEN/8, x4, x1, x2)

inst_55100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:165300*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165300*0 + 3*572*FLEN/8, x4, x1, x2)

inst_55101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:165303*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165303*0 + 3*573*FLEN/8, x4, x1, x2)

inst_55102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:165306*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165306*0 + 3*574*FLEN/8, x4, x1, x2)

inst_55103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:165309*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165309*0 + 3*575*FLEN/8, x4, x1, x2)

inst_55104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:165312*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165312*0 + 3*576*FLEN/8, x4, x1, x2)

inst_55105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:165315*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165315*0 + 3*577*FLEN/8, x4, x1, x2)

inst_55106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:165318*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165318*0 + 3*578*FLEN/8, x4, x1, x2)

inst_55107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:165321*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165321*0 + 3*579*FLEN/8, x4, x1, x2)

inst_55108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:165324*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165324*0 + 3*580*FLEN/8, x4, x1, x2)

inst_55109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:165327*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165327*0 + 3*581*FLEN/8, x4, x1, x2)

inst_55110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:165330*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165330*0 + 3*582*FLEN/8, x4, x1, x2)

inst_55111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:165333*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165333*0 + 3*583*FLEN/8, x4, x1, x2)

inst_55112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:165336*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165336*0 + 3*584*FLEN/8, x4, x1, x2)

inst_55113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:165339*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165339*0 + 3*585*FLEN/8, x4, x1, x2)

inst_55114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000000000000; valaddr_reg:x3; val_offset:165342*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165342*0 + 3*586*FLEN/8, x4, x1, x2)

inst_55115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000000000001; valaddr_reg:x3; val_offset:165345*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165345*0 + 3*587*FLEN/8, x4, x1, x2)

inst_55116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000000000003; valaddr_reg:x3; val_offset:165348*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165348*0 + 3*588*FLEN/8, x4, x1, x2)

inst_55117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000000000007; valaddr_reg:x3; val_offset:165351*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165351*0 + 3*589*FLEN/8, x4, x1, x2)

inst_55118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000000000000f; valaddr_reg:x3; val_offset:165354*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165354*0 + 3*590*FLEN/8, x4, x1, x2)

inst_55119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000000000001f; valaddr_reg:x3; val_offset:165357*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165357*0 + 3*591*FLEN/8, x4, x1, x2)

inst_55120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000000000003f; valaddr_reg:x3; val_offset:165360*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165360*0 + 3*592*FLEN/8, x4, x1, x2)

inst_55121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000000000007f; valaddr_reg:x3; val_offset:165363*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165363*0 + 3*593*FLEN/8, x4, x1, x2)

inst_55122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00000000000ff; valaddr_reg:x3; val_offset:165366*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165366*0 + 3*594*FLEN/8, x4, x1, x2)

inst_55123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00000000001ff; valaddr_reg:x3; val_offset:165369*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165369*0 + 3*595*FLEN/8, x4, x1, x2)

inst_55124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00000000003ff; valaddr_reg:x3; val_offset:165372*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165372*0 + 3*596*FLEN/8, x4, x1, x2)

inst_55125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00000000007ff; valaddr_reg:x3; val_offset:165375*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165375*0 + 3*597*FLEN/8, x4, x1, x2)

inst_55126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000000000fff; valaddr_reg:x3; val_offset:165378*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165378*0 + 3*598*FLEN/8, x4, x1, x2)

inst_55127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000000001fff; valaddr_reg:x3; val_offset:165381*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165381*0 + 3*599*FLEN/8, x4, x1, x2)

inst_55128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000000003fff; valaddr_reg:x3; val_offset:165384*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165384*0 + 3*600*FLEN/8, x4, x1, x2)

inst_55129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000000007fff; valaddr_reg:x3; val_offset:165387*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165387*0 + 3*601*FLEN/8, x4, x1, x2)

inst_55130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000000000ffff; valaddr_reg:x3; val_offset:165390*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165390*0 + 3*602*FLEN/8, x4, x1, x2)

inst_55131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000000001ffff; valaddr_reg:x3; val_offset:165393*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165393*0 + 3*603*FLEN/8, x4, x1, x2)

inst_55132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000000003ffff; valaddr_reg:x3; val_offset:165396*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165396*0 + 3*604*FLEN/8, x4, x1, x2)

inst_55133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000000007ffff; valaddr_reg:x3; val_offset:165399*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165399*0 + 3*605*FLEN/8, x4, x1, x2)

inst_55134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00000000fffff; valaddr_reg:x3; val_offset:165402*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165402*0 + 3*606*FLEN/8, x4, x1, x2)

inst_55135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00000001fffff; valaddr_reg:x3; val_offset:165405*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165405*0 + 3*607*FLEN/8, x4, x1, x2)

inst_55136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00000003fffff; valaddr_reg:x3; val_offset:165408*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165408*0 + 3*608*FLEN/8, x4, x1, x2)

inst_55137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00000007fffff; valaddr_reg:x3; val_offset:165411*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165411*0 + 3*609*FLEN/8, x4, x1, x2)

inst_55138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000000ffffff; valaddr_reg:x3; val_offset:165414*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165414*0 + 3*610*FLEN/8, x4, x1, x2)

inst_55139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000001ffffff; valaddr_reg:x3; val_offset:165417*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165417*0 + 3*611*FLEN/8, x4, x1, x2)

inst_55140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000003ffffff; valaddr_reg:x3; val_offset:165420*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165420*0 + 3*612*FLEN/8, x4, x1, x2)

inst_55141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000007ffffff; valaddr_reg:x3; val_offset:165423*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165423*0 + 3*613*FLEN/8, x4, x1, x2)

inst_55142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000000fffffff; valaddr_reg:x3; val_offset:165426*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165426*0 + 3*614*FLEN/8, x4, x1, x2)

inst_55143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000001fffffff; valaddr_reg:x3; val_offset:165429*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165429*0 + 3*615*FLEN/8, x4, x1, x2)

inst_55144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000003fffffff; valaddr_reg:x3; val_offset:165432*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165432*0 + 3*616*FLEN/8, x4, x1, x2)

inst_55145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000007fffffff; valaddr_reg:x3; val_offset:165435*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165435*0 + 3*617*FLEN/8, x4, x1, x2)

inst_55146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00000ffffffff; valaddr_reg:x3; val_offset:165438*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165438*0 + 3*618*FLEN/8, x4, x1, x2)

inst_55147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00001ffffffff; valaddr_reg:x3; val_offset:165441*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165441*0 + 3*619*FLEN/8, x4, x1, x2)

inst_55148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00003ffffffff; valaddr_reg:x3; val_offset:165444*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165444*0 + 3*620*FLEN/8, x4, x1, x2)

inst_55149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00007ffffffff; valaddr_reg:x3; val_offset:165447*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165447*0 + 3*621*FLEN/8, x4, x1, x2)

inst_55150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0000fffffffff; valaddr_reg:x3; val_offset:165450*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165450*0 + 3*622*FLEN/8, x4, x1, x2)

inst_55151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0001fffffffff; valaddr_reg:x3; val_offset:165453*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165453*0 + 3*623*FLEN/8, x4, x1, x2)

inst_55152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0003fffffffff; valaddr_reg:x3; val_offset:165456*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165456*0 + 3*624*FLEN/8, x4, x1, x2)

inst_55153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0007fffffffff; valaddr_reg:x3; val_offset:165459*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165459*0 + 3*625*FLEN/8, x4, x1, x2)

inst_55154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b000ffffffffff; valaddr_reg:x3; val_offset:165462*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165462*0 + 3*626*FLEN/8, x4, x1, x2)

inst_55155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b001ffffffffff; valaddr_reg:x3; val_offset:165465*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165465*0 + 3*627*FLEN/8, x4, x1, x2)

inst_55156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b003ffffffffff; valaddr_reg:x3; val_offset:165468*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165468*0 + 3*628*FLEN/8, x4, x1, x2)

inst_55157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b007ffffffffff; valaddr_reg:x3; val_offset:165471*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165471*0 + 3*629*FLEN/8, x4, x1, x2)

inst_55158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b00fffffffffff; valaddr_reg:x3; val_offset:165474*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165474*0 + 3*630*FLEN/8, x4, x1, x2)

inst_55159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b01fffffffffff; valaddr_reg:x3; val_offset:165477*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165477*0 + 3*631*FLEN/8, x4, x1, x2)

inst_55160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b03fffffffffff; valaddr_reg:x3; val_offset:165480*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165480*0 + 3*632*FLEN/8, x4, x1, x2)

inst_55161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b07fffffffffff; valaddr_reg:x3; val_offset:165483*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165483*0 + 3*633*FLEN/8, x4, x1, x2)

inst_55162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b0ffffffffffff; valaddr_reg:x3; val_offset:165486*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165486*0 + 3*634*FLEN/8, x4, x1, x2)

inst_55163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b1ffffffffffff; valaddr_reg:x3; val_offset:165489*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165489*0 + 3*635*FLEN/8, x4, x1, x2)

inst_55164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b3ffffffffffff; valaddr_reg:x3; val_offset:165492*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165492*0 + 3*636*FLEN/8, x4, x1, x2)

inst_55165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b7ffffffffffff; valaddr_reg:x3; val_offset:165495*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165495*0 + 3*637*FLEN/8, x4, x1, x2)

inst_55166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83b8000000000000; valaddr_reg:x3; val_offset:165498*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165498*0 + 3*638*FLEN/8, x4, x1, x2)

inst_55167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bc000000000000; valaddr_reg:x3; val_offset:165501*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165501*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_55168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83be000000000000; valaddr_reg:x3; val_offset:165504*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165504*0 + 3*640*FLEN/8, x4, x1, x2)

inst_55169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bf000000000000; valaddr_reg:x3; val_offset:165507*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165507*0 + 3*641*FLEN/8, x4, x1, x2)

inst_55170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bf800000000000; valaddr_reg:x3; val_offset:165510*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165510*0 + 3*642*FLEN/8, x4, x1, x2)

inst_55171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfc00000000000; valaddr_reg:x3; val_offset:165513*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165513*0 + 3*643*FLEN/8, x4, x1, x2)

inst_55172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfe00000000000; valaddr_reg:x3; val_offset:165516*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165516*0 + 3*644*FLEN/8, x4, x1, x2)

inst_55173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bff00000000000; valaddr_reg:x3; val_offset:165519*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165519*0 + 3*645*FLEN/8, x4, x1, x2)

inst_55174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bff80000000000; valaddr_reg:x3; val_offset:165522*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165522*0 + 3*646*FLEN/8, x4, x1, x2)

inst_55175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffc0000000000; valaddr_reg:x3; val_offset:165525*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165525*0 + 3*647*FLEN/8, x4, x1, x2)

inst_55176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffe0000000000; valaddr_reg:x3; val_offset:165528*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165528*0 + 3*648*FLEN/8, x4, x1, x2)

inst_55177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfff0000000000; valaddr_reg:x3; val_offset:165531*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165531*0 + 3*649*FLEN/8, x4, x1, x2)

inst_55178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfff8000000000; valaddr_reg:x3; val_offset:165534*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165534*0 + 3*650*FLEN/8, x4, x1, x2)

inst_55179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffc000000000; valaddr_reg:x3; val_offset:165537*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165537*0 + 3*651*FLEN/8, x4, x1, x2)

inst_55180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffe000000000; valaddr_reg:x3; val_offset:165540*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165540*0 + 3*652*FLEN/8, x4, x1, x2)

inst_55181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffff000000000; valaddr_reg:x3; val_offset:165543*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165543*0 + 3*653*FLEN/8, x4, x1, x2)

inst_55182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffff800000000; valaddr_reg:x3; val_offset:165546*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165546*0 + 3*654*FLEN/8, x4, x1, x2)

inst_55183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffc00000000; valaddr_reg:x3; val_offset:165549*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165549*0 + 3*655*FLEN/8, x4, x1, x2)

inst_55184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffe00000000; valaddr_reg:x3; val_offset:165552*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165552*0 + 3*656*FLEN/8, x4, x1, x2)

inst_55185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffff00000000; valaddr_reg:x3; val_offset:165555*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165555*0 + 3*657*FLEN/8, x4, x1, x2)

inst_55186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffff80000000; valaddr_reg:x3; val_offset:165558*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165558*0 + 3*658*FLEN/8, x4, x1, x2)

inst_55187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffc0000000; valaddr_reg:x3; val_offset:165561*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165561*0 + 3*659*FLEN/8, x4, x1, x2)

inst_55188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffe0000000; valaddr_reg:x3; val_offset:165564*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165564*0 + 3*660*FLEN/8, x4, x1, x2)

inst_55189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffff0000000; valaddr_reg:x3; val_offset:165567*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165567*0 + 3*661*FLEN/8, x4, x1, x2)

inst_55190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffff8000000; valaddr_reg:x3; val_offset:165570*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165570*0 + 3*662*FLEN/8, x4, x1, x2)

inst_55191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffc000000; valaddr_reg:x3; val_offset:165573*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165573*0 + 3*663*FLEN/8, x4, x1, x2)

inst_55192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffe000000; valaddr_reg:x3; val_offset:165576*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165576*0 + 3*664*FLEN/8, x4, x1, x2)

inst_55193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffff000000; valaddr_reg:x3; val_offset:165579*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165579*0 + 3*665*FLEN/8, x4, x1, x2)

inst_55194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffff800000; valaddr_reg:x3; val_offset:165582*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165582*0 + 3*666*FLEN/8, x4, x1, x2)

inst_55195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffc00000; valaddr_reg:x3; val_offset:165585*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165585*0 + 3*667*FLEN/8, x4, x1, x2)

inst_55196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffe00000; valaddr_reg:x3; val_offset:165588*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165588*0 + 3*668*FLEN/8, x4, x1, x2)

inst_55197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffff00000; valaddr_reg:x3; val_offset:165591*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165591*0 + 3*669*FLEN/8, x4, x1, x2)

inst_55198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffff80000; valaddr_reg:x3; val_offset:165594*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165594*0 + 3*670*FLEN/8, x4, x1, x2)

inst_55199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffffc0000; valaddr_reg:x3; val_offset:165597*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165597*0 + 3*671*FLEN/8, x4, x1, x2)

inst_55200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffffe0000; valaddr_reg:x3; val_offset:165600*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165600*0 + 3*672*FLEN/8, x4, x1, x2)

inst_55201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffff0000; valaddr_reg:x3; val_offset:165603*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165603*0 + 3*673*FLEN/8, x4, x1, x2)

inst_55202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffff8000; valaddr_reg:x3; val_offset:165606*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165606*0 + 3*674*FLEN/8, x4, x1, x2)

inst_55203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffffc000; valaddr_reg:x3; val_offset:165609*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165609*0 + 3*675*FLEN/8, x4, x1, x2)

inst_55204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffffe000; valaddr_reg:x3; val_offset:165612*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165612*0 + 3*676*FLEN/8, x4, x1, x2)

inst_55205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffffff000; valaddr_reg:x3; val_offset:165615*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165615*0 + 3*677*FLEN/8, x4, x1, x2)

inst_55206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffffff800; valaddr_reg:x3; val_offset:165618*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165618*0 + 3*678*FLEN/8, x4, x1, x2)

inst_55207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffffffc00; valaddr_reg:x3; val_offset:165621*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165621*0 + 3*679*FLEN/8, x4, x1, x2)

inst_55208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffffffe00; valaddr_reg:x3; val_offset:165624*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165624*0 + 3*680*FLEN/8, x4, x1, x2)

inst_55209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffffff00; valaddr_reg:x3; val_offset:165627*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165627*0 + 3*681*FLEN/8, x4, x1, x2)

inst_55210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffffff80; valaddr_reg:x3; val_offset:165630*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165630*0 + 3*682*FLEN/8, x4, x1, x2)

inst_55211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffffffc0; valaddr_reg:x3; val_offset:165633*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165633*0 + 3*683*FLEN/8, x4, x1, x2)

inst_55212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffffffe0; valaddr_reg:x3; val_offset:165636*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165636*0 + 3*684*FLEN/8, x4, x1, x2)

inst_55213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffffffff0; valaddr_reg:x3; val_offset:165639*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165639*0 + 3*685*FLEN/8, x4, x1, x2)

inst_55214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffffffff8; valaddr_reg:x3; val_offset:165642*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165642*0 + 3*686*FLEN/8, x4, x1, x2)

inst_55215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffffffffc; valaddr_reg:x3; val_offset:165645*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165645*0 + 3*687*FLEN/8, x4, x1, x2)

inst_55216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bffffffffffffe; valaddr_reg:x3; val_offset:165648*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165648*0 + 3*688*FLEN/8, x4, x1, x2)

inst_55217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0c1a806800541 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0c1a806800541; op2val:0x8000;
op3val:0x83bfffffffffffff; valaddr_reg:x3; val_offset:165651*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165651*0 + 3*689*FLEN/8, x4, x1, x2)

inst_55218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:165654*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165654*0 + 3*690*FLEN/8, x4, x1, x2)

inst_55219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:165657*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165657*0 + 3*691*FLEN/8, x4, x1, x2)

inst_55220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:165660*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165660*0 + 3*692*FLEN/8, x4, x1, x2)

inst_55221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:165663*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165663*0 + 3*693*FLEN/8, x4, x1, x2)

inst_55222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:165666*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165666*0 + 3*694*FLEN/8, x4, x1, x2)

inst_55223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:165669*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165669*0 + 3*695*FLEN/8, x4, x1, x2)

inst_55224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:165672*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165672*0 + 3*696*FLEN/8, x4, x1, x2)

inst_55225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:165675*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165675*0 + 3*697*FLEN/8, x4, x1, x2)

inst_55226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:165678*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165678*0 + 3*698*FLEN/8, x4, x1, x2)

inst_55227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:165681*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165681*0 + 3*699*FLEN/8, x4, x1, x2)

inst_55228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:165684*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165684*0 + 3*700*FLEN/8, x4, x1, x2)

inst_55229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:165687*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165687*0 + 3*701*FLEN/8, x4, x1, x2)

inst_55230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:165690*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165690*0 + 3*702*FLEN/8, x4, x1, x2)

inst_55231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:165693*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165693*0 + 3*703*FLEN/8, x4, x1, x2)

inst_55232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:165696*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165696*0 + 3*704*FLEN/8, x4, x1, x2)

inst_55233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:165699*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165699*0 + 3*705*FLEN/8, x4, x1, x2)

inst_55234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:165702*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165702*0 + 3*706*FLEN/8, x4, x1, x2)

inst_55235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:165705*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165705*0 + 3*707*FLEN/8, x4, x1, x2)

inst_55236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:165708*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165708*0 + 3*708*FLEN/8, x4, x1, x2)

inst_55237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:165711*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165711*0 + 3*709*FLEN/8, x4, x1, x2)

inst_55238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:165714*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165714*0 + 3*710*FLEN/8, x4, x1, x2)

inst_55239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:165717*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165717*0 + 3*711*FLEN/8, x4, x1, x2)

inst_55240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000000000000; valaddr_reg:x3; val_offset:165720*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165720*0 + 3*712*FLEN/8, x4, x1, x2)

inst_55241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000000000001; valaddr_reg:x3; val_offset:165723*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165723*0 + 3*713*FLEN/8, x4, x1, x2)

inst_55242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000000000003; valaddr_reg:x3; val_offset:165726*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165726*0 + 3*714*FLEN/8, x4, x1, x2)

inst_55243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000000000007; valaddr_reg:x3; val_offset:165729*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165729*0 + 3*715*FLEN/8, x4, x1, x2)

inst_55244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000000000000f; valaddr_reg:x3; val_offset:165732*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165732*0 + 3*716*FLEN/8, x4, x1, x2)

inst_55245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000000000001f; valaddr_reg:x3; val_offset:165735*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165735*0 + 3*717*FLEN/8, x4, x1, x2)

inst_55246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000000000003f; valaddr_reg:x3; val_offset:165738*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165738*0 + 3*718*FLEN/8, x4, x1, x2)

inst_55247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000000000007f; valaddr_reg:x3; val_offset:165741*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165741*0 + 3*719*FLEN/8, x4, x1, x2)

inst_55248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00000000000ff; valaddr_reg:x3; val_offset:165744*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165744*0 + 3*720*FLEN/8, x4, x1, x2)

inst_55249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00000000001ff; valaddr_reg:x3; val_offset:165747*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165747*0 + 3*721*FLEN/8, x4, x1, x2)

inst_55250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00000000003ff; valaddr_reg:x3; val_offset:165750*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165750*0 + 3*722*FLEN/8, x4, x1, x2)

inst_55251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00000000007ff; valaddr_reg:x3; val_offset:165753*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165753*0 + 3*723*FLEN/8, x4, x1, x2)

inst_55252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000000000fff; valaddr_reg:x3; val_offset:165756*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165756*0 + 3*724*FLEN/8, x4, x1, x2)

inst_55253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000000001fff; valaddr_reg:x3; val_offset:165759*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165759*0 + 3*725*FLEN/8, x4, x1, x2)

inst_55254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000000003fff; valaddr_reg:x3; val_offset:165762*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165762*0 + 3*726*FLEN/8, x4, x1, x2)

inst_55255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000000007fff; valaddr_reg:x3; val_offset:165765*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165765*0 + 3*727*FLEN/8, x4, x1, x2)

inst_55256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000000000ffff; valaddr_reg:x3; val_offset:165768*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165768*0 + 3*728*FLEN/8, x4, x1, x2)

inst_55257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000000001ffff; valaddr_reg:x3; val_offset:165771*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165771*0 + 3*729*FLEN/8, x4, x1, x2)

inst_55258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000000003ffff; valaddr_reg:x3; val_offset:165774*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165774*0 + 3*730*FLEN/8, x4, x1, x2)

inst_55259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000000007ffff; valaddr_reg:x3; val_offset:165777*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165777*0 + 3*731*FLEN/8, x4, x1, x2)

inst_55260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00000000fffff; valaddr_reg:x3; val_offset:165780*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165780*0 + 3*732*FLEN/8, x4, x1, x2)

inst_55261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00000001fffff; valaddr_reg:x3; val_offset:165783*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165783*0 + 3*733*FLEN/8, x4, x1, x2)

inst_55262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00000003fffff; valaddr_reg:x3; val_offset:165786*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165786*0 + 3*734*FLEN/8, x4, x1, x2)

inst_55263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00000007fffff; valaddr_reg:x3; val_offset:165789*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165789*0 + 3*735*FLEN/8, x4, x1, x2)

inst_55264:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000000ffffff; valaddr_reg:x3; val_offset:165792*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165792*0 + 3*736*FLEN/8, x4, x1, x2)

inst_55265:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000001ffffff; valaddr_reg:x3; val_offset:165795*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165795*0 + 3*737*FLEN/8, x4, x1, x2)

inst_55266:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000003ffffff; valaddr_reg:x3; val_offset:165798*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165798*0 + 3*738*FLEN/8, x4, x1, x2)

inst_55267:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000007ffffff; valaddr_reg:x3; val_offset:165801*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165801*0 + 3*739*FLEN/8, x4, x1, x2)

inst_55268:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000000fffffff; valaddr_reg:x3; val_offset:165804*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165804*0 + 3*740*FLEN/8, x4, x1, x2)

inst_55269:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000001fffffff; valaddr_reg:x3; val_offset:165807*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165807*0 + 3*741*FLEN/8, x4, x1, x2)

inst_55270:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000003fffffff; valaddr_reg:x3; val_offset:165810*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165810*0 + 3*742*FLEN/8, x4, x1, x2)

inst_55271:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000007fffffff; valaddr_reg:x3; val_offset:165813*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165813*0 + 3*743*FLEN/8, x4, x1, x2)

inst_55272:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00000ffffffff; valaddr_reg:x3; val_offset:165816*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165816*0 + 3*744*FLEN/8, x4, x1, x2)

inst_55273:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00001ffffffff; valaddr_reg:x3; val_offset:165819*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165819*0 + 3*745*FLEN/8, x4, x1, x2)

inst_55274:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00003ffffffff; valaddr_reg:x3; val_offset:165822*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165822*0 + 3*746*FLEN/8, x4, x1, x2)

inst_55275:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00007ffffffff; valaddr_reg:x3; val_offset:165825*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165825*0 + 3*747*FLEN/8, x4, x1, x2)

inst_55276:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0000fffffffff; valaddr_reg:x3; val_offset:165828*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165828*0 + 3*748*FLEN/8, x4, x1, x2)

inst_55277:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0001fffffffff; valaddr_reg:x3; val_offset:165831*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165831*0 + 3*749*FLEN/8, x4, x1, x2)

inst_55278:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0003fffffffff; valaddr_reg:x3; val_offset:165834*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165834*0 + 3*750*FLEN/8, x4, x1, x2)

inst_55279:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0007fffffffff; valaddr_reg:x3; val_offset:165837*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165837*0 + 3*751*FLEN/8, x4, x1, x2)

inst_55280:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b000ffffffffff; valaddr_reg:x3; val_offset:165840*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165840*0 + 3*752*FLEN/8, x4, x1, x2)

inst_55281:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b001ffffffffff; valaddr_reg:x3; val_offset:165843*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165843*0 + 3*753*FLEN/8, x4, x1, x2)

inst_55282:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b003ffffffffff; valaddr_reg:x3; val_offset:165846*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165846*0 + 3*754*FLEN/8, x4, x1, x2)

inst_55283:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b007ffffffffff; valaddr_reg:x3; val_offset:165849*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165849*0 + 3*755*FLEN/8, x4, x1, x2)

inst_55284:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b00fffffffffff; valaddr_reg:x3; val_offset:165852*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165852*0 + 3*756*FLEN/8, x4, x1, x2)

inst_55285:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b01fffffffffff; valaddr_reg:x3; val_offset:165855*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165855*0 + 3*757*FLEN/8, x4, x1, x2)

inst_55286:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b03fffffffffff; valaddr_reg:x3; val_offset:165858*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165858*0 + 3*758*FLEN/8, x4, x1, x2)

inst_55287:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b07fffffffffff; valaddr_reg:x3; val_offset:165861*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165861*0 + 3*759*FLEN/8, x4, x1, x2)

inst_55288:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b0ffffffffffff; valaddr_reg:x3; val_offset:165864*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165864*0 + 3*760*FLEN/8, x4, x1, x2)

inst_55289:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b1ffffffffffff; valaddr_reg:x3; val_offset:165867*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165867*0 + 3*761*FLEN/8, x4, x1, x2)

inst_55290:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b3ffffffffffff; valaddr_reg:x3; val_offset:165870*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165870*0 + 3*762*FLEN/8, x4, x1, x2)

inst_55291:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b7ffffffffffff; valaddr_reg:x3; val_offset:165873*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165873*0 + 3*763*FLEN/8, x4, x1, x2)

inst_55292:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2b8000000000000; valaddr_reg:x3; val_offset:165876*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165876*0 + 3*764*FLEN/8, x4, x1, x2)

inst_55293:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2bc000000000000; valaddr_reg:x3; val_offset:165879*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165879*0 + 3*765*FLEN/8, x4, x1, x2)

inst_55294:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2be000000000000; valaddr_reg:x3; val_offset:165882*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165882*0 + 3*766*FLEN/8, x4, x1, x2)

inst_55295:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0d25fe47403e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0d25fe47403e0; op2val:0x0;
op3val:0x2bf000000000000; valaddr_reg:x3; val_offset:165885*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165885*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858314897719296,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858383617196032,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858417976934400,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858435156803584,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858443746738176,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858448041705472,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858450189189120,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858451262930944,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858451799801856,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452068237312,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452202455040,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452269563904,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452303118336,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452319895552,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452328284160,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452332478464,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452334575616,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452335624192,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336148480,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336410624,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336541696,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336607232,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336640000,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336656384,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336664576,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336668672,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336670720,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336671744,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336672256,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336672512,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336672640,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336672704,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336672736,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336672752,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336672760,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336672764,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336672766,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4201858452336672767,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6890673140908485154,64,FLEN)
NAN_BOXED(2323537747629947693,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592256,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592257,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592259,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592263,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592271,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592287,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592319,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592383,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592511,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592767,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010593279,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010594303,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010596351,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010600447,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010608639,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010625023,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010657791,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010723327,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010854399,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832011116543,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832011640831,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832012689407,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832014786559,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832018980863,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832027369471,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832044146687,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832077701119,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832144809983,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832279027711,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832547463167,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918833084334079,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918834158075903,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918836305559551,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918840600526847,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918849190461439,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918866370330623,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918900730068991,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918969449545727,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281919106888499199,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281919381766406143,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281919931522220031,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281921031033847807,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281923230057103359,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281927628103614463,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281936424196636671,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281954016382681087,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281989200754769919,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9282059569498947583,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9282200306987302911,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9282481781964013567,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9283044731917434879,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9284170631824277503,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9284170631824277504,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9285296531731120128,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9285859481684541440,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286140956661252096,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286281694149607424,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286352062893785088,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286387247265873920,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286404839451918336,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286413635544940544,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286418033591451648,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286420232614707200,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286421332126334976,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286421881882148864,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422156760055808,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422294199009280,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422362918486016,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422397278224384,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422414458093568,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422423048028160,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422427342995456,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422429490479104,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422430564220928,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431101091840,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431369527296,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431503745024,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431570853888,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431604408320,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431621185536,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431629574144,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431633768448,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431635865600,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431636914176,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637438464,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637700608,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637831680,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637897216,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637929984,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637946368,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637954560,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637958656,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637960704,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637961728,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962240,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962496,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962624,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962688,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962720,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962736,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962744,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962748,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962750,64,FLEN)
NAN_BOXED(6890675801668931225,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962751,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861014016,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861014017,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861014019,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861014023,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861014031,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861014047,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861014079,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861014143,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861014271,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861014527,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861015039,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861016063,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861018111,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861022207,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861030399,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861046783,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861079551,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861145087,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861276159,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228861538303,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228862062591,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228863111167,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228865208319,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228869402623,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228877791231,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228894568447,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228928122879,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585228995231743,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585229129449471,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585229397884927,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585229934755839,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585231008497663,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585233155981311,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585237450948607,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585246040883199,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585263220752383,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585297580490751,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585366299967487,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585503738920959,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485585778616827903,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485586328372641791,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485587427884269567,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485589626907525119,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485594024954036223,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485602821047058431,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485620413233102847,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485655597605191679,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485725966349369343,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4485866703837724671,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4486148178814435327,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4486711128767856639,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4487837028674699263,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4487837028674699264,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4488962928581541888,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4489525878534963200,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4489807353511673856,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4489948091000029184,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490018459744206848,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490053644116295680,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490071236302340096,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490080032395362304,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490084430441873408,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490086629465128960,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490087728976756736,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088278732570624,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088553610477568,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088691049431040,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088759768907776,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088794128646144,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088811308515328,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088819898449920,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088824193417216,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088826340900864,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088827414642688,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088827951513600,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828219949056,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828354166784,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828421275648,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828454830080,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828471607296,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828479995904,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828484190208,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828486287360,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828487335936,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828487860224,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488122368,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488253440,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488318976,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488351744,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488368128,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488376320,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488380416,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488382464,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488383488,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488384000,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488384256,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488384384,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488384448,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488384480,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488384496,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488384504,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488384508,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488384510,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4490088828488384511,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6890684619720565431,64,FLEN)
NAN_BOXED(2323516442969678043,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520192,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520193,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520195,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520199,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520207,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520223,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520255,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520319,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520447,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520703,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048521215,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048522239,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048524287,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048528383,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048536575,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048552959,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048585727,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048651263,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048782335,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426049044479,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426049568767,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426050617343,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426052714495,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426056908799,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426065297407,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426082074623,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426115629055,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426182737919,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426316955647,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426585391103,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976427122262015,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976428196003839,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976430343487487,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976434638454783,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976443228389375,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976460408258559,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976494767996927,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976563487473663,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976700926427135,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976975804334079,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353977525560147967,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353978625071775743,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353980824095031295,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353985222141542399,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353994018234564607,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9354011610420609023,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9354046794792697855,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9354117163536875519,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9354257901025230847,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9354539376001941503,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9355102325955362815,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9356228225862205439,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9356228225862205440,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9357354125769048064,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9357917075722469376,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358198550699180032,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358339288187535360,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358409656931713024,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358444841303801856,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358462433489846272,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358471229582868480,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358475627629379584,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358477826652635136,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358478926164262912,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358479475920076800,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358479750797983744,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358479888236937216,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358479956956413952,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358479991316152320,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480008496021504,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480017085956096,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480021380923392,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480023528407040,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480024602148864,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025139019776,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025407455232,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025541672960,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025608781824,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025642336256,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025659113472,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025667502080,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025671696384,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025673793536,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025674842112,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675366400,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675628544,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675759616,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675825152,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675857920,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675874304,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675882496,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675886592,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675888640,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675889664,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890176,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890432,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890560,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890624,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890656,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890672,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890680,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890684,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890686,64,FLEN)
NAN_BOXED(6890688231248721448,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890687,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966144,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966145,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966147,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966151,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966159,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966175,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966207,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966271,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966399,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966655,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576967167,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576968191,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576970239,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576974335,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576982527,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576998911,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577031679,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577097215,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577228287,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577490431,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621578014719,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621579063295,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621581160447,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621585354751,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621593743359,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621610520575,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621644075007,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621711183871,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621845401599,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019622113837055,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019622650707967,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019623724449791,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019625871933439,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019630166900735,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019638756835327,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019655936704511,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019690296442879,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019759015919615,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019896454873087,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408020171332780031,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408020721088593919,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408021820600221695,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408024019623477247,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408028417669988351,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408037213763010559,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408054805949054975,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408089990321143807,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408160359065321471,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408301096553676799,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408582571530387455,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9409145521483808767,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9410271421390651391,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9410271421390651392,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9411397321297494016,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9411960271250915328,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412241746227625984,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412382483715981312,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412452852460158976,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412488036832247808,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412505629018292224,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412514425111314432,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412518823157825536,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412521022181081088,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412522121692708864,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412522671448522752,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412522946326429696,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523083765383168,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523152484859904,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523186844598272,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523204024467456,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523212614402048,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523216909369344,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523219056852992,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523220130594816,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523220667465728,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523220935901184,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221070118912,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221137227776,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221170782208,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221187559424,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221195948032,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221200142336,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221202239488,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221203288064,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221203812352,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204074496,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204205568,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204271104,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204303872,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204320256,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204328448,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204332544,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204334592,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204335616,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336128,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336384,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336512,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336576,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336608,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336624,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336632,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336636,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336638,64,FLEN)
NAN_BOXED(6890697727617156052,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336639,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635072,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635073,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635075,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635079,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635087,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635103,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635135,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635199,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635327,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635583,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869636095,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869637119,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869639167,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869643263,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869651455,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869667839,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869700607,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869766143,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869897215,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414870159359,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414870683647,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414871732223,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414873829375,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414878023679,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414886412287,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414903189503,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414936743935,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084415003852799,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084415138070527,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084415406505983,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084415943376895,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084417017118719,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084419164602367,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084423459569663,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084432049504255,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084449229373439,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084483589111807,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084552308588543,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084689747542015,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084964625448959,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489085514381262847,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489086613892890623,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489088812916146175,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489093210962657279,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489102007055679487,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489119599241723903,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489154783613812735,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489225152357990399,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489365889846345727,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489647364823056383,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9490210314776477695,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9491336214683320319,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9491336214683320320,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9492462114590162944,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493025064543584256,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493306539520294912,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493447277008650240,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493517645752827904,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493552830124916736,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493570422310961152,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493579218403983360,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493583616450494464,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493585815473750016,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493586914985377792,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587464741191680,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587739619098624,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587877058052096,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587945777528832,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587980137267200,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587997317136384,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588005907070976,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588010202038272,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588012349521920,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588013423263744,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588013960134656,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014228570112,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014362787840,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014429896704,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014463451136,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014480228352,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014488616960,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014492811264,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014494908416,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014495956992,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496481280,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496743424,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496874496,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496940032,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496972800,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496989184,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496997376,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497001472,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497003520,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497004544,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005056,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005312,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005440,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005504,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005536,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005552,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005560,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005564,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005566,64,FLEN)
NAN_BOXED(6890720357284578625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005567,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931328,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931329,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931331,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931335,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931343,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931359,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931391,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931455,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931583,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931839,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976932351,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976933375,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976935423,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976939519,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976947711,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976964095,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976996863,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977062399,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977193471,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977455615,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977979903,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783979028479,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783981125631,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783985319935,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783993708543,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784010485759,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784044040191,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784111149055,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784245366783,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784513802239,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654785050673151,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654786124414975,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654788271898623,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654792566865919,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654801156800511,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654818336669695,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654852696408063,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654921415884799,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193655058854838271,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193655333732745215,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193655883488559103,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193656983000186879,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193659182023442431,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193663580069953535,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193672376162975743,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193689968349020159,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193725152721108991,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193795521465286655,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193936258953641983,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(194217733930352639,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(194780683883773951,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(195906583790616575,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(195906583790616576,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(197032483697459200,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(197595433650880512,64,FLEN)
NAN_BOXED(6890738739173393376,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(197876908627591168,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
