
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmsub.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmsub.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fnmsub.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27648:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3f6ffffffffffffe; valaddr_reg:x3; val_offset:82944*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82944*0 + 3*0*FLEN/8, x4, x1, x2)

inst_27649:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3f6fffffffffffff; valaddr_reg:x3; val_offset:82947*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82947*0 + 3*1*FLEN/8, x4, x1, x2)

inst_27650:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:82950*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82950*0 + 3*2*FLEN/8, x4, x1, x2)

inst_27651:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:82953*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82953*0 + 3*3*FLEN/8, x4, x1, x2)

inst_27652:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:82956*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82956*0 + 3*4*FLEN/8, x4, x1, x2)

inst_27653:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:82959*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82959*0 + 3*5*FLEN/8, x4, x1, x2)

inst_27654:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:82962*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82962*0 + 3*6*FLEN/8, x4, x1, x2)

inst_27655:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:82965*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82965*0 + 3*7*FLEN/8, x4, x1, x2)

inst_27656:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:82968*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82968*0 + 3*8*FLEN/8, x4, x1, x2)

inst_27657:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:82971*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82971*0 + 3*9*FLEN/8, x4, x1, x2)

inst_27658:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:82974*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82974*0 + 3*10*FLEN/8, x4, x1, x2)

inst_27659:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:82977*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82977*0 + 3*11*FLEN/8, x4, x1, x2)

inst_27660:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:82980*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82980*0 + 3*12*FLEN/8, x4, x1, x2)

inst_27661:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:82983*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82983*0 + 3*13*FLEN/8, x4, x1, x2)

inst_27662:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:82986*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82986*0 + 3*14*FLEN/8, x4, x1, x2)

inst_27663:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:82989*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82989*0 + 3*15*FLEN/8, x4, x1, x2)

inst_27664:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:82992*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82992*0 + 3*16*FLEN/8, x4, x1, x2)

inst_27665:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:82995*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82995*0 + 3*17*FLEN/8, x4, x1, x2)

inst_27666:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:82998*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 82998*0 + 3*18*FLEN/8, x4, x1, x2)

inst_27667:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:83001*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83001*0 + 3*19*FLEN/8, x4, x1, x2)

inst_27668:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:83004*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83004*0 + 3*20*FLEN/8, x4, x1, x2)

inst_27669:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:83007*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83007*0 + 3*21*FLEN/8, x4, x1, x2)

inst_27670:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:83010*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83010*0 + 3*22*FLEN/8, x4, x1, x2)

inst_27671:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0f49ee98755fd and fs2 == 0 and fe2 == 0x204 and fm2 == 0xe32548cdc9306 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90f49ee98755fd; op2val:0x204e32548cdc9306;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:83013*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83013*0 + 3*23*FLEN/8, x4, x1, x2)

inst_27672:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:83016*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83016*0 + 3*24*FLEN/8, x4, x1, x2)

inst_27673:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:83019*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83019*0 + 3*25*FLEN/8, x4, x1, x2)

inst_27674:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:83022*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83022*0 + 3*26*FLEN/8, x4, x1, x2)

inst_27675:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:83025*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83025*0 + 3*27*FLEN/8, x4, x1, x2)

inst_27676:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:83028*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83028*0 + 3*28*FLEN/8, x4, x1, x2)

inst_27677:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:83031*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83031*0 + 3*29*FLEN/8, x4, x1, x2)

inst_27678:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:83034*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83034*0 + 3*30*FLEN/8, x4, x1, x2)

inst_27679:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:83037*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83037*0 + 3*31*FLEN/8, x4, x1, x2)

inst_27680:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:83040*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83040*0 + 3*32*FLEN/8, x4, x1, x2)

inst_27681:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:83043*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83043*0 + 3*33*FLEN/8, x4, x1, x2)

inst_27682:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:83046*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83046*0 + 3*34*FLEN/8, x4, x1, x2)

inst_27683:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:83049*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83049*0 + 3*35*FLEN/8, x4, x1, x2)

inst_27684:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:83052*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83052*0 + 3*36*FLEN/8, x4, x1, x2)

inst_27685:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:83055*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83055*0 + 3*37*FLEN/8, x4, x1, x2)

inst_27686:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:83058*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83058*0 + 3*38*FLEN/8, x4, x1, x2)

inst_27687:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:83061*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83061*0 + 3*39*FLEN/8, x4, x1, x2)

inst_27688:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:83064*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83064*0 + 3*40*FLEN/8, x4, x1, x2)

inst_27689:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:83067*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83067*0 + 3*41*FLEN/8, x4, x1, x2)

inst_27690:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:83070*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83070*0 + 3*42*FLEN/8, x4, x1, x2)

inst_27691:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:83073*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83073*0 + 3*43*FLEN/8, x4, x1, x2)

inst_27692:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:83076*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83076*0 + 3*44*FLEN/8, x4, x1, x2)

inst_27693:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:83079*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83079*0 + 3*45*FLEN/8, x4, x1, x2)

inst_27694:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000000000000; valaddr_reg:x3; val_offset:83082*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83082*0 + 3*46*FLEN/8, x4, x1, x2)

inst_27695:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000000000001; valaddr_reg:x3; val_offset:83085*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83085*0 + 3*47*FLEN/8, x4, x1, x2)

inst_27696:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000000000003; valaddr_reg:x3; val_offset:83088*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83088*0 + 3*48*FLEN/8, x4, x1, x2)

inst_27697:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000000000007; valaddr_reg:x3; val_offset:83091*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83091*0 + 3*49*FLEN/8, x4, x1, x2)

inst_27698:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000000000000f; valaddr_reg:x3; val_offset:83094*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83094*0 + 3*50*FLEN/8, x4, x1, x2)

inst_27699:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000000000001f; valaddr_reg:x3; val_offset:83097*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83097*0 + 3*51*FLEN/8, x4, x1, x2)

inst_27700:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000000000003f; valaddr_reg:x3; val_offset:83100*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83100*0 + 3*52*FLEN/8, x4, x1, x2)

inst_27701:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000000000007f; valaddr_reg:x3; val_offset:83103*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83103*0 + 3*53*FLEN/8, x4, x1, x2)

inst_27702:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500000000000ff; valaddr_reg:x3; val_offset:83106*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83106*0 + 3*54*FLEN/8, x4, x1, x2)

inst_27703:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500000000001ff; valaddr_reg:x3; val_offset:83109*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83109*0 + 3*55*FLEN/8, x4, x1, x2)

inst_27704:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500000000003ff; valaddr_reg:x3; val_offset:83112*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83112*0 + 3*56*FLEN/8, x4, x1, x2)

inst_27705:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500000000007ff; valaddr_reg:x3; val_offset:83115*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83115*0 + 3*57*FLEN/8, x4, x1, x2)

inst_27706:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000000000fff; valaddr_reg:x3; val_offset:83118*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83118*0 + 3*58*FLEN/8, x4, x1, x2)

inst_27707:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000000001fff; valaddr_reg:x3; val_offset:83121*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83121*0 + 3*59*FLEN/8, x4, x1, x2)

inst_27708:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000000003fff; valaddr_reg:x3; val_offset:83124*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83124*0 + 3*60*FLEN/8, x4, x1, x2)

inst_27709:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000000007fff; valaddr_reg:x3; val_offset:83127*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83127*0 + 3*61*FLEN/8, x4, x1, x2)

inst_27710:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000000000ffff; valaddr_reg:x3; val_offset:83130*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83130*0 + 3*62*FLEN/8, x4, x1, x2)

inst_27711:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000000001ffff; valaddr_reg:x3; val_offset:83133*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83133*0 + 3*63*FLEN/8, x4, x1, x2)

inst_27712:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000000003ffff; valaddr_reg:x3; val_offset:83136*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83136*0 + 3*64*FLEN/8, x4, x1, x2)

inst_27713:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000000007ffff; valaddr_reg:x3; val_offset:83139*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83139*0 + 3*65*FLEN/8, x4, x1, x2)

inst_27714:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500000000fffff; valaddr_reg:x3; val_offset:83142*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83142*0 + 3*66*FLEN/8, x4, x1, x2)

inst_27715:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500000001fffff; valaddr_reg:x3; val_offset:83145*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83145*0 + 3*67*FLEN/8, x4, x1, x2)

inst_27716:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500000003fffff; valaddr_reg:x3; val_offset:83148*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83148*0 + 3*68*FLEN/8, x4, x1, x2)

inst_27717:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500000007fffff; valaddr_reg:x3; val_offset:83151*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83151*0 + 3*69*FLEN/8, x4, x1, x2)

inst_27718:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000000ffffff; valaddr_reg:x3; val_offset:83154*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83154*0 + 3*70*FLEN/8, x4, x1, x2)

inst_27719:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000001ffffff; valaddr_reg:x3; val_offset:83157*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83157*0 + 3*71*FLEN/8, x4, x1, x2)

inst_27720:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000003ffffff; valaddr_reg:x3; val_offset:83160*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83160*0 + 3*72*FLEN/8, x4, x1, x2)

inst_27721:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000007ffffff; valaddr_reg:x3; val_offset:83163*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83163*0 + 3*73*FLEN/8, x4, x1, x2)

inst_27722:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000000fffffff; valaddr_reg:x3; val_offset:83166*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83166*0 + 3*74*FLEN/8, x4, x1, x2)

inst_27723:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000001fffffff; valaddr_reg:x3; val_offset:83169*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83169*0 + 3*75*FLEN/8, x4, x1, x2)

inst_27724:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000003fffffff; valaddr_reg:x3; val_offset:83172*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83172*0 + 3*76*FLEN/8, x4, x1, x2)

inst_27725:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000007fffffff; valaddr_reg:x3; val_offset:83175*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83175*0 + 3*77*FLEN/8, x4, x1, x2)

inst_27726:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500000ffffffff; valaddr_reg:x3; val_offset:83178*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83178*0 + 3*78*FLEN/8, x4, x1, x2)

inst_27727:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500001ffffffff; valaddr_reg:x3; val_offset:83181*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83181*0 + 3*79*FLEN/8, x4, x1, x2)

inst_27728:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500003ffffffff; valaddr_reg:x3; val_offset:83184*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83184*0 + 3*80*FLEN/8, x4, x1, x2)

inst_27729:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500007ffffffff; valaddr_reg:x3; val_offset:83187*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83187*0 + 3*81*FLEN/8, x4, x1, x2)

inst_27730:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150000fffffffff; valaddr_reg:x3; val_offset:83190*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83190*0 + 3*82*FLEN/8, x4, x1, x2)

inst_27731:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150001fffffffff; valaddr_reg:x3; val_offset:83193*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83193*0 + 3*83*FLEN/8, x4, x1, x2)

inst_27732:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150003fffffffff; valaddr_reg:x3; val_offset:83196*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83196*0 + 3*84*FLEN/8, x4, x1, x2)

inst_27733:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150007fffffffff; valaddr_reg:x3; val_offset:83199*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83199*0 + 3*85*FLEN/8, x4, x1, x2)

inst_27734:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815000ffffffffff; valaddr_reg:x3; val_offset:83202*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83202*0 + 3*86*FLEN/8, x4, x1, x2)

inst_27735:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815001ffffffffff; valaddr_reg:x3; val_offset:83205*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83205*0 + 3*87*FLEN/8, x4, x1, x2)

inst_27736:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815003ffffffffff; valaddr_reg:x3; val_offset:83208*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83208*0 + 3*88*FLEN/8, x4, x1, x2)

inst_27737:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815007ffffffffff; valaddr_reg:x3; val_offset:83211*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83211*0 + 3*89*FLEN/8, x4, x1, x2)

inst_27738:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81500fffffffffff; valaddr_reg:x3; val_offset:83214*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83214*0 + 3*90*FLEN/8, x4, x1, x2)

inst_27739:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81501fffffffffff; valaddr_reg:x3; val_offset:83217*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83217*0 + 3*91*FLEN/8, x4, x1, x2)

inst_27740:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81503fffffffffff; valaddr_reg:x3; val_offset:83220*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83220*0 + 3*92*FLEN/8, x4, x1, x2)

inst_27741:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x81507fffffffffff; valaddr_reg:x3; val_offset:83223*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83223*0 + 3*93*FLEN/8, x4, x1, x2)

inst_27742:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8150ffffffffffff; valaddr_reg:x3; val_offset:83226*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83226*0 + 3*94*FLEN/8, x4, x1, x2)

inst_27743:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8151ffffffffffff; valaddr_reg:x3; val_offset:83229*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83229*0 + 3*95*FLEN/8, x4, x1, x2)

inst_27744:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8153ffffffffffff; valaddr_reg:x3; val_offset:83232*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83232*0 + 3*96*FLEN/8, x4, x1, x2)

inst_27745:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8157ffffffffffff; valaddr_reg:x3; val_offset:83235*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83235*0 + 3*97*FLEN/8, x4, x1, x2)

inst_27746:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x8158000000000000; valaddr_reg:x3; val_offset:83238*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83238*0 + 3*98*FLEN/8, x4, x1, x2)

inst_27747:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815c000000000000; valaddr_reg:x3; val_offset:83241*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83241*0 + 3*99*FLEN/8, x4, x1, x2)

inst_27748:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815e000000000000; valaddr_reg:x3; val_offset:83244*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83244*0 + 3*100*FLEN/8, x4, x1, x2)

inst_27749:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815f000000000000; valaddr_reg:x3; val_offset:83247*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83247*0 + 3*101*FLEN/8, x4, x1, x2)

inst_27750:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815f800000000000; valaddr_reg:x3; val_offset:83250*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83250*0 + 3*102*FLEN/8, x4, x1, x2)

inst_27751:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fc00000000000; valaddr_reg:x3; val_offset:83253*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83253*0 + 3*103*FLEN/8, x4, x1, x2)

inst_27752:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fe00000000000; valaddr_reg:x3; val_offset:83256*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83256*0 + 3*104*FLEN/8, x4, x1, x2)

inst_27753:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ff00000000000; valaddr_reg:x3; val_offset:83259*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83259*0 + 3*105*FLEN/8, x4, x1, x2)

inst_27754:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ff80000000000; valaddr_reg:x3; val_offset:83262*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83262*0 + 3*106*FLEN/8, x4, x1, x2)

inst_27755:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffc0000000000; valaddr_reg:x3; val_offset:83265*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83265*0 + 3*107*FLEN/8, x4, x1, x2)

inst_27756:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffe0000000000; valaddr_reg:x3; val_offset:83268*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83268*0 + 3*108*FLEN/8, x4, x1, x2)

inst_27757:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fff0000000000; valaddr_reg:x3; val_offset:83271*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83271*0 + 3*109*FLEN/8, x4, x1, x2)

inst_27758:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fff8000000000; valaddr_reg:x3; val_offset:83274*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83274*0 + 3*110*FLEN/8, x4, x1, x2)

inst_27759:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffc000000000; valaddr_reg:x3; val_offset:83277*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83277*0 + 3*111*FLEN/8, x4, x1, x2)

inst_27760:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffe000000000; valaddr_reg:x3; val_offset:83280*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83280*0 + 3*112*FLEN/8, x4, x1, x2)

inst_27761:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffff000000000; valaddr_reg:x3; val_offset:83283*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83283*0 + 3*113*FLEN/8, x4, x1, x2)

inst_27762:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffff800000000; valaddr_reg:x3; val_offset:83286*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83286*0 + 3*114*FLEN/8, x4, x1, x2)

inst_27763:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffc00000000; valaddr_reg:x3; val_offset:83289*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83289*0 + 3*115*FLEN/8, x4, x1, x2)

inst_27764:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffe00000000; valaddr_reg:x3; val_offset:83292*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83292*0 + 3*116*FLEN/8, x4, x1, x2)

inst_27765:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffff00000000; valaddr_reg:x3; val_offset:83295*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83295*0 + 3*117*FLEN/8, x4, x1, x2)

inst_27766:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffff80000000; valaddr_reg:x3; val_offset:83298*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83298*0 + 3*118*FLEN/8, x4, x1, x2)

inst_27767:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffc0000000; valaddr_reg:x3; val_offset:83301*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83301*0 + 3*119*FLEN/8, x4, x1, x2)

inst_27768:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffe0000000; valaddr_reg:x3; val_offset:83304*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83304*0 + 3*120*FLEN/8, x4, x1, x2)

inst_27769:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffff0000000; valaddr_reg:x3; val_offset:83307*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83307*0 + 3*121*FLEN/8, x4, x1, x2)

inst_27770:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffff8000000; valaddr_reg:x3; val_offset:83310*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83310*0 + 3*122*FLEN/8, x4, x1, x2)

inst_27771:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffc000000; valaddr_reg:x3; val_offset:83313*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83313*0 + 3*123*FLEN/8, x4, x1, x2)

inst_27772:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffe000000; valaddr_reg:x3; val_offset:83316*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83316*0 + 3*124*FLEN/8, x4, x1, x2)

inst_27773:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffff000000; valaddr_reg:x3; val_offset:83319*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83319*0 + 3*125*FLEN/8, x4, x1, x2)

inst_27774:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffff800000; valaddr_reg:x3; val_offset:83322*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83322*0 + 3*126*FLEN/8, x4, x1, x2)

inst_27775:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffc00000; valaddr_reg:x3; val_offset:83325*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83325*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_27776:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffe00000; valaddr_reg:x3; val_offset:83328*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83328*0 + 3*128*FLEN/8, x4, x1, x2)

inst_27777:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffff00000; valaddr_reg:x3; val_offset:83331*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83331*0 + 3*129*FLEN/8, x4, x1, x2)

inst_27778:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffff80000; valaddr_reg:x3; val_offset:83334*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83334*0 + 3*130*FLEN/8, x4, x1, x2)

inst_27779:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffffc0000; valaddr_reg:x3; val_offset:83337*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83337*0 + 3*131*FLEN/8, x4, x1, x2)

inst_27780:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffffe0000; valaddr_reg:x3; val_offset:83340*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83340*0 + 3*132*FLEN/8, x4, x1, x2)

inst_27781:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffff0000; valaddr_reg:x3; val_offset:83343*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83343*0 + 3*133*FLEN/8, x4, x1, x2)

inst_27782:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffff8000; valaddr_reg:x3; val_offset:83346*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83346*0 + 3*134*FLEN/8, x4, x1, x2)

inst_27783:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffffc000; valaddr_reg:x3; val_offset:83349*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83349*0 + 3*135*FLEN/8, x4, x1, x2)

inst_27784:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffffe000; valaddr_reg:x3; val_offset:83352*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83352*0 + 3*136*FLEN/8, x4, x1, x2)

inst_27785:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffffff000; valaddr_reg:x3; val_offset:83355*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83355*0 + 3*137*FLEN/8, x4, x1, x2)

inst_27786:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffffff800; valaddr_reg:x3; val_offset:83358*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83358*0 + 3*138*FLEN/8, x4, x1, x2)

inst_27787:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffffffc00; valaddr_reg:x3; val_offset:83361*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83361*0 + 3*139*FLEN/8, x4, x1, x2)

inst_27788:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffffffe00; valaddr_reg:x3; val_offset:83364*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83364*0 + 3*140*FLEN/8, x4, x1, x2)

inst_27789:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffffff00; valaddr_reg:x3; val_offset:83367*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83367*0 + 3*141*FLEN/8, x4, x1, x2)

inst_27790:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffffff80; valaddr_reg:x3; val_offset:83370*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83370*0 + 3*142*FLEN/8, x4, x1, x2)

inst_27791:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffffffc0; valaddr_reg:x3; val_offset:83373*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83373*0 + 3*143*FLEN/8, x4, x1, x2)

inst_27792:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffffffe0; valaddr_reg:x3; val_offset:83376*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83376*0 + 3*144*FLEN/8, x4, x1, x2)

inst_27793:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffffffff0; valaddr_reg:x3; val_offset:83379*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83379*0 + 3*145*FLEN/8, x4, x1, x2)

inst_27794:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffffffff8; valaddr_reg:x3; val_offset:83382*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83382*0 + 3*146*FLEN/8, x4, x1, x2)

inst_27795:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffffffffc; valaddr_reg:x3; val_offset:83385*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83385*0 + 3*147*FLEN/8, x4, x1, x2)

inst_27796:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815ffffffffffffe; valaddr_reg:x3; val_offset:83388*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83388*0 + 3*148*FLEN/8, x4, x1, x2)

inst_27797:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x10319603dabff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x015 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f910319603dabff; op2val:0x8000;
op3val:0x815fffffffffffff; valaddr_reg:x3; val_offset:83391*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83391*0 + 3*149*FLEN/8, x4, x1, x2)

inst_27798:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:83394*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83394*0 + 3*150*FLEN/8, x4, x1, x2)

inst_27799:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:83397*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83397*0 + 3*151*FLEN/8, x4, x1, x2)

inst_27800:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:83400*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83400*0 + 3*152*FLEN/8, x4, x1, x2)

inst_27801:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:83403*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83403*0 + 3*153*FLEN/8, x4, x1, x2)

inst_27802:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:83406*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83406*0 + 3*154*FLEN/8, x4, x1, x2)

inst_27803:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:83409*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83409*0 + 3*155*FLEN/8, x4, x1, x2)

inst_27804:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:83412*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83412*0 + 3*156*FLEN/8, x4, x1, x2)

inst_27805:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:83415*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83415*0 + 3*157*FLEN/8, x4, x1, x2)

inst_27806:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:83418*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83418*0 + 3*158*FLEN/8, x4, x1, x2)

inst_27807:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:83421*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83421*0 + 3*159*FLEN/8, x4, x1, x2)

inst_27808:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:83424*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83424*0 + 3*160*FLEN/8, x4, x1, x2)

inst_27809:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:83427*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83427*0 + 3*161*FLEN/8, x4, x1, x2)

inst_27810:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:83430*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83430*0 + 3*162*FLEN/8, x4, x1, x2)

inst_27811:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:83433*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83433*0 + 3*163*FLEN/8, x4, x1, x2)

inst_27812:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:83436*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83436*0 + 3*164*FLEN/8, x4, x1, x2)

inst_27813:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:83439*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83439*0 + 3*165*FLEN/8, x4, x1, x2)

inst_27814:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:83442*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83442*0 + 3*166*FLEN/8, x4, x1, x2)

inst_27815:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:83445*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83445*0 + 3*167*FLEN/8, x4, x1, x2)

inst_27816:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:83448*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83448*0 + 3*168*FLEN/8, x4, x1, x2)

inst_27817:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:83451*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83451*0 + 3*169*FLEN/8, x4, x1, x2)

inst_27818:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:83454*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83454*0 + 3*170*FLEN/8, x4, x1, x2)

inst_27819:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:83457*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83457*0 + 3*171*FLEN/8, x4, x1, x2)

inst_27820:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000000000000; valaddr_reg:x3; val_offset:83460*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83460*0 + 3*172*FLEN/8, x4, x1, x2)

inst_27821:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000000000001; valaddr_reg:x3; val_offset:83463*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83463*0 + 3*173*FLEN/8, x4, x1, x2)

inst_27822:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000000000003; valaddr_reg:x3; val_offset:83466*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83466*0 + 3*174*FLEN/8, x4, x1, x2)

inst_27823:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000000000007; valaddr_reg:x3; val_offset:83469*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83469*0 + 3*175*FLEN/8, x4, x1, x2)

inst_27824:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000000000000f; valaddr_reg:x3; val_offset:83472*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83472*0 + 3*176*FLEN/8, x4, x1, x2)

inst_27825:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000000000001f; valaddr_reg:x3; val_offset:83475*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83475*0 + 3*177*FLEN/8, x4, x1, x2)

inst_27826:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000000000003f; valaddr_reg:x3; val_offset:83478*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83478*0 + 3*178*FLEN/8, x4, x1, x2)

inst_27827:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000000000007f; valaddr_reg:x3; val_offset:83481*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83481*0 + 3*179*FLEN/8, x4, x1, x2)

inst_27828:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500000000000ff; valaddr_reg:x3; val_offset:83484*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83484*0 + 3*180*FLEN/8, x4, x1, x2)

inst_27829:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500000000001ff; valaddr_reg:x3; val_offset:83487*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83487*0 + 3*181*FLEN/8, x4, x1, x2)

inst_27830:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500000000003ff; valaddr_reg:x3; val_offset:83490*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83490*0 + 3*182*FLEN/8, x4, x1, x2)

inst_27831:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500000000007ff; valaddr_reg:x3; val_offset:83493*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83493*0 + 3*183*FLEN/8, x4, x1, x2)

inst_27832:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000000000fff; valaddr_reg:x3; val_offset:83496*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83496*0 + 3*184*FLEN/8, x4, x1, x2)

inst_27833:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000000001fff; valaddr_reg:x3; val_offset:83499*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83499*0 + 3*185*FLEN/8, x4, x1, x2)

inst_27834:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000000003fff; valaddr_reg:x3; val_offset:83502*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83502*0 + 3*186*FLEN/8, x4, x1, x2)

inst_27835:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000000007fff; valaddr_reg:x3; val_offset:83505*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83505*0 + 3*187*FLEN/8, x4, x1, x2)

inst_27836:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000000000ffff; valaddr_reg:x3; val_offset:83508*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83508*0 + 3*188*FLEN/8, x4, x1, x2)

inst_27837:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000000001ffff; valaddr_reg:x3; val_offset:83511*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83511*0 + 3*189*FLEN/8, x4, x1, x2)

inst_27838:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000000003ffff; valaddr_reg:x3; val_offset:83514*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83514*0 + 3*190*FLEN/8, x4, x1, x2)

inst_27839:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000000007ffff; valaddr_reg:x3; val_offset:83517*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83517*0 + 3*191*FLEN/8, x4, x1, x2)

inst_27840:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500000000fffff; valaddr_reg:x3; val_offset:83520*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83520*0 + 3*192*FLEN/8, x4, x1, x2)

inst_27841:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500000001fffff; valaddr_reg:x3; val_offset:83523*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83523*0 + 3*193*FLEN/8, x4, x1, x2)

inst_27842:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500000003fffff; valaddr_reg:x3; val_offset:83526*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83526*0 + 3*194*FLEN/8, x4, x1, x2)

inst_27843:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500000007fffff; valaddr_reg:x3; val_offset:83529*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83529*0 + 3*195*FLEN/8, x4, x1, x2)

inst_27844:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000000ffffff; valaddr_reg:x3; val_offset:83532*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83532*0 + 3*196*FLEN/8, x4, x1, x2)

inst_27845:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000001ffffff; valaddr_reg:x3; val_offset:83535*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83535*0 + 3*197*FLEN/8, x4, x1, x2)

inst_27846:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000003ffffff; valaddr_reg:x3; val_offset:83538*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83538*0 + 3*198*FLEN/8, x4, x1, x2)

inst_27847:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000007ffffff; valaddr_reg:x3; val_offset:83541*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83541*0 + 3*199*FLEN/8, x4, x1, x2)

inst_27848:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000000fffffff; valaddr_reg:x3; val_offset:83544*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83544*0 + 3*200*FLEN/8, x4, x1, x2)

inst_27849:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000001fffffff; valaddr_reg:x3; val_offset:83547*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83547*0 + 3*201*FLEN/8, x4, x1, x2)

inst_27850:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000003fffffff; valaddr_reg:x3; val_offset:83550*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83550*0 + 3*202*FLEN/8, x4, x1, x2)

inst_27851:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000007fffffff; valaddr_reg:x3; val_offset:83553*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83553*0 + 3*203*FLEN/8, x4, x1, x2)

inst_27852:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500000ffffffff; valaddr_reg:x3; val_offset:83556*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83556*0 + 3*204*FLEN/8, x4, x1, x2)

inst_27853:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500001ffffffff; valaddr_reg:x3; val_offset:83559*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83559*0 + 3*205*FLEN/8, x4, x1, x2)

inst_27854:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500003ffffffff; valaddr_reg:x3; val_offset:83562*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83562*0 + 3*206*FLEN/8, x4, x1, x2)

inst_27855:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500007ffffffff; valaddr_reg:x3; val_offset:83565*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83565*0 + 3*207*FLEN/8, x4, x1, x2)

inst_27856:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050000fffffffff; valaddr_reg:x3; val_offset:83568*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83568*0 + 3*208*FLEN/8, x4, x1, x2)

inst_27857:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050001fffffffff; valaddr_reg:x3; val_offset:83571*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83571*0 + 3*209*FLEN/8, x4, x1, x2)

inst_27858:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050003fffffffff; valaddr_reg:x3; val_offset:83574*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83574*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27859:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050007fffffffff; valaddr_reg:x3; val_offset:83577*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83577*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27860:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805000ffffffffff; valaddr_reg:x3; val_offset:83580*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83580*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27861:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805001ffffffffff; valaddr_reg:x3; val_offset:83583*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83583*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27862:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805003ffffffffff; valaddr_reg:x3; val_offset:83586*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83586*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27863:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805007ffffffffff; valaddr_reg:x3; val_offset:83589*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83589*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27864:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80500fffffffffff; valaddr_reg:x3; val_offset:83592*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83592*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27865:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80501fffffffffff; valaddr_reg:x3; val_offset:83595*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83595*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27866:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80503fffffffffff; valaddr_reg:x3; val_offset:83598*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83598*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27867:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x80507fffffffffff; valaddr_reg:x3; val_offset:83601*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83601*0 + 3*219*FLEN/8, x4, x1, x2)

inst_27868:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8050ffffffffffff; valaddr_reg:x3; val_offset:83604*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83604*0 + 3*220*FLEN/8, x4, x1, x2)

inst_27869:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8051ffffffffffff; valaddr_reg:x3; val_offset:83607*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83607*0 + 3*221*FLEN/8, x4, x1, x2)

inst_27870:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8053ffffffffffff; valaddr_reg:x3; val_offset:83610*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83610*0 + 3*222*FLEN/8, x4, x1, x2)

inst_27871:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8057ffffffffffff; valaddr_reg:x3; val_offset:83613*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83613*0 + 3*223*FLEN/8, x4, x1, x2)

inst_27872:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x8058000000000000; valaddr_reg:x3; val_offset:83616*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83616*0 + 3*224*FLEN/8, x4, x1, x2)

inst_27873:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805c000000000000; valaddr_reg:x3; val_offset:83619*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83619*0 + 3*225*FLEN/8, x4, x1, x2)

inst_27874:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805e000000000000; valaddr_reg:x3; val_offset:83622*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83622*0 + 3*226*FLEN/8, x4, x1, x2)

inst_27875:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805f000000000000; valaddr_reg:x3; val_offset:83625*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83625*0 + 3*227*FLEN/8, x4, x1, x2)

inst_27876:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805f800000000000; valaddr_reg:x3; val_offset:83628*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83628*0 + 3*228*FLEN/8, x4, x1, x2)

inst_27877:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fc00000000000; valaddr_reg:x3; val_offset:83631*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83631*0 + 3*229*FLEN/8, x4, x1, x2)

inst_27878:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fe00000000000; valaddr_reg:x3; val_offset:83634*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83634*0 + 3*230*FLEN/8, x4, x1, x2)

inst_27879:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ff00000000000; valaddr_reg:x3; val_offset:83637*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83637*0 + 3*231*FLEN/8, x4, x1, x2)

inst_27880:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ff80000000000; valaddr_reg:x3; val_offset:83640*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83640*0 + 3*232*FLEN/8, x4, x1, x2)

inst_27881:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffc0000000000; valaddr_reg:x3; val_offset:83643*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83643*0 + 3*233*FLEN/8, x4, x1, x2)

inst_27882:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffe0000000000; valaddr_reg:x3; val_offset:83646*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83646*0 + 3*234*FLEN/8, x4, x1, x2)

inst_27883:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fff0000000000; valaddr_reg:x3; val_offset:83649*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83649*0 + 3*235*FLEN/8, x4, x1, x2)

inst_27884:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fff8000000000; valaddr_reg:x3; val_offset:83652*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83652*0 + 3*236*FLEN/8, x4, x1, x2)

inst_27885:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffc000000000; valaddr_reg:x3; val_offset:83655*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83655*0 + 3*237*FLEN/8, x4, x1, x2)

inst_27886:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffe000000000; valaddr_reg:x3; val_offset:83658*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83658*0 + 3*238*FLEN/8, x4, x1, x2)

inst_27887:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffff000000000; valaddr_reg:x3; val_offset:83661*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83661*0 + 3*239*FLEN/8, x4, x1, x2)

inst_27888:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffff800000000; valaddr_reg:x3; val_offset:83664*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83664*0 + 3*240*FLEN/8, x4, x1, x2)

inst_27889:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffc00000000; valaddr_reg:x3; val_offset:83667*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83667*0 + 3*241*FLEN/8, x4, x1, x2)

inst_27890:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffe00000000; valaddr_reg:x3; val_offset:83670*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83670*0 + 3*242*FLEN/8, x4, x1, x2)

inst_27891:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffff00000000; valaddr_reg:x3; val_offset:83673*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83673*0 + 3*243*FLEN/8, x4, x1, x2)

inst_27892:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffff80000000; valaddr_reg:x3; val_offset:83676*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83676*0 + 3*244*FLEN/8, x4, x1, x2)

inst_27893:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffc0000000; valaddr_reg:x3; val_offset:83679*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83679*0 + 3*245*FLEN/8, x4, x1, x2)

inst_27894:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffe0000000; valaddr_reg:x3; val_offset:83682*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83682*0 + 3*246*FLEN/8, x4, x1, x2)

inst_27895:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffff0000000; valaddr_reg:x3; val_offset:83685*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83685*0 + 3*247*FLEN/8, x4, x1, x2)

inst_27896:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffff8000000; valaddr_reg:x3; val_offset:83688*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83688*0 + 3*248*FLEN/8, x4, x1, x2)

inst_27897:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffc000000; valaddr_reg:x3; val_offset:83691*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83691*0 + 3*249*FLEN/8, x4, x1, x2)

inst_27898:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffe000000; valaddr_reg:x3; val_offset:83694*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83694*0 + 3*250*FLEN/8, x4, x1, x2)

inst_27899:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffff000000; valaddr_reg:x3; val_offset:83697*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83697*0 + 3*251*FLEN/8, x4, x1, x2)

inst_27900:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffff800000; valaddr_reg:x3; val_offset:83700*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83700*0 + 3*252*FLEN/8, x4, x1, x2)

inst_27901:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffc00000; valaddr_reg:x3; val_offset:83703*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83703*0 + 3*253*FLEN/8, x4, x1, x2)

inst_27902:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffe00000; valaddr_reg:x3; val_offset:83706*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83706*0 + 3*254*FLEN/8, x4, x1, x2)

inst_27903:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffff00000; valaddr_reg:x3; val_offset:83709*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83709*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_27904:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffff80000; valaddr_reg:x3; val_offset:83712*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83712*0 + 3*256*FLEN/8, x4, x1, x2)

inst_27905:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffffc0000; valaddr_reg:x3; val_offset:83715*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83715*0 + 3*257*FLEN/8, x4, x1, x2)

inst_27906:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffffe0000; valaddr_reg:x3; val_offset:83718*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83718*0 + 3*258*FLEN/8, x4, x1, x2)

inst_27907:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffff0000; valaddr_reg:x3; val_offset:83721*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83721*0 + 3*259*FLEN/8, x4, x1, x2)

inst_27908:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffff8000; valaddr_reg:x3; val_offset:83724*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83724*0 + 3*260*FLEN/8, x4, x1, x2)

inst_27909:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffffc000; valaddr_reg:x3; val_offset:83727*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83727*0 + 3*261*FLEN/8, x4, x1, x2)

inst_27910:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffffe000; valaddr_reg:x3; val_offset:83730*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83730*0 + 3*262*FLEN/8, x4, x1, x2)

inst_27911:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffffff000; valaddr_reg:x3; val_offset:83733*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83733*0 + 3*263*FLEN/8, x4, x1, x2)

inst_27912:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffffff800; valaddr_reg:x3; val_offset:83736*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83736*0 + 3*264*FLEN/8, x4, x1, x2)

inst_27913:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffffffc00; valaddr_reg:x3; val_offset:83739*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83739*0 + 3*265*FLEN/8, x4, x1, x2)

inst_27914:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffffffe00; valaddr_reg:x3; val_offset:83742*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83742*0 + 3*266*FLEN/8, x4, x1, x2)

inst_27915:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffffff00; valaddr_reg:x3; val_offset:83745*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83745*0 + 3*267*FLEN/8, x4, x1, x2)

inst_27916:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffffff80; valaddr_reg:x3; val_offset:83748*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83748*0 + 3*268*FLEN/8, x4, x1, x2)

inst_27917:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffffffc0; valaddr_reg:x3; val_offset:83751*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83751*0 + 3*269*FLEN/8, x4, x1, x2)

inst_27918:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffffffe0; valaddr_reg:x3; val_offset:83754*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83754*0 + 3*270*FLEN/8, x4, x1, x2)

inst_27919:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffffffff0; valaddr_reg:x3; val_offset:83757*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83757*0 + 3*271*FLEN/8, x4, x1, x2)

inst_27920:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffffffff8; valaddr_reg:x3; val_offset:83760*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83760*0 + 3*272*FLEN/8, x4, x1, x2)

inst_27921:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffffffffc; valaddr_reg:x3; val_offset:83763*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83763*0 + 3*273*FLEN/8, x4, x1, x2)

inst_27922:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805ffffffffffffe; valaddr_reg:x3; val_offset:83766*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83766*0 + 3*274*FLEN/8, x4, x1, x2)

inst_27923:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1039f3a2aafd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x005 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91039f3a2aafd1; op2val:0x8000;
op3val:0x805fffffffffffff; valaddr_reg:x3; val_offset:83769*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83769*0 + 3*275*FLEN/8, x4, x1, x2)

inst_27924:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:83772*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83772*0 + 3*276*FLEN/8, x4, x1, x2)

inst_27925:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:83775*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83775*0 + 3*277*FLEN/8, x4, x1, x2)

inst_27926:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:83778*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83778*0 + 3*278*FLEN/8, x4, x1, x2)

inst_27927:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:83781*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83781*0 + 3*279*FLEN/8, x4, x1, x2)

inst_27928:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:83784*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83784*0 + 3*280*FLEN/8, x4, x1, x2)

inst_27929:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:83787*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83787*0 + 3*281*FLEN/8, x4, x1, x2)

inst_27930:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:83790*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83790*0 + 3*282*FLEN/8, x4, x1, x2)

inst_27931:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:83793*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83793*0 + 3*283*FLEN/8, x4, x1, x2)

inst_27932:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:83796*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83796*0 + 3*284*FLEN/8, x4, x1, x2)

inst_27933:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:83799*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83799*0 + 3*285*FLEN/8, x4, x1, x2)

inst_27934:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:83802*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83802*0 + 3*286*FLEN/8, x4, x1, x2)

inst_27935:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:83805*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83805*0 + 3*287*FLEN/8, x4, x1, x2)

inst_27936:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:83808*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83808*0 + 3*288*FLEN/8, x4, x1, x2)

inst_27937:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:83811*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83811*0 + 3*289*FLEN/8, x4, x1, x2)

inst_27938:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:83814*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83814*0 + 3*290*FLEN/8, x4, x1, x2)

inst_27939:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:83817*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83817*0 + 3*291*FLEN/8, x4, x1, x2)

inst_27940:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:83820*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83820*0 + 3*292*FLEN/8, x4, x1, x2)

inst_27941:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:83823*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83823*0 + 3*293*FLEN/8, x4, x1, x2)

inst_27942:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:83826*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83826*0 + 3*294*FLEN/8, x4, x1, x2)

inst_27943:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:83829*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83829*0 + 3*295*FLEN/8, x4, x1, x2)

inst_27944:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:83832*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83832*0 + 3*296*FLEN/8, x4, x1, x2)

inst_27945:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:83835*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83835*0 + 3*297*FLEN/8, x4, x1, x2)

inst_27946:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000000000000; valaddr_reg:x3; val_offset:83838*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83838*0 + 3*298*FLEN/8, x4, x1, x2)

inst_27947:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000000000001; valaddr_reg:x3; val_offset:83841*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83841*0 + 3*299*FLEN/8, x4, x1, x2)

inst_27948:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000000000003; valaddr_reg:x3; val_offset:83844*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83844*0 + 3*300*FLEN/8, x4, x1, x2)

inst_27949:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000000000007; valaddr_reg:x3; val_offset:83847*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83847*0 + 3*301*FLEN/8, x4, x1, x2)

inst_27950:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000000000000f; valaddr_reg:x3; val_offset:83850*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83850*0 + 3*302*FLEN/8, x4, x1, x2)

inst_27951:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000000000001f; valaddr_reg:x3; val_offset:83853*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83853*0 + 3*303*FLEN/8, x4, x1, x2)

inst_27952:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000000000003f; valaddr_reg:x3; val_offset:83856*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83856*0 + 3*304*FLEN/8, x4, x1, x2)

inst_27953:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000000000007f; valaddr_reg:x3; val_offset:83859*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83859*0 + 3*305*FLEN/8, x4, x1, x2)

inst_27954:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00000000000ff; valaddr_reg:x3; val_offset:83862*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83862*0 + 3*306*FLEN/8, x4, x1, x2)

inst_27955:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00000000001ff; valaddr_reg:x3; val_offset:83865*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83865*0 + 3*307*FLEN/8, x4, x1, x2)

inst_27956:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00000000003ff; valaddr_reg:x3; val_offset:83868*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83868*0 + 3*308*FLEN/8, x4, x1, x2)

inst_27957:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00000000007ff; valaddr_reg:x3; val_offset:83871*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83871*0 + 3*309*FLEN/8, x4, x1, x2)

inst_27958:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000000000fff; valaddr_reg:x3; val_offset:83874*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83874*0 + 3*310*FLEN/8, x4, x1, x2)

inst_27959:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000000001fff; valaddr_reg:x3; val_offset:83877*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83877*0 + 3*311*FLEN/8, x4, x1, x2)

inst_27960:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000000003fff; valaddr_reg:x3; val_offset:83880*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83880*0 + 3*312*FLEN/8, x4, x1, x2)

inst_27961:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000000007fff; valaddr_reg:x3; val_offset:83883*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83883*0 + 3*313*FLEN/8, x4, x1, x2)

inst_27962:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000000000ffff; valaddr_reg:x3; val_offset:83886*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83886*0 + 3*314*FLEN/8, x4, x1, x2)

inst_27963:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000000001ffff; valaddr_reg:x3; val_offset:83889*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83889*0 + 3*315*FLEN/8, x4, x1, x2)

inst_27964:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000000003ffff; valaddr_reg:x3; val_offset:83892*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83892*0 + 3*316*FLEN/8, x4, x1, x2)

inst_27965:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000000007ffff; valaddr_reg:x3; val_offset:83895*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83895*0 + 3*317*FLEN/8, x4, x1, x2)

inst_27966:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00000000fffff; valaddr_reg:x3; val_offset:83898*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83898*0 + 3*318*FLEN/8, x4, x1, x2)

inst_27967:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00000001fffff; valaddr_reg:x3; val_offset:83901*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83901*0 + 3*319*FLEN/8, x4, x1, x2)

inst_27968:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00000003fffff; valaddr_reg:x3; val_offset:83904*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83904*0 + 3*320*FLEN/8, x4, x1, x2)

inst_27969:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00000007fffff; valaddr_reg:x3; val_offset:83907*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83907*0 + 3*321*FLEN/8, x4, x1, x2)

inst_27970:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000000ffffff; valaddr_reg:x3; val_offset:83910*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83910*0 + 3*322*FLEN/8, x4, x1, x2)

inst_27971:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000001ffffff; valaddr_reg:x3; val_offset:83913*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83913*0 + 3*323*FLEN/8, x4, x1, x2)

inst_27972:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000003ffffff; valaddr_reg:x3; val_offset:83916*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83916*0 + 3*324*FLEN/8, x4, x1, x2)

inst_27973:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000007ffffff; valaddr_reg:x3; val_offset:83919*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83919*0 + 3*325*FLEN/8, x4, x1, x2)

inst_27974:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000000fffffff; valaddr_reg:x3; val_offset:83922*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83922*0 + 3*326*FLEN/8, x4, x1, x2)

inst_27975:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000001fffffff; valaddr_reg:x3; val_offset:83925*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83925*0 + 3*327*FLEN/8, x4, x1, x2)

inst_27976:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000003fffffff; valaddr_reg:x3; val_offset:83928*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83928*0 + 3*328*FLEN/8, x4, x1, x2)

inst_27977:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000007fffffff; valaddr_reg:x3; val_offset:83931*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83931*0 + 3*329*FLEN/8, x4, x1, x2)

inst_27978:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00000ffffffff; valaddr_reg:x3; val_offset:83934*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83934*0 + 3*330*FLEN/8, x4, x1, x2)

inst_27979:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00001ffffffff; valaddr_reg:x3; val_offset:83937*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83937*0 + 3*331*FLEN/8, x4, x1, x2)

inst_27980:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00003ffffffff; valaddr_reg:x3; val_offset:83940*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83940*0 + 3*332*FLEN/8, x4, x1, x2)

inst_27981:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00007ffffffff; valaddr_reg:x3; val_offset:83943*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83943*0 + 3*333*FLEN/8, x4, x1, x2)

inst_27982:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0000fffffffff; valaddr_reg:x3; val_offset:83946*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83946*0 + 3*334*FLEN/8, x4, x1, x2)

inst_27983:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0001fffffffff; valaddr_reg:x3; val_offset:83949*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83949*0 + 3*335*FLEN/8, x4, x1, x2)

inst_27984:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0003fffffffff; valaddr_reg:x3; val_offset:83952*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83952*0 + 3*336*FLEN/8, x4, x1, x2)

inst_27985:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0007fffffffff; valaddr_reg:x3; val_offset:83955*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83955*0 + 3*337*FLEN/8, x4, x1, x2)

inst_27986:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d000ffffffffff; valaddr_reg:x3; val_offset:83958*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83958*0 + 3*338*FLEN/8, x4, x1, x2)

inst_27987:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d001ffffffffff; valaddr_reg:x3; val_offset:83961*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83961*0 + 3*339*FLEN/8, x4, x1, x2)

inst_27988:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d003ffffffffff; valaddr_reg:x3; val_offset:83964*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83964*0 + 3*340*FLEN/8, x4, x1, x2)

inst_27989:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d007ffffffffff; valaddr_reg:x3; val_offset:83967*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83967*0 + 3*341*FLEN/8, x4, x1, x2)

inst_27990:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d00fffffffffff; valaddr_reg:x3; val_offset:83970*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83970*0 + 3*342*FLEN/8, x4, x1, x2)

inst_27991:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d01fffffffffff; valaddr_reg:x3; val_offset:83973*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83973*0 + 3*343*FLEN/8, x4, x1, x2)

inst_27992:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d03fffffffffff; valaddr_reg:x3; val_offset:83976*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83976*0 + 3*344*FLEN/8, x4, x1, x2)

inst_27993:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d07fffffffffff; valaddr_reg:x3; val_offset:83979*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83979*0 + 3*345*FLEN/8, x4, x1, x2)

inst_27994:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d0ffffffffffff; valaddr_reg:x3; val_offset:83982*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83982*0 + 3*346*FLEN/8, x4, x1, x2)

inst_27995:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d1ffffffffffff; valaddr_reg:x3; val_offset:83985*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83985*0 + 3*347*FLEN/8, x4, x1, x2)

inst_27996:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d3ffffffffffff; valaddr_reg:x3; val_offset:83988*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83988*0 + 3*348*FLEN/8, x4, x1, x2)

inst_27997:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d7ffffffffffff; valaddr_reg:x3; val_offset:83991*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83991*0 + 3*349*FLEN/8, x4, x1, x2)

inst_27998:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3d8000000000000; valaddr_reg:x3; val_offset:83994*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83994*0 + 3*350*FLEN/8, x4, x1, x2)

inst_27999:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dc000000000000; valaddr_reg:x3; val_offset:83997*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 83997*0 + 3*351*FLEN/8, x4, x1, x2)

inst_28000:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3de000000000000; valaddr_reg:x3; val_offset:84000*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84000*0 + 3*352*FLEN/8, x4, x1, x2)

inst_28001:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3df000000000000; valaddr_reg:x3; val_offset:84003*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84003*0 + 3*353*FLEN/8, x4, x1, x2)

inst_28002:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3df800000000000; valaddr_reg:x3; val_offset:84006*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84006*0 + 3*354*FLEN/8, x4, x1, x2)

inst_28003:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfc00000000000; valaddr_reg:x3; val_offset:84009*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84009*0 + 3*355*FLEN/8, x4, x1, x2)

inst_28004:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfe00000000000; valaddr_reg:x3; val_offset:84012*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84012*0 + 3*356*FLEN/8, x4, x1, x2)

inst_28005:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dff00000000000; valaddr_reg:x3; val_offset:84015*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84015*0 + 3*357*FLEN/8, x4, x1, x2)

inst_28006:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dff80000000000; valaddr_reg:x3; val_offset:84018*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84018*0 + 3*358*FLEN/8, x4, x1, x2)

inst_28007:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffc0000000000; valaddr_reg:x3; val_offset:84021*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84021*0 + 3*359*FLEN/8, x4, x1, x2)

inst_28008:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffe0000000000; valaddr_reg:x3; val_offset:84024*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84024*0 + 3*360*FLEN/8, x4, x1, x2)

inst_28009:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfff0000000000; valaddr_reg:x3; val_offset:84027*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84027*0 + 3*361*FLEN/8, x4, x1, x2)

inst_28010:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfff8000000000; valaddr_reg:x3; val_offset:84030*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84030*0 + 3*362*FLEN/8, x4, x1, x2)

inst_28011:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffc000000000; valaddr_reg:x3; val_offset:84033*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84033*0 + 3*363*FLEN/8, x4, x1, x2)

inst_28012:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffe000000000; valaddr_reg:x3; val_offset:84036*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84036*0 + 3*364*FLEN/8, x4, x1, x2)

inst_28013:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffff000000000; valaddr_reg:x3; val_offset:84039*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84039*0 + 3*365*FLEN/8, x4, x1, x2)

inst_28014:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffff800000000; valaddr_reg:x3; val_offset:84042*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84042*0 + 3*366*FLEN/8, x4, x1, x2)

inst_28015:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffc00000000; valaddr_reg:x3; val_offset:84045*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84045*0 + 3*367*FLEN/8, x4, x1, x2)

inst_28016:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffe00000000; valaddr_reg:x3; val_offset:84048*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84048*0 + 3*368*FLEN/8, x4, x1, x2)

inst_28017:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffff00000000; valaddr_reg:x3; val_offset:84051*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84051*0 + 3*369*FLEN/8, x4, x1, x2)

inst_28018:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffff80000000; valaddr_reg:x3; val_offset:84054*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84054*0 + 3*370*FLEN/8, x4, x1, x2)

inst_28019:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffc0000000; valaddr_reg:x3; val_offset:84057*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84057*0 + 3*371*FLEN/8, x4, x1, x2)

inst_28020:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffe0000000; valaddr_reg:x3; val_offset:84060*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84060*0 + 3*372*FLEN/8, x4, x1, x2)

inst_28021:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffff0000000; valaddr_reg:x3; val_offset:84063*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84063*0 + 3*373*FLEN/8, x4, x1, x2)

inst_28022:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffff8000000; valaddr_reg:x3; val_offset:84066*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84066*0 + 3*374*FLEN/8, x4, x1, x2)

inst_28023:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffc000000; valaddr_reg:x3; val_offset:84069*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84069*0 + 3*375*FLEN/8, x4, x1, x2)

inst_28024:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffe000000; valaddr_reg:x3; val_offset:84072*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84072*0 + 3*376*FLEN/8, x4, x1, x2)

inst_28025:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffff000000; valaddr_reg:x3; val_offset:84075*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84075*0 + 3*377*FLEN/8, x4, x1, x2)

inst_28026:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffff800000; valaddr_reg:x3; val_offset:84078*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84078*0 + 3*378*FLEN/8, x4, x1, x2)

inst_28027:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffc00000; valaddr_reg:x3; val_offset:84081*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84081*0 + 3*379*FLEN/8, x4, x1, x2)

inst_28028:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffe00000; valaddr_reg:x3; val_offset:84084*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84084*0 + 3*380*FLEN/8, x4, x1, x2)

inst_28029:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffff00000; valaddr_reg:x3; val_offset:84087*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84087*0 + 3*381*FLEN/8, x4, x1, x2)

inst_28030:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffff80000; valaddr_reg:x3; val_offset:84090*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84090*0 + 3*382*FLEN/8, x4, x1, x2)

inst_28031:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffffc0000; valaddr_reg:x3; val_offset:84093*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84093*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_28032:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffffe0000; valaddr_reg:x3; val_offset:84096*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84096*0 + 3*384*FLEN/8, x4, x1, x2)

inst_28033:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffff0000; valaddr_reg:x3; val_offset:84099*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84099*0 + 3*385*FLEN/8, x4, x1, x2)

inst_28034:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffff8000; valaddr_reg:x3; val_offset:84102*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84102*0 + 3*386*FLEN/8, x4, x1, x2)

inst_28035:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffffc000; valaddr_reg:x3; val_offset:84105*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84105*0 + 3*387*FLEN/8, x4, x1, x2)

inst_28036:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffffe000; valaddr_reg:x3; val_offset:84108*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84108*0 + 3*388*FLEN/8, x4, x1, x2)

inst_28037:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffffff000; valaddr_reg:x3; val_offset:84111*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84111*0 + 3*389*FLEN/8, x4, x1, x2)

inst_28038:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffffff800; valaddr_reg:x3; val_offset:84114*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84114*0 + 3*390*FLEN/8, x4, x1, x2)

inst_28039:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffffffc00; valaddr_reg:x3; val_offset:84117*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84117*0 + 3*391*FLEN/8, x4, x1, x2)

inst_28040:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffffffe00; valaddr_reg:x3; val_offset:84120*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84120*0 + 3*392*FLEN/8, x4, x1, x2)

inst_28041:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffffff00; valaddr_reg:x3; val_offset:84123*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84123*0 + 3*393*FLEN/8, x4, x1, x2)

inst_28042:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffffff80; valaddr_reg:x3; val_offset:84126*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84126*0 + 3*394*FLEN/8, x4, x1, x2)

inst_28043:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffffffc0; valaddr_reg:x3; val_offset:84129*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84129*0 + 3*395*FLEN/8, x4, x1, x2)

inst_28044:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffffffe0; valaddr_reg:x3; val_offset:84132*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84132*0 + 3*396*FLEN/8, x4, x1, x2)

inst_28045:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffffffff0; valaddr_reg:x3; val_offset:84135*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84135*0 + 3*397*FLEN/8, x4, x1, x2)

inst_28046:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffffffff8; valaddr_reg:x3; val_offset:84138*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84138*0 + 3*398*FLEN/8, x4, x1, x2)

inst_28047:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffffffffc; valaddr_reg:x3; val_offset:84141*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84141*0 + 3*399*FLEN/8, x4, x1, x2)

inst_28048:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dffffffffffffe; valaddr_reg:x3; val_offset:84144*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84144*0 + 3*400*FLEN/8, x4, x1, x2)

inst_28049:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x117eb4a4797c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9117eb4a4797c5; op2val:0x0;
op3val:0x3dfffffffffffff; valaddr_reg:x3; val_offset:84147*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84147*0 + 3*401*FLEN/8, x4, x1, x2)

inst_28050:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000000000000; valaddr_reg:x3; val_offset:84150*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84150*0 + 3*402*FLEN/8, x4, x1, x2)

inst_28051:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000000000001; valaddr_reg:x3; val_offset:84153*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84153*0 + 3*403*FLEN/8, x4, x1, x2)

inst_28052:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000000000003; valaddr_reg:x3; val_offset:84156*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84156*0 + 3*404*FLEN/8, x4, x1, x2)

inst_28053:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000000000007; valaddr_reg:x3; val_offset:84159*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84159*0 + 3*405*FLEN/8, x4, x1, x2)

inst_28054:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000000000000f; valaddr_reg:x3; val_offset:84162*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84162*0 + 3*406*FLEN/8, x4, x1, x2)

inst_28055:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000000000001f; valaddr_reg:x3; val_offset:84165*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84165*0 + 3*407*FLEN/8, x4, x1, x2)

inst_28056:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000000000003f; valaddr_reg:x3; val_offset:84168*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84168*0 + 3*408*FLEN/8, x4, x1, x2)

inst_28057:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000000000007f; valaddr_reg:x3; val_offset:84171*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84171*0 + 3*409*FLEN/8, x4, x1, x2)

inst_28058:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00000000000ff; valaddr_reg:x3; val_offset:84174*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84174*0 + 3*410*FLEN/8, x4, x1, x2)

inst_28059:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00000000001ff; valaddr_reg:x3; val_offset:84177*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84177*0 + 3*411*FLEN/8, x4, x1, x2)

inst_28060:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00000000003ff; valaddr_reg:x3; val_offset:84180*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84180*0 + 3*412*FLEN/8, x4, x1, x2)

inst_28061:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00000000007ff; valaddr_reg:x3; val_offset:84183*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84183*0 + 3*413*FLEN/8, x4, x1, x2)

inst_28062:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000000000fff; valaddr_reg:x3; val_offset:84186*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84186*0 + 3*414*FLEN/8, x4, x1, x2)

inst_28063:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000000001fff; valaddr_reg:x3; val_offset:84189*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84189*0 + 3*415*FLEN/8, x4, x1, x2)

inst_28064:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000000003fff; valaddr_reg:x3; val_offset:84192*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84192*0 + 3*416*FLEN/8, x4, x1, x2)

inst_28065:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000000007fff; valaddr_reg:x3; val_offset:84195*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84195*0 + 3*417*FLEN/8, x4, x1, x2)

inst_28066:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000000000ffff; valaddr_reg:x3; val_offset:84198*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84198*0 + 3*418*FLEN/8, x4, x1, x2)

inst_28067:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000000001ffff; valaddr_reg:x3; val_offset:84201*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84201*0 + 3*419*FLEN/8, x4, x1, x2)

inst_28068:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000000003ffff; valaddr_reg:x3; val_offset:84204*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84204*0 + 3*420*FLEN/8, x4, x1, x2)

inst_28069:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000000007ffff; valaddr_reg:x3; val_offset:84207*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84207*0 + 3*421*FLEN/8, x4, x1, x2)

inst_28070:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00000000fffff; valaddr_reg:x3; val_offset:84210*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84210*0 + 3*422*FLEN/8, x4, x1, x2)

inst_28071:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00000001fffff; valaddr_reg:x3; val_offset:84213*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84213*0 + 3*423*FLEN/8, x4, x1, x2)

inst_28072:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00000003fffff; valaddr_reg:x3; val_offset:84216*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84216*0 + 3*424*FLEN/8, x4, x1, x2)

inst_28073:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00000007fffff; valaddr_reg:x3; val_offset:84219*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84219*0 + 3*425*FLEN/8, x4, x1, x2)

inst_28074:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000000ffffff; valaddr_reg:x3; val_offset:84222*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84222*0 + 3*426*FLEN/8, x4, x1, x2)

inst_28075:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000001ffffff; valaddr_reg:x3; val_offset:84225*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84225*0 + 3*427*FLEN/8, x4, x1, x2)

inst_28076:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000003ffffff; valaddr_reg:x3; val_offset:84228*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84228*0 + 3*428*FLEN/8, x4, x1, x2)

inst_28077:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000007ffffff; valaddr_reg:x3; val_offset:84231*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84231*0 + 3*429*FLEN/8, x4, x1, x2)

inst_28078:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000000fffffff; valaddr_reg:x3; val_offset:84234*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84234*0 + 3*430*FLEN/8, x4, x1, x2)

inst_28079:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000001fffffff; valaddr_reg:x3; val_offset:84237*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84237*0 + 3*431*FLEN/8, x4, x1, x2)

inst_28080:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000003fffffff; valaddr_reg:x3; val_offset:84240*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84240*0 + 3*432*FLEN/8, x4, x1, x2)

inst_28081:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000007fffffff; valaddr_reg:x3; val_offset:84243*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84243*0 + 3*433*FLEN/8, x4, x1, x2)

inst_28082:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00000ffffffff; valaddr_reg:x3; val_offset:84246*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84246*0 + 3*434*FLEN/8, x4, x1, x2)

inst_28083:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00001ffffffff; valaddr_reg:x3; val_offset:84249*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84249*0 + 3*435*FLEN/8, x4, x1, x2)

inst_28084:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00003ffffffff; valaddr_reg:x3; val_offset:84252*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84252*0 + 3*436*FLEN/8, x4, x1, x2)

inst_28085:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00007ffffffff; valaddr_reg:x3; val_offset:84255*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84255*0 + 3*437*FLEN/8, x4, x1, x2)

inst_28086:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0000fffffffff; valaddr_reg:x3; val_offset:84258*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84258*0 + 3*438*FLEN/8, x4, x1, x2)

inst_28087:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0001fffffffff; valaddr_reg:x3; val_offset:84261*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84261*0 + 3*439*FLEN/8, x4, x1, x2)

inst_28088:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0003fffffffff; valaddr_reg:x3; val_offset:84264*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84264*0 + 3*440*FLEN/8, x4, x1, x2)

inst_28089:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0007fffffffff; valaddr_reg:x3; val_offset:84267*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84267*0 + 3*441*FLEN/8, x4, x1, x2)

inst_28090:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf000ffffffffff; valaddr_reg:x3; val_offset:84270*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84270*0 + 3*442*FLEN/8, x4, x1, x2)

inst_28091:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf001ffffffffff; valaddr_reg:x3; val_offset:84273*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84273*0 + 3*443*FLEN/8, x4, x1, x2)

inst_28092:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf003ffffffffff; valaddr_reg:x3; val_offset:84276*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84276*0 + 3*444*FLEN/8, x4, x1, x2)

inst_28093:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf007ffffffffff; valaddr_reg:x3; val_offset:84279*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84279*0 + 3*445*FLEN/8, x4, x1, x2)

inst_28094:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf00fffffffffff; valaddr_reg:x3; val_offset:84282*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84282*0 + 3*446*FLEN/8, x4, x1, x2)

inst_28095:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf01fffffffffff; valaddr_reg:x3; val_offset:84285*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84285*0 + 3*447*FLEN/8, x4, x1, x2)

inst_28096:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf03fffffffffff; valaddr_reg:x3; val_offset:84288*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84288*0 + 3*448*FLEN/8, x4, x1, x2)

inst_28097:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf07fffffffffff; valaddr_reg:x3; val_offset:84291*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84291*0 + 3*449*FLEN/8, x4, x1, x2)

inst_28098:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf0ffffffffffff; valaddr_reg:x3; val_offset:84294*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84294*0 + 3*450*FLEN/8, x4, x1, x2)

inst_28099:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf1ffffffffffff; valaddr_reg:x3; val_offset:84297*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84297*0 + 3*451*FLEN/8, x4, x1, x2)

inst_28100:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf3ffffffffffff; valaddr_reg:x3; val_offset:84300*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84300*0 + 3*452*FLEN/8, x4, x1, x2)

inst_28101:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf7ffffffffffff; valaddr_reg:x3; val_offset:84303*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84303*0 + 3*453*FLEN/8, x4, x1, x2)

inst_28102:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdf8000000000000; valaddr_reg:x3; val_offset:84306*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84306*0 + 3*454*FLEN/8, x4, x1, x2)

inst_28103:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfc000000000000; valaddr_reg:x3; val_offset:84309*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84309*0 + 3*455*FLEN/8, x4, x1, x2)

inst_28104:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfe000000000000; valaddr_reg:x3; val_offset:84312*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84312*0 + 3*456*FLEN/8, x4, x1, x2)

inst_28105:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdff000000000000; valaddr_reg:x3; val_offset:84315*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84315*0 + 3*457*FLEN/8, x4, x1, x2)

inst_28106:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdff800000000000; valaddr_reg:x3; val_offset:84318*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84318*0 + 3*458*FLEN/8, x4, x1, x2)

inst_28107:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffc00000000000; valaddr_reg:x3; val_offset:84321*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84321*0 + 3*459*FLEN/8, x4, x1, x2)

inst_28108:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffe00000000000; valaddr_reg:x3; val_offset:84324*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84324*0 + 3*460*FLEN/8, x4, x1, x2)

inst_28109:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfff00000000000; valaddr_reg:x3; val_offset:84327*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84327*0 + 3*461*FLEN/8, x4, x1, x2)

inst_28110:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfff80000000000; valaddr_reg:x3; val_offset:84330*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84330*0 + 3*462*FLEN/8, x4, x1, x2)

inst_28111:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffc0000000000; valaddr_reg:x3; val_offset:84333*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84333*0 + 3*463*FLEN/8, x4, x1, x2)

inst_28112:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffe0000000000; valaddr_reg:x3; val_offset:84336*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84336*0 + 3*464*FLEN/8, x4, x1, x2)

inst_28113:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffff0000000000; valaddr_reg:x3; val_offset:84339*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84339*0 + 3*465*FLEN/8, x4, x1, x2)

inst_28114:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffff8000000000; valaddr_reg:x3; val_offset:84342*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84342*0 + 3*466*FLEN/8, x4, x1, x2)

inst_28115:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffc000000000; valaddr_reg:x3; val_offset:84345*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84345*0 + 3*467*FLEN/8, x4, x1, x2)

inst_28116:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffe000000000; valaddr_reg:x3; val_offset:84348*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84348*0 + 3*468*FLEN/8, x4, x1, x2)

inst_28117:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffff000000000; valaddr_reg:x3; val_offset:84351*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84351*0 + 3*469*FLEN/8, x4, x1, x2)

inst_28118:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffff800000000; valaddr_reg:x3; val_offset:84354*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84354*0 + 3*470*FLEN/8, x4, x1, x2)

inst_28119:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffc00000000; valaddr_reg:x3; val_offset:84357*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84357*0 + 3*471*FLEN/8, x4, x1, x2)

inst_28120:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffe00000000; valaddr_reg:x3; val_offset:84360*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84360*0 + 3*472*FLEN/8, x4, x1, x2)

inst_28121:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffff00000000; valaddr_reg:x3; val_offset:84363*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84363*0 + 3*473*FLEN/8, x4, x1, x2)

inst_28122:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffff80000000; valaddr_reg:x3; val_offset:84366*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84366*0 + 3*474*FLEN/8, x4, x1, x2)

inst_28123:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffc0000000; valaddr_reg:x3; val_offset:84369*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84369*0 + 3*475*FLEN/8, x4, x1, x2)

inst_28124:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffe0000000; valaddr_reg:x3; val_offset:84372*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84372*0 + 3*476*FLEN/8, x4, x1, x2)

inst_28125:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffff0000000; valaddr_reg:x3; val_offset:84375*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84375*0 + 3*477*FLEN/8, x4, x1, x2)

inst_28126:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffff8000000; valaddr_reg:x3; val_offset:84378*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84378*0 + 3*478*FLEN/8, x4, x1, x2)

inst_28127:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffc000000; valaddr_reg:x3; val_offset:84381*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84381*0 + 3*479*FLEN/8, x4, x1, x2)

inst_28128:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffe000000; valaddr_reg:x3; val_offset:84384*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84384*0 + 3*480*FLEN/8, x4, x1, x2)

inst_28129:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffff000000; valaddr_reg:x3; val_offset:84387*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84387*0 + 3*481*FLEN/8, x4, x1, x2)

inst_28130:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffff800000; valaddr_reg:x3; val_offset:84390*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84390*0 + 3*482*FLEN/8, x4, x1, x2)

inst_28131:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffc00000; valaddr_reg:x3; val_offset:84393*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84393*0 + 3*483*FLEN/8, x4, x1, x2)

inst_28132:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffe00000; valaddr_reg:x3; val_offset:84396*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84396*0 + 3*484*FLEN/8, x4, x1, x2)

inst_28133:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffff00000; valaddr_reg:x3; val_offset:84399*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84399*0 + 3*485*FLEN/8, x4, x1, x2)

inst_28134:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffff80000; valaddr_reg:x3; val_offset:84402*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84402*0 + 3*486*FLEN/8, x4, x1, x2)

inst_28135:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffffc0000; valaddr_reg:x3; val_offset:84405*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84405*0 + 3*487*FLEN/8, x4, x1, x2)

inst_28136:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffffe0000; valaddr_reg:x3; val_offset:84408*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84408*0 + 3*488*FLEN/8, x4, x1, x2)

inst_28137:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffff0000; valaddr_reg:x3; val_offset:84411*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84411*0 + 3*489*FLEN/8, x4, x1, x2)

inst_28138:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffff8000; valaddr_reg:x3; val_offset:84414*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84414*0 + 3*490*FLEN/8, x4, x1, x2)

inst_28139:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffffc000; valaddr_reg:x3; val_offset:84417*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84417*0 + 3*491*FLEN/8, x4, x1, x2)

inst_28140:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffffe000; valaddr_reg:x3; val_offset:84420*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84420*0 + 3*492*FLEN/8, x4, x1, x2)

inst_28141:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffffff000; valaddr_reg:x3; val_offset:84423*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84423*0 + 3*493*FLEN/8, x4, x1, x2)

inst_28142:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffffff800; valaddr_reg:x3; val_offset:84426*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84426*0 + 3*494*FLEN/8, x4, x1, x2)

inst_28143:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffffffc00; valaddr_reg:x3; val_offset:84429*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84429*0 + 3*495*FLEN/8, x4, x1, x2)

inst_28144:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffffffe00; valaddr_reg:x3; val_offset:84432*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84432*0 + 3*496*FLEN/8, x4, x1, x2)

inst_28145:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffffff00; valaddr_reg:x3; val_offset:84435*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84435*0 + 3*497*FLEN/8, x4, x1, x2)

inst_28146:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffffff80; valaddr_reg:x3; val_offset:84438*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84438*0 + 3*498*FLEN/8, x4, x1, x2)

inst_28147:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffffffc0; valaddr_reg:x3; val_offset:84441*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84441*0 + 3*499*FLEN/8, x4, x1, x2)

inst_28148:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffffffe0; valaddr_reg:x3; val_offset:84444*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84444*0 + 3*500*FLEN/8, x4, x1, x2)

inst_28149:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffffffff0; valaddr_reg:x3; val_offset:84447*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84447*0 + 3*501*FLEN/8, x4, x1, x2)

inst_28150:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffffffff8; valaddr_reg:x3; val_offset:84450*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84450*0 + 3*502*FLEN/8, x4, x1, x2)

inst_28151:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffffffffc; valaddr_reg:x3; val_offset:84453*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84453*0 + 3*503*FLEN/8, x4, x1, x2)

inst_28152:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdfffffffffffffe; valaddr_reg:x3; val_offset:84456*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84456*0 + 3*504*FLEN/8, x4, x1, x2)

inst_28153:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3df and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbdffffffffffffff; valaddr_reg:x3; val_offset:84459*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84459*0 + 3*505*FLEN/8, x4, x1, x2)

inst_28154:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:84462*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84462*0 + 3*506*FLEN/8, x4, x1, x2)

inst_28155:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:84465*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84465*0 + 3*507*FLEN/8, x4, x1, x2)

inst_28156:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:84468*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84468*0 + 3*508*FLEN/8, x4, x1, x2)

inst_28157:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:84471*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84471*0 + 3*509*FLEN/8, x4, x1, x2)

inst_28158:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:84474*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84474*0 + 3*510*FLEN/8, x4, x1, x2)

inst_28159:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:84477*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84477*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_28160:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:84480*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84480*0 + 3*512*FLEN/8, x4, x1, x2)

inst_28161:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:84483*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84483*0 + 3*513*FLEN/8, x4, x1, x2)

inst_28162:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:84486*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84486*0 + 3*514*FLEN/8, x4, x1, x2)

inst_28163:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:84489*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84489*0 + 3*515*FLEN/8, x4, x1, x2)

inst_28164:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:84492*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84492*0 + 3*516*FLEN/8, x4, x1, x2)

inst_28165:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:84495*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84495*0 + 3*517*FLEN/8, x4, x1, x2)

inst_28166:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:84498*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84498*0 + 3*518*FLEN/8, x4, x1, x2)

inst_28167:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:84501*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84501*0 + 3*519*FLEN/8, x4, x1, x2)

inst_28168:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:84504*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84504*0 + 3*520*FLEN/8, x4, x1, x2)

inst_28169:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:84507*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84507*0 + 3*521*FLEN/8, x4, x1, x2)

inst_28170:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:84510*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84510*0 + 3*522*FLEN/8, x4, x1, x2)

inst_28171:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:84513*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84513*0 + 3*523*FLEN/8, x4, x1, x2)

inst_28172:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:84516*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84516*0 + 3*524*FLEN/8, x4, x1, x2)

inst_28173:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:84519*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84519*0 + 3*525*FLEN/8, x4, x1, x2)

inst_28174:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:84522*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84522*0 + 3*526*FLEN/8, x4, x1, x2)

inst_28175:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1195ef71d8287 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdf16e287b8a12 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91195ef71d8287; op2val:0x9fddf16e287b8a12;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:84525*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84525*0 + 3*527*FLEN/8, x4, x1, x2)

inst_28176:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000000000000; valaddr_reg:x3; val_offset:84528*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84528*0 + 3*528*FLEN/8, x4, x1, x2)

inst_28177:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000000000001; valaddr_reg:x3; val_offset:84531*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84531*0 + 3*529*FLEN/8, x4, x1, x2)

inst_28178:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000000000003; valaddr_reg:x3; val_offset:84534*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84534*0 + 3*530*FLEN/8, x4, x1, x2)

inst_28179:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000000000007; valaddr_reg:x3; val_offset:84537*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84537*0 + 3*531*FLEN/8, x4, x1, x2)

inst_28180:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000000000000f; valaddr_reg:x3; val_offset:84540*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84540*0 + 3*532*FLEN/8, x4, x1, x2)

inst_28181:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000000000001f; valaddr_reg:x3; val_offset:84543*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84543*0 + 3*533*FLEN/8, x4, x1, x2)

inst_28182:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000000000003f; valaddr_reg:x3; val_offset:84546*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84546*0 + 3*534*FLEN/8, x4, x1, x2)

inst_28183:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000000000007f; valaddr_reg:x3; val_offset:84549*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84549*0 + 3*535*FLEN/8, x4, x1, x2)

inst_28184:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300000000000ff; valaddr_reg:x3; val_offset:84552*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84552*0 + 3*536*FLEN/8, x4, x1, x2)

inst_28185:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300000000001ff; valaddr_reg:x3; val_offset:84555*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84555*0 + 3*537*FLEN/8, x4, x1, x2)

inst_28186:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300000000003ff; valaddr_reg:x3; val_offset:84558*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84558*0 + 3*538*FLEN/8, x4, x1, x2)

inst_28187:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300000000007ff; valaddr_reg:x3; val_offset:84561*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84561*0 + 3*539*FLEN/8, x4, x1, x2)

inst_28188:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000000000fff; valaddr_reg:x3; val_offset:84564*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84564*0 + 3*540*FLEN/8, x4, x1, x2)

inst_28189:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000000001fff; valaddr_reg:x3; val_offset:84567*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84567*0 + 3*541*FLEN/8, x4, x1, x2)

inst_28190:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000000003fff; valaddr_reg:x3; val_offset:84570*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84570*0 + 3*542*FLEN/8, x4, x1, x2)

inst_28191:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000000007fff; valaddr_reg:x3; val_offset:84573*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84573*0 + 3*543*FLEN/8, x4, x1, x2)

inst_28192:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000000000ffff; valaddr_reg:x3; val_offset:84576*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84576*0 + 3*544*FLEN/8, x4, x1, x2)

inst_28193:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000000001ffff; valaddr_reg:x3; val_offset:84579*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84579*0 + 3*545*FLEN/8, x4, x1, x2)

inst_28194:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000000003ffff; valaddr_reg:x3; val_offset:84582*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84582*0 + 3*546*FLEN/8, x4, x1, x2)

inst_28195:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000000007ffff; valaddr_reg:x3; val_offset:84585*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84585*0 + 3*547*FLEN/8, x4, x1, x2)

inst_28196:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300000000fffff; valaddr_reg:x3; val_offset:84588*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84588*0 + 3*548*FLEN/8, x4, x1, x2)

inst_28197:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300000001fffff; valaddr_reg:x3; val_offset:84591*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84591*0 + 3*549*FLEN/8, x4, x1, x2)

inst_28198:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300000003fffff; valaddr_reg:x3; val_offset:84594*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84594*0 + 3*550*FLEN/8, x4, x1, x2)

inst_28199:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300000007fffff; valaddr_reg:x3; val_offset:84597*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84597*0 + 3*551*FLEN/8, x4, x1, x2)

inst_28200:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000000ffffff; valaddr_reg:x3; val_offset:84600*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84600*0 + 3*552*FLEN/8, x4, x1, x2)

inst_28201:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000001ffffff; valaddr_reg:x3; val_offset:84603*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84603*0 + 3*553*FLEN/8, x4, x1, x2)

inst_28202:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000003ffffff; valaddr_reg:x3; val_offset:84606*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84606*0 + 3*554*FLEN/8, x4, x1, x2)

inst_28203:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000007ffffff; valaddr_reg:x3; val_offset:84609*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84609*0 + 3*555*FLEN/8, x4, x1, x2)

inst_28204:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000000fffffff; valaddr_reg:x3; val_offset:84612*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84612*0 + 3*556*FLEN/8, x4, x1, x2)

inst_28205:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000001fffffff; valaddr_reg:x3; val_offset:84615*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84615*0 + 3*557*FLEN/8, x4, x1, x2)

inst_28206:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000003fffffff; valaddr_reg:x3; val_offset:84618*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84618*0 + 3*558*FLEN/8, x4, x1, x2)

inst_28207:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000007fffffff; valaddr_reg:x3; val_offset:84621*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84621*0 + 3*559*FLEN/8, x4, x1, x2)

inst_28208:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300000ffffffff; valaddr_reg:x3; val_offset:84624*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84624*0 + 3*560*FLEN/8, x4, x1, x2)

inst_28209:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300001ffffffff; valaddr_reg:x3; val_offset:84627*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84627*0 + 3*561*FLEN/8, x4, x1, x2)

inst_28210:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300003ffffffff; valaddr_reg:x3; val_offset:84630*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84630*0 + 3*562*FLEN/8, x4, x1, x2)

inst_28211:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300007ffffffff; valaddr_reg:x3; val_offset:84633*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84633*0 + 3*563*FLEN/8, x4, x1, x2)

inst_28212:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30000fffffffff; valaddr_reg:x3; val_offset:84636*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84636*0 + 3*564*FLEN/8, x4, x1, x2)

inst_28213:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30001fffffffff; valaddr_reg:x3; val_offset:84639*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84639*0 + 3*565*FLEN/8, x4, x1, x2)

inst_28214:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30003fffffffff; valaddr_reg:x3; val_offset:84642*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84642*0 + 3*566*FLEN/8, x4, x1, x2)

inst_28215:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30007fffffffff; valaddr_reg:x3; val_offset:84645*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84645*0 + 3*567*FLEN/8, x4, x1, x2)

inst_28216:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3000ffffffffff; valaddr_reg:x3; val_offset:84648*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84648*0 + 3*568*FLEN/8, x4, x1, x2)

inst_28217:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3001ffffffffff; valaddr_reg:x3; val_offset:84651*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84651*0 + 3*569*FLEN/8, x4, x1, x2)

inst_28218:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3003ffffffffff; valaddr_reg:x3; val_offset:84654*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84654*0 + 3*570*FLEN/8, x4, x1, x2)

inst_28219:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3007ffffffffff; valaddr_reg:x3; val_offset:84657*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84657*0 + 3*571*FLEN/8, x4, x1, x2)

inst_28220:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd300fffffffffff; valaddr_reg:x3; val_offset:84660*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84660*0 + 3*572*FLEN/8, x4, x1, x2)

inst_28221:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd301fffffffffff; valaddr_reg:x3; val_offset:84663*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84663*0 + 3*573*FLEN/8, x4, x1, x2)

inst_28222:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd303fffffffffff; valaddr_reg:x3; val_offset:84666*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84666*0 + 3*574*FLEN/8, x4, x1, x2)

inst_28223:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd307fffffffffff; valaddr_reg:x3; val_offset:84669*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84669*0 + 3*575*FLEN/8, x4, x1, x2)

inst_28224:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd30ffffffffffff; valaddr_reg:x3; val_offset:84672*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84672*0 + 3*576*FLEN/8, x4, x1, x2)

inst_28225:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd31ffffffffffff; valaddr_reg:x3; val_offset:84675*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84675*0 + 3*577*FLEN/8, x4, x1, x2)

inst_28226:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd33ffffffffffff; valaddr_reg:x3; val_offset:84678*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84678*0 + 3*578*FLEN/8, x4, x1, x2)

inst_28227:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd37ffffffffffff; valaddr_reg:x3; val_offset:84681*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84681*0 + 3*579*FLEN/8, x4, x1, x2)

inst_28228:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd38000000000000; valaddr_reg:x3; val_offset:84684*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84684*0 + 3*580*FLEN/8, x4, x1, x2)

inst_28229:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3c000000000000; valaddr_reg:x3; val_offset:84687*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84687*0 + 3*581*FLEN/8, x4, x1, x2)

inst_28230:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3e000000000000; valaddr_reg:x3; val_offset:84690*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84690*0 + 3*582*FLEN/8, x4, x1, x2)

inst_28231:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3f000000000000; valaddr_reg:x3; val_offset:84693*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84693*0 + 3*583*FLEN/8, x4, x1, x2)

inst_28232:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3f800000000000; valaddr_reg:x3; val_offset:84696*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84696*0 + 3*584*FLEN/8, x4, x1, x2)

inst_28233:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fc00000000000; valaddr_reg:x3; val_offset:84699*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84699*0 + 3*585*FLEN/8, x4, x1, x2)

inst_28234:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fe00000000000; valaddr_reg:x3; val_offset:84702*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84702*0 + 3*586*FLEN/8, x4, x1, x2)

inst_28235:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ff00000000000; valaddr_reg:x3; val_offset:84705*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84705*0 + 3*587*FLEN/8, x4, x1, x2)

inst_28236:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ff80000000000; valaddr_reg:x3; val_offset:84708*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84708*0 + 3*588*FLEN/8, x4, x1, x2)

inst_28237:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffc0000000000; valaddr_reg:x3; val_offset:84711*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84711*0 + 3*589*FLEN/8, x4, x1, x2)

inst_28238:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffe0000000000; valaddr_reg:x3; val_offset:84714*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84714*0 + 3*590*FLEN/8, x4, x1, x2)

inst_28239:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fff0000000000; valaddr_reg:x3; val_offset:84717*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84717*0 + 3*591*FLEN/8, x4, x1, x2)

inst_28240:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fff8000000000; valaddr_reg:x3; val_offset:84720*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84720*0 + 3*592*FLEN/8, x4, x1, x2)

inst_28241:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffc000000000; valaddr_reg:x3; val_offset:84723*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84723*0 + 3*593*FLEN/8, x4, x1, x2)

inst_28242:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffe000000000; valaddr_reg:x3; val_offset:84726*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84726*0 + 3*594*FLEN/8, x4, x1, x2)

inst_28243:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffff000000000; valaddr_reg:x3; val_offset:84729*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84729*0 + 3*595*FLEN/8, x4, x1, x2)

inst_28244:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffff800000000; valaddr_reg:x3; val_offset:84732*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84732*0 + 3*596*FLEN/8, x4, x1, x2)

inst_28245:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffc00000000; valaddr_reg:x3; val_offset:84735*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84735*0 + 3*597*FLEN/8, x4, x1, x2)

inst_28246:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffe00000000; valaddr_reg:x3; val_offset:84738*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84738*0 + 3*598*FLEN/8, x4, x1, x2)

inst_28247:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffff00000000; valaddr_reg:x3; val_offset:84741*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84741*0 + 3*599*FLEN/8, x4, x1, x2)

inst_28248:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffff80000000; valaddr_reg:x3; val_offset:84744*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84744*0 + 3*600*FLEN/8, x4, x1, x2)

inst_28249:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffc0000000; valaddr_reg:x3; val_offset:84747*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84747*0 + 3*601*FLEN/8, x4, x1, x2)

inst_28250:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffe0000000; valaddr_reg:x3; val_offset:84750*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84750*0 + 3*602*FLEN/8, x4, x1, x2)

inst_28251:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffff0000000; valaddr_reg:x3; val_offset:84753*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84753*0 + 3*603*FLEN/8, x4, x1, x2)

inst_28252:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffff8000000; valaddr_reg:x3; val_offset:84756*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84756*0 + 3*604*FLEN/8, x4, x1, x2)

inst_28253:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffc000000; valaddr_reg:x3; val_offset:84759*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84759*0 + 3*605*FLEN/8, x4, x1, x2)

inst_28254:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffe000000; valaddr_reg:x3; val_offset:84762*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84762*0 + 3*606*FLEN/8, x4, x1, x2)

inst_28255:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffff000000; valaddr_reg:x3; val_offset:84765*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84765*0 + 3*607*FLEN/8, x4, x1, x2)

inst_28256:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffff800000; valaddr_reg:x3; val_offset:84768*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84768*0 + 3*608*FLEN/8, x4, x1, x2)

inst_28257:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffc00000; valaddr_reg:x3; val_offset:84771*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84771*0 + 3*609*FLEN/8, x4, x1, x2)

inst_28258:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffe00000; valaddr_reg:x3; val_offset:84774*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84774*0 + 3*610*FLEN/8, x4, x1, x2)

inst_28259:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffff00000; valaddr_reg:x3; val_offset:84777*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84777*0 + 3*611*FLEN/8, x4, x1, x2)

inst_28260:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffff80000; valaddr_reg:x3; val_offset:84780*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84780*0 + 3*612*FLEN/8, x4, x1, x2)

inst_28261:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffffc0000; valaddr_reg:x3; val_offset:84783*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84783*0 + 3*613*FLEN/8, x4, x1, x2)

inst_28262:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffffe0000; valaddr_reg:x3; val_offset:84786*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84786*0 + 3*614*FLEN/8, x4, x1, x2)

inst_28263:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffff0000; valaddr_reg:x3; val_offset:84789*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84789*0 + 3*615*FLEN/8, x4, x1, x2)

inst_28264:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffff8000; valaddr_reg:x3; val_offset:84792*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84792*0 + 3*616*FLEN/8, x4, x1, x2)

inst_28265:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffffc000; valaddr_reg:x3; val_offset:84795*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84795*0 + 3*617*FLEN/8, x4, x1, x2)

inst_28266:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffffe000; valaddr_reg:x3; val_offset:84798*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84798*0 + 3*618*FLEN/8, x4, x1, x2)

inst_28267:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffffff000; valaddr_reg:x3; val_offset:84801*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84801*0 + 3*619*FLEN/8, x4, x1, x2)

inst_28268:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffffff800; valaddr_reg:x3; val_offset:84804*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84804*0 + 3*620*FLEN/8, x4, x1, x2)

inst_28269:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffffffc00; valaddr_reg:x3; val_offset:84807*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84807*0 + 3*621*FLEN/8, x4, x1, x2)

inst_28270:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffffffe00; valaddr_reg:x3; val_offset:84810*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84810*0 + 3*622*FLEN/8, x4, x1, x2)

inst_28271:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffffff00; valaddr_reg:x3; val_offset:84813*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84813*0 + 3*623*FLEN/8, x4, x1, x2)

inst_28272:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffffff80; valaddr_reg:x3; val_offset:84816*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84816*0 + 3*624*FLEN/8, x4, x1, x2)

inst_28273:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffffffc0; valaddr_reg:x3; val_offset:84819*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84819*0 + 3*625*FLEN/8, x4, x1, x2)

inst_28274:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffffffe0; valaddr_reg:x3; val_offset:84822*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84822*0 + 3*626*FLEN/8, x4, x1, x2)

inst_28275:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffffffff0; valaddr_reg:x3; val_offset:84825*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84825*0 + 3*627*FLEN/8, x4, x1, x2)

inst_28276:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffffffff8; valaddr_reg:x3; val_offset:84828*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84828*0 + 3*628*FLEN/8, x4, x1, x2)

inst_28277:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffffffffc; valaddr_reg:x3; val_offset:84831*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84831*0 + 3*629*FLEN/8, x4, x1, x2)

inst_28278:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3ffffffffffffe; valaddr_reg:x3; val_offset:84834*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84834*0 + 3*630*FLEN/8, x4, x1, x2)

inst_28279:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3d3 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbd3fffffffffffff; valaddr_reg:x3; val_offset:84837*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84837*0 + 3*631*FLEN/8, x4, x1, x2)

inst_28280:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:84840*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84840*0 + 3*632*FLEN/8, x4, x1, x2)

inst_28281:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:84843*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84843*0 + 3*633*FLEN/8, x4, x1, x2)

inst_28282:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:84846*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84846*0 + 3*634*FLEN/8, x4, x1, x2)

inst_28283:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:84849*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84849*0 + 3*635*FLEN/8, x4, x1, x2)

inst_28284:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:84852*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84852*0 + 3*636*FLEN/8, x4, x1, x2)

inst_28285:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:84855*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84855*0 + 3*637*FLEN/8, x4, x1, x2)

inst_28286:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:84858*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84858*0 + 3*638*FLEN/8, x4, x1, x2)

inst_28287:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:84861*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84861*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_28288:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:84864*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84864*0 + 3*640*FLEN/8, x4, x1, x2)

inst_28289:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:84867*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84867*0 + 3*641*FLEN/8, x4, x1, x2)

inst_28290:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:84870*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84870*0 + 3*642*FLEN/8, x4, x1, x2)

inst_28291:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:84873*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84873*0 + 3*643*FLEN/8, x4, x1, x2)

inst_28292:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:84876*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84876*0 + 3*644*FLEN/8, x4, x1, x2)

inst_28293:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:84879*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84879*0 + 3*645*FLEN/8, x4, x1, x2)

inst_28294:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:84882*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84882*0 + 3*646*FLEN/8, x4, x1, x2)

inst_28295:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:84885*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84885*0 + 3*647*FLEN/8, x4, x1, x2)

inst_28296:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:84888*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84888*0 + 3*648*FLEN/8, x4, x1, x2)

inst_28297:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:84891*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84891*0 + 3*649*FLEN/8, x4, x1, x2)

inst_28298:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:84894*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84894*0 + 3*650*FLEN/8, x4, x1, x2)

inst_28299:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:84897*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84897*0 + 3*651*FLEN/8, x4, x1, x2)

inst_28300:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:84900*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84900*0 + 3*652*FLEN/8, x4, x1, x2)

inst_28301:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x11c620e043403 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xdec28cb3878e3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f911c620e043403; op2val:0x9fddec28cb3878e3;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:84903*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84903*0 + 3*653*FLEN/8, x4, x1, x2)

inst_28302:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000000000000; valaddr_reg:x3; val_offset:84906*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84906*0 + 3*654*FLEN/8, x4, x1, x2)

inst_28303:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000000000001; valaddr_reg:x3; val_offset:84909*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84909*0 + 3*655*FLEN/8, x4, x1, x2)

inst_28304:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000000000003; valaddr_reg:x3; val_offset:84912*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84912*0 + 3*656*FLEN/8, x4, x1, x2)

inst_28305:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000000000007; valaddr_reg:x3; val_offset:84915*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84915*0 + 3*657*FLEN/8, x4, x1, x2)

inst_28306:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000000000000f; valaddr_reg:x3; val_offset:84918*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84918*0 + 3*658*FLEN/8, x4, x1, x2)

inst_28307:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000000000001f; valaddr_reg:x3; val_offset:84921*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84921*0 + 3*659*FLEN/8, x4, x1, x2)

inst_28308:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000000000003f; valaddr_reg:x3; val_offset:84924*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84924*0 + 3*660*FLEN/8, x4, x1, x2)

inst_28309:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000000000007f; valaddr_reg:x3; val_offset:84927*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84927*0 + 3*661*FLEN/8, x4, x1, x2)

inst_28310:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700000000000ff; valaddr_reg:x3; val_offset:84930*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84930*0 + 3*662*FLEN/8, x4, x1, x2)

inst_28311:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700000000001ff; valaddr_reg:x3; val_offset:84933*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84933*0 + 3*663*FLEN/8, x4, x1, x2)

inst_28312:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700000000003ff; valaddr_reg:x3; val_offset:84936*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84936*0 + 3*664*FLEN/8, x4, x1, x2)

inst_28313:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700000000007ff; valaddr_reg:x3; val_offset:84939*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84939*0 + 3*665*FLEN/8, x4, x1, x2)

inst_28314:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000000000fff; valaddr_reg:x3; val_offset:84942*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84942*0 + 3*666*FLEN/8, x4, x1, x2)

inst_28315:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000000001fff; valaddr_reg:x3; val_offset:84945*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84945*0 + 3*667*FLEN/8, x4, x1, x2)

inst_28316:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000000003fff; valaddr_reg:x3; val_offset:84948*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84948*0 + 3*668*FLEN/8, x4, x1, x2)

inst_28317:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000000007fff; valaddr_reg:x3; val_offset:84951*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84951*0 + 3*669*FLEN/8, x4, x1, x2)

inst_28318:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000000000ffff; valaddr_reg:x3; val_offset:84954*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84954*0 + 3*670*FLEN/8, x4, x1, x2)

inst_28319:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000000001ffff; valaddr_reg:x3; val_offset:84957*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84957*0 + 3*671*FLEN/8, x4, x1, x2)

inst_28320:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000000003ffff; valaddr_reg:x3; val_offset:84960*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84960*0 + 3*672*FLEN/8, x4, x1, x2)

inst_28321:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000000007ffff; valaddr_reg:x3; val_offset:84963*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84963*0 + 3*673*FLEN/8, x4, x1, x2)

inst_28322:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700000000fffff; valaddr_reg:x3; val_offset:84966*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84966*0 + 3*674*FLEN/8, x4, x1, x2)

inst_28323:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700000001fffff; valaddr_reg:x3; val_offset:84969*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84969*0 + 3*675*FLEN/8, x4, x1, x2)

inst_28324:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700000003fffff; valaddr_reg:x3; val_offset:84972*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84972*0 + 3*676*FLEN/8, x4, x1, x2)

inst_28325:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700000007fffff; valaddr_reg:x3; val_offset:84975*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84975*0 + 3*677*FLEN/8, x4, x1, x2)

inst_28326:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000000ffffff; valaddr_reg:x3; val_offset:84978*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84978*0 + 3*678*FLEN/8, x4, x1, x2)

inst_28327:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000001ffffff; valaddr_reg:x3; val_offset:84981*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84981*0 + 3*679*FLEN/8, x4, x1, x2)

inst_28328:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000003ffffff; valaddr_reg:x3; val_offset:84984*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84984*0 + 3*680*FLEN/8, x4, x1, x2)

inst_28329:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000007ffffff; valaddr_reg:x3; val_offset:84987*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84987*0 + 3*681*FLEN/8, x4, x1, x2)

inst_28330:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000000fffffff; valaddr_reg:x3; val_offset:84990*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84990*0 + 3*682*FLEN/8, x4, x1, x2)

inst_28331:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000001fffffff; valaddr_reg:x3; val_offset:84993*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84993*0 + 3*683*FLEN/8, x4, x1, x2)

inst_28332:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000003fffffff; valaddr_reg:x3; val_offset:84996*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84996*0 + 3*684*FLEN/8, x4, x1, x2)

inst_28333:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000007fffffff; valaddr_reg:x3; val_offset:84999*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 84999*0 + 3*685*FLEN/8, x4, x1, x2)

inst_28334:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700000ffffffff; valaddr_reg:x3; val_offset:85002*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85002*0 + 3*686*FLEN/8, x4, x1, x2)

inst_28335:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700001ffffffff; valaddr_reg:x3; val_offset:85005*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85005*0 + 3*687*FLEN/8, x4, x1, x2)

inst_28336:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700003ffffffff; valaddr_reg:x3; val_offset:85008*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85008*0 + 3*688*FLEN/8, x4, x1, x2)

inst_28337:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700007ffffffff; valaddr_reg:x3; val_offset:85011*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85011*0 + 3*689*FLEN/8, x4, x1, x2)

inst_28338:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870000fffffffff; valaddr_reg:x3; val_offset:85014*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85014*0 + 3*690*FLEN/8, x4, x1, x2)

inst_28339:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870001fffffffff; valaddr_reg:x3; val_offset:85017*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85017*0 + 3*691*FLEN/8, x4, x1, x2)

inst_28340:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870003fffffffff; valaddr_reg:x3; val_offset:85020*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85020*0 + 3*692*FLEN/8, x4, x1, x2)

inst_28341:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870007fffffffff; valaddr_reg:x3; val_offset:85023*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85023*0 + 3*693*FLEN/8, x4, x1, x2)

inst_28342:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387000ffffffffff; valaddr_reg:x3; val_offset:85026*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85026*0 + 3*694*FLEN/8, x4, x1, x2)

inst_28343:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387001ffffffffff; valaddr_reg:x3; val_offset:85029*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85029*0 + 3*695*FLEN/8, x4, x1, x2)

inst_28344:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387003ffffffffff; valaddr_reg:x3; val_offset:85032*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85032*0 + 3*696*FLEN/8, x4, x1, x2)

inst_28345:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387007ffffffffff; valaddr_reg:x3; val_offset:85035*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85035*0 + 3*697*FLEN/8, x4, x1, x2)

inst_28346:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38700fffffffffff; valaddr_reg:x3; val_offset:85038*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85038*0 + 3*698*FLEN/8, x4, x1, x2)

inst_28347:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38701fffffffffff; valaddr_reg:x3; val_offset:85041*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85041*0 + 3*699*FLEN/8, x4, x1, x2)

inst_28348:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38703fffffffffff; valaddr_reg:x3; val_offset:85044*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85044*0 + 3*700*FLEN/8, x4, x1, x2)

inst_28349:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x38707fffffffffff; valaddr_reg:x3; val_offset:85047*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85047*0 + 3*701*FLEN/8, x4, x1, x2)

inst_28350:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3870ffffffffffff; valaddr_reg:x3; val_offset:85050*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85050*0 + 3*702*FLEN/8, x4, x1, x2)

inst_28351:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3871ffffffffffff; valaddr_reg:x3; val_offset:85053*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85053*0 + 3*703*FLEN/8, x4, x1, x2)

inst_28352:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3873ffffffffffff; valaddr_reg:x3; val_offset:85056*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85056*0 + 3*704*FLEN/8, x4, x1, x2)

inst_28353:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3877ffffffffffff; valaddr_reg:x3; val_offset:85059*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85059*0 + 3*705*FLEN/8, x4, x1, x2)

inst_28354:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3878000000000000; valaddr_reg:x3; val_offset:85062*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85062*0 + 3*706*FLEN/8, x4, x1, x2)

inst_28355:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387c000000000000; valaddr_reg:x3; val_offset:85065*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85065*0 + 3*707*FLEN/8, x4, x1, x2)

inst_28356:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387e000000000000; valaddr_reg:x3; val_offset:85068*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85068*0 + 3*708*FLEN/8, x4, x1, x2)

inst_28357:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387f000000000000; valaddr_reg:x3; val_offset:85071*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85071*0 + 3*709*FLEN/8, x4, x1, x2)

inst_28358:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387f800000000000; valaddr_reg:x3; val_offset:85074*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85074*0 + 3*710*FLEN/8, x4, x1, x2)

inst_28359:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fc00000000000; valaddr_reg:x3; val_offset:85077*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85077*0 + 3*711*FLEN/8, x4, x1, x2)

inst_28360:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fe00000000000; valaddr_reg:x3; val_offset:85080*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85080*0 + 3*712*FLEN/8, x4, x1, x2)

inst_28361:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ff00000000000; valaddr_reg:x3; val_offset:85083*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85083*0 + 3*713*FLEN/8, x4, x1, x2)

inst_28362:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ff80000000000; valaddr_reg:x3; val_offset:85086*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85086*0 + 3*714*FLEN/8, x4, x1, x2)

inst_28363:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffc0000000000; valaddr_reg:x3; val_offset:85089*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85089*0 + 3*715*FLEN/8, x4, x1, x2)

inst_28364:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffe0000000000; valaddr_reg:x3; val_offset:85092*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85092*0 + 3*716*FLEN/8, x4, x1, x2)

inst_28365:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fff0000000000; valaddr_reg:x3; val_offset:85095*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85095*0 + 3*717*FLEN/8, x4, x1, x2)

inst_28366:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fff8000000000; valaddr_reg:x3; val_offset:85098*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85098*0 + 3*718*FLEN/8, x4, x1, x2)

inst_28367:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffc000000000; valaddr_reg:x3; val_offset:85101*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85101*0 + 3*719*FLEN/8, x4, x1, x2)

inst_28368:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffe000000000; valaddr_reg:x3; val_offset:85104*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85104*0 + 3*720*FLEN/8, x4, x1, x2)

inst_28369:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffff000000000; valaddr_reg:x3; val_offset:85107*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85107*0 + 3*721*FLEN/8, x4, x1, x2)

inst_28370:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffff800000000; valaddr_reg:x3; val_offset:85110*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85110*0 + 3*722*FLEN/8, x4, x1, x2)

inst_28371:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffc00000000; valaddr_reg:x3; val_offset:85113*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85113*0 + 3*723*FLEN/8, x4, x1, x2)

inst_28372:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffe00000000; valaddr_reg:x3; val_offset:85116*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85116*0 + 3*724*FLEN/8, x4, x1, x2)

inst_28373:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffff00000000; valaddr_reg:x3; val_offset:85119*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85119*0 + 3*725*FLEN/8, x4, x1, x2)

inst_28374:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffff80000000; valaddr_reg:x3; val_offset:85122*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85122*0 + 3*726*FLEN/8, x4, x1, x2)

inst_28375:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffc0000000; valaddr_reg:x3; val_offset:85125*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85125*0 + 3*727*FLEN/8, x4, x1, x2)

inst_28376:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffe0000000; valaddr_reg:x3; val_offset:85128*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85128*0 + 3*728*FLEN/8, x4, x1, x2)

inst_28377:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffff0000000; valaddr_reg:x3; val_offset:85131*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85131*0 + 3*729*FLEN/8, x4, x1, x2)

inst_28378:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffff8000000; valaddr_reg:x3; val_offset:85134*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85134*0 + 3*730*FLEN/8, x4, x1, x2)

inst_28379:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffc000000; valaddr_reg:x3; val_offset:85137*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85137*0 + 3*731*FLEN/8, x4, x1, x2)

inst_28380:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffe000000; valaddr_reg:x3; val_offset:85140*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85140*0 + 3*732*FLEN/8, x4, x1, x2)

inst_28381:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffff000000; valaddr_reg:x3; val_offset:85143*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85143*0 + 3*733*FLEN/8, x4, x1, x2)

inst_28382:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffff800000; valaddr_reg:x3; val_offset:85146*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85146*0 + 3*734*FLEN/8, x4, x1, x2)

inst_28383:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffc00000; valaddr_reg:x3; val_offset:85149*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85149*0 + 3*735*FLEN/8, x4, x1, x2)

inst_28384:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffe00000; valaddr_reg:x3; val_offset:85152*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85152*0 + 3*736*FLEN/8, x4, x1, x2)

inst_28385:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffff00000; valaddr_reg:x3; val_offset:85155*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85155*0 + 3*737*FLEN/8, x4, x1, x2)

inst_28386:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffff80000; valaddr_reg:x3; val_offset:85158*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85158*0 + 3*738*FLEN/8, x4, x1, x2)

inst_28387:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffffc0000; valaddr_reg:x3; val_offset:85161*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85161*0 + 3*739*FLEN/8, x4, x1, x2)

inst_28388:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffffe0000; valaddr_reg:x3; val_offset:85164*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85164*0 + 3*740*FLEN/8, x4, x1, x2)

inst_28389:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffff0000; valaddr_reg:x3; val_offset:85167*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85167*0 + 3*741*FLEN/8, x4, x1, x2)

inst_28390:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffff8000; valaddr_reg:x3; val_offset:85170*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85170*0 + 3*742*FLEN/8, x4, x1, x2)

inst_28391:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffffc000; valaddr_reg:x3; val_offset:85173*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85173*0 + 3*743*FLEN/8, x4, x1, x2)

inst_28392:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffffe000; valaddr_reg:x3; val_offset:85176*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85176*0 + 3*744*FLEN/8, x4, x1, x2)

inst_28393:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffffff000; valaddr_reg:x3; val_offset:85179*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85179*0 + 3*745*FLEN/8, x4, x1, x2)

inst_28394:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffffff800; valaddr_reg:x3; val_offset:85182*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85182*0 + 3*746*FLEN/8, x4, x1, x2)

inst_28395:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffffffc00; valaddr_reg:x3; val_offset:85185*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85185*0 + 3*747*FLEN/8, x4, x1, x2)

inst_28396:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffffffe00; valaddr_reg:x3; val_offset:85188*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85188*0 + 3*748*FLEN/8, x4, x1, x2)

inst_28397:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffffff00; valaddr_reg:x3; val_offset:85191*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85191*0 + 3*749*FLEN/8, x4, x1, x2)

inst_28398:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffffff80; valaddr_reg:x3; val_offset:85194*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85194*0 + 3*750*FLEN/8, x4, x1, x2)

inst_28399:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffffffc0; valaddr_reg:x3; val_offset:85197*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85197*0 + 3*751*FLEN/8, x4, x1, x2)

inst_28400:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffffffe0; valaddr_reg:x3; val_offset:85200*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85200*0 + 3*752*FLEN/8, x4, x1, x2)

inst_28401:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffffffff0; valaddr_reg:x3; val_offset:85203*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85203*0 + 3*753*FLEN/8, x4, x1, x2)

inst_28402:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffffffff8; valaddr_reg:x3; val_offset:85206*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85206*0 + 3*754*FLEN/8, x4, x1, x2)

inst_28403:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffffffffc; valaddr_reg:x3; val_offset:85209*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85209*0 + 3*755*FLEN/8, x4, x1, x2)

inst_28404:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387ffffffffffffe; valaddr_reg:x3; val_offset:85212*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85212*0 + 3*756*FLEN/8, x4, x1, x2)

inst_28405:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x387 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x387fffffffffffff; valaddr_reg:x3; val_offset:85215*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85215*0 + 3*757*FLEN/8, x4, x1, x2)

inst_28406:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:85218*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85218*0 + 3*758*FLEN/8, x4, x1, x2)

inst_28407:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:85221*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85221*0 + 3*759*FLEN/8, x4, x1, x2)

inst_28408:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:85224*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85224*0 + 3*760*FLEN/8, x4, x1, x2)

inst_28409:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:85227*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85227*0 + 3*761*FLEN/8, x4, x1, x2)

inst_28410:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:85230*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85230*0 + 3*762*FLEN/8, x4, x1, x2)

inst_28411:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:85233*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85233*0 + 3*763*FLEN/8, x4, x1, x2)

inst_28412:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:85236*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85236*0 + 3*764*FLEN/8, x4, x1, x2)

inst_28413:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:85239*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85239*0 + 3*765*FLEN/8, x4, x1, x2)

inst_28414:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:85242*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85242*0 + 3*766*FLEN/8, x4, x1, x2)

inst_28415:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x13d7dc9e8d903 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xdb2b21c59c0de and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f913d7dc9e8d903; op2val:0x204db2b21c59c0de;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:85245*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85245*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4571153621781053438,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4571153621781053439,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6886272793609459197,64,FLEN)
NAN_BOXED(2327853396119032582,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029556224,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029556225,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029556227,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029556231,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029556239,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029556255,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029556287,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029556351,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029556479,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029556735,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029557247,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029558271,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029560319,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029564415,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029572607,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029588991,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029621759,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029687295,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629029818367,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629030080511,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629030604799,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629031653375,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629033750527,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629037944831,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629046333439,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629063110655,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629096665087,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629163773951,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629297991679,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947629566427135,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947630103298047,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947631177039871,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947633324523519,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947637619490815,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947646209425407,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947663389294591,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947697749032959,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947766468509695,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317947903907463167,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317948178785370111,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317948728541183999,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317949828052811775,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317952027076067327,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317956425122578431,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317965221215600639,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9317982813401645055,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9318017997773733887,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9318088366517911551,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9318229104006266879,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9318510578982977535,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9319073528936398847,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9320199428843241471,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9320199428843241472,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9321325328750084096,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9321888278703505408,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322169753680216064,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322310491168571392,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322380859912749056,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322416044284837888,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322433636470882304,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322442432563904512,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322446830610415616,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322449029633671168,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322450129145298944,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322450678901112832,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322450953779019776,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451091217973248,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451159937449984,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451194297188352,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451211477057536,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451220066992128,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451224361959424,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451226509443072,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451227583184896,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228120055808,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228388491264,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228522708992,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228589817856,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228623372288,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228640149504,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228648538112,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228652732416,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228654829568,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228655878144,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656402432,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656664576,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656795648,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656861184,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656893952,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656910336,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656918528,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656922624,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656924672,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656925696,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926208,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926464,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926592,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926656,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926688,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926704,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926712,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926716,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926718,64,FLEN)
NAN_BOXED(6886288712749919231,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926719,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628288,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628289,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628291,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628295,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628303,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628319,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628351,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628415,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628543,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628799,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991629311,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991630335,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991632383,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991636479,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991644671,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991661055,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991693823,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991759359,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991890431,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034992152575,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034992676863,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034993725439,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034995822591,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890035000016895,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890035008405503,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890035025182719,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890035058737151,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890035125846015,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890035260063743,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890035528499199,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890036065370111,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890037139111935,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890039286595583,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890043581562879,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890052171497471,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890069351366655,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890103711105023,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890172430581759,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890309869535231,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890584747442175,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245891134503256063,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245892234014883839,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245894433038139391,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245898831084650495,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245907627177672703,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245925219363717119,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245960403735805951,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9246030772479983615,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9246171509968338943,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9246452984945049599,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9247015934898470911,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9248141834805313535,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9248141834805313536,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9249267734712156160,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9249830684665577472,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250112159642288128,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250252897130643456,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250323265874821120,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250358450246909952,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250376042432954368,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250384838525976576,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250389236572487680,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250391435595743232,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250392535107371008,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393084863184896,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393359741091840,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393497180045312,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393565899522048,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393600259260416,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393617439129600,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393626029064192,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393630324031488,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393632471515136,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393633545256960,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634082127872,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634350563328,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634484781056,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634551889920,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634585444352,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634602221568,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634610610176,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634614804480,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634616901632,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634617950208,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618474496,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618736640,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618867712,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618933248,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618966016,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618982400,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618990592,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618994688,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618996736,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618997760,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618998272,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618998528,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618998656,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618998720,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618998752,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618998768,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618998776,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618998780,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618998782,64,FLEN)
NAN_BOXED(6886289287636758481,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9250393634618998783,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600256,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600257,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600259,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600263,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600271,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600287,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600319,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600383,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600511,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600767,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269601279,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269602303,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269604351,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269608447,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269616639,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269633023,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269665791,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269731327,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269862399,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577270124543,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577270648831,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577271697407,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577273794559,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577277988863,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577286377471,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577303154687,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577336709119,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577403817983,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577538035711,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577806471167,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719578343342079,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719579417083903,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719581564567551,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719585859534847,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719594449469439,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719611629338623,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719645989076991,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719714708553727,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719852147507199,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274720127025414143,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274720676781228031,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274721776292855807,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274723975316111359,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274728373362622463,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274737169455644671,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274754761641689087,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274789946013777919,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274860314757955583,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(275001052246310911,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(275282527223021567,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(275845477176442879,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(276971377083285503,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(276971377083285504,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(278097276990128128,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(278660226943549440,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(278941701920260096,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279082439408615424,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279152808152793088,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279187992524881920,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279205584710926336,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279214380803948544,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279218778850459648,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279220977873715200,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279222077385342976,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279222627141156864,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279222902019063808,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223039458017280,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223108177494016,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223142537232384,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223159717101568,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223168307036160,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223172602003456,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223174749487104,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223175823228928,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176360099840,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176628535296,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176762753024,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176829861888,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176863416320,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176880193536,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176888582144,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176892776448,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176894873600,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176895922176,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896446464,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896708608,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896839680,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896905216,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896937984,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896954368,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896962560,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896966656,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896968704,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896969728,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970240,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970496,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970624,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970688,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970720,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970736,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970744,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970748,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970750,64,FLEN)
NAN_BOXED(6886311604557158341,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970751,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578937344,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578937345,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578937347,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578937351,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578937359,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578937375,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578937407,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578937471,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578937599,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578937855,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578938367,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578939391,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578941439,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578945535,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578953727,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267578970111,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267579002879,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267579068415,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267579199487,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267579461631,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267579985919,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267581034495,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267583131647,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267587325951,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267595714559,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267612491775,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267646046207,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267713155071,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439267847372799,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439268115808255,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439268652679167,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439269726420991,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439271873904639,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439276168871935,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439284758806527,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439301938675711,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439336298414079,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439405017890815,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439542456844287,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686439817334751231,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686440367090565119,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686441466602192895,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686443665625448447,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686448063671959551,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686456859764981759,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686474451951026175,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686509636323115007,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686580005067292671,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13686720742555647999,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13687002217532358655,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13687565167485779967,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13688691067392622591,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13688691067392622592,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13689816967299465216,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690379917252886528,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690661392229597184,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690802129717952512,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690872498462130176,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690907682834219008,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690925275020263424,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690934071113285632,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690938469159796736,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690940668183052288,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690941767694680064,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942317450493952,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942592328400896,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942729767354368,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942798486831104,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942832846569472,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942850026438656,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942858616373248,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942862911340544,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942865058824192,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942866132566016,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942866669436928,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942866937872384,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867072090112,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867139198976,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867172753408,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867189530624,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867197919232,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867202113536,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867204210688,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867205259264,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867205783552,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206045696,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206176768,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206242304,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206275072,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206291456,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206299648,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206303744,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206305792,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206306816,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206307328,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206307584,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206307712,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206307776,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206307808,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206307824,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206307832,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206307836,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206307838,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13690942867206307839,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6886313200889725575,64,FLEN)
NAN_BOXED(11519628877311478290,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050491392,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050491393,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050491395,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050491399,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050491407,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050491423,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050491455,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050491519,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050491647,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050491903,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050492415,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050493439,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050495487,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050499583,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050507775,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050524159,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050556927,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050622463,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072050753535,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072051015679,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072051539967,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072052588543,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072054685695,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072058879999,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072067268607,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072084045823,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072117600255,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072184709119,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072318926847,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396072587362303,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396073124233215,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396074197975039,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396076345458687,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396080640425983,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396089230360575,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396106410229759,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396140769968127,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396209489444863,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396346928398335,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632396621806305279,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632397171562119167,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632398271073746943,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632400470097002495,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632404868143513599,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632413664236535807,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632431256422580223,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632466440794669055,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632536809538846719,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632677547027202047,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13632959022003912703,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13633521971957334015,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13634647871864176639,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13634647871864176640,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13635773771771019264,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636336721724440576,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636618196701151232,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636758934189506560,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636829302933684224,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636864487305773056,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636882079491817472,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636890875584839680,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636895273631350784,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636897472654606336,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636898572166234112,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899121922048000,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899396799954944,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899534238908416,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899602958385152,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899637318123520,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899654497992704,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899663087927296,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899667382894592,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899669530378240,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899670604120064,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671140990976,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671409426432,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671543644160,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671610753024,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671644307456,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671661084672,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671669473280,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671673667584,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671675764736,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671676813312,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677337600,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677599744,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677730816,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677796352,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677829120,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677845504,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677853696,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677857792,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677859840,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677860864,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677861376,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677861632,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677861760,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677861824,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677861856,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677861872,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677861880,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677861884,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677861886,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13636899671677861887,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6886316512693728259,64,FLEN)
NAN_BOXED(11519623081835919587,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515557888,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515557889,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515557891,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515557895,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515557903,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515557919,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515557951,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515558015,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515558143,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515558399,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515558911,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515559935,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515561983,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515566079,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515574271,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515590655,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515623423,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515688959,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463515820031,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463516082175,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463516606463,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463517655039,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463519752191,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463523946495,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463532335103,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463549112319,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463582666751,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463649775615,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750463783993343,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750464052428799,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750464589299711,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750465663041535,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750467810525183,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750472105492479,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750480695427071,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750497875296255,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750532235034623,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750600954511359,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066750738393464831,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066751013271371775,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066751563027185663,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066752662538813439,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066754861562068991,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066759259608580095,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066768055701602303,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066785647887646719,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066820832259735551,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4066891201003913215,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4067031938492268543,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4067313413468979199,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4067876363422400511,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4069002263329243135,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4069002263329243136,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4070128163236085760,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4070691113189507072,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4070972588166217728,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071113325654573056,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071183694398750720,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071218878770839552,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071236470956883968,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071245267049906176,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071249665096417280,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071251864119672832,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071252963631300608,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071253513387114496,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071253788265021440,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071253925703974912,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071253994423451648,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254028783190016,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254045963059200,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254054552993792,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254058847961088,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254060995444736,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254062069186560,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254062606057472,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254062874492928,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063008710656,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063075819520,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063109373952,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063126151168,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063134539776,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063138734080,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063140831232,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063141879808,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142404096,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142666240,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142797312,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142862848,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142895616,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142912000,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142920192,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142924288,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142926336,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142927360,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142927872,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142928128,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142928256,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142928320,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142928352,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142928368,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142928376,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142928380,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142928382,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4071254063142928383,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6886352915693885699,64,FLEN)
NAN_BOXED(2327713060469981406,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
