
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:37 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmul.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmul.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmul.d_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmul.d_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==f20, rs2==f20, rd==f20,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f20; op2:f20; dest:f20; op1val:0x3f65b2dfc88f5000; op2val:0x3f65b2dfc88f5000;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f20, f20, f20, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rd != rs2, rs1==f24, rs2==f26, rd==f24,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f24; op2:f26; dest:f24; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f24, f24, f26, dyn, 32, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==f13, rs2==f13, rd==f8,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f13; op2:f13; dest:f8; op1val:0x3f65b2dfc88f5000; op2val:0x3f65b2dfc88f5000;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f8, f13, f13, dyn, 64, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs2 == rd != rs1, rs1==f10, rs2==f2, rd==f2,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f10; op2:f2; dest:f2; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f2, f10, f2, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f19, rs2==f31, rd==f1,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f19; op2:f31; dest:f1; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f1, f19, f31, dyn, 128, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f9, rs2==f21, rd==f17,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x3ef61486bb700 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9aef15fb1c249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f9; op2:f21; dest:f17; op1val:0x3f73ef61486bb700; op2val:0x49aef15fb1c249;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f17, f9, f21, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f0, rs2==f29, rd==f27,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x3ef61486bb700 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9aef15fb1c249 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f0; op2:f29; dest:f27; op1val:0x3f73ef61486bb700; op2val:0x49aef15fb1c249;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f27, f0, f29, dyn, 32, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f15, rs2==f23, rd==f18,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x3ef61486bb700 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9aef15fb1c249 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f15; op2:f23; dest:f18; op1val:0x3f73ef61486bb700; op2val:0x49aef15fb1c249;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f18, f15, f23, dyn, 64, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f2, rs2==f1, rd==f5,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x3ef61486bb700 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9aef15fb1c249 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f2; op2:f1; dest:f5; op1val:0x3f73ef61486bb700; op2val:0x49aef15fb1c249;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f5, f2, f1, dyn, 96, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f12, rs2==f8, rd==f22,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x3ef61486bb700 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9aef15fb1c249 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f12; op2:f8; dest:f22; op1val:0x3f73ef61486bb700; op2val:0x49aef15fb1c249;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f22, f12, f8, dyn, 128, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f7, rs2==f9, rd==f26,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x47a11c08e6900 and fs2 == 0 and fe2 == 0x006 and fm2 == 0x900fd5e7998ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f7; op2:f9; dest:f26; op1val:0x3f847a11c08e6900; op2val:0x6900fd5e7998ea;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f26, f7, f9, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f29, rs2==f25, rd==f23,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x47a11c08e6900 and fs2 == 0 and fe2 == 0x006 and fm2 == 0x900fd5e7998ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f29; op2:f25; dest:f23; op1val:0x3f847a11c08e6900; op2val:0x6900fd5e7998ea;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f23, f29, f25, dyn, 32, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f26, rs2==f3, rd==f21,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x47a11c08e6900 and fs2 == 0 and fe2 == 0x006 and fm2 == 0x900fd5e7998ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f26; op2:f3; dest:f21; op1val:0x3f847a11c08e6900; op2val:0x6900fd5e7998ea;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f21, f26, f3, dyn, 64, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f8, rs2==f17, rd==f14,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x47a11c08e6900 and fs2 == 0 and fe2 == 0x006 and fm2 == 0x900fd5e7998ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f8; op2:f17; dest:f14; op1val:0x3f847a11c08e6900; op2val:0x6900fd5e7998ea;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f14, f8, f17, dyn, 96, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f4, rs2==f0, rd==f16,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x47a11c08e6900 and fs2 == 0 and fe2 == 0x006 and fm2 == 0x900fd5e7998ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f4; op2:f0; dest:f16; op1val:0x3f847a11c08e6900; op2val:0x6900fd5e7998ea;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f16, f4, f0, dyn, 128, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f5, rs2==f30, rd==f6,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6abd09944b940 and fs2 == 0 and fe2 == 0x008 and fm2 == 0x0f0154c64752f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f5; op2:f30; dest:f6; op1val:0x3f86abd09944b940; op2val:0x80f0154c64752f;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f6, f5, f30, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f16, rs2==f14, rd==f29,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6abd09944b940 and fs2 == 0 and fe2 == 0x008 and fm2 == 0x0f0154c64752f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f16; op2:f14; dest:f29; op1val:0x3f86abd09944b940; op2val:0x80f0154c64752f;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f29, f16, f14, dyn, 32, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f21, rs2==f16, rd==f15,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6abd09944b940 and fs2 == 0 and fe2 == 0x008 and fm2 == 0x0f0154c64752f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f21; op2:f16; dest:f15; op1val:0x3f86abd09944b940; op2val:0x80f0154c64752f;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f15, f21, f16, dyn, 64, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f17, rs2==f22, rd==f3,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6abd09944b940 and fs2 == 0 and fe2 == 0x008 and fm2 == 0x0f0154c64752f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f17; op2:f22; dest:f3; op1val:0x3f86abd09944b940; op2val:0x80f0154c64752f;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f3, f17, f22, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f3, rs2==f10, rd==f31,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6abd09944b940 and fs2 == 0 and fe2 == 0x008 and fm2 == 0x0f0154c64752f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f3; op2:f10; dest:f31; op1val:0x3f86abd09944b940; op2val:0x80f0154c64752f;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f3, f10, dyn, 128, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f1, rs2==f24, rd==f10,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x0dfda08a590e0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe577f0cb610bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f1; op2:f24; dest:f10; op1val:0x3f90dfda08a590e0; op2val:0x5e577f0cb610bd;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f10, f1, f24, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f22, rs2==f11, rd==f13,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x0dfda08a590e0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe577f0cb610bd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f22; op2:f11; dest:f13; op1val:0x3f90dfda08a590e0; op2val:0x5e577f0cb610bd;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f13, f22, f11, dyn, 32, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f31, rs2==f5, rd==f7,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x0dfda08a590e0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe577f0cb610bd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f31; op2:f5; dest:f7; op1val:0x3f90dfda08a590e0; op2val:0x5e577f0cb610bd;
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f7, f31, f5, dyn, 64, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f27, rs2==f18, rd==f19,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x0dfda08a590e0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe577f0cb610bd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f27; op2:f18; dest:f19; op1val:0x3f90dfda08a590e0; op2val:0x5e577f0cb610bd;
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f19, f27, f18, dyn, 96, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f30, rs2==f28, rd==f11,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x0dfda08a590e0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe577f0cb610bd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f28; dest:f11; op1val:0x3f90dfda08a590e0; op2val:0x5e577f0cb610bd;
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f11, f30, f28, dyn, 128, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f23, rs2==f7, rd==f25,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x74ff40f3d7680 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5f66f73ece988 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f23; op2:f7; dest:f25; op1val:0x3f974ff40f3d7680; op2val:0x25f66f73ece988;
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f25, f23, f7, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f28, rs2==f19, rd==f30,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x74ff40f3d7680 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5f66f73ece988 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f28; op2:f19; dest:f30; op1val:0x3f974ff40f3d7680; op2val:0x25f66f73ece988;
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f30, f28, f19, dyn, 32, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f18, rs2==f27, rd==f4,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x74ff40f3d7680 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5f66f73ece988 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f18; op2:f27; dest:f4; op1val:0x3f974ff40f3d7680; op2val:0x25f66f73ece988;
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f4, f18, f27, dyn, 64, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f6, rs2==f4, rd==f12,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x74ff40f3d7680 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5f66f73ece988 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f6; op2:f4; dest:f12; op1val:0x3f974ff40f3d7680; op2val:0x25f66f73ece988;
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f12, f6, f4, dyn, 96, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f14, rs2==f15, rd==f0,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x74ff40f3d7680 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5f66f73ece988 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f14; op2:f15; dest:f0; op1val:0x3f974ff40f3d7680; op2val:0x25f66f73ece988;
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f0, f14, f15, dyn, 128, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f11, rs2==f6, rd==f9,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd2df717134480 and fs2 == 0 and fe2 == 0x006 and fm2 == 0xa51de8038e70e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f11; op2:f6; dest:f9; op1val:0x3f9d2df717134480; op2val:0x6a51de8038e70e;
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f9, f11, f6, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f25, rs2==f12, rd==f28,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd2df717134480 and fs2 == 0 and fe2 == 0x006 and fm2 == 0xa51de8038e70e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f25; op2:f12; dest:f28; op1val:0x3f9d2df717134480; op2val:0x6a51de8038e70e;
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f28, f25, f12, dyn, 32, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd2df717134480 and fs2 == 0 and fe2 == 0x006 and fm2 == 0xa51de8038e70e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f9d2df717134480; op2val:0x6a51de8038e70e;
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd2df717134480 and fs2 == 0 and fe2 == 0x006 and fm2 == 0xa51de8038e70e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f9d2df717134480; op2val:0x6a51de8038e70e;
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd2df717134480 and fs2 == 0 and fe2 == 0x006 and fm2 == 0xa51de8038e70e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f9d2df717134480; op2val:0x6a51de8038e70e;
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x0f0adffe22ec0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe395afbbaedc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa0f0adffe22ec0; op2val:0x5e395afbbaedc0;
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x0f0adffe22ec0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe395afbbaedc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa0f0adffe22ec0; op2val:0x5e395afbbaedc0;
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x0f0adffe22ec0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe395afbbaedc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa0f0adffe22ec0; op2val:0x5e395afbbaedc0;
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x0f0adffe22ec0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe395afbbaedc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa0f0adffe22ec0; op2val:0x5e395afbbaedc0;
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x0f0adffe22ec0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe395afbbaedc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa0f0adffe22ec0; op2val:0x5e395afbbaedc0;
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2e25fb28d0ed0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xb1ccd571b8299 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa2e25fb28d0ed0; op2val:0x4b1ccd571b8299;
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2e25fb28d0ed0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xb1ccd571b8299 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa2e25fb28d0ed0; op2val:0x4b1ccd571b8299;
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2e25fb28d0ed0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xb1ccd571b8299 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa2e25fb28d0ed0; op2val:0x4b1ccd571b8299;
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2e25fb28d0ed0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xb1ccd571b8299 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa2e25fb28d0ed0; op2val:0x4b1ccd571b8299;
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2e25fb28d0ed0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xb1ccd571b8299 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa2e25fb28d0ed0; op2val:0x4b1ccd571b8299;
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x377b25cf47bc0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa4cd701113669 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa377b25cf47bc0; op2val:0x1a4cd701113669;
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x377b25cf47bc0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa4cd701113669 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa377b25cf47bc0; op2val:0x1a4cd701113669;
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x377b25cf47bc0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa4cd701113669 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa377b25cf47bc0; op2val:0x1a4cd701113669;
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x377b25cf47bc0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa4cd701113669 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa377b25cf47bc0; op2val:0x1a4cd701113669;
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x377b25cf47bc0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa4cd701113669 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa377b25cf47bc0; op2val:0x1a4cd701113669;
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x381b863788580 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa381b863788580; op2val:0x34;
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x381b863788580 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000034 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa381b863788580; op2val:0x34;
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x381b863788580 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000034 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa381b863788580; op2val:0x34;
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x381b863788580 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000034 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa381b863788580; op2val:0x34;
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x381b863788580 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000034 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa381b863788580; op2val:0x34;
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x49e1d2a2c3850 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x8d546e64735ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa49e1d2a2c3850; op2val:0x48d546e64735ea;
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x49e1d2a2c3850 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x8d546e64735ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa49e1d2a2c3850; op2val:0x48d546e64735ea;
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x49e1d2a2c3850 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x8d546e64735ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa49e1d2a2c3850; op2val:0x48d546e64735ea;
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x49e1d2a2c3850 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x8d546e64735ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa49e1d2a2c3850; op2val:0x48d546e64735ea;
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x49e1d2a2c3850 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x8d546e64735ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa49e1d2a2c3850; op2val:0x48d546e64735ea;
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a6bbc6508aa0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x920215aabb699 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa5a6bbc6508aa0; op2val:0x5920215aabb699;
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a6bbc6508aa0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x920215aabb699 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa5a6bbc6508aa0; op2val:0x5920215aabb699;
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a6bbc6508aa0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x920215aabb699 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa5a6bbc6508aa0; op2val:0x5920215aabb699;
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a6bbc6508aa0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x920215aabb699 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa5a6bbc6508aa0; op2val:0x5920215aabb699;
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a6bbc6508aa0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x920215aabb699 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa5a6bbc6508aa0; op2val:0x5920215aabb699;
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5d4af8cd8f150 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa5d4af8cd8f150; op2val:0x2f;
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5d4af8cd8f150 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa5d4af8cd8f150; op2val:0x2f;
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5d4af8cd8f150 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa5d4af8cd8f150; op2val:0x2f;
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5d4af8cd8f150 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa5d4af8cd8f150; op2val:0x2f;
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5d4af8cd8f150 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa5d4af8cd8f150; op2val:0x2f;
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x682ad08c2d120 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa682ad08c2d120; op2val:0x2d;
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x682ad08c2d120 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa682ad08c2d120; op2val:0x2d;
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x682ad08c2d120 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa682ad08c2d120; op2val:0x2d;
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x682ad08c2d120 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa682ad08c2d120; op2val:0x2d;
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x682ad08c2d120 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa682ad08c2d120; op2val:0x2d;
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x731f99169dd60 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x612d220ad5b66 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa731f99169dd60; op2val:0x4612d220ad5b66;
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x731f99169dd60 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x612d220ad5b66 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa731f99169dd60; op2val:0x4612d220ad5b66;
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x731f99169dd60 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x612d220ad5b66 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa731f99169dd60; op2val:0x4612d220ad5b66;
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x731f99169dd60 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x612d220ad5b66 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa731f99169dd60; op2val:0x4612d220ad5b66;
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x731f99169dd60 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x612d220ad5b66 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa731f99169dd60; op2val:0x4612d220ad5b66;
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9a1a1c1fe37b0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3f9bb97d13731 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9a1a1c1fe37b0; op2val:0x13f9bb97d13731;
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9a1a1c1fe37b0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3f9bb97d13731 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9a1a1c1fe37b0; op2val:0x13f9bb97d13731;
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9a1a1c1fe37b0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3f9bb97d13731 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9a1a1c1fe37b0; op2val:0x13f9bb97d13731;
   valaddr_reg:x3; val_offset:164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9a1a1c1fe37b0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3f9bb97d13731 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9a1a1c1fe37b0; op2val:0x13f9bb97d13731;
   valaddr_reg:x3; val_offset:166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9a1a1c1fe37b0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3f9bb97d13731 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9a1a1c1fe37b0; op2val:0x13f9bb97d13731;
   valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9e8d628302a10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9e8d628302a10; op2val:0x28;
   valaddr_reg:x3; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9e8d628302a10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000028 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9e8d628302a10; op2val:0x28;
   valaddr_reg:x3; val_offset:172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9e8d628302a10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000028 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9e8d628302a10; op2val:0x28;
   valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9e8d628302a10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000028 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9e8d628302a10; op2val:0x28;
   valaddr_reg:x3; val_offset:176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9e8d628302a10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000028 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9e8d628302a10; op2val:0x28;
   valaddr_reg:x3; val_offset:178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0dcd5defec2a8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xe5cec70b9a589 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb0dcd5defec2a8; op2val:0x3e5cec70b9a589;
   valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0dcd5defec2a8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xe5cec70b9a589 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb0dcd5defec2a8; op2val:0x3e5cec70b9a589;
   valaddr_reg:x3; val_offset:182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0dcd5defec2a8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xe5cec70b9a589 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb0dcd5defec2a8; op2val:0x3e5cec70b9a589;
   valaddr_reg:x3; val_offset:184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0dcd5defec2a8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xe5cec70b9a589 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb0dcd5defec2a8; op2val:0x3e5cec70b9a589;
   valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0dcd5defec2a8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xe5cec70b9a589 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb0dcd5defec2a8; op2val:0x3e5cec70b9a589;
   valaddr_reg:x3; val_offset:188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x164eb10408a50 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6f615847e2a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb164eb10408a50; op2val:0x3d6f615847e2a4;
   valaddr_reg:x3; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x164eb10408a50 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6f615847e2a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb164eb10408a50; op2val:0x3d6f615847e2a4;
   valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x164eb10408a50 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6f615847e2a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb164eb10408a50; op2val:0x3d6f615847e2a4;
   valaddr_reg:x3; val_offset:194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 194*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x164eb10408a50 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6f615847e2a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb164eb10408a50; op2val:0x3d6f615847e2a4;
   valaddr_reg:x3; val_offset:196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 196*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x164eb10408a50 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6f615847e2a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb164eb10408a50; op2val:0x3d6f615847e2a4;
   valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x202f7d7434db8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xc6d1725d94971 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb202f7d7434db8; op2val:0x4c6d1725d94971;
   valaddr_reg:x3; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 200*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x202f7d7434db8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xc6d1725d94971 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb202f7d7434db8; op2val:0x4c6d1725d94971;
   valaddr_reg:x3; val_offset:202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 202*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x202f7d7434db8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xc6d1725d94971 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb202f7d7434db8; op2val:0x4c6d1725d94971;
   valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x202f7d7434db8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xc6d1725d94971 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb202f7d7434db8; op2val:0x4c6d1725d94971;
   valaddr_reg:x3; val_offset:206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 206*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x202f7d7434db8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xc6d1725d94971 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb202f7d7434db8; op2val:0x4c6d1725d94971;
   valaddr_reg:x3; val_offset:208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 208*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2e607700cafb0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcc907d3854562 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb2e607700cafb0; op2val:0x4cc907d3854562;
   valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2e607700cafb0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcc907d3854562 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb2e607700cafb0; op2val:0x4cc907d3854562;
   valaddr_reg:x3; val_offset:212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 212*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2e607700cafb0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcc907d3854562 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb2e607700cafb0; op2val:0x4cc907d3854562;
   valaddr_reg:x3; val_offset:214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 214*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2e607700cafb0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcc907d3854562 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb2e607700cafb0; op2val:0x4cc907d3854562;
   valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2e607700cafb0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcc907d3854562 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb2e607700cafb0; op2val:0x4cc907d3854562;
   valaddr_reg:x3; val_offset:218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 218*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2f684ccf4f608 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcafffe8d00b3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb2f684ccf4f608; op2val:0x4cafffe8d00b3f;
   valaddr_reg:x3; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 220*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2f684ccf4f608 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcafffe8d00b3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb2f684ccf4f608; op2val:0x4cafffe8d00b3f;
   valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2f684ccf4f608 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcafffe8d00b3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb2f684ccf4f608; op2val:0x4cafffe8d00b3f;
   valaddr_reg:x3; val_offset:224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 224*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2f684ccf4f608 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcafffe8d00b3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb2f684ccf4f608; op2val:0x4cafffe8d00b3f;
   valaddr_reg:x3; val_offset:226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 226*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2f684ccf4f608 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcafffe8d00b3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb2f684ccf4f608; op2val:0x4cafffe8d00b3f;
   valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4d7ed1d4d5340 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc48330b5149bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4d7ed1d4d5340; op2val:0xc48330b5149bc;
   valaddr_reg:x3; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 230*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4d7ed1d4d5340 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc48330b5149bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4d7ed1d4d5340; op2val:0xc48330b5149bc;
   valaddr_reg:x3; val_offset:232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 232*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4d7ed1d4d5340 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc48330b5149bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4d7ed1d4d5340; op2val:0xc48330b5149bc;
   valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4d7ed1d4d5340 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc48330b5149bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4d7ed1d4d5340; op2val:0xc48330b5149bc;
   valaddr_reg:x3; val_offset:236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 236*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4d7ed1d4d5340 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc48330b5149bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4d7ed1d4d5340; op2val:0xc48330b5149bc;
   valaddr_reg:x3; val_offset:238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 238*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5154303e41e08 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9cd7ea3cf74c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb5154303e41e08; op2val:0x49cd7ea3cf74c9;
   valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5154303e41e08 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9cd7ea3cf74c9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb5154303e41e08; op2val:0x49cd7ea3cf74c9;
   valaddr_reg:x3; val_offset:242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 242*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5154303e41e08 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9cd7ea3cf74c9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb5154303e41e08; op2val:0x49cd7ea3cf74c9;
   valaddr_reg:x3; val_offset:244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 244*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5154303e41e08 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9cd7ea3cf74c9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb5154303e41e08; op2val:0x49cd7ea3cf74c9;
   valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5154303e41e08 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9cd7ea3cf74c9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb5154303e41e08; op2val:0x49cd7ea3cf74c9;
   valaddr_reg:x3; val_offset:248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 248*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x54050ea62efd0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x211cd43fb2bd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb54050ea62efd0; op2val:0x5211cd43fb2bd6;
   valaddr_reg:x3; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 250*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x54050ea62efd0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x211cd43fb2bd6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb54050ea62efd0; op2val:0x5211cd43fb2bd6;
   valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x54050ea62efd0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x211cd43fb2bd6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb54050ea62efd0; op2val:0x5211cd43fb2bd6;
   valaddr_reg:x3; val_offset:254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 254*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x54050ea62efd0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x211cd43fb2bd6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb54050ea62efd0; op2val:0x5211cd43fb2bd6;
   valaddr_reg:x3; val_offset:256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 256*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x54050ea62efd0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x211cd43fb2bd6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb54050ea62efd0; op2val:0x5211cd43fb2bd6;
   valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5d604165036e0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x772908a3cd823 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb5d604165036e0; op2val:0x4772908a3cd823;
   valaddr_reg:x3; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 260*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5d604165036e0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x772908a3cd823 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb5d604165036e0; op2val:0x4772908a3cd823;
   valaddr_reg:x3; val_offset:262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 262*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5d604165036e0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x772908a3cd823 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb5d604165036e0; op2val:0x4772908a3cd823;
   valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5d604165036e0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x772908a3cd823 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb5d604165036e0; op2val:0x4772908a3cd823;
   valaddr_reg:x3; val_offset:266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 266*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5d604165036e0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x772908a3cd823 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb5d604165036e0; op2val:0x4772908a3cd823;
   valaddr_reg:x3; val_offset:268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 268*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6aff130a5c178 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb6aff130a5c178; op2val:0x17;
   valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6aff130a5c178 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000017 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb6aff130a5c178; op2val:0x17;
   valaddr_reg:x3; val_offset:272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 272*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6aff130a5c178 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000017 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb6aff130a5c178; op2val:0x17;
   valaddr_reg:x3; val_offset:274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 274*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6aff130a5c178 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000017 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb6aff130a5c178; op2val:0x17;
   valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6aff130a5c178 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000017 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb6aff130a5c178; op2val:0x17;
   valaddr_reg:x3; val_offset:278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 278*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x791362c46e498 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb791362c46e498; op2val:0x16;
   valaddr_reg:x3; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 280*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x791362c46e498 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000016 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb791362c46e498; op2val:0x16;
   valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x791362c46e498 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000016 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb791362c46e498; op2val:0x16;
   valaddr_reg:x3; val_offset:284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 284*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x791362c46e498 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000016 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb791362c46e498; op2val:0x16;
   valaddr_reg:x3; val_offset:286*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 286*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x791362c46e498 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000016 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb791362c46e498; op2val:0x16;
   valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7a40325eb0860 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x5a857ceaaf63c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb7a40325eb0860; op2val:0x35a857ceaaf63c;
   valaddr_reg:x3; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 290*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7a40325eb0860 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x5a857ceaaf63c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb7a40325eb0860; op2val:0x35a857ceaaf63c;
   valaddr_reg:x3; val_offset:292*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 292*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7a40325eb0860 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x5a857ceaaf63c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb7a40325eb0860; op2val:0x35a857ceaaf63c;
   valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7a40325eb0860 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x5a857ceaaf63c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb7a40325eb0860; op2val:0x35a857ceaaf63c;
   valaddr_reg:x3; val_offset:296*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 296*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7a40325eb0860 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x5a857ceaaf63c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb7a40325eb0860; op2val:0x35a857ceaaf63c;
   valaddr_reg:x3; val_offset:298*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 298*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x83cbff91aa168 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa8fee5a5ed7d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb83cbff91aa168; op2val:0xa8fee5a5ed7d3;
   valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x83cbff91aa168 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa8fee5a5ed7d3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb83cbff91aa168; op2val:0xa8fee5a5ed7d3;
   valaddr_reg:x3; val_offset:302*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 302*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x83cbff91aa168 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa8fee5a5ed7d3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb83cbff91aa168; op2val:0xa8fee5a5ed7d3;
   valaddr_reg:x3; val_offset:304*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 304*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x83cbff91aa168 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa8fee5a5ed7d3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb83cbff91aa168; op2val:0xa8fee5a5ed7d3;
   valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x83cbff91aa168 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa8fee5a5ed7d3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb83cbff91aa168; op2val:0xa8fee5a5ed7d3;
   valaddr_reg:x3; val_offset:308*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 308*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x91534f78dc928 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x469908ef336d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb91534f78dc928; op2val:0x3469908ef336d2;
   valaddr_reg:x3; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 310*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x91534f78dc928 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x469908ef336d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb91534f78dc928; op2val:0x3469908ef336d2;
   valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x91534f78dc928 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x469908ef336d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb91534f78dc928; op2val:0x3469908ef336d2;
   valaddr_reg:x3; val_offset:314*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 314*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x91534f78dc928 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x469908ef336d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb91534f78dc928; op2val:0x3469908ef336d2;
   valaddr_reg:x3; val_offset:316*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 316*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x91534f78dc928 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x469908ef336d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb91534f78dc928; op2val:0x3469908ef336d2;
   valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9ad38e3192d48 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9ad38e3192d48; op2val:0x14;
   valaddr_reg:x3; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 320*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9ad38e3192d48 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000014 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9ad38e3192d48; op2val:0x14;
   valaddr_reg:x3; val_offset:322*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 322*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9ad38e3192d48 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000014 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9ad38e3192d48; op2val:0x14;
   valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9ad38e3192d48 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000014 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9ad38e3192d48; op2val:0x14;
   valaddr_reg:x3; val_offset:326*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 326*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9ad38e3192d48 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000014 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9ad38e3192d48; op2val:0x14;
   valaddr_reg:x3; val_offset:328*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 328*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xac07d2a325788 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x991c4de78594c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbac07d2a325788; op2val:0x991c4de78594c;
   valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xac07d2a325788 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x991c4de78594c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbac07d2a325788; op2val:0x991c4de78594c;
   valaddr_reg:x3; val_offset:332*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 332*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xac07d2a325788 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x991c4de78594c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbac07d2a325788; op2val:0x991c4de78594c;
   valaddr_reg:x3; val_offset:334*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 334*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xac07d2a325788 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x991c4de78594c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbac07d2a325788; op2val:0x991c4de78594c;
   valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xac07d2a325788 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x991c4de78594c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbac07d2a325788; op2val:0x991c4de78594c;
   valaddr_reg:x3; val_offset:338*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 338*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xae80d9af5ab28 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x983b2a4090630 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbae80d9af5ab28; op2val:0x983b2a4090630;
   valaddr_reg:x3; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 340*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xae80d9af5ab28 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x983b2a4090630 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbae80d9af5ab28; op2val:0x983b2a4090630;
   valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xae80d9af5ab28 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x983b2a4090630 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbae80d9af5ab28; op2val:0x983b2a4090630;
   valaddr_reg:x3; val_offset:344*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 344*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xae80d9af5ab28 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x983b2a4090630 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbae80d9af5ab28; op2val:0x983b2a4090630;
   valaddr_reg:x3; val_offset:346*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 346*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xae80d9af5ab28 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x983b2a4090630 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbae80d9af5ab28; op2val:0x983b2a4090630;
   valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xafd401bb76ca8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x2f8734d9a6dee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbafd401bb76ca8; op2val:0x42f8734d9a6dee;
   valaddr_reg:x3; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 350*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xafd401bb76ca8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x2f8734d9a6dee and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbafd401bb76ca8; op2val:0x42f8734d9a6dee;
   valaddr_reg:x3; val_offset:352*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 352*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xafd401bb76ca8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x2f8734d9a6dee and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbafd401bb76ca8; op2val:0x42f8734d9a6dee;
   valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xafd401bb76ca8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x2f8734d9a6dee and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbafd401bb76ca8; op2val:0x42f8734d9a6dee;
   valaddr_reg:x3; val_offset:356*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 356*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xafd401bb76ca8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x2f8734d9a6dee and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbafd401bb76ca8; op2val:0x42f8734d9a6dee;
   valaddr_reg:x3; val_offset:358*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 358*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3ee551bd5638 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb3ee551bd5638; op2val:0x13;
   valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3ee551bd5638 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000013 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb3ee551bd5638; op2val:0x13;
   valaddr_reg:x3; val_offset:362*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 362*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3ee551bd5638 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000013 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb3ee551bd5638; op2val:0x13;
   valaddr_reg:x3; val_offset:364*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 364*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3ee551bd5638 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000013 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb3ee551bd5638; op2val:0x13;
   valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3ee551bd5638 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000013 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb3ee551bd5638; op2val:0x13;
   valaddr_reg:x3; val_offset:368*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 368*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x007c3c0d49b24 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xff08003f7aac9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc007c3c0d49b24; op2val:0x2ff08003f7aac9;
   valaddr_reg:x3; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 370*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x007c3c0d49b24 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xff08003f7aac9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc007c3c0d49b24; op2val:0x2ff08003f7aac9;
   valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x007c3c0d49b24 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xff08003f7aac9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc007c3c0d49b24; op2val:0x2ff08003f7aac9;
   valaddr_reg:x3; val_offset:374*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 374*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x007c3c0d49b24 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xff08003f7aac9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc007c3c0d49b24; op2val:0x2ff08003f7aac9;
   valaddr_reg:x3; val_offset:376*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 376*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x007c3c0d49b24 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xff08003f7aac9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc007c3c0d49b24; op2val:0x2ff08003f7aac9;
   valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ba71e4ba55c8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x04286e1b62201 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0ba71e4ba55c8; op2val:0x404286e1b62201;
   valaddr_reg:x3; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 380*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ba71e4ba55c8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x04286e1b62201 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0ba71e4ba55c8; op2val:0x404286e1b62201;
   valaddr_reg:x3; val_offset:382*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 382*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ba71e4ba55c8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x04286e1b62201 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0ba71e4ba55c8; op2val:0x404286e1b62201;
   valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ba71e4ba55c8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x04286e1b62201 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0ba71e4ba55c8; op2val:0x404286e1b62201;
   valaddr_reg:x3; val_offset:386*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 386*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ba71e4ba55c8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x04286e1b62201 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0ba71e4ba55c8; op2val:0x404286e1b62201;
   valaddr_reg:x3; val_offset:388*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 388*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x167a8847caae8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6abf0ce2f68d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc167a8847caae8; op2val:0x3d6abf0ce2f68d;
   valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x167a8847caae8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6abf0ce2f68d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc167a8847caae8; op2val:0x3d6abf0ce2f68d;
   valaddr_reg:x3; val_offset:392*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 392*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x167a8847caae8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6abf0ce2f68d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc167a8847caae8; op2val:0x3d6abf0ce2f68d;
   valaddr_reg:x3; val_offset:394*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 394*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x167a8847caae8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6abf0ce2f68d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc167a8847caae8; op2val:0x3d6abf0ce2f68d;
   valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x167a8847caae8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6abf0ce2f68d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc167a8847caae8; op2val:0x3d6abf0ce2f68d;
   valaddr_reg:x3; val_offset:398*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 398*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x19b60760df248 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xd145647273fb7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc19b60760df248; op2val:0x2d145647273fb7;
   valaddr_reg:x3; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 400*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x19b60760df248 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xd145647273fb7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc19b60760df248; op2val:0x2d145647273fb7;
   valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x19b60760df248 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xd145647273fb7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc19b60760df248; op2val:0x2d145647273fb7;
   valaddr_reg:x3; val_offset:404*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 404*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x19b60760df248 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xd145647273fb7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc19b60760df248; op2val:0x2d145647273fb7;
   valaddr_reg:x3; val_offset:406*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 406*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x19b60760df248 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xd145647273fb7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc19b60760df248; op2val:0x2d145647273fb7;
   valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2193539b2d7f8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x5379ead9c4597 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc2193539b2d7f8; op2val:0x45379ead9c4597;
   valaddr_reg:x3; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 410*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2193539b2d7f8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x5379ead9c4597 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc2193539b2d7f8; op2val:0x45379ead9c4597;
   valaddr_reg:x3; val_offset:412*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 412*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2193539b2d7f8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x5379ead9c4597 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc2193539b2d7f8; op2val:0x45379ead9c4597;
   valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2193539b2d7f8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x5379ead9c4597 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc2193539b2d7f8; op2val:0x45379ead9c4597;
   valaddr_reg:x3; val_offset:416*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 416*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2193539b2d7f8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x5379ead9c4597 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc2193539b2d7f8; op2val:0x45379ead9c4597;
   valaddr_reg:x3; val_offset:418*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 418*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2b1fedbbf1d4c and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb62f639c243d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc2b1fedbbf1d4c; op2val:0x2b62f639c243d4;
   valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2b1fedbbf1d4c and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb62f639c243d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc2b1fedbbf1d4c; op2val:0x2b62f639c243d4;
   valaddr_reg:x3; val_offset:422*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 422*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2b1fedbbf1d4c and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb62f639c243d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc2b1fedbbf1d4c; op2val:0x2b62f639c243d4;
   valaddr_reg:x3; val_offset:424*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 424*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2b1fedbbf1d4c and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb62f639c243d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc2b1fedbbf1d4c; op2val:0x2b62f639c243d4;
   valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2b1fedbbf1d4c and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb62f639c243d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc2b1fedbbf1d4c; op2val:0x2b62f639c243d4;
   valaddr_reg:x3; val_offset:428*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 428*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x318364efdb33c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xc7d6108f5fafb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc318364efdb33c; op2val:0x3c7d6108f5fafb;
   valaddr_reg:x3; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 430*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x318364efdb33c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xc7d6108f5fafb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc318364efdb33c; op2val:0x3c7d6108f5fafb;
   valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x318364efdb33c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xc7d6108f5fafb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc318364efdb33c; op2val:0x3c7d6108f5fafb;
   valaddr_reg:x3; val_offset:434*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 434*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x318364efdb33c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xc7d6108f5fafb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc318364efdb33c; op2val:0x3c7d6108f5fafb;
   valaddr_reg:x3; val_offset:436*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 436*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x318364efdb33c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xc7d6108f5fafb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc318364efdb33c; op2val:0x3c7d6108f5fafb;
   valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x463c94145a570 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x91c50c1bb8cc5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc463c94145a570; op2val:0x391c50c1bb8cc5;
   valaddr_reg:x3; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 440*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x463c94145a570 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x91c50c1bb8cc5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc463c94145a570; op2val:0x391c50c1bb8cc5;
   valaddr_reg:x3; val_offset:442*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 442*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x463c94145a570 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x91c50c1bb8cc5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc463c94145a570; op2val:0x391c50c1bb8cc5;
   valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x463c94145a570 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x91c50c1bb8cc5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc463c94145a570; op2val:0x391c50c1bb8cc5;
   valaddr_reg:x3; val_offset:446*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 446*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x463c94145a570 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x91c50c1bb8cc5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc463c94145a570; op2val:0x391c50c1bb8cc5;
   valaddr_reg:x3; val_offset:448*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 448*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x466d613983784 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9188fb6dcebd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc466d613983784; op2val:0x29188fb6dcebd6;
   valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x466d613983784 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9188fb6dcebd6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc466d613983784; op2val:0x29188fb6dcebd6;
   valaddr_reg:x3; val_offset:452*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 452*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x466d613983784 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9188fb6dcebd6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc466d613983784; op2val:0x29188fb6dcebd6;
   valaddr_reg:x3; val_offset:454*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 454*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x466d613983784 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9188fb6dcebd6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc466d613983784; op2val:0x29188fb6dcebd6;
   valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x466d613983784 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9188fb6dcebd6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc466d613983784; op2val:0x29188fb6dcebd6;
   valaddr_reg:x3; val_offset:458*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 458*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x50e5f6d4b6efc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc50e5f6d4b6efc; op2val:0xc;
   valaddr_reg:x3; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 460*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x50e5f6d4b6efc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc50e5f6d4b6efc; op2val:0xc;
   valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x50e5f6d4b6efc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc50e5f6d4b6efc; op2val:0xc;
   valaddr_reg:x3; val_offset:464*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 464*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x50e5f6d4b6efc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc50e5f6d4b6efc; op2val:0xc;
   valaddr_reg:x3; val_offset:466*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 466*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x50e5f6d4b6efc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc50e5f6d4b6efc; op2val:0xc;
   valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x54ee6267c5580 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x987b33888b32c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc54ee6267c5580; op2val:0x3987b33888b32c;
   valaddr_reg:x3; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 470*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x54ee6267c5580 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x987b33888b32c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc54ee6267c5580; op2val:0x3987b33888b32c;
   valaddr_reg:x3; val_offset:472*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 472*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x54ee6267c5580 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x987b33888b32c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc54ee6267c5580; op2val:0x3987b33888b32c;
   valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x54ee6267c5580 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x987b33888b32c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc54ee6267c5580; op2val:0x3987b33888b32c;
   valaddr_reg:x3; val_offset:476*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 476*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x54ee6267c5580 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x987b33888b32c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc54ee6267c5580; op2val:0x3987b33888b32c;
   valaddr_reg:x3; val_offset:478*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 478*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x67b079afda11c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6c6740bf5eb99 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc67b079afda11c; op2val:0x36c6740bf5eb99;
   valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x67b079afda11c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6c6740bf5eb99 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc67b079afda11c; op2val:0x36c6740bf5eb99;
   valaddr_reg:x3; val_offset:482*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 482*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x67b079afda11c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6c6740bf5eb99 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc67b079afda11c; op2val:0x36c6740bf5eb99;
   valaddr_reg:x3; val_offset:484*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 484*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x67b079afda11c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6c6740bf5eb99 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc67b079afda11c; op2val:0x36c6740bf5eb99;
   valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x67b079afda11c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6c6740bf5eb99 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc67b079afda11c; op2val:0x36c6740bf5eb99;
   valaddr_reg:x3; val_offset:488*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 488*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6c71ca2f8dfe0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x0dbc8e95388b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6c71ca2f8dfe0; op2val:0x40dbc8e95388b0;
   valaddr_reg:x3; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 490*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6c71ca2f8dfe0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x0dbc8e95388b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6c71ca2f8dfe0; op2val:0x40dbc8e95388b0;
   valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6c71ca2f8dfe0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x0dbc8e95388b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6c71ca2f8dfe0; op2val:0x40dbc8e95388b0;
   valaddr_reg:x3; val_offset:494*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 494*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6c71ca2f8dfe0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x0dbc8e95388b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6c71ca2f8dfe0; op2val:0x40dbc8e95388b0;
   valaddr_reg:x3; val_offset:496*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 496*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6c71ca2f8dfe0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x0dbc8e95388b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6c71ca2f8dfe0; op2val:0x40dbc8e95388b0;
   valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6fd220a896260 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6fd220a896260; op2val:0xb;
   valaddr_reg:x3; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 500*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6fd220a896260 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6fd220a896260; op2val:0xb;
   valaddr_reg:x3; val_offset:502*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 502*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6fd220a896260 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6fd220a896260; op2val:0xb;
   valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6fd220a896260 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6fd220a896260; op2val:0xb;
   valaddr_reg:x3; val_offset:506*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 506*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6fd220a896260 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6fd220a896260; op2val:0xb;
   valaddr_reg:x3; val_offset:508*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 508*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x75095a6c9b944 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x57d75cedfc60c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc75095a6c9b944; op2val:0x57d75cedfc60c;
   valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x75095a6c9b944 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x57d75cedfc60c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc75095a6c9b944; op2val:0x57d75cedfc60c;
   valaddr_reg:x3; val_offset:512*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 512*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x75095a6c9b944 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x57d75cedfc60c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc75095a6c9b944; op2val:0x57d75cedfc60c;
   valaddr_reg:x3; val_offset:514*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 514*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x75095a6c9b944 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x57d75cedfc60c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc75095a6c9b944; op2val:0x57d75cedfc60c;
   valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x75095a6c9b944 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x57d75cedfc60c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc75095a6c9b944; op2val:0x57d75cedfc60c;
   valaddr_reg:x3; val_offset:518*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 518*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e400e1064944 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x56e5545361807 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc7e400e1064944; op2val:0x256e5545361807;
   valaddr_reg:x3; val_offset:520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 520*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e400e1064944 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x56e5545361807 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc7e400e1064944; op2val:0x256e5545361807;
   valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e400e1064944 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x56e5545361807 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc7e400e1064944; op2val:0x256e5545361807;
   valaddr_reg:x3; val_offset:524*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 524*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e400e1064944 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x56e5545361807 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc7e400e1064944; op2val:0x256e5545361807;
   valaddr_reg:x3; val_offset:526*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 526*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e400e1064944 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x56e5545361807 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc7e400e1064944; op2val:0x256e5545361807;
   valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8209bde69354c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xfd4c0454e5bf1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc8209bde69354c; op2val:0x3fd4c0454e5bf1;
   valaddr_reg:x3; val_offset:530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 530*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8209bde69354c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xfd4c0454e5bf1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc8209bde69354c; op2val:0x3fd4c0454e5bf1;
   valaddr_reg:x3; val_offset:532*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 532*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8209bde69354c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xfd4c0454e5bf1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc8209bde69354c; op2val:0x3fd4c0454e5bf1;
   valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8209bde69354c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xfd4c0454e5bf1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc8209bde69354c; op2val:0x3fd4c0454e5bf1;
   valaddr_reg:x3; val_offset:536*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 536*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8209bde69354c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xfd4c0454e5bf1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc8209bde69354c; op2val:0x3fd4c0454e5bf1;
   valaddr_reg:x3; val_offset:538*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 538*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x881e15730be48 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6328a9745fcd5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc881e15730be48; op2val:0x36328a9745fcd5;
   valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x881e15730be48 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6328a9745fcd5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc881e15730be48; op2val:0x36328a9745fcd5;
   valaddr_reg:x3; val_offset:542*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 542*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x881e15730be48 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6328a9745fcd5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc881e15730be48; op2val:0x36328a9745fcd5;
   valaddr_reg:x3; val_offset:544*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 544*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x881e15730be48 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6328a9745fcd5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc881e15730be48; op2val:0x36328a9745fcd5;
   valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x881e15730be48 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6328a9745fcd5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc881e15730be48; op2val:0x36328a9745fcd5;
   valaddr_reg:x3; val_offset:548*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 548*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x942981852ba5c and fs2 == 0 and fe2 == 0x002 and fm2 == 0x444e34d859383 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc942981852ba5c; op2val:0x2444e34d859383;
   valaddr_reg:x3; val_offset:550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 550*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x942981852ba5c and fs2 == 0 and fe2 == 0x002 and fm2 == 0x444e34d859383 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc942981852ba5c; op2val:0x2444e34d859383;
   valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x942981852ba5c and fs2 == 0 and fe2 == 0x002 and fm2 == 0x444e34d859383 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc942981852ba5c; op2val:0x2444e34d859383;
   valaddr_reg:x3; val_offset:554*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 554*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x942981852ba5c and fs2 == 0 and fe2 == 0x002 and fm2 == 0x444e34d859383 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc942981852ba5c; op2val:0x2444e34d859383;
   valaddr_reg:x3; val_offset:556*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 556*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x942981852ba5c and fs2 == 0 and fe2 == 0x002 and fm2 == 0x444e34d859383 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc942981852ba5c; op2val:0x2444e34d859383;
   valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9c3798a005bc0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3df7e38652a3b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9c3798a005bc0; op2val:0x23df7e38652a3b;
   valaddr_reg:x3; val_offset:560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 560*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9c3798a005bc0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3df7e38652a3b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9c3798a005bc0; op2val:0x23df7e38652a3b;
   valaddr_reg:x3; val_offset:562*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 562*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9c3798a005bc0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3df7e38652a3b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9c3798a005bc0; op2val:0x23df7e38652a3b;
   valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9c3798a005bc0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3df7e38652a3b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9c3798a005bc0; op2val:0x23df7e38652a3b;
   valaddr_reg:x3; val_offset:566*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 566*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9c3798a005bc0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3df7e38652a3b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9c3798a005bc0; op2val:0x23df7e38652a3b;
   valaddr_reg:x3; val_offset:568*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 568*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9dd80f4aec684 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xdb13dc952f917 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9dd80f4aec684; op2val:0x3db13dc952f917;
   valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9dd80f4aec684 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xdb13dc952f917 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9dd80f4aec684; op2val:0x3db13dc952f917;
   valaddr_reg:x3; val_offset:572*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 572*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9dd80f4aec684 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xdb13dc952f917 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9dd80f4aec684; op2val:0x3db13dc952f917;
   valaddr_reg:x3; val_offset:574*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 574*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9dd80f4aec684 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xdb13dc952f917 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9dd80f4aec684; op2val:0x3db13dc952f917;
   valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9dd80f4aec684 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xdb13dc952f917 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9dd80f4aec684; op2val:0x3db13dc952f917;
   valaddr_reg:x3; val_offset:578*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 578*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9df9047ecdecc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3c9eb1550c385 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9df9047ecdecc; op2val:0x33c9eb1550c385;
   valaddr_reg:x3; val_offset:580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 580*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9df9047ecdecc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3c9eb1550c385 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9df9047ecdecc; op2val:0x33c9eb1550c385;
   valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9df9047ecdecc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3c9eb1550c385 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9df9047ecdecc; op2val:0x33c9eb1550c385;
   valaddr_reg:x3; val_offset:584*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 584*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9df9047ecdecc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3c9eb1550c385 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9df9047ecdecc; op2val:0x33c9eb1550c385;
   valaddr_reg:x3; val_offset:586*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 586*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9df9047ecdecc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3c9eb1550c385 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9df9047ecdecc; op2val:0x33c9eb1550c385;
   valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3a3d9dd57ab8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x4bdd892c8fdb2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca3a3d9dd57ab8; op2val:0x34bdd892c8fdb2;
   valaddr_reg:x3; val_offset:590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 590*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3a3d9dd57ab8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x4bdd892c8fdb2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca3a3d9dd57ab8; op2val:0x34bdd892c8fdb2;
   valaddr_reg:x3; val_offset:592*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 592*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3a3d9dd57ab8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x4bdd892c8fdb2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca3a3d9dd57ab8; op2val:0x34bdd892c8fdb2;
   valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3a3d9dd57ab8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x4bdd892c8fdb2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca3a3d9dd57ab8; op2val:0x34bdd892c8fdb2;
   valaddr_reg:x3; val_offset:596*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 596*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3a3d9dd57ab8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x4bdd892c8fdb2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca3a3d9dd57ab8; op2val:0x34bdd892c8fdb2;
   valaddr_reg:x3; val_offset:598*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 598*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb999160094d08 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x28d01d16ac111 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcb999160094d08; op2val:0x328d01d16ac111;
   valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb999160094d08 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x28d01d16ac111 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcb999160094d08; op2val:0x328d01d16ac111;
   valaddr_reg:x3; val_offset:602*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 602*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb999160094d08 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x28d01d16ac111 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcb999160094d08; op2val:0x328d01d16ac111;
   valaddr_reg:x3; val_offset:604*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 604*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb999160094d08 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x28d01d16ac111 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcb999160094d08; op2val:0x328d01d16ac111;
   valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb999160094d08 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x28d01d16ac111 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcb999160094d08; op2val:0x328d01d16ac111;
   valaddr_reg:x3; val_offset:608*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 608*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc502abba63f98 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x336b418560c0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcc502abba63f98; op2val:0x3336b418560c0f;
   valaddr_reg:x3; val_offset:610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 610*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc502abba63f98 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x336b418560c0f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcc502abba63f98; op2val:0x3336b418560c0f;
   valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc502abba63f98 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x336b418560c0f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcc502abba63f98; op2val:0x3336b418560c0f;
   valaddr_reg:x3; val_offset:614*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 614*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc502abba63f98 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x336b418560c0f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcc502abba63f98; op2val:0x3336b418560c0f;
   valaddr_reg:x3; val_offset:616*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 616*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc502abba63f98 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x336b418560c0f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcc502abba63f98; op2val:0x3336b418560c0f;
   valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd2eb732cadf4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x44ab747cfbe70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcdd2eb732cadf4; op2val:0x44ab747cfbe70;
   valaddr_reg:x3; val_offset:620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 620*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd2eb732cadf4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x44ab747cfbe70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcdd2eb732cadf4; op2val:0x44ab747cfbe70;
   valaddr_reg:x3; val_offset:622*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 622*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd2eb732cadf4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x44ab747cfbe70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcdd2eb732cadf4; op2val:0x44ab747cfbe70;
   valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd2eb732cadf4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x44ab747cfbe70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcdd2eb732cadf4; op2val:0x44ab747cfbe70;
   valaddr_reg:x3; val_offset:626*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 626*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd2eb732cadf4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x44ab747cfbe70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcdd2eb732cadf4; op2val:0x44ab747cfbe70;
   valaddr_reg:x3; val_offset:628*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 628*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdf4b276514808 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x117819828a334 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcdf4b276514808; op2val:0x2117819828a334;
   valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdf4b276514808 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x117819828a334 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcdf4b276514808; op2val:0x2117819828a334;
   valaddr_reg:x3; val_offset:632*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 632*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdf4b276514808 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x117819828a334 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcdf4b276514808; op2val:0x2117819828a334;
   valaddr_reg:x3; val_offset:634*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 634*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdf4b276514808 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x117819828a334 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcdf4b276514808; op2val:0x2117819828a334;
   valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdf4b276514808 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x117819828a334 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcdf4b276514808; op2val:0x2117819828a334;
   valaddr_reg:x3; val_offset:638*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 638*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe08dd382d6120 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x9920b6e8a3671 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce08dd382d6120; op2val:0x39920b6e8a3671;
   valaddr_reg:x3; val_offset:640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 640*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe08dd382d6120 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x9920b6e8a3671 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce08dd382d6120; op2val:0x39920b6e8a3671;
   valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe08dd382d6120 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x9920b6e8a3671 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce08dd382d6120; op2val:0x39920b6e8a3671;
   valaddr_reg:x3; val_offset:644*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 644*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe08dd382d6120 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x9920b6e8a3671 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce08dd382d6120; op2val:0x39920b6e8a3671;
   valaddr_reg:x3; val_offset:646*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 646*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe08dd382d6120 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x9920b6e8a3671 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce08dd382d6120; op2val:0x39920b6e8a3671;
   valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe59c4ba2c0268 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce59c4ba2c0268; op2val:0x8;
   valaddr_reg:x3; val_offset:650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 650*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe59c4ba2c0268 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce59c4ba2c0268; op2val:0x8;
   valaddr_reg:x3; val_offset:652*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 652*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe59c4ba2c0268 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce59c4ba2c0268; op2val:0x8;
   valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe59c4ba2c0268 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce59c4ba2c0268; op2val:0x8;
   valaddr_reg:x3; val_offset:656*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 656*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe59c4ba2c0268 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce59c4ba2c0268; op2val:0x8;
   valaddr_reg:x3; val_offset:658*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 658*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe8399b2e29734 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x431dd901d710d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce8399b2e29734; op2val:0x431dd901d710d;
   valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe8399b2e29734 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x431dd901d710d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce8399b2e29734; op2val:0x431dd901d710d;
   valaddr_reg:x3; val_offset:662*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 662*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe8399b2e29734 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x431dd901d710d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce8399b2e29734; op2val:0x431dd901d710d;
   valaddr_reg:x3; val_offset:664*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 664*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe8399b2e29734 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x431dd901d710d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce8399b2e29734; op2val:0x431dd901d710d;
   valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe8399b2e29734 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x431dd901d710d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce8399b2e29734; op2val:0x431dd901d710d;
   valaddr_reg:x3; val_offset:668*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 668*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe852bd592685c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x1d302bdf82cf1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce852bd592685c; op2val:0x31d302bdf82cf1;
   valaddr_reg:x3; val_offset:670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 670*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe852bd592685c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x1d302bdf82cf1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce852bd592685c; op2val:0x31d302bdf82cf1;
   valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe852bd592685c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x1d302bdf82cf1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce852bd592685c; op2val:0x31d302bdf82cf1;
   valaddr_reg:x3; val_offset:674*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 674*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe852bd592685c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x1d302bdf82cf1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce852bd592685c; op2val:0x31d302bdf82cf1;
   valaddr_reg:x3; val_offset:676*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 676*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe852bd592685c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x1d302bdf82cf1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fce852bd592685c; op2val:0x31d302bdf82cf1;
   valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf7ccb699a28c0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf7ccb699a28c0; op2val:0x8;
   valaddr_reg:x3; val_offset:680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 680*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf7ccb699a28c0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf7ccb699a28c0; op2val:0x8;
   valaddr_reg:x3; val_offset:682*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 682*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf7ccb699a28c0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf7ccb699a28c0; op2val:0x8;
   valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf7ccb699a28c0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf7ccb699a28c0; op2val:0x8;
   valaddr_reg:x3; val_offset:686*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 686*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf7ccb699a28c0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf7ccb699a28c0; op2val:0x8;
   valaddr_reg:x3; val_offset:688*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 688*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8aac8a7b2128 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03b83f0621f36 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf8aac8a7b2128; op2val:0x203b83f0621f36;
   valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8aac8a7b2128 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03b83f0621f36 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf8aac8a7b2128; op2val:0x203b83f0621f36;
   valaddr_reg:x3; val_offset:692*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 692*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8aac8a7b2128 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03b83f0621f36 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf8aac8a7b2128; op2val:0x203b83f0621f36;
   valaddr_reg:x3; val_offset:694*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 694*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8aac8a7b2128 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03b83f0621f36 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf8aac8a7b2128; op2val:0x203b83f0621f36;
   valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8aac8a7b2128 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03b83f0621f36 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf8aac8a7b2128; op2val:0x203b83f0621f36;
   valaddr_reg:x3; val_offset:698*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 698*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8c30007cd3dc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x13e685c6f44b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf8c30007cd3dc; op2val:0x313e685c6f44b4;
   valaddr_reg:x3; val_offset:700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 700*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8c30007cd3dc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x13e685c6f44b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf8c30007cd3dc; op2val:0x313e685c6f44b4;
   valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8c30007cd3dc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x13e685c6f44b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf8c30007cd3dc; op2val:0x313e685c6f44b4;
   valaddr_reg:x3; val_offset:704*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 704*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8c30007cd3dc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x13e685c6f44b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf8c30007cd3dc; op2val:0x313e685c6f44b4;
   valaddr_reg:x3; val_offset:706*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 706*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8c30007cd3dc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x13e685c6f44b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf8c30007cd3dc; op2val:0x313e685c6f44b4;
   valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x047e170b449d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3ee56faafc279 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd047e170b449d4; op2val:0x3ee56faafc279;
   valaddr_reg:x3; val_offset:710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 710*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x047e170b449d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3ee56faafc279 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd047e170b449d4; op2val:0x3ee56faafc279;
   valaddr_reg:x3; val_offset:712*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 712*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x047e170b449d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3ee56faafc279 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd047e170b449d4; op2val:0x3ee56faafc279;
   valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x047e170b449d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3ee56faafc279 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd047e170b449d4; op2val:0x3ee56faafc279;
   valaddr_reg:x3; val_offset:716*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 716*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x047e170b449d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3ee56faafc279 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd047e170b449d4; op2val:0x3ee56faafc279;
   valaddr_reg:x3; val_offset:718*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 718*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0557ad7269734 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf5888ff9c29f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd0557ad7269734; op2val:0x1f5888ff9c29f1;
   valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0557ad7269734 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf5888ff9c29f1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd0557ad7269734; op2val:0x1f5888ff9c29f1;
   valaddr_reg:x3; val_offset:722*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 722*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0557ad7269734 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf5888ff9c29f1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd0557ad7269734; op2val:0x1f5888ff9c29f1;
   valaddr_reg:x3; val_offset:724*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 724*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0557ad7269734 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf5888ff9c29f1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd0557ad7269734; op2val:0x1f5888ff9c29f1;
   valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0557ad7269734 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf5888ff9c29f1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd0557ad7269734; op2val:0x1f5888ff9c29f1;
   valaddr_reg:x3; val_offset:728*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 728*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x05e4750a0ffc4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3e8f5edb409b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd05e4750a0ffc4; op2val:0x3e8f5edb409b7;
   valaddr_reg:x3; val_offset:730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 730*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x05e4750a0ffc4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3e8f5edb409b7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd05e4750a0ffc4; op2val:0x3e8f5edb409b7;
   valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x05e4750a0ffc4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3e8f5edb409b7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd05e4750a0ffc4; op2val:0x3e8f5edb409b7;
   valaddr_reg:x3; val_offset:734*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 734*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x05e4750a0ffc4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3e8f5edb409b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd05e4750a0ffc4; op2val:0x3e8f5edb409b7;
   valaddr_reg:x3; val_offset:736*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 736*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x05e4750a0ffc4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3e8f5edb409b7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd05e4750a0ffc4; op2val:0x3e8f5edb409b7;
   valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x079e604cdfa6a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x08239d5aba8f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd079e604cdfa6a; op2val:0x308239d5aba8f4;
   valaddr_reg:x3; val_offset:740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 740*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x079e604cdfa6a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x08239d5aba8f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd079e604cdfa6a; op2val:0x308239d5aba8f4;
   valaddr_reg:x3; val_offset:742*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 742*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x079e604cdfa6a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x08239d5aba8f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd079e604cdfa6a; op2val:0x308239d5aba8f4;
   valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x079e604cdfa6a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x08239d5aba8f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd079e604cdfa6a; op2val:0x308239d5aba8f4;
   valaddr_reg:x3; val_offset:746*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 746*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x079e604cdfa6a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x08239d5aba8f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd079e604cdfa6a; op2val:0x308239d5aba8f4;
   valaddr_reg:x3; val_offset:748*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 748*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0ff900bcc0d10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd0ff900bcc0d10; op2val:0x8;
   valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0ff900bcc0d10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd0ff900bcc0d10; op2val:0x8;
   valaddr_reg:x3; val_offset:752*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 752*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0ff900bcc0d10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd0ff900bcc0d10; op2val:0x8;
   valaddr_reg:x3; val_offset:754*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 754*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0ff900bcc0d10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd0ff900bcc0d10; op2val:0x8;
   valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0ff900bcc0d10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd0ff900bcc0d10; op2val:0x8;
   valaddr_reg:x3; val_offset:758*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 758*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x15077c37223e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3b244b258c5a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd15077c37223e0; op2val:0x3b244b258c5a4;
   valaddr_reg:x3; val_offset:760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 760*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x15077c37223e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3b244b258c5a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd15077c37223e0; op2val:0x3b244b258c5a4;
   valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x15077c37223e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3b244b258c5a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd15077c37223e0; op2val:0x3b244b258c5a4;
   valaddr_reg:x3; val_offset:764*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 764*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x15077c37223e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3b244b258c5a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd15077c37223e0; op2val:0x3b244b258c5a4;
   valaddr_reg:x3; val_offset:766*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 766*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x15077c37223e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3b244b258c5a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd15077c37223e0; op2val:0x3b244b258c5a4;
   valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adb43458fbbc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1adb43458fbbc; op2val:0x7;
   valaddr_reg:x3; val_offset:770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 770*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adb43458fbbc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1adb43458fbbc; op2val:0x7;
   valaddr_reg:x3; val_offset:772*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 772*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adb43458fbbc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1adb43458fbbc; op2val:0x7;
   valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adb43458fbbc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1adb43458fbbc; op2val:0x7;
   valaddr_reg:x3; val_offset:776*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 776*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adb43458fbbc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1adb43458fbbc; op2val:0x7;
   valaddr_reg:x3; val_offset:778*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 778*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adc1f74c2452 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcf61a472d8839 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1adc1f74c2452; op2val:0x1cf61a472d8839;
   valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adc1f74c2452 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcf61a472d8839 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1adc1f74c2452; op2val:0x1cf61a472d8839;
   valaddr_reg:x3; val_offset:782*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 782*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adc1f74c2452 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcf61a472d8839 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1adc1f74c2452; op2val:0x1cf61a472d8839;
   valaddr_reg:x3; val_offset:784*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 784*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adc1f74c2452 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcf61a472d8839 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1adc1f74c2452; op2val:0x1cf61a472d8839;
   valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adc1f74c2452 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcf61a472d8839 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1adc1f74c2452; op2val:0x1cf61a472d8839;
   valaddr_reg:x3; val_offset:788*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 788*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1b1e0625a83ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcef5c7fd0470b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1b1e0625a83ac; op2val:0x1cef5c7fd0470b;
   valaddr_reg:x3; val_offset:790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 790*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1b1e0625a83ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcef5c7fd0470b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1b1e0625a83ac; op2val:0x1cef5c7fd0470b;
   valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1b1e0625a83ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcef5c7fd0470b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1b1e0625a83ac; op2val:0x1cef5c7fd0470b;
   valaddr_reg:x3; val_offset:794*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 794*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1b1e0625a83ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcef5c7fd0470b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1b1e0625a83ac; op2val:0x1cef5c7fd0470b;
   valaddr_reg:x3; val_offset:796*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 796*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1b1e0625a83ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcef5c7fd0470b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1b1e0625a83ac; op2val:0x1cef5c7fd0470b;
   valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1ba2b891e3858 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1ba2b891e3858; op2val:0x7;
   valaddr_reg:x3; val_offset:800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 800*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1ba2b891e3858 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1ba2b891e3858; op2val:0x7;
   valaddr_reg:x3; val_offset:802*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 802*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1ba2b891e3858 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1ba2b891e3858; op2val:0x7;
   valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1ba2b891e3858 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1ba2b891e3858; op2val:0x7;
   valaddr_reg:x3; val_offset:806*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 806*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1ba2b891e3858 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1ba2b891e3858; op2val:0x7;
   valaddr_reg:x3; val_offset:808*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 808*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x213173bcdd44a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x53eccf46208e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd213173bcdd44a; op2val:0x353eccf46208e3;
   valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x213173bcdd44a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x53eccf46208e3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd213173bcdd44a; op2val:0x353eccf46208e3;
   valaddr_reg:x3; val_offset:812*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 812*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x213173bcdd44a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x53eccf46208e3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd213173bcdd44a; op2val:0x353eccf46208e3;
   valaddr_reg:x3; val_offset:814*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 814*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x213173bcdd44a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x53eccf46208e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd213173bcdd44a; op2val:0x353eccf46208e3;
   valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x213173bcdd44a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x53eccf46208e3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd213173bcdd44a; op2val:0x353eccf46208e3;
   valaddr_reg:x3; val_offset:818*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 818*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x237767be2fcf6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x383659b16bdb6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd237767be2fcf6; op2val:0x383659b16bdb6;
   valaddr_reg:x3; val_offset:820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 820*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x237767be2fcf6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x383659b16bdb6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd237767be2fcf6; op2val:0x383659b16bdb6;
   valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x237767be2fcf6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x383659b16bdb6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd237767be2fcf6; op2val:0x383659b16bdb6;
   valaddr_reg:x3; val_offset:824*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 824*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x237767be2fcf6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x383659b16bdb6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd237767be2fcf6; op2val:0x383659b16bdb6;
   valaddr_reg:x3; val_offset:826*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 826*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x237767be2fcf6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x383659b16bdb6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd237767be2fcf6; op2val:0x383659b16bdb6;
   valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x27587e8bf0d24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x377956aa3acd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd27587e8bf0d24; op2val:0x377956aa3acd6;
   valaddr_reg:x3; val_offset:830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 830*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x27587e8bf0d24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x377956aa3acd6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd27587e8bf0d24; op2val:0x377956aa3acd6;
   valaddr_reg:x3; val_offset:832*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 832*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x27587e8bf0d24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x377956aa3acd6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd27587e8bf0d24; op2val:0x377956aa3acd6;
   valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x27587e8bf0d24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x377956aa3acd6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd27587e8bf0d24; op2val:0x377956aa3acd6;
   valaddr_reg:x3; val_offset:836*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 836*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x27587e8bf0d24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x377956aa3acd6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd27587e8bf0d24; op2val:0x377956aa3acd6;
   valaddr_reg:x3; val_offset:838*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 838*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x287d2722667ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x374294cb0d2a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd287d2722667ba; op2val:0x374294cb0d2a1;
   valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x287d2722667ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x374294cb0d2a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd287d2722667ba; op2val:0x374294cb0d2a1;
   valaddr_reg:x3; val_offset:842*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 842*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x287d2722667ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x374294cb0d2a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd287d2722667ba; op2val:0x374294cb0d2a1;
   valaddr_reg:x3; val_offset:844*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 844*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x287d2722667ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x374294cb0d2a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd287d2722667ba; op2val:0x374294cb0d2a1;
   valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x287d2722667ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x374294cb0d2a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd287d2722667ba; op2val:0x374294cb0d2a1;
   valaddr_reg:x3; val_offset:848*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 848*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x297946d1f11f8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb89df6e6cca61 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd297946d1f11f8; op2val:0x1b89df6e6cca61;
   valaddr_reg:x3; val_offset:850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 850*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x297946d1f11f8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb89df6e6cca61 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd297946d1f11f8; op2val:0x1b89df6e6cca61;
   valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x297946d1f11f8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb89df6e6cca61 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd297946d1f11f8; op2val:0x1b89df6e6cca61;
   valaddr_reg:x3; val_offset:854*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 854*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x297946d1f11f8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb89df6e6cca61 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd297946d1f11f8; op2val:0x1b89df6e6cca61;
   valaddr_reg:x3; val_offset:856*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 856*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x297946d1f11f8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb89df6e6cca61 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd297946d1f11f8; op2val:0x1b89df6e6cca61;
   valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dad942d10ae0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x364f3ef277503 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2dad942d10ae0; op2val:0x364f3ef277503;
   valaddr_reg:x3; val_offset:860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 860*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dad942d10ae0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x364f3ef277503 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2dad942d10ae0; op2val:0x364f3ef277503;
   valaddr_reg:x3; val_offset:862*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 862*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dad942d10ae0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x364f3ef277503 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2dad942d10ae0; op2val:0x364f3ef277503;
   valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dad942d10ae0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x364f3ef277503 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2dad942d10ae0; op2val:0x364f3ef277503;
   valaddr_reg:x3; val_offset:866*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 866*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dad942d10ae0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x364f3ef277503 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2dad942d10ae0; op2val:0x364f3ef277503;
   valaddr_reg:x3; val_offset:868*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 868*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2fe42861fda3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x35e9fd8c3d2ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2fe42861fda3a; op2val:0x35e9fd8c3d2ca;
   valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2fe42861fda3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x35e9fd8c3d2ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2fe42861fda3a; op2val:0x35e9fd8c3d2ca;
   valaddr_reg:x3; val_offset:872*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 872*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2fe42861fda3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x35e9fd8c3d2ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2fe42861fda3a; op2val:0x35e9fd8c3d2ca;
   valaddr_reg:x3; val_offset:874*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 874*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2fe42861fda3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x35e9fd8c3d2ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2fe42861fda3a; op2val:0x35e9fd8c3d2ca;
   valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2fe42861fda3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x35e9fd8c3d2ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2fe42861fda3a; op2val:0x35e9fd8c3d2ca;
   valaddr_reg:x3; val_offset:878*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 878*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x33a37e151ddae and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd33a37e151ddae; op2val:0x7;
   valaddr_reg:x3; val_offset:880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 880*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x33a37e151ddae and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd33a37e151ddae; op2val:0x7;
   valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x33a37e151ddae and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd33a37e151ddae; op2val:0x7;
   valaddr_reg:x3; val_offset:884*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 884*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x33a37e151ddae and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd33a37e151ddae; op2val:0x7;
   valaddr_reg:x3; val_offset:886*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 886*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x33a37e151ddae and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd33a37e151ddae; op2val:0x7;
   valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x342aac39fad5a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3eff0646f6b06 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd342aac39fad5a; op2val:0x33eff0646f6b06;
   valaddr_reg:x3; val_offset:890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 890*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x342aac39fad5a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3eff0646f6b06 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd342aac39fad5a; op2val:0x33eff0646f6b06;
   valaddr_reg:x3; val_offset:892*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 892*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x342aac39fad5a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3eff0646f6b06 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd342aac39fad5a; op2val:0x33eff0646f6b06;
   valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x342aac39fad5a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3eff0646f6b06 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd342aac39fad5a; op2val:0x33eff0646f6b06;
   valaddr_reg:x3; val_offset:896*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 896*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x342aac39fad5a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3eff0646f6b06 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd342aac39fad5a; op2val:0x33eff0646f6b06;
   valaddr_reg:x3; val_offset:898*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 898*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ab94a728237c and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa0777dfda8219 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3ab94a728237c; op2val:0x1a0777dfda8219;
   valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ab94a728237c and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa0777dfda8219 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3ab94a728237c; op2val:0x1a0777dfda8219;
   valaddr_reg:x3; val_offset:902*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 902*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ab94a728237c and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa0777dfda8219 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3ab94a728237c; op2val:0x1a0777dfda8219;
   valaddr_reg:x3; val_offset:904*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 904*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ab94a728237c and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa0777dfda8219 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3ab94a728237c; op2val:0x1a0777dfda8219;
   valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ab94a728237c and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa0777dfda8219 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3ab94a728237c; op2val:0x1a0777dfda8219;
   valaddr_reg:x3; val_offset:908*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 908*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3d7504224a0a8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb6afa13acca44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3d7504224a0a8; op2val:0x2b6afa13acca44;
   valaddr_reg:x3; val_offset:910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 910*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3d7504224a0a8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb6afa13acca44 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3d7504224a0a8; op2val:0x2b6afa13acca44;
   valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3d7504224a0a8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb6afa13acca44 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3d7504224a0a8; op2val:0x2b6afa13acca44;
   valaddr_reg:x3; val_offset:914*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 914*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3d7504224a0a8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb6afa13acca44 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3d7504224a0a8; op2val:0x2b6afa13acca44;
   valaddr_reg:x3; val_offset:916*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 916*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3d7504224a0a8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb6afa13acca44 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3d7504224a0a8; op2val:0x2b6afa13acca44;
   valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x45ca3c3c5aeb0 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2dbd8afb1830c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd45ca3c3c5aeb0; op2val:0x32dbd8afb1830c;
   valaddr_reg:x3; val_offset:920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 920*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x45ca3c3c5aeb0 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2dbd8afb1830c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd45ca3c3c5aeb0; op2val:0x32dbd8afb1830c;
   valaddr_reg:x3; val_offset:922*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 922*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x45ca3c3c5aeb0 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2dbd8afb1830c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd45ca3c3c5aeb0; op2val:0x32dbd8afb1830c;
   valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x45ca3c3c5aeb0 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2dbd8afb1830c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd45ca3c3c5aeb0; op2val:0x32dbd8afb1830c;
   valaddr_reg:x3; val_offset:926*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 926*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x45ca3c3c5aeb0 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2dbd8afb1830c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd45ca3c3c5aeb0; op2val:0x32dbd8afb1830c;
   valaddr_reg:x3; val_offset:928*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 928*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47f5153fffd9a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2bbf0cbe6454a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd47f5153fffd9a; op2val:0x32bbf0cbe6454a;
   valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47f5153fffd9a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2bbf0cbe6454a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd47f5153fffd9a; op2val:0x32bbf0cbe6454a;
   valaddr_reg:x3; val_offset:932*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 932*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47f5153fffd9a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2bbf0cbe6454a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd47f5153fffd9a; op2val:0x32bbf0cbe6454a;
   valaddr_reg:x3; val_offset:934*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 934*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47f5153fffd9a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2bbf0cbe6454a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd47f5153fffd9a; op2val:0x32bbf0cbe6454a;
   valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47f5153fffd9a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2bbf0cbe6454a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd47f5153fffd9a; op2val:0x32bbf0cbe6454a;
   valaddr_reg:x3; val_offset:938*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 938*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4cce962ffbac6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x89d680434df9e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4cce962ffbac6; op2val:0x289d680434df9e;
   valaddr_reg:x3; val_offset:940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 940*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4cce962ffbac6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x89d680434df9e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4cce962ffbac6; op2val:0x289d680434df9e;
   valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4cce962ffbac6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x89d680434df9e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4cce962ffbac6; op2val:0x289d680434df9e;
   valaddr_reg:x3; val_offset:944*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 944*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4cce962ffbac6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x89d680434df9e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4cce962ffbac6; op2val:0x289d680434df9e;
   valaddr_reg:x3; val_offset:946*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 946*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4cce962ffbac6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x89d680434df9e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4cce962ffbac6; op2val:0x289d680434df9e;
   valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5531b85583a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4d5531b85583a; op2val:0x6;
   valaddr_reg:x3; val_offset:950*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 950*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5531b85583a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4d5531b85583a; op2val:0x6;
   valaddr_reg:x3; val_offset:952*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 952*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5531b85583a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4d5531b85583a; op2val:0x6;
   valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5531b85583a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4d5531b85583a; op2val:0x6;
   valaddr_reg:x3; val_offset:956*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 956*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5531b85583a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4d5531b85583a; op2val:0x6;
   valaddr_reg:x3; val_offset:958*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 958*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x512b8b8eb3302 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3097ba21a05f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd512b8b8eb3302; op2val:0x3097ba21a05f3;
   valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x512b8b8eb3302 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3097ba21a05f3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd512b8b8eb3302; op2val:0x3097ba21a05f3;
   valaddr_reg:x3; val_offset:962*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 962*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x512b8b8eb3302 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3097ba21a05f3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd512b8b8eb3302; op2val:0x3097ba21a05f3;
   valaddr_reg:x3; val_offset:964*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 964*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x512b8b8eb3302 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3097ba21a05f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd512b8b8eb3302; op2val:0x3097ba21a05f3;
   valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x512b8b8eb3302 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3097ba21a05f3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd512b8b8eb3302; op2val:0x3097ba21a05f3;
   valaddr_reg:x3; val_offset:968*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 968*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x513f0bf6b2c7a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9cf1cbbc094bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd513f0bf6b2c7a; op2val:0x29cf1cbbc094bc;
   valaddr_reg:x3; val_offset:970*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 970*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x513f0bf6b2c7a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9cf1cbbc094bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd513f0bf6b2c7a; op2val:0x29cf1cbbc094bc;
   valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x513f0bf6b2c7a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9cf1cbbc094bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd513f0bf6b2c7a; op2val:0x29cf1cbbc094bc;
   valaddr_reg:x3; val_offset:974*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 974*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x513f0bf6b2c7a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9cf1cbbc094bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd513f0bf6b2c7a; op2val:0x29cf1cbbc094bc;
   valaddr_reg:x3; val_offset:976*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 976*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x513f0bf6b2c7a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9cf1cbbc094bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd513f0bf6b2c7a; op2val:0x29cf1cbbc094bc;
   valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52294a8221c6e and fs2 == 0 and fe2 == 0x003 and fm2 == 0x22b3967105321 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd52294a8221c6e; op2val:0x322b3967105321;
   valaddr_reg:x3; val_offset:980*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 980*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52294a8221c6e and fs2 == 0 and fe2 == 0x003 and fm2 == 0x22b3967105321 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd52294a8221c6e; op2val:0x322b3967105321;
   valaddr_reg:x3; val_offset:982*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 982*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52294a8221c6e and fs2 == 0 and fe2 == 0x003 and fm2 == 0x22b3967105321 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd52294a8221c6e; op2val:0x322b3967105321;
   valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52294a8221c6e and fs2 == 0 and fe2 == 0x003 and fm2 == 0x22b3967105321 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd52294a8221c6e; op2val:0x322b3967105321;
   valaddr_reg:x3; val_offset:986*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 986*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52294a8221c6e and fs2 == 0 and fe2 == 0x003 and fm2 == 0x22b3967105321 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd52294a8221c6e; op2val:0x322b3967105321;
   valaddr_reg:x3; val_offset:988*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 988*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52323192b58e2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd52323192b58e2; op2val:0x6;
   valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52323192b58e2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd52323192b58e2; op2val:0x6;
   valaddr_reg:x3; val_offset:992*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 992*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52323192b58e2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd52323192b58e2; op2val:0x6;
   valaddr_reg:x3; val_offset:994*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 994*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52323192b58e2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd52323192b58e2; op2val:0x6;
   valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52323192b58e2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd52323192b58e2; op2val:0x6;
   valaddr_reg:x3; val_offset:998*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 998*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5b4fc628036d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7963e401c3d5c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5b4fc628036d0; op2val:0x17963e401c3d5c;
   valaddr_reg:x3; val_offset:1000*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1000*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5b4fc628036d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7963e401c3d5c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5b4fc628036d0; op2val:0x17963e401c3d5c;
   valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5b4fc628036d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7963e401c3d5c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5b4fc628036d0; op2val:0x17963e401c3d5c;
   valaddr_reg:x3; val_offset:1004*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1004*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5b4fc628036d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7963e401c3d5c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5b4fc628036d0; op2val:0x17963e401c3d5c;
   valaddr_reg:x3; val_offset:1006*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1006*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5b4fc628036d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7963e401c3d5c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5b4fc628036d0; op2val:0x17963e401c3d5c;
   valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5d053fc3cac4e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x778adb2373475 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5d053fc3cac4e; op2val:0x1778adb2373475;
   valaddr_reg:x3; val_offset:1010*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1010*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5d053fc3cac4e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x778adb2373475 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5d053fc3cac4e; op2val:0x1778adb2373475;
   valaddr_reg:x3; val_offset:1012*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1012*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5d053fc3cac4e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x778adb2373475 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5d053fc3cac4e; op2val:0x1778adb2373475;
   valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5d053fc3cac4e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x778adb2373475 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5d053fc3cac4e; op2val:0x1778adb2373475;
   valaddr_reg:x3; val_offset:1016*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1016*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5d053fc3cac4e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x778adb2373475 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5d053fc3cac4e; op2val:0x1778adb2373475;
   valaddr_reg:x3; val_offset:1018*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1018*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5dcbd9779f824 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x76b5a35333d71 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5dcbd9779f824; op2val:0x276b5a35333d71;
   valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5dcbd9779f824 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x76b5a35333d71 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5dcbd9779f824; op2val:0x276b5a35333d71;
   valaddr_reg:x3; val_offset:1022*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1022*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5dcbd9779f824 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x76b5a35333d71 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5dcbd9779f824; op2val:0x276b5a35333d71;
   valaddr_reg:x3; val_offset:1024*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1024*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5dcbd9779f824 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x76b5a35333d71 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5dcbd9779f824; op2val:0x276b5a35333d71;
   valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5dcbd9779f824 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x76b5a35333d71 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd5dcbd9779f824; op2val:0x276b5a35333d71;
   valaddr_reg:x3; val_offset:1028*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1028*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62e8a2adb9b34 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x714fd54f38add and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd62e8a2adb9b34; op2val:0x2714fd54f38add;
   valaddr_reg:x3; val_offset:1030*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1030*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62e8a2adb9b34 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x714fd54f38add and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd62e8a2adb9b34; op2val:0x2714fd54f38add;
   valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62e8a2adb9b34 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x714fd54f38add and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd62e8a2adb9b34; op2val:0x2714fd54f38add;
   valaddr_reg:x3; val_offset:1034*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1034*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62e8a2adb9b34 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x714fd54f38add and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd62e8a2adb9b34; op2val:0x2714fd54f38add;
   valaddr_reg:x3; val_offset:1036*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1036*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62e8a2adb9b34 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x714fd54f38add and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd62e8a2adb9b34; op2val:0x2714fd54f38add;
   valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x636b9479bd502 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x70c7c54fcdd5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd636b9479bd502; op2val:0x170c7c54fcdd5f;
   valaddr_reg:x3; val_offset:1040*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1040*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x636b9479bd502 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x70c7c54fcdd5f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd636b9479bd502; op2val:0x170c7c54fcdd5f;
   valaddr_reg:x3; val_offset:1042*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1042*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x636b9479bd502 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x70c7c54fcdd5f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd636b9479bd502; op2val:0x170c7c54fcdd5f;
   valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x636b9479bd502 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x70c7c54fcdd5f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd636b9479bd502; op2val:0x170c7c54fcdd5f;
   valaddr_reg:x3; val_offset:1046*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1046*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x636b9479bd502 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x70c7c54fcdd5f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd636b9479bd502; op2val:0x170c7c54fcdd5f;
   valaddr_reg:x3; val_offset:1048*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1048*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64f39fb12d326 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd64f39fb12d326; op2val:0x6;
   valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64f39fb12d326 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd64f39fb12d326; op2val:0x6;
   valaddr_reg:x3; val_offset:1052*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1052*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64f39fb12d326 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd64f39fb12d326; op2val:0x6;
   valaddr_reg:x3; val_offset:1054*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1054*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64f39fb12d326 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd64f39fb12d326; op2val:0x6;
   valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64f39fb12d326 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd64f39fb12d326; op2val:0x6;
   valaddr_reg:x3; val_offset:1058*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1058*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66501be94bfaa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2db9b37951ed7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd66501be94bfaa; op2val:0x2db9b37951ed7;
   valaddr_reg:x3; val_offset:1060*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1060*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66501be94bfaa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2db9b37951ed7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd66501be94bfaa; op2val:0x2db9b37951ed7;
   valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66501be94bfaa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2db9b37951ed7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd66501be94bfaa; op2val:0x2db9b37951ed7;
   valaddr_reg:x3; val_offset:1064*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1064*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66501be94bfaa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2db9b37951ed7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd66501be94bfaa; op2val:0x2db9b37951ed7;
   valaddr_reg:x3; val_offset:1066*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1066*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66501be94bfaa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2db9b37951ed7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd66501be94bfaa; op2val:0x2db9b37951ed7;
   valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x685d2bfb30d8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2d7713dc9124f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd685d2bfb30d8e; op2val:0x2d7713dc9124f;
   valaddr_reg:x3; val_offset:1070*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1070*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x685d2bfb30d8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2d7713dc9124f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd685d2bfb30d8e; op2val:0x2d7713dc9124f;
   valaddr_reg:x3; val_offset:1072*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1072*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x685d2bfb30d8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2d7713dc9124f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd685d2bfb30d8e; op2val:0x2d7713dc9124f;
   valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x685d2bfb30d8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2d7713dc9124f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd685d2bfb30d8e; op2val:0x2d7713dc9124f;
   valaddr_reg:x3; val_offset:1076*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1076*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x685d2bfb30d8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2d7713dc9124f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd685d2bfb30d8e; op2val:0x2d7713dc9124f;
   valaddr_reg:x3; val_offset:1078*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1078*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a2e2a069ac5a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x69e5a66ad7eb2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6a2e2a069ac5a; op2val:0x269e5a66ad7eb2;
   valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a2e2a069ac5a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x69e5a66ad7eb2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6a2e2a069ac5a; op2val:0x269e5a66ad7eb2;
   valaddr_reg:x3; val_offset:1082*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1082*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a2e2a069ac5a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x69e5a66ad7eb2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6a2e2a069ac5a; op2val:0x269e5a66ad7eb2;
   valaddr_reg:x3; val_offset:1084*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1084*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a2e2a069ac5a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x69e5a66ad7eb2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6a2e2a069ac5a; op2val:0x269e5a66ad7eb2;
   valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a2e2a069ac5a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x69e5a66ad7eb2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6a2e2a069ac5a; op2val:0x269e5a66ad7eb2;
   valaddr_reg:x3; val_offset:1088*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1088*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f9fe64df04ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6489a0f8e6b35 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6f9fe64df04ac; op2val:0x16489a0f8e6b35;
   valaddr_reg:x3; val_offset:1090*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1090*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f9fe64df04ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6489a0f8e6b35 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6f9fe64df04ac; op2val:0x16489a0f8e6b35;
   valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f9fe64df04ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6489a0f8e6b35 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6f9fe64df04ac; op2val:0x16489a0f8e6b35;
   valaddr_reg:x3; val_offset:1094*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1094*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f9fe64df04ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6489a0f8e6b35 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6f9fe64df04ac; op2val:0x16489a0f8e6b35;
   valaddr_reg:x3; val_offset:1096*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1096*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f9fe64df04ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6489a0f8e6b35 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6f9fe64df04ac; op2val:0x16489a0f8e6b35;
   valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x777c6de50aa68 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d12a8b232469 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd777c6de50aa68; op2val:0x25d12a8b232469;
   valaddr_reg:x3; val_offset:1100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1100*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x777c6de50aa68 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d12a8b232469 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd777c6de50aa68; op2val:0x25d12a8b232469;
   valaddr_reg:x3; val_offset:1102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1102*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x777c6de50aa68 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d12a8b232469 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd777c6de50aa68; op2val:0x25d12a8b232469;
   valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x777c6de50aa68 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d12a8b232469 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd777c6de50aa68; op2val:0x25d12a8b232469;
   valaddr_reg:x3; val_offset:1106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1106*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x777c6de50aa68 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d12a8b232469 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd777c6de50aa68; op2val:0x25d12a8b232469;
   valaddr_reg:x3; val_offset:1108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1108*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7dd12a857b4e4 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x0176af992548e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7dd12a857b4e4; op2val:0x30176af992548e;
   valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7dd12a857b4e4 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x0176af992548e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7dd12a857b4e4; op2val:0x30176af992548e;
   valaddr_reg:x3; val_offset:1112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1112*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7dd12a857b4e4 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x0176af992548e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7dd12a857b4e4; op2val:0x30176af992548e;
   valaddr_reg:x3; val_offset:1114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1114*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7dd12a857b4e4 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x0176af992548e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7dd12a857b4e4; op2val:0x30176af992548e;
   valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7dd12a857b4e4 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x0176af992548e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7dd12a857b4e4; op2val:0x30176af992548e;
   valaddr_reg:x3; val_offset:1118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1118*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80db239aad63c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x5492f9eee0ed0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd80db239aad63c; op2val:0x15492f9eee0ed0;
   valaddr_reg:x3; val_offset:1120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1120*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80db239aad63c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x5492f9eee0ed0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd80db239aad63c; op2val:0x15492f9eee0ed0;
   valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80db239aad63c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x5492f9eee0ed0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd80db239aad63c; op2val:0x15492f9eee0ed0;
   valaddr_reg:x3; val_offset:1124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1124*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80db239aad63c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x5492f9eee0ed0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd80db239aad63c; op2val:0x15492f9eee0ed0;
   valaddr_reg:x3; val_offset:1126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1126*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80db239aad63c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x5492f9eee0ed0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd80db239aad63c; op2val:0x15492f9eee0ed0;
   valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x81c6cc0f18586 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd81c6cc0f18586; op2val:0x5;
   valaddr_reg:x3; val_offset:1130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1130*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x81c6cc0f18586 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd81c6cc0f18586; op2val:0x5;
   valaddr_reg:x3; val_offset:1132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1132*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x81c6cc0f18586 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd81c6cc0f18586; op2val:0x5;
   valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x81c6cc0f18586 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd81c6cc0f18586; op2val:0x5;
   valaddr_reg:x3; val_offset:1136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1136*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x81c6cc0f18586 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd81c6cc0f18586; op2val:0x5;
   valaddr_reg:x3; val_offset:1138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1138*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x89fea92fa5aec and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4caca9e6ef852 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd89fea92fa5aec; op2val:0x14caca9e6ef852;
   valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x89fea92fa5aec and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4caca9e6ef852 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd89fea92fa5aec; op2val:0x14caca9e6ef852;
   valaddr_reg:x3; val_offset:1142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1142*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x89fea92fa5aec and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4caca9e6ef852 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd89fea92fa5aec; op2val:0x14caca9e6ef852;
   valaddr_reg:x3; val_offset:1144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1144*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x89fea92fa5aec and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4caca9e6ef852 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd89fea92fa5aec; op2val:0x14caca9e6ef852;
   valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x89fea92fa5aec and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4caca9e6ef852 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd89fea92fa5aec; op2val:0x14caca9e6ef852;
   valaddr_reg:x3; val_offset:1148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1148*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ebda07a00be0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d427091f5336 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ebda07a00be0; op2val:0x25d427091f5336;
   valaddr_reg:x3; val_offset:1150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1150*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ebda07a00be0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d427091f5336 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ebda07a00be0; op2val:0x25d427091f5336;
   valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ebda07a00be0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d427091f5336 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ebda07a00be0; op2val:0x25d427091f5336;
   valaddr_reg:x3; val_offset:1154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1154*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ebda07a00be0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d427091f5336 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ebda07a00be0; op2val:0x25d427091f5336;
   valaddr_reg:x3; val_offset:1156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1156*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ebda07a00be0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d427091f5336 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ebda07a00be0; op2val:0x25d427091f5336;
   valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ed660d117174 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x48a29a3c41394 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ed660d117174; op2val:0x148a29a3c41394;
   valaddr_reg:x3; val_offset:1160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1160*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ed660d117174 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x48a29a3c41394 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ed660d117174; op2val:0x148a29a3c41394;
   valaddr_reg:x3; val_offset:1162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1162*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ed660d117174 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x48a29a3c41394 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ed660d117174; op2val:0x148a29a3c41394;
   valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ed660d117174 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x48a29a3c41394 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ed660d117174; op2val:0x148a29a3c41394;
   valaddr_reg:x3; val_offset:1166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1166*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ed660d117174 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x48a29a3c41394 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ed660d117174; op2val:0x148a29a3c41394;
   valaddr_reg:x3; val_offset:1168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1168*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ef9938574634 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d0df5e2f66b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ef9938574634; op2val:0x25d0df5e2f66b3;
   valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ef9938574634 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d0df5e2f66b3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ef9938574634; op2val:0x25d0df5e2f66b3;
   valaddr_reg:x3; val_offset:1172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1172*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ef9938574634 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d0df5e2f66b3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ef9938574634; op2val:0x25d0df5e2f66b3;
   valaddr_reg:x3; val_offset:1174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1174*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ef9938574634 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d0df5e2f66b3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ef9938574634; op2val:0x25d0df5e2f66b3;
   valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ef9938574634 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d0df5e2f66b3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8ef9938574634; op2val:0x25d0df5e2f66b3;
   valaddr_reg:x3; val_offset:1178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1178*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93604e03c0a3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x44eff7bc2b983 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd93604e03c0a3c; op2val:0x144eff7bc2b983;
   valaddr_reg:x3; val_offset:1180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1180*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93604e03c0a3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x44eff7bc2b983 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd93604e03c0a3c; op2val:0x144eff7bc2b983;
   valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93604e03c0a3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x44eff7bc2b983 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd93604e03c0a3c; op2val:0x144eff7bc2b983;
   valaddr_reg:x3; val_offset:1184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1184*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93604e03c0a3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x44eff7bc2b983 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd93604e03c0a3c; op2val:0x144eff7bc2b983;
   valaddr_reg:x3; val_offset:1186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1186*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93604e03c0a3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x44eff7bc2b983 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd93604e03c0a3c; op2val:0x144eff7bc2b983;
   valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93835f64d603a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd93835f64d603a; op2val:0x5;
   valaddr_reg:x3; val_offset:1190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1190*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93835f64d603a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd93835f64d603a; op2val:0x5;
   valaddr_reg:x3; val_offset:1192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1192*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93835f64d603a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd93835f64d603a; op2val:0x5;
   valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93835f64d603a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd93835f64d603a; op2val:0x5;
   valaddr_reg:x3; val_offset:1196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1196*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93835f64d603a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd93835f64d603a; op2val:0x5;
   valaddr_reg:x3; val_offset:1198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1198*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c1f81f468f0a and fs2 == 0 and fe2 == 0x002 and fm2 == 0xdd0fb602d87c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9c1f81f468f0a; op2val:0x2dd0fb602d87c5;
   valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c1f81f468f0a and fs2 == 0 and fe2 == 0x002 and fm2 == 0xdd0fb602d87c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9c1f81f468f0a; op2val:0x2dd0fb602d87c5;
   valaddr_reg:x3; val_offset:1202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1202*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c1f81f468f0a and fs2 == 0 and fe2 == 0x002 and fm2 == 0xdd0fb602d87c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9c1f81f468f0a; op2val:0x2dd0fb602d87c5;
   valaddr_reg:x3; val_offset:1204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1204*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c1f81f468f0a and fs2 == 0 and fe2 == 0x002 and fm2 == 0xdd0fb602d87c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9c1f81f468f0a; op2val:0x2dd0fb602d87c5;
   valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c1f81f468f0a and fs2 == 0 and fe2 == 0x002 and fm2 == 0xdd0fb602d87c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9c1f81f468f0a; op2val:0x2dd0fb602d87c5;
   valaddr_reg:x3; val_offset:1208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1208*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9e8d484ef19ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2785ae814c793 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9e8d484ef19ec; op2val:0x2785ae814c793;
   valaddr_reg:x3; val_offset:1210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1210*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9e8d484ef19ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2785ae814c793 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9e8d484ef19ec; op2val:0x2785ae814c793;
   valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9e8d484ef19ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2785ae814c793 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9e8d484ef19ec; op2val:0x2785ae814c793;
   valaddr_reg:x3; val_offset:1214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1214*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9e8d484ef19ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2785ae814c793 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9e8d484ef19ec; op2val:0x2785ae814c793;
   valaddr_reg:x3; val_offset:1216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1216*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9e8d484ef19ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2785ae814c793 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9e8d484ef19ec; op2val:0x2785ae814c793;
   valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9015f9c063d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x34669ba8df314 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda9015f9c063d0; op2val:0x134669ba8df314;
   valaddr_reg:x3; val_offset:1220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1220*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9015f9c063d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x34669ba8df314 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda9015f9c063d0; op2val:0x134669ba8df314;
   valaddr_reg:x3; val_offset:1222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1222*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9015f9c063d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x34669ba8df314 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda9015f9c063d0; op2val:0x134669ba8df314;
   valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9015f9c063d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x34669ba8df314 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda9015f9c063d0; op2val:0x134669ba8df314;
   valaddr_reg:x3; val_offset:1226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1226*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9015f9c063d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x34669ba8df314 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda9015f9c063d0; op2val:0x134669ba8df314;
   valaddr_reg:x3; val_offset:1228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1228*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacd8daa8ccece and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdacd8daa8ccece; op2val:0x5;
   valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacd8daa8ccece and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdacd8daa8ccece; op2val:0x5;
   valaddr_reg:x3; val_offset:1232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1232*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacd8daa8ccece and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdacd8daa8ccece; op2val:0x5;
   valaddr_reg:x3; val_offset:1234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1234*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacd8daa8ccece and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdacd8daa8ccece; op2val:0x5;
   valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacd8daa8ccece and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdacd8daa8ccece; op2val:0x5;
   valaddr_reg:x3; val_offset:1238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1238*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacfa55344ee06 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x318b7ed9f1638 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdacfa55344ee06; op2val:0x1318b7ed9f1638;
   valaddr_reg:x3; val_offset:1240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1240*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacfa55344ee06 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x318b7ed9f1638 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdacfa55344ee06; op2val:0x1318b7ed9f1638;
   valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacfa55344ee06 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x318b7ed9f1638 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdacfa55344ee06; op2val:0x1318b7ed9f1638;
   valaddr_reg:x3; val_offset:1244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1244*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacfa55344ee06 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x318b7ed9f1638 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdacfa55344ee06; op2val:0x1318b7ed9f1638;
   valaddr_reg:x3; val_offset:1246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1246*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacfa55344ee06 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x318b7ed9f1638 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdacfa55344ee06; op2val:0x1318b7ed9f1638;
   valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdae4d63fafea86; op2val:0x2c8e81c6c2f341;
   valaddr_reg:x3; val_offset:1250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1250*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdae4d63fafea86; op2val:0x2c8e81c6c2f341;
   valaddr_reg:x3; val_offset:1252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1252*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdae4d63fafea86; op2val:0x2c8e81c6c2f341;
   valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdae4d63fafea86; op2val:0x2c8e81c6c2f341;
   valaddr_reg:x3; val_offset:1256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1256*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdae4d63fafea86; op2val:0x2c8e81c6c2f341;
   valaddr_reg:x3; val_offset:1258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1258*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb4cc0a22b29a6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x258268dcec408 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb4cc0a22b29a6; op2val:0x258268dcec408;
   valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb4cc0a22b29a6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x258268dcec408 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb4cc0a22b29a6; op2val:0x258268dcec408;
   valaddr_reg:x3; val_offset:1262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1262*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb4cc0a22b29a6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x258268dcec408 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb4cc0a22b29a6; op2val:0x258268dcec408;
   valaddr_reg:x3; val_offset:1264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1264*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb4cc0a22b29a6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x258268dcec408 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb4cc0a22b29a6; op2val:0x258268dcec408;
   valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb4cc0a22b29a6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x258268dcec408 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb4cc0a22b29a6; op2val:0x258268dcec408;
   valaddr_reg:x3; val_offset:1268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1268*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbaab85a31631a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdbaab85a31631a; op2val:0x5;
   valaddr_reg:x3; val_offset:1270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1270*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbaab85a31631a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdbaab85a31631a; op2val:0x5;
   valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbaab85a31631a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdbaab85a31631a; op2val:0x5;
   valaddr_reg:x3; val_offset:1274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1274*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbaab85a31631a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdbaab85a31631a; op2val:0x5;
   valaddr_reg:x3; val_offset:1276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1276*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbaab85a31631a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdbaab85a31631a; op2val:0x5;
   valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1278*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbc51b0e9c8900 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x26fec4eac033d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdbc51b0e9c8900; op2val:0x226fec4eac033d;
   valaddr_reg:x3; val_offset:1280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1280*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbc51b0e9c8900 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x26fec4eac033d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdbc51b0e9c8900; op2val:0x226fec4eac033d;
   valaddr_reg:x3; val_offset:1282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1282*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbc51b0e9c8900 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x26fec4eac033d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdbc51b0e9c8900; op2val:0x226fec4eac033d;
   valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbc51b0e9c8900 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x26fec4eac033d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdbc51b0e9c8900; op2val:0x226fec4eac033d;
   valaddr_reg:x3; val_offset:1286*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1286*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbc51b0e9c8900 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x26fec4eac033d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdbc51b0e9c8900; op2val:0x226fec4eac033d;
   valaddr_reg:x3; val_offset:1288*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1288*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc3d2b17c1cbc8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb324d215b5384 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc3d2b17c1cbc8; op2val:0x2b324d215b5384;
   valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc3d2b17c1cbc8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb324d215b5384 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc3d2b17c1cbc8; op2val:0x2b324d215b5384;
   valaddr_reg:x3; val_offset:1292*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1292*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc3d2b17c1cbc8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb324d215b5384 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc3d2b17c1cbc8; op2val:0x2b324d215b5384;
   valaddr_reg:x3; val_offset:1294*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1294*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc3d2b17c1cbc8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb324d215b5384 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc3d2b17c1cbc8; op2val:0x2b324d215b5384;
   valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc3d2b17c1cbc8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb324d215b5384 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc3d2b17c1cbc8; op2val:0x2b324d215b5384;
   valaddr_reg:x3; val_offset:1298*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1298*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd44a03d6fd618 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x296390d344303 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd44a03d6fd618; op2val:0x2296390d344303;
   valaddr_reg:x3; val_offset:1300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1300*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd44a03d6fd618 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x296390d344303 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd44a03d6fd618; op2val:0x2296390d344303;
   valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd44a03d6fd618 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x296390d344303 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd44a03d6fd618; op2val:0x2296390d344303;
   valaddr_reg:x3; val_offset:1304*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1304*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd44a03d6fd618 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x296390d344303 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd44a03d6fd618; op2val:0x2296390d344303;
   valaddr_reg:x3; val_offset:1306*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1306*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd44a03d6fd618 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x296390d344303 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd44a03d6fd618; op2val:0x2296390d344303;
   valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd87cceaaebd86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xa01cd16b2579b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd87cceaaebd86; op2val:0x2a01cd16b2579b;
   valaddr_reg:x3; val_offset:1310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1310*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd87cceaaebd86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xa01cd16b2579b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd87cceaaebd86; op2val:0x2a01cd16b2579b;
   valaddr_reg:x3; val_offset:1312*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1312*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd87cceaaebd86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xa01cd16b2579b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd87cceaaebd86; op2val:0x2a01cd16b2579b;
   valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd87cceaaebd86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xa01cd16b2579b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd87cceaaebd86; op2val:0x2a01cd16b2579b;
   valaddr_reg:x3; val_offset:1316*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1316*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd87cceaaebd86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xa01cd16b2579b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd87cceaaebd86; op2val:0x2a01cd16b2579b;
   valaddr_reg:x3; val_offset:1318*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1318*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd916ae1332170 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x150e516350934 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd916ae1332170; op2val:0x2150e516350934;
   valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd916ae1332170 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x150e516350934 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd916ae1332170; op2val:0x2150e516350934;
   valaddr_reg:x3; val_offset:1322*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1322*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd916ae1332170 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x150e516350934 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd916ae1332170; op2val:0x2150e516350934;
   valaddr_reg:x3; val_offset:1324*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1324*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd916ae1332170 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x150e516350934 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd916ae1332170; op2val:0x2150e516350934;
   valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd916ae1332170 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x150e516350934 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd916ae1332170; op2val:0x2150e516350934;
   valaddr_reg:x3; val_offset:1328*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1328*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe0cd86136fb10 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x109c577b6ba53 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde0cd86136fb10; op2val:0x2109c577b6ba53;
   valaddr_reg:x3; val_offset:1330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1330*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe0cd86136fb10 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x109c577b6ba53 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde0cd86136fb10; op2val:0x2109c577b6ba53;
   valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe0cd86136fb10 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x109c577b6ba53 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde0cd86136fb10; op2val:0x2109c577b6ba53;
   valaddr_reg:x3; val_offset:1334*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1334*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe0cd86136fb10 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x109c577b6ba53 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde0cd86136fb10; op2val:0x2109c577b6ba53;
   valaddr_reg:x3; val_offset:1336*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1336*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe0cd86136fb10 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x109c577b6ba53 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde0cd86136fb10; op2val:0x2109c577b6ba53;
   valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe510a1912dae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0e3721430a441 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde510a1912dae8; op2val:0x10e3721430a441;
   valaddr_reg:x3; val_offset:1340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1340*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe510a1912dae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0e3721430a441 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde510a1912dae8; op2val:0x10e3721430a441;
   valaddr_reg:x3; val_offset:1342*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1342*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe510a1912dae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0e3721430a441 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde510a1912dae8; op2val:0x10e3721430a441;
   valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe510a1912dae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0e3721430a441 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde510a1912dae8; op2val:0x10e3721430a441;
   valaddr_reg:x3; val_offset:1346*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1346*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe510a1912dae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0e3721430a441 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde510a1912dae8; op2val:0x10e3721430a441;
   valaddr_reg:x3; val_offset:1348*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1348*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe5a110eaf20b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde5a110eaf20b2; op2val:0x4;
   valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe5a110eaf20b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde5a110eaf20b2; op2val:0x4;
   valaddr_reg:x3; val_offset:1352*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1352*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe5a110eaf20b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde5a110eaf20b2; op2val:0x4;
   valaddr_reg:x3; val_offset:1354*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1354*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe5a110eaf20b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde5a110eaf20b2; op2val:0x4;
   valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe5a110eaf20b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde5a110eaf20b2; op2val:0x4;
   valaddr_reg:x3; val_offset:1358*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1358*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6a388c60fb16 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x94031d958fbd2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde6a388c60fb16; op2val:0x294031d958fbd2;
   valaddr_reg:x3; val_offset:1360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1360*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6a388c60fb16 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x94031d958fbd2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde6a388c60fb16; op2val:0x294031d958fbd2;
   valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6a388c60fb16 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x94031d958fbd2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde6a388c60fb16; op2val:0x294031d958fbd2;
   valaddr_reg:x3; val_offset:1364*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1364*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6a388c60fb16 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x94031d958fbd2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde6a388c60fb16; op2val:0x294031d958fbd2;
   valaddr_reg:x3; val_offset:1366*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1366*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6a388c60fb16 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x94031d958fbd2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde6a388c60fb16; op2val:0x294031d958fbd2;
   valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe87549362bb46 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x1d1c005974b00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde87549362bb46; op2val:0x21d1c005974b00;
   valaddr_reg:x3; val_offset:1370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1370*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe87549362bb46 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x1d1c005974b00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde87549362bb46; op2val:0x21d1c005974b00;
   valaddr_reg:x3; val_offset:1372*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1372*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe87549362bb46 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x1d1c005974b00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde87549362bb46; op2val:0x21d1c005974b00;
   valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe87549362bb46 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x1d1c005974b00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde87549362bb46; op2val:0x21d1c005974b00;
   valaddr_reg:x3; val_offset:1376*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1376*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe87549362bb46 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x1d1c005974b00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde87549362bb46; op2val:0x21d1c005974b00;
   valaddr_reg:x3; val_offset:1378*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1378*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeac4162a4e298 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0b138e0e53a14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdeac4162a4e298; op2val:0x10b138e0e53a14;
   valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeac4162a4e298 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0b138e0e53a14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdeac4162a4e298; op2val:0x10b138e0e53a14;
   valaddr_reg:x3; val_offset:1382*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1382*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeac4162a4e298 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0b138e0e53a14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdeac4162a4e298; op2val:0x10b138e0e53a14;
   valaddr_reg:x3; val_offset:1384*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1384*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeac4162a4e298 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0b138e0e53a14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdeac4162a4e298; op2val:0x10b138e0e53a14;
   valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeac4162a4e298 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0b138e0e53a14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdeac4162a4e298; op2val:0x10b138e0e53a14;
   valaddr_reg:x3; val_offset:1388*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1388*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec544b8508c48 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0a3a73a8e2744 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdec544b8508c48; op2val:0x10a3a73a8e2744;
   valaddr_reg:x3; val_offset:1390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1390*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec544b8508c48 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0a3a73a8e2744 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdec544b8508c48; op2val:0x10a3a73a8e2744;
   valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec544b8508c48 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0a3a73a8e2744 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdec544b8508c48; op2val:0x10a3a73a8e2744;
   valaddr_reg:x3; val_offset:1394*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1394*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec544b8508c48 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0a3a73a8e2744 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdec544b8508c48; op2val:0x10a3a73a8e2744;
   valaddr_reg:x3; val_offset:1396*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1396*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec544b8508c48 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0a3a73a8e2744 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdec544b8508c48; op2val:0x10a3a73a8e2744;
   valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0d78fd605616 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x07cf69972dffa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf0d78fd605616; op2val:0x107cf69972dffa;
   valaddr_reg:x3; val_offset:1400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1400*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0d78fd605616 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x07cf69972dffa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf0d78fd605616; op2val:0x107cf69972dffa;
   valaddr_reg:x3; val_offset:1402*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1402*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0d78fd605616 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x07cf69972dffa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf0d78fd605616; op2val:0x107cf69972dffa;
   valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0d78fd605616 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x07cf69972dffa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf0d78fd605616; op2val:0x107cf69972dffa;
   valaddr_reg:x3; val_offset:1406*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1406*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0d78fd605616 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x07cf69972dffa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf0d78fd605616; op2val:0x107cf69972dffa;
   valaddr_reg:x3; val_offset:1408*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1408*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf3d2ac51134f2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf3d2ac51134f2; op2val:0x4;
   valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf3d2ac51134f2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf3d2ac51134f2; op2val:0x4;
   valaddr_reg:x3; val_offset:1412*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1412*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf3d2ac51134f2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf3d2ac51134f2; op2val:0x4;
   valaddr_reg:x3; val_offset:1414*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1414*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf3d2ac51134f2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf3d2ac51134f2; op2val:0x4;
   valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf3d2ac51134f2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf3d2ac51134f2; op2val:0x4;
   valaddr_reg:x3; val_offset:1418*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1418*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf587e151f5a1e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf587e151f5a1e; op2val:0x4;
   valaddr_reg:x3; val_offset:1420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1420*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf587e151f5a1e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf587e151f5a1e; op2val:0x4;
   valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf587e151f5a1e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf587e151f5a1e; op2val:0x4;
   valaddr_reg:x3; val_offset:1424*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1424*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf587e151f5a1e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf587e151f5a1e; op2val:0x4;
   valaddr_reg:x3; val_offset:1426*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1426*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf587e151f5a1e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf587e151f5a1e; op2val:0x4;
   valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78ae78ab378c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x044cbae37e288 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf78ae78ab378c; op2val:0x1044cbae37e288;
   valaddr_reg:x3; val_offset:1430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1430*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78ae78ab378c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x044cbae37e288 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf78ae78ab378c; op2val:0x1044cbae37e288;
   valaddr_reg:x3; val_offset:1432*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1432*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78ae78ab378c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x044cbae37e288 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf78ae78ab378c; op2val:0x1044cbae37e288;
   valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78ae78ab378c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x044cbae37e288 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf78ae78ab378c; op2val:0x1044cbae37e288;
   valaddr_reg:x3; val_offset:1436*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1436*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78ae78ab378c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x044cbae37e288 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf78ae78ab378c; op2val:0x1044cbae37e288;
   valaddr_reg:x3; val_offset:1438*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1438*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfba632b80a336 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfba632b80a336; op2val:0x4;
   valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfba632b80a336 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfba632b80a336; op2val:0x4;
   valaddr_reg:x3; val_offset:1442*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1442*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfba632b80a336 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfba632b80a336; op2val:0x4;
   valaddr_reg:x3; val_offset:1444*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1444*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfba632b80a336 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfba632b80a336; op2val:0x4;
   valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfba632b80a336 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfba632b80a336; op2val:0x4;
   valaddr_reg:x3; val_offset:1448*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1448*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfd0798c514364 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x017e6b923d9eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfd0798c514364; op2val:0x2017e6b923d9eb;
   valaddr_reg:x3; val_offset:1450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1450*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfd0798c514364 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x017e6b923d9eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfd0798c514364; op2val:0x2017e6b923d9eb;
   valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfd0798c514364 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x017e6b923d9eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfd0798c514364; op2val:0x2017e6b923d9eb;
   valaddr_reg:x3; val_offset:1454*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1454*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfd0798c514364 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x017e6b923d9eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfd0798c514364; op2val:0x2017e6b923d9eb;
   valaddr_reg:x3; val_offset:1456*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1456*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfd0798c514364 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x017e6b923d9eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfd0798c514364; op2val:0x2017e6b923d9eb;
   valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdca0e3a9aae4 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x81aa4c8ad08ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfdca0e3a9aae4; op2val:0x281aa4c8ad08ea;
   valaddr_reg:x3; val_offset:1460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1460*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdca0e3a9aae4 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x81aa4c8ad08ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfdca0e3a9aae4; op2val:0x281aa4c8ad08ea;
   valaddr_reg:x3; val_offset:1462*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1462*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdca0e3a9aae4 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x81aa4c8ad08ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfdca0e3a9aae4; op2val:0x281aa4c8ad08ea;
   valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdca0e3a9aae4 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x81aa4c8ad08ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfdca0e3a9aae4; op2val:0x281aa4c8ad08ea;
   valaddr_reg:x3; val_offset:1466*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1466*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdca0e3a9aae4 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x81aa4c8ad08ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfdca0e3a9aae4; op2val:0x281aa4c8ad08ea;
   valaddr_reg:x3; val_offset:1468*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1468*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff23853e07a0e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdff23853e07a0e; op2val:0x4;
   valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff23853e07a0e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdff23853e07a0e; op2val:0x4;
   valaddr_reg:x3; val_offset:1472*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1472*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff23853e07a0e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdff23853e07a0e; op2val:0x4;
   valaddr_reg:x3; val_offset:1474*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1474*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff23853e07a0e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdff23853e07a0e; op2val:0x4;
   valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff23853e07a0e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdff23853e07a0e; op2val:0x4;
   valaddr_reg:x3; val_offset:1478*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1478*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x051ce52e23306 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe051ce52e23306; op2val:0x4;
   valaddr_reg:x3; val_offset:1480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1480*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x051ce52e23306 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe051ce52e23306; op2val:0x4;
   valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x051ce52e23306 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe051ce52e23306; op2val:0x4;
   valaddr_reg:x3; val_offset:1484*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1484*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x051ce52e23306 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe051ce52e23306; op2val:0x4;
   valaddr_reg:x3; val_offset:1486*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1486*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x051ce52e23306 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe051ce52e23306; op2val:0x4;
   valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05bd62d9d2083 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1f4c5ac545d82 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe05bd62d9d2083; op2val:0x1f4c5ac545d82;
   valaddr_reg:x3; val_offset:1490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1490*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05bd62d9d2083 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1f4c5ac545d82 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe05bd62d9d2083; op2val:0x1f4c5ac545d82;
   valaddr_reg:x3; val_offset:1492*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1492*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05bd62d9d2083 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1f4c5ac545d82 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe05bd62d9d2083; op2val:0x1f4c5ac545d82;
   valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05bd62d9d2083 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1f4c5ac545d82 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe05bd62d9d2083; op2val:0x1f4c5ac545d82;
   valaddr_reg:x3; val_offset:1496*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1496*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05bd62d9d2083 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1f4c5ac545d82 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe05bd62d9d2083; op2val:0x1f4c5ac545d82;
   valaddr_reg:x3; val_offset:1498*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1498*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07769e9de09ae and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf17f0226c02e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07769e9de09ae; op2val:0x1f17f0226c02e1;
   valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07769e9de09ae and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf17f0226c02e1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07769e9de09ae; op2val:0x1f17f0226c02e1;
   valaddr_reg:x3; val_offset:1502*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1502*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07769e9de09ae and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf17f0226c02e1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07769e9de09ae; op2val:0x1f17f0226c02e1;
   valaddr_reg:x3; val_offset:1504*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1504*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07769e9de09ae and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf17f0226c02e1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07769e9de09ae; op2val:0x1f17f0226c02e1;
   valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07769e9de09ae and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf17f0226c02e1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07769e9de09ae; op2val:0x1f17f0226c02e1;
   valaddr_reg:x3; val_offset:1508*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1508*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07ae0544cdde9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf1167b1f6a9c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07ae0544cdde9; op2val:0x1f1167b1f6a9c1;
   valaddr_reg:x3; val_offset:1510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1510*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07ae0544cdde9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf1167b1f6a9c1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07ae0544cdde9; op2val:0x1f1167b1f6a9c1;
   valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07ae0544cdde9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf1167b1f6a9c1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07ae0544cdde9; op2val:0x1f1167b1f6a9c1;
   valaddr_reg:x3; val_offset:1514*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1514*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07ae0544cdde9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf1167b1f6a9c1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07ae0544cdde9; op2val:0x1f1167b1f6a9c1;
   valaddr_reg:x3; val_offset:1516*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1516*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07ae0544cdde9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf1167b1f6a9c1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07ae0544cdde9; op2val:0x1f1167b1f6a9c1;
   valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x084d2193dd23e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xefeb3b589e495 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe084d2193dd23e; op2val:0x1efeb3b589e495;
   valaddr_reg:x3; val_offset:1520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1520*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x084d2193dd23e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xefeb3b589e495 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe084d2193dd23e; op2val:0x1efeb3b589e495;
   valaddr_reg:x3; val_offset:1522*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1522*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x084d2193dd23e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xefeb3b589e495 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe084d2193dd23e; op2val:0x1efeb3b589e495;
   valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x084d2193dd23e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xefeb3b589e495 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe084d2193dd23e; op2val:0x1efeb3b589e495;
   valaddr_reg:x3; val_offset:1526*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1526*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x084d2193dd23e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xefeb3b589e495 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe084d2193dd23e; op2val:0x1efeb3b589e495;
   valaddr_reg:x3; val_offset:1528*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1528*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x08fb38ee7799e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1eea56a7bc646 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe08fb38ee7799e; op2val:0x1eea56a7bc646;
   valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x08fb38ee7799e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1eea56a7bc646 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe08fb38ee7799e; op2val:0x1eea56a7bc646;
   valaddr_reg:x3; val_offset:1532*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1532*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x08fb38ee7799e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1eea56a7bc646 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe08fb38ee7799e; op2val:0x1eea56a7bc646;
   valaddr_reg:x3; val_offset:1534*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1534*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x08fb38ee7799e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1eea56a7bc646 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe08fb38ee7799e; op2val:0x1eea56a7bc646;
   valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x08fb38ee7799e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1eea56a7bc646 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe08fb38ee7799e; op2val:0x1eea56a7bc646;
   valaddr_reg:x3; val_offset:1538*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1538*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf6a07a632a2 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03db3cd14f4f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bf6a07a632a2; op2val:0x203db3cd14f4f1;
   valaddr_reg:x3; val_offset:1540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1540*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf6a07a632a2 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03db3cd14f4f1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bf6a07a632a2; op2val:0x203db3cd14f4f1;
   valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf6a07a632a2 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03db3cd14f4f1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bf6a07a632a2; op2val:0x203db3cd14f4f1;
   valaddr_reg:x3; val_offset:1544*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1544*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf6a07a632a2 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03db3cd14f4f1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bf6a07a632a2; op2val:0x203db3cd14f4f1;
   valaddr_reg:x3; val_offset:1546*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1546*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf6a07a632a2 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03db3cd14f4f1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bf6a07a632a2; op2val:0x203db3cd14f4f1;
   valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d6af460a6719 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x02741f97f217f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0d6af460a6719; op2val:0x202741f97f217f;
   valaddr_reg:x3; val_offset:1550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1550*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d6af460a6719 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x02741f97f217f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0d6af460a6719; op2val:0x202741f97f217f;
   valaddr_reg:x3; val_offset:1552*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1552*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d6af460a6719 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x02741f97f217f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0d6af460a6719; op2val:0x202741f97f217f;
   valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d6af460a6719 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x02741f97f217f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0d6af460a6719; op2val:0x202741f97f217f;
   valaddr_reg:x3; val_offset:1556*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1556*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d6af460a6719 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x02741f97f217f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0d6af460a6719; op2val:0x202741f97f217f;
   valaddr_reg:x3; val_offset:1558*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1558*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defcb6e91767 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x6c2c9cfbfa744 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0defcb6e91767; op2val:0x26c2c9cfbfa744;
   valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defcb6e91767 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x6c2c9cfbfa744 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0defcb6e91767; op2val:0x26c2c9cfbfa744;
   valaddr_reg:x3; val_offset:1562*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1562*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defcb6e91767 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x6c2c9cfbfa744 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0defcb6e91767; op2val:0x26c2c9cfbfa744;
   valaddr_reg:x3; val_offset:1564*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1564*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defcb6e91767 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x6c2c9cfbfa744 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0defcb6e91767; op2val:0x26c2c9cfbfa744;
   valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defcb6e91767 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x6c2c9cfbfa744 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0defcb6e91767; op2val:0x26c2c9cfbfa744;
   valaddr_reg:x3; val_offset:1568*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1568*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defd802a3484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xf2c85d57d5f4e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0defd802a3484; op2val:0xf2c85d57d5f4e;
   valaddr_reg:x3; val_offset:1570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1570*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defd802a3484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xf2c85d57d5f4e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0defd802a3484; op2val:0xf2c85d57d5f4e;
   valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defd802a3484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xf2c85d57d5f4e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0defd802a3484; op2val:0xf2c85d57d5f4e;
   valaddr_reg:x3; val_offset:1574*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1574*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defd802a3484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xf2c85d57d5f4e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0defd802a3484; op2val:0xf2c85d57d5f4e;
   valaddr_reg:x3; val_offset:1576*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1576*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defd802a3484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xf2c85d57d5f4e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0defd802a3484; op2val:0xf2c85d57d5f4e;
   valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11f96e845ca05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe11f96e845ca05; op2val:0x4;
   valaddr_reg:x3; val_offset:1580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1580*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11f96e845ca05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe11f96e845ca05; op2val:0x4;
   valaddr_reg:x3; val_offset:1582*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1582*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11f96e845ca05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe11f96e845ca05; op2val:0x4;
   valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11f96e845ca05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe11f96e845ca05; op2val:0x4;
   valaddr_reg:x3; val_offset:1586*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1586*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11f96e845ca05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe11f96e845ca05; op2val:0x4;
   valaddr_reg:x3; val_offset:1588*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1588*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12188494c1b32 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xde32a40f8b125 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe12188494c1b32; op2val:0x1de32a40f8b125;
   valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12188494c1b32 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xde32a40f8b125 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe12188494c1b32; op2val:0x1de32a40f8b125;
   valaddr_reg:x3; val_offset:1592*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1592*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12188494c1b32 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xde32a40f8b125 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe12188494c1b32; op2val:0x1de32a40f8b125;
   valaddr_reg:x3; val_offset:1594*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1594*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12188494c1b32 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xde32a40f8b125 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe12188494c1b32; op2val:0x1de32a40f8b125;
   valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12188494c1b32 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xde32a40f8b125 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe12188494c1b32; op2val:0x1de32a40f8b125;
   valaddr_reg:x3; val_offset:1598*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1598*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13c2805615f05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe13c2805615f05; op2val:0x4;
   valaddr_reg:x3; val_offset:1600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1600*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13c2805615f05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe13c2805615f05; op2val:0x4;
   valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13c2805615f05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe13c2805615f05; op2val:0x4;
   valaddr_reg:x3; val_offset:1604*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1604*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13c2805615f05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe13c2805615f05; op2val:0x4;
   valaddr_reg:x3; val_offset:1606*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1606*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13c2805615f05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe13c2805615f05; op2val:0x4;
   valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15bd8d1c139cf and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7ec325c63df0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe15bd8d1c139cf; op2val:0x1d7ec325c63df0;
   valaddr_reg:x3; val_offset:1610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1610*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15bd8d1c139cf and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7ec325c63df0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe15bd8d1c139cf; op2val:0x1d7ec325c63df0;
   valaddr_reg:x3; val_offset:1612*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1612*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15bd8d1c139cf and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7ec325c63df0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe15bd8d1c139cf; op2val:0x1d7ec325c63df0;
   valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15bd8d1c139cf and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7ec325c63df0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe15bd8d1c139cf; op2val:0x1d7ec325c63df0;
   valaddr_reg:x3; val_offset:1616*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1616*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15bd8d1c139cf and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7ec325c63df0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe15bd8d1c139cf; op2val:0x1d7ec325c63df0;
   valaddr_reg:x3; val_offset:1618*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1618*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15d24328c984b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7c90401ca1d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe15d24328c984b; op2val:0x1d7c90401ca1d9;
   valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15d24328c984b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7c90401ca1d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe15d24328c984b; op2val:0x1d7c90401ca1d9;
   valaddr_reg:x3; val_offset:1622*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1622*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15d24328c984b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7c90401ca1d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe15d24328c984b; op2val:0x1d7c90401ca1d9;
   valaddr_reg:x3; val_offset:1624*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1624*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15d24328c984b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7c90401ca1d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe15d24328c984b; op2val:0x1d7c90401ca1d9;
   valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15d24328c984b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7c90401ca1d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe15d24328c984b; op2val:0x1d7c90401ca1d9;
   valaddr_reg:x3; val_offset:1628*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1628*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1741c9b528809 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x60051481198aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1741c9b528809; op2val:0x260051481198aa;
   valaddr_reg:x3; val_offset:1630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1630*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1741c9b528809 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x60051481198aa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1741c9b528809; op2val:0x260051481198aa;
   valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1741c9b528809 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x60051481198aa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1741c9b528809; op2val:0x260051481198aa;
   valaddr_reg:x3; val_offset:1634*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1634*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1741c9b528809 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x60051481198aa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1741c9b528809; op2val:0x260051481198aa;
   valaddr_reg:x3; val_offset:1636*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1636*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1741c9b528809 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x60051481198aa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1741c9b528809; op2val:0x260051481198aa;
   valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c3c125fde213 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1c3c125fde213; op2val:0x4;
   valaddr_reg:x3; val_offset:1640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1640*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c3c125fde213 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1c3c125fde213; op2val:0x4;
   valaddr_reg:x3; val_offset:1642*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1642*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c3c125fde213 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1c3c125fde213; op2val:0x4;
   valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c3c125fde213 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1c3c125fde213; op2val:0x4;
   valaddr_reg:x3; val_offset:1646*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1646*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c3c125fde213 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1c3c125fde213; op2val:0x4;
   valaddr_reg:x3; val_offset:1648*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1648*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d494172eadcd and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcb70c178544c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1d494172eadcd; op2val:0x1cb70c178544c8;
   valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d494172eadcd and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcb70c178544c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1d494172eadcd; op2val:0x1cb70c178544c8;
   valaddr_reg:x3; val_offset:1652*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1652*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d494172eadcd and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcb70c178544c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1d494172eadcd; op2val:0x1cb70c178544c8;
   valaddr_reg:x3; val_offset:1654*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1654*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d494172eadcd and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcb70c178544c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1d494172eadcd; op2val:0x1cb70c178544c8;
   valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d494172eadcd and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcb70c178544c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1d494172eadcd; op2val:0x1cb70c178544c8;
   valaddr_reg:x3; val_offset:1658*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1658*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db100085ba87 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac9eabe2cdb6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1db100085ba87; op2val:0x1cac9eabe2cdb6;
   valaddr_reg:x3; val_offset:1660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1660*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db100085ba87 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac9eabe2cdb6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1db100085ba87; op2val:0x1cac9eabe2cdb6;
   valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db100085ba87 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac9eabe2cdb6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1db100085ba87; op2val:0x1cac9eabe2cdb6;
   valaddr_reg:x3; val_offset:1664*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1664*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db100085ba87 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac9eabe2cdb6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1db100085ba87; op2val:0x1cac9eabe2cdb6;
   valaddr_reg:x3; val_offset:1666*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1666*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db100085ba87 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac9eabe2cdb6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1db100085ba87; op2val:0x1cac9eabe2cdb6;
   valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db2a30097eef and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac749f066d6a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1db2a30097eef; op2val:0x1cac749f066d6a;
   valaddr_reg:x3; val_offset:1670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1670*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db2a30097eef and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac749f066d6a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1db2a30097eef; op2val:0x1cac749f066d6a;
   valaddr_reg:x3; val_offset:1672*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1672*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db2a30097eef and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac749f066d6a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1db2a30097eef; op2val:0x1cac749f066d6a;
   valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db2a30097eef and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac749f066d6a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1db2a30097eef; op2val:0x1cac749f066d6a;
   valaddr_reg:x3; val_offset:1676*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1676*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db2a30097eef and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac749f066d6a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1db2a30097eef; op2val:0x1cac749f066d6a;
   valaddr_reg:x3; val_offset:1678*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1678*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e1d3a51fe0f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ca1c5f4249aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1e1d3a51fe0f1; op2val:0x1ca1c5f4249aa;
   valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e1d3a51fe0f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ca1c5f4249aa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1e1d3a51fe0f1; op2val:0x1ca1c5f4249aa;
   valaddr_reg:x3; val_offset:1682*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1682*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e1d3a51fe0f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ca1c5f4249aa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1e1d3a51fe0f1; op2val:0x1ca1c5f4249aa;
   valaddr_reg:x3; val_offset:1684*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1684*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e1d3a51fe0f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ca1c5f4249aa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1e1d3a51fe0f1; op2val:0x1ca1c5f4249aa;
   valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e1d3a51fe0f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ca1c5f4249aa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1e1d3a51fe0f1; op2val:0x1ca1c5f4249aa;
   valaddr_reg:x3; val_offset:1688*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1688*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f4f9934f5428 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1c833def8b3a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1f4f9934f5428; op2val:0x1c833def8b3a4;
   valaddr_reg:x3; val_offset:1690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1690*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f4f9934f5428 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1c833def8b3a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1f4f9934f5428; op2val:0x1c833def8b3a4;
   valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f4f9934f5428 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1c833def8b3a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1f4f9934f5428; op2val:0x1c833def8b3a4;
   valaddr_reg:x3; val_offset:1694*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1694*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f4f9934f5428 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1c833def8b3a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1f4f9934f5428; op2val:0x1c833def8b3a4;
   valaddr_reg:x3; val_offset:1696*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1696*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f4f9934f5428 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1c833def8b3a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1f4f9934f5428; op2val:0x1c833def8b3a4;
   valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2196966125fdb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc49d75b12d869 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2196966125fdb; op2val:0x1c49d75b12d869;
   valaddr_reg:x3; val_offset:1700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1700*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2196966125fdb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc49d75b12d869 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2196966125fdb; op2val:0x1c49d75b12d869;
   valaddr_reg:x3; val_offset:1702*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1702*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2196966125fdb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc49d75b12d869 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2196966125fdb; op2val:0x1c49d75b12d869;
   valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2196966125fdb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc49d75b12d869 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2196966125fdb; op2val:0x1c49d75b12d869;
   valaddr_reg:x3; val_offset:1706*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1706*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2196966125fdb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc49d75b12d869 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2196966125fdb; op2val:0x1c49d75b12d869;
   valaddr_reg:x3; val_offset:1708*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1708*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21eda264c2fca and fs2 == 0 and fe2 == 0x000 and fm2 == 0xe20ac8bfa6abe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe21eda264c2fca; op2val:0xe20ac8bfa6abe;
   valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21eda264c2fca and fs2 == 0 and fe2 == 0x000 and fm2 == 0xe20ac8bfa6abe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe21eda264c2fca; op2val:0xe20ac8bfa6abe;
   valaddr_reg:x3; val_offset:1712*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1712*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21eda264c2fca and fs2 == 0 and fe2 == 0x000 and fm2 == 0xe20ac8bfa6abe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe21eda264c2fca; op2val:0xe20ac8bfa6abe;
   valaddr_reg:x3; val_offset:1714*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1714*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21eda264c2fca and fs2 == 0 and fe2 == 0x000 and fm2 == 0xe20ac8bfa6abe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe21eda264c2fca; op2val:0xe20ac8bfa6abe;
   valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21eda264c2fca and fs2 == 0 and fe2 == 0x000 and fm2 == 0xe20ac8bfa6abe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe21eda264c2fca; op2val:0xe20ac8bfa6abe;
   valaddr_reg:x3; val_offset:1718*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1718*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2365e1f6cd3d6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x515a62265c9f6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2365e1f6cd3d6; op2val:0x2515a62265c9f6;
   valaddr_reg:x3; val_offset:1720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1720*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2365e1f6cd3d6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x515a62265c9f6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2365e1f6cd3d6; op2val:0x2515a62265c9f6;
   valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2365e1f6cd3d6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x515a62265c9f6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2365e1f6cd3d6; op2val:0x2515a62265c9f6;
   valaddr_reg:x3; val_offset:1724*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1724*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2365e1f6cd3d6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x515a62265c9f6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2365e1f6cd3d6; op2val:0x2515a62265c9f6;
   valaddr_reg:x3; val_offset:1726*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1726*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2365e1f6cd3d6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x515a62265c9f6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2365e1f6cd3d6; op2val:0x2515a62265c9f6;
   valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x237f44d723492 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe237f44d723492; op2val:0x4;
   valaddr_reg:x3; val_offset:1730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1730*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x237f44d723492 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe237f44d723492; op2val:0x4;
   valaddr_reg:x3; val_offset:1732*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1732*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x237f44d723492 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe237f44d723492; op2val:0x4;
   valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x237f44d723492 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe237f44d723492; op2val:0x4;
   valaddr_reg:x3; val_offset:1736*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1736*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x237f44d723492 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe237f44d723492; op2val:0x4;
   valaddr_reg:x3; val_offset:1738*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1738*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x250a8e937afc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1bf4821442994 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe250a8e937afc7; op2val:0x1bf4821442994;
   valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x250a8e937afc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1bf4821442994 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe250a8e937afc7; op2val:0x1bf4821442994;
   valaddr_reg:x3; val_offset:1742*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1742*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x250a8e937afc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1bf4821442994 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe250a8e937afc7; op2val:0x1bf4821442994;
   valaddr_reg:x3; val_offset:1744*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1744*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x250a8e937afc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1bf4821442994 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe250a8e937afc7; op2val:0x1bf4821442994;
   valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x250a8e937afc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1bf4821442994 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe250a8e937afc7; op2val:0x1bf4821442994;
   valaddr_reg:x3; val_offset:1748*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1748*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x276a536e292bc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddd7f5d4603a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe276a536e292bc; op2val:0xddd7f5d4603a8;
   valaddr_reg:x3; val_offset:1750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1750*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x276a536e292bc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddd7f5d4603a8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe276a536e292bc; op2val:0xddd7f5d4603a8;
   valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x276a536e292bc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddd7f5d4603a8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe276a536e292bc; op2val:0xddd7f5d4603a8;
   valaddr_reg:x3; val_offset:1754*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1754*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x276a536e292bc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddd7f5d4603a8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe276a536e292bc; op2val:0xddd7f5d4603a8;
   valaddr_reg:x3; val_offset:1756*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1756*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x276a536e292bc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddd7f5d4603a8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe276a536e292bc; op2val:0xddd7f5d4603a8;
   valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2777568687b1d and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddce30c1f58dd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2777568687b1d; op2val:0xddce30c1f58dd;
   valaddr_reg:x3; val_offset:1760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1760*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2777568687b1d and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddce30c1f58dd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2777568687b1d; op2val:0xddce30c1f58dd;
   valaddr_reg:x3; val_offset:1762*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1762*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2777568687b1d and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddce30c1f58dd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2777568687b1d; op2val:0xddce30c1f58dd;
   valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2777568687b1d and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddce30c1f58dd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2777568687b1d; op2val:0xddce30c1f58dd;
   valaddr_reg:x3; val_offset:1766*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1766*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2777568687b1d and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddce30c1f58dd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2777568687b1d; op2val:0xddce30c1f58dd;
   valaddr_reg:x3; val_offset:1768*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1768*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29f9c1848d382 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xdbeffdaf5b76d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe29f9c1848d382; op2val:0xdbeffdaf5b76d;
   valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29f9c1848d382 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xdbeffdaf5b76d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe29f9c1848d382; op2val:0xdbeffdaf5b76d;
   valaddr_reg:x3; val_offset:1772*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1772*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29f9c1848d382 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xdbeffdaf5b76d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe29f9c1848d382; op2val:0xdbeffdaf5b76d;
   valaddr_reg:x3; val_offset:1774*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1774*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29f9c1848d382 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xdbeffdaf5b76d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe29f9c1848d382; op2val:0xdbeffdaf5b76d;
   valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29f9c1848d382 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xdbeffdaf5b76d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe29f9c1848d382; op2val:0xdbeffdaf5b76d;
   valaddr_reg:x3; val_offset:1778*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1778*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dbc1697368fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd932898aef087 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2dbc1697368fe; op2val:0xd932898aef087;
   valaddr_reg:x3; val_offset:1780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1780*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dbc1697368fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd932898aef087 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2dbc1697368fe; op2val:0xd932898aef087;
   valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dbc1697368fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd932898aef087 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2dbc1697368fe; op2val:0xd932898aef087;
   valaddr_reg:x3; val_offset:1784*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1784*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dbc1697368fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd932898aef087 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2dbc1697368fe; op2val:0xd932898aef087;
   valaddr_reg:x3; val_offset:1786*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1786*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dbc1697368fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd932898aef087 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2dbc1697368fe; op2val:0xd932898aef087;
   valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ebb6935beb29 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd87b5aa363c08 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ebb6935beb29; op2val:0xd87b5aa363c08;
   valaddr_reg:x3; val_offset:1790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1790*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ebb6935beb29 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd87b5aa363c08 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ebb6935beb29; op2val:0xd87b5aa363c08;
   valaddr_reg:x3; val_offset:1792*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1792*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ebb6935beb29 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd87b5aa363c08 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ebb6935beb29; op2val:0xd87b5aa363c08;
   valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ebb6935beb29 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd87b5aa363c08 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ebb6935beb29; op2val:0xd87b5aa363c08;
   valaddr_reg:x3; val_offset:1796*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1796*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ebb6935beb29 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd87b5aa363c08 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ebb6935beb29; op2val:0xd87b5aa363c08;
   valaddr_reg:x3; val_offset:1798*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1798*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31ce2ccbc1e66 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ac9ccbd0e93e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe31ce2ccbc1e66; op2val:0x1ac9ccbd0e93e;
   valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31ce2ccbc1e66 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ac9ccbd0e93e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe31ce2ccbc1e66; op2val:0x1ac9ccbd0e93e;
   valaddr_reg:x3; val_offset:1802*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1802*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31ce2ccbc1e66 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ac9ccbd0e93e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe31ce2ccbc1e66; op2val:0x1ac9ccbd0e93e;
   valaddr_reg:x3; val_offset:1804*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1804*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31ce2ccbc1e66 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ac9ccbd0e93e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe31ce2ccbc1e66; op2val:0x1ac9ccbd0e93e;
   valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31ce2ccbc1e66 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ac9ccbd0e93e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe31ce2ccbc1e66; op2val:0x1ac9ccbd0e93e;
   valaddr_reg:x3; val_offset:1808*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1808*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33111b0c41a5d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc587ab015a3c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe33111b0c41a5d; op2val:0x1c587ab015a3c9;
   valaddr_reg:x3; val_offset:1810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1810*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33111b0c41a5d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc587ab015a3c9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe33111b0c41a5d; op2val:0x1c587ab015a3c9;
   valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33111b0c41a5d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc587ab015a3c9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe33111b0c41a5d; op2val:0x1c587ab015a3c9;
   valaddr_reg:x3; val_offset:1814*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1814*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33111b0c41a5d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc587ab015a3c9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe33111b0c41a5d; op2val:0x1c587ab015a3c9;
   valaddr_reg:x3; val_offset:1816*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1816*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33111b0c41a5d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc587ab015a3c9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe33111b0c41a5d; op2val:0x1c587ab015a3c9;
   valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3424eb2bec806 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3f04fb357f6eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3424eb2bec806; op2val:0x23f04fb357f6eb;
   valaddr_reg:x3; val_offset:1820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1820*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3424eb2bec806 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3f04fb357f6eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3424eb2bec806; op2val:0x23f04fb357f6eb;
   valaddr_reg:x3; val_offset:1822*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1822*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3424eb2bec806 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3f04fb357f6eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3424eb2bec806; op2val:0x23f04fb357f6eb;
   valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3424eb2bec806 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3f04fb357f6eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3424eb2bec806; op2val:0x23f04fb357f6eb;
   valaddr_reg:x3; val_offset:1826*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1826*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3424eb2bec806 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3f04fb357f6eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3424eb2bec806; op2val:0x23f04fb357f6eb;
   valaddr_reg:x3; val_offset:1828*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1828*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35ab41e106257 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc1b80bdfb7ea5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe35ab41e106257; op2val:0x1c1b80bdfb7ea5;
   valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35ab41e106257 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc1b80bdfb7ea5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe35ab41e106257; op2val:0x1c1b80bdfb7ea5;
   valaddr_reg:x3; val_offset:1832*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1832*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35ab41e106257 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc1b80bdfb7ea5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe35ab41e106257; op2val:0x1c1b80bdfb7ea5;
   valaddr_reg:x3; val_offset:1834*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1834*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35ab41e106257 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc1b80bdfb7ea5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe35ab41e106257; op2val:0x1c1b80bdfb7ea5;
   valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35ab41e106257 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc1b80bdfb7ea5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe35ab41e106257; op2val:0x1c1b80bdfb7ea5;
   valaddr_reg:x3; val_offset:1838*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1838*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37687c122e4a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd273541640433 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe37687c122e4a5; op2val:0xd273541640433;
   valaddr_reg:x3; val_offset:1840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1840*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37687c122e4a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd273541640433 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe37687c122e4a5; op2val:0xd273541640433;
   valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37687c122e4a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd273541640433 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe37687c122e4a5; op2val:0xd273541640433;
   valaddr_reg:x3; val_offset:1844*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1844*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37687c122e4a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd273541640433 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe37687c122e4a5; op2val:0xd273541640433;
   valaddr_reg:x3; val_offset:1846*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1846*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37687c122e4a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd273541640433 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe37687c122e4a5; op2val:0xd273541640433;
   valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a971bda4650f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd0525f2eeabd4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3a971bda4650f; op2val:0xd0525f2eeabd4;
   valaddr_reg:x3; val_offset:1850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1850*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a971bda4650f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd0525f2eeabd4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3a971bda4650f; op2val:0xd0525f2eeabd4;
   valaddr_reg:x3; val_offset:1852*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1852*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a971bda4650f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd0525f2eeabd4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3a971bda4650f; op2val:0xd0525f2eeabd4;
   valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a971bda4650f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd0525f2eeabd4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3a971bda4650f; op2val:0xd0525f2eeabd4;
   valaddr_reg:x3; val_offset:1856*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1856*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a971bda4650f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd0525f2eeabd4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3a971bda4650f; op2val:0xd0525f2eeabd4;
   valaddr_reg:x3; val_offset:1858*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1858*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d6eaf24e38ee and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3d6eaf24e38ee; op2val:0x3;
   valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d6eaf24e38ee and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3d6eaf24e38ee; op2val:0x3;
   valaddr_reg:x3; val_offset:1862*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1862*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d6eaf24e38ee and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3d6eaf24e38ee; op2val:0x3;
   valaddr_reg:x3; val_offset:1864*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1864*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d6eaf24e38ee and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3d6eaf24e38ee; op2val:0x3;
   valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d6eaf24e38ee and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3d6eaf24e38ee; op2val:0x3;
   valaddr_reg:x3; val_offset:1868*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1868*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3dd7a6492d833 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9c61687141780 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3dd7a6492d833; op2val:0x19c61687141780;
   valaddr_reg:x3; val_offset:1870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1870*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3dd7a6492d833 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9c61687141780 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3dd7a6492d833; op2val:0x19c61687141780;
   valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3dd7a6492d833 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9c61687141780 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3dd7a6492d833; op2val:0x19c61687141780;
   valaddr_reg:x3; val_offset:1874*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1874*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3dd7a6492d833 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9c61687141780 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3dd7a6492d833; op2val:0x19c61687141780;
   valaddr_reg:x3; val_offset:1876*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1876*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3dd7a6492d833 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9c61687141780 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3dd7a6492d833; op2val:0x19c61687141780;
   valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de273ea72d5e and fs2 == 0 and fe2 == 0x002 and fm2 == 0x353e8b840f39c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3de273ea72d5e; op2val:0x2353e8b840f39c;
   valaddr_reg:x3; val_offset:1880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1880*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de273ea72d5e and fs2 == 0 and fe2 == 0x002 and fm2 == 0x353e8b840f39c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3de273ea72d5e; op2val:0x2353e8b840f39c;
   valaddr_reg:x3; val_offset:1882*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1882*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de273ea72d5e and fs2 == 0 and fe2 == 0x002 and fm2 == 0x353e8b840f39c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3de273ea72d5e; op2val:0x2353e8b840f39c;
   valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de273ea72d5e and fs2 == 0 and fe2 == 0x002 and fm2 == 0x353e8b840f39c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3de273ea72d5e; op2val:0x2353e8b840f39c;
   valaddr_reg:x3; val_offset:1886*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1886*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de273ea72d5e and fs2 == 0 and fe2 == 0x002 and fm2 == 0x353e8b840f39c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3de273ea72d5e; op2val:0x2353e8b840f39c;
   valaddr_reg:x3; val_offset:1888*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1888*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ed282f314327 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3455b2b39dfa7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3ed282f314327; op2val:0x23455b2b39dfa7;
   valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ed282f314327 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3455b2b39dfa7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3ed282f314327; op2val:0x23455b2b39dfa7;
   valaddr_reg:x3; val_offset:1892*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1892*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ed282f314327 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3455b2b39dfa7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3ed282f314327; op2val:0x23455b2b39dfa7;
   valaddr_reg:x3; val_offset:1894*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1894*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ed282f314327 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3455b2b39dfa7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3ed282f314327; op2val:0x23455b2b39dfa7;
   valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ed282f314327 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3455b2b39dfa7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3ed282f314327; op2val:0x23455b2b39dfa7;
   valaddr_reg:x3; val_offset:1898*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1898*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x409ed0f4237b2 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb25ba0bb4b6bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe409ed0f4237b2; op2val:0x1b25ba0bb4b6bb;
   valaddr_reg:x3; val_offset:1900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1900*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x409ed0f4237b2 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb25ba0bb4b6bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe409ed0f4237b2; op2val:0x1b25ba0bb4b6bb;
   valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x409ed0f4237b2 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb25ba0bb4b6bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe409ed0f4237b2; op2val:0x1b25ba0bb4b6bb;
   valaddr_reg:x3; val_offset:1904*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1904*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x409ed0f4237b2 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb25ba0bb4b6bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe409ed0f4237b2; op2val:0x1b25ba0bb4b6bb;
   valaddr_reg:x3; val_offset:1906*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1906*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x409ed0f4237b2 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb25ba0bb4b6bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe409ed0f4237b2; op2val:0x1b25ba0bb4b6bb;
   valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4112f9ac6d6c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xcc1d6790db60f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4112f9ac6d6c3; op2val:0xcc1d6790db60f;
   valaddr_reg:x3; val_offset:1910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1910*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4112f9ac6d6c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xcc1d6790db60f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4112f9ac6d6c3; op2val:0xcc1d6790db60f;
   valaddr_reg:x3; val_offset:1912*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1912*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4112f9ac6d6c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xcc1d6790db60f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4112f9ac6d6c3; op2val:0xcc1d6790db60f;
   valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4112f9ac6d6c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xcc1d6790db60f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4112f9ac6d6c3; op2val:0xcc1d6790db60f;
   valaddr_reg:x3; val_offset:1916*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1916*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4112f9ac6d6c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xcc1d6790db60f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4112f9ac6d6c3; op2val:0xcc1d6790db60f;
   valaddr_reg:x3; val_offset:1918*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1918*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4121cbd68796b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb1aa7767b0db5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4121cbd68796b; op2val:0x1b1aa7767b0db5;
   valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4121cbd68796b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb1aa7767b0db5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4121cbd68796b; op2val:0x1b1aa7767b0db5;
   valaddr_reg:x3; val_offset:1922*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1922*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4121cbd68796b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb1aa7767b0db5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4121cbd68796b; op2val:0x1b1aa7767b0db5;
   valaddr_reg:x3; val_offset:1924*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1924*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4121cbd68796b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb1aa7767b0db5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4121cbd68796b; op2val:0x1b1aa7767b0db5;
   valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4121cbd68796b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb1aa7767b0db5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4121cbd68796b; op2val:0x1b1aa7767b0db5;
   valaddr_reg:x3; val_offset:1928*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1928*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48eaab4295ebc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc73f7ef5a1439 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe48eaab4295ebc; op2val:0xc73f7ef5a1439;
   valaddr_reg:x3; val_offset:1930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1930*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48eaab4295ebc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc73f7ef5a1439 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe48eaab4295ebc; op2val:0xc73f7ef5a1439;
   valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48eaab4295ebc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc73f7ef5a1439 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe48eaab4295ebc; op2val:0xc73f7ef5a1439;
   valaddr_reg:x3; val_offset:1934*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1934*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48eaab4295ebc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc73f7ef5a1439 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe48eaab4295ebc; op2val:0xc73f7ef5a1439;
   valaddr_reg:x3; val_offset:1936*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1936*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48eaab4295ebc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc73f7ef5a1439 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe48eaab4295ebc; op2val:0xc73f7ef5a1439;
   valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49b2ddf4ba36e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x18d8d04dff642 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe49b2ddf4ba36e; op2val:0x18d8d04dff642;
   valaddr_reg:x3; val_offset:1940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1940*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49b2ddf4ba36e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x18d8d04dff642 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe49b2ddf4ba36e; op2val:0x18d8d04dff642;
   valaddr_reg:x3; val_offset:1942*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1942*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49b2ddf4ba36e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x18d8d04dff642 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe49b2ddf4ba36e; op2val:0x18d8d04dff642;
   valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49b2ddf4ba36e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x18d8d04dff642 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe49b2ddf4ba36e; op2val:0x18d8d04dff642;
   valaddr_reg:x3; val_offset:1946*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1946*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49b2ddf4ba36e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x18d8d04dff642 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe49b2ddf4ba36e; op2val:0x18d8d04dff642;
   valaddr_reg:x3; val_offset:1948*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1948*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4aca7255a6f18 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4aca7255a6f18; op2val:0x3;
   valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4aca7255a6f18 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4aca7255a6f18; op2val:0x3;
   valaddr_reg:x3; val_offset:1952*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1952*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4aca7255a6f18 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4aca7255a6f18; op2val:0x3;
   valaddr_reg:x3; val_offset:1954*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1954*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4aca7255a6f18 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4aca7255a6f18; op2val:0x3;
   valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4aca7255a6f18 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4aca7255a6f18; op2val:0x3;
   valaddr_reg:x3; val_offset:1958*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1958*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adc6ee8d6da9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4adc6ee8d6da9; op2val:0x3;
   valaddr_reg:x3; val_offset:1960*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1960*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adc6ee8d6da9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4adc6ee8d6da9; op2val:0x3;
   valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adc6ee8d6da9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4adc6ee8d6da9; op2val:0x3;
   valaddr_reg:x3; val_offset:1964*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1964*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adc6ee8d6da9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4adc6ee8d6da9; op2val:0x3;
   valaddr_reg:x3; val_offset:1966*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1966*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adc6ee8d6da9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4adc6ee8d6da9; op2val:0x3;
   valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c6690354e783 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa2f6dc3f5765d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4c6690354e783; op2val:0x1a2f6dc3f5765d;
   valaddr_reg:x3; val_offset:1970*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1970*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c6690354e783 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa2f6dc3f5765d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4c6690354e783; op2val:0x1a2f6dc3f5765d;
   valaddr_reg:x3; val_offset:1972*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1972*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c6690354e783 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa2f6dc3f5765d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4c6690354e783; op2val:0x1a2f6dc3f5765d;
   valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c6690354e783 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa2f6dc3f5765d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4c6690354e783; op2val:0x1a2f6dc3f5765d;
   valaddr_reg:x3; val_offset:1976*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1976*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c6690354e783 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa2f6dc3f5765d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4c6690354e783; op2val:0x1a2f6dc3f5765d;
   valaddr_reg:x3; val_offset:1978*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1978*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x50c42eae0848d and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9d8873e753c2c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe50c42eae0848d; op2val:0x19d8873e753c2c;
   valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x50c42eae0848d and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9d8873e753c2c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe50c42eae0848d; op2val:0x19d8873e753c2c;
   valaddr_reg:x3; val_offset:1982*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1982*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x50c42eae0848d and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9d8873e753c2c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe50c42eae0848d; op2val:0x19d8873e753c2c;
   valaddr_reg:x3; val_offset:1984*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1984*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x50c42eae0848d and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9d8873e753c2c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe50c42eae0848d; op2val:0x19d8873e753c2c;
   valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x50c42eae0848d and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9d8873e753c2c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe50c42eae0848d; op2val:0x19d8873e753c2c;
   valaddr_reg:x3; val_offset:1988*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1988*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ec319683eb8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9ae6ebf2e4a31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe52ec319683eb8; op2val:0x19ae6ebf2e4a31;
   valaddr_reg:x3; val_offset:1990*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 1990*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ec319683eb8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9ae6ebf2e4a31 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe52ec319683eb8; op2val:0x19ae6ebf2e4a31;
   valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ec319683eb8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9ae6ebf2e4a31 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe52ec319683eb8; op2val:0x19ae6ebf2e4a31;
   valaddr_reg:x3; val_offset:1994*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 1994*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ec319683eb8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9ae6ebf2e4a31 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe52ec319683eb8; op2val:0x19ae6ebf2e4a31;
   valaddr_reg:x3; val_offset:1996*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 1996*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ec319683eb8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9ae6ebf2e4a31 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe52ec319683eb8; op2val:0x19ae6ebf2e4a31;
   valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x548936e29abc6 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x80e62be5d682b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe548936e29abc6; op2val:0x180e62be5d682b;
   valaddr_reg:x3; val_offset:2000*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x548936e29abc6 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x80e62be5d682b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe548936e29abc6; op2val:0x180e62be5d682b;
   valaddr_reg:x3; val_offset:2002*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2002*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x548936e29abc6 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x80e62be5d682b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe548936e29abc6; op2val:0x180e62be5d682b;
   valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x548936e29abc6 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x80e62be5d682b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe548936e29abc6; op2val:0x180e62be5d682b;
   valaddr_reg:x3; val_offset:2006*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2006*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x548936e29abc6 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x80e62be5d682b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe548936e29abc6; op2val:0x180e62be5d682b;
   valaddr_reg:x3; val_offset:2008*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2008*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5986ddb4e3ec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5986ddb4e3ec0; op2val:0x3;
   valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5986ddb4e3ec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5986ddb4e3ec0; op2val:0x3;
   valaddr_reg:x3; val_offset:2012*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2012*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5986ddb4e3ec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5986ddb4e3ec0; op2val:0x3;
   valaddr_reg:x3; val_offset:2014*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2014*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5986ddb4e3ec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5986ddb4e3ec0; op2val:0x3;
   valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5986ddb4e3ec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5986ddb4e3ec0; op2val:0x3;
   valaddr_reg:x3; val_offset:2018*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2018*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5cfbc9a935f24 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x77950992a4e85 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5cfbc9a935f24; op2val:0x177950992a4e85;
   valaddr_reg:x3; val_offset:2020*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2020*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5cfbc9a935f24 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x77950992a4e85 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5cfbc9a935f24; op2val:0x177950992a4e85;
   valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5cfbc9a935f24 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x77950992a4e85 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5cfbc9a935f24; op2val:0x177950992a4e85;
   valaddr_reg:x3; val_offset:2024*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2024*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5cfbc9a935f24 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x77950992a4e85 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5cfbc9a935f24; op2val:0x177950992a4e85;
   valaddr_reg:x3; val_offset:2026*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2026*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5cfbc9a935f24 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x77950992a4e85 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5cfbc9a935f24; op2val:0x177950992a4e85;
   valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dc74e1d24c33 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8e2629b2b5d2f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5dc74e1d24c33; op2val:0x18e2629b2b5d2f;
   valaddr_reg:x3; val_offset:2030*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2030*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dc74e1d24c33 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8e2629b2b5d2f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5dc74e1d24c33; op2val:0x18e2629b2b5d2f;
   valaddr_reg:x3; val_offset:2032*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2032*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dc74e1d24c33 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8e2629b2b5d2f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5dc74e1d24c33; op2val:0x18e2629b2b5d2f;
   valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dc74e1d24c33 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8e2629b2b5d2f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5dc74e1d24c33; op2val:0x18e2629b2b5d2f;
   valaddr_reg:x3; val_offset:2036*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2036*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dc74e1d24c33 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8e2629b2b5d2f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5dc74e1d24c33; op2val:0x18e2629b2b5d2f;
   valaddr_reg:x3; val_offset:2038*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2038*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6055f0d13871f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6055f0d13871f; op2val:0x3;
   valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6055f0d13871f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6055f0d13871f; op2val:0x3;
   valaddr_reg:x3; val_offset:2042*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2042*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6055f0d13871f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6055f0d13871f; op2val:0x3;
   valaddr_reg:x3; val_offset:2044*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2044*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6055f0d13871f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6055f0d13871f; op2val:0x3;
   valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2046*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6055f0d13871f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6055f0d13871f; op2val:0x3;
   valaddr_reg:x3; val_offset:2048*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2048*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x616b959db9d26 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb96f025724a63 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe616b959db9d26; op2val:0xb96f025724a63;
   valaddr_reg:x3; val_offset:2050*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2050*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x616b959db9d26 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb96f025724a63 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe616b959db9d26; op2val:0xb96f025724a63;
   valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x616b959db9d26 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb96f025724a63 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe616b959db9d26; op2val:0xb96f025724a63;
   valaddr_reg:x3; val_offset:2054*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2054*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x616b959db9d26 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb96f025724a63 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe616b959db9d26; op2val:0xb96f025724a63;
   valaddr_reg:x3; val_offset:2056*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2056*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x616b959db9d26 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb96f025724a63 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe616b959db9d26; op2val:0xb96f025724a63;
   valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x621567a01c36f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x722c25fe44508 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe621567a01c36f; op2val:0x1722c25fe44508;
   valaddr_reg:x3; val_offset:2060*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2060*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x621567a01c36f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x722c25fe44508 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe621567a01c36f; op2val:0x1722c25fe44508;
   valaddr_reg:x3; val_offset:2062*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2062*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x621567a01c36f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x722c25fe44508 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe621567a01c36f; op2val:0x1722c25fe44508;
   valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x621567a01c36f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x722c25fe44508 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe621567a01c36f; op2val:0x1722c25fe44508;
   valaddr_reg:x3; val_offset:2066*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2066*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x621567a01c36f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x722c25fe44508 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe621567a01c36f; op2val:0x1722c25fe44508;
   valaddr_reg:x3; val_offset:2068*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2068*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62436ebd60bac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x71fc0dbade3c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe62436ebd60bac; op2val:0x171fc0dbade3c3;
   valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62436ebd60bac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x71fc0dbade3c3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe62436ebd60bac; op2val:0x171fc0dbade3c3;
   valaddr_reg:x3; val_offset:2072*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2072*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62436ebd60bac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x71fc0dbade3c3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe62436ebd60bac; op2val:0x171fc0dbade3c3;
   valaddr_reg:x3; val_offset:2074*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2074*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62436ebd60bac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x71fc0dbade3c3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe62436ebd60bac; op2val:0x171fc0dbade3c3;
   valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62436ebd60bac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x71fc0dbade3c3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe62436ebd60bac; op2val:0x171fc0dbade3c3;
   valaddr_reg:x3; val_offset:2078*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2078*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x680e97a6bdb27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb603fff83dd96 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe680e97a6bdb27; op2val:0xb603fff83dd96;
   valaddr_reg:x3; val_offset:2080*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2080*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x680e97a6bdb27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb603fff83dd96 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe680e97a6bdb27; op2val:0xb603fff83dd96;
   valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x680e97a6bdb27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb603fff83dd96 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe680e97a6bdb27; op2val:0xb603fff83dd96;
   valaddr_reg:x3; val_offset:2084*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2084*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x680e97a6bdb27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb603fff83dd96 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe680e97a6bdb27; op2val:0xb603fff83dd96;
   valaddr_reg:x3; val_offset:2086*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2086*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x680e97a6bdb27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb603fff83dd96 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe680e97a6bdb27; op2val:0xb603fff83dd96;
   valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x68408ce70081d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x16bd58486f709 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe68408ce70081d; op2val:0x16bd58486f709;
   valaddr_reg:x3; val_offset:2090*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2090*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x68408ce70081d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x16bd58486f709 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe68408ce70081d; op2val:0x16bd58486f709;
   valaddr_reg:x3; val_offset:2092*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2092*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x68408ce70081d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x16bd58486f709 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe68408ce70081d; op2val:0x16bd58486f709;
   valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x68408ce70081d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x16bd58486f709 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe68408ce70081d; op2val:0x16bd58486f709;
   valaddr_reg:x3; val_offset:2096*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2096*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x68408ce70081d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x16bd58486f709 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe68408ce70081d; op2val:0x16bd58486f709;
   valaddr_reg:x3; val_offset:2098*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2098*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ab29f5df4b46 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7ff793adb4009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6ab29f5df4b46; op2val:0x17ff793adb4009;
   valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ab29f5df4b46 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7ff793adb4009 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6ab29f5df4b46; op2val:0x17ff793adb4009;
   valaddr_reg:x3; val_offset:2102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2102*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ab29f5df4b46 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7ff793adb4009 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6ab29f5df4b46; op2val:0x17ff793adb4009;
   valaddr_reg:x3; val_offset:2104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2104*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ab29f5df4b46 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7ff793adb4009 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6ab29f5df4b46; op2val:0x17ff793adb4009;
   valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ab29f5df4b46 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7ff793adb4009 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6ab29f5df4b46; op2val:0x17ff793adb4009;
   valaddr_reg:x3; val_offset:2108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2108*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e41eb61fd956 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7c3c375353a67 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6e41eb61fd956; op2val:0x17c3c375353a67;
   valaddr_reg:x3; val_offset:2110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2110*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e41eb61fd956 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7c3c375353a67 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6e41eb61fd956; op2val:0x17c3c375353a67;
   valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e41eb61fd956 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7c3c375353a67 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6e41eb61fd956; op2val:0x17c3c375353a67;
   valaddr_reg:x3; val_offset:2114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2114*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e41eb61fd956 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7c3c375353a67 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6e41eb61fd956; op2val:0x17c3c375353a67;
   valaddr_reg:x3; val_offset:2116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2116*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e41eb61fd956 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7c3c375353a67 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6e41eb61fd956; op2val:0x17c3c375353a67;
   valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71ed48fc1427e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x62519366790c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe71ed48fc1427e; op2val:0x162519366790c5;
   valaddr_reg:x3; val_offset:2120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2120*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71ed48fc1427e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x62519366790c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe71ed48fc1427e; op2val:0x162519366790c5;
   valaddr_reg:x3; val_offset:2122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2122*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71ed48fc1427e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x62519366790c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe71ed48fc1427e; op2val:0x162519366790c5;
   valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71ed48fc1427e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x62519366790c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe71ed48fc1427e; op2val:0x162519366790c5;
   valaddr_reg:x3; val_offset:2126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2126*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71ed48fc1427e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x62519366790c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe71ed48fc1427e; op2val:0x162519366790c5;
   valaddr_reg:x3; val_offset:2128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2128*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f7f8bb6f3d5f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6b2424aee46b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7f7f8bb6f3d5f; op2val:0x16b2424aee46b8;
   valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f7f8bb6f3d5f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6b2424aee46b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7f7f8bb6f3d5f; op2val:0x16b2424aee46b8;
   valaddr_reg:x3; val_offset:2132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2132*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f7f8bb6f3d5f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6b2424aee46b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7f7f8bb6f3d5f; op2val:0x16b2424aee46b8;
   valaddr_reg:x3; val_offset:2134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2134*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f7f8bb6f3d5f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6b2424aee46b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7f7f8bb6f3d5f; op2val:0x16b2424aee46b8;
   valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f7f8bb6f3d5f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6b2424aee46b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7f7f8bb6f3d5f; op2val:0x16b2424aee46b8;
   valaddr_reg:x3; val_offset:2138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2138*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f99a9fada3f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xaad8325d6bb4b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7f99a9fada3f7; op2val:0xaad8325d6bb4b;
   valaddr_reg:x3; val_offset:2140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2140*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f99a9fada3f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xaad8325d6bb4b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7f99a9fada3f7; op2val:0xaad8325d6bb4b;
   valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f99a9fada3f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xaad8325d6bb4b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7f99a9fada3f7; op2val:0xaad8325d6bb4b;
   valaddr_reg:x3; val_offset:2144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2144*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f99a9fada3f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xaad8325d6bb4b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7f99a9fada3f7; op2val:0xaad8325d6bb4b;
   valaddr_reg:x3; val_offset:2146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2146*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f99a9fada3f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xaad8325d6bb4b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7f99a9fada3f7; op2val:0xaad8325d6bb4b;
   valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fe8e6ba4b819 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6ac07cbc8481a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7fe8e6ba4b819; op2val:0x16ac07cbc8481a;
   valaddr_reg:x3; val_offset:2150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2150*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fe8e6ba4b819 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6ac07cbc8481a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7fe8e6ba4b819; op2val:0x16ac07cbc8481a;
   valaddr_reg:x3; val_offset:2152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2152*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fe8e6ba4b819 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6ac07cbc8481a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7fe8e6ba4b819; op2val:0x16ac07cbc8481a;
   valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fe8e6ba4b819 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6ac07cbc8481a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7fe8e6ba4b819; op2val:0x16ac07cbc8481a;
   valaddr_reg:x3; val_offset:2156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2156*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fe8e6ba4b819 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6ac07cbc8481a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7fe8e6ba4b819; op2val:0x16ac07cbc8481a;
   valaddr_reg:x3; val_offset:2158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2158*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x81cd30d2bafca and fs2 == 0 and fe2 == 0x001 and fm2 == 0x68f921aefe5ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe81cd30d2bafca; op2val:0x168f921aefe5ae;
   valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x81cd30d2bafca and fs2 == 0 and fe2 == 0x001 and fm2 == 0x68f921aefe5ae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe81cd30d2bafca; op2val:0x168f921aefe5ae;
   valaddr_reg:x3; val_offset:2162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2162*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x81cd30d2bafca and fs2 == 0 and fe2 == 0x001 and fm2 == 0x68f921aefe5ae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe81cd30d2bafca; op2val:0x168f921aefe5ae;
   valaddr_reg:x3; val_offset:2164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2164*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x81cd30d2bafca and fs2 == 0 and fe2 == 0x001 and fm2 == 0x68f921aefe5ae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe81cd30d2bafca; op2val:0x168f921aefe5ae;
   valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x81cd30d2bafca and fs2 == 0 and fe2 == 0x001 and fm2 == 0x68f921aefe5ae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe81cd30d2bafca; op2val:0x168f921aefe5ae;
   valaddr_reg:x3; val_offset:2168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2168*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8456a27bdd401 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xfa47b28665864 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8456a27bdd401; op2val:0x1fa47b28665864;
   valaddr_reg:x3; val_offset:2170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2170*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8456a27bdd401 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xfa47b28665864 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8456a27bdd401; op2val:0x1fa47b28665864;
   valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8456a27bdd401 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xfa47b28665864 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8456a27bdd401; op2val:0x1fa47b28665864;
   valaddr_reg:x3; val_offset:2174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2174*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8456a27bdd401 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xfa47b28665864 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8456a27bdd401; op2val:0x1fa47b28665864;
   valaddr_reg:x3; val_offset:2176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2176*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8456a27bdd401 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xfa47b28665864 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8456a27bdd401; op2val:0x1fa47b28665864;
   valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x871ad5313dce5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe871ad5313dce5; op2val:0x3;
   valaddr_reg:x3; val_offset:2180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2180*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x871ad5313dce5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe871ad5313dce5; op2val:0x3;
   valaddr_reg:x3; val_offset:2182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2182*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x871ad5313dce5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe871ad5313dce5; op2val:0x3;
   valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x871ad5313dce5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe871ad5313dce5; op2val:0x3;
   valaddr_reg:x3; val_offset:2186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2186*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x871ad5313dce5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe871ad5313dce5; op2val:0x3;
   valaddr_reg:x3; val_offset:2188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2188*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88f930524ffed and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6c501e4f606c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe88f930524ffed; op2val:0xa6c501e4f606c;
   valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88f930524ffed and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6c501e4f606c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe88f930524ffed; op2val:0xa6c501e4f606c;
   valaddr_reg:x3; val_offset:2192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2192*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88f930524ffed and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6c501e4f606c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe88f930524ffed; op2val:0xa6c501e4f606c;
   valaddr_reg:x3; val_offset:2194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2194*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88f930524ffed and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6c501e4f606c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe88f930524ffed; op2val:0xa6c501e4f606c;
   valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88f930524ffed and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6c501e4f606c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe88f930524ffed; op2val:0xa6c501e4f606c;
   valaddr_reg:x3; val_offset:2198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2198*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89757fb944015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6905162cbd85 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe89757fb944015; op2val:0xa6905162cbd85;
   valaddr_reg:x3; val_offset:2200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2200*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89757fb944015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6905162cbd85 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe89757fb944015; op2val:0xa6905162cbd85;
   valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89757fb944015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6905162cbd85 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe89757fb944015; op2val:0xa6905162cbd85;
   valaddr_reg:x3; val_offset:2204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2204*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89757fb944015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6905162cbd85 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe89757fb944015; op2val:0xa6905162cbd85;
   valaddr_reg:x3; val_offset:2206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2206*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89757fb944015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6905162cbd85 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe89757fb944015; op2val:0xa6905162cbd85;
   valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ab303a513b04 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf21efa502f40a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8ab303a513b04; op2val:0x1f21efa502f40a;
   valaddr_reg:x3; val_offset:2210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2210*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ab303a513b04 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf21efa502f40a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8ab303a513b04; op2val:0x1f21efa502f40a;
   valaddr_reg:x3; val_offset:2212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2212*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ab303a513b04 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf21efa502f40a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8ab303a513b04; op2val:0x1f21efa502f40a;
   valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ab303a513b04 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf21efa502f40a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8ab303a513b04; op2val:0x1f21efa502f40a;
   valaddr_reg:x3; val_offset:2216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2216*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ab303a513b04 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf21efa502f40a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8ab303a513b04; op2val:0x1f21efa502f40a;
   valaddr_reg:x3; val_offset:2218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2218*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bf8eb1452494 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa581aab66927d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8bf8eb1452494; op2val:0xa581aab66927d;
   valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bf8eb1452494 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa581aab66927d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8bf8eb1452494; op2val:0xa581aab66927d;
   valaddr_reg:x3; val_offset:2222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2222*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bf8eb1452494 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa581aab66927d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8bf8eb1452494; op2val:0xa581aab66927d;
   valaddr_reg:x3; val_offset:2224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2224*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bf8eb1452494 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa581aab66927d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8bf8eb1452494; op2val:0xa581aab66927d;
   valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bf8eb1452494 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa581aab66927d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8bf8eb1452494; op2val:0xa581aab66927d;
   valaddr_reg:x3; val_offset:2228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2228*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cccf25de5b64 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x14a52755f43bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8cccf25de5b64; op2val:0x14a52755f43bc;
   valaddr_reg:x3; val_offset:2230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2230*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cccf25de5b64 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x14a52755f43bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8cccf25de5b64; op2val:0x14a52755f43bc;
   valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cccf25de5b64 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x14a52755f43bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8cccf25de5b64; op2val:0x14a52755f43bc;
   valaddr_reg:x3; val_offset:2234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2234*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cccf25de5b64 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x14a52755f43bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8cccf25de5b64; op2val:0x14a52755f43bc;
   valaddr_reg:x3; val_offset:2236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2236*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cccf25de5b64 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x14a52755f43bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8cccf25de5b64; op2val:0x14a52755f43bc;
   valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e6ec983cd445 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8e6ec983cd445; op2val:0x3;
   valaddr_reg:x3; val_offset:2240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2240*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e6ec983cd445 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8e6ec983cd445; op2val:0x3;
   valaddr_reg:x3; val_offset:2242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2242*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e6ec983cd445 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8e6ec983cd445; op2val:0x3;
   valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e6ec983cd445 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8e6ec983cd445; op2val:0x3;
   valaddr_reg:x3; val_offset:2246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2246*FLEN/8, x4, x1, x2)

inst_1124:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e6ec983cd445 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8e6ec983cd445; op2val:0x3;
   valaddr_reg:x3; val_offset:2248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2248*FLEN/8, x4, x1, x2)

inst_1125:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9339c9942e184 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa28780dbb0cac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9339c9942e184; op2val:0xa28780dbb0cac;
   valaddr_reg:x3; val_offset:2250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2250*FLEN/8, x4, x1, x2)

inst_1126:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9339c9942e184 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa28780dbb0cac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9339c9942e184; op2val:0xa28780dbb0cac;
   valaddr_reg:x3; val_offset:2252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2252*FLEN/8, x4, x1, x2)

inst_1127:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9339c9942e184 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa28780dbb0cac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9339c9942e184; op2val:0xa28780dbb0cac;
   valaddr_reg:x3; val_offset:2254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2254*FLEN/8, x4, x1, x2)

inst_1128:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9339c9942e184 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa28780dbb0cac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9339c9942e184; op2val:0xa28780dbb0cac;
   valaddr_reg:x3; val_offset:2256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2256*FLEN/8, x4, x1, x2)

inst_1129:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9339c9942e184 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa28780dbb0cac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9339c9942e184; op2val:0xa28780dbb0cac;
   valaddr_reg:x3; val_offset:2258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2258*FLEN/8, x4, x1, x2)

inst_1130:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x943c1ac39c5ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa21fa4854a169 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe943c1ac39c5ea; op2val:0xa21fa4854a169;
   valaddr_reg:x3; val_offset:2260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2260*FLEN/8, x4, x1, x2)

inst_1131:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x943c1ac39c5ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa21fa4854a169 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe943c1ac39c5ea; op2val:0xa21fa4854a169;
   valaddr_reg:x3; val_offset:2262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2262*FLEN/8, x4, x1, x2)

inst_1132:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x943c1ac39c5ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa21fa4854a169 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe943c1ac39c5ea; op2val:0xa21fa4854a169;
   valaddr_reg:x3; val_offset:2264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2264*FLEN/8, x4, x1, x2)

inst_1133:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x943c1ac39c5ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa21fa4854a169 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe943c1ac39c5ea; op2val:0xa21fa4854a169;
   valaddr_reg:x3; val_offset:2266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2266*FLEN/8, x4, x1, x2)

inst_1134:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x943c1ac39c5ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa21fa4854a169 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe943c1ac39c5ea; op2val:0xa21fa4854a169;
   valaddr_reg:x3; val_offset:2268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2268*FLEN/8, x4, x1, x2)

inst_1135:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9560a9c711bee and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa1aaa3955c615 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9560a9c711bee; op2val:0xa1aaa3955c615;
   valaddr_reg:x3; val_offset:2270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2270*FLEN/8, x4, x1, x2)

inst_1136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9560a9c711bee and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa1aaa3955c615 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9560a9c711bee; op2val:0xa1aaa3955c615;
   valaddr_reg:x3; val_offset:2272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2272*FLEN/8, x4, x1, x2)

inst_1137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9560a9c711bee and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa1aaa3955c615 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9560a9c711bee; op2val:0xa1aaa3955c615;
   valaddr_reg:x3; val_offset:2274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2274*FLEN/8, x4, x1, x2)

inst_1138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9560a9c711bee and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa1aaa3955c615 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9560a9c711bee; op2val:0xa1aaa3955c615;
   valaddr_reg:x3; val_offset:2276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2276*FLEN/8, x4, x1, x2)

inst_1139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9560a9c711bee and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa1aaa3955c615 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9560a9c711bee; op2val:0xa1aaa3955c615;
   valaddr_reg:x3; val_offset:2278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2278*FLEN/8, x4, x1, x2)

inst_1140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x970a9181c46e3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4202f5d8aeae3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe970a9181c46e3; op2val:0x14202f5d8aeae3;
   valaddr_reg:x3; val_offset:2280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2280*FLEN/8, x4, x1, x2)

inst_1141:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x970a9181c46e3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4202f5d8aeae3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe970a9181c46e3; op2val:0x14202f5d8aeae3;
   valaddr_reg:x3; val_offset:2282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2282*FLEN/8, x4, x1, x2)

inst_1142:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x970a9181c46e3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4202f5d8aeae3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe970a9181c46e3; op2val:0x14202f5d8aeae3;
   valaddr_reg:x3; val_offset:2284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2284*FLEN/8, x4, x1, x2)

inst_1143:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x970a9181c46e3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4202f5d8aeae3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe970a9181c46e3; op2val:0x14202f5d8aeae3;
   valaddr_reg:x3; val_offset:2286*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2286*FLEN/8, x4, x1, x2)

inst_1144:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x970a9181c46e3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4202f5d8aeae3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe970a9181c46e3; op2val:0x14202f5d8aeae3;
   valaddr_reg:x3; val_offset:2288*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2288*FLEN/8, x4, x1, x2)

inst_1145:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9891b0b26904e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xe1360cb3a0f6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9891b0b26904e; op2val:0x1e1360cb3a0f6b;
   valaddr_reg:x3; val_offset:2290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2290*FLEN/8, x4, x1, x2)

inst_1146:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9891b0b26904e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xe1360cb3a0f6b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9891b0b26904e; op2val:0x1e1360cb3a0f6b;
   valaddr_reg:x3; val_offset:2292*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2292*FLEN/8, x4, x1, x2)

inst_1147:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9891b0b26904e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xe1360cb3a0f6b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9891b0b26904e; op2val:0x1e1360cb3a0f6b;
   valaddr_reg:x3; val_offset:2294*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2294*FLEN/8, x4, x1, x2)

inst_1148:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9891b0b26904e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xe1360cb3a0f6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9891b0b26904e; op2val:0x1e1360cb3a0f6b;
   valaddr_reg:x3; val_offset:2296*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2296*FLEN/8, x4, x1, x2)

inst_1149:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9891b0b26904e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xe1360cb3a0f6b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9891b0b26904e; op2val:0x1e1360cb3a0f6b;
   valaddr_reg:x3; val_offset:2298*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2298*FLEN/8, x4, x1, x2)

inst_1150:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99cd1b1d0bc99 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xdfc3abd005090 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe99cd1b1d0bc99; op2val:0x1dfc3abd005090;
   valaddr_reg:x3; val_offset:2300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2300*FLEN/8, x4, x1, x2)

inst_1151:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99cd1b1d0bc99 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xdfc3abd005090 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe99cd1b1d0bc99; op2val:0x1dfc3abd005090;
   valaddr_reg:x3; val_offset:2302*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2302*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_10)

inst_1152:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99cd1b1d0bc99 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xdfc3abd005090 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe99cd1b1d0bc99; op2val:0x1dfc3abd005090;
   valaddr_reg:x3; val_offset:2304*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2304*FLEN/8, x4, x1, x2)

inst_1153:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99cd1b1d0bc99 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xdfc3abd005090 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe99cd1b1d0bc99; op2val:0x1dfc3abd005090;
   valaddr_reg:x3; val_offset:2306*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2306*FLEN/8, x4, x1, x2)

inst_1154:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99cd1b1d0bc99 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xdfc3abd005090 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe99cd1b1d0bc99; op2val:0x1dfc3abd005090;
   valaddr_reg:x3; val_offset:2308*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2308*FLEN/8, x4, x1, x2)

inst_1155:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d831ab897405 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9e7c7d0eedbe4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9d831ab897405; op2val:0x9e7c7d0eedbe4;
   valaddr_reg:x3; val_offset:2310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2310*FLEN/8, x4, x1, x2)

inst_1156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d831ab897405 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9e7c7d0eedbe4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9d831ab897405; op2val:0x9e7c7d0eedbe4;
   valaddr_reg:x3; val_offset:2312*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2312*FLEN/8, x4, x1, x2)

inst_1157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d831ab897405 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9e7c7d0eedbe4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9d831ab897405; op2val:0x9e7c7d0eedbe4;
   valaddr_reg:x3; val_offset:2314*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2314*FLEN/8, x4, x1, x2)

inst_1158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d831ab897405 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9e7c7d0eedbe4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9d831ab897405; op2val:0x9e7c7d0eedbe4;
   valaddr_reg:x3; val_offset:2316*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2316*FLEN/8, x4, x1, x2)

inst_1159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d831ab897405 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9e7c7d0eedbe4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9d831ab897405; op2val:0x9e7c7d0eedbe4;
   valaddr_reg:x3; val_offset:2318*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2318*FLEN/8, x4, x1, x2)

inst_1160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9df47160a70eb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x13ca2311481c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9df47160a70eb; op2val:0x13ca2311481c3;
   valaddr_reg:x3; val_offset:2320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2320*FLEN/8, x4, x1, x2)

inst_1161:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9df47160a70eb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x13ca2311481c3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9df47160a70eb; op2val:0x13ca2311481c3;
   valaddr_reg:x3; val_offset:2322*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2322*FLEN/8, x4, x1, x2)

inst_1162:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9df47160a70eb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x13ca2311481c3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9df47160a70eb; op2val:0x13ca2311481c3;
   valaddr_reg:x3; val_offset:2324*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2324*FLEN/8, x4, x1, x2)

inst_1163:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9df47160a70eb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x13ca2311481c3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9df47160a70eb; op2val:0x13ca2311481c3;
   valaddr_reg:x3; val_offset:2326*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2326*FLEN/8, x4, x1, x2)

inst_1164:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9df47160a70eb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x13ca2311481c3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9df47160a70eb; op2val:0x13ca2311481c3;
   valaddr_reg:x3; val_offset:2328*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2328*FLEN/8, x4, x1, x2)

inst_1165:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9ef3cccfd9de9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4f9d4c2bd0f09 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9ef3cccfd9de9; op2val:0x14f9d4c2bd0f09;
   valaddr_reg:x3; val_offset:2330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2330*FLEN/8, x4, x1, x2)

inst_1166:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9ef3cccfd9de9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4f9d4c2bd0f09 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9ef3cccfd9de9; op2val:0x14f9d4c2bd0f09;
   valaddr_reg:x3; val_offset:2332*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2332*FLEN/8, x4, x1, x2)

inst_1167:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9ef3cccfd9de9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4f9d4c2bd0f09 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9ef3cccfd9de9; op2val:0x14f9d4c2bd0f09;
   valaddr_reg:x3; val_offset:2334*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2334*FLEN/8, x4, x1, x2)

inst_1168:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9ef3cccfd9de9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4f9d4c2bd0f09 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9ef3cccfd9de9; op2val:0x14f9d4c2bd0f09;
   valaddr_reg:x3; val_offset:2336*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2336*FLEN/8, x4, x1, x2)

inst_1169:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9ef3cccfd9de9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4f9d4c2bd0f09 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9ef3cccfd9de9; op2val:0x14f9d4c2bd0f09;
   valaddr_reg:x3; val_offset:2338*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2338*FLEN/8, x4, x1, x2)

inst_1170:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa0899d2bd904c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4e5652cac2f28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea0899d2bd904c; op2val:0x14e5652cac2f28;
   valaddr_reg:x3; val_offset:2340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2340*FLEN/8, x4, x1, x2)

inst_1171:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa0899d2bd904c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4e5652cac2f28 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea0899d2bd904c; op2val:0x14e5652cac2f28;
   valaddr_reg:x3; val_offset:2342*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2342*FLEN/8, x4, x1, x2)

inst_1172:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa0899d2bd904c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4e5652cac2f28 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea0899d2bd904c; op2val:0x14e5652cac2f28;
   valaddr_reg:x3; val_offset:2344*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2344*FLEN/8, x4, x1, x2)

inst_1173:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa0899d2bd904c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4e5652cac2f28 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea0899d2bd904c; op2val:0x14e5652cac2f28;
   valaddr_reg:x3; val_offset:2346*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2346*FLEN/8, x4, x1, x2)

inst_1174:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa0899d2bd904c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4e5652cac2f28 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea0899d2bd904c; op2val:0x14e5652cac2f28;
   valaddr_reg:x3; val_offset:2348*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2348*FLEN/8, x4, x1, x2)

inst_1175:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa1ecfc9e85aba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9cd0035fc8d18 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea1ecfc9e85aba; op2val:0x9cd0035fc8d18;
   valaddr_reg:x3; val_offset:2350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2350*FLEN/8, x4, x1, x2)

inst_1176:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa1ecfc9e85aba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9cd0035fc8d18 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea1ecfc9e85aba; op2val:0x9cd0035fc8d18;
   valaddr_reg:x3; val_offset:2352*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2352*FLEN/8, x4, x1, x2)

inst_1177:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa1ecfc9e85aba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9cd0035fc8d18 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea1ecfc9e85aba; op2val:0x9cd0035fc8d18;
   valaddr_reg:x3; val_offset:2354*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2354*FLEN/8, x4, x1, x2)

inst_1178:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa1ecfc9e85aba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9cd0035fc8d18 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea1ecfc9e85aba; op2val:0x9cd0035fc8d18;
   valaddr_reg:x3; val_offset:2356*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2356*FLEN/8, x4, x1, x2)

inst_1179:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa1ecfc9e85aba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9cd0035fc8d18 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea1ecfc9e85aba; op2val:0x9cd0035fc8d18;
   valaddr_reg:x3; val_offset:2358*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2358*FLEN/8, x4, x1, x2)

inst_1180:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa3367805149f4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9c54c404c67bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea3367805149f4; op2val:0x9c54c404c67bb;
   valaddr_reg:x3; val_offset:2360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2360*FLEN/8, x4, x1, x2)

inst_1181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa3367805149f4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9c54c404c67bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea3367805149f4; op2val:0x9c54c404c67bb;
   valaddr_reg:x3; val_offset:2362*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2362*FLEN/8, x4, x1, x2)

inst_1182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa3367805149f4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9c54c404c67bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea3367805149f4; op2val:0x9c54c404c67bb;
   valaddr_reg:x3; val_offset:2364*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2364*FLEN/8, x4, x1, x2)

inst_1183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa3367805149f4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9c54c404c67bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea3367805149f4; op2val:0x9c54c404c67bb;
   valaddr_reg:x3; val_offset:2366*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2366*FLEN/8, x4, x1, x2)

inst_1184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa3367805149f4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9c54c404c67bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea3367805149f4; op2val:0x9c54c404c67bb;
   valaddr_reg:x3; val_offset:2368*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2368*FLEN/8, x4, x1, x2)

inst_1185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa39f66a6db707 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1385b5899f510 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea39f66a6db707; op2val:0x1385b5899f510;
   valaddr_reg:x3; val_offset:2370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2370*FLEN/8, x4, x1, x2)

inst_1186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa39f66a6db707 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1385b5899f510 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea39f66a6db707; op2val:0x1385b5899f510;
   valaddr_reg:x3; val_offset:2372*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2372*FLEN/8, x4, x1, x2)

inst_1187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa39f66a6db707 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1385b5899f510 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea39f66a6db707; op2val:0x1385b5899f510;
   valaddr_reg:x3; val_offset:2374*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2374*FLEN/8, x4, x1, x2)

inst_1188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa39f66a6db707 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1385b5899f510 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea39f66a6db707; op2val:0x1385b5899f510;
   valaddr_reg:x3; val_offset:2376*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2376*FLEN/8, x4, x1, x2)

inst_1189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa39f66a6db707 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1385b5899f510 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea39f66a6db707; op2val:0x1385b5899f510;
   valaddr_reg:x3; val_offset:2378*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2378*FLEN/8, x4, x1, x2)

inst_1190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa710d74f62515 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x35d09046a849a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea710d74f62515; op2val:0x135d09046a849a;
   valaddr_reg:x3; val_offset:2380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2380*FLEN/8, x4, x1, x2)

inst_1191:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa710d74f62515 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x35d09046a849a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea710d74f62515; op2val:0x135d09046a849a;
   valaddr_reg:x3; val_offset:2382*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2382*FLEN/8, x4, x1, x2)

inst_1192:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa710d74f62515 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x35d09046a849a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea710d74f62515; op2val:0x135d09046a849a;
   valaddr_reg:x3; val_offset:2384*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2384*FLEN/8, x4, x1, x2)

inst_1193:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa710d74f62515 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x35d09046a849a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea710d74f62515; op2val:0x135d09046a849a;
   valaddr_reg:x3; val_offset:2386*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2386*FLEN/8, x4, x1, x2)

inst_1194:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa710d74f62515 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x35d09046a849a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea710d74f62515; op2val:0x135d09046a849a;
   valaddr_reg:x3; val_offset:2388*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2388*FLEN/8, x4, x1, x2)

inst_1195:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa75a6cfe67619 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd06811f7b0711 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea75a6cfe67619; op2val:0x1d06811f7b0711;
   valaddr_reg:x3; val_offset:2390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2390*FLEN/8, x4, x1, x2)

inst_1196:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa75a6cfe67619 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd06811f7b0711 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea75a6cfe67619; op2val:0x1d06811f7b0711;
   valaddr_reg:x3; val_offset:2392*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2392*FLEN/8, x4, x1, x2)

inst_1197:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa75a6cfe67619 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd06811f7b0711 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea75a6cfe67619; op2val:0x1d06811f7b0711;
   valaddr_reg:x3; val_offset:2394*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2394*FLEN/8, x4, x1, x2)

inst_1198:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa75a6cfe67619 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd06811f7b0711 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea75a6cfe67619; op2val:0x1d06811f7b0711;
   valaddr_reg:x3; val_offset:2396*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2396*FLEN/8, x4, x1, x2)

inst_1199:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa75a6cfe67619 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd06811f7b0711 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea75a6cfe67619; op2val:0x1d06811f7b0711;
   valaddr_reg:x3; val_offset:2398*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2398*FLEN/8, x4, x1, x2)

inst_1200:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ff36f0082a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9a9131253762a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea7ff36f0082a1; op2val:0x9a9131253762a;
   valaddr_reg:x3; val_offset:2400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2400*FLEN/8, x4, x1, x2)

inst_1201:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ff36f0082a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9a9131253762a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea7ff36f0082a1; op2val:0x9a9131253762a;
   valaddr_reg:x3; val_offset:2402*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2402*FLEN/8, x4, x1, x2)

inst_1202:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ff36f0082a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9a9131253762a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea7ff36f0082a1; op2val:0x9a9131253762a;
   valaddr_reg:x3; val_offset:2404*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2404*FLEN/8, x4, x1, x2)

inst_1203:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ff36f0082a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9a9131253762a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea7ff36f0082a1; op2val:0x9a9131253762a;
   valaddr_reg:x3; val_offset:2406*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2406*FLEN/8, x4, x1, x2)

inst_1204:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ff36f0082a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9a9131253762a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fea7ff36f0082a1; op2val:0x9a9131253762a;
   valaddr_reg:x3; val_offset:2408*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2408*FLEN/8, x4, x1, x2)

inst_1205:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xacc39b20087a3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x31b27eaec2d69 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feacc39b20087a3; op2val:0x131b27eaec2d69;
   valaddr_reg:x3; val_offset:2410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2410*FLEN/8, x4, x1, x2)

inst_1206:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xacc39b20087a3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x31b27eaec2d69 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feacc39b20087a3; op2val:0x131b27eaec2d69;
   valaddr_reg:x3; val_offset:2412*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2412*FLEN/8, x4, x1, x2)

inst_1207:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xacc39b20087a3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x31b27eaec2d69 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feacc39b20087a3; op2val:0x131b27eaec2d69;
   valaddr_reg:x3; val_offset:2414*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2414*FLEN/8, x4, x1, x2)

inst_1208:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xacc39b20087a3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x31b27eaec2d69 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feacc39b20087a3; op2val:0x131b27eaec2d69;
   valaddr_reg:x3; val_offset:2416*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2416*FLEN/8, x4, x1, x2)

inst_1209:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xacc39b20087a3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x31b27eaec2d69 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feacc39b20087a3; op2val:0x131b27eaec2d69;
   valaddr_reg:x3; val_offset:2418*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2418*FLEN/8, x4, x1, x2)

inst_1210:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2e75ce8f8af3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4037ccefd80fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb2e75ce8f8af3; op2val:0x14037ccefd80fe;
   valaddr_reg:x3; val_offset:2420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2420*FLEN/8, x4, x1, x2)

inst_1211:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2e75ce8f8af3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4037ccefd80fe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb2e75ce8f8af3; op2val:0x14037ccefd80fe;
   valaddr_reg:x3; val_offset:2422*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2422*FLEN/8, x4, x1, x2)

inst_1212:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2e75ce8f8af3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4037ccefd80fe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb2e75ce8f8af3; op2val:0x14037ccefd80fe;
   valaddr_reg:x3; val_offset:2424*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2424*FLEN/8, x4, x1, x2)

inst_1213:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2e75ce8f8af3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4037ccefd80fe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb2e75ce8f8af3; op2val:0x14037ccefd80fe;
   valaddr_reg:x3; val_offset:2426*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2426*FLEN/8, x4, x1, x2)

inst_1214:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2e75ce8f8af3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4037ccefd80fe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb2e75ce8f8af3; op2val:0x14037ccefd80fe;
   valaddr_reg:x3; val_offset:2428*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2428*FLEN/8, x4, x1, x2)

inst_1215:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb4fdd08c65822 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x12bf118e2a757 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb4fdd08c65822; op2val:0x12bf118e2a757;
   valaddr_reg:x3; val_offset:2430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2430*FLEN/8, x4, x1, x2)

inst_1216:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb4fdd08c65822 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x12bf118e2a757 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb4fdd08c65822; op2val:0x12bf118e2a757;
   valaddr_reg:x3; val_offset:2432*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2432*FLEN/8, x4, x1, x2)

inst_1217:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb4fdd08c65822 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x12bf118e2a757 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb4fdd08c65822; op2val:0x12bf118e2a757;
   valaddr_reg:x3; val_offset:2434*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2434*FLEN/8, x4, x1, x2)

inst_1218:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb4fdd08c65822 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x12bf118e2a757 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb4fdd08c65822; op2val:0x12bf118e2a757;
   valaddr_reg:x3; val_offset:2436*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2436*FLEN/8, x4, x1, x2)

inst_1219:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb4fdd08c65822 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x12bf118e2a757 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb4fdd08c65822; op2val:0x12bf118e2a757;
   valaddr_reg:x3; val_offset:2438*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2438*FLEN/8, x4, x1, x2)

inst_1220:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb731914dd4ea8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3d17184267253 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb731914dd4ea8; op2val:0x13d17184267253;
   valaddr_reg:x3; val_offset:2440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2440*FLEN/8, x4, x1, x2)

inst_1221:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb731914dd4ea8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3d17184267253 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb731914dd4ea8; op2val:0x13d17184267253;
   valaddr_reg:x3; val_offset:2442*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2442*FLEN/8, x4, x1, x2)

inst_1222:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb731914dd4ea8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3d17184267253 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb731914dd4ea8; op2val:0x13d17184267253;
   valaddr_reg:x3; val_offset:2444*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2444*FLEN/8, x4, x1, x2)

inst_1223:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb731914dd4ea8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3d17184267253 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb731914dd4ea8; op2val:0x13d17184267253;
   valaddr_reg:x3; val_offset:2446*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2446*FLEN/8, x4, x1, x2)

inst_1224:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb731914dd4ea8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3d17184267253 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb731914dd4ea8; op2val:0x13d17184267253;
   valaddr_reg:x3; val_offset:2448*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2448*FLEN/8, x4, x1, x2)

inst_1225:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8074a5515862 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x94ef9192c64ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb8074a5515862; op2val:0x94ef9192c64ea;
   valaddr_reg:x3; val_offset:2450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2450*FLEN/8, x4, x1, x2)

inst_1226:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8074a5515862 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x94ef9192c64ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb8074a5515862; op2val:0x94ef9192c64ea;
   valaddr_reg:x3; val_offset:2452*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2452*FLEN/8, x4, x1, x2)

inst_1227:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8074a5515862 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x94ef9192c64ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb8074a5515862; op2val:0x94ef9192c64ea;
   valaddr_reg:x3; val_offset:2454*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2454*FLEN/8, x4, x1, x2)

inst_1228:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8074a5515862 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x94ef9192c64ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb8074a5515862; op2val:0x94ef9192c64ea;
   valaddr_reg:x3; val_offset:2456*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2456*FLEN/8, x4, x1, x2)

inst_1229:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8074a5515862 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x94ef9192c64ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb8074a5515862; op2val:0x94ef9192c64ea;
   valaddr_reg:x3; val_offset:2458*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2458*FLEN/8, x4, x1, x2)

inst_1230:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb85659a838fe3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xbe7e7c01ba1fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb85659a838fe3; op2val:0x1be7e7c01ba1fb;
   valaddr_reg:x3; val_offset:2460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2460*FLEN/8, x4, x1, x2)

inst_1231:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb85659a838fe3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xbe7e7c01ba1fb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb85659a838fe3; op2val:0x1be7e7c01ba1fb;
   valaddr_reg:x3; val_offset:2462*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2462*FLEN/8, x4, x1, x2)

inst_1232:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb85659a838fe3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xbe7e7c01ba1fb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb85659a838fe3; op2val:0x1be7e7c01ba1fb;
   valaddr_reg:x3; val_offset:2464*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2464*FLEN/8, x4, x1, x2)

inst_1233:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb85659a838fe3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xbe7e7c01ba1fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb85659a838fe3; op2val:0x1be7e7c01ba1fb;
   valaddr_reg:x3; val_offset:2466*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2466*FLEN/8, x4, x1, x2)

inst_1234:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb85659a838fe3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xbe7e7c01ba1fb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb85659a838fe3; op2val:0x1be7e7c01ba1fb;
   valaddr_reg:x3; val_offset:2468*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2468*FLEN/8, x4, x1, x2)

inst_1235:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb968b17f74fe5 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x28f0a763219d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb968b17f74fe5; op2val:0x128f0a763219d5;
   valaddr_reg:x3; val_offset:2470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2470*FLEN/8, x4, x1, x2)

inst_1236:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb968b17f74fe5 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x28f0a763219d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb968b17f74fe5; op2val:0x128f0a763219d5;
   valaddr_reg:x3; val_offset:2472*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2472*FLEN/8, x4, x1, x2)

inst_1237:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb968b17f74fe5 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x28f0a763219d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb968b17f74fe5; op2val:0x128f0a763219d5;
   valaddr_reg:x3; val_offset:2474*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2474*FLEN/8, x4, x1, x2)

inst_1238:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb968b17f74fe5 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x28f0a763219d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb968b17f74fe5; op2val:0x128f0a763219d5;
   valaddr_reg:x3; val_offset:2476*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2476*FLEN/8, x4, x1, x2)

inst_1239:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb968b17f74fe5 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x28f0a763219d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb968b17f74fe5; op2val:0x128f0a763219d5;
   valaddr_reg:x3; val_offset:2478*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2478*FLEN/8, x4, x1, x2)

inst_1240:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc897ddd6e721 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xba469c1da6224 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febc897ddd6e721; op2val:0x1ba469c1da6224;
   valaddr_reg:x3; val_offset:2480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2480*FLEN/8, x4, x1, x2)

inst_1241:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc897ddd6e721 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xba469c1da6224 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febc897ddd6e721; op2val:0x1ba469c1da6224;
   valaddr_reg:x3; val_offset:2482*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2482*FLEN/8, x4, x1, x2)

inst_1242:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc897ddd6e721 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xba469c1da6224 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febc897ddd6e721; op2val:0x1ba469c1da6224;
   valaddr_reg:x3; val_offset:2484*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2484*FLEN/8, x4, x1, x2)

inst_1243:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc897ddd6e721 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xba469c1da6224 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febc897ddd6e721; op2val:0x1ba469c1da6224;
   valaddr_reg:x3; val_offset:2486*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2486*FLEN/8, x4, x1, x2)

inst_1244:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc897ddd6e721 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xba469c1da6224 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febc897ddd6e721; op2val:0x1ba469c1da6224;
   valaddr_reg:x3; val_offset:2488*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2488*FLEN/8, x4, x1, x2)

inst_1245:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbe5b30f86b45d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb8792adc31368 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febe5b30f86b45d; op2val:0x1b8792adc31368;
   valaddr_reg:x3; val_offset:2490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2490*FLEN/8, x4, x1, x2)

inst_1246:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbe5b30f86b45d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb8792adc31368 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febe5b30f86b45d; op2val:0x1b8792adc31368;
   valaddr_reg:x3; val_offset:2492*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2492*FLEN/8, x4, x1, x2)

inst_1247:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbe5b30f86b45d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb8792adc31368 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febe5b30f86b45d; op2val:0x1b8792adc31368;
   valaddr_reg:x3; val_offset:2494*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2494*FLEN/8, x4, x1, x2)

inst_1248:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbe5b30f86b45d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb8792adc31368 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febe5b30f86b45d; op2val:0x1b8792adc31368;
   valaddr_reg:x3; val_offset:2496*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2496*FLEN/8, x4, x1, x2)

inst_1249:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbe5b30f86b45d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb8792adc31368 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febe5b30f86b45d; op2val:0x1b8792adc31368;
   valaddr_reg:x3; val_offset:2498*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2498*FLEN/8, x4, x1, x2)

inst_1250:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef28d020c73f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3796d5672517b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febef28d020c73f; op2val:0x13796d5672517b;
   valaddr_reg:x3; val_offset:2500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2500*FLEN/8, x4, x1, x2)

inst_1251:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef28d020c73f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3796d5672517b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febef28d020c73f; op2val:0x13796d5672517b;
   valaddr_reg:x3; val_offset:2502*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2502*FLEN/8, x4, x1, x2)

inst_1252:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef28d020c73f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3796d5672517b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febef28d020c73f; op2val:0x13796d5672517b;
   valaddr_reg:x3; val_offset:2504*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2504*FLEN/8, x4, x1, x2)

inst_1253:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef28d020c73f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3796d5672517b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febef28d020c73f; op2val:0x13796d5672517b;
   valaddr_reg:x3; val_offset:2506*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2506*FLEN/8, x4, x1, x2)

inst_1254:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef28d020c73f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3796d5672517b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febef28d020c73f; op2val:0x13796d5672517b;
   valaddr_reg:x3; val_offset:2508*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2508*FLEN/8, x4, x1, x2)

inst_1255:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1acac6fbbce3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x91bdb065bafe3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec1acac6fbbce3; op2val:0x91bdb065bafe3;
   valaddr_reg:x3; val_offset:2510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2510*FLEN/8, x4, x1, x2)

inst_1256:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1acac6fbbce3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x91bdb065bafe3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec1acac6fbbce3; op2val:0x91bdb065bafe3;
   valaddr_reg:x3; val_offset:2512*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2512*FLEN/8, x4, x1, x2)

inst_1257:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1acac6fbbce3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x91bdb065bafe3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec1acac6fbbce3; op2val:0x91bdb065bafe3;
   valaddr_reg:x3; val_offset:2514*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2514*FLEN/8, x4, x1, x2)

inst_1258:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1acac6fbbce3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x91bdb065bafe3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec1acac6fbbce3; op2val:0x91bdb065bafe3;
   valaddr_reg:x3; val_offset:2516*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2516*FLEN/8, x4, x1, x2)

inst_1259:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1acac6fbbce3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x91bdb065bafe3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec1acac6fbbce3; op2val:0x91bdb065bafe3;
   valaddr_reg:x3; val_offset:2518*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2518*FLEN/8, x4, x1, x2)

inst_1260:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc615cdadb1bd6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x905349fccaba7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec615cdadb1bd6; op2val:0x905349fccaba7;
   valaddr_reg:x3; val_offset:2520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2520*FLEN/8, x4, x1, x2)

inst_1261:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc615cdadb1bd6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x905349fccaba7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec615cdadb1bd6; op2val:0x905349fccaba7;
   valaddr_reg:x3; val_offset:2522*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2522*FLEN/8, x4, x1, x2)

inst_1262:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc615cdadb1bd6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x905349fccaba7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec615cdadb1bd6; op2val:0x905349fccaba7;
   valaddr_reg:x3; val_offset:2524*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2524*FLEN/8, x4, x1, x2)

inst_1263:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc615cdadb1bd6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x905349fccaba7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec615cdadb1bd6; op2val:0x905349fccaba7;
   valaddr_reg:x3; val_offset:2526*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2526*FLEN/8, x4, x1, x2)

inst_1264:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc615cdadb1bd6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x905349fccaba7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec615cdadb1bd6; op2val:0x905349fccaba7;
   valaddr_reg:x3; val_offset:2528*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2528*FLEN/8, x4, x1, x2)

inst_1265:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc69eb9f603cc8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1204fa4524e2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec69eb9f603cc8; op2val:0x1204fa4524e2e;
   valaddr_reg:x3; val_offset:2530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2530*FLEN/8, x4, x1, x2)

inst_1266:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc69eb9f603cc8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1204fa4524e2e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec69eb9f603cc8; op2val:0x1204fa4524e2e;
   valaddr_reg:x3; val_offset:2532*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2532*FLEN/8, x4, x1, x2)

inst_1267:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc69eb9f603cc8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1204fa4524e2e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec69eb9f603cc8; op2val:0x1204fa4524e2e;
   valaddr_reg:x3; val_offset:2534*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2534*FLEN/8, x4, x1, x2)

inst_1268:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc69eb9f603cc8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1204fa4524e2e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec69eb9f603cc8; op2val:0x1204fa4524e2e;
   valaddr_reg:x3; val_offset:2536*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2536*FLEN/8, x4, x1, x2)

inst_1269:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc69eb9f603cc8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1204fa4524e2e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec69eb9f603cc8; op2val:0x1204fa4524e2e;
   valaddr_reg:x3; val_offset:2538*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2538*FLEN/8, x4, x1, x2)

inst_1270:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6ac6254c69d4 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2046fb4097f31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec6ac6254c69d4; op2val:0x12046fb4097f31;
   valaddr_reg:x3; val_offset:2540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2540*FLEN/8, x4, x1, x2)

inst_1271:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6ac6254c69d4 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2046fb4097f31 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec6ac6254c69d4; op2val:0x12046fb4097f31;
   valaddr_reg:x3; val_offset:2542*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2542*FLEN/8, x4, x1, x2)

inst_1272:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6ac6254c69d4 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2046fb4097f31 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec6ac6254c69d4; op2val:0x12046fb4097f31;
   valaddr_reg:x3; val_offset:2544*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2544*FLEN/8, x4, x1, x2)

inst_1273:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6ac6254c69d4 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2046fb4097f31 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec6ac6254c69d4; op2val:0x12046fb4097f31;
   valaddr_reg:x3; val_offset:2546*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2546*FLEN/8, x4, x1, x2)

inst_1274:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6ac6254c69d4 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2046fb4097f31 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec6ac6254c69d4; op2val:0x12046fb4097f31;
   valaddr_reg:x3; val_offset:2548*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2548*FLEN/8, x4, x1, x2)

inst_1275:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc892e3631d635 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9db5a734da1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec892e3631d635; op2val:0x1ae9db5a734da1;
   valaddr_reg:x3; val_offset:2550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2550*FLEN/8, x4, x1, x2)

inst_1276:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc892e3631d635 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9db5a734da1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec892e3631d635; op2val:0x1ae9db5a734da1;
   valaddr_reg:x3; val_offset:2552*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2552*FLEN/8, x4, x1, x2)

inst_1277:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc892e3631d635 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9db5a734da1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec892e3631d635; op2val:0x1ae9db5a734da1;
   valaddr_reg:x3; val_offset:2554*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2554*FLEN/8, x4, x1, x2)

inst_1278:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc892e3631d635 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9db5a734da1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec892e3631d635; op2val:0x1ae9db5a734da1;
   valaddr_reg:x3; val_offset:2556*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2556*FLEN/8, x4, x1, x2)

inst_1279:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc892e3631d635 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9db5a734da1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec892e3631d635; op2val:0x1ae9db5a734da1;
   valaddr_reg:x3; val_offset:2558*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2558*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_11)

inst_1280:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8955ce227001 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9b602f981eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec8955ce227001; op2val:0x1ae9b602f981eb;
   valaddr_reg:x3; val_offset:2560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2560*FLEN/8, x4, x1, x2)

inst_1281:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8955ce227001 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9b602f981eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec8955ce227001; op2val:0x1ae9b602f981eb;
   valaddr_reg:x3; val_offset:2562*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2562*FLEN/8, x4, x1, x2)

inst_1282:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8955ce227001 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9b602f981eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec8955ce227001; op2val:0x1ae9b602f981eb;
   valaddr_reg:x3; val_offset:2564*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2564*FLEN/8, x4, x1, x2)

inst_1283:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8955ce227001 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9b602f981eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec8955ce227001; op2val:0x1ae9b602f981eb;
   valaddr_reg:x3; val_offset:2566*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2566*FLEN/8, x4, x1, x2)

inst_1284:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8955ce227001 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9b602f981eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec8955ce227001; op2val:0x1ae9b602f981eb;
   valaddr_reg:x3; val_offset:2568*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2568*FLEN/8, x4, x1, x2)

inst_1285:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc997814fb867d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8f3826f3bfa36 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec997814fb867d; op2val:0x8f3826f3bfa36;
   valaddr_reg:x3; val_offset:2570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2570*FLEN/8, x4, x1, x2)

inst_1286:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc997814fb867d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8f3826f3bfa36 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec997814fb867d; op2val:0x8f3826f3bfa36;
   valaddr_reg:x3; val_offset:2572*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2572*FLEN/8, x4, x1, x2)

inst_1287:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc997814fb867d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8f3826f3bfa36 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec997814fb867d; op2val:0x8f3826f3bfa36;
   valaddr_reg:x3; val_offset:2574*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2574*FLEN/8, x4, x1, x2)

inst_1288:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc997814fb867d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8f3826f3bfa36 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec997814fb867d; op2val:0x8f3826f3bfa36;
   valaddr_reg:x3; val_offset:2576*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2576*FLEN/8, x4, x1, x2)

inst_1289:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc997814fb867d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8f3826f3bfa36 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec997814fb867d; op2val:0x8f3826f3bfa36;
   valaddr_reg:x3; val_offset:2578*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2578*FLEN/8, x4, x1, x2)

inst_1290:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9bf9d15341bb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad82cf2ed8223 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec9bf9d15341bb; op2val:0x1ad82cf2ed8223;
   valaddr_reg:x3; val_offset:2580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2580*FLEN/8, x4, x1, x2)

inst_1291:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9bf9d15341bb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad82cf2ed8223 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec9bf9d15341bb; op2val:0x1ad82cf2ed8223;
   valaddr_reg:x3; val_offset:2582*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2582*FLEN/8, x4, x1, x2)

inst_1292:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9bf9d15341bb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad82cf2ed8223 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec9bf9d15341bb; op2val:0x1ad82cf2ed8223;
   valaddr_reg:x3; val_offset:2584*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2584*FLEN/8, x4, x1, x2)

inst_1293:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9bf9d15341bb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad82cf2ed8223 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec9bf9d15341bb; op2val:0x1ad82cf2ed8223;
   valaddr_reg:x3; val_offset:2586*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2586*FLEN/8, x4, x1, x2)

inst_1294:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9bf9d15341bb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad82cf2ed8223 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec9bf9d15341bb; op2val:0x1ad82cf2ed8223;
   valaddr_reg:x3; val_offset:2588*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2588*FLEN/8, x4, x1, x2)

inst_1295:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca030e0aaaf93 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad43909486b87 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feca030e0aaaf93; op2val:0x1ad43909486b87;
   valaddr_reg:x3; val_offset:2590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2590*FLEN/8, x4, x1, x2)

inst_1296:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca030e0aaaf93 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad43909486b87 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feca030e0aaaf93; op2val:0x1ad43909486b87;
   valaddr_reg:x3; val_offset:2592*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2592*FLEN/8, x4, x1, x2)

inst_1297:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca030e0aaaf93 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad43909486b87 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feca030e0aaaf93; op2val:0x1ad43909486b87;
   valaddr_reg:x3; val_offset:2594*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2594*FLEN/8, x4, x1, x2)

inst_1298:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca030e0aaaf93 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad43909486b87 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feca030e0aaaf93; op2val:0x1ad43909486b87;
   valaddr_reg:x3; val_offset:2596*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2596*FLEN/8, x4, x1, x2)

inst_1299:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca030e0aaaf93 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad43909486b87 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feca030e0aaaf93; op2val:0x1ad43909486b87;
   valaddr_reg:x3; val_offset:2598*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2598*FLEN/8, x4, x1, x2)

inst_1300:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbc0383e7371d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e8bf9241d21d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecbc0383e7371d; op2val:0x8e8bf9241d21d;
   valaddr_reg:x3; val_offset:2600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2600*FLEN/8, x4, x1, x2)

inst_1301:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbc0383e7371d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e8bf9241d21d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecbc0383e7371d; op2val:0x8e8bf9241d21d;
   valaddr_reg:x3; val_offset:2602*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2602*FLEN/8, x4, x1, x2)

inst_1302:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbc0383e7371d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e8bf9241d21d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecbc0383e7371d; op2val:0x8e8bf9241d21d;
   valaddr_reg:x3; val_offset:2604*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2604*FLEN/8, x4, x1, x2)

inst_1303:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbc0383e7371d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e8bf9241d21d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecbc0383e7371d; op2val:0x8e8bf9241d21d;
   valaddr_reg:x3; val_offset:2606*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2606*FLEN/8, x4, x1, x2)

inst_1304:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbc0383e7371d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e8bf9241d21d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecbc0383e7371d; op2val:0x8e8bf9241d21d;
   valaddr_reg:x3; val_offset:2608*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2608*FLEN/8, x4, x1, x2)

inst_1305:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc3482b94768d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e67f3d962995 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc3482b94768d; op2val:0x8e67f3d962995;
   valaddr_reg:x3; val_offset:2610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2610*FLEN/8, x4, x1, x2)

inst_1306:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc3482b94768d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e67f3d962995 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc3482b94768d; op2val:0x8e67f3d962995;
   valaddr_reg:x3; val_offset:2612*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2612*FLEN/8, x4, x1, x2)

inst_1307:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc3482b94768d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e67f3d962995 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc3482b94768d; op2val:0x8e67f3d962995;
   valaddr_reg:x3; val_offset:2614*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2614*FLEN/8, x4, x1, x2)

inst_1308:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc3482b94768d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e67f3d962995 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc3482b94768d; op2val:0x8e67f3d962995;
   valaddr_reg:x3; val_offset:2616*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2616*FLEN/8, x4, x1, x2)

inst_1309:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc3482b94768d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e67f3d962995 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc3482b94768d; op2val:0x8e67f3d962995;
   valaddr_reg:x3; val_offset:2618*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2618*FLEN/8, x4, x1, x2)

inst_1310:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc90d9a70a7ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11c96cd79d1f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc90d9a70a7ff; op2val:0x11c96cd79d1f3;
   valaddr_reg:x3; val_offset:2620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2620*FLEN/8, x4, x1, x2)

inst_1311:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc90d9a70a7ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11c96cd79d1f3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc90d9a70a7ff; op2val:0x11c96cd79d1f3;
   valaddr_reg:x3; val_offset:2622*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2622*FLEN/8, x4, x1, x2)

inst_1312:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc90d9a70a7ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11c96cd79d1f3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc90d9a70a7ff; op2val:0x11c96cd79d1f3;
   valaddr_reg:x3; val_offset:2624*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2624*FLEN/8, x4, x1, x2)

inst_1313:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc90d9a70a7ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11c96cd79d1f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc90d9a70a7ff; op2val:0x11c96cd79d1f3;
   valaddr_reg:x3; val_offset:2626*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2626*FLEN/8, x4, x1, x2)

inst_1314:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc90d9a70a7ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11c96cd79d1f3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc90d9a70a7ff; op2val:0x11c96cd79d1f3;
   valaddr_reg:x3; val_offset:2628*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2628*FLEN/8, x4, x1, x2)

inst_1315:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccea8abebb915 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e2fb62a341c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feccea8abebb915; op2val:0x8e2fb62a341c7;
   valaddr_reg:x3; val_offset:2630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2630*FLEN/8, x4, x1, x2)

inst_1316:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccea8abebb915 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e2fb62a341c7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feccea8abebb915; op2val:0x8e2fb62a341c7;
   valaddr_reg:x3; val_offset:2632*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2632*FLEN/8, x4, x1, x2)

inst_1317:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccea8abebb915 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e2fb62a341c7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feccea8abebb915; op2val:0x8e2fb62a341c7;
   valaddr_reg:x3; val_offset:2634*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2634*FLEN/8, x4, x1, x2)

inst_1318:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccea8abebb915 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e2fb62a341c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feccea8abebb915; op2val:0x8e2fb62a341c7;
   valaddr_reg:x3; val_offset:2636*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2636*FLEN/8, x4, x1, x2)

inst_1319:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccea8abebb915 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e2fb62a341c7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feccea8abebb915; op2val:0x8e2fb62a341c7;
   valaddr_reg:x3; val_offset:2638*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2638*FLEN/8, x4, x1, x2)

inst_1320:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcd0735072fa3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2e1299c70f8c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecd0735072fa3c; op2val:0x12e1299c70f8c4;
   valaddr_reg:x3; val_offset:2640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2640*FLEN/8, x4, x1, x2)

inst_1321:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcd0735072fa3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2e1299c70f8c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecd0735072fa3c; op2val:0x12e1299c70f8c4;
   valaddr_reg:x3; val_offset:2642*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2642*FLEN/8, x4, x1, x2)

inst_1322:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcd0735072fa3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2e1299c70f8c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecd0735072fa3c; op2val:0x12e1299c70f8c4;
   valaddr_reg:x3; val_offset:2644*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2644*FLEN/8, x4, x1, x2)

inst_1323:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcd0735072fa3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2e1299c70f8c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecd0735072fa3c; op2val:0x12e1299c70f8c4;
   valaddr_reg:x3; val_offset:2646*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2646*FLEN/8, x4, x1, x2)

inst_1324:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcd0735072fa3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2e1299c70f8c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecd0735072fa3c; op2val:0x12e1299c70f8c4;
   valaddr_reg:x3; val_offset:2648*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2648*FLEN/8, x4, x1, x2)

inst_1325:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcec4d7aaf439e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11b3bf6d862a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecec4d7aaf439e; op2val:0x11b3bf6d862a1;
   valaddr_reg:x3; val_offset:2650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2650*FLEN/8, x4, x1, x2)

inst_1326:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcec4d7aaf439e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11b3bf6d862a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecec4d7aaf439e; op2val:0x11b3bf6d862a1;
   valaddr_reg:x3; val_offset:2652*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2652*FLEN/8, x4, x1, x2)

inst_1327:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcec4d7aaf439e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11b3bf6d862a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecec4d7aaf439e; op2val:0x11b3bf6d862a1;
   valaddr_reg:x3; val_offset:2654*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2654*FLEN/8, x4, x1, x2)

inst_1328:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcec4d7aaf439e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11b3bf6d862a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecec4d7aaf439e; op2val:0x11b3bf6d862a1;
   valaddr_reg:x3; val_offset:2656*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2656*FLEN/8, x4, x1, x2)

inst_1329:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcec4d7aaf439e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11b3bf6d862a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecec4d7aaf439e; op2val:0x11b3bf6d862a1;
   valaddr_reg:x3; val_offset:2658*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2658*FLEN/8, x4, x1, x2)

inst_1330:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcee9df62fba8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8d92a7557356a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecee9df62fba8e; op2val:0x8d92a7557356a;
   valaddr_reg:x3; val_offset:2660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2660*FLEN/8, x4, x1, x2)

inst_1331:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcee9df62fba8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8d92a7557356a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecee9df62fba8e; op2val:0x8d92a7557356a;
   valaddr_reg:x3; val_offset:2662*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2662*FLEN/8, x4, x1, x2)

inst_1332:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcee9df62fba8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8d92a7557356a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecee9df62fba8e; op2val:0x8d92a7557356a;
   valaddr_reg:x3; val_offset:2664*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2664*FLEN/8, x4, x1, x2)

inst_1333:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcee9df62fba8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8d92a7557356a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecee9df62fba8e; op2val:0x8d92a7557356a;
   valaddr_reg:x3; val_offset:2666*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2666*FLEN/8, x4, x1, x2)

inst_1334:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcee9df62fba8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8d92a7557356a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecee9df62fba8e; op2val:0x8d92a7557356a;
   valaddr_reg:x3; val_offset:2668*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2668*FLEN/8, x4, x1, x2)

inst_1335:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd58db6f8a02f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b92246f9d976 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed58db6f8a02f7; op2val:0x8b92246f9d976;
   valaddr_reg:x3; val_offset:2670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2670*FLEN/8, x4, x1, x2)

inst_1336:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd58db6f8a02f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b92246f9d976 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed58db6f8a02f7; op2val:0x8b92246f9d976;
   valaddr_reg:x3; val_offset:2672*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2672*FLEN/8, x4, x1, x2)

inst_1337:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd58db6f8a02f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b92246f9d976 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed58db6f8a02f7; op2val:0x8b92246f9d976;
   valaddr_reg:x3; val_offset:2674*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2674*FLEN/8, x4, x1, x2)

inst_1338:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd58db6f8a02f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b92246f9d976 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed58db6f8a02f7; op2val:0x8b92246f9d976;
   valaddr_reg:x3; val_offset:2676*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2676*FLEN/8, x4, x1, x2)

inst_1339:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd58db6f8a02f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b92246f9d976 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed58db6f8a02f7; op2val:0x8b92246f9d976;
   valaddr_reg:x3; val_offset:2678*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2678*FLEN/8, x4, x1, x2)

inst_1340:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6c74c988a95b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b352cabde579 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed6c74c988a95b; op2val:0x8b352cabde579;
   valaddr_reg:x3; val_offset:2680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2680*FLEN/8, x4, x1, x2)

inst_1341:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6c74c988a95b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b352cabde579 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed6c74c988a95b; op2val:0x8b352cabde579;
   valaddr_reg:x3; val_offset:2682*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2682*FLEN/8, x4, x1, x2)

inst_1342:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6c74c988a95b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b352cabde579 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed6c74c988a95b; op2val:0x8b352cabde579;
   valaddr_reg:x3; val_offset:2684*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2684*FLEN/8, x4, x1, x2)

inst_1343:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6c74c988a95b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b352cabde579 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed6c74c988a95b; op2val:0x8b352cabde579;
   valaddr_reg:x3; val_offset:2686*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2686*FLEN/8, x4, x1, x2)

inst_1344:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6c74c988a95b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b352cabde579 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed6c74c988a95b; op2val:0x8b352cabde579;
   valaddr_reg:x3; val_offset:2688*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2688*FLEN/8, x4, x1, x2)

inst_1345:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7235418bcae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x1633f708daf08 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed7235418bcae8; op2val:0x11633f708daf08;
   valaddr_reg:x3; val_offset:2690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2690*FLEN/8, x4, x1, x2)

inst_1346:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7235418bcae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x1633f708daf08 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed7235418bcae8; op2val:0x11633f708daf08;
   valaddr_reg:x3; val_offset:2692*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2692*FLEN/8, x4, x1, x2)

inst_1347:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7235418bcae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x1633f708daf08 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed7235418bcae8; op2val:0x11633f708daf08;
   valaddr_reg:x3; val_offset:2694*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2694*FLEN/8, x4, x1, x2)

inst_1348:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7235418bcae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x1633f708daf08 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed7235418bcae8; op2val:0x11633f708daf08;
   valaddr_reg:x3; val_offset:2696*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2696*FLEN/8, x4, x1, x2)

inst_1349:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7235418bcae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x1633f708daf08 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed7235418bcae8; op2val:0x11633f708daf08;
   valaddr_reg:x3; val_offset:2698*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2698*FLEN/8, x4, x1, x2)

inst_1350:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd86759a6df597 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa02fb7e469494 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed86759a6df597; op2val:0x1a02fb7e469494;
   valaddr_reg:x3; val_offset:2700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2700*FLEN/8, x4, x1, x2)

inst_1351:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd86759a6df597 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa02fb7e469494 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed86759a6df597; op2val:0x1a02fb7e469494;
   valaddr_reg:x3; val_offset:2702*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2702*FLEN/8, x4, x1, x2)

inst_1352:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd86759a6df597 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa02fb7e469494 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed86759a6df597; op2val:0x1a02fb7e469494;
   valaddr_reg:x3; val_offset:2704*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2704*FLEN/8, x4, x1, x2)

inst_1353:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd86759a6df597 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa02fb7e469494 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed86759a6df597; op2val:0x1a02fb7e469494;
   valaddr_reg:x3; val_offset:2706*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2706*FLEN/8, x4, x1, x2)

inst_1354:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd86759a6df597 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa02fb7e469494 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed86759a6df597; op2val:0x1a02fb7e469494;
   valaddr_reg:x3; val_offset:2708*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2708*FLEN/8, x4, x1, x2)

inst_1355:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd8ceabf1f9324 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a9c41b72cd7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed8ceabf1f9324; op2val:0x8a9c41b72cd7c;
   valaddr_reg:x3; val_offset:2710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2710*FLEN/8, x4, x1, x2)

inst_1356:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd8ceabf1f9324 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a9c41b72cd7c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed8ceabf1f9324; op2val:0x8a9c41b72cd7c;
   valaddr_reg:x3; val_offset:2712*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2712*FLEN/8, x4, x1, x2)

inst_1357:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd8ceabf1f9324 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a9c41b72cd7c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed8ceabf1f9324; op2val:0x8a9c41b72cd7c;
   valaddr_reg:x3; val_offset:2714*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2714*FLEN/8, x4, x1, x2)

inst_1358:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd8ceabf1f9324 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a9c41b72cd7c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed8ceabf1f9324; op2val:0x8a9c41b72cd7c;
   valaddr_reg:x3; val_offset:2716*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2716*FLEN/8, x4, x1, x2)

inst_1359:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd8ceabf1f9324 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a9c41b72cd7c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed8ceabf1f9324; op2val:0x8a9c41b72cd7c;
   valaddr_reg:x3; val_offset:2718*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2718*FLEN/8, x4, x1, x2)

inst_1360:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda38497fa8b3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a328f43b02b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feda38497fa8b3c; op2val:0x8a328f43b02b4;
   valaddr_reg:x3; val_offset:2720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2720*FLEN/8, x4, x1, x2)

inst_1361:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda38497fa8b3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a328f43b02b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feda38497fa8b3c; op2val:0x8a328f43b02b4;
   valaddr_reg:x3; val_offset:2722*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2722*FLEN/8, x4, x1, x2)

inst_1362:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda38497fa8b3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a328f43b02b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feda38497fa8b3c; op2val:0x8a328f43b02b4;
   valaddr_reg:x3; val_offset:2724*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2724*FLEN/8, x4, x1, x2)

inst_1363:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda38497fa8b3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a328f43b02b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feda38497fa8b3c; op2val:0x8a328f43b02b4;
   valaddr_reg:x3; val_offset:2726*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2726*FLEN/8, x4, x1, x2)

inst_1364:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda38497fa8b3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a328f43b02b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feda38497fa8b3c; op2val:0x8a328f43b02b4;
   valaddr_reg:x3; val_offset:2728*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2728*FLEN/8, x4, x1, x2)

inst_1365:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdab6a22995b50 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x141b8e514cd56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedab6a22995b50; op2val:0x1141b8e514cd56;
   valaddr_reg:x3; val_offset:2730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2730*FLEN/8, x4, x1, x2)

inst_1366:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdab6a22995b50 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x141b8e514cd56 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedab6a22995b50; op2val:0x1141b8e514cd56;
   valaddr_reg:x3; val_offset:2732*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2732*FLEN/8, x4, x1, x2)

inst_1367:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdab6a22995b50 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x141b8e514cd56 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedab6a22995b50; op2val:0x1141b8e514cd56;
   valaddr_reg:x3; val_offset:2734*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2734*FLEN/8, x4, x1, x2)

inst_1368:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdab6a22995b50 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x141b8e514cd56 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedab6a22995b50; op2val:0x1141b8e514cd56;
   valaddr_reg:x3; val_offset:2736*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2736*FLEN/8, x4, x1, x2)

inst_1369:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdab6a22995b50 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x141b8e514cd56 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedab6a22995b50; op2val:0x1141b8e514cd56;
   valaddr_reg:x3; val_offset:2738*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2738*FLEN/8, x4, x1, x2)

inst_1370:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddc73a0ce4388 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1125623de1321 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feddc73a0ce4388; op2val:0x1125623de1321;
   valaddr_reg:x3; val_offset:2740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2740*FLEN/8, x4, x1, x2)

inst_1371:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddc73a0ce4388 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1125623de1321 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feddc73a0ce4388; op2val:0x1125623de1321;
   valaddr_reg:x3; val_offset:2742*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2742*FLEN/8, x4, x1, x2)

inst_1372:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddc73a0ce4388 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1125623de1321 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feddc73a0ce4388; op2val:0x1125623de1321;
   valaddr_reg:x3; val_offset:2744*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2744*FLEN/8, x4, x1, x2)

inst_1373:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddc73a0ce4388 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1125623de1321 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feddc73a0ce4388; op2val:0x1125623de1321;
   valaddr_reg:x3; val_offset:2746*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2746*FLEN/8, x4, x1, x2)

inst_1374:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddc73a0ce4388 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1125623de1321 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feddc73a0ce4388; op2val:0x1125623de1321;
   valaddr_reg:x3; val_offset:2748*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2748*FLEN/8, x4, x1, x2)

inst_1375:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe06a62c8d020a and fs2 == 0 and fe2 == 0x001 and fm2 == 0x21e1e27587bb7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee06a62c8d020a; op2val:0x121e1e27587bb7;
   valaddr_reg:x3; val_offset:2750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2750*FLEN/8, x4, x1, x2)

inst_1376:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe06a62c8d020a and fs2 == 0 and fe2 == 0x001 and fm2 == 0x21e1e27587bb7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee06a62c8d020a; op2val:0x121e1e27587bb7;
   valaddr_reg:x3; val_offset:2752*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2752*FLEN/8, x4, x1, x2)

inst_1377:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe06a62c8d020a and fs2 == 0 and fe2 == 0x001 and fm2 == 0x21e1e27587bb7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee06a62c8d020a; op2val:0x121e1e27587bb7;
   valaddr_reg:x3; val_offset:2754*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2754*FLEN/8, x4, x1, x2)

inst_1378:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe06a62c8d020a and fs2 == 0 and fe2 == 0x001 and fm2 == 0x21e1e27587bb7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee06a62c8d020a; op2val:0x121e1e27587bb7;
   valaddr_reg:x3; val_offset:2756*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2756*FLEN/8, x4, x1, x2)

inst_1379:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe06a62c8d020a and fs2 == 0 and fe2 == 0x001 and fm2 == 0x21e1e27587bb7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee06a62c8d020a; op2val:0x121e1e27587bb7;
   valaddr_reg:x3; val_offset:2758*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2758*FLEN/8, x4, x1, x2)

inst_1380:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe30bb2fa23799 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee30bb2fa23799; op2val:0x2;
   valaddr_reg:x3; val_offset:2760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2760*FLEN/8, x4, x1, x2)

inst_1381:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe30bb2fa23799 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee30bb2fa23799; op2val:0x2;
   valaddr_reg:x3; val_offset:2762*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2762*FLEN/8, x4, x1, x2)

inst_1382:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe30bb2fa23799 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee30bb2fa23799; op2val:0x2;
   valaddr_reg:x3; val_offset:2764*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2764*FLEN/8, x4, x1, x2)

inst_1383:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe30bb2fa23799 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee30bb2fa23799; op2val:0x2;
   valaddr_reg:x3; val_offset:2766*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2766*FLEN/8, x4, x1, x2)

inst_1384:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe30bb2fa23799 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee30bb2fa23799; op2val:0x2;
   valaddr_reg:x3; val_offset:2768*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2768*FLEN/8, x4, x1, x2)

inst_1385:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4c8a95892dc8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x958ede343dbd7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee4c8a95892dc8; op2val:0x1958ede343dbd7;
   valaddr_reg:x3; val_offset:2770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2770*FLEN/8, x4, x1, x2)

inst_1386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4c8a95892dc8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x958ede343dbd7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee4c8a95892dc8; op2val:0x1958ede343dbd7;
   valaddr_reg:x3; val_offset:2772*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2772*FLEN/8, x4, x1, x2)

inst_1387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4c8a95892dc8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x958ede343dbd7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee4c8a95892dc8; op2val:0x1958ede343dbd7;
   valaddr_reg:x3; val_offset:2774*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2774*FLEN/8, x4, x1, x2)

inst_1388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4c8a95892dc8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x958ede343dbd7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee4c8a95892dc8; op2val:0x1958ede343dbd7;
   valaddr_reg:x3; val_offset:2776*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2776*FLEN/8, x4, x1, x2)

inst_1389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4c8a95892dc8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x958ede343dbd7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee4c8a95892dc8; op2val:0x1958ede343dbd7;
   valaddr_reg:x3; val_offset:2778*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2778*FLEN/8, x4, x1, x2)

inst_1390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe684fd0912ddc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x941c7b32921d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee684fd0912ddc; op2val:0x1941c7b32921d2;
   valaddr_reg:x3; val_offset:2780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2780*FLEN/8, x4, x1, x2)

inst_1391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe684fd0912ddc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x941c7b32921d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee684fd0912ddc; op2val:0x1941c7b32921d2;
   valaddr_reg:x3; val_offset:2782*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2782*FLEN/8, x4, x1, x2)

inst_1392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe684fd0912ddc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x941c7b32921d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee684fd0912ddc; op2val:0x1941c7b32921d2;
   valaddr_reg:x3; val_offset:2784*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2784*FLEN/8, x4, x1, x2)

inst_1393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe684fd0912ddc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x941c7b32921d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee684fd0912ddc; op2val:0x1941c7b32921d2;
   valaddr_reg:x3; val_offset:2786*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2786*FLEN/8, x4, x1, x2)

inst_1394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe684fd0912ddc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x941c7b32921d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee684fd0912ddc; op2val:0x1941c7b32921d2;
   valaddr_reg:x3; val_offset:2788*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2788*FLEN/8, x4, x1, x2)

inst_1395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed6e267fbb404 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x84d1305d6a52c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed6e267fbb404; op2val:0x84d1305d6a52c;
   valaddr_reg:x3; val_offset:2790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2790*FLEN/8, x4, x1, x2)

inst_1396:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed6e267fbb404 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x84d1305d6a52c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed6e267fbb404; op2val:0x84d1305d6a52c;
   valaddr_reg:x3; val_offset:2792*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2792*FLEN/8, x4, x1, x2)

inst_1397:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed6e267fbb404 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x84d1305d6a52c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed6e267fbb404; op2val:0x84d1305d6a52c;
   valaddr_reg:x3; val_offset:2794*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2794*FLEN/8, x4, x1, x2)

inst_1398:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed6e267fbb404 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x84d1305d6a52c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed6e267fbb404; op2val:0x84d1305d6a52c;
   valaddr_reg:x3; val_offset:2796*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2796*FLEN/8, x4, x1, x2)

inst_1399:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed6e267fbb404 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x84d1305d6a52c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed6e267fbb404; op2val:0x84d1305d6a52c;
   valaddr_reg:x3; val_offset:2798*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2798*FLEN/8, x4, x1, x2)

inst_1400:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9b538840fef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed9b538840fef; op2val:0x2;
   valaddr_reg:x3; val_offset:2800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2800*FLEN/8, x4, x1, x2)

inst_1401:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9b538840fef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed9b538840fef; op2val:0x2;
   valaddr_reg:x3; val_offset:2802*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2802*FLEN/8, x4, x1, x2)

inst_1402:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9b538840fef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed9b538840fef; op2val:0x2;
   valaddr_reg:x3; val_offset:2804*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2804*FLEN/8, x4, x1, x2)

inst_1403:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9b538840fef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed9b538840fef; op2val:0x2;
   valaddr_reg:x3; val_offset:2806*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2806*FLEN/8, x4, x1, x2)

inst_1404:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9b538840fef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed9b538840fef; op2val:0x2;
   valaddr_reg:x3; val_offset:2808*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2808*FLEN/8, x4, x1, x2)

inst_1405:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeed1b73792322 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8471bfeb66e46 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feeed1b73792322; op2val:0x8471bfeb66e46;
   valaddr_reg:x3; val_offset:2810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2810*FLEN/8, x4, x1, x2)

inst_1406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeed1b73792322 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8471bfeb66e46 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feeed1b73792322; op2val:0x8471bfeb66e46;
   valaddr_reg:x3; val_offset:2812*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2812*FLEN/8, x4, x1, x2)

inst_1407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeed1b73792322 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8471bfeb66e46 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feeed1b73792322; op2val:0x8471bfeb66e46;
   valaddr_reg:x3; val_offset:2814*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2814*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_12)

inst_1408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeed1b73792322 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8471bfeb66e46 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feeed1b73792322; op2val:0x8471bfeb66e46;
   valaddr_reg:x3; val_offset:2816*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2816*FLEN/8, x4, x1, x2)

inst_1409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeed1b73792322 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8471bfeb66e46 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feeed1b73792322; op2val:0x8471bfeb66e46;
   valaddr_reg:x3; val_offset:2818*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2818*FLEN/8, x4, x1, x2)

inst_1410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xefae553c5d72a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8436cd2d997bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feefae553c5d72a; op2val:0x8436cd2d997bc;
   valaddr_reg:x3; val_offset:2820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2820*FLEN/8, x4, x1, x2)

inst_1411:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xefae553c5d72a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8436cd2d997bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feefae553c5d72a; op2val:0x8436cd2d997bc;
   valaddr_reg:x3; val_offset:2822*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2822*FLEN/8, x4, x1, x2)

inst_1412:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xefae553c5d72a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8436cd2d997bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feefae553c5d72a; op2val:0x8436cd2d997bc;
   valaddr_reg:x3; val_offset:2824*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2824*FLEN/8, x4, x1, x2)

inst_1413:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xefae553c5d72a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8436cd2d997bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feefae553c5d72a; op2val:0x8436cd2d997bc;
   valaddr_reg:x3; val_offset:2826*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2826*FLEN/8, x4, x1, x2)

inst_1414:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xefae553c5d72a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8436cd2d997bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feefae553c5d72a; op2val:0x8436cd2d997bc;
   valaddr_reg:x3; val_offset:2828*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2828*FLEN/8, x4, x1, x2)

inst_1415:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0398f2c43690 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8411b4befbb66 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef0398f2c43690; op2val:0x8411b4befbb66;
   valaddr_reg:x3; val_offset:2830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2830*FLEN/8, x4, x1, x2)

inst_1416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0398f2c43690 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8411b4befbb66 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef0398f2c43690; op2val:0x8411b4befbb66;
   valaddr_reg:x3; val_offset:2832*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2832*FLEN/8, x4, x1, x2)

inst_1417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0398f2c43690 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8411b4befbb66 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef0398f2c43690; op2val:0x8411b4befbb66;
   valaddr_reg:x3; val_offset:2834*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2834*FLEN/8, x4, x1, x2)

inst_1418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0398f2c43690 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8411b4befbb66 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef0398f2c43690; op2val:0x8411b4befbb66;
   valaddr_reg:x3; val_offset:2836*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2836*FLEN/8, x4, x1, x2)

inst_1419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0398f2c43690 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8411b4befbb66 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef0398f2c43690; op2val:0x8411b4befbb66;
   valaddr_reg:x3; val_offset:2838*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2838*FLEN/8, x4, x1, x2)

inst_1420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf05337d9798fa and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8c20a29485c1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef05337d9798fa; op2val:0x18c20a29485c1b;
   valaddr_reg:x3; val_offset:2840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2840*FLEN/8, x4, x1, x2)

inst_1421:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf05337d9798fa and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8c20a29485c1b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef05337d9798fa; op2val:0x18c20a29485c1b;
   valaddr_reg:x3; val_offset:2842*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2842*FLEN/8, x4, x1, x2)

inst_1422:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf05337d9798fa and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8c20a29485c1b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef05337d9798fa; op2val:0x18c20a29485c1b;
   valaddr_reg:x3; val_offset:2844*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2844*FLEN/8, x4, x1, x2)

inst_1423:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf05337d9798fa and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8c20a29485c1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef05337d9798fa; op2val:0x18c20a29485c1b;
   valaddr_reg:x3; val_offset:2846*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2846*FLEN/8, x4, x1, x2)

inst_1424:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf05337d9798fa and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8c20a29485c1b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef05337d9798fa; op2val:0x18c20a29485c1b;
   valaddr_reg:x3; val_offset:2848*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2848*FLEN/8, x4, x1, x2)

inst_1425:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf306047d624fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8354177563369 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef306047d624fa; op2val:0x8354177563369;
   valaddr_reg:x3; val_offset:2850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2850*FLEN/8, x4, x1, x2)

inst_1426:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf306047d624fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8354177563369 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef306047d624fa; op2val:0x8354177563369;
   valaddr_reg:x3; val_offset:2852*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2852*FLEN/8, x4, x1, x2)

inst_1427:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf306047d624fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8354177563369 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef306047d624fa; op2val:0x8354177563369;
   valaddr_reg:x3; val_offset:2854*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2854*FLEN/8, x4, x1, x2)

inst_1428:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf306047d624fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8354177563369 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef306047d624fa; op2val:0x8354177563369;
   valaddr_reg:x3; val_offset:2856*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2856*FLEN/8, x4, x1, x2)

inst_1429:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf306047d624fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8354177563369 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef306047d624fa; op2val:0x8354177563369;
   valaddr_reg:x3; val_offset:2858*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2858*FLEN/8, x4, x1, x2)

inst_1430:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf52c7fe81f2ca and fs2 == 0 and fe2 == 0x000 and fm2 == 0x82c3d7a299a30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef52c7fe81f2ca; op2val:0x82c3d7a299a30;
   valaddr_reg:x3; val_offset:2860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2860*FLEN/8, x4, x1, x2)

inst_1431:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf52c7fe81f2ca and fs2 == 0 and fe2 == 0x000 and fm2 == 0x82c3d7a299a30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef52c7fe81f2ca; op2val:0x82c3d7a299a30;
   valaddr_reg:x3; val_offset:2862*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2862*FLEN/8, x4, x1, x2)

inst_1432:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf52c7fe81f2ca and fs2 == 0 and fe2 == 0x000 and fm2 == 0x82c3d7a299a30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef52c7fe81f2ca; op2val:0x82c3d7a299a30;
   valaddr_reg:x3; val_offset:2864*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2864*FLEN/8, x4, x1, x2)

inst_1433:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf52c7fe81f2ca and fs2 == 0 and fe2 == 0x000 and fm2 == 0x82c3d7a299a30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef52c7fe81f2ca; op2val:0x82c3d7a299a30;
   valaddr_reg:x3; val_offset:2866*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2866*FLEN/8, x4, x1, x2)

inst_1434:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf52c7fe81f2ca and fs2 == 0 and fe2 == 0x000 and fm2 == 0x82c3d7a299a30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef52c7fe81f2ca; op2val:0x82c3d7a299a30;
   valaddr_reg:x3; val_offset:2868*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2868*FLEN/8, x4, x1, x2)

inst_1435:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf63e68c80ab2e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x827c86d9a51bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef63e68c80ab2e; op2val:0x827c86d9a51bc;
   valaddr_reg:x3; val_offset:2870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2870*FLEN/8, x4, x1, x2)

inst_1436:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf63e68c80ab2e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x827c86d9a51bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef63e68c80ab2e; op2val:0x827c86d9a51bc;
   valaddr_reg:x3; val_offset:2872*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2872*FLEN/8, x4, x1, x2)

inst_1437:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf63e68c80ab2e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x827c86d9a51bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef63e68c80ab2e; op2val:0x827c86d9a51bc;
   valaddr_reg:x3; val_offset:2874*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2874*FLEN/8, x4, x1, x2)

inst_1438:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf63e68c80ab2e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x827c86d9a51bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef63e68c80ab2e; op2val:0x827c86d9a51bc;
   valaddr_reg:x3; val_offset:2876*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2876*FLEN/8, x4, x1, x2)

inst_1439:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf63e68c80ab2e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x827c86d9a51bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef63e68c80ab2e; op2val:0x827c86d9a51bc;
   valaddr_reg:x3; val_offset:2878*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2878*FLEN/8, x4, x1, x2)

inst_1440:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6c459933bd24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8259c3a747daa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef6c459933bd24; op2val:0x8259c3a747daa;
   valaddr_reg:x3; val_offset:2880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2880*FLEN/8, x4, x1, x2)

inst_1441:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6c459933bd24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8259c3a747daa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef6c459933bd24; op2val:0x8259c3a747daa;
   valaddr_reg:x3; val_offset:2882*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2882*FLEN/8, x4, x1, x2)

inst_1442:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6c459933bd24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8259c3a747daa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef6c459933bd24; op2val:0x8259c3a747daa;
   valaddr_reg:x3; val_offset:2884*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2884*FLEN/8, x4, x1, x2)

inst_1443:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6c459933bd24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8259c3a747daa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef6c459933bd24; op2val:0x8259c3a747daa;
   valaddr_reg:x3; val_offset:2886*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2886*FLEN/8, x4, x1, x2)

inst_1444:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6c459933bd24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8259c3a747daa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef6c459933bd24; op2val:0x8259c3a747daa;
   valaddr_reg:x3; val_offset:2888*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2888*FLEN/8, x4, x1, x2)

inst_1445:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf739c46636880 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10476b3053983 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef739c46636880; op2val:0x10476b3053983;
   valaddr_reg:x3; val_offset:2890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2890*FLEN/8, x4, x1, x2)

inst_1446:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf739c46636880 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10476b3053983 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef739c46636880; op2val:0x10476b3053983;
   valaddr_reg:x3; val_offset:2892*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2892*FLEN/8, x4, x1, x2)

inst_1447:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf739c46636880 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10476b3053983 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef739c46636880; op2val:0x10476b3053983;
   valaddr_reg:x3; val_offset:2894*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2894*FLEN/8, x4, x1, x2)

inst_1448:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf739c46636880 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10476b3053983 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef739c46636880; op2val:0x10476b3053983;
   valaddr_reg:x3; val_offset:2896*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2896*FLEN/8, x4, x1, x2)

inst_1449:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf739c46636880 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10476b3053983 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef739c46636880; op2val:0x10476b3053983;
   valaddr_reg:x3; val_offset:2898*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2898*FLEN/8, x4, x1, x2)

inst_1450:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7f346cc0733d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x820b68f292ba7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef7f346cc0733d; op2val:0x820b68f292ba7;
   valaddr_reg:x3; val_offset:2900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2900*FLEN/8, x4, x1, x2)

inst_1451:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7f346cc0733d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x820b68f292ba7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef7f346cc0733d; op2val:0x820b68f292ba7;
   valaddr_reg:x3; val_offset:2902*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2902*FLEN/8, x4, x1, x2)

inst_1452:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7f346cc0733d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x820b68f292ba7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef7f346cc0733d; op2val:0x820b68f292ba7;
   valaddr_reg:x3; val_offset:2904*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2904*FLEN/8, x4, x1, x2)

inst_1453:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7f346cc0733d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x820b68f292ba7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef7f346cc0733d; op2val:0x820b68f292ba7;
   valaddr_reg:x3; val_offset:2906*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2906*FLEN/8, x4, x1, x2)

inst_1454:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7f346cc0733d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x820b68f292ba7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef7f346cc0733d; op2val:0x820b68f292ba7;
   valaddr_reg:x3; val_offset:2908*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2908*FLEN/8, x4, x1, x2)

inst_1455:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa0ece2bf8e3e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10301873f2edf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefa0ece2bf8e3e; op2val:0x10301873f2edf;
   valaddr_reg:x3; val_offset:2910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2910*FLEN/8, x4, x1, x2)

inst_1456:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa0ece2bf8e3e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10301873f2edf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefa0ece2bf8e3e; op2val:0x10301873f2edf;
   valaddr_reg:x3; val_offset:2912*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2912*FLEN/8, x4, x1, x2)

inst_1457:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa0ece2bf8e3e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10301873f2edf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefa0ece2bf8e3e; op2val:0x10301873f2edf;
   valaddr_reg:x3; val_offset:2914*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2914*FLEN/8, x4, x1, x2)

inst_1458:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa0ece2bf8e3e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10301873f2edf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefa0ece2bf8e3e; op2val:0x10301873f2edf;
   valaddr_reg:x3; val_offset:2916*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2916*FLEN/8, x4, x1, x2)

inst_1459:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa0ece2bf8e3e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10301873f2edf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefa0ece2bf8e3e; op2val:0x10301873f2edf;
   valaddr_reg:x3; val_offset:2918*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2918*FLEN/8, x4, x1, x2)

inst_1460:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfaacd1ede8fbc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x02b0c0d04fb6f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefaacd1ede8fbc; op2val:0x102b0c0d04fb6f;
   valaddr_reg:x3; val_offset:2920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2920*FLEN/8, x4, x1, x2)

inst_1461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfaacd1ede8fbc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x02b0c0d04fb6f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefaacd1ede8fbc; op2val:0x102b0c0d04fb6f;
   valaddr_reg:x3; val_offset:2922*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2922*FLEN/8, x4, x1, x2)

inst_1462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfaacd1ede8fbc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x02b0c0d04fb6f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefaacd1ede8fbc; op2val:0x102b0c0d04fb6f;
   valaddr_reg:x3; val_offset:2924*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2924*FLEN/8, x4, x1, x2)

inst_1463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfaacd1ede8fbc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x02b0c0d04fb6f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefaacd1ede8fbc; op2val:0x102b0c0d04fb6f;
   valaddr_reg:x3; val_offset:2926*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2926*FLEN/8, x4, x1, x2)

inst_1464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfaacd1ede8fbc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x02b0c0d04fb6f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefaacd1ede8fbc; op2val:0x102b0c0d04fb6f;
   valaddr_reg:x3; val_offset:2928*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2928*FLEN/8, x4, x1, x2)

inst_1465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd879b36541fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0x809edd6b00df6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefd879b36541fe; op2val:0x809edd6b00df6;
   valaddr_reg:x3; val_offset:2930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2930*FLEN/8, x4, x1, x2)

inst_1466:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd879b36541fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0x809edd6b00df6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefd879b36541fe; op2val:0x809edd6b00df6;
   valaddr_reg:x3; val_offset:2932*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2932*FLEN/8, x4, x1, x2)

inst_1467:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd879b36541fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0x809edd6b00df6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefd879b36541fe; op2val:0x809edd6b00df6;
   valaddr_reg:x3; val_offset:2934*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2934*FLEN/8, x4, x1, x2)

inst_1468:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd879b36541fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0x809edd6b00df6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefd879b36541fe; op2val:0x809edd6b00df6;
   valaddr_reg:x3; val_offset:2936*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2936*FLEN/8, x4, x1, x2)

inst_1469:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd879b36541fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0x809edd6b00df6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefd879b36541fe; op2val:0x809edd6b00df6;
   valaddr_reg:x3; val_offset:2938*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 128, 0, x3, 2938*FLEN/8, x4, x1, x2)

inst_1470:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5;
   valaddr_reg:x3; val_offset:2940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 0, 0, x3, 2940*FLEN/8, x4, x1, x2)

inst_1471:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5;
   valaddr_reg:x3; val_offset:2942*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 32, 0, x3, 2942*FLEN/8, x4, x1, x2)

inst_1472:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5;
   valaddr_reg:x3; val_offset:2944*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 64, 0, x3, 2944*FLEN/8, x4, x1, x2)

inst_1473:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5;
   valaddr_reg:x3; val_offset:2946*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.d, f31, f30, f29, dyn, 96, 0, x3, 2946*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(43085542152974549,64,FLEN)
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(43085542152974549,64,FLEN)
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(43085542152974549,64,FLEN)
NAN_BOXED(4572261247817070336,64,FLEN)
NAN_BOXED(20740025015714377,64,FLEN)
NAN_BOXED(4572261247817070336,64,FLEN)
NAN_BOXED(20740025015714377,64,FLEN)
NAN_BOXED(4572261247817070336,64,FLEN)
NAN_BOXED(20740025015714377,64,FLEN)
NAN_BOXED(4572261247817070336,64,FLEN)
NAN_BOXED(20740025015714377,64,FLEN)
NAN_BOXED(4572261247817070336,64,FLEN)
NAN_BOXED(20740025015714377,64,FLEN)
NAN_BOXED(4576917337978857728,64,FLEN)
NAN_BOXED(29555960766372074,64,FLEN)
NAN_BOXED(4576917337978857728,64,FLEN)
NAN_BOXED(29555960766372074,64,FLEN)
NAN_BOXED(4576917337978857728,64,FLEN)
NAN_BOXED(29555960766372074,64,FLEN)
NAN_BOXED(4576917337978857728,64,FLEN)
NAN_BOXED(29555960766372074,64,FLEN)
NAN_BOXED(4576917337978857728,64,FLEN)
NAN_BOXED(29555960766372074,64,FLEN)
NAN_BOXED(4577534983681653056,64,FLEN)
NAN_BOXED(36292771285595439,64,FLEN)
NAN_BOXED(4577534983681653056,64,FLEN)
NAN_BOXED(36292771285595439,64,FLEN)
NAN_BOXED(4577534983681653056,64,FLEN)
NAN_BOXED(36292771285595439,64,FLEN)
NAN_BOXED(4577534983681653056,64,FLEN)
NAN_BOXED(36292771285595439,64,FLEN)
NAN_BOXED(4577534983681653056,64,FLEN)
NAN_BOXED(36292771285595439,64,FLEN)
NAN_BOXED(4580406948576727264,64,FLEN)
NAN_BOXED(26554850996523197,64,FLEN)
NAN_BOXED(4580406948576727264,64,FLEN)
NAN_BOXED(26554850996523197,64,FLEN)
NAN_BOXED(4580406948576727264,64,FLEN)
NAN_BOXED(26554850996523197,64,FLEN)
NAN_BOXED(4580406948576727264,64,FLEN)
NAN_BOXED(26554850996523197,64,FLEN)
NAN_BOXED(4580406948576727264,64,FLEN)
NAN_BOXED(26554850996523197,64,FLEN)
NAN_BOXED(4582219055519069824,64,FLEN)
NAN_BOXED(10685532685003144,64,FLEN)
NAN_BOXED(4582219055519069824,64,FLEN)
NAN_BOXED(10685532685003144,64,FLEN)
NAN_BOXED(4582219055519069824,64,FLEN)
NAN_BOXED(10685532685003144,64,FLEN)
NAN_BOXED(4582219055519069824,64,FLEN)
NAN_BOXED(10685532685003144,64,FLEN)
NAN_BOXED(4582219055519069824,64,FLEN)
NAN_BOXED(10685532685003144,64,FLEN)
NAN_BOXED(4583870535000343680,64,FLEN)
NAN_BOXED(29926363607131918,64,FLEN)
NAN_BOXED(4583870535000343680,64,FLEN)
NAN_BOXED(29926363607131918,64,FLEN)
NAN_BOXED(4583870535000343680,64,FLEN)
NAN_BOXED(29926363607131918,64,FLEN)
NAN_BOXED(4583870535000343680,64,FLEN)
NAN_BOXED(29926363607131918,64,FLEN)
NAN_BOXED(4583870535000343680,64,FLEN)
NAN_BOXED(29926363607131918,64,FLEN)
NAN_BOXED(4584929050776186560,64,FLEN)
NAN_BOXED(26521710743973312,64,FLEN)
NAN_BOXED(4584929050776186560,64,FLEN)
NAN_BOXED(26521710743973312,64,FLEN)
NAN_BOXED(4584929050776186560,64,FLEN)
NAN_BOXED(26521710743973312,64,FLEN)
NAN_BOXED(4584929050776186560,64,FLEN)
NAN_BOXED(26521710743973312,64,FLEN)
NAN_BOXED(4584929050776186560,64,FLEN)
NAN_BOXED(26521710743973312,64,FLEN)
NAN_BOXED(4585476271261945552,64,FLEN)
NAN_BOXED(21142291508593305,64,FLEN)
NAN_BOXED(4585476271261945552,64,FLEN)
NAN_BOXED(21142291508593305,64,FLEN)
NAN_BOXED(4585476271261945552,64,FLEN)
NAN_BOXED(21142291508593305,64,FLEN)
NAN_BOXED(4585476271261945552,64,FLEN)
NAN_BOXED(21142291508593305,64,FLEN)
NAN_BOXED(4585476271261945552,64,FLEN)
NAN_BOXED(21142291508593305,64,FLEN)
NAN_BOXED(4585640453540707264,64,FLEN)
NAN_BOXED(7402835714061929,64,FLEN)
NAN_BOXED(4585640453540707264,64,FLEN)
NAN_BOXED(7402835714061929,64,FLEN)
NAN_BOXED(4585640453540707264,64,FLEN)
NAN_BOXED(7402835714061929,64,FLEN)
NAN_BOXED(4585640453540707264,64,FLEN)
NAN_BOXED(7402835714061929,64,FLEN)
NAN_BOXED(4585640453540707264,64,FLEN)
NAN_BOXED(7402835714061929,64,FLEN)
NAN_BOXED(4585651474536105344,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(4585651474536105344,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(4585651474536105344,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(4585651474536105344,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(4585651474536105344,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(4585964168668788816,64,FLEN)
NAN_BOXED(20500698811020778,64,FLEN)
NAN_BOXED(4585964168668788816,64,FLEN)
NAN_BOXED(20500698811020778,64,FLEN)
NAN_BOXED(4585964168668788816,64,FLEN)
NAN_BOXED(20500698811020778,64,FLEN)
NAN_BOXED(4585964168668788816,64,FLEN)
NAN_BOXED(20500698811020778,64,FLEN)
NAN_BOXED(4585964168668788816,64,FLEN)
NAN_BOXED(20500698811020778,64,FLEN)
NAN_BOXED(4586255120962980512,64,FLEN)
NAN_BOXED(25086600554460825,64,FLEN)
NAN_BOXED(4586255120962980512,64,FLEN)
NAN_BOXED(25086600554460825,64,FLEN)
NAN_BOXED(4586255120962980512,64,FLEN)
NAN_BOXED(25086600554460825,64,FLEN)
NAN_BOXED(4586255120962980512,64,FLEN)
NAN_BOXED(25086600554460825,64,FLEN)
NAN_BOXED(4586255120962980512,64,FLEN)
NAN_BOXED(25086600554460825,64,FLEN)
NAN_BOXED(4586305645994111312,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(4586305645994111312,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(4586305645994111312,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(4586305645994111312,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(4586305645994111312,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(4586496950211367200,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(4586496950211367200,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(4586496950211367200,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(4586496950211367200,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(4586496950211367200,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(4586689693456391520,64,FLEN)
NAN_BOXED(19723942070410086,64,FLEN)
NAN_BOXED(4586689693456391520,64,FLEN)
NAN_BOXED(19723942070410086,64,FLEN)
NAN_BOXED(4586689693456391520,64,FLEN)
NAN_BOXED(19723942070410086,64,FLEN)
NAN_BOXED(4586689693456391520,64,FLEN)
NAN_BOXED(19723942070410086,64,FLEN)
NAN_BOXED(4586689693456391520,64,FLEN)
NAN_BOXED(19723942070410086,64,FLEN)
NAN_BOXED(4587375411570030512,64,FLEN)
NAN_BOXED(5622608658773809,64,FLEN)
NAN_BOXED(4587375411570030512,64,FLEN)
NAN_BOXED(5622608658773809,64,FLEN)
NAN_BOXED(4587375411570030512,64,FLEN)
NAN_BOXED(5622608658773809,64,FLEN)
NAN_BOXED(4587375411570030512,64,FLEN)
NAN_BOXED(5622608658773809,64,FLEN)
NAN_BOXED(4587375411570030512,64,FLEN)
NAN_BOXED(5622608658773809,64,FLEN)
NAN_BOXED(4587453701948451344,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(4587453701948451344,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(4587453701948451344,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(4587453701948451344,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(4587453701948451344,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(4589410831417918120,64,FLEN)
NAN_BOXED(17553619129312649,64,FLEN)
NAN_BOXED(4589410831417918120,64,FLEN)
NAN_BOXED(17553619129312649,64,FLEN)
NAN_BOXED(4589410831417918120,64,FLEN)
NAN_BOXED(17553619129312649,64,FLEN)
NAN_BOXED(4589410831417918120,64,FLEN)
NAN_BOXED(17553619129312649,64,FLEN)
NAN_BOXED(4589410831417918120,64,FLEN)
NAN_BOXED(17553619129312649,64,FLEN)
NAN_BOXED(4589560456020003408,64,FLEN)
NAN_BOXED(17292437462966948,64,FLEN)
NAN_BOXED(4589560456020003408,64,FLEN)
NAN_BOXED(17292437462966948,64,FLEN)
NAN_BOXED(4589560456020003408,64,FLEN)
NAN_BOXED(17292437462966948,64,FLEN)
NAN_BOXED(4589560456020003408,64,FLEN)
NAN_BOXED(17292437462966948,64,FLEN)
NAN_BOXED(4589560456020003408,64,FLEN)
NAN_BOXED(17292437462966948,64,FLEN)
NAN_BOXED(4589734233735646648,64,FLEN)
NAN_BOXED(21512044416682353,64,FLEN)
NAN_BOXED(4589734233735646648,64,FLEN)
NAN_BOXED(21512044416682353,64,FLEN)
NAN_BOXED(4589734233735646648,64,FLEN)
NAN_BOXED(21512044416682353,64,FLEN)
NAN_BOXED(4589734233735646648,64,FLEN)
NAN_BOXED(21512044416682353,64,FLEN)
NAN_BOXED(4589734233735646648,64,FLEN)
NAN_BOXED(21512044416682353,64,FLEN)
NAN_BOXED(4589983889862995888,64,FLEN)
NAN_BOXED(21613133680690530,64,FLEN)
NAN_BOXED(4589983889862995888,64,FLEN)
NAN_BOXED(21613133680690530,64,FLEN)
NAN_BOXED(4589983889862995888,64,FLEN)
NAN_BOXED(21613133680690530,64,FLEN)
NAN_BOXED(4589983889862995888,64,FLEN)
NAN_BOXED(21613133680690530,64,FLEN)
NAN_BOXED(4589983889862995888,64,FLEN)
NAN_BOXED(21613133680690530,64,FLEN)
NAN_BOXED(4590002020478678536,64,FLEN)
NAN_BOXED(21585611887479615,64,FLEN)
NAN_BOXED(4590002020478678536,64,FLEN)
NAN_BOXED(21585611887479615,64,FLEN)
NAN_BOXED(4590002020478678536,64,FLEN)
NAN_BOXED(21585611887479615,64,FLEN)
NAN_BOXED(4590002020478678536,64,FLEN)
NAN_BOXED(21585611887479615,64,FLEN)
NAN_BOXED(4590002020478678536,64,FLEN)
NAN_BOXED(21585611887479615,64,FLEN)
NAN_BOXED(4590531333596205888,64,FLEN)
NAN_BOXED(3457083790936508,64,FLEN)
NAN_BOXED(4590531333596205888,64,FLEN)
NAN_BOXED(3457083790936508,64,FLEN)
NAN_BOXED(4590531333596205888,64,FLEN)
NAN_BOXED(3457083790936508,64,FLEN)
NAN_BOXED(4590531333596205888,64,FLEN)
NAN_BOXED(3457083790936508,64,FLEN)
NAN_BOXED(4590531333596205888,64,FLEN)
NAN_BOXED(3457083790936508,64,FLEN)
NAN_BOXED(4590598772746362376,64,FLEN)
NAN_BOXED(20773617097733321,64,FLEN)
NAN_BOXED(4590598772746362376,64,FLEN)
NAN_BOXED(20773617097733321,64,FLEN)
NAN_BOXED(4590598772746362376,64,FLEN)
NAN_BOXED(20773617097733321,64,FLEN)
NAN_BOXED(4590598772746362376,64,FLEN)
NAN_BOXED(20773617097733321,64,FLEN)
NAN_BOXED(4590598772746362376,64,FLEN)
NAN_BOXED(20773617097733321,64,FLEN)
NAN_BOXED(4590646111448002512,64,FLEN)
NAN_BOXED(23100521396775894,64,FLEN)
NAN_BOXED(4590646111448002512,64,FLEN)
NAN_BOXED(23100521396775894,64,FLEN)
NAN_BOXED(4590646111448002512,64,FLEN)
NAN_BOXED(23100521396775894,64,FLEN)
NAN_BOXED(4590646111448002512,64,FLEN)
NAN_BOXED(23100521396775894,64,FLEN)
NAN_BOXED(4590646111448002512,64,FLEN)
NAN_BOXED(23100521396775894,64,FLEN)
NAN_BOXED(4590810708216657632,64,FLEN)
NAN_BOXED(20110688466556963,64,FLEN)
NAN_BOXED(4590810708216657632,64,FLEN)
NAN_BOXED(20110688466556963,64,FLEN)
NAN_BOXED(4590810708216657632,64,FLEN)
NAN_BOXED(20110688466556963,64,FLEN)
NAN_BOXED(4590810708216657632,64,FLEN)
NAN_BOXED(20110688466556963,64,FLEN)
NAN_BOXED(4590810708216657632,64,FLEN)
NAN_BOXED(20110688466556963,64,FLEN)
NAN_BOXED(4591050320588947832,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(4591050320588947832,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(4591050320588947832,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(4591050320588947832,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(4591050320588947832,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(4591298006984615064,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(4591298006984615064,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(4591298006984615064,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(4591298006984615064,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(4591298006984615064,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(4591318678555527264,64,FLEN)
NAN_BOXED(15103268848596540,64,FLEN)
NAN_BOXED(4591318678555527264,64,FLEN)
NAN_BOXED(15103268848596540,64,FLEN)
NAN_BOXED(4591318678555527264,64,FLEN)
NAN_BOXED(15103268848596540,64,FLEN)
NAN_BOXED(4591318678555527264,64,FLEN)
NAN_BOXED(15103268848596540,64,FLEN)
NAN_BOXED(4591318678555527264,64,FLEN)
NAN_BOXED(15103268848596540,64,FLEN)
NAN_BOXED(4591486615319912808,64,FLEN)
NAN_BOXED(2973003648260051,64,FLEN)
NAN_BOXED(4591486615319912808,64,FLEN)
NAN_BOXED(2973003648260051,64,FLEN)
NAN_BOXED(4591486615319912808,64,FLEN)
NAN_BOXED(2973003648260051,64,FLEN)
NAN_BOXED(4591486615319912808,64,FLEN)
NAN_BOXED(2973003648260051,64,FLEN)
NAN_BOXED(4591486615319912808,64,FLEN)
NAN_BOXED(2973003648260051,64,FLEN)
NAN_BOXED(4591724612316678440,64,FLEN)
NAN_BOXED(14752768383465170,64,FLEN)
NAN_BOXED(4591724612316678440,64,FLEN)
NAN_BOXED(14752768383465170,64,FLEN)
NAN_BOXED(4591724612316678440,64,FLEN)
NAN_BOXED(14752768383465170,64,FLEN)
NAN_BOXED(4591724612316678440,64,FLEN)
NAN_BOXED(14752768383465170,64,FLEN)
NAN_BOXED(4591724612316678440,64,FLEN)
NAN_BOXED(14752768383465170,64,FLEN)
NAN_BOXED(4591891754920783176,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(4591891754920783176,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(4591891754920783176,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(4591891754920783176,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(4591891754920783176,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(4592194413869029256,64,FLEN)
NAN_BOXED(2693549522442572,64,FLEN)
NAN_BOXED(4592194413869029256,64,FLEN)
NAN_BOXED(2693549522442572,64,FLEN)
NAN_BOXED(4592194413869029256,64,FLEN)
NAN_BOXED(2693549522442572,64,FLEN)
NAN_BOXED(4592194413869029256,64,FLEN)
NAN_BOXED(2693549522442572,64,FLEN)
NAN_BOXED(4592194413869029256,64,FLEN)
NAN_BOXED(2693549522442572,64,FLEN)
NAN_BOXED(4592237915189652264,64,FLEN)
NAN_BOXED(2678078069868080,64,FLEN)
NAN_BOXED(4592237915189652264,64,FLEN)
NAN_BOXED(2678078069868080,64,FLEN)
NAN_BOXED(4592237915189652264,64,FLEN)
NAN_BOXED(2678078069868080,64,FLEN)
NAN_BOXED(4592237915189652264,64,FLEN)
NAN_BOXED(2678078069868080,64,FLEN)
NAN_BOXED(4592237915189652264,64,FLEN)
NAN_BOXED(2678078069868080,64,FLEN)
NAN_BOXED(4592261221842381992,64,FLEN)
NAN_BOXED(18850522569797102,64,FLEN)
NAN_BOXED(4592261221842381992,64,FLEN)
NAN_BOXED(18850522569797102,64,FLEN)
NAN_BOXED(4592261221842381992,64,FLEN)
NAN_BOXED(18850522569797102,64,FLEN)
NAN_BOXED(4592261221842381992,64,FLEN)
NAN_BOXED(18850522569797102,64,FLEN)
NAN_BOXED(4592261221842381992,64,FLEN)
NAN_BOXED(18850522569797102,64,FLEN)
NAN_BOXED(4592333399674148408,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(4592333399674148408,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(4592333399674148408,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(4592333399674148408,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(4592333399674148408,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(4593680157253081892,64,FLEN)
NAN_BOXED(13493756518443721,64,FLEN)
NAN_BOXED(4593680157253081892,64,FLEN)
NAN_BOXED(13493756518443721,64,FLEN)
NAN_BOXED(4593680157253081892,64,FLEN)
NAN_BOXED(13493756518443721,64,FLEN)
NAN_BOXED(4593680157253081892,64,FLEN)
NAN_BOXED(13493756518443721,64,FLEN)
NAN_BOXED(4593680157253081892,64,FLEN)
NAN_BOXED(13493756518443721,64,FLEN)
NAN_BOXED(4593876618249393608,64,FLEN)
NAN_BOXED(18087545589342721,64,FLEN)
NAN_BOXED(4593876618249393608,64,FLEN)
NAN_BOXED(18087545589342721,64,FLEN)
NAN_BOXED(4593876618249393608,64,FLEN)
NAN_BOXED(18087545589342721,64,FLEN)
NAN_BOXED(4593876618249393608,64,FLEN)
NAN_BOXED(18087545589342721,64,FLEN)
NAN_BOXED(4593876618249393608,64,FLEN)
NAN_BOXED(18087545589342721,64,FLEN)
NAN_BOXED(4594067068369545960,64,FLEN)
NAN_BOXED(17287342366848653,64,FLEN)
NAN_BOXED(4594067068369545960,64,FLEN)
NAN_BOXED(17287342366848653,64,FLEN)
NAN_BOXED(4594067068369545960,64,FLEN)
NAN_BOXED(17287342366848653,64,FLEN)
NAN_BOXED(4594067068369545960,64,FLEN)
NAN_BOXED(17287342366848653,64,FLEN)
NAN_BOXED(4594067068369545960,64,FLEN)
NAN_BOXED(17287342366848653,64,FLEN)
NAN_BOXED(4594123933494407752,64,FLEN)
NAN_BOXED(12688734745477047,64,FLEN)
NAN_BOXED(4594123933494407752,64,FLEN)
NAN_BOXED(12688734745477047,64,FLEN)
NAN_BOXED(4594123933494407752,64,FLEN)
NAN_BOXED(12688734745477047,64,FLEN)
NAN_BOXED(4594123933494407752,64,FLEN)
NAN_BOXED(12688734745477047,64,FLEN)
NAN_BOXED(4594123933494407752,64,FLEN)
NAN_BOXED(12688734745477047,64,FLEN)
NAN_BOXED(4594262286263310328,64,FLEN)
NAN_BOXED(19482928050095511,64,FLEN)
NAN_BOXED(4594262286263310328,64,FLEN)
NAN_BOXED(19482928050095511,64,FLEN)
NAN_BOXED(4594262286263310328,64,FLEN)
NAN_BOXED(19482928050095511,64,FLEN)
NAN_BOXED(4594262286263310328,64,FLEN)
NAN_BOXED(19482928050095511,64,FLEN)
NAN_BOXED(4594262286263310328,64,FLEN)
NAN_BOXED(19482928050095511,64,FLEN)
NAN_BOXED(4594430278037871948,64,FLEN)
NAN_BOXED(12212233669067732,64,FLEN)
NAN_BOXED(4594430278037871948,64,FLEN)
NAN_BOXED(12212233669067732,64,FLEN)
NAN_BOXED(4594430278037871948,64,FLEN)
NAN_BOXED(12212233669067732,64,FLEN)
NAN_BOXED(4594430278037871948,64,FLEN)
NAN_BOXED(12212233669067732,64,FLEN)
NAN_BOXED(4594430278037871948,64,FLEN)
NAN_BOXED(12212233669067732,64,FLEN)
NAN_BOXED(4594542666380587836,64,FLEN)
NAN_BOXED(17026354318277371,64,FLEN)
NAN_BOXED(4594542666380587836,64,FLEN)
NAN_BOXED(17026354318277371,64,FLEN)
NAN_BOXED(4594542666380587836,64,FLEN)
NAN_BOXED(17026354318277371,64,FLEN)
NAN_BOXED(4594542666380587836,64,FLEN)
NAN_BOXED(17026354318277371,64,FLEN)
NAN_BOXED(4594542666380587836,64,FLEN)
NAN_BOXED(17026354318277371,64,FLEN)
NAN_BOXED(4594907235859408240,64,FLEN)
NAN_BOXED(16075206845762757,64,FLEN)
NAN_BOXED(4594907235859408240,64,FLEN)
NAN_BOXED(16075206845762757,64,FLEN)
NAN_BOXED(4594907235859408240,64,FLEN)
NAN_BOXED(16075206845762757,64,FLEN)
NAN_BOXED(4594907235859408240,64,FLEN)
NAN_BOXED(16075206845762757,64,FLEN)
NAN_BOXED(4594907235859408240,64,FLEN)
NAN_BOXED(16075206845762757,64,FLEN)
NAN_BOXED(4594910589462525828,64,FLEN)
NAN_BOXED(11567479572458454,64,FLEN)
NAN_BOXED(4594910589462525828,64,FLEN)
NAN_BOXED(11567479572458454,64,FLEN)
NAN_BOXED(4594910589462525828,64,FLEN)
NAN_BOXED(11567479572458454,64,FLEN)
NAN_BOXED(4594910589462525828,64,FLEN)
NAN_BOXED(11567479572458454,64,FLEN)
NAN_BOXED(4594910589462525828,64,FLEN)
NAN_BOXED(11567479572458454,64,FLEN)
NAN_BOXED(4595094797819801340,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(4595094797819801340,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(4595094797819801340,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(4595094797819801340,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(4595094797819801340,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(4595165745196586368,64,FLEN)
NAN_BOXED(16193277489885996,64,FLEN)
NAN_BOXED(4595165745196586368,64,FLEN)
NAN_BOXED(16193277489885996,64,FLEN)
NAN_BOXED(4595165745196586368,64,FLEN)
NAN_BOXED(16193277489885996,64,FLEN)
NAN_BOXED(4595165745196586368,64,FLEN)
NAN_BOXED(16193277489885996,64,FLEN)
NAN_BOXED(4595165745196586368,64,FLEN)
NAN_BOXED(16193277489885996,64,FLEN)
NAN_BOXED(4595495742373470492,64,FLEN)
NAN_BOXED(15417850461547417,64,FLEN)
NAN_BOXED(4595495742373470492,64,FLEN)
NAN_BOXED(15417850461547417,64,FLEN)
NAN_BOXED(4595495742373470492,64,FLEN)
NAN_BOXED(15417850461547417,64,FLEN)
NAN_BOXED(4595495742373470492,64,FLEN)
NAN_BOXED(15417850461547417,64,FLEN)
NAN_BOXED(4595495742373470492,64,FLEN)
NAN_BOXED(15417850461547417,64,FLEN)
NAN_BOXED(4595579395585400800,64,FLEN)
NAN_BOXED(18256054463989936,64,FLEN)
NAN_BOXED(4595579395585400800,64,FLEN)
NAN_BOXED(18256054463989936,64,FLEN)
NAN_BOXED(4595579395585400800,64,FLEN)
NAN_BOXED(18256054463989936,64,FLEN)
NAN_BOXED(4595579395585400800,64,FLEN)
NAN_BOXED(18256054463989936,64,FLEN)
NAN_BOXED(4595579395585400800,64,FLEN)
NAN_BOXED(18256054463989936,64,FLEN)
NAN_BOXED(4595638792425661024,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(4595638792425661024,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(4595638792425661024,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(4595638792425661024,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(4595638792425661024,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(4595730548433467716,64,FLEN)
NAN_BOXED(1545319818970636,64,FLEN)
NAN_BOXED(4595730548433467716,64,FLEN)
NAN_BOXED(1545319818970636,64,FLEN)
NAN_BOXED(4595730548433467716,64,FLEN)
NAN_BOXED(1545319818970636,64,FLEN)
NAN_BOXED(4595730548433467716,64,FLEN)
NAN_BOXED(1545319818970636,64,FLEN)
NAN_BOXED(4595730548433467716,64,FLEN)
NAN_BOXED(1545319818970636,64,FLEN)
NAN_BOXED(4595892637181299012,64,FLEN)
NAN_BOXED(10535886650742791,64,FLEN)
NAN_BOXED(4595892637181299012,64,FLEN)
NAN_BOXED(10535886650742791,64,FLEN)
NAN_BOXED(4595892637181299012,64,FLEN)
NAN_BOXED(10535886650742791,64,FLEN)
NAN_BOXED(4595892637181299012,64,FLEN)
NAN_BOXED(10535886650742791,64,FLEN)
NAN_BOXED(4595892637181299012,64,FLEN)
NAN_BOXED(10535886650742791,64,FLEN)
NAN_BOXED(4595959273555047756,64,FLEN)
NAN_BOXED(17966845794343921,64,FLEN)
NAN_BOXED(4595959273555047756,64,FLEN)
NAN_BOXED(17966845794343921,64,FLEN)
NAN_BOXED(4595959273555047756,64,FLEN)
NAN_BOXED(17966845794343921,64,FLEN)
NAN_BOXED(4595959273555047756,64,FLEN)
NAN_BOXED(17966845794343921,64,FLEN)
NAN_BOXED(4595959273555047756,64,FLEN)
NAN_BOXED(17966845794343921,64,FLEN)
NAN_BOXED(4596066224562028104,64,FLEN)
NAN_BOXED(15255219567197397,64,FLEN)
NAN_BOXED(4596066224562028104,64,FLEN)
NAN_BOXED(15255219567197397,64,FLEN)
NAN_BOXED(4596066224562028104,64,FLEN)
NAN_BOXED(15255219567197397,64,FLEN)
NAN_BOXED(4596066224562028104,64,FLEN)
NAN_BOXED(15255219567197397,64,FLEN)
NAN_BOXED(4596066224562028104,64,FLEN)
NAN_BOXED(15255219567197397,64,FLEN)
NAN_BOXED(4596278115718838876,64,FLEN)
NAN_BOXED(10208842210448259,64,FLEN)
NAN_BOXED(4596278115718838876,64,FLEN)
NAN_BOXED(10208842210448259,64,FLEN)
NAN_BOXED(4596278115718838876,64,FLEN)
NAN_BOXED(10208842210448259,64,FLEN)
NAN_BOXED(4596278115718838876,64,FLEN)
NAN_BOXED(10208842210448259,64,FLEN)
NAN_BOXED(4596278115718838876,64,FLEN)
NAN_BOXED(10208842210448259,64,FLEN)
NAN_BOXED(4596419821482040256,64,FLEN)
NAN_BOXED(10097357389900347,64,FLEN)
NAN_BOXED(4596419821482040256,64,FLEN)
NAN_BOXED(10097357389900347,64,FLEN)
NAN_BOXED(4596419821482040256,64,FLEN)
NAN_BOXED(10097357389900347,64,FLEN)
NAN_BOXED(4596419821482040256,64,FLEN)
NAN_BOXED(10097357389900347,64,FLEN)
NAN_BOXED(4596419821482040256,64,FLEN)
NAN_BOXED(10097357389900347,64,FLEN)
NAN_BOXED(4596448440638948996,64,FLEN)
NAN_BOXED(17364852508129559,64,FLEN)
NAN_BOXED(4596448440638948996,64,FLEN)
NAN_BOXED(17364852508129559,64,FLEN)
NAN_BOXED(4596448440638948996,64,FLEN)
NAN_BOXED(17364852508129559,64,FLEN)
NAN_BOXED(4596448440638948996,64,FLEN)
NAN_BOXED(17364852508129559,64,FLEN)
NAN_BOXED(4596448440638948996,64,FLEN)
NAN_BOXED(17364852508129559,64,FLEN)
NAN_BOXED(4596450705483292364,64,FLEN)
NAN_BOXED(14577235324355461,64,FLEN)
NAN_BOXED(4596450705483292364,64,FLEN)
NAN_BOXED(14577235324355461,64,FLEN)
NAN_BOXED(4596450705483292364,64,FLEN)
NAN_BOXED(14577235324355461,64,FLEN)
NAN_BOXED(4596450705483292364,64,FLEN)
NAN_BOXED(14577235324355461,64,FLEN)
NAN_BOXED(4596450705483292364,64,FLEN)
NAN_BOXED(14577235324355461,64,FLEN)
NAN_BOXED(4596550406000442040,64,FLEN)
NAN_BOXED(14845436662185394,64,FLEN)
NAN_BOXED(4596550406000442040,64,FLEN)
NAN_BOXED(14845436662185394,64,FLEN)
NAN_BOXED(4596550406000442040,64,FLEN)
NAN_BOXED(14845436662185394,64,FLEN)
NAN_BOXED(4596550406000442040,64,FLEN)
NAN_BOXED(14845436662185394,64,FLEN)
NAN_BOXED(4596550406000442040,64,FLEN)
NAN_BOXED(14845436662185394,64,FLEN)
NAN_BOXED(4596936694322253064,64,FLEN)
NAN_BOXED(14228787783450897,64,FLEN)
NAN_BOXED(4596936694322253064,64,FLEN)
NAN_BOXED(14228787783450897,64,FLEN)
NAN_BOXED(4596936694322253064,64,FLEN)
NAN_BOXED(14228787783450897,64,FLEN)
NAN_BOXED(4596936694322253064,64,FLEN)
NAN_BOXED(14228787783450897,64,FLEN)
NAN_BOXED(4596936694322253064,64,FLEN)
NAN_BOXED(14228787783450897,64,FLEN)
NAN_BOXED(4597137464105516952,64,FLEN)
NAN_BOXED(14415370942549007,64,FLEN)
NAN_BOXED(4597137464105516952,64,FLEN)
NAN_BOXED(14415370942549007,64,FLEN)
NAN_BOXED(4597137464105516952,64,FLEN)
NAN_BOXED(14415370942549007,64,FLEN)
NAN_BOXED(4597137464105516952,64,FLEN)
NAN_BOXED(14415370942549007,64,FLEN)
NAN_BOXED(4597137464105516952,64,FLEN)
NAN_BOXED(14415370942549007,64,FLEN)
NAN_BOXED(4597562703306599924,64,FLEN)
NAN_BOXED(1208050951110256,64,FLEN)
NAN_BOXED(4597562703306599924,64,FLEN)
NAN_BOXED(1208050951110256,64,FLEN)
NAN_BOXED(4597562703306599924,64,FLEN)
NAN_BOXED(1208050951110256,64,FLEN)
NAN_BOXED(4597562703306599924,64,FLEN)
NAN_BOXED(1208050951110256,64,FLEN)
NAN_BOXED(4597562703306599924,64,FLEN)
NAN_BOXED(1208050951110256,64,FLEN)
NAN_BOXED(4597599841941538824,64,FLEN)
NAN_BOXED(9314519602471732,64,FLEN)
NAN_BOXED(4597599841941538824,64,FLEN)
NAN_BOXED(9314519602471732,64,FLEN)
NAN_BOXED(4597599841941538824,64,FLEN)
NAN_BOXED(9314519602471732,64,FLEN)
NAN_BOXED(4597599841941538824,64,FLEN)
NAN_BOXED(9314519602471732,64,FLEN)
NAN_BOXED(4597599841941538824,64,FLEN)
NAN_BOXED(9314519602471732,64,FLEN)
NAN_BOXED(4597622015815147808,64,FLEN)
NAN_BOXED(16204651469354609,64,FLEN)
NAN_BOXED(4597622015815147808,64,FLEN)
NAN_BOXED(16204651469354609,64,FLEN)
NAN_BOXED(4597622015815147808,64,FLEN)
NAN_BOXED(16204651469354609,64,FLEN)
NAN_BOXED(4597622015815147808,64,FLEN)
NAN_BOXED(16204651469354609,64,FLEN)
NAN_BOXED(4597622015815147808,64,FLEN)
NAN_BOXED(16204651469354609,64,FLEN)
NAN_BOXED(4597710971063763560,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4597710971063763560,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4597710971063763560,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4597710971063763560,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4597710971063763560,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4597756965746284340,64,FLEN)
NAN_BOXED(1180727582224653,64,FLEN)
NAN_BOXED(4597756965746284340,64,FLEN)
NAN_BOXED(1180727582224653,64,FLEN)
NAN_BOXED(4597756965746284340,64,FLEN)
NAN_BOXED(1180727582224653,64,FLEN)
NAN_BOXED(4597756965746284340,64,FLEN)
NAN_BOXED(1180727582224653,64,FLEN)
NAN_BOXED(4597756965746284340,64,FLEN)
NAN_BOXED(1180727582224653,64,FLEN)
NAN_BOXED(4597758692905085020,64,FLEN)
NAN_BOXED(14024282589375729,64,FLEN)
NAN_BOXED(4597758692905085020,64,FLEN)
NAN_BOXED(14024282589375729,64,FLEN)
NAN_BOXED(4597758692905085020,64,FLEN)
NAN_BOXED(14024282589375729,64,FLEN)
NAN_BOXED(4597758692905085020,64,FLEN)
NAN_BOXED(14024282589375729,64,FLEN)
NAN_BOXED(4597758692905085020,64,FLEN)
NAN_BOXED(14024282589375729,64,FLEN)
NAN_BOXED(4598030957660481728,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4598030957660481728,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4598030957660481728,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4598030957660481728,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4598030957660481728,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4598046218230898984,64,FLEN)
NAN_BOXED(9072637114457910,64,FLEN)
NAN_BOXED(4598046218230898984,64,FLEN)
NAN_BOXED(9072637114457910,64,FLEN)
NAN_BOXED(4598046218230898984,64,FLEN)
NAN_BOXED(9072637114457910,64,FLEN)
NAN_BOXED(4598046218230898984,64,FLEN)
NAN_BOXED(9072637114457910,64,FLEN)
NAN_BOXED(4598046218230898984,64,FLEN)
NAN_BOXED(9072637114457910,64,FLEN)
NAN_BOXED(4598047882363065308,64,FLEN)
NAN_BOXED(13860891807138996,64,FLEN)
NAN_BOXED(4598047882363065308,64,FLEN)
NAN_BOXED(13860891807138996,64,FLEN)
NAN_BOXED(4598047882363065308,64,FLEN)
NAN_BOXED(13860891807138996,64,FLEN)
NAN_BOXED(4598047882363065308,64,FLEN)
NAN_BOXED(13860891807138996,64,FLEN)
NAN_BOXED(4598047882363065308,64,FLEN)
NAN_BOXED(13860891807138996,64,FLEN)
NAN_BOXED(4598254253129353684,64,FLEN)
NAN_BOXED(1106482270552697,64,FLEN)
NAN_BOXED(4598254253129353684,64,FLEN)
NAN_BOXED(1106482270552697,64,FLEN)
NAN_BOXED(4598254253129353684,64,FLEN)
NAN_BOXED(1106482270552697,64,FLEN)
NAN_BOXED(4598254253129353684,64,FLEN)
NAN_BOXED(1106482270552697,64,FLEN)
NAN_BOXED(4598254253129353684,64,FLEN)
NAN_BOXED(1106482270552697,64,FLEN)
NAN_BOXED(4598269205629278004,64,FLEN)
NAN_BOXED(8823069705251313,64,FLEN)
NAN_BOXED(4598269205629278004,64,FLEN)
NAN_BOXED(8823069705251313,64,FLEN)
NAN_BOXED(4598269205629278004,64,FLEN)
NAN_BOXED(8823069705251313,64,FLEN)
NAN_BOXED(4598269205629278004,64,FLEN)
NAN_BOXED(8823069705251313,64,FLEN)
NAN_BOXED(4598269205629278004,64,FLEN)
NAN_BOXED(8823069705251313,64,FLEN)
NAN_BOXED(4598278879933693892,64,FLEN)
NAN_BOXED(1100567882762679,64,FLEN)
NAN_BOXED(4598278879933693892,64,FLEN)
NAN_BOXED(1100567882762679,64,FLEN)
NAN_BOXED(4598278879933693892,64,FLEN)
NAN_BOXED(1100567882762679,64,FLEN)
NAN_BOXED(4598278879933693892,64,FLEN)
NAN_BOXED(1100567882762679,64,FLEN)
NAN_BOXED(4598278879933693892,64,FLEN)
NAN_BOXED(1100567882762679,64,FLEN)
NAN_BOXED(4598309248375323242,64,FLEN)
NAN_BOXED(13653983791655156,64,FLEN)
NAN_BOXED(4598309248375323242,64,FLEN)
NAN_BOXED(13653983791655156,64,FLEN)
NAN_BOXED(4598309248375323242,64,FLEN)
NAN_BOXED(13653983791655156,64,FLEN)
NAN_BOXED(4598309248375323242,64,FLEN)
NAN_BOXED(13653983791655156,64,FLEN)
NAN_BOXED(4598309248375323242,64,FLEN)
NAN_BOXED(13653983791655156,64,FLEN)
NAN_BOXED(4598456213683571984,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4598456213683571984,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4598456213683571984,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4598456213683571984,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4598456213683571984,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(4598545169832354784,64,FLEN)
NAN_BOXED(1040433049814436,64,FLEN)
NAN_BOXED(4598545169832354784,64,FLEN)
NAN_BOXED(1040433049814436,64,FLEN)
NAN_BOXED(4598545169832354784,64,FLEN)
NAN_BOXED(1040433049814436,64,FLEN)
NAN_BOXED(4598545169832354784,64,FLEN)
NAN_BOXED(1040433049814436,64,FLEN)
NAN_BOXED(4598545169832354784,64,FLEN)
NAN_BOXED(1040433049814436,64,FLEN)
NAN_BOXED(4598647684005952444,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4598647684005952444,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4598647684005952444,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4598647684005952444,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4598647684005952444,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4598647743111242834,64,FLEN)
NAN_BOXED(8151892071647289,64,FLEN)
NAN_BOXED(4598647743111242834,64,FLEN)
NAN_BOXED(8151892071647289,64,FLEN)
NAN_BOXED(4598647743111242834,64,FLEN)
NAN_BOXED(8151892071647289,64,FLEN)
NAN_BOXED(4598647743111242834,64,FLEN)
NAN_BOXED(8151892071647289,64,FLEN)
NAN_BOXED(4598647743111242834,64,FLEN)
NAN_BOXED(8151892071647289,64,FLEN)
NAN_BOXED(4598652271802876844,64,FLEN)
NAN_BOXED(8144479908284171,64,FLEN)
NAN_BOXED(4598652271802876844,64,FLEN)
NAN_BOXED(8144479908284171,64,FLEN)
NAN_BOXED(4598652271802876844,64,FLEN)
NAN_BOXED(8144479908284171,64,FLEN)
NAN_BOXED(4598652271802876844,64,FLEN)
NAN_BOXED(8144479908284171,64,FLEN)
NAN_BOXED(4598652271802876844,64,FLEN)
NAN_BOXED(8144479908284171,64,FLEN)
NAN_BOXED(4598661390668806232,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4598661390668806232,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4598661390668806232,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4598661390668806232,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4598661390668806232,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4598759160007218250,64,FLEN)
NAN_BOXED(14987223759980771,64,FLEN)
NAN_BOXED(4598759160007218250,64,FLEN)
NAN_BOXED(14987223759980771,64,FLEN)
NAN_BOXED(4598759160007218250,64,FLEN)
NAN_BOXED(14987223759980771,64,FLEN)
NAN_BOXED(4598759160007218250,64,FLEN)
NAN_BOXED(14987223759980771,64,FLEN)
NAN_BOXED(4598759160007218250,64,FLEN)
NAN_BOXED(14987223759980771,64,FLEN)
NAN_BOXED(4598799151522839798,64,FLEN)
NAN_BOXED(988897347026358,64,FLEN)
NAN_BOXED(4598799151522839798,64,FLEN)
NAN_BOXED(988897347026358,64,FLEN)
NAN_BOXED(4598799151522839798,64,FLEN)
NAN_BOXED(988897347026358,64,FLEN)
NAN_BOXED(4598799151522839798,64,FLEN)
NAN_BOXED(988897347026358,64,FLEN)
NAN_BOXED(4598799151522839798,64,FLEN)
NAN_BOXED(988897347026358,64,FLEN)
NAN_BOXED(4598867396084567332,64,FLEN)
NAN_BOXED(975908553075926,64,FLEN)
NAN_BOXED(4598867396084567332,64,FLEN)
NAN_BOXED(975908553075926,64,FLEN)
NAN_BOXED(4598867396084567332,64,FLEN)
NAN_BOXED(975908553075926,64,FLEN)
NAN_BOXED(4598867396084567332,64,FLEN)
NAN_BOXED(975908553075926,64,FLEN)
NAN_BOXED(4598867396084567332,64,FLEN)
NAN_BOXED(975908553075926,64,FLEN)
NAN_BOXED(4598887507426699194,64,FLEN)
NAN_BOXED(972145659269793,64,FLEN)
NAN_BOXED(4598887507426699194,64,FLEN)
NAN_BOXED(972145659269793,64,FLEN)
NAN_BOXED(4598887507426699194,64,FLEN)
NAN_BOXED(972145659269793,64,FLEN)
NAN_BOXED(4598887507426699194,64,FLEN)
NAN_BOXED(972145659269793,64,FLEN)
NAN_BOXED(4598887507426699194,64,FLEN)
NAN_BOXED(972145659269793,64,FLEN)
NAN_BOXED(4598904833240404472,64,FLEN)
NAN_BOXED(7751417094523489,64,FLEN)
NAN_BOXED(4598904833240404472,64,FLEN)
NAN_BOXED(7751417094523489,64,FLEN)
NAN_BOXED(4598904833240404472,64,FLEN)
NAN_BOXED(7751417094523489,64,FLEN)
NAN_BOXED(4598904833240404472,64,FLEN)
NAN_BOXED(7751417094523489,64,FLEN)
NAN_BOXED(4598904833240404472,64,FLEN)
NAN_BOXED(7751417094523489,64,FLEN)
NAN_BOXED(4598978796162452192,64,FLEN)
NAN_BOXED(955423782302979,64,FLEN)
NAN_BOXED(4598978796162452192,64,FLEN)
NAN_BOXED(955423782302979,64,FLEN)
NAN_BOXED(4598978796162452192,64,FLEN)
NAN_BOXED(955423782302979,64,FLEN)
NAN_BOXED(4598978796162452192,64,FLEN)
NAN_BOXED(955423782302979,64,FLEN)
NAN_BOXED(4598978796162452192,64,FLEN)
NAN_BOXED(955423782302979,64,FLEN)
NAN_BOXED(4599017731170228794,64,FLEN)
NAN_BOXED(948465559655114,64,FLEN)
NAN_BOXED(4599017731170228794,64,FLEN)
NAN_BOXED(948465559655114,64,FLEN)
NAN_BOXED(4599017731170228794,64,FLEN)
NAN_BOXED(948465559655114,64,FLEN)
NAN_BOXED(4599017731170228794,64,FLEN)
NAN_BOXED(948465559655114,64,FLEN)
NAN_BOXED(4599017731170228794,64,FLEN)
NAN_BOXED(948465559655114,64,FLEN)
NAN_BOXED(4599083656153259438,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4599083656153259438,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4599083656153259438,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4599083656153259438,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4599083656153259438,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4599092945669303642,64,FLEN)
NAN_BOXED(14619039568456454,64,FLEN)
NAN_BOXED(4599092945669303642,64,FLEN)
NAN_BOXED(14619039568456454,64,FLEN)
NAN_BOXED(4599092945669303642,64,FLEN)
NAN_BOXED(14619039568456454,64,FLEN)
NAN_BOXED(4599092945669303642,64,FLEN)
NAN_BOXED(14619039568456454,64,FLEN)
NAN_BOXED(4599092945669303642,64,FLEN)
NAN_BOXED(14619039568456454,64,FLEN)
NAN_BOXED(4599208299423343484,64,FLEN)
NAN_BOXED(7326560832619033,64,FLEN)
NAN_BOXED(4599208299423343484,64,FLEN)
NAN_BOXED(7326560832619033,64,FLEN)
NAN_BOXED(4599208299423343484,64,FLEN)
NAN_BOXED(7326560832619033,64,FLEN)
NAN_BOXED(4599208299423343484,64,FLEN)
NAN_BOXED(7326560832619033,64,FLEN)
NAN_BOXED(4599208299423343484,64,FLEN)
NAN_BOXED(7326560832619033,64,FLEN)
NAN_BOXED(4599256384182460584,64,FLEN)
NAN_BOXED(12221046303017540,64,FLEN)
NAN_BOXED(4599256384182460584,64,FLEN)
NAN_BOXED(12221046303017540,64,FLEN)
NAN_BOXED(4599256384182460584,64,FLEN)
NAN_BOXED(12221046303017540,64,FLEN)
NAN_BOXED(4599256384182460584,64,FLEN)
NAN_BOXED(12221046303017540,64,FLEN)
NAN_BOXED(4599256384182460584,64,FLEN)
NAN_BOXED(12221046303017540,64,FLEN)
NAN_BOXED(4599402977886056112,64,FLEN)
NAN_BOXED(14315472542597900,64,FLEN)
NAN_BOXED(4599402977886056112,64,FLEN)
NAN_BOXED(14315472542597900,64,FLEN)
NAN_BOXED(4599402977886056112,64,FLEN)
NAN_BOXED(14315472542597900,64,FLEN)
NAN_BOXED(4599402977886056112,64,FLEN)
NAN_BOXED(14315472542597900,64,FLEN)
NAN_BOXED(4599402977886056112,64,FLEN)
NAN_BOXED(14315472542597900,64,FLEN)
NAN_BOXED(4599441106730483098,64,FLEN)
NAN_BOXED(14280391722943818,64,FLEN)
NAN_BOXED(4599441106730483098,64,FLEN)
NAN_BOXED(14280391722943818,64,FLEN)
NAN_BOXED(4599441106730483098,64,FLEN)
NAN_BOXED(14280391722943818,64,FLEN)
NAN_BOXED(4599441106730483098,64,FLEN)
NAN_BOXED(14280391722943818,64,FLEN)
NAN_BOXED(4599441106730483098,64,FLEN)
NAN_BOXED(14280391722943818,64,FLEN)
NAN_BOXED(4599526422212491974,64,FLEN)
NAN_BOXED(11432069141159838,64,FLEN)
NAN_BOXED(4599526422212491974,64,FLEN)
NAN_BOXED(11432069141159838,64,FLEN)
NAN_BOXED(4599526422212491974,64,FLEN)
NAN_BOXED(11432069141159838,64,FLEN)
NAN_BOXED(4599526422212491974,64,FLEN)
NAN_BOXED(11432069141159838,64,FLEN)
NAN_BOXED(4599526422212491974,64,FLEN)
NAN_BOXED(11432069141159838,64,FLEN)
NAN_BOXED(4599535672372844602,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599535672372844602,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599535672372844602,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599535672372844602,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599535672372844602,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599603179014533890,64,FLEN)
NAN_BOXED(854851535373811,64,FLEN)
NAN_BOXED(4599603179014533890,64,FLEN)
NAN_BOXED(854851535373811,64,FLEN)
NAN_BOXED(4599603179014533890,64,FLEN)
NAN_BOXED(854851535373811,64,FLEN)
NAN_BOXED(4599603179014533890,64,FLEN)
NAN_BOXED(854851535373811,64,FLEN)
NAN_BOXED(4599603179014533890,64,FLEN)
NAN_BOXED(854851535373811,64,FLEN)
NAN_BOXED(4599604519153380474,64,FLEN)
NAN_BOXED(11768196361131196,64,FLEN)
NAN_BOXED(4599604519153380474,64,FLEN)
NAN_BOXED(11768196361131196,64,FLEN)
NAN_BOXED(4599604519153380474,64,FLEN)
NAN_BOXED(11768196361131196,64,FLEN)
NAN_BOXED(4599604519153380474,64,FLEN)
NAN_BOXED(11768196361131196,64,FLEN)
NAN_BOXED(4599604519153380474,64,FLEN)
NAN_BOXED(11768196361131196,64,FLEN)
NAN_BOXED(4599620616300141678,64,FLEN)
NAN_BOXED(14121274377786145,64,FLEN)
NAN_BOXED(4599620616300141678,64,FLEN)
NAN_BOXED(14121274377786145,64,FLEN)
NAN_BOXED(4599620616300141678,64,FLEN)
NAN_BOXED(14121274377786145,64,FLEN)
NAN_BOXED(4599620616300141678,64,FLEN)
NAN_BOXED(14121274377786145,64,FLEN)
NAN_BOXED(4599620616300141678,64,FLEN)
NAN_BOXED(14121274377786145,64,FLEN)
NAN_BOXED(4599621228081928418,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599621228081928418,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599621228081928418,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599621228081928418,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599621228081928418,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599781590506157776,64,FLEN)
NAN_BOXED(6639118572076380,64,FLEN)
NAN_BOXED(4599781590506157776,64,FLEN)
NAN_BOXED(6639118572076380,64,FLEN)
NAN_BOXED(4599781590506157776,64,FLEN)
NAN_BOXED(6639118572076380,64,FLEN)
NAN_BOXED(4599781590506157776,64,FLEN)
NAN_BOXED(6639118572076380,64,FLEN)
NAN_BOXED(4599781590506157776,64,FLEN)
NAN_BOXED(6639118572076380,64,FLEN)
NAN_BOXED(4599811653561527374,64,FLEN)
NAN_BOXED(6606611878982773,64,FLEN)
NAN_BOXED(4599811653561527374,64,FLEN)
NAN_BOXED(6606611878982773,64,FLEN)
NAN_BOXED(4599811653561527374,64,FLEN)
NAN_BOXED(6606611878982773,64,FLEN)
NAN_BOXED(4599811653561527374,64,FLEN)
NAN_BOXED(6606611878982773,64,FLEN)
NAN_BOXED(4599811653561527374,64,FLEN)
NAN_BOXED(6606611878982773,64,FLEN)
NAN_BOXED(4599825301277112356,64,FLEN)
NAN_BOXED(11095559275494769,64,FLEN)
NAN_BOXED(4599825301277112356,64,FLEN)
NAN_BOXED(11095559275494769,64,FLEN)
NAN_BOXED(4599825301277112356,64,FLEN)
NAN_BOXED(11095559275494769,64,FLEN)
NAN_BOXED(4599825301277112356,64,FLEN)
NAN_BOXED(11095559275494769,64,FLEN)
NAN_BOXED(4599825301277112356,64,FLEN)
NAN_BOXED(11095559275494769,64,FLEN)
NAN_BOXED(4599915240364940084,64,FLEN)
NAN_BOXED(11000602376243933,64,FLEN)
NAN_BOXED(4599915240364940084,64,FLEN)
NAN_BOXED(11000602376243933,64,FLEN)
NAN_BOXED(4599915240364940084,64,FLEN)
NAN_BOXED(11000602376243933,64,FLEN)
NAN_BOXED(4599915240364940084,64,FLEN)
NAN_BOXED(11000602376243933,64,FLEN)
NAN_BOXED(4599915240364940084,64,FLEN)
NAN_BOXED(11000602376243933,64,FLEN)
NAN_BOXED(4599924238803784962,64,FLEN)
NAN_BOXED(6487652605680991,64,FLEN)
NAN_BOXED(4599924238803784962,64,FLEN)
NAN_BOXED(6487652605680991,64,FLEN)
NAN_BOXED(4599924238803784962,64,FLEN)
NAN_BOXED(6487652605680991,64,FLEN)
NAN_BOXED(4599924238803784962,64,FLEN)
NAN_BOXED(6487652605680991,64,FLEN)
NAN_BOXED(4599924238803784962,64,FLEN)
NAN_BOXED(6487652605680991,64,FLEN)
NAN_BOXED(4599951179849585446,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599951179849585446,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599951179849585446,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599951179849585446,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599951179849585446,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4599975127572332458,64,FLEN)
NAN_BOXED(804409652354775,64,FLEN)
NAN_BOXED(4599975127572332458,64,FLEN)
NAN_BOXED(804409652354775,64,FLEN)
NAN_BOXED(4599975127572332458,64,FLEN)
NAN_BOXED(804409652354775,64,FLEN)
NAN_BOXED(4599975127572332458,64,FLEN)
NAN_BOXED(804409652354775,64,FLEN)
NAN_BOXED(4599975127572332458,64,FLEN)
NAN_BOXED(804409652354775,64,FLEN)
NAN_BOXED(4600011209611349390,64,FLEN)
NAN_BOXED(799831321285199,64,FLEN)
NAN_BOXED(4600011209611349390,64,FLEN)
NAN_BOXED(799831321285199,64,FLEN)
NAN_BOXED(4600011209611349390,64,FLEN)
NAN_BOXED(799831321285199,64,FLEN)
NAN_BOXED(4600011209611349390,64,FLEN)
NAN_BOXED(799831321285199,64,FLEN)
NAN_BOXED(4600011209611349390,64,FLEN)
NAN_BOXED(799831321285199,64,FLEN)
NAN_BOXED(4600043163643128922,64,FLEN)
NAN_BOXED(10870160221896370,64,FLEN)
NAN_BOXED(4600043163643128922,64,FLEN)
NAN_BOXED(10870160221896370,64,FLEN)
NAN_BOXED(4600043163643128922,64,FLEN)
NAN_BOXED(10870160221896370,64,FLEN)
NAN_BOXED(4600043163643128922,64,FLEN)
NAN_BOXED(10870160221896370,64,FLEN)
NAN_BOXED(4600043163643128922,64,FLEN)
NAN_BOXED(10870160221896370,64,FLEN)
NAN_BOXED(4600138940414887084,64,FLEN)
NAN_BOXED(6272276010789685,64,FLEN)
NAN_BOXED(4600138940414887084,64,FLEN)
NAN_BOXED(6272276010789685,64,FLEN)
NAN_BOXED(4600138940414887084,64,FLEN)
NAN_BOXED(6272276010789685,64,FLEN)
NAN_BOXED(4600138940414887084,64,FLEN)
NAN_BOXED(6272276010789685,64,FLEN)
NAN_BOXED(4600138940414887084,64,FLEN)
NAN_BOXED(6272276010789685,64,FLEN)
NAN_BOXED(4600277240399309416,64,FLEN)
NAN_BOXED(10644554791461993,64,FLEN)
NAN_BOXED(4600277240399309416,64,FLEN)
NAN_BOXED(10644554791461993,64,FLEN)
NAN_BOXED(4600277240399309416,64,FLEN)
NAN_BOXED(10644554791461993,64,FLEN)
NAN_BOXED(4600277240399309416,64,FLEN)
NAN_BOXED(10644554791461993,64,FLEN)
NAN_BOXED(4600277240399309416,64,FLEN)
NAN_BOXED(10644554791461993,64,FLEN)
NAN_BOXED(4600388616585721060,64,FLEN)
NAN_BOXED(13536547103200398,64,FLEN)
NAN_BOXED(4600388616585721060,64,FLEN)
NAN_BOXED(13536547103200398,64,FLEN)
NAN_BOXED(4600388616585721060,64,FLEN)
NAN_BOXED(13536547103200398,64,FLEN)
NAN_BOXED(4600388616585721060,64,FLEN)
NAN_BOXED(13536547103200398,64,FLEN)
NAN_BOXED(4600388616585721060,64,FLEN)
NAN_BOXED(13536547103200398,64,FLEN)
NAN_BOXED(4600442078481798716,64,FLEN)
NAN_BOXED(5991443389615824,64,FLEN)
NAN_BOXED(4600442078481798716,64,FLEN)
NAN_BOXED(5991443389615824,64,FLEN)
NAN_BOXED(4600442078481798716,64,FLEN)
NAN_BOXED(5991443389615824,64,FLEN)
NAN_BOXED(4600442078481798716,64,FLEN)
NAN_BOXED(5991443389615824,64,FLEN)
NAN_BOXED(4600442078481798716,64,FLEN)
NAN_BOXED(5991443389615824,64,FLEN)
NAN_BOXED(4600458272778061190,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4600458272778061190,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4600458272778061190,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4600458272778061190,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4600458272778061190,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4600602849196006124,64,FLEN)
NAN_BOXED(5852471124490322,64,FLEN)
NAN_BOXED(4600602849196006124,64,FLEN)
NAN_BOXED(5852471124490322,64,FLEN)
NAN_BOXED(4600602849196006124,64,FLEN)
NAN_BOXED(5852471124490322,64,FLEN)
NAN_BOXED(4600602849196006124,64,FLEN)
NAN_BOXED(5852471124490322,64,FLEN)
NAN_BOXED(4600602849196006124,64,FLEN)
NAN_BOXED(5852471124490322,64,FLEN)
NAN_BOXED(4600686341022288864,64,FLEN)
NAN_BOXED(10647838260155190,64,FLEN)
NAN_BOXED(4600686341022288864,64,FLEN)
NAN_BOXED(10647838260155190,64,FLEN)
NAN_BOXED(4600686341022288864,64,FLEN)
NAN_BOXED(10647838260155190,64,FLEN)
NAN_BOXED(4600686341022288864,64,FLEN)
NAN_BOXED(10647838260155190,64,FLEN)
NAN_BOXED(4600686341022288864,64,FLEN)
NAN_BOXED(10647838260155190,64,FLEN)
NAN_BOXED(4600688041920655732,64,FLEN)
NAN_BOXED(5781410980041620,64,FLEN)
NAN_BOXED(4600688041920655732,64,FLEN)
NAN_BOXED(5781410980041620,64,FLEN)
NAN_BOXED(4600688041920655732,64,FLEN)
NAN_BOXED(5781410980041620,64,FLEN)
NAN_BOXED(4600688041920655732,64,FLEN)
NAN_BOXED(5781410980041620,64,FLEN)
NAN_BOXED(4600688041920655732,64,FLEN)
NAN_BOXED(5781410980041620,64,FLEN)
NAN_BOXED(4600690460713240116,64,FLEN)
NAN_BOXED(10644231914743475,64,FLEN)
NAN_BOXED(4600690460713240116,64,FLEN)
NAN_BOXED(10644231914743475,64,FLEN)
NAN_BOXED(4600690460713240116,64,FLEN)
NAN_BOXED(10644231914743475,64,FLEN)
NAN_BOXED(4600690460713240116,64,FLEN)
NAN_BOXED(10644231914743475,64,FLEN)
NAN_BOXED(4600690460713240116,64,FLEN)
NAN_BOXED(10644231914743475,64,FLEN)
NAN_BOXED(4600767888905472572,64,FLEN)
NAN_BOXED(5716358734199171,64,FLEN)
NAN_BOXED(4600767888905472572,64,FLEN)
NAN_BOXED(5716358734199171,64,FLEN)
NAN_BOXED(4600767888905472572,64,FLEN)
NAN_BOXED(5716358734199171,64,FLEN)
NAN_BOXED(4600767888905472572,64,FLEN)
NAN_BOXED(5716358734199171,64,FLEN)
NAN_BOXED(4600767888905472572,64,FLEN)
NAN_BOXED(5716358734199171,64,FLEN)
NAN_BOXED(4600770298752360506,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4600770298752360506,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4600770298752360506,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4600770298752360506,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4600770298752360506,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4600921765756440330,64,FLEN)
NAN_BOXED(12896152020944837,64,FLEN)
NAN_BOXED(4600921765756440330,64,FLEN)
NAN_BOXED(12896152020944837,64,FLEN)
NAN_BOXED(4600921765756440330,64,FLEN)
NAN_BOXED(12896152020944837,64,FLEN)
NAN_BOXED(4600921765756440330,64,FLEN)
NAN_BOXED(12896152020944837,64,FLEN)
NAN_BOXED(4600921765756440330,64,FLEN)
NAN_BOXED(12896152020944837,64,FLEN)
NAN_BOXED(4600964493796645356,64,FLEN)
NAN_BOXED(695281789486995,64,FLEN)
NAN_BOXED(4600964493796645356,64,FLEN)
NAN_BOXED(695281789486995,64,FLEN)
NAN_BOXED(4600964493796645356,64,FLEN)
NAN_BOXED(695281789486995,64,FLEN)
NAN_BOXED(4600964493796645356,64,FLEN)
NAN_BOXED(695281789486995,64,FLEN)
NAN_BOXED(4600964493796645356,64,FLEN)
NAN_BOXED(695281789486995,64,FLEN)
NAN_BOXED(4601148393371231184,64,FLEN)
NAN_BOXED(5425444472877844,64,FLEN)
NAN_BOXED(4601148393371231184,64,FLEN)
NAN_BOXED(5425444472877844,64,FLEN)
NAN_BOXED(4601148393371231184,64,FLEN)
NAN_BOXED(5425444472877844,64,FLEN)
NAN_BOXED(4601148393371231184,64,FLEN)
NAN_BOXED(5425444472877844,64,FLEN)
NAN_BOXED(4601148393371231184,64,FLEN)
NAN_BOXED(5425444472877844,64,FLEN)
NAN_BOXED(4601215977647820494,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4601215977647820494,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4601215977647820494,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4601215977647820494,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4601215977647820494,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4601218278285962758,64,FLEN)
NAN_BOXED(5375202802210360,64,FLEN)
NAN_BOXED(4601218278285962758,64,FLEN)
NAN_BOXED(5375202802210360,64,FLEN)
NAN_BOXED(4601218278285962758,64,FLEN)
NAN_BOXED(5375202802210360,64,FLEN)
NAN_BOXED(4601218278285962758,64,FLEN)
NAN_BOXED(5375202802210360,64,FLEN)
NAN_BOXED(4601218278285962758,64,FLEN)
NAN_BOXED(5375202802210360,64,FLEN)
NAN_BOXED(4601241578155010694,64,FLEN)
NAN_BOXED(12541587011859265,64,FLEN)
NAN_BOXED(4601241578155010694,64,FLEN)
NAN_BOXED(12541587011859265,64,FLEN)
NAN_BOXED(4601241578155010694,64,FLEN)
NAN_BOXED(12541587011859265,64,FLEN)
NAN_BOXED(4601241578155010694,64,FLEN)
NAN_BOXED(12541587011859265,64,FLEN)
NAN_BOXED(4601241578155010694,64,FLEN)
NAN_BOXED(12541587011859265,64,FLEN)
NAN_BOXED(4601355834527263142,64,FLEN)
NAN_BOXED(659872564560904,64,FLEN)
NAN_BOXED(4601355834527263142,64,FLEN)
NAN_BOXED(659872564560904,64,FLEN)
NAN_BOXED(4601355834527263142,64,FLEN)
NAN_BOXED(659872564560904,64,FLEN)
NAN_BOXED(4601355834527263142,64,FLEN)
NAN_BOXED(659872564560904,64,FLEN)
NAN_BOXED(4601355834527263142,64,FLEN)
NAN_BOXED(659872564560904,64,FLEN)
NAN_BOXED(4601459153052984090,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4601459153052984090,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4601459153052984090,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4601459153052984090,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4601459153052984090,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4601488164289022208,64,FLEN)
NAN_BOXED(9693209931023165,64,FLEN)
NAN_BOXED(4601488164289022208,64,FLEN)
NAN_BOXED(9693209931023165,64,FLEN)
NAN_BOXED(4601488164289022208,64,FLEN)
NAN_BOXED(9693209931023165,64,FLEN)
NAN_BOXED(4601488164289022208,64,FLEN)
NAN_BOXED(9693209931023165,64,FLEN)
NAN_BOXED(4601488164289022208,64,FLEN)
NAN_BOXED(9693209931023165,64,FLEN)
NAN_BOXED(4601620174557268936,64,FLEN)
NAN_BOXED(12158730852062084,64,FLEN)
NAN_BOXED(4601620174557268936,64,FLEN)
NAN_BOXED(12158730852062084,64,FLEN)
NAN_BOXED(4601620174557268936,64,FLEN)
NAN_BOXED(12158730852062084,64,FLEN)
NAN_BOXED(4601620174557268936,64,FLEN)
NAN_BOXED(12158730852062084,64,FLEN)
NAN_BOXED(4601620174557268936,64,FLEN)
NAN_BOXED(12158730852062084,64,FLEN)
NAN_BOXED(4601909849258710552,64,FLEN)
NAN_BOXED(9735320986993411,64,FLEN)
NAN_BOXED(4601909849258710552,64,FLEN)
NAN_BOXED(9735320986993411,64,FLEN)
NAN_BOXED(4601909849258710552,64,FLEN)
NAN_BOXED(9735320986993411,64,FLEN)
NAN_BOXED(4601909849258710552,64,FLEN)
NAN_BOXED(9735320986993411,64,FLEN)
NAN_BOXED(4601909849258710552,64,FLEN)
NAN_BOXED(9735320986993411,64,FLEN)
NAN_BOXED(4601983708422913414,64,FLEN)
NAN_BOXED(11823929382557595,64,FLEN)
NAN_BOXED(4601983708422913414,64,FLEN)
NAN_BOXED(11823929382557595,64,FLEN)
NAN_BOXED(4601983708422913414,64,FLEN)
NAN_BOXED(11823929382557595,64,FLEN)
NAN_BOXED(4601983708422913414,64,FLEN)
NAN_BOXED(11823929382557595,64,FLEN)
NAN_BOXED(4601983708422913414,64,FLEN)
NAN_BOXED(11823929382557595,64,FLEN)
NAN_BOXED(4601994282473300336,64,FLEN)
NAN_BOXED(9377619081759028,64,FLEN)
NAN_BOXED(4601994282473300336,64,FLEN)
NAN_BOXED(9377619081759028,64,FLEN)
NAN_BOXED(4601994282473300336,64,FLEN)
NAN_BOXED(9377619081759028,64,FLEN)
NAN_BOXED(4601994282473300336,64,FLEN)
NAN_BOXED(9377619081759028,64,FLEN)
NAN_BOXED(4601994282473300336,64,FLEN)
NAN_BOXED(9377619081759028,64,FLEN)
NAN_BOXED(4602129992702688016,64,FLEN)
NAN_BOXED(9299417953122899,64,FLEN)
NAN_BOXED(4602129992702688016,64,FLEN)
NAN_BOXED(9299417953122899,64,FLEN)
NAN_BOXED(4602129992702688016,64,FLEN)
NAN_BOXED(9299417953122899,64,FLEN)
NAN_BOXED(4602129992702688016,64,FLEN)
NAN_BOXED(9299417953122899,64,FLEN)
NAN_BOXED(4602129992702688016,64,FLEN)
NAN_BOXED(9299417953122899,64,FLEN)
NAN_BOXED(4602204973031414504,64,FLEN)
NAN_BOXED(4753678731879489,64,FLEN)
NAN_BOXED(4602204973031414504,64,FLEN)
NAN_BOXED(4753678731879489,64,FLEN)
NAN_BOXED(4602204973031414504,64,FLEN)
NAN_BOXED(4753678731879489,64,FLEN)
NAN_BOXED(4602204973031414504,64,FLEN)
NAN_BOXED(4753678731879489,64,FLEN)
NAN_BOXED(4602204973031414504,64,FLEN)
NAN_BOXED(4753678731879489,64,FLEN)
NAN_BOXED(4602214898526527666,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602214898526527666,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602214898526527666,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602214898526527666,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602214898526527666,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602232660325104406,64,FLEN)
NAN_BOXED(11611056889199570,64,FLEN)
NAN_BOXED(4602232660325104406,64,FLEN)
NAN_BOXED(11611056889199570,64,FLEN)
NAN_BOXED(4602232660325104406,64,FLEN)
NAN_BOXED(11611056889199570,64,FLEN)
NAN_BOXED(4602232660325104406,64,FLEN)
NAN_BOXED(11611056889199570,64,FLEN)
NAN_BOXED(4602232660325104406,64,FLEN)
NAN_BOXED(11611056889199570,64,FLEN)
NAN_BOXED(4602264666538949446,64,FLEN)
NAN_BOXED(9519296889178880,64,FLEN)
NAN_BOXED(4602264666538949446,64,FLEN)
NAN_BOXED(9519296889178880,64,FLEN)
NAN_BOXED(4602264666538949446,64,FLEN)
NAN_BOXED(9519296889178880,64,FLEN)
NAN_BOXED(4602264666538949446,64,FLEN)
NAN_BOXED(9519296889178880,64,FLEN)
NAN_BOXED(4602264666538949446,64,FLEN)
NAN_BOXED(9519296889178880,64,FLEN)
NAN_BOXED(4602305266047050392,64,FLEN)
NAN_BOXED(4698457476774420,64,FLEN)
NAN_BOXED(4602305266047050392,64,FLEN)
NAN_BOXED(4698457476774420,64,FLEN)
NAN_BOXED(4602305266047050392,64,FLEN)
NAN_BOXED(4698457476774420,64,FLEN)
NAN_BOXED(4602305266047050392,64,FLEN)
NAN_BOXED(4698457476774420,64,FLEN)
NAN_BOXED(4602305266047050392,64,FLEN)
NAN_BOXED(4698457476774420,64,FLEN)
NAN_BOXED(4602332768159960136,64,FLEN)
NAN_BOXED(4683538264631108,64,FLEN)
NAN_BOXED(4602332768159960136,64,FLEN)
NAN_BOXED(4683538264631108,64,FLEN)
NAN_BOXED(4602332768159960136,64,FLEN)
NAN_BOXED(4683538264631108,64,FLEN)
NAN_BOXED(4602332768159960136,64,FLEN)
NAN_BOXED(4683538264631108,64,FLEN)
NAN_BOXED(4602332768159960136,64,FLEN)
NAN_BOXED(4683538264631108,64,FLEN)
NAN_BOXED(4602412157494122006,64,FLEN)
NAN_BOXED(4640998205612026,64,FLEN)
NAN_BOXED(4602412157494122006,64,FLEN)
NAN_BOXED(4640998205612026,64,FLEN)
NAN_BOXED(4602412157494122006,64,FLEN)
NAN_BOXED(4640998205612026,64,FLEN)
NAN_BOXED(4602412157494122006,64,FLEN)
NAN_BOXED(4640998205612026,64,FLEN)
NAN_BOXED(4602412157494122006,64,FLEN)
NAN_BOXED(4640998205612026,64,FLEN)
NAN_BOXED(4602464598100096242,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602464598100096242,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602464598100096242,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602464598100096242,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602464598100096242,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602494642739436062,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602494642739436062,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602494642739436062,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602494642739436062,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602494642739436062,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602530034940065676,64,FLEN)
NAN_BOXED(4579241219318408,64,FLEN)
NAN_BOXED(4602530034940065676,64,FLEN)
NAN_BOXED(4579241219318408,64,FLEN)
NAN_BOXED(4602530034940065676,64,FLEN)
NAN_BOXED(4579241219318408,64,FLEN)
NAN_BOXED(4602530034940065676,64,FLEN)
NAN_BOXED(4579241219318408,64,FLEN)
NAN_BOXED(4602530034940065676,64,FLEN)
NAN_BOXED(4579241219318408,64,FLEN)
NAN_BOXED(4602602279290315574,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602602279290315574,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602602279290315574,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602602279290315574,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602602279290315574,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602626564659692388,64,FLEN)
NAN_BOXED(9033478970792427,64,FLEN)
NAN_BOXED(4602626564659692388,64,FLEN)
NAN_BOXED(9033478970792427,64,FLEN)
NAN_BOXED(4602626564659692388,64,FLEN)
NAN_BOXED(9033478970792427,64,FLEN)
NAN_BOXED(4602626564659692388,64,FLEN)
NAN_BOXED(9033478970792427,64,FLEN)
NAN_BOXED(4602626564659692388,64,FLEN)
NAN_BOXED(9033478970792427,64,FLEN)
NAN_BOXED(4602639927768361700,64,FLEN)
NAN_BOXED(11288294112168170,64,FLEN)
NAN_BOXED(4602639927768361700,64,FLEN)
NAN_BOXED(11288294112168170,64,FLEN)
NAN_BOXED(4602639927768361700,64,FLEN)
NAN_BOXED(11288294112168170,64,FLEN)
NAN_BOXED(4602639927768361700,64,FLEN)
NAN_BOXED(11288294112168170,64,FLEN)
NAN_BOXED(4602639927768361700,64,FLEN)
NAN_BOXED(11288294112168170,64,FLEN)
NAN_BOXED(4602663667935246862,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602663667935246862,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602663667935246862,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602663667935246862,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602663667935246862,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602768765768315654,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602768765768315654,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602768765768315654,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602768765768315654,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602768765768315654,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602779794619048067,64,FLEN)
NAN_BOXED(550604813655426,64,FLEN)
NAN_BOXED(4602779794619048067,64,FLEN)
NAN_BOXED(550604813655426,64,FLEN)
NAN_BOXED(4602779794619048067,64,FLEN)
NAN_BOXED(550604813655426,64,FLEN)
NAN_BOXED(4602779794619048067,64,FLEN)
NAN_BOXED(550604813655426,64,FLEN)
NAN_BOXED(4602779794619048067,64,FLEN)
NAN_BOXED(550604813655426,64,FLEN)
NAN_BOXED(4602810115951561134,64,FLEN)
NAN_BOXED(8752044415124193,64,FLEN)
NAN_BOXED(4602810115951561134,64,FLEN)
NAN_BOXED(8752044415124193,64,FLEN)
NAN_BOXED(4602810115951561134,64,FLEN)
NAN_BOXED(8752044415124193,64,FLEN)
NAN_BOXED(4602810115951561134,64,FLEN)
NAN_BOXED(8752044415124193,64,FLEN)
NAN_BOXED(4602810115951561134,64,FLEN)
NAN_BOXED(8752044415124193,64,FLEN)
NAN_BOXED(4602813923078233577,64,FLEN)
NAN_BOXED(8744861343066561,64,FLEN)
NAN_BOXED(4602813923078233577,64,FLEN)
NAN_BOXED(8744861343066561,64,FLEN)
NAN_BOXED(4602813923078233577,64,FLEN)
NAN_BOXED(8744861343066561,64,FLEN)
NAN_BOXED(4602813923078233577,64,FLEN)
NAN_BOXED(8744861343066561,64,FLEN)
NAN_BOXED(4602813923078233577,64,FLEN)
NAN_BOXED(8744861343066561,64,FLEN)
NAN_BOXED(4602824857074127422,64,FLEN)
NAN_BOXED(8724297099633813,64,FLEN)
NAN_BOXED(4602824857074127422,64,FLEN)
NAN_BOXED(8724297099633813,64,FLEN)
NAN_BOXED(4602824857074127422,64,FLEN)
NAN_BOXED(8724297099633813,64,FLEN)
NAN_BOXED(4602824857074127422,64,FLEN)
NAN_BOXED(8724297099633813,64,FLEN)
NAN_BOXED(4602824857074127422,64,FLEN)
NAN_BOXED(8724297099633813,64,FLEN)
NAN_BOXED(4602836820532099486,64,FLEN)
NAN_BOXED(543869200221766,64,FLEN)
NAN_BOXED(4602836820532099486,64,FLEN)
NAN_BOXED(543869200221766,64,FLEN)
NAN_BOXED(4602836820532099486,64,FLEN)
NAN_BOXED(543869200221766,64,FLEN)
NAN_BOXED(4602836820532099486,64,FLEN)
NAN_BOXED(543869200221766,64,FLEN)
NAN_BOXED(4602836820532099486,64,FLEN)
NAN_BOXED(543869200221766,64,FLEN)
NAN_BOXED(4602889281288417954,64,FLEN)
NAN_BOXED(9075041703884017,64,FLEN)
NAN_BOXED(4602889281288417954,64,FLEN)
NAN_BOXED(9075041703884017,64,FLEN)
NAN_BOXED(4602889281288417954,64,FLEN)
NAN_BOXED(9075041703884017,64,FLEN)
NAN_BOXED(4602889281288417954,64,FLEN)
NAN_BOXED(9075041703884017,64,FLEN)
NAN_BOXED(4602889281288417954,64,FLEN)
NAN_BOXED(9075041703884017,64,FLEN)
NAN_BOXED(4602914867455354649,64,FLEN)
NAN_BOXED(9050363566956927,64,FLEN)
NAN_BOXED(4602914867455354649,64,FLEN)
NAN_BOXED(9050363566956927,64,FLEN)
NAN_BOXED(4602914867455354649,64,FLEN)
NAN_BOXED(9050363566956927,64,FLEN)
NAN_BOXED(4602914867455354649,64,FLEN)
NAN_BOXED(9050363566956927,64,FLEN)
NAN_BOXED(4602914867455354649,64,FLEN)
NAN_BOXED(9050363566956927,64,FLEN)
NAN_BOXED(4602923996154500967,64,FLEN)
NAN_BOXED(10910221144663876,64,FLEN)
NAN_BOXED(4602923996154500967,64,FLEN)
NAN_BOXED(10910221144663876,64,FLEN)
NAN_BOXED(4602923996154500967,64,FLEN)
NAN_BOXED(10910221144663876,64,FLEN)
NAN_BOXED(4602923996154500967,64,FLEN)
NAN_BOXED(10910221144663876,64,FLEN)
NAN_BOXED(4602923996154500967,64,FLEN)
NAN_BOXED(10910221144663876,64,FLEN)
NAN_BOXED(4602923999530988676,64,FLEN)
NAN_BOXED(4271077974695758,64,FLEN)
NAN_BOXED(4602923999530988676,64,FLEN)
NAN_BOXED(4271077974695758,64,FLEN)
NAN_BOXED(4602923999530988676,64,FLEN)
NAN_BOXED(4271077974695758,64,FLEN)
NAN_BOXED(4602923999530988676,64,FLEN)
NAN_BOXED(4271077974695758,64,FLEN)
NAN_BOXED(4602923999530988676,64,FLEN)
NAN_BOXED(4271077974695758,64,FLEN)
NAN_BOXED(4602995027151800837,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602995027151800837,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602995027151800837,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602995027151800837,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602995027151800837,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4602997163378350898,64,FLEN)
NAN_BOXED(8412544942780709,64,FLEN)
NAN_BOXED(4602997163378350898,64,FLEN)
NAN_BOXED(8412544942780709,64,FLEN)
NAN_BOXED(4602997163378350898,64,FLEN)
NAN_BOXED(8412544942780709,64,FLEN)
NAN_BOXED(4602997163378350898,64,FLEN)
NAN_BOXED(8412544942780709,64,FLEN)
NAN_BOXED(4602997163378350898,64,FLEN)
NAN_BOXED(8412544942780709,64,FLEN)
NAN_BOXED(4603026436735983365,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603026436735983365,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603026436735983365,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603026436735983365,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603026436735983365,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603061280939522511,64,FLEN)
NAN_BOXED(8302150942080496,64,FLEN)
NAN_BOXED(4603061280939522511,64,FLEN)
NAN_BOXED(8302150942080496,64,FLEN)
NAN_BOXED(4603061280939522511,64,FLEN)
NAN_BOXED(8302150942080496,64,FLEN)
NAN_BOXED(4603061280939522511,64,FLEN)
NAN_BOXED(8302150942080496,64,FLEN)
NAN_BOXED(4603061280939522511,64,FLEN)
NAN_BOXED(8302150942080496,64,FLEN)
NAN_BOXED(4603062704197638219,64,FLEN)
NAN_BOXED(8299733317362137,64,FLEN)
NAN_BOXED(4603062704197638219,64,FLEN)
NAN_BOXED(8299733317362137,64,FLEN)
NAN_BOXED(4603062704197638219,64,FLEN)
NAN_BOXED(8299733317362137,64,FLEN)
NAN_BOXED(4603062704197638219,64,FLEN)
NAN_BOXED(8299733317362137,64,FLEN)
NAN_BOXED(4603062704197638219,64,FLEN)
NAN_BOXED(8299733317362137,64,FLEN)
NAN_BOXED(4603087960363141129,64,FLEN)
NAN_BOXED(10696398216468650,64,FLEN)
NAN_BOXED(4603087960363141129,64,FLEN)
NAN_BOXED(10696398216468650,64,FLEN)
NAN_BOXED(4603087960363141129,64,FLEN)
NAN_BOXED(10696398216468650,64,FLEN)
NAN_BOXED(4603087960363141129,64,FLEN)
NAN_BOXED(10696398216468650,64,FLEN)
NAN_BOXED(4603087960363141129,64,FLEN)
NAN_BOXED(10696398216468650,64,FLEN)
NAN_BOXED(4603175528482857491,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603175528482857491,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603175528482857491,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603175528482857491,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603175528482857491,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603194026658541005,64,FLEN)
NAN_BOXED(8082561909998792,64,FLEN)
NAN_BOXED(4603194026658541005,64,FLEN)
NAN_BOXED(8082561909998792,64,FLEN)
NAN_BOXED(4603194026658541005,64,FLEN)
NAN_BOXED(8082561909998792,64,FLEN)
NAN_BOXED(4603194026658541005,64,FLEN)
NAN_BOXED(8082561909998792,64,FLEN)
NAN_BOXED(4603194026658541005,64,FLEN)
NAN_BOXED(8082561909998792,64,FLEN)
NAN_BOXED(4603201155924081287,64,FLEN)
NAN_BOXED(8071096836476342,64,FLEN)
NAN_BOXED(4603201155924081287,64,FLEN)
NAN_BOXED(8071096836476342,64,FLEN)
NAN_BOXED(4603201155924081287,64,FLEN)
NAN_BOXED(8071096836476342,64,FLEN)
NAN_BOXED(4603201155924081287,64,FLEN)
NAN_BOXED(8071096836476342,64,FLEN)
NAN_BOXED(4603201155924081287,64,FLEN)
NAN_BOXED(8071096836476342,64,FLEN)
NAN_BOXED(4603201268390395631,64,FLEN)
NAN_BOXED(8070916232080746,64,FLEN)
NAN_BOXED(4603201268390395631,64,FLEN)
NAN_BOXED(8070916232080746,64,FLEN)
NAN_BOXED(4603201268390395631,64,FLEN)
NAN_BOXED(8070916232080746,64,FLEN)
NAN_BOXED(4603201268390395631,64,FLEN)
NAN_BOXED(8070916232080746,64,FLEN)
NAN_BOXED(4603201268390395631,64,FLEN)
NAN_BOXED(8070916232080746,64,FLEN)
NAN_BOXED(4603208593274036465,64,FLEN)
NAN_BOXED(503698182785450,64,FLEN)
NAN_BOXED(4603208593274036465,64,FLEN)
NAN_BOXED(503698182785450,64,FLEN)
NAN_BOXED(4603208593274036465,64,FLEN)
NAN_BOXED(503698182785450,64,FLEN)
NAN_BOXED(4603208593274036465,64,FLEN)
NAN_BOXED(503698182785450,64,FLEN)
NAN_BOXED(4603208593274036465,64,FLEN)
NAN_BOXED(503698182785450,64,FLEN)
NAN_BOXED(4603229646904841256,64,FLEN)
NAN_BOXED(501600086438820,64,FLEN)
NAN_BOXED(4603229646904841256,64,FLEN)
NAN_BOXED(501600086438820,64,FLEN)
NAN_BOXED(4603229646904841256,64,FLEN)
NAN_BOXED(501600086438820,64,FLEN)
NAN_BOXED(4603229646904841256,64,FLEN)
NAN_BOXED(501600086438820,64,FLEN)
NAN_BOXED(4603229646904841256,64,FLEN)
NAN_BOXED(501600086438820,64,FLEN)
NAN_BOXED(4603269709600808923,64,FLEN)
NAN_BOXED(7962488642656361,64,FLEN)
NAN_BOXED(4603269709600808923,64,FLEN)
NAN_BOXED(7962488642656361,64,FLEN)
NAN_BOXED(4603269709600808923,64,FLEN)
NAN_BOXED(7962488642656361,64,FLEN)
NAN_BOXED(4603269709600808923,64,FLEN)
NAN_BOXED(7962488642656361,64,FLEN)
NAN_BOXED(4603269709600808923,64,FLEN)
NAN_BOXED(7962488642656361,64,FLEN)
NAN_BOXED(4603275691420299210,64,FLEN)
NAN_BOXED(3976575128857278,64,FLEN)
NAN_BOXED(4603275691420299210,64,FLEN)
NAN_BOXED(3976575128857278,64,FLEN)
NAN_BOXED(4603275691420299210,64,FLEN)
NAN_BOXED(3976575128857278,64,FLEN)
NAN_BOXED(4603275691420299210,64,FLEN)
NAN_BOXED(3976575128857278,64,FLEN)
NAN_BOXED(4603275691420299210,64,FLEN)
NAN_BOXED(3976575128857278,64,FLEN)
NAN_BOXED(4603301547008119766,64,FLEN)
NAN_BOXED(10438377424144886,64,FLEN)
NAN_BOXED(4603301547008119766,64,FLEN)
NAN_BOXED(10438377424144886,64,FLEN)
NAN_BOXED(4603301547008119766,64,FLEN)
NAN_BOXED(10438377424144886,64,FLEN)
NAN_BOXED(4603301547008119766,64,FLEN)
NAN_BOXED(10438377424144886,64,FLEN)
NAN_BOXED(4603301547008119766,64,FLEN)
NAN_BOXED(10438377424144886,64,FLEN)
NAN_BOXED(4603303291536946322,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603303291536946322,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603303291536946322,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603303291536946322,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603303291536946322,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4603330455523536839,64,FLEN)
NAN_BOXED(491791493376404,64,FLEN)
NAN_BOXED(4603330455523536839,64,FLEN)
NAN_BOXED(491791493376404,64,FLEN)
NAN_BOXED(4603330455523536839,64,FLEN)
NAN_BOXED(491791493376404,64,FLEN)
NAN_BOXED(4603330455523536839,64,FLEN)
NAN_BOXED(491791493376404,64,FLEN)
NAN_BOXED(4603330455523536839,64,FLEN)
NAN_BOXED(491791493376404,64,FLEN)
NAN_BOXED(4603372221088567996,64,FLEN)
NAN_BOXED(3902713792693160,64,FLEN)
NAN_BOXED(4603372221088567996,64,FLEN)
NAN_BOXED(3902713792693160,64,FLEN)
NAN_BOXED(4603372221088567996,64,FLEN)
NAN_BOXED(3902713792693160,64,FLEN)
NAN_BOXED(4603372221088567996,64,FLEN)
NAN_BOXED(3902713792693160,64,FLEN)
NAN_BOXED(4603372221088567996,64,FLEN)
NAN_BOXED(3902713792693160,64,FLEN)
NAN_BOXED(4603373115272624925,64,FLEN)
NAN_BOXED(3902042416306397,64,FLEN)
NAN_BOXED(4603373115272624925,64,FLEN)
NAN_BOXED(3902042416306397,64,FLEN)
NAN_BOXED(4603373115272624925,64,FLEN)
NAN_BOXED(3902042416306397,64,FLEN)
NAN_BOXED(4603373115272624925,64,FLEN)
NAN_BOXED(3902042416306397,64,FLEN)
NAN_BOXED(4603373115272624925,64,FLEN)
NAN_BOXED(3902042416306397,64,FLEN)
NAN_BOXED(4603417261897208706,64,FLEN)
NAN_BOXED(3869180796712813,64,FLEN)
NAN_BOXED(4603417261897208706,64,FLEN)
NAN_BOXED(3869180796712813,64,FLEN)
NAN_BOXED(4603417261897208706,64,FLEN)
NAN_BOXED(3869180796712813,64,FLEN)
NAN_BOXED(4603417261897208706,64,FLEN)
NAN_BOXED(3869180796712813,64,FLEN)
NAN_BOXED(4603417261897208706,64,FLEN)
NAN_BOXED(3869180796712813,64,FLEN)
NAN_BOXED(4603483392870410494,64,FLEN)
NAN_BOXED(3820977266815111,64,FLEN)
NAN_BOXED(4603483392870410494,64,FLEN)
NAN_BOXED(3820977266815111,64,FLEN)
NAN_BOXED(4603483392870410494,64,FLEN)
NAN_BOXED(3820977266815111,64,FLEN)
NAN_BOXED(4603483392870410494,64,FLEN)
NAN_BOXED(3820977266815111,64,FLEN)
NAN_BOXED(4603483392870410494,64,FLEN)
NAN_BOXED(3820977266815111,64,FLEN)
NAN_BOXED(4603500938514918185,64,FLEN)
NAN_BOXED(3808389011749896,64,FLEN)
NAN_BOXED(4603500938514918185,64,FLEN)
NAN_BOXED(3808389011749896,64,FLEN)
NAN_BOXED(4603500938514918185,64,FLEN)
NAN_BOXED(3808389011749896,64,FLEN)
NAN_BOXED(4603500938514918185,64,FLEN)
NAN_BOXED(3808389011749896,64,FLEN)
NAN_BOXED(4603500938514918185,64,FLEN)
NAN_BOXED(3808389011749896,64,FLEN)
NAN_BOXED(4603555004525846118,64,FLEN)
NAN_BOXED(471264411052350,64,FLEN)
NAN_BOXED(4603555004525846118,64,FLEN)
NAN_BOXED(471264411052350,64,FLEN)
NAN_BOXED(4603555004525846118,64,FLEN)
NAN_BOXED(471264411052350,64,FLEN)
NAN_BOXED(4603555004525846118,64,FLEN)
NAN_BOXED(471264411052350,64,FLEN)
NAN_BOXED(4603555004525846118,64,FLEN)
NAN_BOXED(471264411052350,64,FLEN)
NAN_BOXED(4603577196152625757,64,FLEN)
NAN_BOXED(7978583311360969,64,FLEN)
NAN_BOXED(4603577196152625757,64,FLEN)
NAN_BOXED(7978583311360969,64,FLEN)
NAN_BOXED(4603577196152625757,64,FLEN)
NAN_BOXED(7978583311360969,64,FLEN)
NAN_BOXED(4603577196152625757,64,FLEN)
NAN_BOXED(7978583311360969,64,FLEN)
NAN_BOXED(4603577196152625757,64,FLEN)
NAN_BOXED(7978583311360969,64,FLEN)
NAN_BOXED(4603596149876508678,64,FLEN)
NAN_BOXED(10115849286842091,64,FLEN)
NAN_BOXED(4603596149876508678,64,FLEN)
NAN_BOXED(10115849286842091,64,FLEN)
NAN_BOXED(4603596149876508678,64,FLEN)
NAN_BOXED(10115849286842091,64,FLEN)
NAN_BOXED(4603596149876508678,64,FLEN)
NAN_BOXED(10115849286842091,64,FLEN)
NAN_BOXED(4603596149876508678,64,FLEN)
NAN_BOXED(10115849286842091,64,FLEN)
NAN_BOXED(4603622973747782231,64,FLEN)
NAN_BOXED(7911539105037989,64,FLEN)
NAN_BOXED(4603622973747782231,64,FLEN)
NAN_BOXED(7911539105037989,64,FLEN)
NAN_BOXED(4603622973747782231,64,FLEN)
NAN_BOXED(7911539105037989,64,FLEN)
NAN_BOXED(4603622973747782231,64,FLEN)
NAN_BOXED(7911539105037989,64,FLEN)
NAN_BOXED(4603622973747782231,64,FLEN)
NAN_BOXED(7911539105037989,64,FLEN)
NAN_BOXED(4603653569535730853,64,FLEN)
NAN_BOXED(3702284381062195,64,FLEN)
NAN_BOXED(4603653569535730853,64,FLEN)
NAN_BOXED(3702284381062195,64,FLEN)
NAN_BOXED(4603653569535730853,64,FLEN)
NAN_BOXED(3702284381062195,64,FLEN)
NAN_BOXED(4603653569535730853,64,FLEN)
NAN_BOXED(3702284381062195,64,FLEN)
NAN_BOXED(4603653569535730853,64,FLEN)
NAN_BOXED(3702284381062195,64,FLEN)
NAN_BOXED(4603709550080845071,64,FLEN)
NAN_BOXED(3664835244895188,64,FLEN)
NAN_BOXED(4603709550080845071,64,FLEN)
NAN_BOXED(3664835244895188,64,FLEN)
NAN_BOXED(4603709550080845071,64,FLEN)
NAN_BOXED(3664835244895188,64,FLEN)
NAN_BOXED(4603709550080845071,64,FLEN)
NAN_BOXED(3664835244895188,64,FLEN)
NAN_BOXED(4603709550080845071,64,FLEN)
NAN_BOXED(3664835244895188,64,FLEN)
NAN_BOXED(4603759548678682862,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603759548678682862,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603759548678682862,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603759548678682862,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603759548678682862,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603766761845872691,64,FLEN)
NAN_BOXED(7254674475587456,64,FLEN)
NAN_BOXED(4603766761845872691,64,FLEN)
NAN_BOXED(7254674475587456,64,FLEN)
NAN_BOXED(4603766761845872691,64,FLEN)
NAN_BOXED(7254674475587456,64,FLEN)
NAN_BOXED(4603766761845872691,64,FLEN)
NAN_BOXED(7254674475587456,64,FLEN)
NAN_BOXED(4603766761845872691,64,FLEN)
NAN_BOXED(7254674475587456,64,FLEN)
NAN_BOXED(4603767504239013214,64,FLEN)
NAN_BOXED(9943883173655452,64,FLEN)
NAN_BOXED(4603767504239013214,64,FLEN)
NAN_BOXED(9943883173655452,64,FLEN)
NAN_BOXED(4603767504239013214,64,FLEN)
NAN_BOXED(9943883173655452,64,FLEN)
NAN_BOXED(4603767504239013214,64,FLEN)
NAN_BOXED(9943883173655452,64,FLEN)
NAN_BOXED(4603767504239013214,64,FLEN)
NAN_BOXED(9943883173655452,64,FLEN)
NAN_BOXED(4603784000949011239,64,FLEN)
NAN_BOXED(9927882054426535,64,FLEN)
NAN_BOXED(4603784000949011239,64,FLEN)
NAN_BOXED(9927882054426535,64,FLEN)
NAN_BOXED(4603784000949011239,64,FLEN)
NAN_BOXED(9927882054426535,64,FLEN)
NAN_BOXED(4603784000949011239,64,FLEN)
NAN_BOXED(9927882054426535,64,FLEN)
NAN_BOXED(4603784000949011239,64,FLEN)
NAN_BOXED(9927882054426535,64,FLEN)
NAN_BOXED(4603815632847386546,64,FLEN)
NAN_BOXED(7641305361725115,64,FLEN)
NAN_BOXED(4603815632847386546,64,FLEN)
NAN_BOXED(7641305361725115,64,FLEN)
NAN_BOXED(4603815632847386546,64,FLEN)
NAN_BOXED(7641305361725115,64,FLEN)
NAN_BOXED(4603815632847386546,64,FLEN)
NAN_BOXED(7641305361725115,64,FLEN)
NAN_BOXED(4603815632847386546,64,FLEN)
NAN_BOXED(7641305361725115,64,FLEN)
NAN_BOXED(4603823615237347011,64,FLEN)
NAN_BOXED(3590826618631695,64,FLEN)
NAN_BOXED(4603823615237347011,64,FLEN)
NAN_BOXED(3590826618631695,64,FLEN)
NAN_BOXED(4603823615237347011,64,FLEN)
NAN_BOXED(3590826618631695,64,FLEN)
NAN_BOXED(4603823615237347011,64,FLEN)
NAN_BOXED(3590826618631695,64,FLEN)
NAN_BOXED(4603823615237347011,64,FLEN)
NAN_BOXED(3590826618631695,64,FLEN)
NAN_BOXED(4603824633725614443,64,FLEN)
NAN_BOXED(7629130920824245,64,FLEN)
NAN_BOXED(4603824633725614443,64,FLEN)
NAN_BOXED(7629130920824245,64,FLEN)
NAN_BOXED(4603824633725614443,64,FLEN)
NAN_BOXED(7629130920824245,64,FLEN)
NAN_BOXED(4603824633725614443,64,FLEN)
NAN_BOXED(7629130920824245,64,FLEN)
NAN_BOXED(4603824633725614443,64,FLEN)
NAN_BOXED(7629130920824245,64,FLEN)
NAN_BOXED(4603961582897684156,64,FLEN)
NAN_BOXED(3505208430302265,64,FLEN)
NAN_BOXED(4603961582897684156,64,FLEN)
NAN_BOXED(3505208430302265,64,FLEN)
NAN_BOXED(4603961582897684156,64,FLEN)
NAN_BOXED(3505208430302265,64,FLEN)
NAN_BOXED(4603961582897684156,64,FLEN)
NAN_BOXED(3505208430302265,64,FLEN)
NAN_BOXED(4603961582897684156,64,FLEN)
NAN_BOXED(3505208430302265,64,FLEN)
NAN_BOXED(4603975340401599342,64,FLEN)
NAN_BOXED(437111788402242,64,FLEN)
NAN_BOXED(4603975340401599342,64,FLEN)
NAN_BOXED(437111788402242,64,FLEN)
NAN_BOXED(4603975340401599342,64,FLEN)
NAN_BOXED(437111788402242,64,FLEN)
NAN_BOXED(4603975340401599342,64,FLEN)
NAN_BOXED(437111788402242,64,FLEN)
NAN_BOXED(4603975340401599342,64,FLEN)
NAN_BOXED(437111788402242,64,FLEN)
NAN_BOXED(4603994552965689112,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603994552965689112,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603994552965689112,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603994552965689112,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603994552965689112,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603995788996865449,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603995788996865449,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603995788996865449,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603995788996865449,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4603995788996865449,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604022873409251203,64,FLEN)
NAN_BOXED(7370497880061533,64,FLEN)
NAN_BOXED(4604022873409251203,64,FLEN)
NAN_BOXED(7370497880061533,64,FLEN)
NAN_BOXED(4604022873409251203,64,FLEN)
NAN_BOXED(7370497880061533,64,FLEN)
NAN_BOXED(4604022873409251203,64,FLEN)
NAN_BOXED(7370497880061533,64,FLEN)
NAN_BOXED(4604022873409251203,64,FLEN)
NAN_BOXED(7370497880061533,64,FLEN)
NAN_BOXED(4604099675604157581,64,FLEN)
NAN_BOXED(7274949797821484,64,FLEN)
NAN_BOXED(4604099675604157581,64,FLEN)
NAN_BOXED(7274949797821484,64,FLEN)
NAN_BOXED(4604099675604157581,64,FLEN)
NAN_BOXED(7274949797821484,64,FLEN)
NAN_BOXED(4604099675604157581,64,FLEN)
NAN_BOXED(7274949797821484,64,FLEN)
NAN_BOXED(4604099675604157581,64,FLEN)
NAN_BOXED(7274949797821484,64,FLEN)
NAN_BOXED(4604137609535962808,64,FLEN)
NAN_BOXED(7228665094883889,64,FLEN)
NAN_BOXED(4604137609535962808,64,FLEN)
NAN_BOXED(7228665094883889,64,FLEN)
NAN_BOXED(4604137609535962808,64,FLEN)
NAN_BOXED(7228665094883889,64,FLEN)
NAN_BOXED(4604137609535962808,64,FLEN)
NAN_BOXED(7228665094883889,64,FLEN)
NAN_BOXED(4604137609535962808,64,FLEN)
NAN_BOXED(7228665094883889,64,FLEN)
NAN_BOXED(4604165992101817286,64,FLEN)
NAN_BOXED(6771216704432171,64,FLEN)
NAN_BOXED(4604165992101817286,64,FLEN)
NAN_BOXED(6771216704432171,64,FLEN)
NAN_BOXED(4604165992101817286,64,FLEN)
NAN_BOXED(6771216704432171,64,FLEN)
NAN_BOXED(4604165992101817286,64,FLEN)
NAN_BOXED(6771216704432171,64,FLEN)
NAN_BOXED(4604165992101817286,64,FLEN)
NAN_BOXED(6771216704432171,64,FLEN)
NAN_BOXED(4604253791654395584,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604253791654395584,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604253791654395584,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604253791654395584,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604253791654395584,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604314603010350884,64,FLEN)
NAN_BOXED(6607311538376325,64,FLEN)
NAN_BOXED(4604314603010350884,64,FLEN)
NAN_BOXED(6607311538376325,64,FLEN)
NAN_BOXED(4604314603010350884,64,FLEN)
NAN_BOXED(6607311538376325,64,FLEN)
NAN_BOXED(4604314603010350884,64,FLEN)
NAN_BOXED(6607311538376325,64,FLEN)
NAN_BOXED(4604314603010350884,64,FLEN)
NAN_BOXED(6607311538376325,64,FLEN)
NAN_BOXED(4604328588619172915,64,FLEN)
NAN_BOXED(7004312579038511,64,FLEN)
NAN_BOXED(4604328588619172915,64,FLEN)
NAN_BOXED(7004312579038511,64,FLEN)
NAN_BOXED(4604328588619172915,64,FLEN)
NAN_BOXED(7004312579038511,64,FLEN)
NAN_BOXED(4604328588619172915,64,FLEN)
NAN_BOXED(7004312579038511,64,FLEN)
NAN_BOXED(4604328588619172915,64,FLEN)
NAN_BOXED(7004312579038511,64,FLEN)
NAN_BOXED(4604373574832326431,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604373574832326431,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604373574832326431,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604373574832326431,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604373574832326431,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4604392654365236518,64,FLEN)
NAN_BOXED(3262182908381795,64,FLEN)
NAN_BOXED(4604392654365236518,64,FLEN)
NAN_BOXED(3262182908381795,64,FLEN)
NAN_BOXED(4604392654365236518,64,FLEN)
NAN_BOXED(3262182908381795,64,FLEN)
NAN_BOXED(4604392654365236518,64,FLEN)
NAN_BOXED(3262182908381795,64,FLEN)
NAN_BOXED(4604392654365236518,64,FLEN)
NAN_BOXED(3262182908381795,64,FLEN)
NAN_BOXED(4604404324330750831,64,FLEN)
NAN_BOXED(6512142692140296,64,FLEN)
NAN_BOXED(4604404324330750831,64,FLEN)
NAN_BOXED(6512142692140296,64,FLEN)
NAN_BOXED(4604404324330750831,64,FLEN)
NAN_BOXED(6512142692140296,64,FLEN)
NAN_BOXED(4604404324330750831,64,FLEN)
NAN_BOXED(6512142692140296,64,FLEN)
NAN_BOXED(4604404324330750831,64,FLEN)
NAN_BOXED(6512142692140296,64,FLEN)
NAN_BOXED(4604407487336418220,64,FLEN)
NAN_BOXED(6508837644133315,64,FLEN)
NAN_BOXED(4604407487336418220,64,FLEN)
NAN_BOXED(6508837644133315,64,FLEN)
NAN_BOXED(4604407487336418220,64,FLEN)
NAN_BOXED(6508837644133315,64,FLEN)
NAN_BOXED(4604407487336418220,64,FLEN)
NAN_BOXED(6508837644133315,64,FLEN)
NAN_BOXED(4604407487336418220,64,FLEN)
NAN_BOXED(6508837644133315,64,FLEN)
NAN_BOXED(4604509409302534951,64,FLEN)
NAN_BOXED(3202052729855382,64,FLEN)
NAN_BOXED(4604509409302534951,64,FLEN)
NAN_BOXED(3202052729855382,64,FLEN)
NAN_BOXED(4604509409302534951,64,FLEN)
NAN_BOXED(3202052729855382,64,FLEN)
NAN_BOXED(4604509409302534951,64,FLEN)
NAN_BOXED(3202052729855382,64,FLEN)
NAN_BOXED(4604509409302534951,64,FLEN)
NAN_BOXED(3202052729855382,64,FLEN)
NAN_BOXED(4604512842390964253,64,FLEN)
NAN_BOXED(400039772354313,64,FLEN)
NAN_BOXED(4604512842390964253,64,FLEN)
NAN_BOXED(400039772354313,64,FLEN)
NAN_BOXED(4604512842390964253,64,FLEN)
NAN_BOXED(400039772354313,64,FLEN)
NAN_BOXED(4604512842390964253,64,FLEN)
NAN_BOXED(400039772354313,64,FLEN)
NAN_BOXED(4604512842390964253,64,FLEN)
NAN_BOXED(400039772354313,64,FLEN)
NAN_BOXED(4604555865739971398,64,FLEN)
NAN_BOXED(6754820607918089,64,FLEN)
NAN_BOXED(4604555865739971398,64,FLEN)
NAN_BOXED(6754820607918089,64,FLEN)
NAN_BOXED(4604555865739971398,64,FLEN)
NAN_BOXED(6754820607918089,64,FLEN)
NAN_BOXED(4604555865739971398,64,FLEN)
NAN_BOXED(6754820607918089,64,FLEN)
NAN_BOXED(4604555865739971398,64,FLEN)
NAN_BOXED(6754820607918089,64,FLEN)
NAN_BOXED(4604618489588603222,64,FLEN)
NAN_BOXED(6689168716806759,64,FLEN)
NAN_BOXED(4604618489588603222,64,FLEN)
NAN_BOXED(6689168716806759,64,FLEN)
NAN_BOXED(4604618489588603222,64,FLEN)
NAN_BOXED(6689168716806759,64,FLEN)
NAN_BOXED(4604618489588603222,64,FLEN)
NAN_BOXED(6689168716806759,64,FLEN)
NAN_BOXED(4604618489588603222,64,FLEN)
NAN_BOXED(6689168716806759,64,FLEN)
NAN_BOXED(4604683042303328894,64,FLEN)
NAN_BOXED(6233239704801477,64,FLEN)
NAN_BOXED(4604683042303328894,64,FLEN)
NAN_BOXED(6233239704801477,64,FLEN)
NAN_BOXED(4604683042303328894,64,FLEN)
NAN_BOXED(6233239704801477,64,FLEN)
NAN_BOXED(4604683042303328894,64,FLEN)
NAN_BOXED(6233239704801477,64,FLEN)
NAN_BOXED(4604683042303328894,64,FLEN)
NAN_BOXED(6233239704801477,64,FLEN)
NAN_BOXED(4604921791678201183,64,FLEN)
NAN_BOXED(6388447282349752,64,FLEN)
NAN_BOXED(4604921791678201183,64,FLEN)
NAN_BOXED(6388447282349752,64,FLEN)
NAN_BOXED(4604921791678201183,64,FLEN)
NAN_BOXED(6388447282349752,64,FLEN)
NAN_BOXED(4604921791678201183,64,FLEN)
NAN_BOXED(6388447282349752,64,FLEN)
NAN_BOXED(4604921791678201183,64,FLEN)
NAN_BOXED(6388447282349752,64,FLEN)
NAN_BOXED(4604923586508858359,64,FLEN)
NAN_BOXED(3005528554257227,64,FLEN)
NAN_BOXED(4604923586508858359,64,FLEN)
NAN_BOXED(3005528554257227,64,FLEN)
NAN_BOXED(4604923586508858359,64,FLEN)
NAN_BOXED(3005528554257227,64,FLEN)
NAN_BOXED(4604923586508858359,64,FLEN)
NAN_BOXED(3005528554257227,64,FLEN)
NAN_BOXED(4604923586508858359,64,FLEN)
NAN_BOXED(3005528554257227,64,FLEN)
NAN_BOXED(4604929031654389785,64,FLEN)
NAN_BOXED(6381598971283482,64,FLEN)
NAN_BOXED(4604929031654389785,64,FLEN)
NAN_BOXED(6381598971283482,64,FLEN)
NAN_BOXED(4604929031654389785,64,FLEN)
NAN_BOXED(6381598971283482,64,FLEN)
NAN_BOXED(4604929031654389785,64,FLEN)
NAN_BOXED(6381598971283482,64,FLEN)
NAN_BOXED(4604929031654389785,64,FLEN)
NAN_BOXED(6381598971283482,64,FLEN)
NAN_BOXED(4604962311770976202,64,FLEN)
NAN_BOXED(6350307167561134,64,FLEN)
NAN_BOXED(4604962311770976202,64,FLEN)
NAN_BOXED(6350307167561134,64,FLEN)
NAN_BOXED(4604962311770976202,64,FLEN)
NAN_BOXED(6350307167561134,64,FLEN)
NAN_BOXED(4604962311770976202,64,FLEN)
NAN_BOXED(6350307167561134,64,FLEN)
NAN_BOXED(4604962311770976202,64,FLEN)
NAN_BOXED(6350307167561134,64,FLEN)
NAN_BOXED(4605006941221934081,64,FLEN)
NAN_BOXED(8906573143758948,64,FLEN)
NAN_BOXED(4605006941221934081,64,FLEN)
NAN_BOXED(8906573143758948,64,FLEN)
NAN_BOXED(4605006941221934081,64,FLEN)
NAN_BOXED(8906573143758948,64,FLEN)
NAN_BOXED(4605006941221934081,64,FLEN)
NAN_BOXED(8906573143758948,64,FLEN)
NAN_BOXED(4605006941221934081,64,FLEN)
NAN_BOXED(8906573143758948,64,FLEN)
NAN_BOXED(4605055608223423717,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4605055608223423717,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4605055608223423717,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4605055608223423717,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4605055608223423717,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4605088480595607533,64,FLEN)
NAN_BOXED(2933841128808556,64,FLEN)
NAN_BOXED(4605088480595607533,64,FLEN)
NAN_BOXED(2933841128808556,64,FLEN)
NAN_BOXED(4605088480595607533,64,FLEN)
NAN_BOXED(2933841128808556,64,FLEN)
NAN_BOXED(4605088480595607533,64,FLEN)
NAN_BOXED(2933841128808556,64,FLEN)
NAN_BOXED(4605088480595607533,64,FLEN)
NAN_BOXED(2933841128808556,64,FLEN)
NAN_BOXED(4605097023125078037,64,FLEN)
NAN_BOXED(2930220334890373,64,FLEN)
NAN_BOXED(4605097023125078037,64,FLEN)
NAN_BOXED(2930220334890373,64,FLEN)
NAN_BOXED(4605097023125078037,64,FLEN)
NAN_BOXED(2930220334890373,64,FLEN)
NAN_BOXED(4605097023125078037,64,FLEN)
NAN_BOXED(2930220334890373,64,FLEN)
NAN_BOXED(4605097023125078037,64,FLEN)
NAN_BOXED(2930220334890373,64,FLEN)
NAN_BOXED(4605118842611514116,64,FLEN)
NAN_BOXED(8763037427364874,64,FLEN)
NAN_BOXED(4605118842611514116,64,FLEN)
NAN_BOXED(8763037427364874,64,FLEN)
NAN_BOXED(4605118842611514116,64,FLEN)
NAN_BOXED(8763037427364874,64,FLEN)
NAN_BOXED(4605118842611514116,64,FLEN)
NAN_BOXED(8763037427364874,64,FLEN)
NAN_BOXED(4605118842611514116,64,FLEN)
NAN_BOXED(8763037427364874,64,FLEN)
NAN_BOXED(4605141238566691988,64,FLEN)
NAN_BOXED(2911621335126653,64,FLEN)
NAN_BOXED(4605141238566691988,64,FLEN)
NAN_BOXED(2911621335126653,64,FLEN)
NAN_BOXED(4605141238566691988,64,FLEN)
NAN_BOXED(2911621335126653,64,FLEN)
NAN_BOXED(4605141238566691988,64,FLEN)
NAN_BOXED(2911621335126653,64,FLEN)
NAN_BOXED(4605141238566691988,64,FLEN)
NAN_BOXED(2911621335126653,64,FLEN)
NAN_BOXED(4605155809051958116,64,FLEN)
NAN_BOXED(363192993661884,64,FLEN)
NAN_BOXED(4605155809051958116,64,FLEN)
NAN_BOXED(363192993661884,64,FLEN)
NAN_BOXED(4605155809051958116,64,FLEN)
NAN_BOXED(363192993661884,64,FLEN)
NAN_BOXED(4605155809051958116,64,FLEN)
NAN_BOXED(363192993661884,64,FLEN)
NAN_BOXED(4605155809051958116,64,FLEN)
NAN_BOXED(363192993661884,64,FLEN)
NAN_BOXED(4605184522827125829,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4605184522827125829,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4605184522827125829,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4605184522827125829,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4605184522827125829,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4605268841642254724,64,FLEN)
NAN_BOXED(2859245858655404,64,FLEN)
NAN_BOXED(4605268841642254724,64,FLEN)
NAN_BOXED(2859245858655404,64,FLEN)
NAN_BOXED(4605268841642254724,64,FLEN)
NAN_BOXED(2859245858655404,64,FLEN)
NAN_BOXED(4605268841642254724,64,FLEN)
NAN_BOXED(2859245858655404,64,FLEN)
NAN_BOXED(4605268841642254724,64,FLEN)
NAN_BOXED(2859245858655404,64,FLEN)
NAN_BOXED(4605286593060259306,64,FLEN)
NAN_BOXED(2852108606153065,64,FLEN)
NAN_BOXED(4605286593060259306,64,FLEN)
NAN_BOXED(2852108606153065,64,FLEN)
NAN_BOXED(4605286593060259306,64,FLEN)
NAN_BOXED(2852108606153065,64,FLEN)
NAN_BOXED(4605286593060259306,64,FLEN)
NAN_BOXED(2852108606153065,64,FLEN)
NAN_BOXED(4605286593060259306,64,FLEN)
NAN_BOXED(2852108606153065,64,FLEN)
NAN_BOXED(4605306697537362926,64,FLEN)
NAN_BOXED(2844068175791637,64,FLEN)
NAN_BOXED(4605306697537362926,64,FLEN)
NAN_BOXED(2844068175791637,64,FLEN)
NAN_BOXED(4605306697537362926,64,FLEN)
NAN_BOXED(2844068175791637,64,FLEN)
NAN_BOXED(4605306697537362926,64,FLEN)
NAN_BOXED(2844068175791637,64,FLEN)
NAN_BOXED(4605306697537362926,64,FLEN)
NAN_BOXED(2844068175791637,64,FLEN)
NAN_BOXED(4605335965519333091,64,FLEN)
NAN_BOXED(5664887339150051,64,FLEN)
NAN_BOXED(4605335965519333091,64,FLEN)
NAN_BOXED(5664887339150051,64,FLEN)
NAN_BOXED(4605335965519333091,64,FLEN)
NAN_BOXED(5664887339150051,64,FLEN)
NAN_BOXED(4605335965519333091,64,FLEN)
NAN_BOXED(5664887339150051,64,FLEN)
NAN_BOXED(4605335965519333091,64,FLEN)
NAN_BOXED(5664887339150051,64,FLEN)
NAN_BOXED(4605362843207241806,64,FLEN)
NAN_BOXED(8465555748687723,64,FLEN)
NAN_BOXED(4605362843207241806,64,FLEN)
NAN_BOXED(8465555748687723,64,FLEN)
NAN_BOXED(4605362843207241806,64,FLEN)
NAN_BOXED(8465555748687723,64,FLEN)
NAN_BOXED(4605362843207241806,64,FLEN)
NAN_BOXED(8465555748687723,64,FLEN)
NAN_BOXED(4605362843207241806,64,FLEN)
NAN_BOXED(8465555748687723,64,FLEN)
NAN_BOXED(4605384518408387737,64,FLEN)
NAN_BOXED(8440103533826192,64,FLEN)
NAN_BOXED(4605384518408387737,64,FLEN)
NAN_BOXED(8440103533826192,64,FLEN)
NAN_BOXED(4605384518408387737,64,FLEN)
NAN_BOXED(8440103533826192,64,FLEN)
NAN_BOXED(4605384518408387737,64,FLEN)
NAN_BOXED(8440103533826192,64,FLEN)
NAN_BOXED(4605384518408387737,64,FLEN)
NAN_BOXED(8440103533826192,64,FLEN)
NAN_BOXED(4605449801805952005,64,FLEN)
NAN_BOXED(2788120180218852,64,FLEN)
NAN_BOXED(4605449801805952005,64,FLEN)
NAN_BOXED(2788120180218852,64,FLEN)
NAN_BOXED(4605449801805952005,64,FLEN)
NAN_BOXED(2788120180218852,64,FLEN)
NAN_BOXED(4605449801805952005,64,FLEN)
NAN_BOXED(2788120180218852,64,FLEN)
NAN_BOXED(4605449801805952005,64,FLEN)
NAN_BOXED(2788120180218852,64,FLEN)
NAN_BOXED(4605457590368497899,64,FLEN)
NAN_BOXED(348142282506691,64,FLEN)
NAN_BOXED(4605457590368497899,64,FLEN)
NAN_BOXED(348142282506691,64,FLEN)
NAN_BOXED(4605457590368497899,64,FLEN)
NAN_BOXED(348142282506691,64,FLEN)
NAN_BOXED(4605457590368497899,64,FLEN)
NAN_BOXED(348142282506691,64,FLEN)
NAN_BOXED(4605457590368497899,64,FLEN)
NAN_BOXED(348142282506691,64,FLEN)
NAN_BOXED(4605475138379292137,64,FLEN)
NAN_BOXED(5904191729766153,64,FLEN)
NAN_BOXED(4605475138379292137,64,FLEN)
NAN_BOXED(5904191729766153,64,FLEN)
NAN_BOXED(4605475138379292137,64,FLEN)
NAN_BOXED(5904191729766153,64,FLEN)
NAN_BOXED(4605475138379292137,64,FLEN)
NAN_BOXED(5904191729766153,64,FLEN)
NAN_BOXED(4605475138379292137,64,FLEN)
NAN_BOXED(5904191729766153,64,FLEN)
NAN_BOXED(4605503025698410572,64,FLEN)
NAN_BOXED(5881722238152488,64,FLEN)
NAN_BOXED(4605503025698410572,64,FLEN)
NAN_BOXED(5881722238152488,64,FLEN)
NAN_BOXED(4605503025698410572,64,FLEN)
NAN_BOXED(5881722238152488,64,FLEN)
NAN_BOXED(4605503025698410572,64,FLEN)
NAN_BOXED(5881722238152488,64,FLEN)
NAN_BOXED(4605503025698410572,64,FLEN)
NAN_BOXED(5881722238152488,64,FLEN)
NAN_BOXED(4605527446734265018,64,FLEN)
NAN_BOXED(2758675579833624,64,FLEN)
NAN_BOXED(4605527446734265018,64,FLEN)
NAN_BOXED(2758675579833624,64,FLEN)
NAN_BOXED(4605527446734265018,64,FLEN)
NAN_BOXED(2758675579833624,64,FLEN)
NAN_BOXED(4605527446734265018,64,FLEN)
NAN_BOXED(2758675579833624,64,FLEN)
NAN_BOXED(4605527446734265018,64,FLEN)
NAN_BOXED(2758675579833624,64,FLEN)
NAN_BOXED(4605550088567212532,64,FLEN)
NAN_BOXED(2750206077331387,64,FLEN)
NAN_BOXED(4605550088567212532,64,FLEN)
NAN_BOXED(2750206077331387,64,FLEN)
NAN_BOXED(4605550088567212532,64,FLEN)
NAN_BOXED(2750206077331387,64,FLEN)
NAN_BOXED(4605550088567212532,64,FLEN)
NAN_BOXED(2750206077331387,64,FLEN)
NAN_BOXED(4605550088567212532,64,FLEN)
NAN_BOXED(2750206077331387,64,FLEN)
NAN_BOXED(4605557299450066695,64,FLEN)
NAN_BOXED(343439956374800,64,FLEN)
NAN_BOXED(4605557299450066695,64,FLEN)
NAN_BOXED(343439956374800,64,FLEN)
NAN_BOXED(4605557299450066695,64,FLEN)
NAN_BOXED(343439956374800,64,FLEN)
NAN_BOXED(4605557299450066695,64,FLEN)
NAN_BOXED(343439956374800,64,FLEN)
NAN_BOXED(4605557299450066695,64,FLEN)
NAN_BOXED(343439956374800,64,FLEN)
NAN_BOXED(4605617871550555413,64,FLEN)
NAN_BOXED(5450317867680922,64,FLEN)
NAN_BOXED(4605617871550555413,64,FLEN)
NAN_BOXED(5450317867680922,64,FLEN)
NAN_BOXED(4605617871550555413,64,FLEN)
NAN_BOXED(5450317867680922,64,FLEN)
NAN_BOXED(4605617871550555413,64,FLEN)
NAN_BOXED(5450317867680922,64,FLEN)
NAN_BOXED(4605617871550555413,64,FLEN)
NAN_BOXED(5450317867680922,64,FLEN)
NAN_BOXED(4605622928252761625,64,FLEN)
NAN_BOXED(8169925973313297,64,FLEN)
NAN_BOXED(4605622928252761625,64,FLEN)
NAN_BOXED(8169925973313297,64,FLEN)
NAN_BOXED(4605622928252761625,64,FLEN)
NAN_BOXED(8169925973313297,64,FLEN)
NAN_BOXED(4605622928252761625,64,FLEN)
NAN_BOXED(8169925973313297,64,FLEN)
NAN_BOXED(4605622928252761625,64,FLEN)
NAN_BOXED(8169925973313297,64,FLEN)
NAN_BOXED(4605634252455838369,64,FLEN)
NAN_BOXED(2719174167328298,64,FLEN)
NAN_BOXED(4605634252455838369,64,FLEN)
NAN_BOXED(2719174167328298,64,FLEN)
NAN_BOXED(4605634252455838369,64,FLEN)
NAN_BOXED(2719174167328298,64,FLEN)
NAN_BOXED(4605634252455838369,64,FLEN)
NAN_BOXED(2719174167328298,64,FLEN)
NAN_BOXED(4605634252455838369,64,FLEN)
NAN_BOXED(2719174167328298,64,FLEN)
NAN_BOXED(4605718117111334819,64,FLEN)
NAN_BOXED(5377882816523625,64,FLEN)
NAN_BOXED(4605718117111334819,64,FLEN)
NAN_BOXED(5377882816523625,64,FLEN)
NAN_BOXED(4605718117111334819,64,FLEN)
NAN_BOXED(5377882816523625,64,FLEN)
NAN_BOXED(4605718117111334819,64,FLEN)
NAN_BOXED(5377882816523625,64,FLEN)
NAN_BOXED(4605718117111334819,64,FLEN)
NAN_BOXED(5377882816523625,64,FLEN)
NAN_BOXED(4605826127428029171,64,FLEN)
NAN_BOXED(5633334117761278,64,FLEN)
NAN_BOXED(4605826127428029171,64,FLEN)
NAN_BOXED(5633334117761278,64,FLEN)
NAN_BOXED(4605826127428029171,64,FLEN)
NAN_BOXED(5633334117761278,64,FLEN)
NAN_BOXED(4605826127428029171,64,FLEN)
NAN_BOXED(5633334117761278,64,FLEN)
NAN_BOXED(4605826127428029171,64,FLEN)
NAN_BOXED(5633334117761278,64,FLEN)
NAN_BOXED(4605862854670047266,64,FLEN)
NAN_BOXED(329789481330519,64,FLEN)
NAN_BOXED(4605862854670047266,64,FLEN)
NAN_BOXED(329789481330519,64,FLEN)
NAN_BOXED(4605862854670047266,64,FLEN)
NAN_BOXED(329789481330519,64,FLEN)
NAN_BOXED(4605862854670047266,64,FLEN)
NAN_BOXED(329789481330519,64,FLEN)
NAN_BOXED(4605862854670047266,64,FLEN)
NAN_BOXED(329789481330519,64,FLEN)
NAN_BOXED(4605901595477888680,64,FLEN)
NAN_BOXED(5578310036124243,64,FLEN)
NAN_BOXED(4605901595477888680,64,FLEN)
NAN_BOXED(5578310036124243,64,FLEN)
NAN_BOXED(4605901595477888680,64,FLEN)
NAN_BOXED(5578310036124243,64,FLEN)
NAN_BOXED(4605901595477888680,64,FLEN)
NAN_BOXED(5578310036124243,64,FLEN)
NAN_BOXED(4605901595477888680,64,FLEN)
NAN_BOXED(5578310036124243,64,FLEN)
NAN_BOXED(4605916282394597474,64,FLEN)
NAN_BOXED(2620106566558954,64,FLEN)
NAN_BOXED(4605916282394597474,64,FLEN)
NAN_BOXED(2620106566558954,64,FLEN)
NAN_BOXED(4605916282394597474,64,FLEN)
NAN_BOXED(2620106566558954,64,FLEN)
NAN_BOXED(4605916282394597474,64,FLEN)
NAN_BOXED(2620106566558954,64,FLEN)
NAN_BOXED(4605916282394597474,64,FLEN)
NAN_BOXED(2620106566558954,64,FLEN)
NAN_BOXED(4605921715346968547,64,FLEN)
NAN_BOXED(7854806917685755,64,FLEN)
NAN_BOXED(4605921715346968547,64,FLEN)
NAN_BOXED(7854806917685755,64,FLEN)
NAN_BOXED(4605921715346968547,64,FLEN)
NAN_BOXED(7854806917685755,64,FLEN)
NAN_BOXED(4605921715346968547,64,FLEN)
NAN_BOXED(7854806917685755,64,FLEN)
NAN_BOXED(4605921715346968547,64,FLEN)
NAN_BOXED(7854806917685755,64,FLEN)
NAN_BOXED(4605940568063168485,64,FLEN)
NAN_BOXED(5223824676231637,64,FLEN)
NAN_BOXED(4605940568063168485,64,FLEN)
NAN_BOXED(5223824676231637,64,FLEN)
NAN_BOXED(4605940568063168485,64,FLEN)
NAN_BOXED(5223824676231637,64,FLEN)
NAN_BOXED(4605940568063168485,64,FLEN)
NAN_BOXED(5223824676231637,64,FLEN)
NAN_BOXED(4605940568063168485,64,FLEN)
NAN_BOXED(5223824676231637,64,FLEN)
NAN_BOXED(4605995598503929633,64,FLEN)
NAN_BOXED(7780598502023716,64,FLEN)
NAN_BOXED(4605995598503929633,64,FLEN)
NAN_BOXED(7780598502023716,64,FLEN)
NAN_BOXED(4605995598503929633,64,FLEN)
NAN_BOXED(7780598502023716,64,FLEN)
NAN_BOXED(4605995598503929633,64,FLEN)
NAN_BOXED(7780598502023716,64,FLEN)
NAN_BOXED(4605995598503929633,64,FLEN)
NAN_BOXED(7780598502023716,64,FLEN)
NAN_BOXED(4606027601138857053,64,FLEN)
NAN_BOXED(7748888421405544,64,FLEN)
NAN_BOXED(4606027601138857053,64,FLEN)
NAN_BOXED(7748888421405544,64,FLEN)
NAN_BOXED(4606027601138857053,64,FLEN)
NAN_BOXED(7748888421405544,64,FLEN)
NAN_BOXED(4606027601138857053,64,FLEN)
NAN_BOXED(7748888421405544,64,FLEN)
NAN_BOXED(4606027601138857053,64,FLEN)
NAN_BOXED(7748888421405544,64,FLEN)
NAN_BOXED(4606038002486003519,64,FLEN)
NAN_BOXED(5481535066231163,64,FLEN)
NAN_BOXED(4606038002486003519,64,FLEN)
NAN_BOXED(5481535066231163,64,FLEN)
NAN_BOXED(4606038002486003519,64,FLEN)
NAN_BOXED(5481535066231163,64,FLEN)
NAN_BOXED(4606038002486003519,64,FLEN)
NAN_BOXED(5481535066231163,64,FLEN)
NAN_BOXED(4606038002486003519,64,FLEN)
NAN_BOXED(5481535066231163,64,FLEN)
NAN_BOXED(4606085977117277411,64,FLEN)
NAN_BOXED(2563902308855779,64,FLEN)
NAN_BOXED(4606085977117277411,64,FLEN)
NAN_BOXED(2563902308855779,64,FLEN)
NAN_BOXED(4606085977117277411,64,FLEN)
NAN_BOXED(2563902308855779,64,FLEN)
NAN_BOXED(4606085977117277411,64,FLEN)
NAN_BOXED(2563902308855779,64,FLEN)
NAN_BOXED(4606085977117277411,64,FLEN)
NAN_BOXED(2563902308855779,64,FLEN)
NAN_BOXED(4606163570329852886,64,FLEN)
NAN_BOXED(2538998367824807,64,FLEN)
NAN_BOXED(4606163570329852886,64,FLEN)
NAN_BOXED(2538998367824807,64,FLEN)
NAN_BOXED(4606163570329852886,64,FLEN)
NAN_BOXED(2538998367824807,64,FLEN)
NAN_BOXED(4606163570329852886,64,FLEN)
NAN_BOXED(2538998367824807,64,FLEN)
NAN_BOXED(4606163570329852886,64,FLEN)
NAN_BOXED(2538998367824807,64,FLEN)
NAN_BOXED(4606172979605290184,64,FLEN)
NAN_BOXED(317001408073262,64,FLEN)
NAN_BOXED(4606172979605290184,64,FLEN)
NAN_BOXED(317001408073262,64,FLEN)
NAN_BOXED(4606172979605290184,64,FLEN)
NAN_BOXED(317001408073262,64,FLEN)
NAN_BOXED(4606172979605290184,64,FLEN)
NAN_BOXED(317001408073262,64,FLEN)
NAN_BOXED(4606172979605290184,64,FLEN)
NAN_BOXED(317001408073262,64,FLEN)
NAN_BOXED(4606173918155008468,64,FLEN)
NAN_BOXED(5071427389194033,64,FLEN)
NAN_BOXED(4606173918155008468,64,FLEN)
NAN_BOXED(5071427389194033,64,FLEN)
NAN_BOXED(4606173918155008468,64,FLEN)
NAN_BOXED(5071427389194033,64,FLEN)
NAN_BOXED(4606173918155008468,64,FLEN)
NAN_BOXED(5071427389194033,64,FLEN)
NAN_BOXED(4606173918155008468,64,FLEN)
NAN_BOXED(5071427389194033,64,FLEN)
NAN_BOXED(4606207350463911477,64,FLEN)
NAN_BOXED(7575477719092641,64,FLEN)
NAN_BOXED(4606207350463911477,64,FLEN)
NAN_BOXED(7575477719092641,64,FLEN)
NAN_BOXED(4606207350463911477,64,FLEN)
NAN_BOXED(7575477719092641,64,FLEN)
NAN_BOXED(4606207350463911477,64,FLEN)
NAN_BOXED(7575477719092641,64,FLEN)
NAN_BOXED(4606207350463911477,64,FLEN)
NAN_BOXED(7575477719092641,64,FLEN)
NAN_BOXED(4606207520516763649,64,FLEN)
NAN_BOXED(7575317337702891,64,FLEN)
NAN_BOXED(4606207520516763649,64,FLEN)
NAN_BOXED(7575317337702891,64,FLEN)
NAN_BOXED(4606207520516763649,64,FLEN)
NAN_BOXED(7575317337702891,64,FLEN)
NAN_BOXED(4606207520516763649,64,FLEN)
NAN_BOXED(7575317337702891,64,FLEN)
NAN_BOXED(4606207520516763649,64,FLEN)
NAN_BOXED(7575317337702891,64,FLEN)
NAN_BOXED(4606225259920328317,64,FLEN)
NAN_BOXED(2519541351184950,64,FLEN)
NAN_BOXED(4606225259920328317,64,FLEN)
NAN_BOXED(2519541351184950,64,FLEN)
NAN_BOXED(4606225259920328317,64,FLEN)
NAN_BOXED(2519541351184950,64,FLEN)
NAN_BOXED(4606225259920328317,64,FLEN)
NAN_BOXED(2519541351184950,64,FLEN)
NAN_BOXED(4606225259920328317,64,FLEN)
NAN_BOXED(2519541351184950,64,FLEN)
NAN_BOXED(4606228016154231227,64,FLEN)
NAN_BOXED(7556036960289315,64,FLEN)
NAN_BOXED(4606228016154231227,64,FLEN)
NAN_BOXED(7556036960289315,64,FLEN)
NAN_BOXED(4606228016154231227,64,FLEN)
NAN_BOXED(7556036960289315,64,FLEN)
NAN_BOXED(4606228016154231227,64,FLEN)
NAN_BOXED(7556036960289315,64,FLEN)
NAN_BOXED(4606228016154231227,64,FLEN)
NAN_BOXED(7556036960289315,64,FLEN)
NAN_BOXED(4606232650681331603,64,FLEN)
NAN_BOXED(7551690828442503,64,FLEN)
NAN_BOXED(4606232650681331603,64,FLEN)
NAN_BOXED(7551690828442503,64,FLEN)
NAN_BOXED(4606232650681331603,64,FLEN)
NAN_BOXED(7551690828442503,64,FLEN)
NAN_BOXED(4606232650681331603,64,FLEN)
NAN_BOXED(7551690828442503,64,FLEN)
NAN_BOXED(4606232650681331603,64,FLEN)
NAN_BOXED(7551690828442503,64,FLEN)
NAN_BOXED(4606263242177066781,64,FLEN)
NAN_BOXED(2507709303869981,64,FLEN)
NAN_BOXED(4606263242177066781,64,FLEN)
NAN_BOXED(2507709303869981,64,FLEN)
NAN_BOXED(4606263242177066781,64,FLEN)
NAN_BOXED(2507709303869981,64,FLEN)
NAN_BOXED(4606263242177066781,64,FLEN)
NAN_BOXED(2507709303869981,64,FLEN)
NAN_BOXED(4606263242177066781,64,FLEN)
NAN_BOXED(2507709303869981,64,FLEN)
NAN_BOXED(4606271233629386381,64,FLEN)
NAN_BOXED(2505233982171541,64,FLEN)
NAN_BOXED(4606271233629386381,64,FLEN)
NAN_BOXED(2505233982171541,64,FLEN)
NAN_BOXED(4606271233629386381,64,FLEN)
NAN_BOXED(2505233982171541,64,FLEN)
NAN_BOXED(4606271233629386381,64,FLEN)
NAN_BOXED(2505233982171541,64,FLEN)
NAN_BOXED(4606271233629386381,64,FLEN)
NAN_BOXED(2505233982171541,64,FLEN)
NAN_BOXED(4606277579156006911,64,FLEN)
NAN_BOXED(312908994695667,64,FLEN)
NAN_BOXED(4606277579156006911,64,FLEN)
NAN_BOXED(312908994695667,64,FLEN)
NAN_BOXED(4606277579156006911,64,FLEN)
NAN_BOXED(312908994695667,64,FLEN)
NAN_BOXED(4606277579156006911,64,FLEN)
NAN_BOXED(312908994695667,64,FLEN)
NAN_BOXED(4606277579156006911,64,FLEN)
NAN_BOXED(312908994695667,64,FLEN)
NAN_BOXED(4606283742727354645,64,FLEN)
NAN_BOXED(2501369133220295,64,FLEN)
NAN_BOXED(4606283742727354645,64,FLEN)
NAN_BOXED(2501369133220295,64,FLEN)
NAN_BOXED(4606283742727354645,64,FLEN)
NAN_BOXED(2501369133220295,64,FLEN)
NAN_BOXED(4606283742727354645,64,FLEN)
NAN_BOXED(2501369133220295,64,FLEN)
NAN_BOXED(4606283742727354645,64,FLEN)
NAN_BOXED(2501369133220295,64,FLEN)
NAN_BOXED(4606285712582703676,64,FLEN)
NAN_BOXED(5314118415349956,64,FLEN)
NAN_BOXED(4606285712582703676,64,FLEN)
NAN_BOXED(5314118415349956,64,FLEN)
NAN_BOXED(4606285712582703676,64,FLEN)
NAN_BOXED(5314118415349956,64,FLEN)
NAN_BOXED(4606285712582703676,64,FLEN)
NAN_BOXED(5314118415349956,64,FLEN)
NAN_BOXED(4606285712582703676,64,FLEN)
NAN_BOXED(5314118415349956,64,FLEN)
NAN_BOXED(4606316336408118174,64,FLEN)
NAN_BOXED(311419335107233,64,FLEN)
NAN_BOXED(4606316336408118174,64,FLEN)
NAN_BOXED(311419335107233,64,FLEN)
NAN_BOXED(4606316336408118174,64,FLEN)
NAN_BOXED(311419335107233,64,FLEN)
NAN_BOXED(4606316336408118174,64,FLEN)
NAN_BOXED(311419335107233,64,FLEN)
NAN_BOXED(4606316336408118174,64,FLEN)
NAN_BOXED(311419335107233,64,FLEN)
NAN_BOXED(4606318881100774030,64,FLEN)
NAN_BOXED(2490576194188650,64,FLEN)
NAN_BOXED(4606318881100774030,64,FLEN)
NAN_BOXED(2490576194188650,64,FLEN)
NAN_BOXED(4606318881100774030,64,FLEN)
NAN_BOXED(2490576194188650,64,FLEN)
NAN_BOXED(4606318881100774030,64,FLEN)
NAN_BOXED(2490576194188650,64,FLEN)
NAN_BOXED(4606318881100774030,64,FLEN)
NAN_BOXED(2490576194188650,64,FLEN)
NAN_BOXED(4606435693362283255,64,FLEN)
NAN_BOXED(2455356684491126,64,FLEN)
NAN_BOXED(4606435693362283255,64,FLEN)
NAN_BOXED(2455356684491126,64,FLEN)
NAN_BOXED(4606435693362283255,64,FLEN)
NAN_BOXED(2455356684491126,64,FLEN)
NAN_BOXED(4606435693362283255,64,FLEN)
NAN_BOXED(2455356684491126,64,FLEN)
NAN_BOXED(4606435693362283255,64,FLEN)
NAN_BOXED(2455356684491126,64,FLEN)
NAN_BOXED(4606457242723068251,64,FLEN)
NAN_BOXED(2448967983818105,64,FLEN)
NAN_BOXED(4606457242723068251,64,FLEN)
NAN_BOXED(2448967983818105,64,FLEN)
NAN_BOXED(4606457242723068251,64,FLEN)
NAN_BOXED(2448967983818105,64,FLEN)
NAN_BOXED(4606457242723068251,64,FLEN)
NAN_BOXED(2448967983818105,64,FLEN)
NAN_BOXED(4606457242723068251,64,FLEN)
NAN_BOXED(2448967983818105,64,FLEN)
NAN_BOXED(4606463566928399080,64,FLEN)
NAN_BOXED(4894198726504200,64,FLEN)
NAN_BOXED(4606463566928399080,64,FLEN)
NAN_BOXED(4894198726504200,64,FLEN)
NAN_BOXED(4606463566928399080,64,FLEN)
NAN_BOXED(4894198726504200,64,FLEN)
NAN_BOXED(4606463566928399080,64,FLEN)
NAN_BOXED(4894198726504200,64,FLEN)
NAN_BOXED(4606463566928399080,64,FLEN)
NAN_BOXED(4894198726504200,64,FLEN)
NAN_BOXED(4606485833530078615,64,FLEN)
NAN_BOXED(7321628573078676,64,FLEN)
NAN_BOXED(4606485833530078615,64,FLEN)
NAN_BOXED(7321628573078676,64,FLEN)
NAN_BOXED(4606485833530078615,64,FLEN)
NAN_BOXED(7321628573078676,64,FLEN)
NAN_BOXED(4606485833530078615,64,FLEN)
NAN_BOXED(7321628573078676,64,FLEN)
NAN_BOXED(4606485833530078615,64,FLEN)
NAN_BOXED(7321628573078676,64,FLEN)
NAN_BOXED(4606492933726638884,64,FLEN)
NAN_BOXED(2438459552877948,64,FLEN)
NAN_BOXED(4606492933726638884,64,FLEN)
NAN_BOXED(2438459552877948,64,FLEN)
NAN_BOXED(4606492933726638884,64,FLEN)
NAN_BOXED(2438459552877948,64,FLEN)
NAN_BOXED(4606492933726638884,64,FLEN)
NAN_BOXED(2438459552877948,64,FLEN)
NAN_BOXED(4606492933726638884,64,FLEN)
NAN_BOXED(2438459552877948,64,FLEN)
NAN_BOXED(4606517783750675260,64,FLEN)
NAN_BOXED(2431196105212596,64,FLEN)
NAN_BOXED(4606517783750675260,64,FLEN)
NAN_BOXED(2431196105212596,64,FLEN)
NAN_BOXED(4606517783750675260,64,FLEN)
NAN_BOXED(2431196105212596,64,FLEN)
NAN_BOXED(4606517783750675260,64,FLEN)
NAN_BOXED(2431196105212596,64,FLEN)
NAN_BOXED(4606517783750675260,64,FLEN)
NAN_BOXED(2431196105212596,64,FLEN)
NAN_BOXED(4606526466205244240,64,FLEN)
NAN_BOXED(4857336977214806,64,FLEN)
NAN_BOXED(4606526466205244240,64,FLEN)
NAN_BOXED(4857336977214806,64,FLEN)
NAN_BOXED(4606526466205244240,64,FLEN)
NAN_BOXED(4857336977214806,64,FLEN)
NAN_BOXED(4606526466205244240,64,FLEN)
NAN_BOXED(4857336977214806,64,FLEN)
NAN_BOXED(4606526466205244240,64,FLEN)
NAN_BOXED(4857336977214806,64,FLEN)
NAN_BOXED(4606580383047107464,64,FLEN)
NAN_BOXED(301636154954529,64,FLEN)
NAN_BOXED(4606580383047107464,64,FLEN)
NAN_BOXED(301636154954529,64,FLEN)
NAN_BOXED(4606580383047107464,64,FLEN)
NAN_BOXED(301636154954529,64,FLEN)
NAN_BOXED(4606580383047107464,64,FLEN)
NAN_BOXED(301636154954529,64,FLEN)
NAN_BOXED(4606580383047107464,64,FLEN)
NAN_BOXED(301636154954529,64,FLEN)
NAN_BOXED(4606626779628372490,64,FLEN)
NAN_BOXED(5099664438754231,64,FLEN)
NAN_BOXED(4606626779628372490,64,FLEN)
NAN_BOXED(5099664438754231,64,FLEN)
NAN_BOXED(4606626779628372490,64,FLEN)
NAN_BOXED(5099664438754231,64,FLEN)
NAN_BOXED(4606626779628372490,64,FLEN)
NAN_BOXED(5099664438754231,64,FLEN)
NAN_BOXED(4606626779628372490,64,FLEN)
NAN_BOXED(5099664438754231,64,FLEN)
NAN_BOXED(4606673049362773913,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4606673049362773913,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4606673049362773913,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4606673049362773913,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4606673049362773913,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4606703626944589256,64,FLEN)
NAN_BOXED(7134653161135063,64,FLEN)
NAN_BOXED(4606703626944589256,64,FLEN)
NAN_BOXED(7134653161135063,64,FLEN)
NAN_BOXED(4606703626944589256,64,FLEN)
NAN_BOXED(7134653161135063,64,FLEN)
NAN_BOXED(4606703626944589256,64,FLEN)
NAN_BOXED(7134653161135063,64,FLEN)
NAN_BOXED(4606703626944589256,64,FLEN)
NAN_BOXED(7134653161135063,64,FLEN)
NAN_BOXED(4606734160857476572,64,FLEN)
NAN_BOXED(7109200377881042,64,FLEN)
NAN_BOXED(4606734160857476572,64,FLEN)
NAN_BOXED(7109200377881042,64,FLEN)
NAN_BOXED(4606734160857476572,64,FLEN)
NAN_BOXED(7109200377881042,64,FLEN)
NAN_BOXED(4606734160857476572,64,FLEN)
NAN_BOXED(7109200377881042,64,FLEN)
NAN_BOXED(4606734160857476572,64,FLEN)
NAN_BOXED(7109200377881042,64,FLEN)
NAN_BOXED(4606855736742097924,64,FLEN)
NAN_BOXED(2336543911355692,64,FLEN)
NAN_BOXED(4606855736742097924,64,FLEN)
NAN_BOXED(2336543911355692,64,FLEN)
NAN_BOXED(4606855736742097924,64,FLEN)
NAN_BOXED(2336543911355692,64,FLEN)
NAN_BOXED(4606855736742097924,64,FLEN)
NAN_BOXED(2336543911355692,64,FLEN)
NAN_BOXED(4606855736742097924,64,FLEN)
NAN_BOXED(2336543911355692,64,FLEN)
NAN_BOXED(4606858841207082991,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4606858841207082991,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4606858841207082991,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4606858841207082991,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4606858841207082991,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(4606880171003814690,64,FLEN)
NAN_BOXED(2329985376742982,64,FLEN)
NAN_BOXED(4606880171003814690,64,FLEN)
NAN_BOXED(2329985376742982,64,FLEN)
NAN_BOXED(4606880171003814690,64,FLEN)
NAN_BOXED(2329985376742982,64,FLEN)
NAN_BOXED(4606880171003814690,64,FLEN)
NAN_BOXED(2329985376742982,64,FLEN)
NAN_BOXED(4606880171003814690,64,FLEN)
NAN_BOXED(2329985376742982,64,FLEN)
NAN_BOXED(4606895331706525482,64,FLEN)
NAN_BOXED(2325934486689724,64,FLEN)
NAN_BOXED(4606895331706525482,64,FLEN)
NAN_BOXED(2325934486689724,64,FLEN)
NAN_BOXED(4606895331706525482,64,FLEN)
NAN_BOXED(2325934486689724,64,FLEN)
NAN_BOXED(4606895331706525482,64,FLEN)
NAN_BOXED(2325934486689724,64,FLEN)
NAN_BOXED(4606895331706525482,64,FLEN)
NAN_BOXED(2325934486689724,64,FLEN)
NAN_BOXED(4606904899266164368,64,FLEN)
NAN_BOXED(2323385307609958,64,FLEN)
NAN_BOXED(4606904899266164368,64,FLEN)
NAN_BOXED(2323385307609958,64,FLEN)
NAN_BOXED(4606904899266164368,64,FLEN)
NAN_BOXED(2323385307609958,64,FLEN)
NAN_BOXED(4606904899266164368,64,FLEN)
NAN_BOXED(2323385307609958,64,FLEN)
NAN_BOXED(4606904899266164368,64,FLEN)
NAN_BOXED(2323385307609958,64,FLEN)
NAN_BOXED(4606906662531864826,64,FLEN)
NAN_BOXED(6968748339125275,64,FLEN)
NAN_BOXED(4606906662531864826,64,FLEN)
NAN_BOXED(6968748339125275,64,FLEN)
NAN_BOXED(4606906662531864826,64,FLEN)
NAN_BOXED(6968748339125275,64,FLEN)
NAN_BOXED(4606906662531864826,64,FLEN)
NAN_BOXED(6968748339125275,64,FLEN)
NAN_BOXED(4606906662531864826,64,FLEN)
NAN_BOXED(6968748339125275,64,FLEN)
NAN_BOXED(4606954133903516922,64,FLEN)
NAN_BOXED(2310355104969577,64,FLEN)
NAN_BOXED(4606954133903516922,64,FLEN)
NAN_BOXED(2310355104969577,64,FLEN)
NAN_BOXED(4606954133903516922,64,FLEN)
NAN_BOXED(2310355104969577,64,FLEN)
NAN_BOXED(4606954133903516922,64,FLEN)
NAN_BOXED(2310355104969577,64,FLEN)
NAN_BOXED(4606954133903516922,64,FLEN)
NAN_BOXED(2310355104969577,64,FLEN)
NAN_BOXED(4606991962745205450,64,FLEN)
NAN_BOXED(2300442367859248,64,FLEN)
NAN_BOXED(4606991962745205450,64,FLEN)
NAN_BOXED(2300442367859248,64,FLEN)
NAN_BOXED(4606991962745205450,64,FLEN)
NAN_BOXED(2300442367859248,64,FLEN)
NAN_BOXED(4606991962745205450,64,FLEN)
NAN_BOXED(2300442367859248,64,FLEN)
NAN_BOXED(4606991962745205450,64,FLEN)
NAN_BOXED(2300442367859248,64,FLEN)
NAN_BOXED(4607010785674177326,64,FLEN)
NAN_BOXED(2295541599457724,64,FLEN)
NAN_BOXED(4607010785674177326,64,FLEN)
NAN_BOXED(2295541599457724,64,FLEN)
NAN_BOXED(4607010785674177326,64,FLEN)
NAN_BOXED(2295541599457724,64,FLEN)
NAN_BOXED(4607010785674177326,64,FLEN)
NAN_BOXED(2295541599457724,64,FLEN)
NAN_BOXED(4607010785674177326,64,FLEN)
NAN_BOXED(2295541599457724,64,FLEN)
NAN_BOXED(4607019990002154788,64,FLEN)
NAN_BOXED(2293152739524010,64,FLEN)
NAN_BOXED(4607019990002154788,64,FLEN)
NAN_BOXED(2293152739524010,64,FLEN)
NAN_BOXED(4607019990002154788,64,FLEN)
NAN_BOXED(2293152739524010,64,FLEN)
NAN_BOXED(4607019990002154788,64,FLEN)
NAN_BOXED(2293152739524010,64,FLEN)
NAN_BOXED(4607019990002154788,64,FLEN)
NAN_BOXED(2293152739524010,64,FLEN)
NAN_BOXED(4607028058856319104,64,FLEN)
NAN_BOXED(286382832826755,64,FLEN)
NAN_BOXED(4607028058856319104,64,FLEN)
NAN_BOXED(286382832826755,64,FLEN)
NAN_BOXED(4607028058856319104,64,FLEN)
NAN_BOXED(286382832826755,64,FLEN)
NAN_BOXED(4607028058856319104,64,FLEN)
NAN_BOXED(286382832826755,64,FLEN)
NAN_BOXED(4607028058856319104,64,FLEN)
NAN_BOXED(286382832826755,64,FLEN)
NAN_BOXED(4607040806962885437,64,FLEN)
NAN_BOXED(2287768271661991,64,FLEN)
NAN_BOXED(4607040806962885437,64,FLEN)
NAN_BOXED(2287768271661991,64,FLEN)
NAN_BOXED(4607040806962885437,64,FLEN)
NAN_BOXED(2287768271661991,64,FLEN)
NAN_BOXED(4607040806962885437,64,FLEN)
NAN_BOXED(2287768271661991,64,FLEN)
NAN_BOXED(4607040806962885437,64,FLEN)
NAN_BOXED(2287768271661991,64,FLEN)
NAN_BOXED(4607077883100237374,64,FLEN)
NAN_BOXED(284780075626207,64,FLEN)
NAN_BOXED(4607077883100237374,64,FLEN)
NAN_BOXED(284780075626207,64,FLEN)
NAN_BOXED(4607077883100237374,64,FLEN)
NAN_BOXED(284780075626207,64,FLEN)
NAN_BOXED(4607077883100237374,64,FLEN)
NAN_BOXED(284780075626207,64,FLEN)
NAN_BOXED(4607077883100237374,64,FLEN)
NAN_BOXED(284780075626207,64,FLEN)
NAN_BOXED(4607088741786226620,64,FLEN)
NAN_BOXED(4550930385402735,64,FLEN)
NAN_BOXED(4607088741786226620,64,FLEN)
NAN_BOXED(4550930385402735,64,FLEN)
NAN_BOXED(4607088741786226620,64,FLEN)
NAN_BOXED(4550930385402735,64,FLEN)
NAN_BOXED(4607088741786226620,64,FLEN)
NAN_BOXED(4550930385402735,64,FLEN)
NAN_BOXED(4607088741786226620,64,FLEN)
NAN_BOXED(4550930385402735,64,FLEN)
NAN_BOXED(4607138961035706878,64,FLEN)
NAN_BOXED(2262716927446518,64,FLEN)
NAN_BOXED(4607138961035706878,64,FLEN)
NAN_BOXED(2262716927446518,64,FLEN)
NAN_BOXED(4607138961035706878,64,FLEN)
NAN_BOXED(2262716927446518,64,FLEN)
NAN_BOXED(4607138961035706878,64,FLEN)
NAN_BOXED(2262716927446518,64,FLEN)
NAN_BOXED(4607138961035706878,64,FLEN)
NAN_BOXED(2262716927446518,64,FLEN)
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(43085542152974549,64,FLEN)
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(43085542152974549,64,FLEN)
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(43085542152974549,64,FLEN)
NAN_BOXED(4568254071249522688,64,FLEN)
NAN_BOXED(43085542152974549,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_12:
    .fill 132*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
