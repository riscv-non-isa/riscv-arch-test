
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:04:18 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fadd.d_b12 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fadd.d_b12)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==f26, rs2==f26, rd==f26,fs1 == 1 and fe1 == 0x7f5 and fm1 == 0x2b954e52a4bff and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfa980f38509ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f26; op2:f26; dest:f26; op1val:0xff52b954e52a4bff; op2val:0xff52b954e52a4bff; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f26, f26, f26, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs2 == rd != rs1, rs1==f21, rs2==f3, rd==f3,fs1 == 1 and fe1 == 0x7fb and fm1 == 0x49818dfc8788f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x9a1cc86f24be5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f21; op2:f3; dest:f3; op1val:0xffb49818dfc8788f; op2val:0x7fd9a1cc86f24be5; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f3, f21, f3, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==f13, rs2==f13, rd==f22,fs1 == 1 and fe1 == 0x7fb and fm1 == 0xbeb3709a573b7 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x52162165ec222 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f13; op2:f13; dest:f22; op1val:0xffbbeb3709a573b7; op2val:0xffbbeb3709a573b7; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f22, f13, f13, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f27, rs2==f30, rd==f8,fs1 == 1 and fe1 == 0x7fc and fm1 == 0x83df99d24bacb and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x8125d36d5e46f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f27; op2:f30; dest:f8; op1val:0xffc83df99d24bacb; op2val:0x7fd8125d36d5e46f; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f8, f27, f30, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2, rs1==f14, rs2==f12, rd==f14,fs1 == 1 and fe1 == 0x7fc and fm1 == 0x874e2eeac1c13 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x84645048e0d5c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f14; op2:f12; dest:f14; op1val:0xffc874e2eeac1c13; op2val:0x7fe84645048e0d5c; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f14, f14, f12, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f1, rs2==f24, rd==f17,fs1 == 1 and fe1 == 0x7fc and fm1 == 0xe8af77cda8053 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f1; op2:f24; dest:f17; op1val:0xffce8af77cda8053; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f17, f1, f24, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f22, rs2==f6, rd==f9,fs1 == 1 and fe1 == 0x7fd and fm1 == 0x0abe7f07f8c6f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f22; op2:f6; dest:f9; op1val:0xffd0abe7f07f8c6f; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f9, f22, f6, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f6, rs2==f15, rd==f11,fs1 == 1 and fe1 == 0x7fd and fm1 == 0x209a1991e3307 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f6; op2:f15; dest:f11; op1val:0xffd209a1991e3307; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f11, f6, f15, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f29, rs2==f21, rd==f24,fs1 == 1 and fe1 == 0x7fd and fm1 == 0x3d97530ca446d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f29; op2:f21; dest:f24; op1val:0xffd3d97530ca446d; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f24, f29, f21, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f25, rs2==f18, rd==f27,fs1 == 1 and fe1 == 0x7fd and fm1 == 0x4d025f5a10f55 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f25; op2:f18; dest:f27; op1val:0xffd4d025f5a10f55; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f27, f25, f18, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f2, rs2==f7, rd==f29,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xaeaa51052e977 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x5be5e5006178e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f2; op2:f7; dest:f29; op1val:0xffdaeaa51052e977; op2val:0x7fe5be5e5006178e; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f29, f2, f7, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f16, rs2==f27, rd==f18,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xbc978aa879221 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f16; op2:f27; dest:f18; op1val:0xffdbc978aa879221; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f18, f16, f27, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f10, rs2==f19, rd==f15,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xcd606a3f0f54d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f10; op2:f19; dest:f15; op1val:0xffdcd606a3f0f54d; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f15, f10, f19, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f5, rs2==f31, rd==f28,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe3796147a7f97 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x254bcc7a78811 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f5; op2:f31; dest:f28; op1val:0xffde3796147a7f97; op2val:0x7fe254bcc7a78811; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f28, f5, f31, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f28, rs2==f8, rd==f0,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe7f7bd88d7c8f and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x21f9542fdc1b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f28; op2:f8; dest:f0; op1val:0xffde7f7bd88d7c8f; op2val:0x7fe21f9542fdc1b0; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f0, f28, f8, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f23, rs2==f2, rd==f12,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe809082dd48fb and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f23; op2:f2; dest:f12; op1val:0xffde809082dd48fb; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f12, f23, f2, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f12, rs2==f25, rd==f10,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe8754038aa2cf and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f12; op2:f25; dest:f10; op1val:0xffde8754038aa2cf; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f10, f12, f25, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f4, rs2==f11, rd==f30,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x0410cbbfdec45 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f4; op2:f11; dest:f30; op1val:0xffe0410cbbfdec45; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f30, f4, f11, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f3, rs2==f5, rd==f21,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x05c5ccdf19706 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd51953d9ddca4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f3; op2:f5; dest:f21; op1val:0xffe05c5ccdf19706; op2val:0x7fed51953d9ddca4; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f21, f3, f5, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f11, rs2==f9, rd==f6,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x14c9836bbe6ff and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdd2178215e056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f11; op2:f9; dest:f6; op1val:0xffe14c9836bbe6ff; op2val:0x7fedd2178215e056; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f6, f11, f9, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f0, rs2==f4, rd==f31,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x18ef1d7a9fa74 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x201f96c097d1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f0; op2:f4; dest:f31; op1val:0xffe18ef1d7a9fa74; op2val:0x7fe201f96c097d1c; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f0, f4, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f20, rs2==f17, rd==f13,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x26bbbacf7eaef and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xbb61cc5b43304 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f20; op2:f17; dest:f13; op1val:0xffe26bbbacf7eaef; op2val:0x7febb61cc5b43304; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f13, f20, f17, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f19, rs2==f10, rd==f25,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x2cdc24d268f9f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f19; op2:f10; dest:f25; op1val:0xffe2cdc24d268f9f; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f25, f19, f10, dyn, 0, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f24, rs2==f20, rd==f16,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x314c82f3115df and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf65e46475bdcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f24; op2:f20; dest:f16; op1val:0xffe314c82f3115df; op2val:0x7fef65e46475bdcb; 
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f16, f24, f20, dyn, 0, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f18, rs2==f1, rd==f23,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x39bd67fecd9d5 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f18; op2:f1; dest:f23; op1val:0xffe39bd67fecd9d5; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f23, f18, f1, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f30, rs2==f23, rd==f2,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x39beb50761e3d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f23; dest:f2; op1val:0xffe39beb50761e3d; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f2, f30, f23, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f9, rs2==f29, rd==f5,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x3c9adc7329695 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xbcdd3a7258aa7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f9; op2:f29; dest:f5; op1val:0xffe3c9adc7329695; op2val:0x7febcdd3a7258aa7; 
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f5, f9, f29, dyn, 0, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f31, rs2==f16, rd==f1,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x691ae7e1929e8 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf63ad242f7a0b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f31; op2:f16; dest:f1; op1val:0xffe691ae7e1929e8; op2val:0x7fef63ad242f7a0b; 
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f1, f31, f16, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f8, rs2==f14, rd==f7,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x69c26ac7fce60 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f8; op2:f14; dest:f7; op1val:0xffe69c26ac7fce60; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f7, f8, f14, dyn, 0, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f17, rs2==f22, rd==f19,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x707d21f5c40de and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f17; op2:f22; dest:f19; op1val:0xffe707d21f5c40de; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f19, f17, f22, dyn, 0, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f7, rs2==f28, rd==f20,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x83e4a9485598d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f7; op2:f28; dest:f20; op1val:0xffe83e4a9485598d; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f20, f7, f28, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f15, rs2==f0, rd==f4,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x914e0c751c4f4 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f15; op2:f0; dest:f4; op1val:0xffe914e0c751c4f4; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f4, f15, f0, dyn, 0, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc05b7f6ba0d90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffe962eb496df1c1; op2val:0x7fec05b7f6ba0d90; 
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x9b3a56e2c058e and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffe9b3a56e2c058e; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x9ed4cb2685903 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffe9ed4cb2685903; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffe9f8dcc4f1275c; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xa101ccfb0623a and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffea101ccfb0623a; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xa65214b23e38e and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffea65214b23e38e; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffeb0580f98a7dbd; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xbc366e555215f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffebc366e555215f; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xca428c2b7c81f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffeca428c2b7c81f; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xcbdd58ecc1b45 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffecbdd58ecc1b45; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xcc3488366e29b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffecc3488366e29b; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd0f42c0dfaf72 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffed0f42c0dfaf72; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd1ca42e21585b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffed1ca42e21585b; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd3762f4d1629c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffed3762f4d1629c; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd8c56582791a6 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffed8c56582791a6; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xe64794dad7d48 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffee64794dad7d48; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xed7c3ef329d04 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffeed7c3ef329d04; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xfe1581ecd07ea and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffefe1581ecd07ea; op2val:0x7ff0000000000000; 
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 1 and fe1 == 0x7f5 and fm1 == 0x2b954e52a4bff and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfa980f38509ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xff52b954e52a4bff; op2val:0x7fdfa980f38509ed; 
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 1 and fe1 == 0x7fb and fm1 == 0x49818dfc8788f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x9a1cc86f24be5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffb49818dfc8788f; op2val:0x7fd9a1cc86f24be5; 
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 1 and fe1 == 0x7fb and fm1 == 0xbeb3709a573b7 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x52162165ec222 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffbbeb3709a573b7; op2val:0x7fe52162165ec222; 
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 1 and fe1 == 0x7fc and fm1 == 0x874e2eeac1c13 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x84645048e0d5c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0xffc874e2eeac1c13; op2val:0x7fe84645048e0d5c; 
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 106*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(18397971202035043327,64,FLEN)
NAN_BOXED(18397971202035043327,64,FLEN)
NAN_BOXED(18425519208080636047,64,FLEN)
NAN_BOXED(9212572412572486629,64,FLEN)
NAN_BOXED(18427580921934082999,64,FLEN)
NAN_BOXED(18427580921934082999,64,FLEN)
NAN_BOXED(18431049617306335947,64,FLEN)
NAN_BOXED(9212133229347595375,64,FLEN)
NAN_BOXED(18431109993029442579,64,FLEN)
NAN_BOXED(9216693899656826204,64,FLEN)
NAN_BOXED(18432823120430268499,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18433422287488126063,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18433806814444139271,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18434316797110535277,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18434588036187623253,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18436306019258919287,64,FLEN)
NAN_BOXED(9215981524762367886,64,FLEN)
NAN_BOXED(18436551019665527329,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18436846298556593485,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18437235042229583767,64,FLEN)
NAN_BOXED(9215020957333686289,64,FLEN)
NAN_BOXED(18437314094392245391,64,FLEN)
NAN_BOXED(9214962513487970736,64,FLEN)
NAN_BOXED(18437315282660575483,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18437322719407809231,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18437808397404204101,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18437838428116719366,64,FLEN)
NAN_BOXED(9218113713723006116,64,FLEN)
NAN_BOXED(18438102566068545279,64,FLEN)
NAN_BOXED(9218255010705825878,64,FLEN)
NAN_BOXED(18438175518788024948,64,FLEN)
NAN_BOXED(9214929958324501788,64,FLEN)
NAN_BOXED(18438418278213217007,64,FLEN)
NAN_BOXED(9217661297036112644,64,FLEN)
NAN_BOXED(18438526058809954207,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18438604149402703327,64,FLEN)
NAN_BOXED(9218698993863081419,64,FLEN)
NAN_BOXED(18438752644956477909,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18438752734354480701,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18438803047593449109,64,FLEN)
NAN_BOXED(9217687371269900967,64,FLEN)
NAN_BOXED(18439585902940989928,64,FLEN)
NAN_BOXED(9218696557538277899,64,FLEN)
NAN_BOXED(18439597414231821920,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18439715798342451422,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18440057164308765069,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18440293104894461172,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18440378911933985217,64,FLEN)
NAN_BOXED(9217748824997105040,64,FLEN)
NAN_BOXED(18440467672344561038,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18440531062911686915,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18440543776325838684,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18440569340151489082,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18440662817890886542,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18440839150699183549,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18441047945900269919,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18441295069147809823,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18441323299096763205,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18441329290384958107,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18441412828530192242,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18441427540626200667,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18441456947305734812,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18441550351626113446,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18441787996285795656,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18441914760660425988,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18442206767695595498,64,FLEN)
NAN_BOXED(9218868437227405312,64,FLEN)
NAN_BOXED(18397971202035043327,64,FLEN)
NAN_BOXED(9214269733929814509,64,FLEN)
NAN_BOXED(18425519208080636047,64,FLEN)
NAN_BOXED(9212572412572486629,64,FLEN)
NAN_BOXED(18427580921934082999,64,FLEN)
NAN_BOXED(9215808917649408546,64,FLEN)
NAN_BOXED(18431109993029442579,64,FLEN)
NAN_BOXED(9216693899656826204,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 108*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
