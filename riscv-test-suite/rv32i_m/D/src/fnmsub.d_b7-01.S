
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmsub.d_b7 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmsub.d_b7)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f29, rs2==f17, rs3==f29, rd==f5,fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xdde9bd309bfff and fs2 == 1 and fe2 == 0x40a and fm2 == 0x0ce20c31af6d1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf5f6b12b9e539 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f29; op2:f17; op3:f29; dest:f5; op1val:0x7f3dde9bd309bfff; op2val:0xc0a0ce20c31af6d1;
op3val:0x7f3dde9bd309bfff; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f5, f29, f17, f29, dyn, 96, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rs3 != rd, rs1==f15, rs2==f15, rs3==f15, rd==f18,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0xb61f89440f47f and fs2 == 1 and fe2 == 0x405 and fm2 == 0x6ee13708500d4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x39f14312f9926 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f15; op2:f15; op3:f15; dest:f18; op1val:0x7f7b61f89440f47f; op2val:0x7f7b61f89440f47f;
op3val:0x7f7b61f89440f47f; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f18, f15, f15, f15, dyn, 96, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f8, rs2==f8, rs3==f27, rd==f8,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x69ea30b504aff and fs2 == 1 and fe2 == 0x405 and fm2 == 0x2646ce12646ee and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa0070d4da886b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f8; op2:f8; op3:f27; dest:f8; op1val:0x7f869ea30b504aff; op2val:0x7f869ea30b504aff;
op3val:0x7fea0070d4da886b; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f8, f8, f8, f27, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f25, rs2==f6, rs3==f23, rd==f25,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x867824bb36ebf and fs2 == 1 and fe2 == 0x403 and fm2 == 0xccdc644a53a6b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5f78051c221f1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f25; op2:f6; op3:f23; dest:f25; op1val:0x7f8867824bb36ebf; op2val:0xc03ccdc644a53a6b;
op3val:0x7fd5f78051c221f1; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f25, f25, f6, f23, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f2, rs2==f9, rs3==f9, rd==f3,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x1594af4d0909f and fs2 == 1 and fe2 == 0x402 and fm2 == 0x092aa75fadfe3 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1f8529573e303 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f2; op2:f9; op3:f9; dest:f3; op1val:0x7f91594af4d0909f; op2val:0xc02092aa75fadfe3;
op3val:0xc02092aa75fadfe3; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f3, f2, f9, f9, dyn, 96, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f19, rs2==f7, rs3==f7, rd==f7,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x47899d9bfab7f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xab0378616b563 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x112b7d42952fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f19; op2:f7; op3:f7; dest:f7; op1val:0x7f947899d9bfab7f; op2val:0xc02ab0378616b563;
op3val:0xc02ab0378616b563; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f7, f19, f7, f7, dyn, 96, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rd == rs3 != rs2, rs1==f22, rs2==f20, rs3==f22, rd==f22,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc67642d1c685f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x22fcf4da3d255 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x02498363c72a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f22; op2:f20; op3:f22; dest:f22; op1val:0x7f9c67642d1c685f; op2val:0xc0122fcf4da3d255;
op3val:0x7f9c67642d1c685f; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f22, f22, f20, f22, dyn, 96, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f1, rs2==f2, rs3==f10, rd==f2,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x09d747d656acf and fs2 == 1 and fe2 == 0x401 and fm2 == 0xcac32a6055464 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdc65d1828a66f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f1; op2:f2; op3:f10; dest:f2; op1val:0x7fa09d747d656acf; op2val:0xc01cac32a6055464;
op3val:0x7fcdc65d1828a66f; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f2, f1, f2, f10, dyn, 96, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f4, rs2==f5, rs3==f21, rd==f21,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xad631e03bfddf and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f65c17138980 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x1947b06bb06df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f4; op2:f5; op3:f21; dest:f21; op1val:0x7faad631e03bfddf; op2val:0xbfd4f65c17138980;
op3val:0x7f91947b06bb06df; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f21, f4, f5, f21, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f30, rs2==f29, rs3==f0, rd==f26,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x026946c5d22f7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x3a902b464b971 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3d86a7b5170e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f0; dest:f26; op1val:0x7fb026946c5d22f7; op2val:0xc023a902b464b971;
op3val:0x7fe3d86a7b5170e5; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f26, f30, f29, f0, dyn, 96, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs2 == rs3 == rd, rs1==f12, rs2==f12, rs3==f12, rd==f12,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0733cb8a16eff and fs2 == 1 and fe2 == 0x401 and fm2 == 0xe64ac2cc570b3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf3f931a854791 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f12; op2:f12; op3:f12; dest:f12; op1val:0x7fb0733cb8a16eff; op2val:0x7fb0733cb8a16eff;
op3val:0x7fb0733cb8a16eff; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f12, f12, f12, f12, dyn, 96, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f16, rs2==f16, rs3==f18, rd==f0,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x19190aff198d7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x55d90ac8acf1f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x775cadb7732b2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f16; op2:f16; op3:f18; dest:f0; op1val:0x7fb19190aff198d7; op2val:0x7fb19190aff198d7;
op3val:0x7fe775cadb7732b2; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f0, f16, f16, f18, dyn, 96, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f6, rs2==f22, rs3==f8, rd==f24,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x248a2b9dc22bf and fs2 == 1 and fe2 == 0x402 and fm2 == 0x94afcaf5ecd01 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xce72ef36d4887 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f6; op2:f22; op3:f8; dest:f24; op1val:0x7fb248a2b9dc22bf; op2val:0xc0294afcaf5ecd01;
op3val:0x7fece72ef36d4887; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f24, f6, f22, f8, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f9, rs2==f4, rs3==f26, rd==f13,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2ff6df700902f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x39cbd1f30ae3d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x7496d93c498a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f9; op2:f4; op3:f26; dest:f13; op1val:0x7fb2ff6df700902f; op2val:0xc0039cbd1f30ae3d;
op3val:0x7fc7496d93c498a7; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f13, f9, f4, f26, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f23, rs2==f19, rs3==f11, rd==f17,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x3214cec4f02a7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x7a4f227c432a8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc45156f5ef3d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f23; op2:f19; op3:f11; dest:f17; op1val:0x7fb3214cec4f02a7; op2val:0xc017a4f227c432a8;
op3val:0x7fdc45156f5ef3d5; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f17, f23, f19, f11, dyn, 96, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f10, rs2==f13, rs3==f4, rd==f1,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x514946dea89af and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0cd64e8e6aedb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x623310f24dc1d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f10; op2:f13; op3:f4; dest:f1; op1val:0x7fb514946dea89af; op2val:0xc010cd64e8e6aedb;
op3val:0x7fd623310f24dc1d; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f1, f10, f13, f4, dyn, 96, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f21, rs2==f26, rs3==f14, rd==f27,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5ceb3a4610497 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x73ce7e402e9c5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xfac256cfaefff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f21; op2:f26; op3:f14; dest:f27; op1val:0x7fb5ceb3a4610497; op2val:0xc0073ce7e402e9c5;
op3val:0x7fcfac256cfaefff; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f27, f21, f26, f14, dyn, 96, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f5, rs2==f24, rs3==f19, rd==f30,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6a765d18ad757 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x1ecae86040a4a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x960f866a938a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f5; op2:f24; op3:f19; dest:f30; op1val:0x7fb6a765d18ad757; op2val:0xc021ecae86040a4a;
op3val:0x7fe960f866a938a1; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f30, f5, f24, f19, dyn, 96, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f26, rs2==f27, rs3==f30, rd==f20,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6edc5cf85ef57 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4eacecd7619ad and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdf9b50c24f6a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f26; op2:f27; op3:f30; dest:f20; op1val:0x7fb6edc5cf85ef57; op2val:0xc004eacecd7619ad;
op3val:0x7fcdf9b50c24f6a7; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f20, f26, f27, f30, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f17, rs2==f31, rs3==f20, rd==f29,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7bb00e40af987 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa3250909e0242 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x36d40a96e2702 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f17; op2:f31; op3:f20; dest:f29; op1val:0x7fb7bb00e40af987; op2val:0xc01a3250909e0242;
op3val:0x7fe36d40a96e2702; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f29, f17, f31, f20, dyn, 96, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f7, rs2==f21, rs3==f28, rd==f11,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7e4d8df512217 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bcdc8e99090c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef8196afef124 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f7; op2:f21; op3:f28; dest:f11; op1val:0x7fb7e4d8df512217; op2val:0xc024bcdc8e99090c;
op3val:0x7feef8196afef124; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f11, f7, f21, f28, dyn, 96, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f18, rs2==f11, rs3==f24, rd==f19,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8593de116cc97 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcaf1cf18888e5 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x5d35435390a1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f18; op2:f11; op3:f24; dest:f19; op1val:0x7fb8593de116cc97; op2val:0xbfecaf1cf18888e5;
op3val:0x7fb5d35435390a1f; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f19, f18, f11, f24, dyn, 96, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f20, rs2==f1, rs3==f6, rd==f10,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x88923b085558f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5536149f15187 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x059edb8cf69d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f20; op2:f1; op3:f6; dest:f10; op1val:0x7fb88923b085558f; op2val:0xc015536149f15187;
op3val:0x7fe059edb8cf69d2; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f10, f20, f1, f6, dyn, 96, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f11, rs2==f0, rs3==f1, rd==f16,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8fd64f104922f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc4805d18fc4ef and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x615f701415147 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f11; op2:f0; op3:f1; dest:f16; op1val:0x7fb8fd64f104922f; op2val:0xc01c4805d18fc4ef;
op3val:0x7fe615f701415147; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f16, f11, f0, f1, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f14, rs2==f23, rs3==f2, rd==f6,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9b96ad61b8517 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x0d2384f21b3e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0b66f8854ad1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f14; op2:f23; op3:f2; dest:f6; op1val:0x7fb9b96ad61b8517; op2val:0xc020d2384f21b3e4;
op3val:0x7feb0b66f8854ad1; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f6, f14, f23, f2, dyn, 96, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f24, rs2==f28, rs3==f17, rd==f4,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb31d4a35e8377 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd1d1a7b35ff40 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x8bde45df3e64f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f24; op2:f28; op3:f17; dest:f4; op1val:0x7fbb31d4a35e8377; op2val:0xbffd1d1a7b35ff40;
op3val:0x7fc8bde45df3e64f; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f4, f24, f28, f17, dyn, 96, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f3, rs2==f30, rs3==f31, rd==f23,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb451e3874fb5f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x38fcb11afbbe8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0ab93de1bf057 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f3; op2:f30; op3:f31; dest:f23; op1val:0x7fbb451e3874fb5f; op2val:0xc0138fcb11afbbe8;
op3val:0x7fe0ab93de1bf057; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f23, f3, f30, f31, dyn, 96, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f0, rs2==f18, rs3==f5, rd==f31,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbe8131e41b317 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xddec76e881c68 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xa0c9943a8cb0f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f0; op2:f18; op3:f5; dest:f31; op1val:0x7fbbe8131e41b317; op2val:0xbfdddec76e881c68;
op3val:0x7faa0c9943a8cb0f; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f0, f18, f5, dyn, 96, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f13, rs2==f25, rs3==f3, rd==f9,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd9ca9c072558f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x43f0bfabd4d96 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x2bc419c5bcbff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f13; op2:f25; op3:f3; dest:f9; op1val:0x7fbd9ca9c072558f; op2val:0xbfd43f0bfabd4d96;
op3val:0x7fa2bc419c5bcbff; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f9, f13, f25, f3, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f31, rs2==f14, rs3==f25, rd==f28,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdf67f13fc58ef and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc57cdc5caf411 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa89e6074cc2c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f31; op2:f14; op3:f25; dest:f28; op1val:0x7fbdf67f13fc58ef; op2val:0xc01c57cdc5caf411;
op3val:0x7fea89e6074cc2c8; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f28, f31, f14, f25, dyn, 96, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f28, rs2==f3, rs3==f16, rd==f14,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe1e96125bce6f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xf64a178eb0018 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd8c58f2753eb8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f28; op2:f3; op3:f16; dest:f14; op1val:0x7fbe1e96125bce6f; op2val:0xc01f64a178eb0018;
op3val:0x7fed8c58f2753eb8; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f14, f28, f3, f16, dyn, 96, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f27, rs2==f10, rs3==f13, rd==f15,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe565043c78b57 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa1194be67efe0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8b6cc156c6281 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f27; op2:f10; op3:f13; dest:f15; op1val:0x7fbe565043c78b57; op2val:0xc00a1194be67efe0;
op3val:0x7fd8b6cc156c6281; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f15, f27, f10, f13, dyn, 96, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf3cd5c37880ef and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3097fb596dc72 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29564b2e243ae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf3cd5c37880ef; op2val:0xc013097fb596dc72;
op3val:0x7fe29564b2e243ae; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb13405d2f337 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7d0e06dcb555e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x7963b7b7e9ca3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbfb13405d2f337; op2val:0xbff7d0e06dcb555e;
op3val:0x7fc7963b7b7e9ca3; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x02b9c63170177 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x65108518b1961 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x68ddc382cd441 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc02b9c63170177; op2val:0xc0165108518b1961;
op3val:0x7fe68ddc382cd441; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x04ec24c48f46f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xe47d4e6273138 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xedce2cb5ddc00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc04ec24c48f46f; op2val:0xc01e47d4e6273138;
op3val:0x7feedce2cb5ddc00; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0facf539b36eb and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3b5f8327035bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4eaf2e1be8991 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0facf539b36eb; op2val:0xc003b5f8327035bc;
op3val:0x7fd4eaf2e1be8991; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x146e28288654f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x6a65d1abb3471 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8751b6a67be4c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc146e28288654f; op2val:0xc016a65d1abb3471;
op3val:0x7fe8751b6a67be4c; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x182d4d05a7a1b and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1d80ca8607ab6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3877630c3d546 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc182d4d05a7a1b; op2val:0xc011d80ca8607ab6;
op3val:0x7fe3877630c3d546; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x19375c3ff54f7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x7ceee1d9371af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa274967ef821e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc19375c3ff54f7; op2val:0xc017ceee1d9371af;
op3val:0x7fea274967ef821e; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x202582edc5f4b and fs2 == 1 and fe2 == 0x401 and fm2 == 0x42edc3e780c99 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6b7acdea6ea7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc202582edc5f4b; op2val:0xc0142edc3e780c99;
op3val:0x7fe6b7acdea6ea7f; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x23193c9b51c5f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcfc38ddf1affa and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x07ac811455a27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc23193c9b51c5f; op2val:0xbfdcfc38ddf1affa;
op3val:0x7fb07ac811455a27; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2b387f811514b and fs2 == 1 and fe2 == 0x401 and fm2 == 0x689cfd4493163 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa57ef1c2353dc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2b387f811514b; op2val:0xc01689cfd4493163;
op3val:0x7fea57ef1c2353dc; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2c89b97e90d0b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf70b2cb5e3e64 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2747dcefede45 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2c89b97e90d0b; op2val:0xbfff70b2cb5e3e64;
op3val:0x7fd2747dcefede45; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2e9ddc1315733 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf99a1042c9a2c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2ad5c2a86cccb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2e9ddc1315733; op2val:0xbfef99a1042c9a2c;
op3val:0x7fc2ad5c2a86cccb; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x440d55f6ea477 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8cece19f118c6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf6707ade45137 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc440d55f6ea477; op2val:0xc008cece19f118c6;
op3val:0x7fdf6707ade45137; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x47249e2836ab7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x988851adc3195 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x050847f25fcc9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc47249e2836ab7; op2val:0xbff988851adc3195;
op3val:0x7fd050847f25fcc9; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4b2b448e26087 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7bdcdaf815b17 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xeb66c2f122d2b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4b2b448e26087; op2val:0xbff7bdcdaf815b17;
op3val:0x7fceb66c2f122d2b; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5c7b4891b239f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x47af1b2ab65ea and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbe0fd6f3db629 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5c7b4891b239f; op2val:0xc0047af1b2ab65ea;
op3val:0x7fdbe0fd6f3db629; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x69d9455642ef7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0f74ce31a35c9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7fb21a4cbb3bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc69d9455642ef7; op2val:0xc010f74ce31a35c9;
op3val:0x7fe7fb21a4cbb3bb; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6c21605667de7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5d1cec22164e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf092a3db96063 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6c21605667de7; op2val:0xc015d1cec22164e4;
op3val:0x7fef092a3db96063; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x739c186513fff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1dd3e909ec25c and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x9ee863181c0ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc739c186513fff; op2val:0xbfe1dd3e909ec25c;
op3val:0x7fb9ee863181c0ef; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x762a114c4a463 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbe63037be445f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x463700bf95fa7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc762a114c4a463; op2val:0xbfebe63037be445f;
op3val:0x7fc463700bf95fa7; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7a2bec72ec167 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x91fdd049c0029 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28eadf3ca9d58 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7a2bec72ec167; op2val:0xc0091fdd049c0029;
op3val:0x7fe28eadf3ca9d58; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x89b052e5b805f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x14820ad9ea9fd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa93a1599c5921 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc89b052e5b805f; op2val:0xc0114820ad9ea9fd;
op3val:0x7fea93a1599c5921; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8d035325f0f1f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3855081369ebd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe45febf70f5c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8d035325f0f1f; op2val:0xc013855081369ebd;
op3val:0x7fee45febf70f5c4; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x94c88e4f0cf23 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x84fbc0814218a and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3387045b11b73 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc94c88e4f0cf23; op2val:0xbfe84fbc0814218a;
op3val:0x7fc3387045b11b73; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x97d55ffd8cfc3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x1d8d12c330d85 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xc6e94a471ab3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc97d55ffd8cfc3; op2val:0xbfc1d8d12c330d85;
op3val:0x7f9c6e94a471ab3f; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9a4834042f46b and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe272825b3f5b6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8299bb80f93f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9a4834042f46b; op2val:0xc00e272825b3f5b6;
op3val:0x7fe8299bb80f93f8; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9d4da5f91b60b and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe625ff0c95f03 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x886f608a4881b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9d4da5f91b60b; op2val:0xc00e625ff0c95f03;
op3val:0x7fe886f608a4881b; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xaae52ab408ef7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa95da6d4d9ef0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62a94fac788fd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcaae52ab408ef7; op2val:0xc00a95da6d4d9ef0;
op3val:0x7fe62a94fac788fd; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbd6d7a918a7d3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x35dc4acfae10b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0d9238990086e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcbd6d7a918a7d3; op2val:0xc0035dc4acfae10b;
op3val:0x7fe0d9238990086e; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc277c8581da67 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1bda5c4f32f02 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf37aa6e86c68b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc277c8581da67; op2val:0xbff1bda5c4f32f02;
op3val:0x7fcf37aa6e86c68b; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc450d76cf78bf and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa2d6d4d00d8f3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7203c9ab46a9e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc450d76cf78bf; op2val:0xc00a2d6d4d00d8f3;
op3val:0x7fe7203c9ab46a9e; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc7e4481507757 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5123d30a2c3a3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c31a77667645 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc7e4481507757; op2val:0xbff5123d30a2c3a3;
op3val:0x7fd2c31a77667645; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xca1287a1e1143 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x534480d8afcc5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2f888e8a31089 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcca1287a1e1143; op2val:0xbff534480d8afcc5;
op3val:0x7fd2f888e8a31089; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xcddd3f0d097ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc066f9349c37f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x947e7b0c8676f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fccddd3f0d097ff; op2val:0xbfec066f9349c37f;
op3val:0x7fc947e7b0c8676f; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd04b295ed34fb and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0fa8eca9ef80d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xecb1ef58060d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd04b295ed34fb; op2val:0xc010fa8eca9ef80d;
op3val:0x7feecb1ef58060d8; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd5e1b252f8cc7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x254eb89972a84 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0d2de75895463 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd5e1b252f8cc7; op2val:0xc00254eb89972a84;
op3val:0x7fe0d2de75895463; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xda8fa02398053 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc512cfbccef62 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa3f182c831101 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcda8fa02398053; op2val:0xbffc512cfbccef62;
op3val:0x7fda3f182c831101; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe2d8d47a11123 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8c86dcc5daa2c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x75f2e349c7109 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce2d8d47a11123; op2val:0xbff8c86dcc5daa2c;
op3val:0x7fd75f2e349c7109; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe49bf6b84fb07 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4137329f2e964 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x300806d974620 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce49bf6b84fb07; op2val:0xc004137329f2e964;
op3val:0x7fe300806d974620; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0314353474735 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5f19c1e94fb0f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6352c62a77f0c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0314353474735; op2val:0xc005f19c1e94fb0f;
op3val:0x7fe6352c62a77f0c; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x088ea90c6ff9b and fs2 == 1 and fe2 == 0x400 and fm2 == 0xeb474ec646f44 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfbb34f341c62f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd088ea90c6ff9b; op2val:0xc00eb474ec646f44;
op3val:0x7fefbb34f341c62f; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d6d9e276468b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfc31a1d4dfcc0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0b6ce111b5c87 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d6d9e276468b; op2val:0xbfffc31a1d4dfcc0;
op3val:0x7fe0b6ce111b5c87; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x10fe8e893ab09 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaadcb3c74f928 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc732f3a961fdd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd10fe8e893ab09; op2val:0xbffaadcb3c74f928;
op3val:0x7fdc732f3a961fdd; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x113f1b844ec29 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9632c0ae546d6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb19041a09c655 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd113f1b844ec29; op2val:0xbff9632c0ae546d6;
op3val:0x7fdb19041a09c655; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x156275fe8f527 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8cac67902478e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xadcf1ce3d91c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd156275fe8f527; op2val:0xbff8cac67902478e;
op3val:0x7fdadcf1ce3d91c7; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1884b07e4d3f5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x108b042ae0ec7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2aa5502315a55 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1884b07e4d3f5; op2val:0xbff108b042ae0ec7;
op3val:0x7fd2aa5502315a55; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x19f22109082cd and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa7ac56fae58bd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd29ce30fc8f06 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd19f22109082cd; op2val:0xc00a7ac56fae58bd;
op3val:0x7fed29ce30fc8f06; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1bfc29ff6502b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9a092e00940b8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc6dc0a2875875 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1bfc29ff6502b; op2val:0xc009a092e00940b8;
op3val:0x7fec6dc0a2875875; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1f972c8c86e17 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1e13633e735e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4160ab7aeb8fd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1f972c8c86e17; op2val:0xc001e13633e735e4;
op3val:0x7fe4160ab7aeb8fd; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x297799b2d1a29 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0e1e723960ff3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x39df84d88ad64 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd297799b2d1a29; op2val:0xc000e1e723960ff3;
op3val:0x7fe39df84d88ad64; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x333eee8ee8eaf and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x68e01fd522def and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xb11d7cbe20aff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd333eee8ee8eaf; op2val:0xbfa68e01fd522def;
op3val:0x7f8b11d7cbe20aff; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3374f4917467f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7681937efb464 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc1c87c6067237 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3374f4917467f; op2val:0xbfe7681937efb464;
op3val:0x7fcc1c87c6067237; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3c3aa2a20fed5 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x19e70c654c93c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5c39c4bc85118 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3c3aa2a20fed5; op2val:0xc0019e70c654c93c;
op3val:0x7fe5c39c4bc85118; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x407cbd765f6c9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8e87f9fe2cebe and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf2ec294d7a0ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd407cbd765f6c9; op2val:0xbff8e87f9fe2cebe;
op3val:0x7fdf2ec294d7a0ff; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x41d731839251b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8de0b0eb7abe6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf435328059ed8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd41d731839251b; op2val:0xc008de0b0eb7abe6;
op3val:0x7fef435328059ed8; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4209b39e93b15 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x09fd4f0f63f97 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4e9ab1fa055d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4209b39e93b15; op2val:0xc0009fd4f0f63f97;
op3val:0x7fe4e9ab1fa055d8; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x46f51e9c754bb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdb99be9d57d16 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2fb695df3d2d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd46f51e9c754bb; op2val:0xbfedb99be9d57d16;
op3val:0x7fd2fb695df3d2d1; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4798f9e532ab7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xefa099119afbb and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x3d1f2757a887f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4798f9e532ab7; op2val:0xbfbefa099119afbb;
op3val:0x7fa3d1f2757a887f; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4e9aa5a5cfc59 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5975e9a73cea2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc388874f810d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4e9aa5a5cfc59; op2val:0xc005975e9a73cea2;
op3val:0x7fec388874f810d7; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x50f79b288afb1 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4c700856717f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb5949485fb66b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd50f79b288afb1; op2val:0xc004c700856717f5;
op3val:0x7feb5949485fb66b; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x57633aac1d8f9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x25ab153000dbd and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x89ea0ddab65f1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd57633aac1d8f9; op2val:0xbff25ab153000dbd;
op3val:0x7fd89ea0ddab65f1; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a8fa51e01729 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x05747d4624e5b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61f2260581ec6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a8fa51e01729; op2val:0xc0005747d4624e5b;
op3val:0x7fe61f2260581ec6; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x629676776233d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x12d3e1a97ed28 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7caa85606e9e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd629676776233d; op2val:0xbff12d3e1a97ed28;
op3val:0x7fd7caa85606e9e3; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x635fadb002c93 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x01ca2f77e892c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65dbb8c1c4e5a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd635fadb002c93; op2val:0xc0001ca2f77e892c;
op3val:0x7fe65dbb8c1c4e5a; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x64a61b2705e87 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5ecc06ddc602f and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe8b7570dd9117 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd64a61b2705e87; op2val:0xbfd5ecc06ddc602f;
op3val:0x7fbe8b7570dd9117; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6d41e8ed71efb and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3b18a1995caa2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc1933e5b458c9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6d41e8ed71efb; op2val:0xc003b18a1995caa2;
op3val:0x7fec1933e5b458c9; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6d9e0d2d33041 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7b4cfe3c910b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0edb79c3929b3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6d9e0d2d33041; op2val:0xbff7b4cfe3c910b1;
op3val:0x7fe0edb79c3929b3; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6e1239fbcd9bb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd407f8a762693 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4ea25c0876463 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6e1239fbcd9bb; op2val:0xbfed407f8a762693;
op3val:0x7fd4ea25c0876463; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6f75e86b4d615 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd6e08ee13167e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x51f2667b8135f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6f75e86b4d615; op2val:0xbfcd6e08ee13167e;
op3val:0x7fb51f2667b8135f; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x70cecd93ab031 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1f0d2da59d1ce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9d8ad4bbeefe0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd70cecd93ab031; op2val:0xc001f0d2da59d1ce;
op3val:0x7fe9d8ad4bbeefe0; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7125b03de66b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0435db19e39e0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7737efbced80d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7125b03de66b1; op2val:0xbff0435db19e39e0;
op3val:0x7fd7737efbced80d; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x720b06dbdd02f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa960389926ad1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x336fb22aaf2de and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd720b06dbdd02f; op2val:0xbffa960389926ad1;
op3val:0x7fe336fb22aaf2de; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x723aa36c1bffb and fs2 == 1 and fe2 == 0x400 and fm2 == 0x38b818e854ba8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc441b556b6d2f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd723aa36c1bffb; op2val:0xc0038b818e854ba8;
op3val:0x7fec441b556b6d2f; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x72e022d627e41 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2e2b2b62a9bc3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb5c2f3991295b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd72e022d627e41; op2val:0xbff2e2b2b62a9bc3;
op3val:0x7fdb5c2f3991295b; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x74d6236a255a7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3009a54217a26 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbacc5643918af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd74d6236a255a7; op2val:0xbff3009a54217a26;
op3val:0x7fdbacc5643918af; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x75e2840b109b1 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x17f1d561b8769 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x98db0fca8d9cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd75e2840b109b1; op2val:0xc0017f1d561b8769;
op3val:0x7fe98db0fca8d9cd; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x78fa7720992f5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8e84e96db73d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x506a1d743e4ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd78fa7720992f5; op2val:0xbfec8e84e96db73d;
op3val:0x7fd506a1d743e4ed; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a1da7e7448ff and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4656f484db9bd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe20232ef68b0e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a1da7e7448ff; op2val:0xc004656f484db9bd;
op3val:0x7fee20232ef68b0e; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7ad9ffb075d81 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4ba49b01ae611 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeacb76a570238 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7ad9ffb075d81; op2val:0xc004ba49b01ae611;
op3val:0x7feeacb76a570238; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7c66c540d8697 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x45865e7587479 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe3b62292f319a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7c66c540d8697; op2val:0xc0045865e7587479;
op3val:0x7fee3b62292f319a; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x81f8e726306f5 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1b5321f55711f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xab2b7e6d25349 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd81f8e726306f5; op2val:0xc001b5321f55711f;
op3val:0x7feab2b7e6d25349; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8242100dca0f9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc07f8eef0e1ce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x525a0943b7292 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8242100dca0f9; op2val:0xbffc07f8eef0e1ce;
op3val:0x7fe525a0943b7292; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x842c58dceda19 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3338f0c18cf59 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd1d785536fc77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd842c58dceda19; op2val:0xbfd3338f0c18cf59;
op3val:0x7fbd1d785536fc77; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x88d4e71a02669 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6cc68d69914fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x17dfb3217d8f5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd88d4e71a02669; op2val:0xbff6cc68d69914fb;
op3val:0x7fe17dfb3217d8f5; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b9addd44022d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7c234c6e11860 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25b836c7ba599 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b9addd44022d; op2val:0xbff7c234c6e11860;
op3val:0x7fe25b836c7ba599; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8d40490ac7d8f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb0071646f99fc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f33bd4aecdff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8d40490ac7d8f; op2val:0xbffb0071646f99fc;
op3val:0x7fe4f33bd4aecdff; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8ea2a8130a9c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1b9347b568bb2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb99326dd285d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8ea2a8130a9c7; op2val:0xbff1b9347b568bb2;
op3val:0x7fdb99326dd285d9; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9333f76881ce7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd52954ff826d9 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7177a6ba48755 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9333f76881ce7; op2val:0xbfed52954ff826d9;
op3val:0x7fd7177a6ba48755; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x938857841a6c3 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6b4625cb69e4f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x1e507379cc22f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd938857841a6c3; op2val:0xbfb6b4625cb69e4f;
op3val:0x7fa1e507379cc22f; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x95c6370ee1ae1 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad6f9f65ea471 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x54570beebb313 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd95c6370ee1ae1; op2val:0xbfdad6f9f65ea471;
op3val:0x7fc54570beebb313; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9666d669e8025 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbf104530d91f7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62dbb253cb3e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9666d669e8025; op2val:0xbffbf104530d91f7;
op3val:0x7fe62dbb253cb3e3; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x98bf4aad86b69 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xed191153052a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x89a83493dcccb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd98bf4aad86b69; op2val:0xbffed191153052a1;
op3val:0x7fe89a83493dcccb; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa172a2bcb69dd and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1b3be19e7ca6e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcddb5f3a506a8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda172a2bcb69dd; op2val:0xc001b3be19e7ca6e;
op3val:0x7fecddb5f3a506a8; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa19c179642429 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa83e9f040ce81 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5a08572291237 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda19c179642429; op2val:0xbfda83e9f040ce81;
op3val:0x7fc5a08572291237; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa5afa91f4d019 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc148c7418236d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x72087c9f75b61 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda5afa91f4d019; op2val:0xbfec148c7418236d;
op3val:0x7fd72087c9f75b61; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa8731a9e048e1 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x196881363d79d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2939d3631d06 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda8731a9e048e1; op2val:0xc00196881363d79d;
op3val:0x7fed2939d3631d06; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xabfdbceaa033f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x354bf7256e5f7 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x028c22c6f8ca7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdabfdbceaa033f; op2val:0xbfd354bf7256e5f7;
op3val:0x7fc028c22c6f8ca7; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb3bd4f483470b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7b2ecb82e7b0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x42b47565097ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb3bd4f483470b; op2val:0xbff7b2ecb82e7b0a;
op3val:0x7fe42b47565097ca; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc207ffc1da90f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa69e8047c574a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7377e905c992f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc207ffc1da90f; op2val:0xbffa69e8047c574a;
op3val:0x7fe7377e905c992f; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc2d798dafdbff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x501057eef9d03 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x27ebe07a8e085 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc2d798dafdbff; op2val:0xbfe501057eef9d03;
op3val:0x7fd27ebe07a8e085; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc41ed58f7b549 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x82a3c00a17876 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x556bd866a29f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc41ed58f7b549; op2val:0xbfc82a3c00a17876;
op3val:0x7fb556bd866a29f7; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc6889319be047 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e7d7ed50a69e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1abe3c4da410d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc6889319be047; op2val:0xbfe3e7d7ed50a69e;
op3val:0x7fd1abe3c4da410d; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc8c236b41da73 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdfc1448c7eab9 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xabfe1c8a4202d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc8c236b41da73; op2val:0xbfedfc1448c7eab9;
op3val:0x7fdabfe1c8a4202d; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc8ee428e4234b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf085b595f057d and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xbb1e246c2472f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc8ee428e4234b; op2val:0xbfcf085b595f057d;
op3val:0x7fbbb1e246c2472f; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc95b6834a513d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x571689b671eff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3278de40ad810 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc95b6834a513d; op2val:0xbff571689b671eff;
op3val:0x7fe3278de40ad810; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcac7b672f19fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c7c55fe97634 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x54efa2d5c7af7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcac7b672f19fb; op2val:0xbfe7c7c55fe97634;
op3val:0x7fd54efa2d5c7af7; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcb8a2f42f7231 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e73dd72c7707 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe57bba7030141 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcb8a2f42f7231; op2val:0xbff0e73dd72c7707;
op3val:0x7fde57bba7030141; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcf8dc152eee09 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1e09f3ceb5953 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x02f931b82714f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcf8dc152eee09; op2val:0xbfd1e09f3ceb5953;
op3val:0x7fc02f931b82714f; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd001f2b1fb2eb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x17a4c0d8855cc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xfadcbe495c283 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd001f2b1fb2eb; op2val:0xbff17a4c0d8855cc;
op3val:0x7fdfadcbe495c283; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd3636cae4d457 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07a035664ac88 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe14fa44955f8d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd3636cae4d457; op2val:0xbff07a035664ac88;
op3val:0x7fde14fa44955f8d; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd9cba9bad8a1f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe0a536bf411b4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbcc7d1ead46ec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd9cba9bad8a1f; op2val:0xbffe0a536bf411b4;
op3val:0x7febcc7d1ead46ec; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe025360c62eab and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe3111a70f5e9d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc5032484cd393 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde025360c62eab; op2val:0xbfde3111a70f5e9d;
op3val:0x7fcc5032484cd393; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1630bfa19bf3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x70477f6f3bab5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5a4269a8923ba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1630bfa19bf3; op2val:0xbff70477f6f3bab5;
op3val:0x7fe5a4269a8923ba; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe48b53e5259dd and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4e632290decfe and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3c74b5618ef7b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde48b53e5259dd; op2val:0xbfd4e632290decfe;
op3val:0x7fc3c74b5618ef7b; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe74b5aeaa06e5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x133276e26f739 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x05eb00d6c65ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde74b5aeaa06e5; op2val:0xbfd133276e26f739;
op3val:0x7fc05eb00d6c65ef; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe8199d6bf2075 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6ca82f8b2b8c5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5ba28ba56be83 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde8199d6bf2075; op2val:0xbfd6ca82f8b2b8c5;
op3val:0x7fc5ba28ba56be83; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe8f7516b26c75 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf5b3411615fe9 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdf2131cacddff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde8f7516b26c75; op2val:0xbfef5b3411615fe9;
op3val:0x7fddf2131cacddff; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xed179c754050b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x062d8b9cd273d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf8fde43062226 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fded179c754050b; op2val:0xc00062d8b9cd273d;
op3val:0x7fef8fde43062226; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xefa777702c2a3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x331b33369d10a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x294d3f069c01d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdefa777702c2a3; op2val:0xbff331b33369d10a;
op3val:0x7fe294d3f069c01d; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf10684294ae55 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2bda24ef5c403 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x231511cf3434e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf10684294ae55; op2val:0xbff2bda24ef5c403;
op3val:0x7fe231511cf3434e; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf2305a3653ad3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2aaf9e59da9ce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x22a1061cce3b1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf2305a3653ad3; op2val:0xbff2aaf9e59da9ce;
op3val:0x7fe22a1061cce3b1; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf324352b44321 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1fc63b9ed6e30 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x188c0cedd63fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf324352b44321; op2val:0xbff1fc63b9ed6e30;
op3val:0x7fe188c0cedd63fc; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf5613eef2cd43 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7f4b6834b9588 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7758165e043b1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf5613eef2cd43; op2val:0xbfe7f4b6834b9588;
op3val:0x7fd7758165e043b1; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf5b36ce94de89 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x145f9b80c442c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0ed067e077ed4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf5b36ce94de89; op2val:0xbff145f9b80c442c;
op3val:0x7fe0ed067e077ed4; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa351e93f46f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x72a7180e0f8e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6e759734c92ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfa351e93f46f3; op2val:0xbff72a7180e0f8e6;
op3val:0x7fe6e759734c92ab; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfcc6a637c275d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x58d1ee7a14f0a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x56a613bdf7d27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfcc6a637c275d; op2val:0xbfe58d1ee7a14f0a;
op3val:0x7fd56a613bdf7d27; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfd85c073a2591 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4e465e00c7596 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4ca84761136ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfd85c073a2591; op2val:0xbff4e465e00c7596;
op3val:0x7fe4ca84761136ef; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x003d8b5468f68 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7d1b7ee173818 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d771dda46663 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe003d8b5468f68; op2val:0xbfe7d1b7ee173818;
op3val:0x7fd7d771dda46663; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02854e5f3f4fe and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x670d267bf2de6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6a9638898190a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02854e5f3f4fe; op2val:0xbff670d267bf2de6;
op3val:0x7fe6a9638898190a; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02a9411470814 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1ccae318beef2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1fc0c3351c6ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02a9411470814; op2val:0xbff1ccae318beef2;
op3val:0x7fe1fc0c3351c6ea; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x031889b4cc6ff and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc002f53e744de and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc56def632a9ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe031889b4cc6ff; op2val:0xbffc002f53e744de;
op3val:0x7fec56def632a9ed; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x03cc30fa6fa7d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x61d074b685728 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x67101be2e03ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe03cc30fa6fa7d; op2val:0xbff61d074b685728;
op3val:0x7fe67101be2e03ab; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0438d6699b1fd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x93fc99f300170 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9aa63df84957d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0438d6699b1fd; op2val:0xbfe93fc99f300170;
op3val:0x7fd9aa63df84957d; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x05468ef3afcd9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5d9b440942b05 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x64cfa80af5ba9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe05468ef3afcd9; op2val:0xbff5d9b440942b05;
op3val:0x7fe64cfa80af5ba9; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x086dc6df6d69a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1bc4233488ea0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x251bf34286ec8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe086dc6df6d69a; op2val:0xbff1bc4233488ea0;
op3val:0x7fe251bf34286ec8; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a4486b99b8cd and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xc0ea2f855ba07 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd2eb7fd53f81f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a4486b99b8cd; op2val:0xbfcc0ea2f855ba07;
op3val:0x7fbd2eb7fd53f81f; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0a49783a56efe and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x539b88e9ad45c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6141131b256bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0a49783a56efe; op2val:0xbff539b88e9ad45c;
op3val:0x7fe6141131b256bf; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0eb469d232dd1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedab53b8874e2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x05034d6a0d355 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0eb469d232dd1; op2val:0xbfeedab53b8874e2;
op3val:0x7fe05034d6a0d355; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x14fd99beccd42 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3bc324d34334d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55a7313221bb2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe14fd99beccd42; op2val:0xbff3bc324d34334d;
op3val:0x7fe55a7313221bb2; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x173639df21bb6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb871e376537e7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe0616a7d30d7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe173639df21bb6; op2val:0xbffb871e376537e7;
op3val:0x7fee0616a7d30d7f; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x183cc39ad8cfe and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc8de4d41b0028 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf41f95afa16a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe183cc39ad8cfe; op2val:0xbffc8de4d41b0028;
op3val:0x7fef41f95afa16a1; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18521c41ce240 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x72dbb4f8ea2dc and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9617413f94123 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe18521c41ce240; op2val:0xbfd72dbb4f8ea2dc;
op3val:0x7fc9617413f94123; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x188507043a46b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x306a14dac3753 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4d92364408f62 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe188507043a46b; op2val:0xbff306a14dac3753;
op3val:0x7fe4d92364408f62; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1a94e2b55099c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4b5012e02f7ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6db6e47d3685b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1a94e2b55099c; op2val:0xbff4b5012e02f7ff;
op3val:0x7fe6db6e47d3685b; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c98cb7254e01 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x530bc13c4d12b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x78eb66cb5f2e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c98cb7254e01; op2val:0xbff530bc13c4d12b;
op3val:0x7fe78eb66cb5f2e0; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1e9418fa46cc2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1c0ae1325eccf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3df879972d51e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1e9418fa46cc2; op2val:0xbff1c0ae1325eccf;
op3val:0x7fe3df879972d51e; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f0fa935a5b41 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30a978c78c3e8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55a0a1b582f09 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1f0fa935a5b41; op2val:0xbff30a978c78c3e8;
op3val:0x7fe55a0a1b582f09; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f7c8c8b1483a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x132257c28877c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x34f95c11dae89 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1f7c8c8b1483a; op2val:0xbfe132257c28877c;
op3val:0x7fd34f95c11dae89; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x202c7cadf810e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa9c02f3b5b7da and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdf4231854f700 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe202c7cadf810e; op2val:0xbffa9c02f3b5b7da;
op3val:0x7fedf4231854f700; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x220a4162f63fa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xae417589b5d6d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe777639989234 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe220a4162f63fa; op2val:0xbffae417589b5d6d;
op3val:0x7fee777639989234; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26dbf6d35aaaa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1cc2a8b49858b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x47fc3ad3e0dd0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe26dbf6d35aaaa; op2val:0xbff1cc2a8b49858b;
op3val:0x7fe47fc3ad3e0dd0; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2822bdbe20053 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4601e7e84cccf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x791e7206ec0ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2822bdbe20053; op2val:0xbff4601e7e84cccf;
op3val:0x7fe791e7206ec0ea; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x285e332b6453c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6784b89a5504c and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa035c00a9beff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe285e332b6453c; op2val:0xbfc6784b89a5504c;
op3val:0x7fba035c00a9beff; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x286daddd336a6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x42510ee6b949c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7537d0a566421 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe286daddd336a6; op2val:0xbff42510ee6b949c;
op3val:0x7fe7537d0a566421; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2a9de7c60baba and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8560ca498600a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc632d85d3638f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2a9de7c60baba; op2val:0xbfe8560ca498600a;
op3val:0x7fdc632d85d3638f; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2b0962ebce83c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc93f769d3e612 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0b0ef1ba26749 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2b0962ebce83c; op2val:0xbfdc93f769d3e612;
op3val:0x7fd0b0ef1ba26749; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2d5103c47a7a5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf6699c699eb64 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x27ac95dbc18b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2d5103c47a7a5; op2val:0xbfdf6699c699eb64;
op3val:0x7fd27ac95dbc18b7; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x307a1f0714920 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x51ef978abacfc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x91edb91852022 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe307a1f0714920; op2val:0xbff51ef978abacfc;
op3val:0x7fe91edb91852022; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x31ca6b1bebc00 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x198bd07cac179 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x504e318330917 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe31ca6b1bebc00; op2val:0xbff198bd07cac179;
op3val:0x7fe504e318330917; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x31dc907ad8c24 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x587c05521cff9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9b948f5678e43 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe31dc907ad8c24; op2val:0xbfd587c05521cff9;
op3val:0x7fc9b948f5678e43; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x33d653edce658 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x17485dd75a787 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4fd59a97991ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe33d653edce658; op2val:0xbff17485dd75a787;
op3val:0x7fe4fd59a97991ab; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x34af4101614ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x58d42cb6608bf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9fcb5665b816f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe34af4101614ff; op2val:0xbfe58d42cb6608bf;
op3val:0x7fd9fcb5665b816f; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x35f7388e55bd9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa47f9c12b0d6f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xfd241b67db3e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe35f7388e55bd9; op2val:0xbfea47f9c12b0d6f;
op3val:0x7fdfd241b67db3e7; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x390b34cb3784a and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7dd56a7c41aed and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xd2eaa61bf450f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe390b34cb3784a; op2val:0xbfc7dd56a7c41aed;
op3val:0x7fbd2eaa61bf450f; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3918eeba04fb3 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x2efc95b08bbf2 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x7290553ddffdf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3918eeba04fb3; op2val:0xbfa2efc95b08bbf2;
op3val:0x7f97290553ddffdf; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a3f229263cef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5a0d9ccc9abe1 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa8ca0a683da8d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a3f229263cef; op2val:0xbfe5a0d9ccc9abe1;
op3val:0x7fda8ca0a683da8d; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c33f388c1d68 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff557323a5218 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3bca9f4a9a659 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c33f388c1d68; op2val:0xbfeff557323a5218;
op3val:0x7fe3bca9f4a9a659; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3e2c0a3f86d9c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd8056215a6630 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2553f1d48c19f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3e2c0a3f86d9c; op2val:0xbfcd8056215a6630;
op3val:0x7fc2553f1d48c19f; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f8b9c0765088 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e6ad16a63874 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc95eee46f3ee7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f8b9c0765088; op2val:0xbfe6e6ad16a63874;
op3val:0x7fdc95eee46f3ee7; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x400eb3353346e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x87f02ede4f05c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xea02bc16d6f00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe400eb3353346e; op2val:0xbff87f02ede4f05c;
op3val:0x7feea02bc16d6f00; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4199130b4a58a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc0116673beb1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3f168fc429093 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4199130b4a58a; op2val:0xbfefc0116673beb1;
op3val:0x7fe3f168fc429093; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x41e3132ae5239 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf6ba2bfc2e293 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x3c0eaef02223f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe41e3132ae5239; op2val:0xbfaf6ba2bfc2e293;
op3val:0x7fa3c0eaef02223f; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4226f445b3b8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x963f5fb9d2fae and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xff398772f47a9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4226f445b3b8f; op2val:0xbfe963f5fb9d2fae;
op3val:0x7fdff398772f47a9; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x423989765f2c3 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdb84d06d0235c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2b43f708bc4bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe423989765f2c3; op2val:0xbfddb84d06d0235c;
op3val:0x7fd2b43f708bc4bf; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x43421d7af2121 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xe420c16bf5ff2 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x31a92e1ea6427 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe43421d7af2121; op2val:0xbfbe420c16bf5ff2;
op3val:0x7fb31a92e1ea6427; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45a5cad9a66ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x98008c720b6fe and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x038076f94f451 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45a5cad9a66ae; op2val:0xbfd98008c720b6fe;
op3val:0x7fd038076f94f451; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48a2fac1f0550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e3ce0c418e1e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd627293e6330d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe48a2fac1f0550; op2val:0xbfe6e3ce0c418e1e;
op3val:0x7fdd627293e6330d; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b4814510daf8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x36f3288ec5b74 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9263f28174861 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b4814510daf8; op2val:0xbff36f3288ec5b74;
op3val:0x7fe9263f28174861; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b7ce2de74461 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8914faa3a6e01 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xfcfde29518077 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b7ce2de74461; op2val:0xbfc8914faa3a6e01;
op3val:0x7fbfcfde29518077; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4cd3e4ad09e0d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4f04735676260 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb38f11819b24f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4cd3e4ad09e0d; op2val:0xbfe4f04735676260;
op3val:0x7fdb38f11819b24f; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4eaa30337ea65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1ee272aaf3e74 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x770a29ff5a487 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4eaa30337ea65; op2val:0xbfe1ee272aaf3e74;
op3val:0x7fd770a29ff5a487; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4ec6d75c15182 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b095ce1d2f83 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5d35a1116248f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4ec6d75c15182; op2val:0xbfe0b095ce1d2f83;
op3val:0x7fd5d35a1116248f; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x538b347688f39 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78504afaff593 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf31ef401a3fa0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe538b347688f39; op2val:0xbff78504afaff593;
op3val:0x7fef31ef401a3fa0; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x547b0bad20f83 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0a91b30dc1082 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6289a1f7d576d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe547b0bad20f83; op2val:0xbfe0a91b30dc1082;
op3val:0x7fd6289a1f7d576d; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5b6750999cace and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc9d96263a9dfe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x36a9377d2b9e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5b6750999cace; op2val:0xbfec9d96263a9dfe;
op3val:0x7fe36a9377d2b9e3; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5e20519fe3bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x544cca9d9a8c5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd16bf31da38b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5e20519fe3bf9; op2val:0xbff544cca9d9a8c5;
op3val:0x7fed16bf31da38b9; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5ebd78d0efc30 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x043ae2ac44b8c and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x64891c30dcf57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5ebd78d0efc30; op2val:0xbfc043ae2ac44b8c;
op3val:0x7fb64891c30dcf57; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x600dcb8837d7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa3757e7ec8a40 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x206c14318ec58 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe600dcb8837d7a; op2val:0xbfea3757e7ec8a40;
op3val:0x7fe206c14318ec58; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6075d7c0ed221 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xda496e90b31b4 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x467fa5a7cc557 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6075d7c0ed221; op2val:0xbfbda496e90b31b4;
op3val:0x7fb467fa5a7cc557; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6076769e3184b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x45ffe2a64404d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc0d6b2a47b9f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6076769e3184b; op2val:0xbfe45ffe2a64404d;
op3val:0x7fdc0d6b2a47b9f7; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x61ab2743b3414 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7cf12bc6338d7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07239e710300f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe61ab2743b3414; op2val:0xbfe7cf12bc6338d7;
op3val:0x7fe07239e710300f; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x625d55a41857b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6bb9dc5e6477c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf77b9eed710aa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe625d55a41857b; op2val:0xbff6bb9dc5e6477c;
op3val:0x7fef77b9eed710aa; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x645e3aca526d0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4bd1d90639487 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcde9f50e2188f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe645e3aca526d0; op2val:0xbfd4bd1d90639487;
op3val:0x7fccde9f50e2188f; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x66f1f7cd80b8a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1406629ecc197 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x8305d31ca5f83 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe66f1f7cd80b8a; op2val:0xbfd1406629ecc197;
op3val:0x7fc8305d31ca5f83; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6705e97c5b963 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x154edd120aad5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x84e7ff7a1af17 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6705e97c5b963; op2val:0xbfd154edd120aad5;
op3val:0x7fc84e7ff7a1af17; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x677f9a96d9966 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5a5ded36db380 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe6665d6935c36 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe677f9a96d9966; op2val:0xbff5a5ded36db380;
op3val:0x7fee6665d6935c36; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67989c57b092e and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xdf00f560205d9 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x506bf29a13d9f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe67989c57b092e; op2val:0xbfadf00f560205d9;
op3val:0x7fa506bf29a13d9f; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x690c24e46a10c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x236880c926326 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9afc308064363 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe690c24e46a10c; op2val:0xbfd236880c926326;
op3val:0x7fc9afc308064363; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x697ad88c5c649 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3da11cd644c1d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc0809d1ffc255 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe697ad88c5c649; op2val:0xbfe3da11cd644c1d;
op3val:0x7fdc0809d1ffc255; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6b2e8c65c3fd4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf59c7116a502b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x63d004c83151f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6b2e8c65c3fd4; op2val:0xbfcf59c7116a502b;
op3val:0x7fc63d004c83151f; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6b3b49b1d35e0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x57426813bd2d7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe70aa8b259cd6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6b3b49b1d35e0; op2val:0xbff57426813bd2d7;
op3val:0x7fee70aa8b259cd6; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e54a07b6cfd3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x514216dac3f51 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe29bf9c82c8fd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6e54a07b6cfd3; op2val:0xbfe514216dac3f51;
op3val:0x7fde29bf9c82c8fd; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f0631b46d422 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5ea8c5cd0286f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf6bc6f9afb9d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6f0631b46d422; op2val:0xbff5ea8c5cd0286f;
op3val:0x7fef6bc6f9afb9d4; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fe220b50eaab and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2de3ffa0a811a and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb1d4855100393 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6fe220b50eaab; op2val:0xbfd2de3ffa0a811a;
op3val:0x7fcb1d4855100393; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x71592c270290d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xee0ce4125ab18 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x646656379f9c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe71592c270290d; op2val:0xbfdee0ce4125ab18;
op3val:0x7fd646656379f9c7; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x71cecf78ee922 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x1caf6d71b48f8 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x9b3ed8a34bc9f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe71cecf78ee922; op2val:0xbfc1caf6d71b48f8;
op3val:0x7fb9b3ed8a34bc9f; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x730dd4c25f368 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa7b49046cae59 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3310c8b293c49 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe730dd4c25f368; op2val:0xbfea7b49046cae59;
op3val:0x7fe3310c8b293c49; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7335f4d085d60 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5fed122fccdd9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfe4ebdfca7bb3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7335f4d085d60; op2val:0xbff5fed122fccdd9;
op3val:0x7fefe4ebdfca7bb3; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7345ae804b645 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf41fbdfd8f13c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6aa910e670fde and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7345ae804b645; op2val:0xbfef41fbdfd8f13c;
op3val:0x7fe6aa910e670fde; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7624a48efb1c7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb21bad269f6be and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d3948f37b371 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7624a48efb1c7; op2val:0xbfdb21bad269f6be;
op3val:0x7fd3d3948f37b371; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x78df4d8110389 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0087d4f77d6f6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x79a744c83393c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe78df4d8110389; op2val:0xbff0087d4f77d6f6;
op3val:0x7fe79a744c83393c; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x78e8606006964 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4d12df057fb91 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xea620e0e33db3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe78e8606006964; op2val:0xbfe4d12df057fb91;
op3val:0x7fdea620e0e33db3; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ccd0dd3298c9 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe3de9b93bd9c7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x67e10129a7d61 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ccd0dd3298c9; op2val:0xbfde3de9b93bd9c7;
op3val:0x7fd67e10129a7d61; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ce726e1444ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbd76af648b021 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4b67330c8e233 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ce726e1444ee; op2val:0xbfebd76af648b021;
op3val:0x7fe4b67330c8e233; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ea972dd4ecf2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5663753e83e36 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xffcb0a3bf68bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ea972dd4ecf2; op2val:0xbfd5663753e83e36;
op3val:0x7fcffcb0a3bf68bb; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x82e2176669b6c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x548a1ebd12ef9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x015281b46ef17 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe82e2176669b6c; op2val:0xbfe548a1ebd12ef9;
op3val:0x7fe015281b46ef17; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84a715d3ede2c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x259d5d5504e80 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbdc22425b8187 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe84a715d3ede2c; op2val:0xbfd259d5d5504e80;
op3val:0x7fcbdc22425b8187; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x862be01c2fc4e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x470c9e6cde8d3 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xf27546c7845bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe862be01c2fc4e; op2val:0xbfb470c9e6cde8d3;
op3val:0x7faf27546c7845bf; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x86632acfc28f6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2761972e26498 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc27118738060f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe86632acfc28f6; op2val:0xbff2761972e26498;
op3val:0x7fec27118738060f; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x875216d859565 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9f644cd82c7b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5e04fe6b0f0bd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe875216d859565; op2val:0xbfdc9f644cd82c7b;
op3val:0x7fd5e04fe6b0f0bd; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x88901b48a0588 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x136a37b013ef2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa655ae5f47d24 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe88901b48a0588; op2val:0xbff136a37b013ef2;
op3val:0x7fea655ae5f47d24; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8914ded847a9c and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3be4a11a0ee05 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xe50bbc28bbe9f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8914ded847a9c; op2val:0xbfa3be4a11a0ee05;
op3val:0x7f9e50bbc28bbe9f; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8f7ba2a445894 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x45d5a81040109 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc755d9b5d63d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8f7ba2a445894; op2val:0xbff45d5a81040109;
op3val:0x7fefc755d9b5d63d; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8fc09a06c491a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x04279f23fa88a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x963d7b4724e29 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8fc09a06c491a; op2val:0xbff04279f23fa88a;
op3val:0x7fe963d7b4724e29; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x907ceb842b125 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x053d086ddd53e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x98aed711a5337 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe907ceb842b125; op2val:0xbfc053d086ddd53e;
op3val:0x7fb98aed711a5337; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x910243dc376b6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe4af1a5d1ff89 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7b9d49126b8e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe910243dc376b6; op2val:0xbfee4af1a5d1ff89;
op3val:0x7fe7b9d49126b8e4; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x910936394c1fe and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x82bea6a4c8e15 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2eed46d360875 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe910936394c1fe; op2val:0xbfd82bea6a4c8e15;
op3val:0x7fd2eed46d360875; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x95b14ef8ad340 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x21a7619af5abd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcb066b7f00a96 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe95b14ef8ad340; op2val:0xbff21a7619af5abd;
op3val:0x7fecb066b7f00a96; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97568291969dc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x949417d241207 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x41e014fc48176 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97568291969dc; op2val:0xbfe949417d241207;
op3val:0x7fe41e014fc48176; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97d9ba958e782 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x884efecadd76b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x38819ffc8abd8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97d9ba958e782; op2val:0xbfe884efecadd76b;
op3val:0x7fe38819ffc8abd8; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9a08d92036b37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa7a10863d9ace and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x534345e27e402 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9a08d92036b37; op2val:0xbfea7a10863d9ace;
op3val:0x7fe534345e27e402; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b07a16ac90b5 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x97aa315f530d2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x474531fbbcceb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b07a16ac90b5; op2val:0xbfc97aa315f530d2;
op3val:0x7fc474531fbbcceb; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9bc34af4d20d8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x41042aa57e651 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x022b4a5130d73 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9bc34af4d20d8; op2val:0xbfe41042aa57e651;
op3val:0x7fe022b4a5130d73; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9d5b05b164562 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f8ee00e87788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f7ea03f6a603 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9d5b05b164562; op2val:0xbfe9f8ee00e87788;
op3val:0x7fe4f7ea03f6a603; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9dbe695b7d601 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdb15a7740596f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7fe9a65f1016d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9dbe695b7d601; op2val:0xbfddb15a7740596f;
op3val:0x7fd7fe9a65f1016d; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa06553b3e647f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x77977fce9d3d1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x31756ca19da0a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea06553b3e647f; op2val:0xbfe77977fce9d3d1;
op3val:0x7fe31756ca19da0a; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa44fe8eb43e3e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x794ae399a2d5f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x35ba516572d07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea44fe8eb43e3e; op2val:0xbfe794ae399a2d5f;
op3val:0x7fe35ba516572d07; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa670928aed55b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5b2ec92aedacb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1e73e568ef321 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea670928aed55b; op2val:0xbfe5b2ec92aedacb;
op3val:0x7fe1e73e568ef321; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa829e484cc659 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf791e932b912a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa12e090ec4520 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea829e484cc659; op2val:0xbfef791e932b912a;
op3val:0x7fea12e090ec4520; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8d1b28c81288 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc6176d144575e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x78c5613f922cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea8d1b28c81288; op2val:0xbfdc6176d144575e;
op3val:0x7fd78c5613f922cb; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xabde0b9fefefc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x016c9c96a11b9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xae3f710f87cdf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feabde0b9fefefc; op2val:0xbfd016c9c96a11b9;
op3val:0x7fcae3f710f87cdf; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacf91d51b858c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3183cd3c8cf32 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xfff1a75150801 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feacf91d51b858c; op2val:0xbfe3183cd3c8cf32;
op3val:0x7fdfff1a75150801; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad279fc53f267 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4871380dad6f1 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x134c4894ebd73 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead279fc53f267; op2val:0xbfd4871380dad6f1;
op3val:0x7fd134c4894ebd73; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae0b0d815b4a1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x18ed13b06a849 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd7ea58142923b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae0b0d815b4a1; op2val:0xbff18ed13b06a849;
op3val:0x7fed7ea58142923b; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaed06f12f92ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x606973fbe5e32 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x288807b398435 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaed06f12f92ca; op2val:0xbfd606973fbe5e32;
op3val:0x7fd288807b398435; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf6e34fad0597 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fd0b19df38aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5e61ae618398b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaf6e34fad0597; op2val:0xbfe9fd0b19df38aa;
op3val:0x7fe5e61ae618398b; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xafde4f5fa80c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x31b2b3b624731 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x01daaa27ef61b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feafde4f5fa80c8; op2val:0xbfe31b2b3b624731;
op3val:0x7fe01daaa27ef61b; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0211d71e62d9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x404bcb8ba7585 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0e54ab0bff733 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb0211d71e62d9; op2val:0xbfe404bcb8ba7585;
op3val:0x7fe0e54ab0bff733; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb101c506febed and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xda026e0db3d47 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x90e0b17c36d37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb101c506febed; op2val:0xbfcda026e0db3d47;
op3val:0x7fc90e0b17c36d37; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb1b13f7acb403 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x792a02bd6d738 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3f7a991a459ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb1b13f7acb403; op2val:0xbfd792a02bd6d738;
op3val:0x7fd3f7a991a459ef; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb2c4f7b126e07 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x809f1abdae0c4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x469ad4a4dac0b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb2c4f7b126e07; op2val:0xbfc809f1abdae0c4;
op3val:0x7fc469ad4a4dac0b; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb372725488732 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x36cd85c81058f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0855165356c53 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb372725488732; op2val:0xbfe36cd85c81058f;
op3val:0x7fe0855165356c53; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb6bdb1fb308ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d58a620260c4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x547e0d76e97d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb6bdb1fb308ee; op2val:0xbfe8d58a620260c4;
op3val:0x7fe547e0d76e97d4; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb6f5df5aaba6f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1928e4861b8c3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe21a006e5b710 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb6f5df5aaba6f; op2val:0xbff1928e4861b8c3;
op3val:0x7fee21a006e5b710; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb85cb41fd24ae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0a2c5423ced33 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9dc93d40986f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb85cb41fd24ae; op2val:0xbfe0a2c5423ced33;
op3val:0x7fdc9dc93d40986f; valaddr_reg:x3; val_offset:861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 861*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbae2a53ec4159 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8256b4c5119ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4e2fdf0438e99 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febae2a53ec4159; op2val:0xbfe8256b4c5119ea;
op3val:0x7fe4e2fdf0438e99; valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbba233bbece6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcd03f003ca04c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8f74f4ff53261 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febba233bbece6a; op2val:0xbfecd03f003ca04c;
op3val:0x7fe8f74f4ff53261; valaddr_reg:x3; val_offset:867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 867*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbd137f6736fd2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1de00fee055f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf104419758761 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febd137f6736fd2; op2val:0xbff1de00fee055f1;
op3val:0x7fef104419758761; valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0177c6781311 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3607758fcef66 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x0f54bf881840f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec0177c6781311; op2val:0xbfa3607758fcef66;
op3val:0x7fa0f54bf881840f; valaddr_reg:x3; val_offset:873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 873*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc30d25dc7d1f8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4c08cd7bbcd8a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x248247c756437 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec30d25dc7d1f8; op2val:0xbfd4c08cd7bbcd8a;
op3val:0x7fd248247c756437; valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3687b73257f0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xca50d8dd9d45d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9413bdf4c1df7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec3687b73257f0; op2val:0xbfcca50d8dd9d45d;
op3val:0x7fc9413bdf4c1df7; valaddr_reg:x3; val_offset:879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 879*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc4a376f70d629 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1a8561fd260aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf387e73a7bfbc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec4a376f70d629; op2val:0xbff1a8561fd260aa;
op3val:0x7fef387e73a7bfbc; valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc660119cb1eb9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51d446c293c1b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bce9e2abdecd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec660119cb1eb9; op2val:0xbfe51d446c293c1b;
op3val:0x7fe2bce9e2abdecd; valaddr_reg:x3; val_offset:885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 885*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc7566f5559d3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1b7b62e16cbdd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf838037ae34fe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec7566f5559d3d; op2val:0xbff1b7b62e16cbdd;
op3val:0x7fef838037ae34fe; valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc7fa2f29a526e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6809a8f574c68 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x40a48387cd0b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec7fa2f29a526e; op2val:0xbfd6809a8f574c68;
op3val:0x7fd40a48387cd0b7; valaddr_reg:x3; val_offset:891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 891*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc86e74daaecf7 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x929c385f420b3 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x66e9fda84e08f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec86e74daaecf7; op2val:0xbfc929c385f420b3;
op3val:0x7fc66e9fda84e08f; valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcb0934ef2fcb6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0776bbc8beeb0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd86b5c57cf8c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecb0934ef2fcb6; op2val:0xbff0776bbc8beeb0;
op3val:0x7fed86b5c57cf8c4; valaddr_reg:x3; val_offset:897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 897*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd8104cd4e803 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4a5335300308c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29bf2873bcb4b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd8104cd4e803; op2val:0xbfe4a5335300308c;
op3val:0x7fe29bf2873bcb4b; valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcdb61249dac9c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf62647a897e27 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc4d409108d3db and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecdb61249dac9c; op2val:0xbfcf62647a897e27;
op3val:0x7fcc4d409108d3db; valaddr_reg:x3; val_offset:903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 903*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcf945ed210265 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x059f5f6f0f56d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd9c2dea43b3b1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecf945ed210265; op2val:0xbff059f5f6f0f56d;
op3val:0x7fed9c2dea43b3b1; valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcfbf464729354 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe09dd43712305 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb3524640d8131 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecfbf464729354; op2val:0xbfde09dd43712305;
op3val:0x7fdb3524640d8131; valaddr_reg:x3; val_offset:909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 909*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd154f3451ca98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa2bb373b06d01 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7c9081548bc16 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed154f3451ca98; op2val:0xbfea2bb373b06d01;
op3val:0x7fe7c9081548bc16; valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd4e1e1d518992 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9b9fb63d77f32 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x78f595d2c6f56 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed4e1e1d518992; op2val:0xbfe9b9fb63d77f32;
op3val:0x7fe78f595d2c6f56; valaddr_reg:x3; val_offset:915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 915*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd521bdc0d34f6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ac721ae3f2a3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2f1534c6ddb70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed521bdc0d34f6; op2val:0xbfe4ac721ae3f2a3;
op3val:0x7fe2f1534c6ddb70; valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd5ae2c8c16e51 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c11ee42a5de0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x04970f8f49aaf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed5ae2c8c16e51; op2val:0xbfe1c11ee42a5de0;
op3val:0x7fe04970f8f49aaf; valaddr_reg:x3; val_offset:921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 921*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd6a6d9fa62f5f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4d90794f92f5a and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x32a053363c227 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed6a6d9fa62f5f; op2val:0xbfc4d90794f92f5a;
op3val:0x7fc32a053363c227; valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd6ef0d455f837 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde32b59de1421 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb7d7d1c8c9a17 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed6ef0d455f837; op2val:0xbfede32b59de1421;
op3val:0x7feb7d7d1c8c9a17; valaddr_reg:x3; val_offset:927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 927*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd7455d02e38a5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb559bae6c5e4b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x928f4b7a3f4fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed7455d02e38a5; op2val:0xbfeb559bae6c5e4b;
op3val:0x7fe928f4b7a3f4fa; valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdae8a062c907e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xab8f19223731e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8c95bd0b46b8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedae8a062c907e; op2val:0xbfdab8f19223731e;
op3val:0x7fd8c95bd0b46b8f; valaddr_reg:x3; val_offset:933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 933*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdaebc3ba0c7d4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ef1e940889a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf6a57119c8d25 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedaebc3ba0c7d4; op2val:0xbff0ef1e940889a2;
op3val:0x7fef6a57119c8d25; valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf41cfec33565 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e38296963ae3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x74c0ba96c5319 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedf41cfec33565; op2val:0xbfe8e38296963ae3;
op3val:0x7fe74c0ba96c5319; valaddr_reg:x3; val_offset:939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 939*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7e775bf0da8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3c2fc790c67c9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x281cccabf06fd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedf7e775bf0da8; op2val:0xbfe3c2fc790c67c9;
op3val:0x7fe281cccabf06fd; valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdfa9ec60c2403 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3c0a1b6d65bc8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x281457e748baf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedfa9ec60c2403; op2val:0xbfd3c0a1b6d65bc8;
op3val:0x7fd281457e748baf; valaddr_reg:x3; val_offset:945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 945*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe3b054ed16458 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4920cd707759a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x36edcbac00f4b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee3b054ed16458; op2val:0xbfe4920cd707759a;
op3val:0x7fe36edcbac00f4b; valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe460da8265d2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x087705042c4de and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf46513d9d53ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee460da8265d2d; op2val:0xbfe087705042c4de;
op3val:0x7fdf46513d9d53ab; valaddr_reg:x3; val_offset:951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 951*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe4bd6d1477811 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5f9fb9491394a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4ce71486893dc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee4bd6d1477811; op2val:0xbfe5f9fb9491394a;
op3val:0x7fe4ce71486893dc; valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea503ea162ca5 and fs2 == 1 and fe2 == 0x3f5 and fm2 == 0x4a0676062f935 and fs3 == 0 and fe3 == 0x7f5 and fm3 == 0x3c0be8552b7ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea503ea162ca5; op2val:0xbf54a0676062f935;
op3val:0x7f53c0be8552b7ff; valaddr_reg:x3; val_offset:957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 957*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xee0f83176d443 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0x8f5e613be24a7 and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0x816029558c6ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feee0f83176d443; op2val:0xbf68f5e613be24a7;
op3val:0x7f6816029558c6ff; valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xee253af823710 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xca85de11836df and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xba8880bed4cff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feee253af823710; op2val:0xbfbca85de11836df;
op3val:0x7fbba8880bed4cff; valaddr_reg:x3; val_offset:963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 963*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xee29d2379c1d6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92d5cad0e80e0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84cd2e33be9b5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feee29d2379c1d6; op2val:0xbfe92d5cad0e80e0;
op3val:0x7fe84cd2e33be9b5; valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xee4ee30fdf7de and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa30b054bc8280 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x949032a04d403 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feee4ee30fdf7de; op2val:0xbfea30b054bc8280;
op3val:0x7fe949032a04d403; valaddr_reg:x3; val_offset:969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 969*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf0b7b13913fc4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf56c5b53e7188 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe674de43c8121 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef0b7b13913fc4; op2val:0xbfef56c5b53e7188;
op3val:0x7fee674de43c8121; valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf17151606bc6b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x193b0bd02c505 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x113c0f327c196 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef17151606bc6b; op2val:0xbfe193b0bd02c505;
op3val:0x7fe113c0f327c196; valaddr_reg:x3; val_offset:975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 975*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3c01637bde3e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8b4d637a0b60 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbdc796690a011 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3c01637bde3e; op2val:0xbfec8b4d637a0b60;
op3val:0x7febdc796690a011; valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf58957c2d21d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdb493a2ae4cce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd192a5fad48a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef58957c2d21d5; op2val:0xbfedb493a2ae4cce;
op3val:0x7fed192a5fad48a4; valaddr_reg:x3; val_offset:981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 981*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5cbf0a6af32b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x072f9d2cc27a3 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x01f0ec611db77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5cbf0a6af32b; op2val:0xbfb072f9d2cc27a3;
op3val:0x7fb01f0ec611db77; valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf8c10f3efb5e5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73fef5333efd3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6ebb3e0d9a833 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef8c10f3efb5e5; op2val:0xbfd73fef5333efd3;
op3val:0x7fd6ebb3e0d9a833; valaddr_reg:x3; val_offset:987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 987*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfb1d8e744086a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd30c094e668 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28f6cb4b0199f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefb1d8e744086a; op2val:0xbfe2bd30c094e668;
op3val:0x7fe28f6cb4b0199f; valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc3fb62491d5a and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x22dea412368aa and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x20bd18a92d2eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefc3fb62491d5a; op2val:0xbfc22dea412368aa;
op3val:0x7fc20bd18a92d2eb; valaddr_reg:x3; val_offset:993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 993*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfea58c88ccade and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde0fb85f6688a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdccc3beff9945 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefea58c88ccade; op2val:0xbfede0fb85f6688a;
op3val:0x7fedccc3beff9945; valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xff641b9c77dcb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1aee636aabeb9 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1a983e0a6a87f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feff641b9c77dcb; op2val:0xbfd1aee636aabeb9;
op3val:0x7fd1a983e0a6a87f; valaddr_reg:x3; val_offset:999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 999*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xff8715a026cc1 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x44b9b8206c888 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x446d07f39990f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feff8715a026cc1; op2val:0xbfa44b9b8206c888;
op3val:0x7fa446d07f39990f; valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xff8dc6a068355 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xad386c0f8fa8c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xacd8aa6694f1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feff8dc6a068355; op2val:0xbfcad386c0f8fa8c;
op3val:0x7fcacd8aa6694f1f; valaddr_reg:x3; val_offset:1005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1005*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x7f3 and fm1 == 0xdde9bd309bfff and fs2 == 1 and fe2 == 0x40a and fm2 == 0x0ce20c31af6d1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf5f6b12b9e539 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3dde9bd309bfff; op2val:0xc0a0ce20c31af6d1;
op3val:0x7fef5f6b12b9e539; valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x7f7 and fm1 == 0xb61f89440f47f and fs2 == 1 and fe2 == 0x405 and fm2 == 0x6ee13708500d4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x39f14312f9926 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f7b61f89440f47f; op2val:0xc056ee13708500d4;
op3val:0x7fe39f14312f9926; valaddr_reg:x3; val_offset:1011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1011*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x69ea30b504aff and fs2 == 1 and fe2 == 0x405 and fm2 == 0x2646ce12646ee and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa0070d4da886b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f869ea30b504aff; op2val:0xc052646ce12646ee;
op3val:0x7fea0070d4da886b; valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x867824bb36ebf and fs2 == 1 and fe2 == 0x403 and fm2 == 0xccdc644a53a6b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5f78051c221f1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8867824bb36ebf; op2val:0xc03ccdc644a53a6b;
op3val:0x7fd5f78051c221f1; valaddr_reg:x3; val_offset:1017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1017*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x1594af4d0909f and fs2 == 1 and fe2 == 0x402 and fm2 == 0x092aa75fadfe3 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1f8529573e303 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f91594af4d0909f; op2val:0xc02092aa75fadfe3;
op3val:0x7fc1f8529573e303; valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x47899d9bfab7f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xab0378616b563 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x112b7d42952fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f947899d9bfab7f; op2val:0xc02ab0378616b563;
op3val:0x7fd112b7d42952fb; valaddr_reg:x3; val_offset:1023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1023*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc67642d1c685f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x22fcf4da3d255 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x02498363c72a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c67642d1c685f; op2val:0xc0122fcf4da3d255;
op3val:0x7fc02498363c72a3; valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x09d747d656acf and fs2 == 1 and fe2 == 0x401 and fm2 == 0xcac32a6055464 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdc65d1828a66f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa09d747d656acf; op2val:0xc01cac32a6055464;
op3val:0x7fcdc65d1828a66f; valaddr_reg:x3; val_offset:1029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1029*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xad631e03bfddf and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f65c17138980 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x1947b06bb06df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7faad631e03bfddf; op2val:0xbfd4f65c17138980;
op3val:0x7f91947b06bb06df; valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0733cb8a16eff and fs2 == 1 and fe2 == 0x401 and fm2 == 0xe64ac2cc570b3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf3f931a854791 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0733cb8a16eff; op2val:0xc01e64ac2cc570b3;
op3val:0x7fdf3f931a854791; valaddr_reg:x3; val_offset:1035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1035*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x19190aff198d7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x55d90ac8acf1f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x775cadb7732b2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb19190aff198d7; op2val:0xc0255d90ac8acf1f;
op3val:0x7fe775cadb7732b2; valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1038*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9168729177238126591,64,FLEN)
NAN_BOXED(13880320691663468241,64,FLEN)
NAN_BOXED(9168729177238126591,64,FLEN)
NAN_BOXED(9186043585219327103,64,FLEN)
NAN_BOXED(9186043585219327103,64,FLEN)
NAN_BOXED(9186043585219327103,64,FLEN)
NAN_BOXED(9189206512802745087,64,FLEN)
NAN_BOXED(9189206512802745087,64,FLEN)
NAN_BOXED(9217180071974570091,64,FLEN)
NAN_BOXED(9189708848962956991,64,FLEN)
NAN_BOXED(13852172805323700843,64,FLEN)
NAN_BOXED(9211540743355769329,64,FLEN)
NAN_BOXED(9192226492909654175,64,FLEN)
NAN_BOXED(13844226515358375907,64,FLEN)
NAN_BOXED(13844226515358375907,64,FLEN)
NAN_BOXED(9193105341548571519,64,FLEN)
NAN_BOXED(13847073756823336291,64,FLEN)
NAN_BOXED(13847073756823336291,64,FLEN)
NAN_BOXED(9195338219134937183,64,FLEN)
NAN_BOXED(13840177172270273109,64,FLEN)
NAN_BOXED(9195338219134937183,64,FLEN)
NAN_BOXED(9196523562736118479,64,FLEN)
NAN_BOXED(13843128688163771492,64,FLEN)
NAN_BOXED(9209234916182107759,64,FLEN)
NAN_BOXED(9199400698561428959,64,FLEN)
NAN_BOXED(13822944031691475328,64,FLEN)
NAN_BOXED(9192291570554701535,64,FLEN)
NAN_BOXED(9200896457632981751,64,FLEN)
NAN_BOXED(13845095508548565361,64,FLEN)
NAN_BOXED(9215447214377234661,64,FLEN)
NAN_BOXED(9200980743350742783,64,FLEN)
NAN_BOXED(9200980743350742783,64,FLEN)
NAN_BOXED(9200980743350742783,64,FLEN)
NAN_BOXED(9201295564307798231,64,FLEN)
NAN_BOXED(9201295564307798231,64,FLEN)
NAN_BOXED(9216464676562875058,64,FLEN)
NAN_BOXED(9201496852411458239,64,FLEN)
NAN_BOXED(13846680978461740289,64,FLEN)
NAN_BOXED(9217996726159100039,64,FLEN)
NAN_BOXED(9201697836431872047,64,FLEN)
NAN_BOXED(13836074816298331709,64,FLEN)
NAN_BOXED(9207408698161666215,64,FLEN)
NAN_BOXED(9201735077913887399,64,FLEN)
NAN_BOXED(13841713339702719144,64,FLEN)
NAN_BOXED(9213314896058315733,64,FLEN)
NAN_BOXED(9202284041333279151,64,FLEN)
NAN_BOXED(13839787488197390043,64,FLEN)
NAN_BOXED(9211588781447371805,64,FLEN)
NAN_BOXED(9202488684553766039,64,FLEN)
NAN_BOXED(13837095346779646405,64,FLEN)
NAN_BOXED(9209769039738105855,64,FLEN)
NAN_BOXED(9202726944327259991,64,FLEN)
NAN_BOXED(13844606963830491722,64,FLEN)
NAN_BOXED(9217004732380952737,64,FLEN)
NAN_BOXED(9202804322424188759,64,FLEN)
NAN_BOXED(13836442129120237997,64,FLEN)
NAN_BOXED(9209291369030678183,64,FLEN)
NAN_BOXED(9203029976055216519,64,FLEN)
NAN_BOXED(13842431726281687618,64,FLEN)
NAN_BOXED(9215329387018069762,64,FLEN)
NAN_BOXED(9203075983665603095,64,FLEN)
NAN_BOXED(13845398809914968332,64,FLEN)
NAN_BOXED(9218578275326947620,64,FLEN)
NAN_BOXED(9203203960835853463,64,FLEN)
NAN_BOXED(13829621094594152677,64,FLEN)
NAN_BOXED(9202493772225120799,64,FLEN)
NAN_BOXED(9203256624909997455,64,FLEN)
NAN_BOXED(13841060707110572423,64,FLEN)
NAN_BOXED(9214463715142756818,64,FLEN)
NAN_BOXED(9203384448513774127,64,FLEN)
NAN_BOXED(13843018544457958639,64,FLEN)
NAN_BOXED(9216077838082462023,64,FLEN)
NAN_BOXED(9203591182018118935,64,FLEN)
NAN_BOXED(13844296393824515044,64,FLEN)
NAN_BOXED(9217473599227906769,64,FLEN)
NAN_BOXED(9204005052805448567,64,FLEN)
NAN_BOXED(13834245629925523264,64,FLEN)
NAN_BOXED(9207818226685437519,64,FLEN)
NAN_BOXED(9204026259560266591,64,FLEN)
NAN_BOXED(13840564182177528808,64,FLEN)
NAN_BOXED(9214553489174949975,64,FLEN)
NAN_BOXED(9204205432271385367,64,FLEN)
NAN_BOXED(13825451379231562856,64,FLEN)
NAN_BOXED(9199179041262324495,64,FLEN)
NAN_BOXED(9204685466307286415,64,FLEN)
NAN_BOXED(13822742476990795158,64,FLEN)
NAN_BOXED(9197120379026131967,64,FLEN)
NAN_BOXED(9204784239071746287,64,FLEN)
NAN_BOXED(13843035895928386577,64,FLEN)
NAN_BOXED(9217331208425095880,64,FLEN)
NAN_BOXED(9204828318293806703,64,FLEN)
NAN_BOXED(13843894424241373208,64,FLEN)
NAN_BOXED(9218178325950054072,64,FLEN)
NAN_BOXED(9204889591126395735,64,FLEN)
NAN_BOXED(13837892135596584928,64,FLEN)
NAN_BOXED(9212314025435357825,64,FLEN)
NAN_BOXED(9205143052173738223,64,FLEN)
NAN_BOXED(13840416523951725682,64,FLEN)
NAN_BOXED(9215092047283897262,64,FLEN)
NAN_BOXED(9205271000362709815,64,FLEN)
NAN_BOXED(13832754442825061726,64,FLEN)
NAN_BOXED(9207493145401400483,64,FLEN)
NAN_BOXED(9205405589022638455,64,FLEN)
NAN_BOXED(13841339600939456865,64,FLEN)
NAN_BOXED(9216209664435082305,64,FLEN)
NAN_BOXED(9205444234755765359,64,FLEN)
NAN_BOXED(13843581284303450424,64,FLEN)
NAN_BOXED(9218548353906629632,64,FLEN)
NAN_BOXED(9205633406713149163,64,FLEN)
NAN_BOXED(13836102557815027132,64,FLEN)
NAN_BOXED(9211245466769852817,64,FLEN)
NAN_BOXED(9205717051988534607,64,FLEN)
NAN_BOXED(13841433423580443761,64,FLEN)
NAN_BOXED(9216745398023470668,64,FLEN)
NAN_BOXED(9205782963862272539,64,FLEN)
NAN_BOXED(13840080678762347190,64,FLEN)
NAN_BOXED(9215358204224197958,64,FLEN)
NAN_BOXED(9205801247330751735,64,FLEN)
NAN_BOXED(13841759501840249263,64,FLEN)
NAN_BOXED(9217222783596986910,64,FLEN)
NAN_BOXED(9205923166065286987,64,FLEN)
NAN_BOXED(13840739078292114585,64,FLEN)
NAN_BOXED(9216255640558037631,64,FLEN)
NAN_BOXED(9205975099112758367,64,FLEN)
NAN_BOXED(13825202277292552186,64,FLEN)
NAN_BOXED(9200989038419728935,64,FLEN)
NAN_BOXED(9206117984862556491,64,FLEN)
NAN_BOXED(13841402030482600291,64,FLEN)
NAN_BOXED(9217276271848018908,64,FLEN)
NAN_BOXED(9206141158892834059,64,FLEN)
NAN_BOXED(13834900493523893860,64,FLEN)
NAN_BOXED(9210552271618629189,64,FLEN)
NAN_BOXED(9206177726936995635,64,FLEN)
NAN_BOXED(13830441897516898860,64,FLEN)
NAN_BOXED(9206111199660788939,64,FLEN)
NAN_BOXED(9206554823425434743,64,FLEN)
NAN_BOXED(13837537239689664710,64,FLEN)
NAN_BOXED(9214196645303177527,64,FLEN)
NAN_BOXED(9206609199910578871,64,FLEN)
NAN_BOXED(13833237835707855253,64,FLEN)
NAN_BOXED(9209949767971765449,64,FLEN)
NAN_BOXED(9206680025638789255,64,FLEN)
NAN_BOXED(13832733471602203415,64,FLEN)
NAN_BOXED(9209498863781686571,64,FLEN)
NAN_BOXED(9206984591437144991,64,FLEN)
NAN_BOXED(13836319133692290538,64,FLEN)
NAN_BOXED(9213204841814144553,64,FLEN)
NAN_BOXED(9207219748618907383,64,FLEN)
NAN_BOXED(13839833564509255113,64,FLEN)
NAN_BOXED(9216611284354315195,64,FLEN)
NAN_BOXED(9207259888041229799,64,FLEN)
NAN_BOXED(13841199715743524068,64,FLEN)
NAN_BOXED(9218597039279530083,64,FLEN)
NAN_BOXED(9207391466527211519,64,FLEN)
NAN_BOXED(13826575591788167772,64,FLEN)
NAN_BOXED(9203649573631934703,64,FLEN)
NAN_BOXED(9207436407159956579,64,FLEN)
NAN_BOXED(13829400175539274847,64,FLEN)
NAN_BOXED(9206592871140515751,64,FLEN)
NAN_BOXED(9207506903451484519,64,FLEN)
NAN_BOXED(13837626364198125609,64,FLEN)
NAN_BOXED(9215084665324084568,64,FLEN)
NAN_BOXED(9207779884713869407,64,FLEN)
NAN_BOXED(13839922435075254781,64,FLEN)
NAN_BOXED(9217341908569577761,64,FLEN)
NAN_BOXED(9207838365055913759,64,FLEN)
NAN_BOXED(13840552660651384509,64,FLEN)
NAN_BOXED(9218382447709844932,64,FLEN)
NAN_BOXED(9207975063975939875,64,FLEN)
NAN_BOXED(13828390324849090954,64,FLEN)
NAN_BOXED(9206264118132153203,64,FLEN)
NAN_BOXED(9208028721453780931,64,FLEN)
NAN_BOXED(13817563524650700165,64,FLEN)
NAN_BOXED(9195346123876838207,64,FLEN)
NAN_BOXED(9208071796761490539,64,FLEN)
NAN_BOXED(13839041758340838838,64,FLEN)
NAN_BOXED(9216662386198418424,64,FLEN)
NAN_BOXED(9208124947507033611,64,FLEN)
NAN_BOXED(13839106869157256963,64,FLEN)
NAN_BOXED(9216765028678797339,64,FLEN)
NAN_BOXED(9208364058196086519,64,FLEN)
NAN_BOXED(13838037570418482928,64,FLEN)
NAN_BOXED(9216100506811205885,64,FLEN)
NAN_BOXED(9208690084832389075,64,FLEN)
NAN_BOXED(13836005579509391627,64,FLEN)
NAN_BOXED(9214603584255035502,64,FLEN)
NAN_BOXED(9208778753835129447,64,FLEN)
NAN_BOXED(13831044450303028994,64,FLEN)
NAN_BOXED(9209640968134248075,64,FLEN)
NAN_BOXED(9208811262196021439,64,FLEN)
NAN_BOXED(13837922752515856627,64,FLEN)
NAN_BOXED(9216370607102651038,64,FLEN)
NAN_BOXED(9208874170758231895,64,FLEN)
NAN_BOXED(13831981884556624803,64,FLEN)
NAN_BOXED(9210638706365855301,64,FLEN)
NAN_BOXED(9208912533285376323,64,FLEN)
NAN_BOXED(13832019314607848645,64,FLEN)
NAN_BOXED(9210697454828327049,64,FLEN)
NAN_BOXED(9208979240413861887,64,FLEN)
NAN_BOXED(13829435632030172031,64,FLEN)
NAN_BOXED(9207969973564630895,64,FLEN)
NAN_BOXED(9209021978108572923,64,FLEN)
NAN_BOXED(13839837146101250061,64,FLEN)
NAN_BOXED(9218528821102272728,64,FLEN)
NAN_BOXED(9209120283723533511,64,FLEN)
NAN_BOXED(13835714375838018180,64,FLEN)
NAN_BOXED(9214596690496541795,64,FLEN)
NAN_BOXED(9209202604775145555,64,FLEN)
NAN_BOXED(13834021409020243810,64,FLEN)
NAN_BOXED(9212745360798322945,64,FLEN)
NAN_BOXED(9209348372834619683,64,FLEN)
NAN_BOXED(13833026629374159404,64,FLEN)
NAN_BOXED(9211936214865441033,64,FLEN)
NAN_BOXED(9209379374510701319,64,FLEN)
NAN_BOXED(13836205340534958436,64,FLEN)
NAN_BOXED(9215209814124611104,64,FLEN)
NAN_BOXED(9209915403202414389,64,FLEN)
NAN_BOXED(13836731082995989263,64,FLEN)
NAN_BOXED(9216112152210276108,64,FLEN)
NAN_BOXED(9210011779005349787,64,FLEN)
NAN_BOXED(13839197119231323972,64,FLEN)
NAN_BOXED(9218792798344562223,64,FLEN)
NAN_BOXED(9210097469268313739,64,FLEN)
NAN_BOXED(13834991097233669312,64,FLEN)
NAN_BOXED(9214565833766558855,64,FLEN)
NAN_BOXED(9210160205958195977,64,FLEN)
NAN_BOXED(13833560293826165032,64,FLEN)
NAN_BOXED(9213365584376766429,64,FLEN)
NAN_BOXED(9210164641848945705,64,FLEN)
NAN_BOXED(13833196771257698006,64,FLEN)
NAN_BOXED(9212984968123893333,64,FLEN)
NAN_BOXED(9210237440062190887,64,FLEN)
NAN_BOXED(13833029209251006350,64,FLEN)
NAN_BOXED(9212918918845141447,64,FLEN)
NAN_BOXED(9210292568785736693,64,FLEN)
NAN_BOXED(13830845483757473479,64,FLEN)
NAN_BOXED(9210611470011816533,64,FLEN)
NAN_BOXED(9210317681604985549,64,FLEN)
NAN_BOXED(13838007793450113213,64,FLEN)
NAN_BOXED(9218069977859133190,64,FLEN)
NAN_BOXED(9210353555577655339,64,FLEN)
NAN_BOXED(13837767882756931768,64,FLEN)
NAN_BOXED(9217863211448490101,64,FLEN)
NAN_BOXED(9210416984339541527,64,FLEN)
NAN_BOXED(13835587153174148580,64,FLEN)
NAN_BOXED(9215514972794042621,64,FLEN)
NAN_BOXED(9210590736476346921,64,FLEN)
NAN_BOXED(13835306438132895731,64,FLEN)
NAN_BOXED(9215382952308419940,64,FLEN)
NAN_BOXED(9210762764105977519,64,FLEN)
NAN_BOXED(13809881446574337519,64,FLEN)
NAN_BOXED(9190459083115858687,64,FLEN)
NAN_BOXED(9210766476571002495,64,FLEN)
NAN_BOXED(13828135638386324580,64,FLEN)
NAN_BOXED(9208766707534295607,64,FLEN)
NAN_BOXED(9210920798521458389,64,FLEN)
NAN_BOXED(13835513737459845436,64,FLEN)
NAN_BOXED(9215987288537321752,64,FLEN)
NAN_BOXED(9210995709953046217,64,FLEN)
NAN_BOXED(13833061890309410494,64,FLEN)
NAN_BOXED(9214134775879016703,64,FLEN)
NAN_BOXED(9211019518044349723,64,FLEN)
NAN_BOXED(13837553994168773606,64,FLEN)
NAN_BOXED(9218660986683498200,64,FLEN)
NAN_BOXED(9211022988943112981,64,FLEN)
NAN_BOXED(13835233792206716823,64,FLEN)
NAN_BOXED(9215747658686158296,64,FLEN)
NAN_BOXED(9211109535484695739,64,FLEN)
NAN_BOXED(13829914110018813206,64,FLEN)
NAN_BOXED(9210700617892483793,64,FLEN)
NAN_BOXED(9211120795623041719,64,FLEN)
NAN_BOXED(13816755625815289787,64,FLEN)
NAN_BOXED(9197425703303940223,64,FLEN)
NAN_BOXED(9211244055749262425,64,FLEN)
NAN_BOXED(13836631862739717794,64,FLEN)
NAN_BOXED(9217804696049684695,64,FLEN)
NAN_BOXED(9211285628216979377,64,FLEN)
NAN_BOXED(13836402760241059829,64,FLEN)
NAN_BOXED(9217559233625568875,64,FLEN)
NAN_BOXED(9211398577136457977,64,FLEN)
NAN_BOXED(13831217123256438205,64,FLEN)
NAN_BOXED(9212287451537303025,64,FLEN)
NAN_BOXED(9211454405925148457,64,FLEN)
NAN_BOXED(13835154021299670619,64,FLEN)
NAN_BOXED(9216087919966035654,64,FLEN)
NAN_BOXED(9211595611927094077,64,FLEN)
NAN_BOXED(13830885675388890408,64,FLEN)
NAN_BOXED(9212054387156249059,64,FLEN)
NAN_BOXED(9211609439365246099,64,FLEN)
NAN_BOXED(13835089541544708396,64,FLEN)
NAN_BOXED(9216156747551231578,64,FLEN)
NAN_BOXED(9211631871298920071,64,FLEN)
NAN_BOXED(13823214942504640559,64,FLEN)
NAN_BOXED(9204948024912875799,64,FLEN)
NAN_BOXED(9211783315543498491,64,FLEN)
NAN_BOXED(13836097686905146018,64,FLEN)
NAN_BOXED(9217770248008390857,64,FLEN)
NAN_BOXED(9211789647465885761,64,FLEN)
NAN_BOXED(13832723585464602801,64,FLEN)
NAN_BOXED(9214626210455824819,64,FLEN)
NAN_BOXED(9211797630952987067,64,FLEN)
NAN_BOXED(13829780947252684435,64,FLEN)
NAN_BOXED(9211244585744295011,64,FLEN)
NAN_BOXED(9211822073191912981,64,FLEN)
NAN_BOXED(13820823816102942334,64,FLEN)
NAN_BOXED(9202295663410811743,64,FLEN)
NAN_BOXED(9211845774205956145,64,FLEN)
NAN_BOXED(13835604318655992270,64,FLEN)
NAN_BOXED(9217136351202176992,64,FLEN)
NAN_BOXED(9211851744925869745,64,FLEN)
NAN_BOXED(13830628525345749472,64,FLEN)
NAN_BOXED(9211958552037349389,64,FLEN)
NAN_BOXED(9211867504937127983,64,FLEN)
NAN_BOXED(13833534147359042257,64,FLEN)
NAN_BOXED(9215269714776486622,64,FLEN)
NAN_BOXED(9211870776779718651,64,FLEN)
NAN_BOXED(13836055868770438056,64,FLEN)
NAN_BOXED(9217817421508472111,64,FLEN)
NAN_BOXED(9211882149695880769,64,FLEN)
NAN_BOXED(13831366662796516291,64,FLEN)
NAN_BOXED(9213058820615514459,64,FLEN)
NAN_BOXED(9211916647028381095,64,FLEN)
NAN_BOXED(13831399543421368870,64,FLEN)
NAN_BOXED(9213147426506479791,64,FLEN)
NAN_BOXED(9211935089786685873,64,FLEN)
NAN_BOXED(13835479294234298217,64,FLEN)
NAN_BOXED(9217053903683115469,64,FLEN)
NAN_BOXED(9211989512145179381,64,FLEN)
NAN_BOXED(13829585257251059517,64,FLEN)
NAN_BOXED(9211275905027269869,64,FLEN)
NAN_BOXED(9212009522606131455,64,FLEN)
NAN_BOXED(13836295483817834941,64,FLEN)
NAN_BOXED(9218340822757837582,64,FLEN)
NAN_BOXED(9212022465432608129,64,FLEN)
NAN_BOXED(13836388780838938129,64,FLEN)
NAN_BOXED(9218495391037063736,64,FLEN)
NAN_BOXED(9212049731378579095,64,FLEN)
NAN_BOXED(13836281149885281401,64,FLEN)
NAN_BOXED(9218370780057776538,64,FLEN)
NAN_BOXED(9212147734451259125,64,FLEN)
NAN_BOXED(13835538757137559839,64,FLEN)
NAN_BOXED(9217376090288444233,64,FLEN)
NAN_BOXED(9212152761953329401,64,FLEN)
NAN_BOXED(13833940921117368782,64,FLEN)
NAN_BOXED(9215813584095507090,64,FLEN)
NAN_BOXED(9212186454041483801,64,FLEN)
NAN_BOXED(13822448370806476633,64,FLEN)
NAN_BOXED(9204545616078109815,64,FLEN)
NAN_BOXED(9212268405839636073,64,FLEN)
NAN_BOXED(13832468056164078843,64,FLEN)
NAN_BOXED(9214784830407432437,64,FLEN)
NAN_BOXED(9212317194179052077,64,FLEN)
NAN_BOXED(13832738312422496352,64,FLEN)
NAN_BOXED(9215028407572342169,64,FLEN)
NAN_BOXED(9212346153858530703,64,FLEN)
NAN_BOXED(13833651167414950396,64,FLEN)
NAN_BOXED(9215758175803723263,64,FLEN)
NAN_BOXED(9212370506063325639,64,FLEN)
NAN_BOXED(13831039565690211250,64,FLEN)
NAN_BOXED(9213125904586409433,64,FLEN)
NAN_BOXED(9212450860427648231,64,FLEN)
NAN_BOXED(13829800831969928921,64,FLEN)
NAN_BOXED(9211857377369032533,64,FLEN)
NAN_BOXED(9212456658662434499,64,FLEN)
NAN_BOXED(13814427241560841807,64,FLEN)
NAN_BOXED(9196883733227815471,64,FLEN)
NAN_BOXED(9212496094929230561,64,FLEN)
NAN_BOXED(13824598375235757169,64,FLEN)
NAN_BOXED(9206841363770618643,64,FLEN)
NAN_BOXED(9212507132822192165,64,FLEN)
NAN_BOXED(13833915681274171895,64,FLEN)
NAN_BOXED(9216103969267168227,64,FLEN)
NAN_BOXED(9212548395717651305,64,FLEN)
NAN_BOXED(13834725526384693921,64,FLEN)
NAN_BOXED(9216786526073900235,64,FLEN)
NAN_BOXED(9212701457630587357,64,FLEN)
NAN_BOXED(13835537159318653550,64,FLEN)
NAN_BOXED(9217986310867060392,64,FLEN)
NAN_BOXED(9212704306495759401,64,FLEN)
NAN_BOXED(13824507046948556417,64,FLEN)
NAN_BOXED(9206941508235235895,64,FLEN)
NAN_BOXED(9212776019976835097,64,FLEN)
NAN_BOXED(13829451149223666541,64,FLEN)
NAN_BOXED(9211867330390743905,64,FLEN)
NAN_BOXED(9212824635112966369,64,FLEN)
NAN_BOXED(13835505041443903389,64,FLEN)
NAN_BOXED(9218069340633636102,64,FLEN)
NAN_BOXED(9212886938525762367,64,FLEN)
NAN_BOXED(13822484862563968503,64,FLEN)
NAN_BOXED(9205402452779568295,64,FLEN)
NAN_BOXED(9213023248537831179,64,FLEN)
NAN_BOXED(13832721510263847690,64,FLEN)
NAN_BOXED(9215538322897672138,64,FLEN)
NAN_BOXED(9213274671755929871,64,FLEN)
NAN_BOXED(13833485650650486602,64,FLEN)
NAN_BOXED(9216396179164404015,64,FLEN)
NAN_BOXED(9213288937784597503,64,FLEN)
NAN_BOXED(13827459354027072771,64,FLEN)
NAN_BOXED(9210563542563479685,64,FLEN)
NAN_BOXED(9213311425348875593,64,FLEN)
NAN_BOXED(13819341893783353462,64,FLEN)
NAN_BOXED(9202356785605388791,64,FLEN)
NAN_BOXED(9213353876145299527,64,FLEN)
NAN_BOXED(13827150195543025310,64,FLEN)
NAN_BOXED(9210331707697938701,64,FLEN)
NAN_BOXED(9213393021444414067,64,FLEN)
NAN_BOXED(13829987194775268025,64,FLEN)
NAN_BOXED(9212886964194517037,64,FLEN)
NAN_BOXED(9213396048282919755,64,FLEN)
NAN_BOXED(13821274969857787261,64,FLEN)
NAN_BOXED(9204145848869603119,64,FLEN)
NAN_BOXED(9213403548812464445,64,FLEN)
NAN_BOXED(13832086524636110591,64,FLEN)
NAN_BOXED(9215252752899954704,64,FLEN)
NAN_BOXED(9213428583705287163,64,FLEN)
NAN_BOXED(13828240831396017716,64,FLEN)
NAN_BOXED(9211355449266043639,64,FLEN)
NAN_BOXED(9213441947714155057,64,FLEN)
NAN_BOXED(13830808708443830023,64,FLEN)
NAN_BOXED(9213898351119106369,64,FLEN)
NAN_BOXED(9213512561825082889,64,FLEN)
NAN_BOXED(13822075705903241555,64,FLEN)
NAN_BOXED(9205409947213525327,64,FLEN)
NAN_BOXED(9213520546537386731,64,FLEN)
NAN_BOXED(13830970397694645708,64,FLEN)
NAN_BOXED(9214274453848310403,64,FLEN)
NAN_BOXED(9213580021630030935,64,FLEN)
NAN_BOXED(13830688610407722120,64,FLEN)
NAN_BOXED(9213824952771633037,64,FLEN)
NAN_BOXED(9213692737959594527,64,FLEN)
NAN_BOXED(13834506458738463156,64,FLEN)
NAN_BOXED(9217685900101502700,64,FLEN)
NAN_BOXED(9213804444775755435,64,FLEN)
NAN_BOXED(13825541857961008797,64,FLEN)
NAN_BOXED(9208823514957403027,64,FLEN)
NAN_BOXED(9213826286275894259,64,FLEN)
NAN_BOXED(13832529693782555317,64,FLEN)
NAN_BOXED(9215952698191979450,64,FLEN)
NAN_BOXED(9213881830918478301,64,FLEN)
NAN_BOXED(13822926259418426622,64,FLEN)
NAN_BOXED(9206421189656375163,64,FLEN)
NAN_BOXED(9213930211314894565,64,FLEN)
NAN_BOXED(13821884975821551417,64,FLEN)
NAN_BOXED(9205461748577756655,64,FLEN)
NAN_BOXED(9213944385379442805,64,FLEN)
NAN_BOXED(13823458770127337669,64,FLEN)
NAN_BOXED(9206969697316552323,64,FLEN)
NAN_BOXED(9213959620701351029,64,FLEN)
NAN_BOXED(13830373259866103785,64,FLEN)
NAN_BOXED(9213786576569294335,64,FLEN)
NAN_BOXED(9214032208612033803,64,FLEN)
NAN_BOXED(13835166738251851581,64,FLEN)
NAN_BOXED(9218745147020681766,64,FLEN)
NAN_BOXED(9214077278651335331,64,FLEN)
NAN_BOXED(13831453526316405002,64,FLEN)
NAN_BOXED(9215091425545928733,64,FLEN)
NAN_BOXED(9214101402603007573,64,FLEN)
NAN_BOXED(13831325910415295491,64,FLEN)
NAN_BOXED(9214982012001272654,64,FLEN)
NAN_BOXED(9214121869746453203,64,FLEN)
NAN_BOXED(13831305395884108238,64,FLEN)
NAN_BOXED(9214974037402117041,64,FLEN)
NAN_BOXED(9214138627355067169,64,FLEN)
NAN_BOXED(13831113435882810928,64,FLEN)
NAN_BOXED(9214796674262459388,64,FLEN)
NAN_BOXED(9214178006236581187,64,FLEN)
NAN_BOXED(13828290245588391304,64,FLEN)
NAN_BOXED(9211960761430066097,64,FLEN)
NAN_BOXED(9214183653575548553,64,FLEN)
NAN_BOXED(13830912869468488748,64,FLEN)
NAN_BOXED(9214625449740041940,64,FLEN)
NAN_BOXED(9214262934824240883,64,FLEN)
NAN_BOXED(13832571447473666278,64,FLEN)
NAN_BOXED(9216308058832802475,64,FLEN)
NAN_BOXED(9214308119931004765,64,FLEN)
NAN_BOXED(13827613394785619722,64,FLEN)
NAN_BOXED(9211385578705091879,64,FLEN)
NAN_BOXED(9214321252393166225,64,FLEN)
NAN_BOXED(13831931481763378582,64,FLEN)
NAN_BOXED(9215713407772210927,64,FLEN)
NAN_BOXED(9214369066889154408,64,FLEN)
NAN_BOXED(13828251768768116760,64,FLEN)
NAN_BOXED(9212068446859454051,64,FLEN)
NAN_BOXED(9214409182700369150,64,FLEN)
NAN_BOXED(13832367354501082598,64,FLEN)
NAN_BOXED(9216239932418824458,64,FLEN)
NAN_BOXED(9214411653033429012,64,FLEN)
NAN_BOXED(13831060979159133938,64,FLEN)
NAN_BOXED(9214923441907549930,64,FLEN)
NAN_BOXED(9214419300390848255,64,FLEN)
NAN_BOXED(13833932358646449374,64,FLEN)
NAN_BOXED(9217838052933806573,64,FLEN)
NAN_BOXED(9214431646078925437,64,FLEN)
NAN_BOXED(13832275222682162984,64,FLEN)
NAN_BOXED(9216177939759891371,64,FLEN)
NAN_BOXED(9214439112190833149,64,FLEN)
NAN_BOXED(13828654266009518448,64,FLEN)
NAN_BOXED(9212581858691552637,64,FLEN)
NAN_BOXED(9214457647266987225,64,FLEN)
NAN_BOXED(13832201198739139333,64,FLEN)
NAN_BOXED(9216138326244809641,64,FLEN)
NAN_BOXED(9214513118895855258,64,FLEN)
NAN_BOXED(13831042923145760416,64,FLEN)
NAN_BOXED(9215017669209124552,64,FLEN)
NAN_BOXED(9214545468549871821,64,FLEN)
NAN_BOXED(13820437449607068167,64,FLEN)
NAN_BOXED(9204564581179193375,64,FLEN)
NAN_BOXED(9214545808255708926,64,FLEN)
NAN_BOXED(13832025295367623772,64,FLEN)
NAN_BOXED(9216075751541069503,64,FLEN)
NAN_BOXED(9214623526116601297,64,FLEN)
NAN_BOXED(13830231977624106210,64,FLEN)
NAN_BOXED(9214453025469420373,64,FLEN)
NAN_BOXED(9214734108619230530,64,FLEN)
NAN_BOXED(13831605804814578509,64,FLEN)
NAN_BOXED(9215871662772329394,64,FLEN)
NAN_BOXED(9214773184265591734,64,FLEN)
NAN_BOXED(13833799244246759399,64,FLEN)
NAN_BOXED(9218312181648657791,64,FLEN)
NAN_BOXED(9214791225740987646,64,FLEN)
NAN_BOXED(13834088169325920296,64,FLEN)
NAN_BOXED(9218659501479696033,64,FLEN)
NAN_BOXED(9214792692647387712,64,FLEN)
NAN_BOXED(13823567863753908956,64,FLEN)
NAN_BOXED(9207998064314892579,64,FLEN)
NAN_BOXED(9214796191638987883,64,FLEN)
NAN_BOXED(13831406170447558483,64,FLEN)
NAN_BOXED(9215729483535912802,64,FLEN)
NAN_BOXED(9214832465776282012,64,FLEN)
NAN_BOXED(13831879372233177087,64,FLEN)
NAN_BOXED(9216294954158221403,64,FLEN)
NAN_BOXED(9214867918782025217,64,FLEN)
NAN_BOXED(13832015414881997099,64,FLEN)
NAN_BOXED(9216492076596064992,64,FLEN)
NAN_BOXED(9214902780368809154,64,FLEN)
NAN_BOXED(13831047784509598927,64,FLEN)
NAN_BOXED(9215455036018185502,64,FLEN)
NAN_BOXED(9214911271581408065,64,FLEN)
NAN_BOXED(13831410526597989352,64,FLEN)
NAN_BOXED(9215871211938524937,64,FLEN)
NAN_BOXED(9214918754309326906,64,FLEN)
NAN_BOXED(13826387467582343036,64,FLEN)
NAN_BOXED(9210793167511465609,64,FLEN)
NAN_BOXED(9214930844678848782,64,FLEN)
NAN_BOXED(13833540741914539994,64,FLEN)
NAN_BOXED(9218292443866527488,64,FLEN)
NAN_BOXED(9214963676672386042,64,FLEN)
NAN_BOXED(13833619994343857517,64,FLEN)
NAN_BOXED(9218436836930130484,64,FLEN)
NAN_BOXED(9215048456491870890,64,FLEN)
NAN_BOXED(13831060413729047947,64,FLEN)
NAN_BOXED(9215631215908752848,64,FLEN)
NAN_BOXED(9215070912437682259,64,FLEN)
NAN_BOXED(13831786039649553615,64,FLEN)
NAN_BOXED(9216495584304611562,64,FLEN)
NAN_BOXED(9215074998408332604,64,FLEN)
NAN_BOXED(13818864772460138572,64,FLEN)
NAN_BOXED(9203672482168028927,64,FLEN)
NAN_BOXED(9215076062136055462,64,FLEN)
NAN_BOXED(13831721110211368092,64,FLEN)
NAN_BOXED(9216426958946460705,64,FLEN)
NAN_BOXED(9215114560588004026,64,FLEN)
NAN_BOXED(13828397268142153738,64,FLEN)
NAN_BOXED(9213347984863093647,64,FLEN)
NAN_BOXED(9215121946629171260,64,FLEN)
NAN_BOXED(13825087646962279954,64,FLEN)
NAN_BOXED(9210055778979964745,64,FLEN)
NAN_BOXED(9215162053260978085,64,FLEN)
NAN_BOXED(13825882191698717540,64,FLEN)
NAN_BOXED(9210559193205708983,64,FLEN)
NAN_BOXED(9215217654635252000,64,FLEN)
NAN_BOXED(13831995887358553340,64,FLEN)
NAN_BOXED(9216932040778522658,64,FLEN)
NAN_BOXED(9215240764802382848,64,FLEN)
NAN_BOXED(13831003868278473081,64,FLEN)
NAN_BOXED(9215777585893673239,64,FLEN)
NAN_BOXED(9215242011784612900,64,FLEN)
NAN_BOXED(13823103891415355385,64,FLEN)
NAN_BOXED(9208094636141678147,64,FLEN)
NAN_BOXED(9215276767585822296,64,FLEN)
NAN_BOXED(13830964048926451591,64,FLEN)
NAN_BOXED(9215769299044110763,64,FLEN)
NAN_BOXED(9215291674632525055,64,FLEN)
NAN_BOXED(13827613548930795711,64,FLEN)
NAN_BOXED(9212672368799613295,64,FLEN)
NAN_BOXED(9215314212352777177,64,FLEN)
NAN_BOXED(13828944743807782255,64,FLEN)
NAN_BOXED(9214314542299722727,64,FLEN)
NAN_BOXED(9215368362290542666,64,FLEN)
NAN_BOXED(13819257345861229293,64,FLEN)
NAN_BOXED(9204564522734404879,64,FLEN)
NAN_BOXED(9215369305554702259,64,FLEN)
NAN_BOXED(13808863055566126066,64,FLEN)
NAN_BOXED(9193862267158790111,64,FLEN)
NAN_BOXED(9215389522997951727,64,FLEN)
NAN_BOXED(13827635088215092193,64,FLEN)
NAN_BOXED(9212830609356085901,64,FLEN)
NAN_BOXED(9215423938829229416,64,FLEN)
NAN_BOXED(13830542735531725336,64,FLEN)
NAN_BOXED(9215416700670420569,64,FLEN)
NAN_BOXED(9215458579542732188,64,FLEN)
NAN_BOXED(13820843938885035568,64,FLEN)
NAN_BOXED(9206014317861323167,64,FLEN)
NAN_BOXED(9215482739211784328,64,FLEN)
NAN_BOXED(13827993336971409524,64,FLEN)
NAN_BOXED(9213403790960443111,64,FLEN)
NAN_BOXED(9215491747685282926,64,FLEN)
NAN_BOXED(13832945906026344540,64,FLEN)
NAN_BOXED(9218481597063196416,64,FLEN)
NAN_BOXED(9215518848884974986,64,FLEN)
NAN_BOXED(13830484161643921073,64,FLEN)
NAN_BOXED(9215474695741280403,64,FLEN)
NAN_BOXED(9215523934159393337,64,FLEN)
NAN_BOXED(13812376928914694803,64,FLEN)
NAN_BOXED(9197406979285459519,64,FLEN)
NAN_BOXED(9215528598790421391,64,FLEN)
NAN_BOXED(13828694038957338542,64,FLEN)
NAN_BOXED(9214351198783489961,64,FLEN)
NAN_BOXED(9215529875788919491,64,FLEN)
NAN_BOXED(13825409072063587164,64,FLEN)
NAN_BOXED(9210622372490233023,64,FLEN)
NAN_BOXED(9215548057464021281,64,FLEN)
NAN_BOXED(13816553326507941874,64,FLEN)
NAN_BOXED(9201727681805837351,64,FLEN)
NAN_BOXED(9215590091602945710,64,FLEN)
NAN_BOXED(13824221306379351806,64,FLEN)
NAN_BOXED(9209922842560623697,64,FLEN)
NAN_BOXED(9215642674862687568,64,FLEN)
NAN_BOXED(13827990179996077598,64,FLEN)
NAN_BOXED(9213628656917033741,64,FLEN)
NAN_BOXED(9215689204809390840,64,FLEN)
NAN_BOXED(13831521143421164404,64,FLEN)
NAN_BOXED(9216940165087840353,64,FLEN)
NAN_BOXED(9215692833668154465,64,FLEN)
NAN_BOXED(13819455227930766849,64,FLEN)
NAN_BOXED(9205304716451479671,64,FLEN)
NAN_BOXED(9215716404933729805,64,FLEN)
NAN_BOXED(13827440944563577440,64,FLEN)
NAN_BOXED(9213020070859092559,64,FLEN)
NAN_BOXED(9215748723361442405,64,FLEN)
NAN_BOXED(13826594182991396468,64,FLEN)
NAN_BOXED(9211955406580327559,64,FLEN)
NAN_BOXED(9215750692378071426,64,FLEN)
NAN_BOXED(13826245013482057603,64,FLEN)
NAN_BOXED(9211500996643398799,64,FLEN)
NAN_BOXED(9215834555131924281,64,FLEN)
NAN_BOXED(13832671035665675667,64,FLEN)
NAN_BOXED(9218641865893101472,64,FLEN)
NAN_BOXED(9215851036857732995,64,FLEN)
NAN_BOXED(13826236790276362370,64,FLEN)
NAN_BOXED(9211594730251310957,64,FLEN)
NAN_BOXED(9215972826272090830,64,FLEN)
NAN_BOXED(13829601823959981566,64,FLEN)
NAN_BOXED(9215326444133202403,64,FLEN)
NAN_BOXED(9216020724022393849,64,FLEN)
NAN_BOXED(13832037476351977669,64,FLEN)
NAN_BOXED(9218049022728222905,64,FLEN)
NAN_BOXED(9216031523500653616,64,FLEN)
NAN_BOXED(13817118072093559692,64,FLEN)
NAN_BOXED(9202622679458107223,64,FLEN)
NAN_BOXED(9216054635448728954,64,FLEN)
NAN_BOXED(13828926456487250496,64,FLEN)
NAN_BOXED(9214935214677617752,64,FLEN)
NAN_BOXED(9216061785554997793,64,FLEN)
NAN_BOXED(13816380199904424372,64,FLEN)
NAN_BOXED(9202094263582377303,64,FLEN)
NAN_BOXED(9216061828199815243,64,FLEN)
NAN_BOXED(13827282301171810381,64,FLEN)
NAN_BOXED(9213253691615197687,64,FLEN)
NAN_BOXED(9216083041216836628,64,FLEN)
NAN_BOXED(13828248860241377495,64,FLEN)
NAN_BOXED(9214490430615334927,64,FLEN)
NAN_BOXED(9216095285732803963,64,FLEN)
NAN_BOXED(13832449591819519868,64,FLEN)
NAN_BOXED(9218718602710421674,64,FLEN)
NAN_BOXED(9216130531616696016,64,FLEN)
NAN_BOXED(13822881090981041287,64,FLEN)
NAN_BOXED(9208980113903982735,64,FLEN)
NAN_BOXED(9216175868489501578,64,FLEN)
NAN_BOXED(13821899538910986647,64,FLEN)
NAN_BOXED(9207662614984417155,64,FLEN)
NAN_BOXED(9216177239035853155,64,FLEN)
NAN_BOXED(13821922111769324245,64,FLEN)
NAN_BOXED(9207695749681360663,64,FLEN)
NAN_BOXED(9216185601633392998,64,FLEN)
NAN_BOXED(13832144206986851200,64,FLEN)
NAN_BOXED(9218418074851695670,64,FLEN)
NAN_BOXED(9216187320090954030,64,FLEN)
NAN_BOXED(13811959580873328089,64,FLEN)
NAN_BOXED(9197765232081059231,64,FLEN)
NAN_BOXED(9216212851671605516,64,FLEN)
NAN_BOXED(13822170164307845926,64,FLEN)
NAN_BOXED(9208084165323801443,64,FLEN)
NAN_BOXED(9216220459040097865,64,FLEN)
NAN_BOXED(13827135050952756253,64,FLEN)
NAN_BOXED(9213247775964119637,64,FLEN)
NAN_BOXED(9216250400290389972,64,FLEN)
NAN_BOXED(13821364492948885547,64,FLEN)
NAN_BOXED(9207113559698511135,64,FLEN)
NAN_BOXED(9216251275738166752,64,FLEN)
NAN_BOXED(13832089539264107223,64,FLEN)
NAN_BOXED(9218429365055233238,64,FLEN)
NAN_BOXED(9216305793580060627,64,FLEN)
NAN_BOXED(13827480364717457233,64,FLEN)
NAN_BOXED(9213847790587922685,64,FLEN)
NAN_BOXED(9216317995910353954,64,FLEN)
NAN_BOXED(13832219719111813231,64,FLEN)
NAN_BOXED(9218705464587434452,64,FLEN)
NAN_BOXED(9216333109632494251,64,FLEN)
NAN_BOXED(13822354572712771866,64,FLEN)
NAN_BOXED(9208486059591074707,64,FLEN)
NAN_BOXED(9216358882508548365,64,FLEN)
NAN_BOXED(13825735082534873880,64,FLEN)
NAN_BOXED(9211627489107507655,64,FLEN)
NAN_BOXED(9216366966528207138,64,FLEN)
NAN_BOXED(13817548293269047544,64,FLEN)
NAN_BOXED(9203585146315652255,64,FLEN)
NAN_BOXED(9216388889460470632,64,FLEN)
NAN_BOXED(13829001159331589721,64,FLEN)
NAN_BOXED(9215263192474270793,64,FLEN)
NAN_BOXED(9216391646844312928,64,FLEN)
NAN_BOXED(13832242004726959577,64,FLEN)
NAN_BOXED(9218838663973731251,64,FLEN)
NAN_BOXED(9216392727481333317,64,FLEN)
NAN_BOXED(13830345530726215996,64,FLEN)
NAN_BOXED(9216241227448913886,64,FLEN)
NAN_BOXED(9216443233627779527,64,FLEN)
NAN_BOXED(13824680567421662910,64,FLEN)
NAN_BOXED(9210938297914209137,64,FLEN)
NAN_BOXED(9216491245173539721,64,FLEN)
NAN_BOXED(13830563789951981302,64,FLEN)
NAN_BOXED(9216504986727561532,64,FLEN)
NAN_BOXED(9216491868714461540,64,FLEN)
NAN_BOXED(13827406751170296721,64,FLEN)
NAN_BOXED(9213984547788766643,64,FLEN)
NAN_BOXED(9216560359873353929,64,FLEN)
NAN_BOXED(13825555980118383047,64,FLEN)
NAN_BOXED(9211688695329619297,64,FLEN)
NAN_BOXED(9216562153305425134,64,FLEN)
NAN_BOXED(13829383935169703969,64,FLEN)
NAN_BOXED(9215691343362843187,64,FLEN)
NAN_BOXED(9216593097466899698,64,FLEN)
NAN_BOXED(13823067019100569142,64,FLEN)
NAN_BOXED(9209857598587627707,64,FLEN)
NAN_BOXED(9216667358668954476,64,FLEN)
NAN_BOXED(13827538091194265337,64,FLEN)
NAN_BOXED(9214388099600543511,64,FLEN)
NAN_BOXED(9216698488169881132,64,FLEN)
NAN_BOXED(13822208981295189632,64,FLEN)
NAN_BOXED(9208695902789403015,64,FLEN)
NAN_BOXED(9216725205626584142,64,FLEN)
NAN_BOXED(13813789969515145427,64,FLEN)
NAN_BOXED(9200615807291770303,64,FLEN)
NAN_BOXED(9216729005250324726,64,FLEN)
NAN_BOXED(13831247257281914008,64,FLEN)
NAN_BOXED(9217785493557085711,64,FLEN)
NAN_BOXED(9216745423845561701,64,FLEN)
NAN_BOXED(13825100209255361659,64,FLEN)
NAN_BOXED(9211515246633611453,64,FLEN)
NAN_BOXED(9216767277830636936,64,FLEN)
NAN_BOXED(13830896006402752242,64,FLEN)
NAN_BOXED(9217291028446608676,64,FLEN)
NAN_BOXED(9216776401297111708,64,FLEN)
NAN_BOXED(13809090107780689413,64,FLEN)
NAN_BOXED(9195876256490176159,64,FLEN)
NAN_BOXED(9216889016358819988,64,FLEN)
NAN_BOXED(13831782998854598921,64,FLEN)
NAN_BOXED(9218806133789414973,64,FLEN)
NAN_BOXED(9216893755690076442,64,FLEN)
NAN_BOXED(13830627547177527434,64,FLEN)
NAN_BOXED(9217007890486939177,64,FLEN)
NAN_BOXED(9216906696826466597,64,FLEN)
NAN_BOXED(13817135811853669694,64,FLEN)
NAN_BOXED(9203540065917752119,64,FLEN)
NAN_BOXED(9216915860231517878,64,FLEN)
NAN_BOXED(13830073907430948745,64,FLEN)
NAN_BOXED(9216539485056448740,64,FLEN)
NAN_BOXED(9216916337607361022,64,FLEN)
NAN_BOXED(13823847342019481109,64,FLEN)
NAN_BOXED(9210686784058820725,64,FLEN)
NAN_BOXED(9216998257866756928,64,FLEN)
NAN_BOXED(13831146500147600061,64,FLEN)
NAN_BOXED(9217936492539677334,64,FLEN)
NAN_BOXED(9217027202617010652,64,FLEN)
NAN_BOXED(13828664676439036423,64,FLEN)
NAN_BOXED(9215523728488956278,64,FLEN)
NAN_BOXED(9217036219905009538,64,FLEN)
NAN_BOXED(13828448821843973995,64,FLEN)
NAN_BOXED(9215358907777067992,64,FLEN)
NAN_BOXED(9217074642290961207,64,FLEN)
NAN_BOXED(13828999817184778958,64,FLEN)
NAN_BOXED(9215829612006204418,64,FLEN)
NAN_BOXED(9217092150803337397,64,FLEN)
NAN_BOXED(13819711772429725906,64,FLEN)
NAN_BOXED(9206611438615645419,64,FLEN)
NAN_BOXED(9217105046855819480,64,FLEN)
NAN_BOXED(13827194634446038609,64,FLEN)
NAN_BOXED(9214402996858981747,64,FLEN)
NAN_BOXED(9217133065809577314,64,FLEN)
NAN_BOXED(13828857831918958472,64,FLEN)
NAN_BOXED(9215763321967781379,64,FLEN)
NAN_BOXED(9217139895791244801,64,FLEN)
NAN_BOXED(13825401433203169647,64,FLEN)
NAN_BOXED(9212111501898350957,64,FLEN)
NAN_BOXED(9217186550503072895,64,FLEN)
NAN_BOXED(13828154737115648977,64,FLEN)
NAN_BOXED(9215234924055484938,64,FLEN)
NAN_BOXED(9217255447473700414,64,FLEN)
NAN_BOXED(13828184656876023135,64,FLEN)
NAN_BOXED(9215310027132710151,64,FLEN)
NAN_BOXED(9217292876402054491,64,FLEN)
NAN_BOXED(13827654960053934795,64,FLEN)
NAN_BOXED(9214900567502943009,64,FLEN)
NAN_BOXED(9217323203696576089,64,FLEN)
NAN_BOXED(13830406152903168298,64,FLEN)
NAN_BOXED(9217200343080518944,64,FLEN)
NAN_BOXED(9217334735154975368,64,FLEN)
NAN_BOXED(13825032119065532254,64,FLEN)
NAN_BOXED(9211985864139809483,64,FLEN)
NAN_BOXED(9217388360257961724,64,FLEN)
NAN_BOXED(13821572312323461561,64,FLEN)
NAN_BOXED(9208423038393547999,64,FLEN)
NAN_BOXED(9217407812619699596,64,FLEN)
NAN_BOXED(13826921930487811890,64,FLEN)
NAN_BOXED(9214363851721869313,64,FLEN)
NAN_BOXED(9217411008733377127,64,FLEN)
NAN_BOXED(13822821674142848753,64,FLEN)
NAN_BOXED(9210200731671248243,64,FLEN)
NAN_BOXED(9217426637511308449,64,FLEN)
NAN_BOXED(13830992959921104969,64,FLEN)
NAN_BOXED(9218163261600600635,64,FLEN)
NAN_BOXED(9217440201439154890,64,FLEN)
NAN_BOXED(13823243352939585074,64,FLEN)
NAN_BOXED(9210574273330644021,64,FLEN)
NAN_BOXED(9217451043521889687,64,FLEN)
NAN_BOXED(13828862354938345642,64,FLEN)
NAN_BOXED(9216025215687473547,64,FLEN)
NAN_BOXED(9217458747188347080,64,FLEN)
NAN_BOXED(13826925153451394865,64,FLEN)
NAN_BOXED(9214397456307910171,64,FLEN)
NAN_BOXED(9217463337990644441,64,FLEN)
NAN_BOXED(13827181964533855621,64,FLEN)
NAN_BOXED(9214616946555746099,64,FLEN)
NAN_BOXED(9217478776138492909,64,FLEN)
NAN_BOXED(13820878920311586119,64,FLEN)
NAN_BOXED(9207906353941802295,64,FLEN)
NAN_BOXED(9217490834917471235,64,FLEN)
NAN_BOXED(13823678797864949560,64,FLEN)
NAN_BOXED(9210977970567797231,64,FLEN)
NAN_BOXED(9217509782222695943,64,FLEN)
NAN_BOXED(13819306390161383620,64,FLEN)
NAN_BOXED(9206599731248999435,64,FLEN)
NAN_BOXED(9217521703612614450,64,FLEN)
NAN_BOXED(13827014957478249871,64,FLEN)
NAN_BOXED(9214511422236879955,64,FLEN)
NAN_BOXED(9217579651217688814,64,FLEN)
NAN_BOXED(13828537446167634116,64,FLEN)
NAN_BOXED(9215851243496183764,64,FLEN)
NAN_BOXED(9217583511688100463,64,FLEN)
NAN_BOXED(13830997070428879043,64,FLEN)
NAN_BOXED(9218342458468185872,64,FLEN)
NAN_BOXED(9217608170375816366,64,FLEN)
NAN_BOXED(13826229824130968883,64,FLEN)
NAN_BOXED(9213412425334823023,64,FLEN)
NAN_BOXED(9217652559163703641,64,FLEN)
NAN_BOXED(13828343798613219818,64,FLEN)
NAN_BOXED(9215740317792439961,64,FLEN)
NAN_BOXED(9217665722832834154,64,FLEN)
NAN_BOXED(13829657524753440844,64,FLEN)
NAN_BOXED(9216888557429666401,64,FLEN)
NAN_BOXED(9217691100632018898,64,FLEN)
NAN_BOXED(13831080026488985073,64,FLEN)
NAN_BOXED(9218604846921647969,64,FLEN)
NAN_BOXED(9217744151263056657,64,FLEN)
NAN_BOXED(13808986948158418790,64,FLEN)
NAN_BOXED(9196620145731142671,64,FLEN)
NAN_BOXED(9217796217395204600,64,FLEN)
NAN_BOXED(13822884867454258570,64,FLEN)
NAN_BOXED(9210503509470176311,64,FLEN)
NAN_BOXED(9217802493842577392,64,FLEN)
NAN_BOXED(13820602834126230621,64,FLEN)
NAN_BOXED(9207962638540873207,64,FLEN)
NAN_BOXED(9217824139273885225,64,FLEN)
NAN_BOXED(13831021018486038698,64,FLEN)
NAN_BOXED(9218649078008102844,64,FLEN)
NAN_BOXED(9217854692234305209,64,FLEN)
NAN_BOXED(13827490410620599323,64,FLEN)
NAN_BOXED(9215135500269772493,64,FLEN)
NAN_BOXED(9217871622383705405,64,FLEN)
NAN_BOXED(13831037923716680669,64,FLEN)
NAN_BOXED(9218731548963910910,64,FLEN)
NAN_BOXED(9217882875152192110,64,FLEN)
NAN_BOXED(13823377507578498152,64,FLEN)
NAN_BOXED(9210998443181134007,64,FLEN)
NAN_BOXED(9217890865319177463,64,FLEN)
NAN_BOXED(13819622851305808051,64,FLEN)
NAN_BOXED(9207168121050554511,64,FLEN)
NAN_BOXED(9217936684051791030,64,FLEN)
NAN_BOXED(13830685760263286448,64,FLEN)
NAN_BOXED(9218172127557777604,64,FLEN)
NAN_BOXED(9217980101840660483,64,FLEN)
NAN_BOXED(13827358395788701836,64,FLEN)
NAN_BOXED(9215099253506689867,64,FLEN)
NAN_BOXED(9217983747593186460,64,FLEN)
NAN_BOXED(13821373965115424295,64,FLEN)
NAN_BOXED(9208820277772342235,64,FLEN)
NAN_BOXED(9218016616046985829,64,FLEN)
NAN_BOXED(13830653368599639405,64,FLEN)
NAN_BOXED(9218195733315040177,64,FLEN)
NAN_BOXED(9218019564396385108,64,FLEN)
NAN_BOXED(13825498751997911813,64,FLEN)
NAN_BOXED(9213015893130182961,64,FLEN)
NAN_BOXED(9218047442221648536,64,FLEN)
NAN_BOXED(13828913655534611713,64,FLEN)
NAN_BOXED(9216556198991019030,64,FLEN)
NAN_BOXED(9218109903545141650,64,FLEN)
NAN_BOXED(13828788620180815666,64,FLEN)
NAN_BOXED(9216492776415063894,64,FLEN)
NAN_BOXED(9218114291906721014,64,FLEN)
NAN_BOXED(13827366362011660963,64,FLEN)
NAN_BOXED(9215193127620303728,64,FLEN)
NAN_BOXED(9218123942374501969,64,FLEN)
NAN_BOXED(13826544669425294816,64,FLEN)
NAN_BOXED(9214445587161979567,64,FLEN)
NAN_BOXED(9218141031359721311,64,FLEN)
NAN_BOXED(13818408183266881370,64,FLEN)
NAN_BOXED(9206248265100804647,64,FLEN)
NAN_BOXED(9218145992930883639,64,FLEN)
NAN_BOXED(13829959806055486497,64,FLEN)
NAN_BOXED(9217599038647212567,64,FLEN)
NAN_BOXED(9218151924211005605,64,FLEN)
NAN_BOXED(13829241207905869387,64,FLEN)
NAN_BOXED(9216943143908537594,64,FLEN)
NAN_BOXED(9218215920129577086,64,FLEN)
NAN_BOXED(13824565353845584670,64,FLEN)
NAN_BOXED(9212334433967041423,64,FLEN)
NAN_BOXED(9218216135774750676,64,FLEN)
NAN_BOXED(13830817370266438050,64,FLEN)
NAN_BOXED(9218703884440866085,64,FLEN)
NAN_BOXED(9218292417667741029,64,FLEN)
NAN_BOXED(13828552805852789475,64,FLEN)
NAN_BOXED(9216418775407809305,64,FLEN)
NAN_BOXED(9218296585782234536,64,FLEN)
NAN_BOXED(13827109670575957961,64,FLEN)
NAN_BOXED(9215070504128284413,64,FLEN)
NAN_BOXED(9218299572131734531,64,FLEN)
NAN_BOXED(13822603482119953352,64,FLEN)
NAN_BOXED(9210566323400379311,64,FLEN)
NAN_BOXED(9218370381257204824,64,FLEN)
NAN_BOXED(13827337339779118490,64,FLEN)
NAN_BOXED(9215331156835176267,64,FLEN)
NAN_BOXED(9218382511743589677,64,FLEN)
NAN_BOXED(13826199772480062686,64,FLEN)
NAN_BOXED(9214160677363340203,64,FLEN)
NAN_BOXED(9218388873280190481,64,FLEN)
NAN_BOXED(13827733089835628874,64,FLEN)
NAN_BOXED(9215717723448316892,64,FLEN)
NAN_BOXED(9218486923504790693,64,FLEN)
NAN_BOXED(13786820725147105589,64,FLEN)
NAN_BOXED(9174888790396942335,64,FLEN)
NAN_BOXED(9218552843860366403,64,FLEN)
NAN_BOXED(13792544227344655527,64,FLEN)
NAN_BOXED(9180612040746125055,64,FLEN)
NAN_BOXED(9218554336328693520,64,FLEN)
NAN_BOXED(13816102878027724511,64,FLEN)
NAN_BOXED(9204135565730860287,64,FLEN)
NAN_BOXED(9218554651806908886,64,FLEN)
NAN_BOXED(13828634006881468640,64,FLEN)
NAN_BOXED(9216701106052917685,64,FLEN)
NAN_BOXED(9218557198949283806,64,FLEN)
NAN_BOXED(13828919139688546944,64,FLEN)
NAN_BOXED(9216978390329119747,64,FLEN)
NAN_BOXED(9218599585487863748,64,FLEN)
NAN_BOXED(13830368387827397000,64,FLEN)
NAN_BOXED(9218419071513297185,64,FLEN)
NAN_BOXED(9218612341581986923,64,FLEN)
NAN_BOXED(13826494718298735877,64,FLEN)
NAN_BOXED(9214668032010862998,64,FLEN)
NAN_BOXED(9218652938912390718,64,FLEN)
NAN_BOXED(13829581720245635936,64,FLEN)
NAN_BOXED(9217703476313759761,64,FLEN)
NAN_BOXED(9218684361307398613,64,FLEN)
NAN_BOXED(13829908576907185358,64,FLEN)
NAN_BOXED(9218051682081786020,64,FLEN)
NAN_BOXED(9218688937833984811,64,FLEN)
NAN_BOXED(13812666474454329251,64,FLEN)
NAN_BOXED(9200888187030985591,64,FLEN)
NAN_BOXED(9218740966690633189,64,FLEN)
NAN_BOXED(13823587878362673107,64,FLEN)
NAN_BOXED(9211809245636962355,64,FLEN)
NAN_BOXED(9218782507401742442,64,FLEN)
NAN_BOXED(13826821823067907688,64,FLEN)
NAN_BOXED(9215085484604135839,64,FLEN)
NAN_BOXED(9218802446703861082,64,FLEN)
NAN_BOXED(13817657090864539818,64,FLEN)
NAN_BOXED(9205933582899663595,64,FLEN)
NAN_BOXED(9218844629293386462,64,FLEN)
NAN_BOXED(13829957401613592714,64,FLEN)
NAN_BOXED(9218249153392384325,64,FLEN)
NAN_BOXED(9218857724400860619,64,FLEN)
NAN_BOXED(13822021035159633593,64,FLEN)
NAN_BOXED(9210329096824203391,64,FLEN)
NAN_BOXED(9218860127975795905,64,FLEN)
NAN_BOXED(13809245488698280072,64,FLEN)
NAN_BOXED(9197554200299018511,64,FLEN)
NAN_BOXED(9218860587805999957,64,FLEN)
NAN_BOXED(13820090982256409228,64,FLEN)
NAN_BOXED(9208398383493500703,64,FLEN)
NAN_BOXED(9168729177238126591,64,FLEN)
NAN_BOXED(13880320691663468241,64,FLEN)
NAN_BOXED(9218691875731006777,64,FLEN)
NAN_BOXED(9186043585219327103,64,FLEN)
NAN_BOXED(13859526670538834132,64,FLEN)
NAN_BOXED(9215384171603532070,64,FLEN)
NAN_BOXED(9189206512802745087,64,FLEN)
NAN_BOXED(13858249422169065198,64,FLEN)
NAN_BOXED(9217180071974570091,64,FLEN)
NAN_BOXED(9189708848962956991,64,FLEN)
NAN_BOXED(13852172805323700843,64,FLEN)
NAN_BOXED(9211540743355769329,64,FLEN)
NAN_BOXED(9192226492909654175,64,FLEN)
NAN_BOXED(13844226515358375907,64,FLEN)
NAN_BOXED(9205912146900411139,64,FLEN)
NAN_BOXED(9193105341548571519,64,FLEN)
NAN_BOXED(13847073756823336291,64,FLEN)
NAN_BOXED(9210163293697168123,64,FLEN)
NAN_BOXED(9195338219134937183,64,FLEN)
NAN_BOXED(13840177172270273109,64,FLEN)
NAN_BOXED(9205397874508853923,64,FLEN)
NAN_BOXED(9196523562736118479,64,FLEN)
NAN_BOXED(13843128688163771492,64,FLEN)
NAN_BOXED(9209234916182107759,64,FLEN)
NAN_BOXED(9199400698561428959,64,FLEN)
NAN_BOXED(13822944031691475328,64,FLEN)
NAN_BOXED(9192291570554701535,64,FLEN)
NAN_BOXED(9200980743350742783,64,FLEN)
NAN_BOXED(13843612995231772851,64,FLEN)
NAN_BOXED(9214153263661008785,64,FLEN)
NAN_BOXED(9201295564307798231,64,FLEN)
NAN_BOXED(13845575505371909919,64,FLEN)
NAN_BOXED(9216464676562875058,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 182*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
