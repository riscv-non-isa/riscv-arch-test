
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b3 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b3)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f18, rs2==f6, rs3==f8, rd==f18,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0x5a5a59bbb3fff and fs2 == 1 and fe2 == 0x408 and fm2 == 0x32d10b0d92edf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9f1ad1f9dea0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f18; op2:f6; op3:f8; dest:f18; op1val:0x7f45a5a59bbb3fff; op2val:0xc0832d10b0d92edf;
op3val:0x7fd9f1ad1f9dea0f; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f18, f18, f6, f8, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f9, rs2==f25, rs3==f28, rd==f30,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0x5a5a59bbb3fff and fs2 == 1 and fe2 == 0x408 and fm2 == 0x32d10b0d92edf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9f1ad1f9dea0f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f9; op2:f25; op3:f28; dest:f30; op1val:0x7f45a5a59bbb3fff; op2val:0xc0832d10b0d92edf;
op3val:0x7fd9f1ad1f9dea0f; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f30, f9, f25, f28, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f0, rs2==f0, rs3==f5, rd==f0,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0x5a5a59bbb3fff and fs2 == 1 and fe2 == 0x408 and fm2 == 0x32d10b0d92edf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9f1ad1f9dea0f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f0; op2:f0; op3:f5; dest:f0; op1val:0x7f45a5a59bbb3fff; op2val:0x7f45a5a59bbb3fff;
op3val:0x7fd9f1ad1f9dea0f; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f0, f0, f0, f5, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rs3 == rd, rs1==f24, rs2==f24, rs3==f24, rd==f24,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0x5a5a59bbb3fff and fs2 == 1 and fe2 == 0x408 and fm2 == 0x32d10b0d92edf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9f1ad1f9dea0f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f24; op2:f24; op3:f24; dest:f24; op1val:0x7f45a5a59bbb3fff; op2val:0x7f45a5a59bbb3fff;
op3val:0x7f45a5a59bbb3fff; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f24, f24, f24, f24, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f5, rs2==f5, rs3==f30, rd==f23,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0x5a5a59bbb3fff and fs2 == 1 and fe2 == 0x408 and fm2 == 0x32d10b0d92edf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9f1ad1f9dea0f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f5; op2:f5; op3:f30; dest:f23; op1val:0x7f45a5a59bbb3fff; op2val:0x7f45a5a59bbb3fff;
op3val:0x7fd9f1ad1f9dea0f; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f23, f5, f5, f30, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f1, rs2==f22, rs3==f13, rd==f22,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f1; op2:f22; op3:f13; dest:f22; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f22, f1, f22, f13, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f26, rs2==f17, rs3==f17, rd==f7,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f26; op2:f17; op3:f17; dest:f7; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0xc07eaf869e3b1341; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f7, f26, f17, f17, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f29, rs2==f30, rs3==f29, rd==f17,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f29; op2:f30; op3:f29; dest:f17; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7f5d144fc758c3ff; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f17, f29, f30, f29, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f14, rs2==f8, rs3==f11, rd==f11,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f14; op2:f8; op3:f11; dest:f11; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f11, f14, f8, f11, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rd == rs2 == rs3 != rs1, rs1==f19, rs2==f1, rs3==f1, rd==f1,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f19; op2:f1; op3:f1; dest:f1; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0xc07eaf869e3b1341; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f1, f19, f1, f1, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f31, rs2==f10, rs3==f31, rd==f31,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f31; op2:f10; op3:f31; dest:f31; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7f6bb6ea62484dff; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f31, f10, f31, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 == rs3 != rd, rs1==f4, rs2==f4, rs3==f4, rd==f20,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f4; op2:f4; op3:f4; dest:f20; op1val:0x7f6bb6ea62484dff; op2val:0x7f6bb6ea62484dff;
op3val:0x7f6bb6ea62484dff; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f20, f4, f4, f4, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f25, rs2==f18, rs3==f15, rd==f5,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f25; op2:f18; op3:f15; dest:f5; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f5, f25, f18, f15, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f7, rs2==f28, rs3==f18, rd==f25,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f7; op2:f28; op3:f18; dest:f25; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f25, f7, f28, f18, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f16, rs2==f3, rs3==f20, rd==f21,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f16; op2:f3; op3:f20; dest:f21; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f21, f16, f3, f20, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f3, rs2==f12, rs3==f21, rd==f2,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f3; op2:f12; op3:f21; dest:f2; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7fa7ec9ded4be93f; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f2, f3, f12, f21, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f13, rs2==f14, rs3==f16, rd==f26,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f13; op2:f14; op3:f16; dest:f26; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7fa7ec9ded4be93f; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f26, f13, f14, f16, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f2, rs2==f7, rs3==f26, rd==f12,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f2; op2:f7; op3:f26; dest:f12; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7fa7ec9ded4be93f; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f12, f2, f7, f26, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f20, rs2==f31, rs3==f19, rd==f10,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f20; op2:f31; op3:f19; dest:f10; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7fa7ec9ded4be93f; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f10, f20, f31, f19, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f6, rs2==f9, rs3==f25, rd==f8,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x297b073ec28bf and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4969a46af80a4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7ec9ded4be93f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f6; op2:f9; op3:f25; dest:f8; op1val:0x7f8297b073ec28bf; op2val:0xc014969a46af80a4;
op3val:0x7fa7ec9ded4be93f; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f8, f6, f9, f25, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f30, rs2==f27, rs3==f12, rd==f16,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x7b799796bf9ff and fs2 == 1 and fe2 == 0x404 and fm2 == 0x79dd7cecf9d03 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x180f30b184945 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f27; op3:f12; dest:f16; op1val:0x7f87b799796bf9ff; op2val:0xc0479dd7cecf9d03;
op3val:0x7fe180f30b184945; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f16, f30, f27, f12, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f21, rs2==f15, rs3==f9, rd==f27,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x7b799796bf9ff and fs2 == 1 and fe2 == 0x404 and fm2 == 0x79dd7cecf9d03 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x180f30b184945 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f21; op2:f15; op3:f9; dest:f27; op1val:0x7f87b799796bf9ff; op2val:0xc0479dd7cecf9d03;
op3val:0x7fe180f30b184945; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f27, f21, f15, f9, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f23, rs2==f2, rs3==f14, rd==f4,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x7b799796bf9ff and fs2 == 1 and fe2 == 0x404 and fm2 == 0x79dd7cecf9d03 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x180f30b184945 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f23; op2:f2; op3:f14; dest:f4; op1val:0x7f87b799796bf9ff; op2val:0xc0479dd7cecf9d03;
op3val:0x7fe180f30b184945; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f4, f23, f2, f14, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f22, rs2==f16, rs3==f0, rd==f28,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x7b799796bf9ff and fs2 == 1 and fe2 == 0x404 and fm2 == 0x79dd7cecf9d03 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x180f30b184945 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f22; op2:f16; op3:f0; dest:f28; op1val:0x7f87b799796bf9ff; op2val:0xc0479dd7cecf9d03;
op3val:0x7fe180f30b184945; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f28, f22, f16, f0, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f28, rs2==f13, rs3==f3, rd==f29,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x7b799796bf9ff and fs2 == 1 and fe2 == 0x404 and fm2 == 0x79dd7cecf9d03 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x180f30b184945 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f28; op2:f13; op3:f3; dest:f29; op1val:0x7f87b799796bf9ff; op2val:0xc0479dd7cecf9d03;
op3val:0x7fe180f30b184945; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f29, f28, f13, f3, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f12, rs2==f23, rs3==f10, rd==f19,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xadb9cbb2edaff and fs2 == 1 and fe2 == 0x403 and fm2 == 0x086bf70a767c0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbbdcd5687c963 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f12; op2:f23; op3:f10; dest:f19; op1val:0x7f8adb9cbb2edaff; op2val:0xc03086bf70a767c0;
op3val:0x7fcbbdcd5687c963; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f19, f12, f23, f10, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f27, rs2==f21, rs3==f7, rd==f14,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xadb9cbb2edaff and fs2 == 1 and fe2 == 0x403 and fm2 == 0x086bf70a767c0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbbdcd5687c963 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f27; op2:f21; op3:f7; dest:f14; op1val:0x7f8adb9cbb2edaff; op2val:0xc03086bf70a767c0;
op3val:0x7fcbbdcd5687c963; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f14, f27, f21, f7, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f11, rs2==f20, rs3==f6, rd==f3,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xadb9cbb2edaff and fs2 == 1 and fe2 == 0x403 and fm2 == 0x086bf70a767c0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbbdcd5687c963 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f11; op2:f20; op3:f6; dest:f3; op1val:0x7f8adb9cbb2edaff; op2val:0xc03086bf70a767c0;
op3val:0x7fcbbdcd5687c963; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f3, f11, f20, f6, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f8, rs2==f26, rs3==f27, rd==f6,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xadb9cbb2edaff and fs2 == 1 and fe2 == 0x403 and fm2 == 0x086bf70a767c0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbbdcd5687c963 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f8; op2:f26; op3:f27; dest:f6; op1val:0x7f8adb9cbb2edaff; op2val:0xc03086bf70a767c0;
op3val:0x7fcbbdcd5687c963; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f6, f8, f26, f27, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f15, rs2==f29, rs3==f2, rd==f13,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xadb9cbb2edaff and fs2 == 1 and fe2 == 0x403 and fm2 == 0x086bf70a767c0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xbbdcd5687c963 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f15; op2:f29; op3:f2; dest:f13; op1val:0x7f8adb9cbb2edaff; op2val:0xc03086bf70a767c0;
op3val:0x7fcbbdcd5687c963; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f13, f15, f29, f2, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f17, rs2==f11, rs3==f22, rd==f15,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xb0a547af4b77f and fs2 == 1 and fe2 == 0x404 and fm2 == 0x42af94e43542f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x10ac5063dc350 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f17; op2:f11; op3:f22; dest:f15; op1val:0x7f8b0a547af4b77f; op2val:0xc0442af94e43542f;
op3val:0x7fe10ac5063dc350; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f15, f17, f11, f22, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f10, rs2==f19, rs3==f23, rd==f9,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xb0a547af4b77f and fs2 == 1 and fe2 == 0x404 and fm2 == 0x42af94e43542f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x10ac5063dc350 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f10; op2:f19; op3:f23; dest:f9; op1val:0x7f8b0a547af4b77f; op2val:0xc0442af94e43542f;
op3val:0x7fe10ac5063dc350; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f9, f10, f19, f23, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xb0a547af4b77f and fs2 == 1 and fe2 == 0x404 and fm2 == 0x42af94e43542f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x10ac5063dc350 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8b0a547af4b77f; op2val:0xc0442af94e43542f;
op3val:0x7fe10ac5063dc350; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xb0a547af4b77f and fs2 == 1 and fe2 == 0x404 and fm2 == 0x42af94e43542f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x10ac5063dc350 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8b0a547af4b77f; op2val:0xc0442af94e43542f;
op3val:0x7fe10ac5063dc350; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xb0a547af4b77f and fs2 == 1 and fe2 == 0x404 and fm2 == 0x42af94e43542f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x10ac5063dc350 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8b0a547af4b77f; op2val:0xc0442af94e43542f;
op3val:0x7fe10ac5063dc350; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xdd1e76dfee33f and fs2 == 1 and fe2 == 0x404 and fm2 == 0xabaae8cebcd22 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8e882c33ae96b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8dd1e76dfee33f; op2val:0xc04abaae8cebcd22;
op3val:0x7fe8e882c33ae96b; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xdd1e76dfee33f and fs2 == 1 and fe2 == 0x404 and fm2 == 0xabaae8cebcd22 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8e882c33ae96b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8dd1e76dfee33f; op2val:0xc04abaae8cebcd22;
op3val:0x7fe8e882c33ae96b; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xdd1e76dfee33f and fs2 == 1 and fe2 == 0x404 and fm2 == 0xabaae8cebcd22 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8e882c33ae96b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8dd1e76dfee33f; op2val:0xc04abaae8cebcd22;
op3val:0x7fe8e882c33ae96b; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xdd1e76dfee33f and fs2 == 1 and fe2 == 0x404 and fm2 == 0xabaae8cebcd22 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8e882c33ae96b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8dd1e76dfee33f; op2val:0xc04abaae8cebcd22;
op3val:0x7fe8e882c33ae96b; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xdd1e76dfee33f and fs2 == 1 and fe2 == 0x404 and fm2 == 0xabaae8cebcd22 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8e882c33ae96b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f8dd1e76dfee33f; op2val:0xc04abaae8cebcd22;
op3val:0x7fe8e882c33ae96b; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x2804bc647cadf and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5ccc17c4e0cf2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x93526f5ace10b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f92804bc647cadf; op2val:0xc045ccc17c4e0cf2;
op3val:0x7fe93526f5ace10b; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x2804bc647cadf and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5ccc17c4e0cf2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x93526f5ace10b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f92804bc647cadf; op2val:0xc045ccc17c4e0cf2;
op3val:0x7fe93526f5ace10b; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x2804bc647cadf and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5ccc17c4e0cf2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x93526f5ace10b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f92804bc647cadf; op2val:0xc045ccc17c4e0cf2;
op3val:0x7fe93526f5ace10b; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x2804bc647cadf and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5ccc17c4e0cf2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x93526f5ace10b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f92804bc647cadf; op2val:0xc045ccc17c4e0cf2;
op3val:0x7fe93526f5ace10b; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x2804bc647cadf and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5ccc17c4e0cf2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x93526f5ace10b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f92804bc647cadf; op2val:0xc045ccc17c4e0cf2;
op3val:0x7fe93526f5ace10b; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa2aa7aaa16f3f and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc472e2120c319 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x71f8711b7a3e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a2aa7aaa16f3f; op2val:0xc03c472e2120c319;
op3val:0x7fe71f8711b7a3e6; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa2aa7aaa16f3f and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc472e2120c319 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x71f8711b7a3e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a2aa7aaa16f3f; op2val:0xc03c472e2120c319;
op3val:0x7fe71f8711b7a3e6; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa2aa7aaa16f3f and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc472e2120c319 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x71f8711b7a3e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a2aa7aaa16f3f; op2val:0xc03c472e2120c319;
op3val:0x7fe71f8711b7a3e6; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa2aa7aaa16f3f and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc472e2120c319 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x71f8711b7a3e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a2aa7aaa16f3f; op2val:0xc03c472e2120c319;
op3val:0x7fe71f8711b7a3e6; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa2aa7aaa16f3f and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc472e2120c319 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x71f8711b7a3e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a2aa7aaa16f3f; op2val:0xc03c472e2120c319;
op3val:0x7fe71f8711b7a3e6; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc48f21909621f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x72c5b0c847b8b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x47ba2c9621783 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c48f21909621f; op2val:0xc0172c5b0c847b8b;
op3val:0x7fc47ba2c9621783; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc48f21909621f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x72c5b0c847b8b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x47ba2c9621783 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c48f21909621f; op2val:0xc0172c5b0c847b8b;
op3val:0x7fc47ba2c9621783; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc48f21909621f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x72c5b0c847b8b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x47ba2c9621783 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c48f21909621f; op2val:0xc0172c5b0c847b8b;
op3val:0x7fc47ba2c9621783; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc48f21909621f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x72c5b0c847b8b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x47ba2c9621783 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c48f21909621f; op2val:0xc0172c5b0c847b8b;
op3val:0x7fc47ba2c9621783; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc48f21909621f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x72c5b0c847b8b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x47ba2c9621783 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c48f21909621f; op2val:0xc0172c5b0c847b8b;
op3val:0x7fc47ba2c9621783; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdb38beb9086df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x00d954e12d2fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdccc2f63529c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9db38beb9086df; op2val:0xc0300d954e12d2fc;
op3val:0x7fddccc2f63529c1; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdb38beb9086df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x00d954e12d2fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdccc2f63529c1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9db38beb9086df; op2val:0xc0300d954e12d2fc;
op3val:0x7fddccc2f63529c1; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdb38beb9086df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x00d954e12d2fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdccc2f63529c1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9db38beb9086df; op2val:0xc0300d954e12d2fc;
op3val:0x7fddccc2f63529c1; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdb38beb9086df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x00d954e12d2fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdccc2f63529c1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9db38beb9086df; op2val:0xc0300d954e12d2fc;
op3val:0x7fddccc2f63529c1; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdb38beb9086df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x00d954e12d2fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdccc2f63529c1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9db38beb9086df; op2val:0xc0300d954e12d2fc;
op3val:0x7fddccc2f63529c1; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe2b04c5638f5f and fs2 == 1 and fe2 == 0x403 and fm2 == 0x89beaa54667bb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x733412989d9ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9e2b04c5638f5f; op2val:0xc0389beaa54667bb;
op3val:0x7fe733412989d9ad; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe2b04c5638f5f and fs2 == 1 and fe2 == 0x403 and fm2 == 0x89beaa54667bb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x733412989d9ad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9e2b04c5638f5f; op2val:0xc0389beaa54667bb;
op3val:0x7fe733412989d9ad; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe2b04c5638f5f and fs2 == 1 and fe2 == 0x403 and fm2 == 0x89beaa54667bb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x733412989d9ad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9e2b04c5638f5f; op2val:0xc0389beaa54667bb;
op3val:0x7fe733412989d9ad; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe2b04c5638f5f and fs2 == 1 and fe2 == 0x403 and fm2 == 0x89beaa54667bb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x733412989d9ad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9e2b04c5638f5f; op2val:0xc0389beaa54667bb;
op3val:0x7fe733412989d9ad; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xe2b04c5638f5f and fs2 == 1 and fe2 == 0x403 and fm2 == 0x89beaa54667bb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x733412989d9ad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9e2b04c5638f5f; op2val:0xc0389beaa54667bb;
op3val:0x7fe733412989d9ad; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0c0d5f34e784f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xe2af74c5b771a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf968e4aac6955 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0c0d5f34e784f; op2val:0xc02e2af74c5b771a;
op3val:0x7fdf968e4aac6955; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0c0d5f34e784f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xe2af74c5b771a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf968e4aac6955 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0c0d5f34e784f; op2val:0xc02e2af74c5b771a;
op3val:0x7fdf968e4aac6955; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0c0d5f34e784f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xe2af74c5b771a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf968e4aac6955 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0c0d5f34e784f; op2val:0xc02e2af74c5b771a;
op3val:0x7fdf968e4aac6955; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0c0d5f34e784f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xe2af74c5b771a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf968e4aac6955 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0c0d5f34e784f; op2val:0xc02e2af74c5b771a;
op3val:0x7fdf968e4aac6955; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x0c0d5f34e784f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xe2af74c5b771a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf968e4aac6955 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa0c0d5f34e784f; op2val:0xc02e2af74c5b771a;
op3val:0x7fdf968e4aac6955; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a6cf802e779f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb77e316e5303 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x027b2946d02e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2a6cf802e779f; op2val:0xc01bb77e316e5303;
op3val:0x7fd027b2946d02e9; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a6cf802e779f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb77e316e5303 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x027b2946d02e9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2a6cf802e779f; op2val:0xc01bb77e316e5303;
op3val:0x7fd027b2946d02e9; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a6cf802e779f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb77e316e5303 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x027b2946d02e9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2a6cf802e779f; op2val:0xc01bb77e316e5303;
op3val:0x7fd027b2946d02e9; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a6cf802e779f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb77e316e5303 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x027b2946d02e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2a6cf802e779f; op2val:0xc01bb77e316e5303;
op3val:0x7fd027b2946d02e9; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a6cf802e779f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb77e316e5303 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x027b2946d02e9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2a6cf802e779f; op2val:0xc01bb77e316e5303;
op3val:0x7fd027b2946d02e9; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2c15fdbb5e3cf and fs2 == 1 and fe2 == 0x403 and fm2 == 0x9d1bad7655f2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe43febfe9d259 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2c15fdbb5e3cf; op2val:0xc039d1bad7655f2a;
op3val:0x7fee43febfe9d259; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2c15fdbb5e3cf and fs2 == 1 and fe2 == 0x403 and fm2 == 0x9d1bad7655f2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe43febfe9d259 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2c15fdbb5e3cf; op2val:0xc039d1bad7655f2a;
op3val:0x7fee43febfe9d259; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2c15fdbb5e3cf and fs2 == 1 and fe2 == 0x403 and fm2 == 0x9d1bad7655f2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe43febfe9d259 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2c15fdbb5e3cf; op2val:0xc039d1bad7655f2a;
op3val:0x7fee43febfe9d259; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2c15fdbb5e3cf and fs2 == 1 and fe2 == 0x403 and fm2 == 0x9d1bad7655f2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe43febfe9d259 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2c15fdbb5e3cf; op2val:0xc039d1bad7655f2a;
op3val:0x7fee43febfe9d259; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2c15fdbb5e3cf and fs2 == 1 and fe2 == 0x403 and fm2 == 0x9d1bad7655f2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe43febfe9d259 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa2c15fdbb5e3cf; op2val:0xc039d1bad7655f2a;
op3val:0x7fee43febfe9d259; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xb7937b6499ddf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x67b984f0ba3f1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34d72ff1d2953 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fab7937b6499ddf; op2val:0xc0067b984f0ba3f1;
op3val:0x7fc34d72ff1d2953; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xb7937b6499ddf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x67b984f0ba3f1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34d72ff1d2953 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fab7937b6499ddf; op2val:0xc0067b984f0ba3f1;
op3val:0x7fc34d72ff1d2953; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xb7937b6499ddf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x67b984f0ba3f1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34d72ff1d2953 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fab7937b6499ddf; op2val:0xc0067b984f0ba3f1;
op3val:0x7fc34d72ff1d2953; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xb7937b6499ddf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x67b984f0ba3f1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34d72ff1d2953 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fab7937b6499ddf; op2val:0xc0067b984f0ba3f1;
op3val:0x7fc34d72ff1d2953; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xb7937b6499ddf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x67b984f0ba3f1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34d72ff1d2953 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fab7937b6499ddf; op2val:0xc0067b984f0ba3f1;
op3val:0x7fc34d72ff1d2953; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbb8a1f913699f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3bac12cd8e8cf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x11768b1c5f473 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fabb8a1f913699f; op2val:0xc003bac12cd8e8cf;
op3val:0x7fc11768b1c5f473; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbb8a1f913699f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3bac12cd8e8cf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x11768b1c5f473 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fabb8a1f913699f; op2val:0xc003bac12cd8e8cf;
op3val:0x7fc11768b1c5f473; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbb8a1f913699f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3bac12cd8e8cf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x11768b1c5f473 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fabb8a1f913699f; op2val:0xc003bac12cd8e8cf;
op3val:0x7fc11768b1c5f473; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbb8a1f913699f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3bac12cd8e8cf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x11768b1c5f473 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fabb8a1f913699f; op2val:0xc003bac12cd8e8cf;
op3val:0x7fc11768b1c5f473; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbb8a1f913699f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3bac12cd8e8cf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x11768b1c5f473 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fabb8a1f913699f; op2val:0xc003bac12cd8e8cf;
op3val:0x7fc11768b1c5f473; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xc85a87ea8c3df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x071c1175cfa80 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5070aa8da4e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fac85a87ea8c3df; op2val:0xc03071c1175cfa80;
op3val:0x7fed5070aa8da4e6; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xc85a87ea8c3df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x071c1175cfa80 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5070aa8da4e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fac85a87ea8c3df; op2val:0xc03071c1175cfa80;
op3val:0x7fed5070aa8da4e6; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xc85a87ea8c3df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x071c1175cfa80 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5070aa8da4e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fac85a87ea8c3df; op2val:0xc03071c1175cfa80;
op3val:0x7fed5070aa8da4e6; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xc85a87ea8c3df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x071c1175cfa80 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5070aa8da4e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fac85a87ea8c3df; op2val:0xc03071c1175cfa80;
op3val:0x7fed5070aa8da4e6; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xc85a87ea8c3df and fs2 == 1 and fe2 == 0x403 and fm2 == 0x071c1175cfa80 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5070aa8da4e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fac85a87ea8c3df; op2val:0xc03071c1175cfa80;
op3val:0x7fed5070aa8da4e6; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xc8b6c88d8cc8f and fs2 == 1 and fe2 == 0x402 and fm2 == 0x903ba9163be01 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65040492dcc30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fac8b6c88d8cc8f; op2val:0xc02903ba9163be01;
op3val:0x7fe65040492dcc30; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xc8b6c88d8cc8f and fs2 == 1 and fe2 == 0x402 and fm2 == 0x903ba9163be01 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65040492dcc30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fac8b6c88d8cc8f; op2val:0xc02903ba9163be01;
op3val:0x7fe65040492dcc30; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xc8b6c88d8cc8f and fs2 == 1 and fe2 == 0x402 and fm2 == 0x903ba9163be01 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65040492dcc30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fac8b6c88d8cc8f; op2val:0xc02903ba9163be01;
op3val:0x7fe65040492dcc30; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xc8b6c88d8cc8f and fs2 == 1 and fe2 == 0x402 and fm2 == 0x903ba9163be01 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65040492dcc30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fac8b6c88d8cc8f; op2val:0xc02903ba9163be01;
op3val:0x7fe65040492dcc30; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xc8b6c88d8cc8f and fs2 == 1 and fe2 == 0x402 and fm2 == 0x903ba9163be01 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65040492dcc30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fac8b6c88d8cc8f; op2val:0xc02903ba9163be01;
op3val:0x7fe65040492dcc30; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0e8eee9b78077 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x95229efde7a10 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac2cb68034dca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0e8eee9b78077; op2val:0xc0295229efde7a10;
op3val:0x7feac2cb68034dca; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0e8eee9b78077 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x95229efde7a10 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac2cb68034dca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0e8eee9b78077; op2val:0xc0295229efde7a10;
op3val:0x7feac2cb68034dca; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0e8eee9b78077 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x95229efde7a10 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac2cb68034dca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0e8eee9b78077; op2val:0xc0295229efde7a10;
op3val:0x7feac2cb68034dca; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0e8eee9b78077 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x95229efde7a10 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac2cb68034dca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0e8eee9b78077; op2val:0xc0295229efde7a10;
op3val:0x7feac2cb68034dca; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0e8eee9b78077 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x95229efde7a10 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac2cb68034dca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0e8eee9b78077; op2val:0xc0295229efde7a10;
op3val:0x7feac2cb68034dca; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x26ed9a8f4b2cf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x994d509fd4dc7 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd78aae48cf4ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb26ed9a8f4b2cf; op2val:0xbfe994d509fd4dc7;
op3val:0x7fad78aae48cf4ef; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x26ed9a8f4b2cf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x994d509fd4dc7 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd78aae48cf4ef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb26ed9a8f4b2cf; op2val:0xbfe994d509fd4dc7;
op3val:0x7fad78aae48cf4ef; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x26ed9a8f4b2cf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x994d509fd4dc7 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd78aae48cf4ef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb26ed9a8f4b2cf; op2val:0xbfe994d509fd4dc7;
op3val:0x7fad78aae48cf4ef; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x26ed9a8f4b2cf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x994d509fd4dc7 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd78aae48cf4ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb26ed9a8f4b2cf; op2val:0xbfe994d509fd4dc7;
op3val:0x7fad78aae48cf4ef; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x26ed9a8f4b2cf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x994d509fd4dc7 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd78aae48cf4ef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb26ed9a8f4b2cf; op2val:0xbfe994d509fd4dc7;
op3val:0x7fad78aae48cf4ef; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x404ab140ecaf7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe75dcf1983ff7 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x30e1bab89c4e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb404ab140ecaf7; op2val:0xbffe75dcf1983ff7;
op3val:0x7fc30e1bab89c4e3; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x404ab140ecaf7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe75dcf1983ff7 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x30e1bab89c4e3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb404ab140ecaf7; op2val:0xbffe75dcf1983ff7;
op3val:0x7fc30e1bab89c4e3; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x404ab140ecaf7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe75dcf1983ff7 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x30e1bab89c4e3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb404ab140ecaf7; op2val:0xbffe75dcf1983ff7;
op3val:0x7fc30e1bab89c4e3; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x404ab140ecaf7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe75dcf1983ff7 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x30e1bab89c4e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb404ab140ecaf7; op2val:0xbffe75dcf1983ff7;
op3val:0x7fc30e1bab89c4e3; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x404ab140ecaf7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe75dcf1983ff7 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x30e1bab89c4e3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb404ab140ecaf7; op2val:0xbffe75dcf1983ff7;
op3val:0x7fc30e1bab89c4e3; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5d2823257dd0f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xf57e62f78053d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55fdf6c24cf14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5d2823257dd0f; op2val:0xc01f57e62f78053d;
op3val:0x7fe55fdf6c24cf14; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5d2823257dd0f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xf57e62f78053d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55fdf6c24cf14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5d2823257dd0f; op2val:0xc01f57e62f78053d;
op3val:0x7fe55fdf6c24cf14; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5d2823257dd0f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xf57e62f78053d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55fdf6c24cf14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5d2823257dd0f; op2val:0xc01f57e62f78053d;
op3val:0x7fe55fdf6c24cf14; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5d2823257dd0f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xf57e62f78053d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55fdf6c24cf14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5d2823257dd0f; op2val:0xc01f57e62f78053d;
op3val:0x7fe55fdf6c24cf14; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5d2823257dd0f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xf57e62f78053d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x55fdf6c24cf14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5d2823257dd0f; op2val:0xc01f57e62f78053d;
op3val:0x7fe55fdf6c24cf14; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6d1b5afbd5567 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x870885b5bcec4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x16d877c1f1617 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6d1b5afbd5567; op2val:0xc00870885b5bcec4;
op3val:0x7fd16d877c1f1617; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6d1b5afbd5567 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x870885b5bcec4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x16d877c1f1617 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6d1b5afbd5567; op2val:0xc00870885b5bcec4;
op3val:0x7fd16d877c1f1617; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6d1b5afbd5567 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x870885b5bcec4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x16d877c1f1617 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6d1b5afbd5567; op2val:0xc00870885b5bcec4;
op3val:0x7fd16d877c1f1617; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6d1b5afbd5567 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x870885b5bcec4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x16d877c1f1617 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6d1b5afbd5567; op2val:0xc00870885b5bcec4;
op3val:0x7fd16d877c1f1617; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6d1b5afbd5567 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x870885b5bcec4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x16d877c1f1617 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6d1b5afbd5567; op2val:0xc00870885b5bcec4;
op3val:0x7fd16d877c1f1617; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x757759ba0d957 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5e60311171edb and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xff2581034fa57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb757759ba0d957; op2val:0xbff5e60311171edb;
op3val:0x7fbff2581034fa57; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x757759ba0d957 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5e60311171edb and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xff2581034fa57 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb757759ba0d957; op2val:0xbff5e60311171edb;
op3val:0x7fbff2581034fa57; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x757759ba0d957 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5e60311171edb and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xff2581034fa57 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb757759ba0d957; op2val:0xbff5e60311171edb;
op3val:0x7fbff2581034fa57; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x757759ba0d957 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5e60311171edb and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xff2581034fa57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb757759ba0d957; op2val:0xbff5e60311171edb;
op3val:0x7fbff2581034fa57; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x757759ba0d957 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5e60311171edb and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xff2581034fa57 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb757759ba0d957; op2val:0xbff5e60311171edb;
op3val:0x7fbff2581034fa57; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7579046abe557 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xde56835772cb5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5ceb1641a60d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7579046abe557; op2val:0xc00de56835772cb5;
op3val:0x7fd5ceb1641a60d9; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7579046abe557 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xde56835772cb5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5ceb1641a60d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7579046abe557; op2val:0xc00de56835772cb5;
op3val:0x7fd5ceb1641a60d9; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7579046abe557 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xde56835772cb5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5ceb1641a60d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7579046abe557; op2val:0xc00de56835772cb5;
op3val:0x7fd5ceb1641a60d9; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7579046abe557 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xde56835772cb5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5ceb1641a60d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7579046abe557; op2val:0xc00de56835772cb5;
op3val:0x7fd5ceb1641a60d9; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7579046abe557 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xde56835772cb5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5ceb1641a60d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7579046abe557; op2val:0xc00de56835772cb5;
op3val:0x7fd5ceb1641a60d9; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8d4e9012ff0f7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5e1facaee3c96 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x0fb148bed05df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb8d4e9012ff0f7; op2val:0xbfd5e1facaee3c96;
op3val:0x7fa0fb148bed05df; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8d4e9012ff0f7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5e1facaee3c96 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x0fb148bed05df and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb8d4e9012ff0f7; op2val:0xbfd5e1facaee3c96;
op3val:0x7fa0fb148bed05df; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8d4e9012ff0f7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5e1facaee3c96 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x0fb148bed05df and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb8d4e9012ff0f7; op2val:0xbfd5e1facaee3c96;
op3val:0x7fa0fb148bed05df; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8d4e9012ff0f7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5e1facaee3c96 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x0fb148bed05df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb8d4e9012ff0f7; op2val:0xbfd5e1facaee3c96;
op3val:0x7fa0fb148bed05df; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8d4e9012ff0f7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5e1facaee3c96 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x0fb148bed05df and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb8d4e9012ff0f7; op2val:0xbfd5e1facaee3c96;
op3val:0x7fa0fb148bed05df; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb4c24c566faff and fs2 == 1 and fe2 == 0x401 and fm2 == 0x04d23f761e4e2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbcfc092fbe62d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb4c24c566faff; op2val:0xc0104d23f761e4e2;
op3val:0x7fdbcfc092fbe62d; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb4c24c566faff and fs2 == 1 and fe2 == 0x401 and fm2 == 0x04d23f761e4e2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbcfc092fbe62d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb4c24c566faff; op2val:0xc0104d23f761e4e2;
op3val:0x7fdbcfc092fbe62d; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb4c24c566faff and fs2 == 1 and fe2 == 0x401 and fm2 == 0x04d23f761e4e2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbcfc092fbe62d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb4c24c566faff; op2val:0xc0104d23f761e4e2;
op3val:0x7fdbcfc092fbe62d; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb4c24c566faff and fs2 == 1 and fe2 == 0x401 and fm2 == 0x04d23f761e4e2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbcfc092fbe62d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb4c24c566faff; op2val:0xc0104d23f761e4e2;
op3val:0x7fdbcfc092fbe62d; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb4c24c566faff and fs2 == 1 and fe2 == 0x401 and fm2 == 0x04d23f761e4e2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbcfc092fbe62d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb4c24c566faff; op2val:0xc0104d23f761e4e2;
op3val:0x7fdbcfc092fbe62d; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba0894a6eeff7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4f8cba9f74d1d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21b21cbaa78b6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba0894a6eeff7; op2val:0xc014f8cba9f74d1d;
op3val:0x7fe21b21cbaa78b6; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba0894a6eeff7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4f8cba9f74d1d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21b21cbaa78b6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba0894a6eeff7; op2val:0xc014f8cba9f74d1d;
op3val:0x7fe21b21cbaa78b6; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba0894a6eeff7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4f8cba9f74d1d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21b21cbaa78b6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba0894a6eeff7; op2val:0xc014f8cba9f74d1d;
op3val:0x7fe21b21cbaa78b6; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba0894a6eeff7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4f8cba9f74d1d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21b21cbaa78b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba0894a6eeff7; op2val:0xc014f8cba9f74d1d;
op3val:0x7fe21b21cbaa78b6; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba0894a6eeff7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4f8cba9f74d1d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21b21cbaa78b6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba0894a6eeff7; op2val:0xc014f8cba9f74d1d;
op3val:0x7fe21b21cbaa78b6; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba95a52df5767 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb4734aa2ffab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f2e07b1fbb17 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba95a52df5767; op2val:0xc01bb4734aa2ffab;
op3val:0x7fe7f2e07b1fbb17; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba95a52df5767 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb4734aa2ffab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f2e07b1fbb17 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba95a52df5767; op2val:0xc01bb4734aa2ffab;
op3val:0x7fe7f2e07b1fbb17; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba95a52df5767 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb4734aa2ffab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f2e07b1fbb17 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba95a52df5767; op2val:0xc01bb4734aa2ffab;
op3val:0x7fe7f2e07b1fbb17; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba95a52df5767 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb4734aa2ffab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f2e07b1fbb17 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba95a52df5767; op2val:0xc01bb4734aa2ffab;
op3val:0x7fe7f2e07b1fbb17; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xba95a52df5767 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xbb4734aa2ffab and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f2e07b1fbb17 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbba95a52df5767; op2val:0xc01bb4734aa2ffab;
op3val:0x7fe7f2e07b1fbb17; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbb3f5b5207447 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xc087849016946 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x844cc1df6d65d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbbb3f5b5207447; op2val:0xc00c087849016946;
op3val:0x7fd844cc1df6d65d; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbb3f5b5207447 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xc087849016946 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x844cc1df6d65d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbbb3f5b5207447; op2val:0xc00c087849016946;
op3val:0x7fd844cc1df6d65d; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbb3f5b5207447 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xc087849016946 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x844cc1df6d65d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbbb3f5b5207447; op2val:0xc00c087849016946;
op3val:0x7fd844cc1df6d65d; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbb3f5b5207447 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xc087849016946 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x844cc1df6d65d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbbb3f5b5207447; op2val:0xc00c087849016946;
op3val:0x7fd844cc1df6d65d; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbb3f5b5207447 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xc087849016946 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x844cc1df6d65d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbbb3f5b5207447; op2val:0xc00c087849016946;
op3val:0x7fd844cc1df6d65d; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd7584b60b1a57 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xce604fe904a90 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa9a9562306079 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd7584b60b1a57; op2val:0xc01ce604fe904a90;
op3val:0x7fea9a9562306079; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd7584b60b1a57 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xce604fe904a90 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa9a9562306079 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd7584b60b1a57; op2val:0xc01ce604fe904a90;
op3val:0x7fea9a9562306079; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd7584b60b1a57 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xce604fe904a90 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa9a9562306079 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd7584b60b1a57; op2val:0xc01ce604fe904a90;
op3val:0x7fea9a9562306079; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd7584b60b1a57 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xce604fe904a90 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa9a9562306079 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd7584b60b1a57; op2val:0xc01ce604fe904a90;
op3val:0x7fea9a9562306079; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd7584b60b1a57 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xce604fe904a90 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa9a9562306079 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbd7584b60b1a57; op2val:0xc01ce604fe904a90;
op3val:0x7fea9a9562306079; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf33ebf51f33b7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x466f88fb6ecbe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3e4db57d7e40f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf33ebf51f33b7; op2val:0xc01466f88fb6ecbe;
op3val:0x7fe3e4db57d7e40f; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf33ebf51f33b7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x466f88fb6ecbe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3e4db57d7e40f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf33ebf51f33b7; op2val:0xc01466f88fb6ecbe;
op3val:0x7fe3e4db57d7e40f; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf33ebf51f33b7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x466f88fb6ecbe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3e4db57d7e40f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf33ebf51f33b7; op2val:0xc01466f88fb6ecbe;
op3val:0x7fe3e4db57d7e40f; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf33ebf51f33b7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x466f88fb6ecbe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3e4db57d7e40f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf33ebf51f33b7; op2val:0xc01466f88fb6ecbe;
op3val:0x7fe3e4db57d7e40f; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf33ebf51f33b7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x466f88fb6ecbe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3e4db57d7e40f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf33ebf51f33b7; op2val:0xc01466f88fb6ecbe;
op3val:0x7fe3e4db57d7e40f; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2a65c343892db and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9ce16305fb76 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0acff0a9e8d47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2a65c343892db; op2val:0xbfdc9ce16305fb76;
op3val:0x7fb0acff0a9e8d47; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2a65c343892db and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9ce16305fb76 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0acff0a9e8d47 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2a65c343892db; op2val:0xbfdc9ce16305fb76;
op3val:0x7fb0acff0a9e8d47; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2a65c343892db and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9ce16305fb76 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0acff0a9e8d47 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2a65c343892db; op2val:0xbfdc9ce16305fb76;
op3val:0x7fb0acff0a9e8d47; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2a65c343892db and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9ce16305fb76 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0acff0a9e8d47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2a65c343892db; op2val:0xbfdc9ce16305fb76;
op3val:0x7fb0acff0a9e8d47; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2a65c343892db and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc9ce16305fb76 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0acff0a9e8d47 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2a65c343892db; op2val:0xbfdc9ce16305fb76;
op3val:0x7fb0acff0a9e8d47; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31a78b0f0b973 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x6a3e0418950a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb080f61aebdc6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31a78b0f0b973; op2val:0xc016a3e0418950a1;
op3val:0x7feb080f61aebdc6; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31a78b0f0b973 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x6a3e0418950a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb080f61aebdc6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31a78b0f0b973; op2val:0xc016a3e0418950a1;
op3val:0x7feb080f61aebdc6; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31a78b0f0b973 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x6a3e0418950a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb080f61aebdc6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31a78b0f0b973; op2val:0xc016a3e0418950a1;
op3val:0x7feb080f61aebdc6; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31a78b0f0b973 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x6a3e0418950a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb080f61aebdc6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31a78b0f0b973; op2val:0xc016a3e0418950a1;
op3val:0x7feb080f61aebdc6; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31a78b0f0b973 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x6a3e0418950a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb080f61aebdc6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31a78b0f0b973; op2val:0xc016a3e0418950a1;
op3val:0x7feb080f61aebdc6; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x32a5a52edeb6b and fs2 == 1 and fe2 == 0x401 and fm2 == 0x04ff5f3321d9e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x38a220cbdbba0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc32a5a52edeb6b; op2val:0xc0104ff5f3321d9e;
op3val:0x7fe38a220cbdbba0; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x32a5a52edeb6b and fs2 == 1 and fe2 == 0x401 and fm2 == 0x04ff5f3321d9e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x38a220cbdbba0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc32a5a52edeb6b; op2val:0xc0104ff5f3321d9e;
op3val:0x7fe38a220cbdbba0; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x32a5a52edeb6b and fs2 == 1 and fe2 == 0x401 and fm2 == 0x04ff5f3321d9e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x38a220cbdbba0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc32a5a52edeb6b; op2val:0xc0104ff5f3321d9e;
op3val:0x7fe38a220cbdbba0; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x32a5a52edeb6b and fs2 == 1 and fe2 == 0x401 and fm2 == 0x04ff5f3321d9e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x38a220cbdbba0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc32a5a52edeb6b; op2val:0xc0104ff5f3321d9e;
op3val:0x7fe38a220cbdbba0; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x32a5a52edeb6b and fs2 == 1 and fe2 == 0x401 and fm2 == 0x04ff5f3321d9e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x38a220cbdbba0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc32a5a52edeb6b; op2val:0xc0104ff5f3321d9e;
op3val:0x7fe38a220cbdbba0; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3578be9192ed7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0b659dcfe6383 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x433fc62b637c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3578be9192ed7; op2val:0xc010b659dcfe6383;
op3val:0x7fe433fc62b637c6; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3578be9192ed7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0b659dcfe6383 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x433fc62b637c6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3578be9192ed7; op2val:0xc010b659dcfe6383;
op3val:0x7fe433fc62b637c6; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3578be9192ed7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0b659dcfe6383 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x433fc62b637c6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3578be9192ed7; op2val:0xc010b659dcfe6383;
op3val:0x7fe433fc62b637c6; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3578be9192ed7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0b659dcfe6383 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x433fc62b637c6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3578be9192ed7; op2val:0xc010b659dcfe6383;
op3val:0x7fe433fc62b637c6; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3578be9192ed7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0b659dcfe6383 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x433fc62b637c6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3578be9192ed7; op2val:0xc010b659dcfe6383;
op3val:0x7fe433fc62b637c6; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3a6cc16cf18c7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe870a12fb73fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bf4d322a6663 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3a6cc16cf18c7; op2val:0xc00e870a12fb73fb;
op3val:0x7fe2bf4d322a6663; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3a6cc16cf18c7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe870a12fb73fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bf4d322a6663 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3a6cc16cf18c7; op2val:0xc00e870a12fb73fb;
op3val:0x7fe2bf4d322a6663; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3a6cc16cf18c7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe870a12fb73fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bf4d322a6663 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3a6cc16cf18c7; op2val:0xc00e870a12fb73fb;
op3val:0x7fe2bf4d322a6663; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3a6cc16cf18c7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe870a12fb73fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bf4d322a6663 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3a6cc16cf18c7; op2val:0xc00e870a12fb73fb;
op3val:0x7fe2bf4d322a6663; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3a6cc16cf18c7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe870a12fb73fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bf4d322a6663 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3a6cc16cf18c7; op2val:0xc00e870a12fb73fb;
op3val:0x7fe2bf4d322a6663; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4acff5b85a5cb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33caa795905c4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x8dbd4452e6b5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4acff5b85a5cb; op2val:0xbfd33caa795905c4;
op3val:0x7fa8dbd4452e6b5f; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4acff5b85a5cb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33caa795905c4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x8dbd4452e6b5f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4acff5b85a5cb; op2val:0xbfd33caa795905c4;
op3val:0x7fa8dbd4452e6b5f; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4acff5b85a5cb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33caa795905c4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x8dbd4452e6b5f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4acff5b85a5cb; op2val:0xbfd33caa795905c4;
op3val:0x7fa8dbd4452e6b5f; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4acff5b85a5cb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33caa795905c4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x8dbd4452e6b5f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4acff5b85a5cb; op2val:0xbfd33caa795905c4;
op3val:0x7fa8dbd4452e6b5f; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4acff5b85a5cb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33caa795905c4 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x8dbd4452e6b5f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4acff5b85a5cb; op2val:0xbfd33caa795905c4;
op3val:0x7fa8dbd4452e6b5f; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x54524f32daef7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4237a343890fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac597e572b7b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc54524f32daef7; op2val:0xc014237a343890fb;
op3val:0x7feac597e572b7b4; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x54524f32daef7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4237a343890fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac597e572b7b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc54524f32daef7; op2val:0xc014237a343890fb;
op3val:0x7feac597e572b7b4; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x54524f32daef7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4237a343890fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac597e572b7b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc54524f32daef7; op2val:0xc014237a343890fb;
op3val:0x7feac597e572b7b4; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x54524f32daef7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4237a343890fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac597e572b7b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc54524f32daef7; op2val:0xc014237a343890fb;
op3val:0x7feac597e572b7b4; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x54524f32daef7 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4237a343890fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xac597e572b7b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc54524f32daef7; op2val:0xc014237a343890fb;
op3val:0x7feac597e572b7b4; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7285ea9faba7f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x51e4ba7320788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe90d56fd14cc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7285ea9faba7f; op2val:0xc0151e4ba7320788;
op3val:0x7fee90d56fd14cc8; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7285ea9faba7f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x51e4ba7320788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe90d56fd14cc8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7285ea9faba7f; op2val:0xc0151e4ba7320788;
op3val:0x7fee90d56fd14cc8; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7285ea9faba7f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x51e4ba7320788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe90d56fd14cc8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7285ea9faba7f; op2val:0xc0151e4ba7320788;
op3val:0x7fee90d56fd14cc8; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7285ea9faba7f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x51e4ba7320788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe90d56fd14cc8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7285ea9faba7f; op2val:0xc0151e4ba7320788;
op3val:0x7fee90d56fd14cc8; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7285ea9faba7f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x51e4ba7320788 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe90d56fd14cc8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7285ea9faba7f; op2val:0xc0151e4ba7320788;
op3val:0x7fee90d56fd14cc8; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8c00618c5ebf7 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79abfd08d65b8 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x241b4da97625f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8c00618c5ebf7; op2val:0xbfc79abfd08d65b8;
op3val:0x7fa241b4da97625f; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8c00618c5ebf7 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79abfd08d65b8 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x241b4da97625f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8c00618c5ebf7; op2val:0xbfc79abfd08d65b8;
op3val:0x7fa241b4da97625f; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8c00618c5ebf7 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79abfd08d65b8 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x241b4da97625f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8c00618c5ebf7; op2val:0xbfc79abfd08d65b8;
op3val:0x7fa241b4da97625f; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8c00618c5ebf7 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79abfd08d65b8 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x241b4da97625f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8c00618c5ebf7; op2val:0xbfc79abfd08d65b8;
op3val:0x7fa241b4da97625f; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8c00618c5ebf7 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79abfd08d65b8 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x241b4da97625f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8c00618c5ebf7; op2val:0xbfc79abfd08d65b8;
op3val:0x7fa241b4da97625f; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9279f41e78217 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xec3b664f905e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x82efe20fbfe2b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9279f41e78217; op2val:0xc00ec3b664f905e6;
op3val:0x7fe82efe20fbfe2b; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9279f41e78217 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xec3b664f905e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x82efe20fbfe2b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9279f41e78217; op2val:0xc00ec3b664f905e6;
op3val:0x7fe82efe20fbfe2b; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9279f41e78217 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xec3b664f905e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x82efe20fbfe2b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9279f41e78217; op2val:0xc00ec3b664f905e6;
op3val:0x7fe82efe20fbfe2b; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9279f41e78217 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xec3b664f905e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x82efe20fbfe2b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9279f41e78217; op2val:0xc00ec3b664f905e6;
op3val:0x7fe82efe20fbfe2b; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9279f41e78217 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xec3b664f905e6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x82efe20fbfe2b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9279f41e78217; op2val:0xc00ec3b664f905e6;
op3val:0x7fe82efe20fbfe2b; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9e87d53212bbf and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f31cea8dbcda and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x43332df5ca32f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9e87d53212bbf; op2val:0xbfc8f31cea8dbcda;
op3val:0x7fa43332df5ca32f; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9e87d53212bbf and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f31cea8dbcda and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x43332df5ca32f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9e87d53212bbf; op2val:0xbfc8f31cea8dbcda;
op3val:0x7fa43332df5ca32f; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9e87d53212bbf and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f31cea8dbcda and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x43332df5ca32f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9e87d53212bbf; op2val:0xbfc8f31cea8dbcda;
op3val:0x7fa43332df5ca32f; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9e87d53212bbf and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f31cea8dbcda and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x43332df5ca32f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9e87d53212bbf; op2val:0xbfc8f31cea8dbcda;
op3val:0x7fa43332df5ca32f; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9e87d53212bbf and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f31cea8dbcda and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x43332df5ca32f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9e87d53212bbf; op2val:0xbfc8f31cea8dbcda;
op3val:0x7fa43332df5ca32f; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa363712e81d63 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x26159c540d020 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe1c79b3dfcd57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca363712e81d63; op2val:0xc0126159c540d020;
op3val:0x7fee1c79b3dfcd57; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa363712e81d63 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x26159c540d020 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe1c79b3dfcd57 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca363712e81d63; op2val:0xc0126159c540d020;
op3val:0x7fee1c79b3dfcd57; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa363712e81d63 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x26159c540d020 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe1c79b3dfcd57 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca363712e81d63; op2val:0xc0126159c540d020;
op3val:0x7fee1c79b3dfcd57; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa363712e81d63 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x26159c540d020 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe1c79b3dfcd57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca363712e81d63; op2val:0xc0126159c540d020;
op3val:0x7fee1c79b3dfcd57; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa363712e81d63 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x26159c540d020 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe1c79b3dfcd57 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca363712e81d63; op2val:0xc0126159c540d020;
op3val:0x7fee1c79b3dfcd57; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xacf777c60a3c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x075d1281c18a5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb94e30f5cae37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcacf777c60a3c7; op2val:0xbff075d1281c18a5;
op3val:0x7fcb94e30f5cae37; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xacf777c60a3c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x075d1281c18a5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb94e30f5cae37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcacf777c60a3c7; op2val:0xbff075d1281c18a5;
op3val:0x7fcb94e30f5cae37; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xacf777c60a3c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x075d1281c18a5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb94e30f5cae37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcacf777c60a3c7; op2val:0xbff075d1281c18a5;
op3val:0x7fcb94e30f5cae37; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xacf777c60a3c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x075d1281c18a5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb94e30f5cae37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcacf777c60a3c7; op2val:0xbff075d1281c18a5;
op3val:0x7fcb94e30f5cae37; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xacf777c60a3c7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x075d1281c18a5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb94e30f5cae37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcacf777c60a3c7; op2val:0xbff075d1281c18a5;
op3val:0x7fcb94e30f5cae37; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc09714c24da2f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x90dadbfedb4cf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f35c94b8ddad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc09714c24da2f; op2val:0xc0090dadbfedb4cf;
op3val:0x7fe5f35c94b8ddad; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc09714c24da2f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x90dadbfedb4cf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f35c94b8ddad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc09714c24da2f; op2val:0xc0090dadbfedb4cf;
op3val:0x7fe5f35c94b8ddad; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc09714c24da2f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x90dadbfedb4cf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f35c94b8ddad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc09714c24da2f; op2val:0xc0090dadbfedb4cf;
op3val:0x7fe5f35c94b8ddad; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc09714c24da2f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x90dadbfedb4cf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f35c94b8ddad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc09714c24da2f; op2val:0xc0090dadbfedb4cf;
op3val:0x7fe5f35c94b8ddad; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc09714c24da2f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x90dadbfedb4cf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f35c94b8ddad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc09714c24da2f; op2val:0xc0090dadbfedb4cf;
op3val:0x7fe5f35c94b8ddad; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc8e25fbfe6477 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0a67be484276b and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdb745e2ae4d57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc8e25fbfe6477; op2val:0xbfe0a67be484276b;
op3val:0x7fbdb745e2ae4d57; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc8e25fbfe6477 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0a67be484276b and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdb745e2ae4d57 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc8e25fbfe6477; op2val:0xbfe0a67be484276b;
op3val:0x7fbdb745e2ae4d57; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc8e25fbfe6477 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0a67be484276b and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdb745e2ae4d57 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc8e25fbfe6477; op2val:0xbfe0a67be484276b;
op3val:0x7fbdb745e2ae4d57; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc8e25fbfe6477 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0a67be484276b and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdb745e2ae4d57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc8e25fbfe6477; op2val:0xbfe0a67be484276b;
op3val:0x7fbdb745e2ae4d57; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc8e25fbfe6477 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0a67be484276b and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdb745e2ae4d57 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc8e25fbfe6477; op2val:0xbfe0a67be484276b;
op3val:0x7fbdb745e2ae4d57; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xcf892d7e50217 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x49b2d61482423 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a7d8e3d62b4b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fccf892d7e50217; op2val:0xbff49b2d61482423;
op3val:0x7fd2a7d8e3d62b4b; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xcf892d7e50217 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x49b2d61482423 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a7d8e3d62b4b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fccf892d7e50217; op2val:0xbff49b2d61482423;
op3val:0x7fd2a7d8e3d62b4b; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xcf892d7e50217 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x49b2d61482423 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a7d8e3d62b4b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fccf892d7e50217; op2val:0xbff49b2d61482423;
op3val:0x7fd2a7d8e3d62b4b; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xcf892d7e50217 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x49b2d61482423 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a7d8e3d62b4b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fccf892d7e50217; op2val:0xbff49b2d61482423;
op3val:0x7fd2a7d8e3d62b4b; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xcf892d7e50217 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x49b2d61482423 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a7d8e3d62b4b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fccf892d7e50217; op2val:0xbff49b2d61482423;
op3val:0x7fd2a7d8e3d62b4b; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd71456446788f and fs2 == 1 and fe2 == 0x400 and fm2 == 0xc8156304f48af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa3a1ca4573daa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd71456446788f; op2val:0xc00c8156304f48af;
op3val:0x7fea3a1ca4573daa; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd71456446788f and fs2 == 1 and fe2 == 0x400 and fm2 == 0xc8156304f48af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa3a1ca4573daa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd71456446788f; op2val:0xc00c8156304f48af;
op3val:0x7fea3a1ca4573daa; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd71456446788f and fs2 == 1 and fe2 == 0x400 and fm2 == 0xc8156304f48af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa3a1ca4573daa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd71456446788f; op2val:0xc00c8156304f48af;
op3val:0x7fea3a1ca4573daa; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd71456446788f and fs2 == 1 and fe2 == 0x400 and fm2 == 0xc8156304f48af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa3a1ca4573daa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd71456446788f; op2val:0xc00c8156304f48af;
op3val:0x7fea3a1ca4573daa; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd71456446788f and fs2 == 1 and fe2 == 0x400 and fm2 == 0xc8156304f48af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa3a1ca4573daa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd71456446788f; op2val:0xc00c8156304f48af;
op3val:0x7fea3a1ca4573daa; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe017c1dd0e81f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9562eda3c52fd and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7c1f8e3a06fc9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce017c1dd0e81f; op2val:0xbff9562eda3c52fd;
op3val:0x7fd7c1f8e3a06fc9; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe017c1dd0e81f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9562eda3c52fd and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7c1f8e3a06fc9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce017c1dd0e81f; op2val:0xbff9562eda3c52fd;
op3val:0x7fd7c1f8e3a06fc9; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe017c1dd0e81f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9562eda3c52fd and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7c1f8e3a06fc9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce017c1dd0e81f; op2val:0xbff9562eda3c52fd;
op3val:0x7fd7c1f8e3a06fc9; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe017c1dd0e81f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9562eda3c52fd and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7c1f8e3a06fc9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce017c1dd0e81f; op2val:0xbff9562eda3c52fd;
op3val:0x7fd7c1f8e3a06fc9; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe017c1dd0e81f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9562eda3c52fd and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7c1f8e3a06fc9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce017c1dd0e81f; op2val:0xbff9562eda3c52fd;
op3val:0x7fd7c1f8e3a06fc9; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe1518f4a30787 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b04610dc37ca and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x554370f71bef3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce1518f4a30787; op2val:0xbff6b04610dc37ca;
op3val:0x7fd554370f71bef3; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe1518f4a30787 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b04610dc37ca and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x554370f71bef3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce1518f4a30787; op2val:0xbff6b04610dc37ca;
op3val:0x7fd554370f71bef3; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe1518f4a30787 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b04610dc37ca and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x554370f71bef3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce1518f4a30787; op2val:0xbff6b04610dc37ca;
op3val:0x7fd554370f71bef3; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe1518f4a30787 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b04610dc37ca and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x554370f71bef3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce1518f4a30787; op2val:0xbff6b04610dc37ca;
op3val:0x7fd554370f71bef3; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe1518f4a30787 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b04610dc37ca and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x554370f71bef3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce1518f4a30787; op2val:0xbff6b04610dc37ca;
op3val:0x7fd554370f71bef3; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe71c04b7cfd87 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe60f0ca8dfb07 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xce6de9d7efcb7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce71c04b7cfd87; op2val:0xc00e60f0ca8dfb07;
op3val:0x7fece6de9d7efcb7; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe71c04b7cfd87 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe60f0ca8dfb07 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xce6de9d7efcb7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce71c04b7cfd87; op2val:0xc00e60f0ca8dfb07;
op3val:0x7fece6de9d7efcb7; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe71c04b7cfd87 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe60f0ca8dfb07 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xce6de9d7efcb7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce71c04b7cfd87; op2val:0xc00e60f0ca8dfb07;
op3val:0x7fece6de9d7efcb7; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe71c04b7cfd87 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe60f0ca8dfb07 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xce6de9d7efcb7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce71c04b7cfd87; op2val:0xc00e60f0ca8dfb07;
op3val:0x7fece6de9d7efcb7; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe71c04b7cfd87 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe60f0ca8dfb07 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xce6de9d7efcb7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce71c04b7cfd87; op2val:0xc00e60f0ca8dfb07;
op3val:0x7fece6de9d7efcb7; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b57aa9b7409 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x56ee79e4569cf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x57e194d1840e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd00b57aa9b7409; op2val:0xc0056ee79e4569cf;
op3val:0x7fe57e194d1840e7; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b57aa9b7409 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x56ee79e4569cf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x57e194d1840e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd00b57aa9b7409; op2val:0xc0056ee79e4569cf;
op3val:0x7fe57e194d1840e7; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b57aa9b7409 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x56ee79e4569cf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x57e194d1840e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd00b57aa9b7409; op2val:0xc0056ee79e4569cf;
op3val:0x7fe57e194d1840e7; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b57aa9b7409 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x56ee79e4569cf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x57e194d1840e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd00b57aa9b7409; op2val:0xc0056ee79e4569cf;
op3val:0x7fe57e194d1840e7; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b57aa9b7409 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x56ee79e4569cf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x57e194d1840e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd00b57aa9b7409; op2val:0xc0056ee79e4569cf;
op3val:0x7fe57e194d1840e7; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x044a736a92e57 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x79f6133cbdfa9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x804bd71223eac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd044a736a92e57; op2val:0xc0079f6133cbdfa9;
op3val:0x7fe804bd71223eac; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x044a736a92e57 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x79f6133cbdfa9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x804bd71223eac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd044a736a92e57; op2val:0xc0079f6133cbdfa9;
op3val:0x7fe804bd71223eac; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x044a736a92e57 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x79f6133cbdfa9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x804bd71223eac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd044a736a92e57; op2val:0xc0079f6133cbdfa9;
op3val:0x7fe804bd71223eac; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x044a736a92e57 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x79f6133cbdfa9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x804bd71223eac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd044a736a92e57; op2val:0xc0079f6133cbdfa9;
op3val:0x7fe804bd71223eac; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x044a736a92e57 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x79f6133cbdfa9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x804bd71223eac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd044a736a92e57; op2val:0xc0079f6133cbdfa9;
op3val:0x7fe804bd71223eac; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d908c88167b9 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0c3e8bc692402 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a752f4f14996 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d908c88167b9; op2val:0xc000c3e8bc692402;
op3val:0x7fe1a752f4f14996; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d908c88167b9 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0c3e8bc692402 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a752f4f14996 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d908c88167b9; op2val:0xc000c3e8bc692402;
op3val:0x7fe1a752f4f14996; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d908c88167b9 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0c3e8bc692402 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a752f4f14996 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d908c88167b9; op2val:0xc000c3e8bc692402;
op3val:0x7fe1a752f4f14996; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d908c88167b9 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0c3e8bc692402 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a752f4f14996 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d908c88167b9; op2val:0xc000c3e8bc692402;
op3val:0x7fe1a752f4f14996; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d908c88167b9 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0c3e8bc692402 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a752f4f14996 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d908c88167b9; op2val:0xc000c3e8bc692402;
op3val:0x7fe1a752f4f14996; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x121cefec055f7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x280408462cdf8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3cf5c6b8b15bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd121cefec055f7; op2val:0xbfe280408462cdf8;
op3val:0x7fc3cf5c6b8b15bb; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x121cefec055f7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x280408462cdf8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3cf5c6b8b15bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd121cefec055f7; op2val:0xbfe280408462cdf8;
op3val:0x7fc3cf5c6b8b15bb; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x121cefec055f7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x280408462cdf8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3cf5c6b8b15bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd121cefec055f7; op2val:0xbfe280408462cdf8;
op3val:0x7fc3cf5c6b8b15bb; valaddr_reg:x3; val_offset:861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 861*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x121cefec055f7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x280408462cdf8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3cf5c6b8b15bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd121cefec055f7; op2val:0xbfe280408462cdf8;
op3val:0x7fc3cf5c6b8b15bb; valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x121cefec055f7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x280408462cdf8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3cf5c6b8b15bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd121cefec055f7; op2val:0xbfe280408462cdf8;
op3val:0x7fc3cf5c6b8b15bb; valaddr_reg:x3; val_offset:867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 867*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x185bc81f2a14d and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb53ed83446079 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xded97f9e5a921 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd185bc81f2a14d; op2val:0xc00b53ed83446079;
op3val:0x7feded97f9e5a921; valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x185bc81f2a14d and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb53ed83446079 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xded97f9e5a921 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd185bc81f2a14d; op2val:0xc00b53ed83446079;
op3val:0x7feded97f9e5a921; valaddr_reg:x3; val_offset:873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 873*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x185bc81f2a14d and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb53ed83446079 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xded97f9e5a921 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd185bc81f2a14d; op2val:0xc00b53ed83446079;
op3val:0x7feded97f9e5a921; valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x185bc81f2a14d and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb53ed83446079 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xded97f9e5a921 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd185bc81f2a14d; op2val:0xc00b53ed83446079;
op3val:0x7feded97f9e5a921; valaddr_reg:x3; val_offset:879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 879*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x185bc81f2a14d and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb53ed83446079 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xded97f9e5a921 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd185bc81f2a14d; op2val:0xc00b53ed83446079;
op3val:0x7feded97f9e5a921; valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d36766d8ca5b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78e08524df276 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa3e221eee63c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d36766d8ca5b; op2val:0xbff78e08524df276;
op3val:0x7fda3e221eee63c5; valaddr_reg:x3; val_offset:885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 885*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d36766d8ca5b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78e08524df276 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa3e221eee63c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d36766d8ca5b; op2val:0xbff78e08524df276;
op3val:0x7fda3e221eee63c5; valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d36766d8ca5b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78e08524df276 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa3e221eee63c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d36766d8ca5b; op2val:0xbff78e08524df276;
op3val:0x7fda3e221eee63c5; valaddr_reg:x3; val_offset:891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 891*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d36766d8ca5b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78e08524df276 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa3e221eee63c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d36766d8ca5b; op2val:0xbff78e08524df276;
op3val:0x7fda3e221eee63c5; valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d36766d8ca5b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78e08524df276 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa3e221eee63c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d36766d8ca5b; op2val:0xbff78e08524df276;
op3val:0x7fda3e221eee63c5; valaddr_reg:x3; val_offset:897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 897*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1e30a0174e413 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa3ad354c23d0e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd52b387784731 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1e30a0174e413; op2val:0xc00a3ad354c23d0e;
op3val:0x7fed52b387784731; valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1e30a0174e413 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa3ad354c23d0e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd52b387784731 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1e30a0174e413; op2val:0xc00a3ad354c23d0e;
op3val:0x7fed52b387784731; valaddr_reg:x3; val_offset:903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 903*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1e30a0174e413 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa3ad354c23d0e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd52b387784731 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1e30a0174e413; op2val:0xc00a3ad354c23d0e;
op3val:0x7fed52b387784731; valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1e30a0174e413 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa3ad354c23d0e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd52b387784731 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1e30a0174e413; op2val:0xc00a3ad354c23d0e;
op3val:0x7fed52b387784731; valaddr_reg:x3; val_offset:909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 909*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1e30a0174e413 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa3ad354c23d0e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd52b387784731 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1e30a0174e413; op2val:0xc00a3ad354c23d0e;
op3val:0x7fed52b387784731; valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1f97ae6ae8e5d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbab5376882ede and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf15777a1e6e19 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1f97ae6ae8e5d; op2val:0xbffbab5376882ede;
op3val:0x7fdf15777a1e6e19; valaddr_reg:x3; val_offset:915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 915*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1f97ae6ae8e5d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbab5376882ede and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf15777a1e6e19 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1f97ae6ae8e5d; op2val:0xbffbab5376882ede;
op3val:0x7fdf15777a1e6e19; valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1f97ae6ae8e5d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbab5376882ede and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf15777a1e6e19 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1f97ae6ae8e5d; op2val:0xbffbab5376882ede;
op3val:0x7fdf15777a1e6e19; valaddr_reg:x3; val_offset:921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 921*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1f97ae6ae8e5d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbab5376882ede and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf15777a1e6e19 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1f97ae6ae8e5d; op2val:0xbffbab5376882ede;
op3val:0x7fdf15777a1e6e19; valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1f97ae6ae8e5d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbab5376882ede and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf15777a1e6e19 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1f97ae6ae8e5d; op2val:0xbffbab5376882ede;
op3val:0x7fdf15777a1e6e19; valaddr_reg:x3; val_offset:927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 927*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x253bd6d2fe97d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5cfa06072e1a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8fbbbb5e3c9d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd253bd6d2fe97d; op2val:0xc005cfa06072e1a1;
op3val:0x7fe8fbbbb5e3c9d7; valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x253bd6d2fe97d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5cfa06072e1a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8fbbbb5e3c9d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd253bd6d2fe97d; op2val:0xc005cfa06072e1a1;
op3val:0x7fe8fbbbb5e3c9d7; valaddr_reg:x3; val_offset:933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 933*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x253bd6d2fe97d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5cfa06072e1a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8fbbbb5e3c9d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd253bd6d2fe97d; op2val:0xc005cfa06072e1a1;
op3val:0x7fe8fbbbb5e3c9d7; valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x253bd6d2fe97d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5cfa06072e1a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8fbbbb5e3c9d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd253bd6d2fe97d; op2val:0xc005cfa06072e1a1;
op3val:0x7fe8fbbbb5e3c9d7; valaddr_reg:x3; val_offset:939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 939*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x253bd6d2fe97d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5cfa06072e1a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8fbbbb5e3c9d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd253bd6d2fe97d; op2val:0xc005cfa06072e1a1;
op3val:0x7fe8fbbbb5e3c9d7; valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x25459c12575f7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaa504e2a5f1c3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe861d5030b0e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd25459c12575f7; op2val:0xbffaa504e2a5f1c3;
op3val:0x7fde861d5030b0e7; valaddr_reg:x3; val_offset:945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 945*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x25459c12575f7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaa504e2a5f1c3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe861d5030b0e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd25459c12575f7; op2val:0xbffaa504e2a5f1c3;
op3val:0x7fde861d5030b0e7; valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x25459c12575f7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaa504e2a5f1c3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe861d5030b0e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd25459c12575f7; op2val:0xbffaa504e2a5f1c3;
op3val:0x7fde861d5030b0e7; valaddr_reg:x3; val_offset:951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 951*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x25459c12575f7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaa504e2a5f1c3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe861d5030b0e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd25459c12575f7; op2val:0xbffaa504e2a5f1c3;
op3val:0x7fde861d5030b0e7; valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x25459c12575f7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaa504e2a5f1c3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe861d5030b0e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd25459c12575f7; op2val:0xbffaa504e2a5f1c3;
op3val:0x7fde861d5030b0e7; valaddr_reg:x3; val_offset:957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 957*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x283f9d2825ba3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa9654e761f0b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec46d7ccba9a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd283f9d2825ba3; op2val:0xc00a9654e761f0b1;
op3val:0x7feec46d7ccba9a3; valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x283f9d2825ba3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa9654e761f0b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec46d7ccba9a3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd283f9d2825ba3; op2val:0xc00a9654e761f0b1;
op3val:0x7feec46d7ccba9a3; valaddr_reg:x3; val_offset:963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 963*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x283f9d2825ba3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa9654e761f0b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec46d7ccba9a3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd283f9d2825ba3; op2val:0xc00a9654e761f0b1;
op3val:0x7feec46d7ccba9a3; valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x283f9d2825ba3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa9654e761f0b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec46d7ccba9a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd283f9d2825ba3; op2val:0xc00a9654e761f0b1;
op3val:0x7feec46d7ccba9a3; valaddr_reg:x3; val_offset:969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 969*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x283f9d2825ba3 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa9654e761f0b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec46d7ccba9a3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd283f9d2825ba3; op2val:0xc00a9654e761f0b1;
op3val:0x7feec46d7ccba9a3; valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2b8342da56cc9 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x91bb5b7667690 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd603cf9c07b4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2b8342da56cc9; op2val:0xc0091bb5b7667690;
op3val:0x7fed603cf9c07b4f; valaddr_reg:x3; val_offset:975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 975*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2b8342da56cc9 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x91bb5b7667690 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd603cf9c07b4f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2b8342da56cc9; op2val:0xc0091bb5b7667690;
op3val:0x7fed603cf9c07b4f; valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2b8342da56cc9 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x91bb5b7667690 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd603cf9c07b4f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2b8342da56cc9; op2val:0xc0091bb5b7667690;
op3val:0x7fed603cf9c07b4f; valaddr_reg:x3; val_offset:981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 981*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2b8342da56cc9 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x91bb5b7667690 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd603cf9c07b4f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2b8342da56cc9; op2val:0xc0091bb5b7667690;
op3val:0x7fed603cf9c07b4f; valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2b8342da56cc9 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x91bb5b7667690 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd603cf9c07b4f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2b8342da56cc9; op2val:0xc0091bb5b7667690;
op3val:0x7fed603cf9c07b4f; valaddr_reg:x3; val_offset:987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 987*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2ce78cfa7b389 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9bdfcdecda208 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe41ecf15c3c31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2ce78cfa7b389; op2val:0xc009bdfcdecda208;
op3val:0x7fee41ecf15c3c31; valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2ce78cfa7b389 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9bdfcdecda208 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe41ecf15c3c31 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2ce78cfa7b389; op2val:0xc009bdfcdecda208;
op3val:0x7fee41ecf15c3c31; valaddr_reg:x3; val_offset:993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 993*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2ce78cfa7b389 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9bdfcdecda208 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe41ecf15c3c31 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2ce78cfa7b389; op2val:0xc009bdfcdecda208;
op3val:0x7fee41ecf15c3c31; valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2ce78cfa7b389 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9bdfcdecda208 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe41ecf15c3c31 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2ce78cfa7b389; op2val:0xc009bdfcdecda208;
op3val:0x7fee41ecf15c3c31; valaddr_reg:x3; val_offset:999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 999*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2ce78cfa7b389 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9bdfcdecda208 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe41ecf15c3c31 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2ce78cfa7b389; op2val:0xc009bdfcdecda208;
op3val:0x7fee41ecf15c3c31; valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2de3709212eb9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x897eeee2580a5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd007d77604347 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2de3709212eb9; op2val:0xbff897eeee2580a5;
op3val:0x7fdd007d77604347; valaddr_reg:x3; val_offset:1005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1005*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2de3709212eb9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x897eeee2580a5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd007d77604347 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2de3709212eb9; op2val:0xbff897eeee2580a5;
op3val:0x7fdd007d77604347; valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2de3709212eb9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x897eeee2580a5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd007d77604347 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2de3709212eb9; op2val:0xbff897eeee2580a5;
op3val:0x7fdd007d77604347; valaddr_reg:x3; val_offset:1011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1011*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2de3709212eb9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x897eeee2580a5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd007d77604347 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2de3709212eb9; op2val:0xbff897eeee2580a5;
op3val:0x7fdd007d77604347; valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2de3709212eb9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x897eeee2580a5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd007d77604347 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2de3709212eb9; op2val:0xbff897eeee2580a5;
op3val:0x7fdd007d77604347; valaddr_reg:x3; val_offset:1017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1017*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2f9038bb87e4d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6662cdadc781c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa8f8d870864b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2f9038bb87e4d; op2val:0xc006662cdadc781c;
op3val:0x7fea8f8d870864b8; valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2f9038bb87e4d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6662cdadc781c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa8f8d870864b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2f9038bb87e4d; op2val:0xc006662cdadc781c;
op3val:0x7fea8f8d870864b8; valaddr_reg:x3; val_offset:1023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1023*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2f9038bb87e4d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6662cdadc781c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa8f8d870864b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2f9038bb87e4d; op2val:0xc006662cdadc781c;
op3val:0x7fea8f8d870864b8; valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2f9038bb87e4d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6662cdadc781c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa8f8d870864b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2f9038bb87e4d; op2val:0xc006662cdadc781c;
op3val:0x7fea8f8d870864b8; valaddr_reg:x3; val_offset:1029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1029*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2f9038bb87e4d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6662cdadc781c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa8f8d870864b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2f9038bb87e4d; op2val:0xc006662cdadc781c;
op3val:0x7fea8f8d870864b8; valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2ff2265d9a737 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc8fe942aa1ecc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0f4acb41b412d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2ff2265d9a737; op2val:0xbffc8fe942aa1ecc;
op3val:0x7fe0f4acb41b412d; valaddr_reg:x3; val_offset:1035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1035*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2ff2265d9a737 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc8fe942aa1ecc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0f4acb41b412d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2ff2265d9a737; op2val:0xbffc8fe942aa1ecc;
op3val:0x7fe0f4acb41b412d; valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2ff2265d9a737 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc8fe942aa1ecc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0f4acb41b412d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2ff2265d9a737; op2val:0xbffc8fe942aa1ecc;
op3val:0x7fe0f4acb41b412d; valaddr_reg:x3; val_offset:1041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1041*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2ff2265d9a737 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc8fe942aa1ecc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0f4acb41b412d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2ff2265d9a737; op2val:0xbffc8fe942aa1ecc;
op3val:0x7fe0f4acb41b412d; valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2ff2265d9a737 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc8fe942aa1ecc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0f4acb41b412d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2ff2265d9a737; op2val:0xbffc8fe942aa1ecc;
op3val:0x7fe0f4acb41b412d; valaddr_reg:x3; val_offset:1047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1047*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x34977ae8a092b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x002a99ffaa461 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cad56583569 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd34977ae8a092b; op2val:0xc00002a99ffaa461;
op3val:0x7fe34cad56583569; valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x34977ae8a092b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x002a99ffaa461 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cad56583569 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd34977ae8a092b; op2val:0xc00002a99ffaa461;
op3val:0x7fe34cad56583569; valaddr_reg:x3; val_offset:1053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1053*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x34977ae8a092b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x002a99ffaa461 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cad56583569 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd34977ae8a092b; op2val:0xc00002a99ffaa461;
op3val:0x7fe34cad56583569; valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x34977ae8a092b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x002a99ffaa461 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cad56583569 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd34977ae8a092b; op2val:0xc00002a99ffaa461;
op3val:0x7fe34cad56583569; valaddr_reg:x3; val_offset:1059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1059*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x34977ae8a092b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x002a99ffaa461 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x34cad56583569 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd34977ae8a092b; op2val:0xc00002a99ffaa461;
op3val:0x7fe34cad56583569; valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x435f4497a6a63 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x861a6c82110d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xecc4833c7c22d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd435f4497a6a63; op2val:0xbff861a6c82110d2;
op3val:0x7fdecc4833c7c22d; valaddr_reg:x3; val_offset:1065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1065*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x435f4497a6a63 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x861a6c82110d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xecc4833c7c22d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd435f4497a6a63; op2val:0xbff861a6c82110d2;
op3val:0x7fdecc4833c7c22d; valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x435f4497a6a63 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x861a6c82110d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xecc4833c7c22d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd435f4497a6a63; op2val:0xbff861a6c82110d2;
op3val:0x7fdecc4833c7c22d; valaddr_reg:x3; val_offset:1071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1071*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x435f4497a6a63 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x861a6c82110d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xecc4833c7c22d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd435f4497a6a63; op2val:0xbff861a6c82110d2;
op3val:0x7fdecc4833c7c22d; valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x435f4497a6a63 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x861a6c82110d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xecc4833c7c22d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd435f4497a6a63; op2val:0xbff861a6c82110d2;
op3val:0x7fdecc4833c7c22d; valaddr_reg:x3; val_offset:1077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1077*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x44673727309cf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1ed5312aa8e46 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6b7977cc7c6d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd44673727309cf; op2val:0xbfe1ed5312aa8e46;
op3val:0x7fc6b7977cc7c6d7; valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x44673727309cf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1ed5312aa8e46 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6b7977cc7c6d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd44673727309cf; op2val:0xbfe1ed5312aa8e46;
op3val:0x7fc6b7977cc7c6d7; valaddr_reg:x3; val_offset:1083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1083*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x44673727309cf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1ed5312aa8e46 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6b7977cc7c6d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd44673727309cf; op2val:0xbfe1ed5312aa8e46;
op3val:0x7fc6b7977cc7c6d7; valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x44673727309cf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1ed5312aa8e46 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6b7977cc7c6d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd44673727309cf; op2val:0xbfe1ed5312aa8e46;
op3val:0x7fc6b7977cc7c6d7; valaddr_reg:x3; val_offset:1089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1089*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x44673727309cf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1ed5312aa8e46 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6b7977cc7c6d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd44673727309cf; op2val:0xbfe1ed5312aa8e46;
op3val:0x7fc6b7977cc7c6d7; valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x44f79e7be6c8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x24e67d722e194 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x73cf067b8fba3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd44f79e7be6c8f; op2val:0xbfe24e67d722e194;
op3val:0x7fc73cf067b8fba3; valaddr_reg:x3; val_offset:1095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1095*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x44f79e7be6c8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x24e67d722e194 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x73cf067b8fba3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd44f79e7be6c8f; op2val:0xbfe24e67d722e194;
op3val:0x7fc73cf067b8fba3; valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x44f79e7be6c8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x24e67d722e194 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x73cf067b8fba3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd44f79e7be6c8f; op2val:0xbfe24e67d722e194;
op3val:0x7fc73cf067b8fba3; valaddr_reg:x3; val_offset:1101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1101*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x44f79e7be6c8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x24e67d722e194 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x73cf067b8fba3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd44f79e7be6c8f; op2val:0xbfe24e67d722e194;
op3val:0x7fc73cf067b8fba3; valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x44f79e7be6c8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x24e67d722e194 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x73cf067b8fba3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd44f79e7be6c8f; op2val:0xbfe24e67d722e194;
op3val:0x7fc73cf067b8fba3; valaddr_reg:x3; val_offset:1107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1107*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b0b8c0dc4fab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3b58d3c19b43c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x97ca1321f707c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b0b8c0dc4fab; op2val:0xc003b58d3c19b43c;
op3val:0x7fe97ca1321f707c; valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b0b8c0dc4fab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3b58d3c19b43c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x97ca1321f707c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b0b8c0dc4fab; op2val:0xc003b58d3c19b43c;
op3val:0x7fe97ca1321f707c; valaddr_reg:x3; val_offset:1113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1113*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b0b8c0dc4fab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3b58d3c19b43c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x97ca1321f707c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b0b8c0dc4fab; op2val:0xc003b58d3c19b43c;
op3val:0x7fe97ca1321f707c; valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b0b8c0dc4fab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3b58d3c19b43c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x97ca1321f707c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b0b8c0dc4fab; op2val:0xc003b58d3c19b43c;
op3val:0x7fe97ca1321f707c; valaddr_reg:x3; val_offset:1119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1119*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b0b8c0dc4fab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3b58d3c19b43c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x97ca1321f707c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b0b8c0dc4fab; op2val:0xc003b58d3c19b43c;
op3val:0x7fe97ca1321f707c; valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a01a288736c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd5aa56f017c02 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d659cad7c271 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a01a288736c5; op2val:0xbfed5aa56f017c02;
op3val:0x7fd3d659cad7c271; valaddr_reg:x3; val_offset:1125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1125*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a01a288736c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd5aa56f017c02 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d659cad7c271 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a01a288736c5; op2val:0xbfed5aa56f017c02;
op3val:0x7fd3d659cad7c271; valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a01a288736c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd5aa56f017c02 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d659cad7c271 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a01a288736c5; op2val:0xbfed5aa56f017c02;
op3val:0x7fd3d659cad7c271; valaddr_reg:x3; val_offset:1131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1131*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a01a288736c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd5aa56f017c02 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d659cad7c271 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a01a288736c5; op2val:0xbfed5aa56f017c02;
op3val:0x7fd3d659cad7c271; valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5a01a288736c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd5aa56f017c02 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3d659cad7c271 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5a01a288736c5; op2val:0xbfed5aa56f017c02;
op3val:0x7fd3d659cad7c271; valaddr_reg:x3; val_offset:1137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1137*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c1e59a3495cf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5bf982469fe46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd9306e2cf7822 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c1e59a3495cf; op2val:0xc005bf982469fe46;
op3val:0x7fed9306e2cf7822; valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c1e59a3495cf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5bf982469fe46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd9306e2cf7822 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c1e59a3495cf; op2val:0xc005bf982469fe46;
op3val:0x7fed9306e2cf7822; valaddr_reg:x3; val_offset:1143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1143*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c1e59a3495cf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5bf982469fe46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd9306e2cf7822 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c1e59a3495cf; op2val:0xc005bf982469fe46;
op3val:0x7fed9306e2cf7822; valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c1e59a3495cf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5bf982469fe46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd9306e2cf7822 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c1e59a3495cf; op2val:0xc005bf982469fe46;
op3val:0x7fed9306e2cf7822; valaddr_reg:x3; val_offset:1149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1149*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c1e59a3495cf and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5bf982469fe46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd9306e2cf7822 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c1e59a3495cf; op2val:0xc005bf982469fe46;
op3val:0x7fed9306e2cf7822; valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60a5a04199781 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07bd4acb086bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6b4ee8f2445b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60a5a04199781; op2val:0xbff07bd4acb086bc;
op3val:0x7fd6b4ee8f2445b5; valaddr_reg:x3; val_offset:1155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1155*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60a5a04199781 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07bd4acb086bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6b4ee8f2445b5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60a5a04199781; op2val:0xbff07bd4acb086bc;
op3val:0x7fd6b4ee8f2445b5; valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60a5a04199781 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07bd4acb086bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6b4ee8f2445b5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60a5a04199781; op2val:0xbff07bd4acb086bc;
op3val:0x7fd6b4ee8f2445b5; valaddr_reg:x3; val_offset:1161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1161*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60a5a04199781 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07bd4acb086bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6b4ee8f2445b5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60a5a04199781; op2val:0xbff07bd4acb086bc;
op3val:0x7fd6b4ee8f2445b5; valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60a5a04199781 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07bd4acb086bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6b4ee8f2445b5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd60a5a04199781; op2val:0xbff07bd4acb086bc;
op3val:0x7fd6b4ee8f2445b5; valaddr_reg:x3; val_offset:1167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1167*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x643bd6230e5b5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd9f368b89c1a3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49c2a2961e033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd643bd6230e5b5; op2val:0xbffd9f368b89c1a3;
op3val:0x7fe49c2a2961e033; valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x643bd6230e5b5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd9f368b89c1a3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49c2a2961e033 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd643bd6230e5b5; op2val:0xbffd9f368b89c1a3;
op3val:0x7fe49c2a2961e033; valaddr_reg:x3; val_offset:1173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1173*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x643bd6230e5b5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd9f368b89c1a3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49c2a2961e033 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd643bd6230e5b5; op2val:0xbffd9f368b89c1a3;
op3val:0x7fe49c2a2961e033; valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x643bd6230e5b5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd9f368b89c1a3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49c2a2961e033 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd643bd6230e5b5; op2val:0xbffd9f368b89c1a3;
op3val:0x7fe49c2a2961e033; valaddr_reg:x3; val_offset:1179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1179*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x643bd6230e5b5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd9f368b89c1a3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49c2a2961e033 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd643bd6230e5b5; op2val:0xbffd9f368b89c1a3;
op3val:0x7fe49c2a2961e033; valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66723c760f03d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x34369dcdd22ad and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaf8de9cb09cc3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66723c760f03d; op2val:0xc0034369dcdd22ad;
op3val:0x7feaf8de9cb09cc3; valaddr_reg:x3; val_offset:1185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1185*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66723c760f03d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x34369dcdd22ad and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaf8de9cb09cc3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66723c760f03d; op2val:0xc0034369dcdd22ad;
op3val:0x7feaf8de9cb09cc3; valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66723c760f03d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x34369dcdd22ad and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaf8de9cb09cc3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66723c760f03d; op2val:0xc0034369dcdd22ad;
op3val:0x7feaf8de9cb09cc3; valaddr_reg:x3; val_offset:1191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1191*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66723c760f03d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x34369dcdd22ad and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaf8de9cb09cc3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66723c760f03d; op2val:0xc0034369dcdd22ad;
op3val:0x7feaf8de9cb09cc3; valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66723c760f03d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x34369dcdd22ad and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaf8de9cb09cc3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66723c760f03d; op2val:0xc0034369dcdd22ad;
op3val:0x7feaf8de9cb09cc3; valaddr_reg:x3; val_offset:1197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1197*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71dbc6351ba9b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd67f63a22c8b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x53e0c4ef901b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71dbc6351ba9b; op2val:0xbfdd67f63a22c8b1;
op3val:0x7fc53e0c4ef901b7; valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71dbc6351ba9b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd67f63a22c8b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x53e0c4ef901b7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71dbc6351ba9b; op2val:0xbfdd67f63a22c8b1;
op3val:0x7fc53e0c4ef901b7; valaddr_reg:x3; val_offset:1203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1203*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71dbc6351ba9b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd67f63a22c8b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x53e0c4ef901b7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71dbc6351ba9b; op2val:0xbfdd67f63a22c8b1;
op3val:0x7fc53e0c4ef901b7; valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71dbc6351ba9b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd67f63a22c8b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x53e0c4ef901b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71dbc6351ba9b; op2val:0xbfdd67f63a22c8b1;
op3val:0x7fc53e0c4ef901b7; valaddr_reg:x3; val_offset:1209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1209*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71dbc6351ba9b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd67f63a22c8b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x53e0c4ef901b7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71dbc6351ba9b; op2val:0xbfdd67f63a22c8b1;
op3val:0x7fc53e0c4ef901b7; valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71ff810813f2d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1672eac27ff57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x92718d32e3c43 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71ff810813f2d; op2val:0xc001672eac27ff57;
op3val:0x7fe92718d32e3c43; valaddr_reg:x3; val_offset:1215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1215*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71ff810813f2d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1672eac27ff57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x92718d32e3c43 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71ff810813f2d; op2val:0xc001672eac27ff57;
op3val:0x7fe92718d32e3c43; valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71ff810813f2d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1672eac27ff57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x92718d32e3c43 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71ff810813f2d; op2val:0xc001672eac27ff57;
op3val:0x7fe92718d32e3c43; valaddr_reg:x3; val_offset:1221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1221*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71ff810813f2d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1672eac27ff57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x92718d32e3c43 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71ff810813f2d; op2val:0xc001672eac27ff57;
op3val:0x7fe92718d32e3c43; valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71ff810813f2d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1672eac27ff57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x92718d32e3c43 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd71ff810813f2d; op2val:0xc001672eac27ff57;
op3val:0x7fe92718d32e3c43; valaddr_reg:x3; val_offset:1227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1227*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x742774c7979c9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf039ccd843cce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x68b03c6ac58cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd742774c7979c9; op2val:0xbfff039ccd843cce;
op3val:0x7fe68b03c6ac58cf; valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x742774c7979c9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf039ccd843cce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x68b03c6ac58cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd742774c7979c9; op2val:0xbfff039ccd843cce;
op3val:0x7fe68b03c6ac58cf; valaddr_reg:x3; val_offset:1233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1233*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x742774c7979c9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf039ccd843cce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x68b03c6ac58cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd742774c7979c9; op2val:0xbfff039ccd843cce;
op3val:0x7fe68b03c6ac58cf; valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x742774c7979c9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf039ccd843cce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x68b03c6ac58cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd742774c7979c9; op2val:0xbfff039ccd843cce;
op3val:0x7fe68b03c6ac58cf; valaddr_reg:x3; val_offset:1239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1239*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x742774c7979c9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf039ccd843cce and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x68b03c6ac58cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd742774c7979c9; op2val:0xbfff039ccd843cce;
op3val:0x7fe68b03c6ac58cf; valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x76f910302cbdd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x94717562172c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28339eb5d6c77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd76f910302cbdd; op2val:0xbff94717562172c6;
op3val:0x7fe28339eb5d6c77; valaddr_reg:x3; val_offset:1245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1245*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x76f910302cbdd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x94717562172c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28339eb5d6c77 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd76f910302cbdd; op2val:0xbff94717562172c6;
op3val:0x7fe28339eb5d6c77; valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x76f910302cbdd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x94717562172c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28339eb5d6c77 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd76f910302cbdd; op2val:0xbff94717562172c6;
op3val:0x7fe28339eb5d6c77; valaddr_reg:x3; val_offset:1251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1251*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x76f910302cbdd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x94717562172c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28339eb5d6c77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd76f910302cbdd; op2val:0xbff94717562172c6;
op3val:0x7fe28339eb5d6c77; valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x76f910302cbdd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x94717562172c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x28339eb5d6c77 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd76f910302cbdd; op2val:0xbff94717562172c6;
op3val:0x7fe28339eb5d6c77; valaddr_reg:x3; val_offset:1257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1257*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a4f313bd6219 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x89e6311dc9a65 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x230bdf28226f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a4f313bd6219; op2val:0xbfd89e6311dc9a65;
op3val:0x7fc230bdf28226f7; valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a4f313bd6219 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x89e6311dc9a65 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x230bdf28226f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a4f313bd6219; op2val:0xbfd89e6311dc9a65;
op3val:0x7fc230bdf28226f7; valaddr_reg:x3; val_offset:1263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1263*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a4f313bd6219 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x89e6311dc9a65 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x230bdf28226f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a4f313bd6219; op2val:0xbfd89e6311dc9a65;
op3val:0x7fc230bdf28226f7; valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a4f313bd6219 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x89e6311dc9a65 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x230bdf28226f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a4f313bd6219; op2val:0xbfd89e6311dc9a65;
op3val:0x7fc230bdf28226f7; valaddr_reg:x3; val_offset:1269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1269*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a4f313bd6219 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x89e6311dc9a65 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x230bdf28226f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a4f313bd6219; op2val:0xbfd89e6311dc9a65;
op3val:0x7fc230bdf28226f7; valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7eda4efb707f7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8b1321a75d35f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x276bba33219df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7eda4efb707f7; op2val:0xbfb8b1321a75d35f;
op3val:0x7fa276bba33219df; valaddr_reg:x3; val_offset:1275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1275*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7eda4efb707f7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8b1321a75d35f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x276bba33219df and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7eda4efb707f7; op2val:0xbfb8b1321a75d35f;
op3val:0x7fa276bba33219df; valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1278*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7eda4efb707f7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8b1321a75d35f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x276bba33219df and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7eda4efb707f7; op2val:0xbfb8b1321a75d35f;
op3val:0x7fa276bba33219df; valaddr_reg:x3; val_offset:1281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1281*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7eda4efb707f7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8b1321a75d35f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x276bba33219df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7eda4efb707f7; op2val:0xbfb8b1321a75d35f;
op3val:0x7fa276bba33219df; valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7eda4efb707f7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8b1321a75d35f and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x276bba33219df and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7eda4efb707f7; op2val:0xbfb8b1321a75d35f;
op3val:0x7fa276bba33219df; valaddr_reg:x3; val_offset:1287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1287*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x80de60b6f00df and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2607ef5993617 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba0b50fd03dd3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd80de60b6f00df; op2val:0xbff2607ef5993617;
op3val:0x7fdba0b50fd03dd3; valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x80de60b6f00df and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2607ef5993617 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba0b50fd03dd3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd80de60b6f00df; op2val:0xbff2607ef5993617;
op3val:0x7fdba0b50fd03dd3; valaddr_reg:x3; val_offset:1293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1293*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x80de60b6f00df and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2607ef5993617 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba0b50fd03dd3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd80de60b6f00df; op2val:0xbff2607ef5993617;
op3val:0x7fdba0b50fd03dd3; valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x80de60b6f00df and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2607ef5993617 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba0b50fd03dd3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd80de60b6f00df; op2val:0xbff2607ef5993617;
op3val:0x7fdba0b50fd03dd3; valaddr_reg:x3; val_offset:1299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1299*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x80de60b6f00df and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2607ef5993617 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba0b50fd03dd3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd80de60b6f00df; op2val:0xbff2607ef5993617;
op3val:0x7fdba0b50fd03dd3; valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x820c7be939191 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4f9449495eae2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfa0df3e20838d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd820c7be939191; op2val:0xc004f9449495eae2;
op3val:0x7fefa0df3e20838d; valaddr_reg:x3; val_offset:1305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1305*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x820c7be939191 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4f9449495eae2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfa0df3e20838d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd820c7be939191; op2val:0xc004f9449495eae2;
op3val:0x7fefa0df3e20838d; valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x820c7be939191 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4f9449495eae2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfa0df3e20838d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd820c7be939191; op2val:0xc004f9449495eae2;
op3val:0x7fefa0df3e20838d; valaddr_reg:x3; val_offset:1311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1311*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x820c7be939191 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4f9449495eae2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfa0df3e20838d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd820c7be939191; op2val:0xc004f9449495eae2;
op3val:0x7fefa0df3e20838d; valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x820c7be939191 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4f9449495eae2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfa0df3e20838d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd820c7be939191; op2val:0xc004f9449495eae2;
op3val:0x7fefa0df3e20838d; valaddr_reg:x3; val_offset:1317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1317*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8ab9793ce4623 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x043ed2f7bd013 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x91453d575687b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8ab9793ce4623; op2val:0xbff043ed2f7bd013;
op3val:0x7fd91453d575687b; valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8ab9793ce4623 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x043ed2f7bd013 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x91453d575687b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8ab9793ce4623; op2val:0xbff043ed2f7bd013;
op3val:0x7fd91453d575687b; valaddr_reg:x3; val_offset:1323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1323*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8ab9793ce4623 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x043ed2f7bd013 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x91453d575687b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8ab9793ce4623; op2val:0xbff043ed2f7bd013;
op3val:0x7fd91453d575687b; valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8ab9793ce4623 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x043ed2f7bd013 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x91453d575687b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8ab9793ce4623; op2val:0xbff043ed2f7bd013;
op3val:0x7fd91453d575687b; valaddr_reg:x3; val_offset:1329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1329*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8ab9793ce4623 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x043ed2f7bd013 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x91453d575687b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8ab9793ce4623; op2val:0xbff043ed2f7bd013;
op3val:0x7fd91453d575687b; valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0182b066dad and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6a270f2c744d0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x176633b90457b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0182b066dad; op2val:0xbfd6a270f2c744d0;
op3val:0x7fc176633b90457b; valaddr_reg:x3; val_offset:1335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1335*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0182b066dad and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6a270f2c744d0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x176633b90457b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0182b066dad; op2val:0xbfd6a270f2c744d0;
op3val:0x7fc176633b90457b; valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0182b066dad and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6a270f2c744d0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x176633b90457b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0182b066dad; op2val:0xbfd6a270f2c744d0;
op3val:0x7fc176633b90457b; valaddr_reg:x3; val_offset:1341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1341*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0182b066dad and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6a270f2c744d0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x176633b90457b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0182b066dad; op2val:0xbfd6a270f2c744d0;
op3val:0x7fc176633b90457b; valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0182b066dad and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6a270f2c744d0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x176633b90457b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0182b066dad; op2val:0xbfd6a270f2c744d0;
op3val:0x7fc176633b90457b; valaddr_reg:x3; val_offset:1347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1347*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9d7af8f37029d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7389598bd5d38 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c0b871cd0c13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9d7af8f37029d; op2val:0xbfd7389598bd5d38;
op3val:0x7fc2c0b871cd0c13; valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9d7af8f37029d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7389598bd5d38 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c0b871cd0c13 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9d7af8f37029d; op2val:0xbfd7389598bd5d38;
op3val:0x7fc2c0b871cd0c13; valaddr_reg:x3; val_offset:1353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1353*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9d7af8f37029d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7389598bd5d38 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c0b871cd0c13 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9d7af8f37029d; op2val:0xbfd7389598bd5d38;
op3val:0x7fc2c0b871cd0c13; valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9d7af8f37029d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7389598bd5d38 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c0b871cd0c13 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9d7af8f37029d; op2val:0xbfd7389598bd5d38;
op3val:0x7fc2c0b871cd0c13; valaddr_reg:x3; val_offset:1359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1359*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9d7af8f37029d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7389598bd5d38 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c0b871cd0c13 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9d7af8f37029d; op2val:0xbfd7389598bd5d38;
op3val:0x7fc2c0b871cd0c13; valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa11c0412e3d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b6247a905d89 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe610bbbd953db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9fa11c0412e3d; op2val:0xbfe2b6247a905d89;
op3val:0x7fce610bbbd953db; valaddr_reg:x3; val_offset:1365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1365*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa11c0412e3d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b6247a905d89 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe610bbbd953db and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9fa11c0412e3d; op2val:0xbfe2b6247a905d89;
op3val:0x7fce610bbbd953db; valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa11c0412e3d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b6247a905d89 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe610bbbd953db and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9fa11c0412e3d; op2val:0xbfe2b6247a905d89;
op3val:0x7fce610bbbd953db; valaddr_reg:x3; val_offset:1371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1371*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa11c0412e3d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b6247a905d89 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe610bbbd953db and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9fa11c0412e3d; op2val:0xbfe2b6247a905d89;
op3val:0x7fce610bbbd953db; valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa11c0412e3d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b6247a905d89 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe610bbbd953db and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9fa11c0412e3d; op2val:0xbfe2b6247a905d89;
op3val:0x7fce610bbbd953db; valaddr_reg:x3; val_offset:1377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1377*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa7dee766a9c05 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8eba83eb506d5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4a18af1135d97 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda7dee766a9c05; op2val:0xbfd8eba83eb506d5;
op3val:0x7fc4a18af1135d97; valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa7dee766a9c05 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8eba83eb506d5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4a18af1135d97 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda7dee766a9c05; op2val:0xbfd8eba83eb506d5;
op3val:0x7fc4a18af1135d97; valaddr_reg:x3; val_offset:1383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1383*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa7dee766a9c05 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8eba83eb506d5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4a18af1135d97 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda7dee766a9c05; op2val:0xbfd8eba83eb506d5;
op3val:0x7fc4a18af1135d97; valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa7dee766a9c05 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8eba83eb506d5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4a18af1135d97 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda7dee766a9c05; op2val:0xbfd8eba83eb506d5;
op3val:0x7fc4a18af1135d97; valaddr_reg:x3; val_offset:1389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1389*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa7dee766a9c05 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8eba83eb506d5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4a18af1135d97 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda7dee766a9c05; op2val:0xbfd8eba83eb506d5;
op3val:0x7fc4a18af1135d97; valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa976a9028496d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x89489e50d3718 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x46cfecf8fb875 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda976a9028496d; op2val:0xbfe89489e50d3718;
op3val:0x7fd46cfecf8fb875; valaddr_reg:x3; val_offset:1395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1395*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa976a9028496d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x89489e50d3718 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x46cfecf8fb875 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda976a9028496d; op2val:0xbfe89489e50d3718;
op3val:0x7fd46cfecf8fb875; valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa976a9028496d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x89489e50d3718 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x46cfecf8fb875 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda976a9028496d; op2val:0xbfe89489e50d3718;
op3val:0x7fd46cfecf8fb875; valaddr_reg:x3; val_offset:1401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1401*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa976a9028496d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x89489e50d3718 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x46cfecf8fb875 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda976a9028496d; op2val:0xbfe89489e50d3718;
op3val:0x7fd46cfecf8fb875; valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa976a9028496d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x89489e50d3718 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x46cfecf8fb875 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda976a9028496d; op2val:0xbfe89489e50d3718;
op3val:0x7fd46cfecf8fb875; valaddr_reg:x3; val_offset:1407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1407*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb5ff414c256c5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5886744e56a0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x26ba852c18dc1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb5ff414c256c5; op2val:0xbff5886744e56a0a;
op3val:0x7fe26ba852c18dc1; valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb5ff414c256c5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5886744e56a0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x26ba852c18dc1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb5ff414c256c5; op2val:0xbff5886744e56a0a;
op3val:0x7fe26ba852c18dc1; valaddr_reg:x3; val_offset:1413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1413*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb5ff414c256c5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5886744e56a0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x26ba852c18dc1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb5ff414c256c5; op2val:0xbff5886744e56a0a;
op3val:0x7fe26ba852c18dc1; valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb5ff414c256c5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5886744e56a0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x26ba852c18dc1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb5ff414c256c5; op2val:0xbff5886744e56a0a;
op3val:0x7fe26ba852c18dc1; valaddr_reg:x3; val_offset:1419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1419*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb5ff414c256c5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5886744e56a0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x26ba852c18dc1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb5ff414c256c5; op2val:0xbff5886744e56a0a;
op3val:0x7fe26ba852c18dc1; valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xba07d50bb43b9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x751b9ae3bf5f5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x421e89d7bdb11 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdba07d50bb43b9; op2val:0xbfe751b9ae3bf5f5;
op3val:0x7fd421e89d7bdb11; valaddr_reg:x3; val_offset:1425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1425*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xba07d50bb43b9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x751b9ae3bf5f5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x421e89d7bdb11 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdba07d50bb43b9; op2val:0xbfe751b9ae3bf5f5;
op3val:0x7fd421e89d7bdb11; valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xba07d50bb43b9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x751b9ae3bf5f5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x421e89d7bdb11 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdba07d50bb43b9; op2val:0xbfe751b9ae3bf5f5;
op3val:0x7fd421e89d7bdb11; valaddr_reg:x3; val_offset:1431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1431*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xba07d50bb43b9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x751b9ae3bf5f5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x421e89d7bdb11 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdba07d50bb43b9; op2val:0xbfe751b9ae3bf5f5;
op3val:0x7fd421e89d7bdb11; valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xba07d50bb43b9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x751b9ae3bf5f5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x421e89d7bdb11 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdba07d50bb43b9; op2val:0xbfe751b9ae3bf5f5;
op3val:0x7fd421e89d7bdb11; valaddr_reg:x3; val_offset:1437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1437*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc3a7704fe195b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x79556c0841e18 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4cdc24cb9149f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc3a7704fe195b; op2val:0xbff79556c0841e18;
op3val:0x7fe4cdc24cb9149f; valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc3a7704fe195b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x79556c0841e18 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4cdc24cb9149f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc3a7704fe195b; op2val:0xbff79556c0841e18;
op3val:0x7fe4cdc24cb9149f; valaddr_reg:x3; val_offset:1443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1443*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc3a7704fe195b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x79556c0841e18 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4cdc24cb9149f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc3a7704fe195b; op2val:0xbff79556c0841e18;
op3val:0x7fe4cdc24cb9149f; valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc3a7704fe195b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x79556c0841e18 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4cdc24cb9149f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc3a7704fe195b; op2val:0xbff79556c0841e18;
op3val:0x7fe4cdc24cb9149f; valaddr_reg:x3; val_offset:1449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1449*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc3a7704fe195b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x79556c0841e18 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4cdc24cb9149f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc3a7704fe195b; op2val:0xbff79556c0841e18;
op3val:0x7fe4cdc24cb9149f; valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc61c611f6c8db and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x526604cab8fcb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c2338051df31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc61c611f6c8db; op2val:0xbfe526604cab8fcb;
op3val:0x7fd2c2338051df31; valaddr_reg:x3; val_offset:1455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1455*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc61c611f6c8db and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x526604cab8fcb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c2338051df31 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc61c611f6c8db; op2val:0xbfe526604cab8fcb;
op3val:0x7fd2c2338051df31; valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc61c611f6c8db and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x526604cab8fcb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c2338051df31 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc61c611f6c8db; op2val:0xbfe526604cab8fcb;
op3val:0x7fd2c2338051df31; valaddr_reg:x3; val_offset:1461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1461*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc61c611f6c8db and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x526604cab8fcb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c2338051df31 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc61c611f6c8db; op2val:0xbfe526604cab8fcb;
op3val:0x7fd2c2338051df31; valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc61c611f6c8db and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x526604cab8fcb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c2338051df31 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc61c611f6c8db; op2val:0xbfe526604cab8fcb;
op3val:0x7fd2c2338051df31; valaddr_reg:x3; val_offset:1467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1467*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd28c6757c6183 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0180789f482ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd54915c6e2edb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd28c6757c6183; op2val:0xc000180789f482ba;
op3val:0x7fed54915c6e2edb; valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd28c6757c6183 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0180789f482ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd54915c6e2edb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd28c6757c6183; op2val:0xc000180789f482ba;
op3val:0x7fed54915c6e2edb; valaddr_reg:x3; val_offset:1473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1473*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd28c6757c6183 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0180789f482ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd54915c6e2edb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd28c6757c6183; op2val:0xc000180789f482ba;
op3val:0x7fed54915c6e2edb; valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd28c6757c6183 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0180789f482ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd54915c6e2edb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd28c6757c6183; op2val:0xc000180789f482ba;
op3val:0x7fed54915c6e2edb; valaddr_reg:x3; val_offset:1479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1479*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd28c6757c6183 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0180789f482ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd54915c6e2edb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd28c6757c6183; op2val:0xc000180789f482ba;
op3val:0x7fed54915c6e2edb; valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd299df5352de3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd9e66baf38c0b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xafe12412a3f8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd299df5352de3; op2val:0xbfed9e66baf38c0b;
op3val:0x7fdafe12412a3f8b; valaddr_reg:x3; val_offset:1485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1485*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd299df5352de3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd9e66baf38c0b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xafe12412a3f8b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd299df5352de3; op2val:0xbfed9e66baf38c0b;
op3val:0x7fdafe12412a3f8b; valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd299df5352de3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd9e66baf38c0b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xafe12412a3f8b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd299df5352de3; op2val:0xbfed9e66baf38c0b;
op3val:0x7fdafe12412a3f8b; valaddr_reg:x3; val_offset:1491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1491*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd299df5352de3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd9e66baf38c0b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xafe12412a3f8b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd299df5352de3; op2val:0xbfed9e66baf38c0b;
op3val:0x7fdafe12412a3f8b; valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd299df5352de3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd9e66baf38c0b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xafe12412a3f8b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd299df5352de3; op2val:0xbfed9e66baf38c0b;
op3val:0x7fdafe12412a3f8b; valaddr_reg:x3; val_offset:1497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1497*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xda0cada4f8445 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc39d54d166e8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa223d66005b84 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdda0cada4f8445; op2val:0xbffc39d54d166e8c;
op3val:0x7fea223d66005b84; valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xda0cada4f8445 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc39d54d166e8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa223d66005b84 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdda0cada4f8445; op2val:0xbffc39d54d166e8c;
op3val:0x7fea223d66005b84; valaddr_reg:x3; val_offset:1503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1503*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xda0cada4f8445 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc39d54d166e8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa223d66005b84 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdda0cada4f8445; op2val:0xbffc39d54d166e8c;
op3val:0x7fea223d66005b84; valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xda0cada4f8445 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc39d54d166e8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa223d66005b84 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdda0cada4f8445; op2val:0xbffc39d54d166e8c;
op3val:0x7fea223d66005b84; valaddr_reg:x3; val_offset:1509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1509*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xda0cada4f8445 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc39d54d166e8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa223d66005b84 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdda0cada4f8445; op2val:0xbffc39d54d166e8c;
op3val:0x7fea223d66005b84; valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdb7b172cc5173 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e197053e3ca3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x71b44ed743f59 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddb7b172cc5173; op2val:0xbfe8e197053e3ca3;
op3val:0x7fd71b44ed743f59; valaddr_reg:x3; val_offset:1515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1515*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdb7b172cc5173 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e197053e3ca3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x71b44ed743f59 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddb7b172cc5173; op2val:0xbfe8e197053e3ca3;
op3val:0x7fd71b44ed743f59; valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdb7b172cc5173 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e197053e3ca3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x71b44ed743f59 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddb7b172cc5173; op2val:0xbfe8e197053e3ca3;
op3val:0x7fd71b44ed743f59; valaddr_reg:x3; val_offset:1521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1521*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdb7b172cc5173 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e197053e3ca3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x71b44ed743f59 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddb7b172cc5173; op2val:0xbfe8e197053e3ca3;
op3val:0x7fd71b44ed743f59; valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdb7b172cc5173 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e197053e3ca3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x71b44ed743f59 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddb7b172cc5173; op2val:0xbfe8e197053e3ca3;
op3val:0x7fd71b44ed743f59; valaddr_reg:x3; val_offset:1527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1527*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdc7f82acf0d6d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa270c8218b8b7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x856d0fd4cd95f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddc7f82acf0d6d; op2val:0xbfea270c8218b8b7;
op3val:0x7fd856d0fd4cd95f; valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdc7f82acf0d6d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa270c8218b8b7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x856d0fd4cd95f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddc7f82acf0d6d; op2val:0xbfea270c8218b8b7;
op3val:0x7fd856d0fd4cd95f; valaddr_reg:x3; val_offset:1533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1533*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdc7f82acf0d6d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa270c8218b8b7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x856d0fd4cd95f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddc7f82acf0d6d; op2val:0xbfea270c8218b8b7;
op3val:0x7fd856d0fd4cd95f; valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdc7f82acf0d6d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa270c8218b8b7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x856d0fd4cd95f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddc7f82acf0d6d; op2val:0xbfea270c8218b8b7;
op3val:0x7fd856d0fd4cd95f; valaddr_reg:x3; val_offset:1539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1539*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdc7f82acf0d6d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa270c8218b8b7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x856d0fd4cd95f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddc7f82acf0d6d; op2val:0xbfea270c8218b8b7;
op3val:0x7fd856d0fd4cd95f; valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe053a2ef29387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0d23dd9377bc1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf8fb2d617959b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde053a2ef29387; op2val:0xbfe0d23dd9377bc1;
op3val:0x7fcf8fb2d617959b; valaddr_reg:x3; val_offset:1545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1545*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe053a2ef29387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0d23dd9377bc1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf8fb2d617959b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde053a2ef29387; op2val:0xbfe0d23dd9377bc1;
op3val:0x7fcf8fb2d617959b; valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe053a2ef29387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0d23dd9377bc1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf8fb2d617959b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde053a2ef29387; op2val:0xbfe0d23dd9377bc1;
op3val:0x7fcf8fb2d617959b; valaddr_reg:x3; val_offset:1551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1551*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe053a2ef29387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0d23dd9377bc1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf8fb2d617959b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde053a2ef29387; op2val:0xbfe0d23dd9377bc1;
op3val:0x7fcf8fb2d617959b; valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe053a2ef29387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0d23dd9377bc1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf8fb2d617959b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde053a2ef29387; op2val:0xbfe0d23dd9377bc1;
op3val:0x7fcf8fb2d617959b; valaddr_reg:x3; val_offset:1557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1557*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1789626784f5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe473bed6c803f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc790d5fbd094d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1789626784f5; op2val:0xbffe473bed6c803f;
op3val:0x7fec790d5fbd094d; valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1789626784f5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe473bed6c803f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc790d5fbd094d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1789626784f5; op2val:0xbffe473bed6c803f;
op3val:0x7fec790d5fbd094d; valaddr_reg:x3; val_offset:1563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1563*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1789626784f5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe473bed6c803f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc790d5fbd094d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1789626784f5; op2val:0xbffe473bed6c803f;
op3val:0x7fec790d5fbd094d; valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1789626784f5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe473bed6c803f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc790d5fbd094d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1789626784f5; op2val:0xbffe473bed6c803f;
op3val:0x7fec790d5fbd094d; valaddr_reg:x3; val_offset:1569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1569*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe1789626784f5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe473bed6c803f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc790d5fbd094d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde1789626784f5; op2val:0xbffe473bed6c803f;
op3val:0x7fec790d5fbd094d; valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2e74f7d68c61 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xeb434736cd25d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcf58472a6e4bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde2e74f7d68c61; op2val:0xbfdeb434736cd25d;
op3val:0x7fccf58472a6e4bb; valaddr_reg:x3; val_offset:1575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1575*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2e74f7d68c61 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xeb434736cd25d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcf58472a6e4bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde2e74f7d68c61; op2val:0xbfdeb434736cd25d;
op3val:0x7fccf58472a6e4bb; valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2e74f7d68c61 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xeb434736cd25d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcf58472a6e4bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde2e74f7d68c61; op2val:0xbfdeb434736cd25d;
op3val:0x7fccf58472a6e4bb; valaddr_reg:x3; val_offset:1581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1581*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2e74f7d68c61 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xeb434736cd25d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcf58472a6e4bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde2e74f7d68c61; op2val:0xbfdeb434736cd25d;
op3val:0x7fccf58472a6e4bb; valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2e74f7d68c61 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xeb434736cd25d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xcf58472a6e4bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde2e74f7d68c61; op2val:0xbfdeb434736cd25d;
op3val:0x7fccf58472a6e4bb; valaddr_reg:x3; val_offset:1587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1587*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9e4fed8fd631 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x25d291c01d853 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x19230638e04c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9e4fed8fd631; op2val:0xbff25d291c01d853;
op3val:0x7fe19230638e04c1; valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9e4fed8fd631 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x25d291c01d853 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x19230638e04c1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9e4fed8fd631; op2val:0xbff25d291c01d853;
op3val:0x7fe19230638e04c1; valaddr_reg:x3; val_offset:1593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1593*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9e4fed8fd631 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x25d291c01d853 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x19230638e04c1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9e4fed8fd631; op2val:0xbff25d291c01d853;
op3val:0x7fe19230638e04c1; valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9e4fed8fd631 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x25d291c01d853 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x19230638e04c1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9e4fed8fd631; op2val:0xbff25d291c01d853;
op3val:0x7fe19230638e04c1; valaddr_reg:x3; val_offset:1599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1599*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9e4fed8fd631 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x25d291c01d853 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x19230638e04c1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9e4fed8fd631; op2val:0xbff25d291c01d853;
op3val:0x7fe19230638e04c1; valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea8a1aa313989 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x370b6ca44c088 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a01d53c2b9bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea8a1aa313989; op2val:0xbfe370b6ca44c088;
op3val:0x7fd2a01d53c2b9bb; valaddr_reg:x3; val_offset:1605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1605*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea8a1aa313989 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x370b6ca44c088 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a01d53c2b9bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea8a1aa313989; op2val:0xbfe370b6ca44c088;
op3val:0x7fd2a01d53c2b9bb; valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea8a1aa313989 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x370b6ca44c088 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a01d53c2b9bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea8a1aa313989; op2val:0xbfe370b6ca44c088;
op3val:0x7fd2a01d53c2b9bb; valaddr_reg:x3; val_offset:1611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1611*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea8a1aa313989 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x370b6ca44c088 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a01d53c2b9bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea8a1aa313989; op2val:0xbfe370b6ca44c088;
op3val:0x7fd2a01d53c2b9bb; valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea8a1aa313989 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x370b6ca44c088 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a01d53c2b9bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea8a1aa313989; op2val:0xbfe370b6ca44c088;
op3val:0x7fd2a01d53c2b9bb; valaddr_reg:x3; val_offset:1617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1617*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xed71b46de9a5d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe45a211c6b969 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2cc5975d63a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fded71b46de9a5d; op2val:0xbffe45a211c6b969;
op3val:0x7fed2cc5975d63a2; valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xed71b46de9a5d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe45a211c6b969 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2cc5975d63a2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fded71b46de9a5d; op2val:0xbffe45a211c6b969;
op3val:0x7fed2cc5975d63a2; valaddr_reg:x3; val_offset:1623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1623*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xed71b46de9a5d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe45a211c6b969 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2cc5975d63a2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fded71b46de9a5d; op2val:0xbffe45a211c6b969;
op3val:0x7fed2cc5975d63a2; valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xed71b46de9a5d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe45a211c6b969 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2cc5975d63a2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fded71b46de9a5d; op2val:0xbffe45a211c6b969;
op3val:0x7fed2cc5975d63a2; valaddr_reg:x3; val_offset:1629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1629*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xed71b46de9a5d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe45a211c6b969 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2cc5975d63a2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fded71b46de9a5d; op2val:0xbffe45a211c6b969;
op3val:0x7fed2cc5975d63a2; valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf3dff3d82be09 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7e9106e33fa27 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7581ae94553bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf3dff3d82be09; op2val:0xbff7e9106e33fa27;
op3val:0x7fe7581ae94553bc; valaddr_reg:x3; val_offset:1635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1635*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf3dff3d82be09 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7e9106e33fa27 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7581ae94553bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf3dff3d82be09; op2val:0xbff7e9106e33fa27;
op3val:0x7fe7581ae94553bc; valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf3dff3d82be09 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7e9106e33fa27 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7581ae94553bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf3dff3d82be09; op2val:0xbff7e9106e33fa27;
op3val:0x7fe7581ae94553bc; valaddr_reg:x3; val_offset:1641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1641*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf3dff3d82be09 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7e9106e33fa27 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7581ae94553bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf3dff3d82be09; op2val:0xbff7e9106e33fa27;
op3val:0x7fe7581ae94553bc; valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf3dff3d82be09 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7e9106e33fa27 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7581ae94553bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf3dff3d82be09; op2val:0xbff7e9106e33fa27;
op3val:0x7fe7581ae94553bc; valaddr_reg:x3; val_offset:1647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1647*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfda0547c88b3d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54408d47465ab and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x52acb8c4db5fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfda0547c88b3d; op2val:0xbfe54408d47465ab;
op3val:0x7fd52acb8c4db5fb; valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfda0547c88b3d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54408d47465ab and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x52acb8c4db5fb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfda0547c88b3d; op2val:0xbfe54408d47465ab;
op3val:0x7fd52acb8c4db5fb; valaddr_reg:x3; val_offset:1653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1653*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfda0547c88b3d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54408d47465ab and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x52acb8c4db5fb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfda0547c88b3d; op2val:0xbfe54408d47465ab;
op3val:0x7fd52acb8c4db5fb; valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfda0547c88b3d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54408d47465ab and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x52acb8c4db5fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfda0547c88b3d; op2val:0xbfe54408d47465ab;
op3val:0x7fd52acb8c4db5fb; valaddr_reg:x3; val_offset:1659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1659*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfda0547c88b3d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54408d47465ab and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x52acb8c4db5fb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfda0547c88b3d; op2val:0xbfe54408d47465ab;
op3val:0x7fd52acb8c4db5fb; valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xff4e626f1408f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5b1293d297fe2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5a9a2d170e2e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdff4e626f1408f; op2val:0xbfe5b1293d297fe2;
op3val:0x7fd5a9a2d170e2e7; valaddr_reg:x3; val_offset:1665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1665*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xff4e626f1408f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5b1293d297fe2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5a9a2d170e2e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdff4e626f1408f; op2val:0xbfe5b1293d297fe2;
op3val:0x7fd5a9a2d170e2e7; valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xff4e626f1408f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5b1293d297fe2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5a9a2d170e2e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdff4e626f1408f; op2val:0xbfe5b1293d297fe2;
op3val:0x7fd5a9a2d170e2e7; valaddr_reg:x3; val_offset:1671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1671*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xff4e626f1408f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5b1293d297fe2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5a9a2d170e2e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdff4e626f1408f; op2val:0xbfe5b1293d297fe2;
op3val:0x7fd5a9a2d170e2e7; valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xff4e626f1408f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5b1293d297fe2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5a9a2d170e2e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdff4e626f1408f; op2val:0xbfe5b1293d297fe2;
op3val:0x7fd5a9a2d170e2e7; valaddr_reg:x3; val_offset:1677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1677*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02fdff92933c4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xccc040bf7de2b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd222e73c49406 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02fdff92933c4; op2val:0xbffccc040bf7de2b;
op3val:0x7fed222e73c49406; valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02fdff92933c4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xccc040bf7de2b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd222e73c49406 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02fdff92933c4; op2val:0xbffccc040bf7de2b;
op3val:0x7fed222e73c49406; valaddr_reg:x3; val_offset:1683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1683*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02fdff92933c4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xccc040bf7de2b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd222e73c49406 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02fdff92933c4; op2val:0xbffccc040bf7de2b;
op3val:0x7fed222e73c49406; valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02fdff92933c4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xccc040bf7de2b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd222e73c49406 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02fdff92933c4; op2val:0xbffccc040bf7de2b;
op3val:0x7fed222e73c49406; valaddr_reg:x3; val_offset:1689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1689*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02fdff92933c4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xccc040bf7de2b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd222e73c49406 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe02fdff92933c4; op2val:0xbffccc040bf7de2b;
op3val:0x7fed222e73c49406; valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x08b3a93e68164 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08f9ec7d021e2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x11fbb1cedaf9f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe08b3a93e68164; op2val:0xbfd08f9ec7d021e2;
op3val:0x7fc11fbb1cedaf9f; valaddr_reg:x3; val_offset:1695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1695*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x08b3a93e68164 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08f9ec7d021e2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x11fbb1cedaf9f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe08b3a93e68164; op2val:0xbfd08f9ec7d021e2;
op3val:0x7fc11fbb1cedaf9f; valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x08b3a93e68164 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08f9ec7d021e2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x11fbb1cedaf9f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe08b3a93e68164; op2val:0xbfd08f9ec7d021e2;
op3val:0x7fc11fbb1cedaf9f; valaddr_reg:x3; val_offset:1701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1701*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x08b3a93e68164 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08f9ec7d021e2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x11fbb1cedaf9f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe08b3a93e68164; op2val:0xbfd08f9ec7d021e2;
op3val:0x7fc11fbb1cedaf9f; valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x08b3a93e68164 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08f9ec7d021e2 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x11fbb1cedaf9f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe08b3a93e68164; op2val:0xbfd08f9ec7d021e2;
op3val:0x7fc11fbb1cedaf9f; valaddr_reg:x3; val_offset:1707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1707*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0949924914346 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0588b20ed1e69 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0f05a9bebbacf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0949924914346; op2val:0xbff0588b20ed1e69;
op3val:0x7fe0f05a9bebbacf; valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0949924914346 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0588b20ed1e69 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0f05a9bebbacf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0949924914346; op2val:0xbff0588b20ed1e69;
op3val:0x7fe0f05a9bebbacf; valaddr_reg:x3; val_offset:1713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1713*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0949924914346 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0588b20ed1e69 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0f05a9bebbacf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0949924914346; op2val:0xbff0588b20ed1e69;
op3val:0x7fe0f05a9bebbacf; valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0949924914346 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0588b20ed1e69 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0f05a9bebbacf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0949924914346; op2val:0xbff0588b20ed1e69;
op3val:0x7fe0f05a9bebbacf; valaddr_reg:x3; val_offset:1719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1719*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0949924914346 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0588b20ed1e69 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0f05a9bebbacf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0949924914346; op2val:0xbff0588b20ed1e69;
op3val:0x7fe0f05a9bebbacf; valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ca5b7900ea57 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7a69ea0a9f7a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d1bd69d9f548 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ca5b7900ea57; op2val:0xbff7a69ea0a9f7a6;
op3val:0x7fe8d1bd69d9f548; valaddr_reg:x3; val_offset:1725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1725*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ca5b7900ea57 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7a69ea0a9f7a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d1bd69d9f548 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ca5b7900ea57; op2val:0xbff7a69ea0a9f7a6;
op3val:0x7fe8d1bd69d9f548; valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ca5b7900ea57 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7a69ea0a9f7a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d1bd69d9f548 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ca5b7900ea57; op2val:0xbff7a69ea0a9f7a6;
op3val:0x7fe8d1bd69d9f548; valaddr_reg:x3; val_offset:1731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1731*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ca5b7900ea57 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7a69ea0a9f7a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d1bd69d9f548 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ca5b7900ea57; op2val:0xbff7a69ea0a9f7a6;
op3val:0x7fe8d1bd69d9f548; valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ca5b7900ea57 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7a69ea0a9f7a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8d1bd69d9f548 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ca5b7900ea57; op2val:0xbff7a69ea0a9f7a6;
op3val:0x7fe8d1bd69d9f548; valaddr_reg:x3; val_offset:1737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1737*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1126a3ad5051a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4293c5830a884 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x583045ce8982d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1126a3ad5051a; op2val:0xbfe4293c5830a884;
op3val:0x7fd583045ce8982d; valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1126a3ad5051a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4293c5830a884 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x583045ce8982d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1126a3ad5051a; op2val:0xbfe4293c5830a884;
op3val:0x7fd583045ce8982d; valaddr_reg:x3; val_offset:1743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1743*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1126a3ad5051a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4293c5830a884 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x583045ce8982d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1126a3ad5051a; op2val:0xbfe4293c5830a884;
op3val:0x7fd583045ce8982d; valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1126a3ad5051a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4293c5830a884 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x583045ce8982d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1126a3ad5051a; op2val:0xbfe4293c5830a884;
op3val:0x7fd583045ce8982d; valaddr_reg:x3; val_offset:1749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1749*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1126a3ad5051a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4293c5830a884 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x583045ce8982d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1126a3ad5051a; op2val:0xbfe4293c5830a884;
op3val:0x7fd583045ce8982d; valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1415193812551 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x41cdfb6a8087a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b0c98a80bf69 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1415193812551; op2val:0xbff41cdfb6a8087a;
op3val:0x7fe5b0c98a80bf69; valaddr_reg:x3; val_offset:1755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1755*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1415193812551 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x41cdfb6a8087a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b0c98a80bf69 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1415193812551; op2val:0xbff41cdfb6a8087a;
op3val:0x7fe5b0c98a80bf69; valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1415193812551 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x41cdfb6a8087a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b0c98a80bf69 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1415193812551; op2val:0xbff41cdfb6a8087a;
op3val:0x7fe5b0c98a80bf69; valaddr_reg:x3; val_offset:1761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1761*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1415193812551 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x41cdfb6a8087a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b0c98a80bf69 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1415193812551; op2val:0xbff41cdfb6a8087a;
op3val:0x7fe5b0c98a80bf69; valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1415193812551 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x41cdfb6a8087a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b0c98a80bf69 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1415193812551; op2val:0xbff41cdfb6a8087a;
op3val:0x7fe5b0c98a80bf69; valaddr_reg:x3; val_offset:1767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1767*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1667d2c686bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e3570e2acd1c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25db9e8ff508c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1667d2c686bf9; op2val:0xbff0e3570e2acd1c;
op3val:0x7fe25db9e8ff508c; valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1667d2c686bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e3570e2acd1c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25db9e8ff508c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1667d2c686bf9; op2val:0xbff0e3570e2acd1c;
op3val:0x7fe25db9e8ff508c; valaddr_reg:x3; val_offset:1773*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1773*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1667d2c686bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e3570e2acd1c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25db9e8ff508c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1667d2c686bf9; op2val:0xbff0e3570e2acd1c;
op3val:0x7fe25db9e8ff508c; valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1667d2c686bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e3570e2acd1c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25db9e8ff508c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1667d2c686bf9; op2val:0xbff0e3570e2acd1c;
op3val:0x7fe25db9e8ff508c; valaddr_reg:x3; val_offset:1779*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1779*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1667d2c686bf9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e3570e2acd1c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x25db9e8ff508c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1667d2c686bf9; op2val:0xbff0e3570e2acd1c;
op3val:0x7fe25db9e8ff508c; valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x171d1e85e4878 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25742c389cbb5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3ff2fd57cdba5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe171d1e85e4878; op2val:0xbfe25742c389cbb5;
op3val:0x7fd3ff2fd57cdba5; valaddr_reg:x3; val_offset:1785*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1785*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x171d1e85e4878 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25742c389cbb5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3ff2fd57cdba5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe171d1e85e4878; op2val:0xbfe25742c389cbb5;
op3val:0x7fd3ff2fd57cdba5; valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x171d1e85e4878 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25742c389cbb5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3ff2fd57cdba5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe171d1e85e4878; op2val:0xbfe25742c389cbb5;
op3val:0x7fd3ff2fd57cdba5; valaddr_reg:x3; val_offset:1791*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1791*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x171d1e85e4878 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25742c389cbb5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3ff2fd57cdba5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe171d1e85e4878; op2val:0xbfe25742c389cbb5;
op3val:0x7fd3ff2fd57cdba5; valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x171d1e85e4878 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25742c389cbb5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3ff2fd57cdba5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe171d1e85e4878; op2val:0xbfe25742c389cbb5;
op3val:0x7fd3ff2fd57cdba5; valaddr_reg:x3; val_offset:1797*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1797*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x17273060cf383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3eb1e847178eb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b84ad79bdbd5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe17273060cf383; op2val:0xbfe3eb1e847178eb;
op3val:0x7fd5b84ad79bdbd5; valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x17273060cf383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3eb1e847178eb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b84ad79bdbd5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe17273060cf383; op2val:0xbfe3eb1e847178eb;
op3val:0x7fd5b84ad79bdbd5; valaddr_reg:x3; val_offset:1803*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1803*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x17273060cf383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3eb1e847178eb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b84ad79bdbd5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe17273060cf383; op2val:0xbfe3eb1e847178eb;
op3val:0x7fd5b84ad79bdbd5; valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x17273060cf383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3eb1e847178eb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b84ad79bdbd5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe17273060cf383; op2val:0xbfe3eb1e847178eb;
op3val:0x7fd5b84ad79bdbd5; valaddr_reg:x3; val_offset:1809*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1809*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x17273060cf383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3eb1e847178eb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b84ad79bdbd5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe17273060cf383; op2val:0xbfe3eb1e847178eb;
op3val:0x7fd5b84ad79bdbd5; valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c1aa7e3314b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1e717678a9551 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3de3b2ce1e281 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c1aa7e3314b1; op2val:0xbff1e717678a9551;
op3val:0x7fe3de3b2ce1e281; valaddr_reg:x3; val_offset:1815*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1815*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c1aa7e3314b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1e717678a9551 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3de3b2ce1e281 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c1aa7e3314b1; op2val:0xbff1e717678a9551;
op3val:0x7fe3de3b2ce1e281; valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c1aa7e3314b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1e717678a9551 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3de3b2ce1e281 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c1aa7e3314b1; op2val:0xbff1e717678a9551;
op3val:0x7fe3de3b2ce1e281; valaddr_reg:x3; val_offset:1821*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1821*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c1aa7e3314b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1e717678a9551 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3de3b2ce1e281 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c1aa7e3314b1; op2val:0xbff1e717678a9551;
op3val:0x7fe3de3b2ce1e281; valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c1aa7e3314b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1e717678a9551 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3de3b2ce1e281 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c1aa7e3314b1; op2val:0xbff1e717678a9551;
op3val:0x7fe3de3b2ce1e281; valaddr_reg:x3; val_offset:1827*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1827*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2687ea87931ce and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4a5ace34f346b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7c13ad5981860 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2687ea87931ce; op2val:0xbff4a5ace34f346b;
op3val:0x7fe7c13ad5981860; valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2687ea87931ce and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4a5ace34f346b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7c13ad5981860 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2687ea87931ce; op2val:0xbff4a5ace34f346b;
op3val:0x7fe7c13ad5981860; valaddr_reg:x3; val_offset:1833*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1833*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2687ea87931ce and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4a5ace34f346b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7c13ad5981860 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2687ea87931ce; op2val:0xbff4a5ace34f346b;
op3val:0x7fe7c13ad5981860; valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2687ea87931ce and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4a5ace34f346b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7c13ad5981860 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2687ea87931ce; op2val:0xbff4a5ace34f346b;
op3val:0x7fe7c13ad5981860; valaddr_reg:x3; val_offset:1839*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1839*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2687ea87931ce and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4a5ace34f346b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7c13ad5981860 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2687ea87931ce; op2val:0xbff4a5ace34f346b;
op3val:0x7fe7c13ad5981860; valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x296b3b52c3a78 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa652491e8ca3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeaa65d1680e97 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe296b3b52c3a78; op2val:0xbffa652491e8ca3f;
op3val:0x7feeaa65d1680e97; valaddr_reg:x3; val_offset:1845*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1845*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x296b3b52c3a78 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa652491e8ca3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeaa65d1680e97 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe296b3b52c3a78; op2val:0xbffa652491e8ca3f;
op3val:0x7feeaa65d1680e97; valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x296b3b52c3a78 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa652491e8ca3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeaa65d1680e97 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe296b3b52c3a78; op2val:0xbffa652491e8ca3f;
op3val:0x7feeaa65d1680e97; valaddr_reg:x3; val_offset:1851*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1851*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x296b3b52c3a78 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa652491e8ca3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeaa65d1680e97 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe296b3b52c3a78; op2val:0xbffa652491e8ca3f;
op3val:0x7feeaa65d1680e97; valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x296b3b52c3a78 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa652491e8ca3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeaa65d1680e97 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe296b3b52c3a78; op2val:0xbffa652491e8ca3f;
op3val:0x7feeaa65d1680e97; valaddr_reg:x3; val_offset:1857*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1857*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f6cc7ff8e7a5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef4446de4f279 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x258221cdc09b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f6cc7ff8e7a5; op2val:0xbfeef4446de4f279;
op3val:0x7fe258221cdc09b9; valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f6cc7ff8e7a5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef4446de4f279 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x258221cdc09b9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f6cc7ff8e7a5; op2val:0xbfeef4446de4f279;
op3val:0x7fe258221cdc09b9; valaddr_reg:x3; val_offset:1863*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1863*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f6cc7ff8e7a5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef4446de4f279 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x258221cdc09b9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f6cc7ff8e7a5; op2val:0xbfeef4446de4f279;
op3val:0x7fe258221cdc09b9; valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f6cc7ff8e7a5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef4446de4f279 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x258221cdc09b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f6cc7ff8e7a5; op2val:0xbfeef4446de4f279;
op3val:0x7fe258221cdc09b9; valaddr_reg:x3; val_offset:1869*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1869*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2f6cc7ff8e7a5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef4446de4f279 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x258221cdc09b9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2f6cc7ff8e7a5; op2val:0xbfeef4446de4f279;
op3val:0x7fe258221cdc09b9; valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x301b8dd6015ba and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x642342f8435b6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa7103490036bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe301b8dd6015ba; op2val:0xbff642342f8435b6;
op3val:0x7fea7103490036bf; valaddr_reg:x3; val_offset:1875*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1875*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x301b8dd6015ba and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x642342f8435b6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa7103490036bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe301b8dd6015ba; op2val:0xbff642342f8435b6;
op3val:0x7fea7103490036bf; valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x301b8dd6015ba and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x642342f8435b6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa7103490036bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe301b8dd6015ba; op2val:0xbff642342f8435b6;
op3val:0x7fea7103490036bf; valaddr_reg:x3; val_offset:1881*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1881*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x301b8dd6015ba and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x642342f8435b6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa7103490036bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe301b8dd6015ba; op2val:0xbff642342f8435b6;
op3val:0x7fea7103490036bf; valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x301b8dd6015ba and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x642342f8435b6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa7103490036bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe301b8dd6015ba; op2val:0xbff642342f8435b6;
op3val:0x7fea7103490036bf; valaddr_reg:x3; val_offset:1887*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1887*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x301d64dd062a4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9b50e7b846e96 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe89f4d63cd58f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe301d64dd062a4; op2val:0xbfd9b50e7b846e96;
op3val:0x7fce89f4d63cd58f; valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x301d64dd062a4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9b50e7b846e96 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe89f4d63cd58f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe301d64dd062a4; op2val:0xbfd9b50e7b846e96;
op3val:0x7fce89f4d63cd58f; valaddr_reg:x3; val_offset:1893*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1893*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x301d64dd062a4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9b50e7b846e96 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe89f4d63cd58f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe301d64dd062a4; op2val:0xbfd9b50e7b846e96;
op3val:0x7fce89f4d63cd58f; valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x301d64dd062a4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9b50e7b846e96 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe89f4d63cd58f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe301d64dd062a4; op2val:0xbfd9b50e7b846e96;
op3val:0x7fce89f4d63cd58f; valaddr_reg:x3; val_offset:1899*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1899*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x301d64dd062a4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9b50e7b846e96 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe89f4d63cd58f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe301d64dd062a4; op2val:0xbfd9b50e7b846e96;
op3val:0x7fce89f4d63cd58f; valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x310e01660348e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbe8d71c96d67e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0a0f795ed9f25 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe310e01660348e; op2val:0xbfdbe8d71c96d67e;
op3val:0x7fd0a0f795ed9f25; valaddr_reg:x3; val_offset:1905*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1905*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x310e01660348e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbe8d71c96d67e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0a0f795ed9f25 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe310e01660348e; op2val:0xbfdbe8d71c96d67e;
op3val:0x7fd0a0f795ed9f25; valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x310e01660348e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbe8d71c96d67e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0a0f795ed9f25 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe310e01660348e; op2val:0xbfdbe8d71c96d67e;
op3val:0x7fd0a0f795ed9f25; valaddr_reg:x3; val_offset:1911*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1911*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x310e01660348e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbe8d71c96d67e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0a0f795ed9f25 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe310e01660348e; op2val:0xbfdbe8d71c96d67e;
op3val:0x7fd0a0f795ed9f25; valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x310e01660348e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbe8d71c96d67e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0a0f795ed9f25 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe310e01660348e; op2val:0xbfdbe8d71c96d67e;
op3val:0x7fd0a0f795ed9f25; valaddr_reg:x3; val_offset:1917*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1917*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x311ebd187eea8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe47093103feca and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x20b2251e87ae3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe311ebd187eea8; op2val:0xbfee47093103feca;
op3val:0x7fe20b2251e87ae3; valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x311ebd187eea8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe47093103feca and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x20b2251e87ae3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe311ebd187eea8; op2val:0xbfee47093103feca;
op3val:0x7fe20b2251e87ae3; valaddr_reg:x3; val_offset:1923*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1923*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x311ebd187eea8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe47093103feca and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x20b2251e87ae3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe311ebd187eea8; op2val:0xbfee47093103feca;
op3val:0x7fe20b2251e87ae3; valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x311ebd187eea8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe47093103feca and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x20b2251e87ae3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe311ebd187eea8; op2val:0xbfee47093103feca;
op3val:0x7fe20b2251e87ae3; valaddr_reg:x3; val_offset:1929*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1929*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x311ebd187eea8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe47093103feca and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x20b2251e87ae3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe311ebd187eea8; op2val:0xbfee47093103feca;
op3val:0x7fe20b2251e87ae3; valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x334fb99f530be and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa19f8d728d0fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf55465ad3c4e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe334fb99f530be; op2val:0xbfea19f8d728d0fc;
op3val:0x7fdf55465ad3c4e3; valaddr_reg:x3; val_offset:1935*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1935*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x334fb99f530be and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa19f8d728d0fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf55465ad3c4e3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe334fb99f530be; op2val:0xbfea19f8d728d0fc;
op3val:0x7fdf55465ad3c4e3; valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x334fb99f530be and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa19f8d728d0fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf55465ad3c4e3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe334fb99f530be; op2val:0xbfea19f8d728d0fc;
op3val:0x7fdf55465ad3c4e3; valaddr_reg:x3; val_offset:1941*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1941*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x334fb99f530be and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa19f8d728d0fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf55465ad3c4e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe334fb99f530be; op2val:0xbfea19f8d728d0fc;
op3val:0x7fdf55465ad3c4e3; valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x334fb99f530be and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa19f8d728d0fc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf55465ad3c4e3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe334fb99f530be; op2val:0xbfea19f8d728d0fc;
op3val:0x7fdf55465ad3c4e3; valaddr_reg:x3; val_offset:1947*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1947*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3750b3ff84d89 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8faa379b97e8e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe605c7c255007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3750b3ff84d89; op2val:0xbfe8faa379b97e8e;
op3val:0x7fde605c7c255007; valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3750b3ff84d89 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8faa379b97e8e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe605c7c255007 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3750b3ff84d89; op2val:0xbfe8faa379b97e8e;
op3val:0x7fde605c7c255007; valaddr_reg:x3; val_offset:1953*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1953*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3750b3ff84d89 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8faa379b97e8e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe605c7c255007 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3750b3ff84d89; op2val:0xbfe8faa379b97e8e;
op3val:0x7fde605c7c255007; valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3750b3ff84d89 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8faa379b97e8e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe605c7c255007 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3750b3ff84d89; op2val:0xbfe8faa379b97e8e;
op3val:0x7fde605c7c255007; valaddr_reg:x3; val_offset:1959*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1959*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3750b3ff84d89 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8faa379b97e8e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe605c7c255007 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3750b3ff84d89; op2val:0xbfe8faa379b97e8e;
op3val:0x7fde605c7c255007; valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x379bb745d02d9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x276161f0e5912 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x678af9691e349 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe379bb745d02d9; op2val:0xbfe276161f0e5912;
op3val:0x7fd678af9691e349; valaddr_reg:x3; val_offset:1965*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1965*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x379bb745d02d9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x276161f0e5912 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x678af9691e349 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe379bb745d02d9; op2val:0xbfe276161f0e5912;
op3val:0x7fd678af9691e349; valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x379bb745d02d9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x276161f0e5912 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x678af9691e349 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe379bb745d02d9; op2val:0xbfe276161f0e5912;
op3val:0x7fd678af9691e349; valaddr_reg:x3; val_offset:1971*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1971*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x379bb745d02d9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x276161f0e5912 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x678af9691e349 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe379bb745d02d9; op2val:0xbfe276161f0e5912;
op3val:0x7fd678af9691e349; valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x379bb745d02d9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x276161f0e5912 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x678af9691e349 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe379bb745d02d9; op2val:0xbfe276161f0e5912;
op3val:0x7fd678af9691e349; valaddr_reg:x3; val_offset:1977*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1977*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x38be631735417 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x80c60b94db466 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd60f86097c097 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe38be631735417; op2val:0xbff80c60b94db466;
op3val:0x7fed60f86097c097; valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x38be631735417 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x80c60b94db466 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd60f86097c097 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe38be631735417; op2val:0xbff80c60b94db466;
op3val:0x7fed60f86097c097; valaddr_reg:x3; val_offset:1983*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1983*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x38be631735417 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x80c60b94db466 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd60f86097c097 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe38be631735417; op2val:0xbff80c60b94db466;
op3val:0x7fed60f86097c097; valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x38be631735417 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x80c60b94db466 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd60f86097c097 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe38be631735417; op2val:0xbff80c60b94db466;
op3val:0x7fed60f86097c097; valaddr_reg:x3; val_offset:1989*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1989*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x38be631735417 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x80c60b94db466 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd60f86097c097 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe38be631735417; op2val:0xbff80c60b94db466;
op3val:0x7fed60f86097c097; valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x393d0e849b454 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xede60a738746b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2e2a074d14562 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe393d0e849b454; op2val:0xbfeede60a738746b;
op3val:0x7fe2e2a074d14562; valaddr_reg:x3; val_offset:1995*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1995*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x393d0e849b454 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xede60a738746b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2e2a074d14562 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe393d0e849b454; op2val:0xbfeede60a738746b;
op3val:0x7fe2e2a074d14562; valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x393d0e849b454 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xede60a738746b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2e2a074d14562 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe393d0e849b454; op2val:0xbfeede60a738746b;
op3val:0x7fe2e2a074d14562; valaddr_reg:x3; val_offset:2001*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2001*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x393d0e849b454 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xede60a738746b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2e2a074d14562 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe393d0e849b454; op2val:0xbfeede60a738746b;
op3val:0x7fe2e2a074d14562; valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x393d0e849b454 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xede60a738746b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2e2a074d14562 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe393d0e849b454; op2val:0xbfeede60a738746b;
op3val:0x7fe2e2a074d14562; valaddr_reg:x3; val_offset:2007*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2007*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a25129349d98 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c80b9163e813 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x8463b8972f1cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a25129349d98; op2val:0xbfc3c80b9163e813;
op3val:0x7fb8463b8972f1cf; valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a25129349d98 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c80b9163e813 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x8463b8972f1cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a25129349d98; op2val:0xbfc3c80b9163e813;
op3val:0x7fb8463b8972f1cf; valaddr_reg:x3; val_offset:2013*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2013*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a25129349d98 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c80b9163e813 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x8463b8972f1cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a25129349d98; op2val:0xbfc3c80b9163e813;
op3val:0x7fb8463b8972f1cf; valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a25129349d98 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c80b9163e813 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x8463b8972f1cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a25129349d98; op2val:0xbfc3c80b9163e813;
op3val:0x7fb8463b8972f1cf; valaddr_reg:x3; val_offset:2019*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2019*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a25129349d98 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c80b9163e813 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x8463b8972f1cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a25129349d98; op2val:0xbfc3c80b9163e813;
op3val:0x7fb8463b8972f1cf; valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a3e67ed240bf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22dd2fe5ccaa5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x650a3465e4aff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a3e67ed240bf; op2val:0xbfe22dd2fe5ccaa5;
op3val:0x7fd650a3465e4aff; valaddr_reg:x3; val_offset:2025*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2025*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a3e67ed240bf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22dd2fe5ccaa5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x650a3465e4aff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a3e67ed240bf; op2val:0xbfe22dd2fe5ccaa5;
op3val:0x7fd650a3465e4aff; valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a3e67ed240bf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22dd2fe5ccaa5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x650a3465e4aff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a3e67ed240bf; op2val:0xbfe22dd2fe5ccaa5;
op3val:0x7fd650a3465e4aff; valaddr_reg:x3; val_offset:2031*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2031*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a3e67ed240bf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22dd2fe5ccaa5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x650a3465e4aff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a3e67ed240bf; op2val:0xbfe22dd2fe5ccaa5;
op3val:0x7fd650a3465e4aff; valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a3e67ed240bf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22dd2fe5ccaa5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x650a3465e4aff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a3e67ed240bf; op2val:0xbfe22dd2fe5ccaa5;
op3val:0x7fd650a3465e4aff; valaddr_reg:x3; val_offset:2037*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2037*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3af74e2285ea8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd46a833143262 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x202793535005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3af74e2285ea8; op2val:0xbfcd46a833143262;
op3val:0x7fc202793535005b; valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3af74e2285ea8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd46a833143262 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x202793535005b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3af74e2285ea8; op2val:0xbfcd46a833143262;
op3val:0x7fc202793535005b; valaddr_reg:x3; val_offset:2043*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2043*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3af74e2285ea8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd46a833143262 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x202793535005b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3af74e2285ea8; op2val:0xbfcd46a833143262;
op3val:0x7fc202793535005b; valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2046*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3af74e2285ea8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd46a833143262 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x202793535005b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3af74e2285ea8; op2val:0xbfcd46a833143262;
op3val:0x7fc202793535005b; valaddr_reg:x3; val_offset:2049*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2049*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3af74e2285ea8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd46a833143262 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x202793535005b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3af74e2285ea8; op2val:0xbfcd46a833143262;
op3val:0x7fc202793535005b; valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c22bc9c78300 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa43e2dae46a30 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x037ae321da893 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c22bc9c78300; op2val:0xbfca43e2dae46a30;
op3val:0x7fc037ae321da893; valaddr_reg:x3; val_offset:2055*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2055*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c22bc9c78300 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa43e2dae46a30 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x037ae321da893 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c22bc9c78300; op2val:0xbfca43e2dae46a30;
op3val:0x7fc037ae321da893; valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c22bc9c78300 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa43e2dae46a30 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x037ae321da893 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c22bc9c78300; op2val:0xbfca43e2dae46a30;
op3val:0x7fc037ae321da893; valaddr_reg:x3; val_offset:2061*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2061*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c22bc9c78300 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa43e2dae46a30 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x037ae321da893 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c22bc9c78300; op2val:0xbfca43e2dae46a30;
op3val:0x7fc037ae321da893; valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c22bc9c78300 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa43e2dae46a30 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x037ae321da893 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3c22bc9c78300; op2val:0xbfca43e2dae46a30;
op3val:0x7fc037ae321da893; valaddr_reg:x3; val_offset:2067*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2067*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d2a90fafd5bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x62487dae23696 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb6eeac2960889 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d2a90fafd5bc; op2val:0xbfe62487dae23696;
op3val:0x7fdb6eeac2960889; valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d2a90fafd5bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x62487dae23696 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb6eeac2960889 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d2a90fafd5bc; op2val:0xbfe62487dae23696;
op3val:0x7fdb6eeac2960889; valaddr_reg:x3; val_offset:2073*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2073*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d2a90fafd5bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x62487dae23696 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb6eeac2960889 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d2a90fafd5bc; op2val:0xbfe62487dae23696;
op3val:0x7fdb6eeac2960889; valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d2a90fafd5bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x62487dae23696 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb6eeac2960889 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d2a90fafd5bc; op2val:0xbfe62487dae23696;
op3val:0x7fdb6eeac2960889; valaddr_reg:x3; val_offset:2079*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2079*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d2a90fafd5bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x62487dae23696 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb6eeac2960889 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d2a90fafd5bc; op2val:0xbfe62487dae23696;
op3val:0x7fdb6eeac2960889; valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eabdfcda410e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x1eaf1be01e8cd and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x64ddfe38d7e3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eabdfcda410e; op2val:0xbfb1eaf1be01e8cd;
op3val:0x7fa64ddfe38d7e3f; valaddr_reg:x3; val_offset:2085*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2085*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eabdfcda410e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x1eaf1be01e8cd and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x64ddfe38d7e3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eabdfcda410e; op2val:0xbfb1eaf1be01e8cd;
op3val:0x7fa64ddfe38d7e3f; valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eabdfcda410e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x1eaf1be01e8cd and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x64ddfe38d7e3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eabdfcda410e; op2val:0xbfb1eaf1be01e8cd;
op3val:0x7fa64ddfe38d7e3f; valaddr_reg:x3; val_offset:2091*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2091*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eabdfcda410e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x1eaf1be01e8cd and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x64ddfe38d7e3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eabdfcda410e; op2val:0xbfb1eaf1be01e8cd;
op3val:0x7fa64ddfe38d7e3f; valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eabdfcda410e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x1eaf1be01e8cd and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x64ddfe38d7e3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eabdfcda410e; op2val:0xbfb1eaf1be01e8cd;
op3val:0x7fa64ddfe38d7e3f; valaddr_reg:x3; val_offset:2097*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2097*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eecf8905935f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30dc050910ea3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7bcb8116f23ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eecf8905935f; op2val:0xbff30dc050910ea3;
op3val:0x7fe7bcb8116f23ed; valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eecf8905935f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30dc050910ea3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7bcb8116f23ed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eecf8905935f; op2val:0xbff30dc050910ea3;
op3val:0x7fe7bcb8116f23ed; valaddr_reg:x3; val_offset:2103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2103*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eecf8905935f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30dc050910ea3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7bcb8116f23ed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eecf8905935f; op2val:0xbff30dc050910ea3;
op3val:0x7fe7bcb8116f23ed; valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eecf8905935f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30dc050910ea3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7bcb8116f23ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eecf8905935f; op2val:0xbff30dc050910ea3;
op3val:0x7fe7bcb8116f23ed; valaddr_reg:x3; val_offset:2109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2109*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eecf8905935f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x30dc050910ea3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7bcb8116f23ed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3eecf8905935f; op2val:0xbff30dc050910ea3;
op3val:0x7fe7bcb8116f23ed; valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f5a77e367c1b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3df62857d4110 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ca619b77f06f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f5a77e367c1b; op2val:0xbff3df62857d4110;
op3val:0x7fe8ca619b77f06f; valaddr_reg:x3; val_offset:2115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2115*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f5a77e367c1b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3df62857d4110 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ca619b77f06f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f5a77e367c1b; op2val:0xbff3df62857d4110;
op3val:0x7fe8ca619b77f06f; valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f5a77e367c1b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3df62857d4110 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ca619b77f06f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f5a77e367c1b; op2val:0xbff3df62857d4110;
op3val:0x7fe8ca619b77f06f; valaddr_reg:x3; val_offset:2121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2121*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f5a77e367c1b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3df62857d4110 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ca619b77f06f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f5a77e367c1b; op2val:0xbff3df62857d4110;
op3val:0x7fe8ca619b77f06f; valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f5a77e367c1b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3df62857d4110 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ca619b77f06f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f5a77e367c1b; op2val:0xbff3df62857d4110;
op3val:0x7fe8ca619b77f06f; valaddr_reg:x3; val_offset:2127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2127*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3fe574580e3e3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2255d0d101768 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6acd29eafc0eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3fe574580e3e3; op2val:0xbfe2255d0d101768;
op3val:0x7fd6acd29eafc0eb; valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3fe574580e3e3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2255d0d101768 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6acd29eafc0eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3fe574580e3e3; op2val:0xbfe2255d0d101768;
op3val:0x7fd6acd29eafc0eb; valaddr_reg:x3; val_offset:2133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2133*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3fe574580e3e3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2255d0d101768 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6acd29eafc0eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3fe574580e3e3; op2val:0xbfe2255d0d101768;
op3val:0x7fd6acd29eafc0eb; valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3fe574580e3e3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2255d0d101768 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6acd29eafc0eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3fe574580e3e3; op2val:0xbfe2255d0d101768;
op3val:0x7fd6acd29eafc0eb; valaddr_reg:x3; val_offset:2139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2139*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3fe574580e3e3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2255d0d101768 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6acd29eafc0eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3fe574580e3e3; op2val:0xbfe2255d0d101768;
op3val:0x7fd6acd29eafc0eb; valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4248187818921 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6a7c06a5d1432 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc85615e41d666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4248187818921; op2val:0xbff6a7c06a5d1432;
op3val:0x7fec85615e41d666; valaddr_reg:x3; val_offset:2145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2145*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4248187818921 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6a7c06a5d1432 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc85615e41d666 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4248187818921; op2val:0xbff6a7c06a5d1432;
op3val:0x7fec85615e41d666; valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4248187818921 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6a7c06a5d1432 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc85615e41d666 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4248187818921; op2val:0xbff6a7c06a5d1432;
op3val:0x7fec85615e41d666; valaddr_reg:x3; val_offset:2151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2151*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4248187818921 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6a7c06a5d1432 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc85615e41d666 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4248187818921; op2val:0xbff6a7c06a5d1432;
op3val:0x7fec85615e41d666; valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4248187818921 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6a7c06a5d1432 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc85615e41d666 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4248187818921; op2val:0xbff6a7c06a5d1432;
op3val:0x7fec85615e41d666; valaddr_reg:x3; val_offset:2157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2157*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42c3b2396030c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x400115a8f3f08 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9375fcda7c10f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe42c3b2396030c; op2val:0xbff400115a8f3f08;
op3val:0x7fe9375fcda7c10f; valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42c3b2396030c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x400115a8f3f08 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9375fcda7c10f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe42c3b2396030c; op2val:0xbff400115a8f3f08;
op3val:0x7fe9375fcda7c10f; valaddr_reg:x3; val_offset:2163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2163*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42c3b2396030c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x400115a8f3f08 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9375fcda7c10f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe42c3b2396030c; op2val:0xbff400115a8f3f08;
op3val:0x7fe9375fcda7c10f; valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42c3b2396030c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x400115a8f3f08 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9375fcda7c10f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe42c3b2396030c; op2val:0xbff400115a8f3f08;
op3val:0x7fe9375fcda7c10f; valaddr_reg:x3; val_offset:2169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2169*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42c3b2396030c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x400115a8f3f08 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9375fcda7c10f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe42c3b2396030c; op2val:0xbff400115a8f3f08;
op3val:0x7fe9375fcda7c10f; valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4300c22dfb496 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0fcb563875381 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x56ee5bf224c4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4300c22dfb496; op2val:0xbfb0fcb563875381;
op3val:0x7fa56ee5bf224c4f; valaddr_reg:x3; val_offset:2175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2175*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4300c22dfb496 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0fcb563875381 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x56ee5bf224c4f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4300c22dfb496; op2val:0xbfb0fcb563875381;
op3val:0x7fa56ee5bf224c4f; valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4300c22dfb496 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0fcb563875381 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x56ee5bf224c4f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4300c22dfb496; op2val:0xbfb0fcb563875381;
op3val:0x7fa56ee5bf224c4f; valaddr_reg:x3; val_offset:2181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2181*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4300c22dfb496 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0fcb563875381 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x56ee5bf224c4f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4300c22dfb496; op2val:0xbfb0fcb563875381;
op3val:0x7fa56ee5bf224c4f; valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4300c22dfb496 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0fcb563875381 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x56ee5bf224c4f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4300c22dfb496; op2val:0xbfb0fcb563875381;
op3val:0x7fa56ee5bf224c4f; valaddr_reg:x3; val_offset:2187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2187*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x46136351533f7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x219562feed3b5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x70da2a7fbebd4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe46136351533f7; op2val:0xbff219562feed3b5;
op3val:0x7fe70da2a7fbebd4; valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x46136351533f7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x219562feed3b5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x70da2a7fbebd4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe46136351533f7; op2val:0xbff219562feed3b5;
op3val:0x7fe70da2a7fbebd4; valaddr_reg:x3; val_offset:2193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2193*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x46136351533f7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x219562feed3b5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x70da2a7fbebd4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe46136351533f7; op2val:0xbff219562feed3b5;
op3val:0x7fe70da2a7fbebd4; valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x46136351533f7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x219562feed3b5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x70da2a7fbebd4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe46136351533f7; op2val:0xbff219562feed3b5;
op3val:0x7fe70da2a7fbebd4; valaddr_reg:x3; val_offset:2199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2199*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x46136351533f7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x219562feed3b5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x70da2a7fbebd4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe46136351533f7; op2val:0xbff219562feed3b5;
op3val:0x7fe70da2a7fbebd4; valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a2d44f743484 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf6e0ad04fbde and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x352c50b85cbad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a2d44f743484; op2val:0xbfedf6e0ad04fbde;
op3val:0x7fe352c50b85cbad; valaddr_reg:x3; val_offset:2205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2205*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a2d44f743484 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf6e0ad04fbde and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x352c50b85cbad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a2d44f743484; op2val:0xbfedf6e0ad04fbde;
op3val:0x7fe352c50b85cbad; valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a2d44f743484 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf6e0ad04fbde and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x352c50b85cbad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a2d44f743484; op2val:0xbfedf6e0ad04fbde;
op3val:0x7fe352c50b85cbad; valaddr_reg:x3; val_offset:2211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2211*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a2d44f743484 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf6e0ad04fbde and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x352c50b85cbad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a2d44f743484; op2val:0xbfedf6e0ad04fbde;
op3val:0x7fe352c50b85cbad; valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a2d44f743484 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf6e0ad04fbde and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x352c50b85cbad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a2d44f743484; op2val:0xbfedf6e0ad04fbde;
op3val:0x7fe352c50b85cbad; valaddr_reg:x3; val_offset:2217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2217*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a9e1874c223f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x798381c88996d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe78ca8871d2d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a9e1874c223f; op2val:0xbff798381c88996d;
op3val:0x7fee78ca8871d2d9; valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a9e1874c223f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x798381c88996d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe78ca8871d2d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a9e1874c223f; op2val:0xbff798381c88996d;
op3val:0x7fee78ca8871d2d9; valaddr_reg:x3; val_offset:2223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2223*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a9e1874c223f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x798381c88996d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe78ca8871d2d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a9e1874c223f; op2val:0xbff798381c88996d;
op3val:0x7fee78ca8871d2d9; valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a9e1874c223f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x798381c88996d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe78ca8871d2d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a9e1874c223f; op2val:0xbff798381c88996d;
op3val:0x7fee78ca8871d2d9; valaddr_reg:x3; val_offset:2229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2229*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a9e1874c223f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x798381c88996d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe78ca8871d2d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a9e1874c223f; op2val:0xbff798381c88996d;
op3val:0x7fee78ca8871d2d9; valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b7cdaeb1ce31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3b62b1f2cbf86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x98626d96d20d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b7cdaeb1ce31; op2val:0xbff3b62b1f2cbf86;
op3val:0x7fe98626d96d20d9; valaddr_reg:x3; val_offset:2235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2235*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b7cdaeb1ce31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3b62b1f2cbf86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x98626d96d20d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b7cdaeb1ce31; op2val:0xbff3b62b1f2cbf86;
op3val:0x7fe98626d96d20d9; valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b7cdaeb1ce31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3b62b1f2cbf86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x98626d96d20d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b7cdaeb1ce31; op2val:0xbff3b62b1f2cbf86;
op3val:0x7fe98626d96d20d9; valaddr_reg:x3; val_offset:2241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2241*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b7cdaeb1ce31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3b62b1f2cbf86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x98626d96d20d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b7cdaeb1ce31; op2val:0xbff3b62b1f2cbf86;
op3val:0x7fe98626d96d20d9; valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b7cdaeb1ce31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3b62b1f2cbf86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x98626d96d20d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b7cdaeb1ce31; op2val:0xbff3b62b1f2cbf86;
op3val:0x7fe98626d96d20d9; valaddr_reg:x3; val_offset:2247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2247*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4ca4730b6efdc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc9994a79146ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x294c603684405 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4ca4730b6efdc; op2val:0xbfec9994a79146ea;
op3val:0x7fe294c603684405; valaddr_reg:x3; val_offset:2250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2250*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4ca4730b6efdc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc9994a79146ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x294c603684405 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4ca4730b6efdc; op2val:0xbfec9994a79146ea;
op3val:0x7fe294c603684405; valaddr_reg:x3; val_offset:2253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2253*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4ca4730b6efdc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc9994a79146ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x294c603684405 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4ca4730b6efdc; op2val:0xbfec9994a79146ea;
op3val:0x7fe294c603684405; valaddr_reg:x3; val_offset:2256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2256*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4ca4730b6efdc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc9994a79146ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x294c603684405 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4ca4730b6efdc; op2val:0xbfec9994a79146ea;
op3val:0x7fe294c603684405; valaddr_reg:x3; val_offset:2259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2259*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4ca4730b6efdc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc9994a79146ea and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x294c603684405 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4ca4730b6efdc; op2val:0xbfec9994a79146ea;
op3val:0x7fe294c603684405; valaddr_reg:x3; val_offset:2262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2262*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x53fa39c232464 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x24dd586c91739 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84ef5e539092d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe53fa39c232464; op2val:0xbff24dd586c91739;
op3val:0x7fe84ef5e539092d; valaddr_reg:x3; val_offset:2265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2265*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x53fa39c232464 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x24dd586c91739 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84ef5e539092d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe53fa39c232464; op2val:0xbff24dd586c91739;
op3val:0x7fe84ef5e539092d; valaddr_reg:x3; val_offset:2268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2268*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x53fa39c232464 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x24dd586c91739 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84ef5e539092d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe53fa39c232464; op2val:0xbff24dd586c91739;
op3val:0x7fe84ef5e539092d; valaddr_reg:x3; val_offset:2271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2271*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x53fa39c232464 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x24dd586c91739 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84ef5e539092d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe53fa39c232464; op2val:0xbff24dd586c91739;
op3val:0x7fe84ef5e539092d; valaddr_reg:x3; val_offset:2274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2274*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x53fa39c232464 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x24dd586c91739 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x84ef5e539092d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe53fa39c232464; op2val:0xbff24dd586c91739;
op3val:0x7fe84ef5e539092d; valaddr_reg:x3; val_offset:2277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2277*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x54c3c93bee7ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x43b51c6a4029a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xaee41b26bdc31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe54c3c93bee7ca; op2val:0xbfe43b51c6a4029a;
op3val:0x7fdaee41b26bdc31; valaddr_reg:x3; val_offset:2280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2280*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x54c3c93bee7ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x43b51c6a4029a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xaee41b26bdc31 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe54c3c93bee7ca; op2val:0xbfe43b51c6a4029a;
op3val:0x7fdaee41b26bdc31; valaddr_reg:x3; val_offset:2283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2283*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x54c3c93bee7ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x43b51c6a4029a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xaee41b26bdc31 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe54c3c93bee7ca; op2val:0xbfe43b51c6a4029a;
op3val:0x7fdaee41b26bdc31; valaddr_reg:x3; val_offset:2286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2286*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x54c3c93bee7ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x43b51c6a4029a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xaee41b26bdc31 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe54c3c93bee7ca; op2val:0xbfe43b51c6a4029a;
op3val:0x7fdaee41b26bdc31; valaddr_reg:x3; val_offset:2289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2289*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x54c3c93bee7ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x43b51c6a4029a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xaee41b26bdc31 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe54c3c93bee7ca; op2val:0xbfe43b51c6a4029a;
op3val:0x7fdaee41b26bdc31; valaddr_reg:x3; val_offset:2292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2292*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60db7dd3cba12 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x723e350962bf4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfe52fa1ef67a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe60db7dd3cba12; op2val:0xbff723e350962bf4;
op3val:0x7fefe52fa1ef67a1; valaddr_reg:x3; val_offset:2295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2295*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60db7dd3cba12 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x723e350962bf4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfe52fa1ef67a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe60db7dd3cba12; op2val:0xbff723e350962bf4;
op3val:0x7fefe52fa1ef67a1; valaddr_reg:x3; val_offset:2298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2298*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60db7dd3cba12 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x723e350962bf4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfe52fa1ef67a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe60db7dd3cba12; op2val:0xbff723e350962bf4;
op3val:0x7fefe52fa1ef67a1; valaddr_reg:x3; val_offset:2301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2301*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60db7dd3cba12 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x723e350962bf4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfe52fa1ef67a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe60db7dd3cba12; op2val:0xbff723e350962bf4;
op3val:0x7fefe52fa1ef67a1; valaddr_reg:x3; val_offset:2304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2304*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60db7dd3cba12 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x723e350962bf4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfe52fa1ef67a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe60db7dd3cba12; op2val:0xbff723e350962bf4;
op3val:0x7fefe52fa1ef67a1; valaddr_reg:x3; val_offset:2307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2307*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x619bd20c99aa7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6646aaf5982ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeee1847dc4239 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe619bd20c99aa7; op2val:0xbff6646aaf5982ba;
op3val:0x7feeee1847dc4239; valaddr_reg:x3; val_offset:2310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2310*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x619bd20c99aa7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6646aaf5982ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeee1847dc4239 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe619bd20c99aa7; op2val:0xbff6646aaf5982ba;
op3val:0x7feeee1847dc4239; valaddr_reg:x3; val_offset:2313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2313*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x619bd20c99aa7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6646aaf5982ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeee1847dc4239 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe619bd20c99aa7; op2val:0xbff6646aaf5982ba;
op3val:0x7feeee1847dc4239; valaddr_reg:x3; val_offset:2316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2316*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x619bd20c99aa7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6646aaf5982ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeee1847dc4239 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe619bd20c99aa7; op2val:0xbff6646aaf5982ba;
op3val:0x7feeee1847dc4239; valaddr_reg:x3; val_offset:2319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2319*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x619bd20c99aa7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6646aaf5982ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xeee1847dc4239 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe619bd20c99aa7; op2val:0xbff6646aaf5982ba;
op3val:0x7feeee1847dc4239; valaddr_reg:x3; val_offset:2322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2322*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x620288c50ba92 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0a76ad4accd30 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x707abeeaef579 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe620288c50ba92; op2val:0xbff0a76ad4accd30;
op3val:0x7fe707abeeaef579; valaddr_reg:x3; val_offset:2325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2325*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x620288c50ba92 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0a76ad4accd30 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x707abeeaef579 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe620288c50ba92; op2val:0xbff0a76ad4accd30;
op3val:0x7fe707abeeaef579; valaddr_reg:x3; val_offset:2328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2328*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x620288c50ba92 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0a76ad4accd30 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x707abeeaef579 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe620288c50ba92; op2val:0xbff0a76ad4accd30;
op3val:0x7fe707abeeaef579; valaddr_reg:x3; val_offset:2331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2331*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x620288c50ba92 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0a76ad4accd30 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x707abeeaef579 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe620288c50ba92; op2val:0xbff0a76ad4accd30;
op3val:0x7fe707abeeaef579; valaddr_reg:x3; val_offset:2334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2334*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x620288c50ba92 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0a76ad4accd30 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x707abeeaef579 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe620288c50ba92; op2val:0xbff0a76ad4accd30;
op3val:0x7fe707abeeaef579; valaddr_reg:x3; val_offset:2337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2337*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63a56d71db193 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3f073cbea8835 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbb35314a82aa5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63a56d71db193; op2val:0xbfe3f073cbea8835;
op3val:0x7fdbb35314a82aa5; valaddr_reg:x3; val_offset:2340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2340*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63a56d71db193 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3f073cbea8835 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbb35314a82aa5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63a56d71db193; op2val:0xbfe3f073cbea8835;
op3val:0x7fdbb35314a82aa5; valaddr_reg:x3; val_offset:2343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2343*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63a56d71db193 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3f073cbea8835 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbb35314a82aa5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63a56d71db193; op2val:0xbfe3f073cbea8835;
op3val:0x7fdbb35314a82aa5; valaddr_reg:x3; val_offset:2346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2346*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63a56d71db193 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3f073cbea8835 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbb35314a82aa5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63a56d71db193; op2val:0xbfe3f073cbea8835;
op3val:0x7fdbb35314a82aa5; valaddr_reg:x3; val_offset:2349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2349*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63a56d71db193 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3f073cbea8835 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbb35314a82aa5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63a56d71db193; op2val:0xbfe3f073cbea8835;
op3val:0x7fdbb35314a82aa5; valaddr_reg:x3; val_offset:2352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2352*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6709ff5f25f26 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x1d95904baffc5 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x9087e47e5604f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6709ff5f25f26; op2val:0xbfb1d95904baffc5;
op3val:0x7fa9087e47e5604f; valaddr_reg:x3; val_offset:2355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2355*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6709ff5f25f26 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x1d95904baffc5 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x9087e47e5604f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6709ff5f25f26; op2val:0xbfb1d95904baffc5;
op3val:0x7fa9087e47e5604f; valaddr_reg:x3; val_offset:2358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2358*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6709ff5f25f26 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x1d95904baffc5 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x9087e47e5604f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6709ff5f25f26; op2val:0xbfb1d95904baffc5;
op3val:0x7fa9087e47e5604f; valaddr_reg:x3; val_offset:2361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2361*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6709ff5f25f26 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x1d95904baffc5 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x9087e47e5604f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6709ff5f25f26; op2val:0xbfb1d95904baffc5;
op3val:0x7fa9087e47e5604f; valaddr_reg:x3; val_offset:2364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2364*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6709ff5f25f26 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x1d95904baffc5 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x9087e47e5604f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6709ff5f25f26; op2val:0xbfb1d95904baffc5;
op3val:0x7fa9087e47e5604f; valaddr_reg:x3; val_offset:2367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2367*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68ca648b458d1 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4b53acb56a497 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd2f39d065486f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68ca648b458d1; op2val:0xbfb4b53acb56a497;
op3val:0x7fad2f39d065486f; valaddr_reg:x3; val_offset:2370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2370*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68ca648b458d1 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4b53acb56a497 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd2f39d065486f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68ca648b458d1; op2val:0xbfb4b53acb56a497;
op3val:0x7fad2f39d065486f; valaddr_reg:x3; val_offset:2373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2373*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68ca648b458d1 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4b53acb56a497 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd2f39d065486f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68ca648b458d1; op2val:0xbfb4b53acb56a497;
op3val:0x7fad2f39d065486f; valaddr_reg:x3; val_offset:2376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2376*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68ca648b458d1 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4b53acb56a497 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd2f39d065486f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68ca648b458d1; op2val:0xbfb4b53acb56a497;
op3val:0x7fad2f39d065486f; valaddr_reg:x3; val_offset:2379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2379*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x68ca648b458d1 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4b53acb56a497 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd2f39d065486f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe68ca648b458d1; op2val:0xbfb4b53acb56a497;
op3val:0x7fad2f39d065486f; valaddr_reg:x3; val_offset:2382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2382*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6a96ba7d02570 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc917be2f7ebb8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x43b459e986fea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6a96ba7d02570; op2val:0xbfec917be2f7ebb8;
op3val:0x7fe43b459e986fea; valaddr_reg:x3; val_offset:2385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2385*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6a96ba7d02570 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc917be2f7ebb8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x43b459e986fea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6a96ba7d02570; op2val:0xbfec917be2f7ebb8;
op3val:0x7fe43b459e986fea; valaddr_reg:x3; val_offset:2388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2388*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6a96ba7d02570 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc917be2f7ebb8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x43b459e986fea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6a96ba7d02570; op2val:0xbfec917be2f7ebb8;
op3val:0x7fe43b459e986fea; valaddr_reg:x3; val_offset:2391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2391*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6a96ba7d02570 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc917be2f7ebb8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x43b459e986fea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6a96ba7d02570; op2val:0xbfec917be2f7ebb8;
op3val:0x7fe43b459e986fea; valaddr_reg:x3; val_offset:2394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2394*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6a96ba7d02570 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc917be2f7ebb8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x43b459e986fea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6a96ba7d02570; op2val:0xbfec917be2f7ebb8;
op3val:0x7fe43b459e986fea; valaddr_reg:x3; val_offset:2397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2397*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6cc56079452a4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x82ff5dfc297a3 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x13b6bcfe7a433 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6cc56079452a4; op2val:0xbfc82ff5dfc297a3;
op3val:0x7fc13b6bcfe7a433; valaddr_reg:x3; val_offset:2400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2400*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6cc56079452a4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x82ff5dfc297a3 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x13b6bcfe7a433 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6cc56079452a4; op2val:0xbfc82ff5dfc297a3;
op3val:0x7fc13b6bcfe7a433; valaddr_reg:x3; val_offset:2403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2403*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6cc56079452a4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x82ff5dfc297a3 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x13b6bcfe7a433 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6cc56079452a4; op2val:0xbfc82ff5dfc297a3;
op3val:0x7fc13b6bcfe7a433; valaddr_reg:x3; val_offset:2406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2406*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6cc56079452a4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x82ff5dfc297a3 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x13b6bcfe7a433 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6cc56079452a4; op2val:0xbfc82ff5dfc297a3;
op3val:0x7fc13b6bcfe7a433; valaddr_reg:x3; val_offset:2409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2409*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6cc56079452a4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x82ff5dfc297a3 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x13b6bcfe7a433 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6cc56079452a4; op2val:0xbfc82ff5dfc297a3;
op3val:0x7fc13b6bcfe7a433; valaddr_reg:x3; val_offset:2412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2412*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6d352c81323cd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd62a44832769d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f5df615dcd80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6d352c81323cd; op2val:0xbfed62a44832769d;
op3val:0x7fe4f5df615dcd80; valaddr_reg:x3; val_offset:2415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2415*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6d352c81323cd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd62a44832769d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f5df615dcd80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6d352c81323cd; op2val:0xbfed62a44832769d;
op3val:0x7fe4f5df615dcd80; valaddr_reg:x3; val_offset:2418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2418*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6d352c81323cd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd62a44832769d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f5df615dcd80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6d352c81323cd; op2val:0xbfed62a44832769d;
op3val:0x7fe4f5df615dcd80; valaddr_reg:x3; val_offset:2421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2421*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6d352c81323cd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd62a44832769d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f5df615dcd80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6d352c81323cd; op2val:0xbfed62a44832769d;
op3val:0x7fe4f5df615dcd80; valaddr_reg:x3; val_offset:2424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2424*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6d352c81323cd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd62a44832769d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f5df615dcd80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6d352c81323cd; op2val:0xbfed62a44832769d;
op3val:0x7fe4f5df615dcd80; valaddr_reg:x3; val_offset:2427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2427*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x75f0e25aaa1ef and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xe1d2ba70c870b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5fe6b49de552b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe75f0e25aaa1ef; op2val:0xbfce1d2ba70c870b;
op3val:0x7fc5fe6b49de552b; valaddr_reg:x3; val_offset:2430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2430*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x75f0e25aaa1ef and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xe1d2ba70c870b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5fe6b49de552b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe75f0e25aaa1ef; op2val:0xbfce1d2ba70c870b;
op3val:0x7fc5fe6b49de552b; valaddr_reg:x3; val_offset:2433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2433*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x75f0e25aaa1ef and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xe1d2ba70c870b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5fe6b49de552b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe75f0e25aaa1ef; op2val:0xbfce1d2ba70c870b;
op3val:0x7fc5fe6b49de552b; valaddr_reg:x3; val_offset:2436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2436*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x75f0e25aaa1ef and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xe1d2ba70c870b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5fe6b49de552b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe75f0e25aaa1ef; op2val:0xbfce1d2ba70c870b;
op3val:0x7fc5fe6b49de552b; valaddr_reg:x3; val_offset:2439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2439*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x75f0e25aaa1ef and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xe1d2ba70c870b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5fe6b49de552b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe75f0e25aaa1ef; op2val:0xbfce1d2ba70c870b;
op3val:0x7fc5fe6b49de552b; valaddr_reg:x3; val_offset:2442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2442*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x769cb824195b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4c5284c35ebf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe64bff487f6af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe769cb824195b1; op2val:0xbff4c5284c35ebf9;
op3val:0x7fee64bff487f6af; valaddr_reg:x3; val_offset:2445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2445*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x769cb824195b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4c5284c35ebf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe64bff487f6af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe769cb824195b1; op2val:0xbff4c5284c35ebf9;
op3val:0x7fee64bff487f6af; valaddr_reg:x3; val_offset:2448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2448*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x769cb824195b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4c5284c35ebf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe64bff487f6af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe769cb824195b1; op2val:0xbff4c5284c35ebf9;
op3val:0x7fee64bff487f6af; valaddr_reg:x3; val_offset:2451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2451*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x769cb824195b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4c5284c35ebf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe64bff487f6af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe769cb824195b1; op2val:0xbff4c5284c35ebf9;
op3val:0x7fee64bff487f6af; valaddr_reg:x3; val_offset:2454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2454*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x769cb824195b1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4c5284c35ebf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe64bff487f6af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe769cb824195b1; op2val:0xbff4c5284c35ebf9;
op3val:0x7fee64bff487f6af; valaddr_reg:x3; val_offset:2457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2457*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7937acd8e3cbf and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf277f3bb58051 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6f3f872195323 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7937acd8e3cbf; op2val:0xbfcf277f3bb58051;
op3val:0x7fc6f3f872195323; valaddr_reg:x3; val_offset:2460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2460*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7937acd8e3cbf and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf277f3bb58051 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6f3f872195323 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7937acd8e3cbf; op2val:0xbfcf277f3bb58051;
op3val:0x7fc6f3f872195323; valaddr_reg:x3; val_offset:2463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2463*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7937acd8e3cbf and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf277f3bb58051 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6f3f872195323 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7937acd8e3cbf; op2val:0xbfcf277f3bb58051;
op3val:0x7fc6f3f872195323; valaddr_reg:x3; val_offset:2466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2466*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7937acd8e3cbf and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf277f3bb58051 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6f3f872195323 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7937acd8e3cbf; op2val:0xbfcf277f3bb58051;
op3val:0x7fc6f3f872195323; valaddr_reg:x3; val_offset:2469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2469*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7937acd8e3cbf and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf277f3bb58051 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6f3f872195323 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7937acd8e3cbf; op2val:0xbfcf277f3bb58051;
op3val:0x7fc6f3f872195323; valaddr_reg:x3; val_offset:2472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2472*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x79c481bc003f9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1f5a288a490a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa808585a245b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe79c481bc003f9; op2val:0xbff1f5a288a490a8;
op3val:0x7fea808585a245b3; valaddr_reg:x3; val_offset:2475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2475*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x79c481bc003f9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1f5a288a490a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa808585a245b3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe79c481bc003f9; op2val:0xbff1f5a288a490a8;
op3val:0x7fea808585a245b3; valaddr_reg:x3; val_offset:2478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2478*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x79c481bc003f9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1f5a288a490a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa808585a245b3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe79c481bc003f9; op2val:0xbff1f5a288a490a8;
op3val:0x7fea808585a245b3; valaddr_reg:x3; val_offset:2481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2481*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x79c481bc003f9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1f5a288a490a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa808585a245b3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe79c481bc003f9; op2val:0xbff1f5a288a490a8;
op3val:0x7fea808585a245b3; valaddr_reg:x3; val_offset:2484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2484*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x79c481bc003f9 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1f5a288a490a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa808585a245b3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe79c481bc003f9; op2val:0xbff1f5a288a490a8;
op3val:0x7fea808585a245b3; valaddr_reg:x3; val_offset:2487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2487*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ad3fc69bae31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3f1e4b04626ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd83afb61ec2c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ad3fc69bae31; op2val:0xbff3f1e4b04626ba;
op3val:0x7fed83afb61ec2c3; valaddr_reg:x3; val_offset:2490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2490*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ad3fc69bae31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3f1e4b04626ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd83afb61ec2c3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ad3fc69bae31; op2val:0xbff3f1e4b04626ba;
op3val:0x7fed83afb61ec2c3; valaddr_reg:x3; val_offset:2493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2493*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ad3fc69bae31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3f1e4b04626ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd83afb61ec2c3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ad3fc69bae31; op2val:0xbff3f1e4b04626ba;
op3val:0x7fed83afb61ec2c3; valaddr_reg:x3; val_offset:2496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2496*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ad3fc69bae31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3f1e4b04626ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd83afb61ec2c3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ad3fc69bae31; op2val:0xbff3f1e4b04626ba;
op3val:0x7fed83afb61ec2c3; valaddr_reg:x3; val_offset:2499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2499*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ad3fc69bae31 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3f1e4b04626ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd83afb61ec2c3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ad3fc69bae31; op2val:0xbff3f1e4b04626ba;
op3val:0x7fed83afb61ec2c3; valaddr_reg:x3; val_offset:2502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2502*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7af6414b8de5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x11974707ea538 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x95008c08199b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7af6414b8de5c; op2val:0xbfe11974707ea538;
op3val:0x7fd95008c08199b3; valaddr_reg:x3; val_offset:2505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2505*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7af6414b8de5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x11974707ea538 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x95008c08199b3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7af6414b8de5c; op2val:0xbfe11974707ea538;
op3val:0x7fd95008c08199b3; valaddr_reg:x3; val_offset:2508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2508*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7af6414b8de5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x11974707ea538 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x95008c08199b3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7af6414b8de5c; op2val:0xbfe11974707ea538;
op3val:0x7fd95008c08199b3; valaddr_reg:x3; val_offset:2511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2511*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7af6414b8de5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x11974707ea538 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x95008c08199b3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7af6414b8de5c; op2val:0xbfe11974707ea538;
op3val:0x7fd95008c08199b3; valaddr_reg:x3; val_offset:2514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2514*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7af6414b8de5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x11974707ea538 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x95008c08199b3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7af6414b8de5c; op2val:0xbfe11974707ea538;
op3val:0x7fd95008c08199b3; valaddr_reg:x3; val_offset:2517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2517*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ca8863947b9a and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x458a57f4c0c1e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe40fa80847cb7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ca8863947b9a; op2val:0xbfc458a57f4c0c1e;
op3val:0x7fbe40fa80847cb7; valaddr_reg:x3; val_offset:2520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2520*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ca8863947b9a and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x458a57f4c0c1e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe40fa80847cb7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ca8863947b9a; op2val:0xbfc458a57f4c0c1e;
op3val:0x7fbe40fa80847cb7; valaddr_reg:x3; val_offset:2523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2523*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ca8863947b9a and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x458a57f4c0c1e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe40fa80847cb7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ca8863947b9a; op2val:0xbfc458a57f4c0c1e;
op3val:0x7fbe40fa80847cb7; valaddr_reg:x3; val_offset:2526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2526*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ca8863947b9a and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x458a57f4c0c1e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe40fa80847cb7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ca8863947b9a; op2val:0xbfc458a57f4c0c1e;
op3val:0x7fbe40fa80847cb7; valaddr_reg:x3; val_offset:2529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2529*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7ca8863947b9a and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x458a57f4c0c1e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe40fa80847cb7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7ca8863947b9a; op2val:0xbfc458a57f4c0c1e;
op3val:0x7fbe40fa80847cb7; valaddr_reg:x3; val_offset:2532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2532*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7d72e47402429 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x960529f3b1939 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2e7df4087a8bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7d72e47402429; op2val:0xbfe960529f3b1939;
op3val:0x7fe2e7df4087a8bb; valaddr_reg:x3; val_offset:2535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2535*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7d72e47402429 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x960529f3b1939 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2e7df4087a8bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7d72e47402429; op2val:0xbfe960529f3b1939;
op3val:0x7fe2e7df4087a8bb; valaddr_reg:x3; val_offset:2538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2538*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7d72e47402429 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x960529f3b1939 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2e7df4087a8bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7d72e47402429; op2val:0xbfe960529f3b1939;
op3val:0x7fe2e7df4087a8bb; valaddr_reg:x3; val_offset:2541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2541*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7d72e47402429 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x960529f3b1939 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2e7df4087a8bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7d72e47402429; op2val:0xbfe960529f3b1939;
op3val:0x7fe2e7df4087a8bb; valaddr_reg:x3; val_offset:2544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2544*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7d72e47402429 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x960529f3b1939 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2e7df4087a8bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7d72e47402429; op2val:0xbfe960529f3b1939;
op3val:0x7fe2e7df4087a8bb; valaddr_reg:x3; val_offset:2547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2547*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fe52216e3a3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x207700538aa86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0943a59dff43 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fe52216e3a3d; op2val:0xbff207700538aa86;
op3val:0x7feb0943a59dff43; valaddr_reg:x3; val_offset:2550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2550*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fe52216e3a3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x207700538aa86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0943a59dff43 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fe52216e3a3d; op2val:0xbff207700538aa86;
op3val:0x7feb0943a59dff43; valaddr_reg:x3; val_offset:2553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2553*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fe52216e3a3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x207700538aa86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0943a59dff43 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fe52216e3a3d; op2val:0xbff207700538aa86;
op3val:0x7feb0943a59dff43; valaddr_reg:x3; val_offset:2556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2556*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fe52216e3a3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x207700538aa86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0943a59dff43 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fe52216e3a3d; op2val:0xbff207700538aa86;
op3val:0x7feb0943a59dff43; valaddr_reg:x3; val_offset:2559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2559*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fe52216e3a3d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x207700538aa86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb0943a59dff43 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fe52216e3a3d; op2val:0xbff207700538aa86;
op3val:0x7feb0943a59dff43; valaddr_reg:x3; val_offset:2562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2562*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x854c40164e1cb and fs2 == 1 and fe2 == 0x3f4 and fm2 == 0x2f2490b2c03e4 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xccfcda9e20fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe854c40164e1cb; op2val:0xbf42f2490b2c03e4;
op3val:0x7f3ccfcda9e20fff; valaddr_reg:x3; val_offset:2565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2565*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x854c40164e1cb and fs2 == 1 and fe2 == 0x3f4 and fm2 == 0x2f2490b2c03e4 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xccfcda9e20fff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe854c40164e1cb; op2val:0xbf42f2490b2c03e4;
op3val:0x7f3ccfcda9e20fff; valaddr_reg:x3; val_offset:2568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2568*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x854c40164e1cb and fs2 == 1 and fe2 == 0x3f4 and fm2 == 0x2f2490b2c03e4 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xccfcda9e20fff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe854c40164e1cb; op2val:0xbf42f2490b2c03e4;
op3val:0x7f3ccfcda9e20fff; valaddr_reg:x3; val_offset:2571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2571*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x854c40164e1cb and fs2 == 1 and fe2 == 0x3f4 and fm2 == 0x2f2490b2c03e4 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xccfcda9e20fff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe854c40164e1cb; op2val:0xbf42f2490b2c03e4;
op3val:0x7f3ccfcda9e20fff; valaddr_reg:x3; val_offset:2574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2574*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x854c40164e1cb and fs2 == 1 and fe2 == 0x3f4 and fm2 == 0x2f2490b2c03e4 and fs3 == 0 and fe3 == 0x7f3 and fm3 == 0xccfcda9e20fff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe854c40164e1cb; op2val:0xbf42f2490b2c03e4;
op3val:0x7f3ccfcda9e20fff; valaddr_reg:x3; val_offset:2577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2577*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8552f9c810e9e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x94ed6ea6ca724 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x33e8042423f5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8552f9c810e9e; op2val:0xbfd94ed6ea6ca724;
op3val:0x7fd33e8042423f5f; valaddr_reg:x3; val_offset:2580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2580*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8552f9c810e9e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x94ed6ea6ca724 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x33e8042423f5f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8552f9c810e9e; op2val:0xbfd94ed6ea6ca724;
op3val:0x7fd33e8042423f5f; valaddr_reg:x3; val_offset:2583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2583*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8552f9c810e9e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x94ed6ea6ca724 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x33e8042423f5f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8552f9c810e9e; op2val:0xbfd94ed6ea6ca724;
op3val:0x7fd33e8042423f5f; valaddr_reg:x3; val_offset:2586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2586*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8552f9c810e9e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x94ed6ea6ca724 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x33e8042423f5f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8552f9c810e9e; op2val:0xbfd94ed6ea6ca724;
op3val:0x7fd33e8042423f5f; valaddr_reg:x3; val_offset:2589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2589*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8552f9c810e9e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x94ed6ea6ca724 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x33e8042423f5f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8552f9c810e9e; op2val:0xbfd94ed6ea6ca724;
op3val:0x7fd33e8042423f5f; valaddr_reg:x3; val_offset:2592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2592*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x880d2a98ec8a6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaae02012bf970 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x46de92c30d8b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe880d2a98ec8a6; op2val:0xbfcaae02012bf970;
op3val:0x7fc46de92c30d8b3; valaddr_reg:x3; val_offset:2595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2595*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x880d2a98ec8a6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaae02012bf970 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x46de92c30d8b3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe880d2a98ec8a6; op2val:0xbfcaae02012bf970;
op3val:0x7fc46de92c30d8b3; valaddr_reg:x3; val_offset:2598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2598*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x880d2a98ec8a6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaae02012bf970 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x46de92c30d8b3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe880d2a98ec8a6; op2val:0xbfcaae02012bf970;
op3val:0x7fc46de92c30d8b3; valaddr_reg:x3; val_offset:2601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2601*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x880d2a98ec8a6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaae02012bf970 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x46de92c30d8b3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe880d2a98ec8a6; op2val:0xbfcaae02012bf970;
op3val:0x7fc46de92c30d8b3; valaddr_reg:x3; val_offset:2604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2604*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x880d2a98ec8a6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaae02012bf970 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x46de92c30d8b3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe880d2a98ec8a6; op2val:0xbfcaae02012bf970;
op3val:0x7fc46de92c30d8b3; valaddr_reg:x3; val_offset:2607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2607*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a1c573ec7fe3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb8b02f3410e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61bb692dd2b3e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8a1c573ec7fe3; op2val:0xbfecb8b02f3410e4;
op3val:0x7fe61bb692dd2b3e; valaddr_reg:x3; val_offset:2610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2610*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a1c573ec7fe3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb8b02f3410e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61bb692dd2b3e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8a1c573ec7fe3; op2val:0xbfecb8b02f3410e4;
op3val:0x7fe61bb692dd2b3e; valaddr_reg:x3; val_offset:2613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2613*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a1c573ec7fe3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb8b02f3410e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61bb692dd2b3e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8a1c573ec7fe3; op2val:0xbfecb8b02f3410e4;
op3val:0x7fe61bb692dd2b3e; valaddr_reg:x3; val_offset:2616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2616*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a1c573ec7fe3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb8b02f3410e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61bb692dd2b3e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8a1c573ec7fe3; op2val:0xbfecb8b02f3410e4;
op3val:0x7fe61bb692dd2b3e; valaddr_reg:x3; val_offset:2619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2619*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a1c573ec7fe3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb8b02f3410e4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61bb692dd2b3e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8a1c573ec7fe3; op2val:0xbfecb8b02f3410e4;
op3val:0x7fe61bb692dd2b3e; valaddr_reg:x3; val_offset:2622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2622*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8cbf7156c3c4d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcaf13c85d378a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x63a22f659957b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8cbf7156c3c4d; op2val:0xbfecaf13c85d378a;
op3val:0x7fe63a22f659957b; valaddr_reg:x3; val_offset:2625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2625*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8cbf7156c3c4d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcaf13c85d378a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x63a22f659957b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8cbf7156c3c4d; op2val:0xbfecaf13c85d378a;
op3val:0x7fe63a22f659957b; valaddr_reg:x3; val_offset:2628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2628*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8cbf7156c3c4d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcaf13c85d378a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x63a22f659957b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8cbf7156c3c4d; op2val:0xbfecaf13c85d378a;
op3val:0x7fe63a22f659957b; valaddr_reg:x3; val_offset:2631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2631*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8cbf7156c3c4d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcaf13c85d378a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x63a22f659957b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8cbf7156c3c4d; op2val:0xbfecaf13c85d378a;
op3val:0x7fe63a22f659957b; valaddr_reg:x3; val_offset:2634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2634*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8cbf7156c3c4d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcaf13c85d378a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x63a22f659957b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8cbf7156c3c4d; op2val:0xbfecaf13c85d378a;
op3val:0x7fe63a22f659957b; valaddr_reg:x3; val_offset:2637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2637*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8f8cdebbeb1b6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7d175bb1b34cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29648e210d99f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8f8cdebbeb1b6; op2val:0xbfe7d175bb1b34cb;
op3val:0x7fe29648e210d99f; valaddr_reg:x3; val_offset:2640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2640*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8f8cdebbeb1b6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7d175bb1b34cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29648e210d99f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8f8cdebbeb1b6; op2val:0xbfe7d175bb1b34cb;
op3val:0x7fe29648e210d99f; valaddr_reg:x3; val_offset:2643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2643*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8f8cdebbeb1b6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7d175bb1b34cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29648e210d99f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8f8cdebbeb1b6; op2val:0xbfe7d175bb1b34cb;
op3val:0x7fe29648e210d99f; valaddr_reg:x3; val_offset:2646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2646*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8f8cdebbeb1b6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7d175bb1b34cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29648e210d99f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8f8cdebbeb1b6; op2val:0xbfe7d175bb1b34cb;
op3val:0x7fe29648e210d99f; valaddr_reg:x3; val_offset:2649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2649*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8f8cdebbeb1b6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7d175bb1b34cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29648e210d99f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8f8cdebbeb1b6; op2val:0xbfe7d175bb1b34cb;
op3val:0x7fe29648e210d99f; valaddr_reg:x3; val_offset:2652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2652*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x903bcec8bb6fb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ec4f878fb7b4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75306591ce61 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe903bcec8bb6fb; op2val:0xbff0ec4f878fb7b4;
op3val:0x7fea75306591ce61; valaddr_reg:x3; val_offset:2655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2655*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x903bcec8bb6fb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ec4f878fb7b4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75306591ce61 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe903bcec8bb6fb; op2val:0xbff0ec4f878fb7b4;
op3val:0x7fea75306591ce61; valaddr_reg:x3; val_offset:2658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2658*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x903bcec8bb6fb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ec4f878fb7b4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75306591ce61 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe903bcec8bb6fb; op2val:0xbff0ec4f878fb7b4;
op3val:0x7fea75306591ce61; valaddr_reg:x3; val_offset:2661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2661*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x903bcec8bb6fb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ec4f878fb7b4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75306591ce61 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe903bcec8bb6fb; op2val:0xbff0ec4f878fb7b4;
op3val:0x7fea75306591ce61; valaddr_reg:x3; val_offset:2664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2664*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x903bcec8bb6fb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ec4f878fb7b4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75306591ce61 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe903bcec8bb6fb; op2val:0xbff0ec4f878fb7b4;
op3val:0x7fea75306591ce61; valaddr_reg:x3; val_offset:2667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2667*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x905625425a52e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x41b897757476e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf71caf7d786cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe905625425a52e; op2val:0xbfd41b897757476e;
op3val:0x7fcf71caf7d786cf; valaddr_reg:x3; val_offset:2670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2670*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x905625425a52e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x41b897757476e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf71caf7d786cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe905625425a52e; op2val:0xbfd41b897757476e;
op3val:0x7fcf71caf7d786cf; valaddr_reg:x3; val_offset:2673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2673*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x905625425a52e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x41b897757476e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf71caf7d786cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe905625425a52e; op2val:0xbfd41b897757476e;
op3val:0x7fcf71caf7d786cf; valaddr_reg:x3; val_offset:2676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2676*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x905625425a52e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x41b897757476e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf71caf7d786cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe905625425a52e; op2val:0xbfd41b897757476e;
op3val:0x7fcf71caf7d786cf; valaddr_reg:x3; val_offset:2679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2679*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x905625425a52e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x41b897757476e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf71caf7d786cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe905625425a52e; op2val:0xbfd41b897757476e;
op3val:0x7fcf71caf7d786cf; valaddr_reg:x3; val_offset:2682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2682*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9064ca6314142 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1bf221a3e5a23 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbc1a1fa02e46b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9064ca6314142; op2val:0xbff1bf221a3e5a23;
op3val:0x7febc1a1fa02e46b; valaddr_reg:x3; val_offset:2685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2685*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9064ca6314142 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1bf221a3e5a23 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbc1a1fa02e46b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9064ca6314142; op2val:0xbff1bf221a3e5a23;
op3val:0x7febc1a1fa02e46b; valaddr_reg:x3; val_offset:2688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2688*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9064ca6314142 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1bf221a3e5a23 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbc1a1fa02e46b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9064ca6314142; op2val:0xbff1bf221a3e5a23;
op3val:0x7febc1a1fa02e46b; valaddr_reg:x3; val_offset:2691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2691*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9064ca6314142 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1bf221a3e5a23 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbc1a1fa02e46b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9064ca6314142; op2val:0xbff1bf221a3e5a23;
op3val:0x7febc1a1fa02e46b; valaddr_reg:x3; val_offset:2694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2694*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9064ca6314142 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1bf221a3e5a23 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbc1a1fa02e46b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9064ca6314142; op2val:0xbff1bf221a3e5a23;
op3val:0x7febc1a1fa02e46b; valaddr_reg:x3; val_offset:2697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2697*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9560528406d76 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xad2149bedf2cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x53c3903c4c733 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9560528406d76; op2val:0xbfead2149bedf2cb;
op3val:0x7fe53c3903c4c733; valaddr_reg:x3; val_offset:2700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2700*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9560528406d76 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xad2149bedf2cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x53c3903c4c733 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9560528406d76; op2val:0xbfead2149bedf2cb;
op3val:0x7fe53c3903c4c733; valaddr_reg:x3; val_offset:2703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2703*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9560528406d76 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xad2149bedf2cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x53c3903c4c733 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9560528406d76; op2val:0xbfead2149bedf2cb;
op3val:0x7fe53c3903c4c733; valaddr_reg:x3; val_offset:2706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2706*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9560528406d76 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xad2149bedf2cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x53c3903c4c733 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9560528406d76; op2val:0xbfead2149bedf2cb;
op3val:0x7fe53c3903c4c733; valaddr_reg:x3; val_offset:2709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2709*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9560528406d76 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xad2149bedf2cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x53c3903c4c733 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9560528406d76; op2val:0xbfead2149bedf2cb;
op3val:0x7fe53c3903c4c733; valaddr_reg:x3; val_offset:2712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2712*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97239c6c3047e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f682f6148f16 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe288d7f5db50b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97239c6c3047e; op2val:0xbff2f682f6148f16;
op3val:0x7fee288d7f5db50b; valaddr_reg:x3; val_offset:2715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2715*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97239c6c3047e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f682f6148f16 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe288d7f5db50b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97239c6c3047e; op2val:0xbff2f682f6148f16;
op3val:0x7fee288d7f5db50b; valaddr_reg:x3; val_offset:2718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2718*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97239c6c3047e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f682f6148f16 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe288d7f5db50b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97239c6c3047e; op2val:0xbff2f682f6148f16;
op3val:0x7fee288d7f5db50b; valaddr_reg:x3; val_offset:2721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2721*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97239c6c3047e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f682f6148f16 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe288d7f5db50b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97239c6c3047e; op2val:0xbff2f682f6148f16;
op3val:0x7fee288d7f5db50b; valaddr_reg:x3; val_offset:2724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2724*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97239c6c3047e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f682f6148f16 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe288d7f5db50b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe97239c6c3047e; op2val:0xbff2f682f6148f16;
op3val:0x7fee288d7f5db50b; valaddr_reg:x3; val_offset:2727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2727*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9823a6849a878 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x648419e5f7622 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1c32179e3068f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9823a6849a878; op2val:0xbfc648419e5f7622;
op3val:0x7fc1c32179e3068f; valaddr_reg:x3; val_offset:2730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2730*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9823a6849a878 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x648419e5f7622 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1c32179e3068f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9823a6849a878; op2val:0xbfc648419e5f7622;
op3val:0x7fc1c32179e3068f; valaddr_reg:x3; val_offset:2733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2733*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9823a6849a878 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x648419e5f7622 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1c32179e3068f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9823a6849a878; op2val:0xbfc648419e5f7622;
op3val:0x7fc1c32179e3068f; valaddr_reg:x3; val_offset:2736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2736*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9823a6849a878 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x648419e5f7622 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1c32179e3068f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9823a6849a878; op2val:0xbfc648419e5f7622;
op3val:0x7fc1c32179e3068f; valaddr_reg:x3; val_offset:2739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2739*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9823a6849a878 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x648419e5f7622 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1c32179e3068f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9823a6849a878; op2val:0xbfc648419e5f7622;
op3val:0x7fc1c32179e3068f; valaddr_reg:x3; val_offset:2742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2742*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x982e185781cc1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x140f26a707f49 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb829da92ef6eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe982e185781cc1; op2val:0xbff140f26a707f49;
op3val:0x7feb829da92ef6eb; valaddr_reg:x3; val_offset:2745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2745*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x982e185781cc1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x140f26a707f49 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb829da92ef6eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe982e185781cc1; op2val:0xbff140f26a707f49;
op3val:0x7feb829da92ef6eb; valaddr_reg:x3; val_offset:2748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2748*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x982e185781cc1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x140f26a707f49 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb829da92ef6eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe982e185781cc1; op2val:0xbff140f26a707f49;
op3val:0x7feb829da92ef6eb; valaddr_reg:x3; val_offset:2751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2751*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x982e185781cc1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x140f26a707f49 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb829da92ef6eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe982e185781cc1; op2val:0xbff140f26a707f49;
op3val:0x7feb829da92ef6eb; valaddr_reg:x3; val_offset:2754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2754*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x982e185781cc1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x140f26a707f49 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb829da92ef6eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe982e185781cc1; op2val:0xbff140f26a707f49;
op3val:0x7feb829da92ef6eb; valaddr_reg:x3; val_offset:2757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2757*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9be7d76867e32 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x13d1e497fb88a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbbcbc47b0a26f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9be7d76867e32; op2val:0xbfe13d1e497fb88a;
op3val:0x7fdbbcbc47b0a26f; valaddr_reg:x3; val_offset:2760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2760*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9be7d76867e32 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x13d1e497fb88a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbbcbc47b0a26f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9be7d76867e32; op2val:0xbfe13d1e497fb88a;
op3val:0x7fdbbcbc47b0a26f; valaddr_reg:x3; val_offset:2763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2763*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9be7d76867e32 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x13d1e497fb88a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbbcbc47b0a26f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9be7d76867e32; op2val:0xbfe13d1e497fb88a;
op3val:0x7fdbbcbc47b0a26f; valaddr_reg:x3; val_offset:2766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2766*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9be7d76867e32 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x13d1e497fb88a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbbcbc47b0a26f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9be7d76867e32; op2val:0xbfe13d1e497fb88a;
op3val:0x7fdbbcbc47b0a26f; valaddr_reg:x3; val_offset:2769*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2769*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9be7d76867e32 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x13d1e497fb88a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbbcbc47b0a26f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9be7d76867e32; op2val:0xbfe13d1e497fb88a;
op3val:0x7fdbbcbc47b0a26f; valaddr_reg:x3; val_offset:2772*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2772*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9fa745031b828 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x5934859e5a768 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x183ed9771bd67 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9fa745031b828; op2val:0xbfb5934859e5a768;
op3val:0x7fb183ed9771bd67; valaddr_reg:x3; val_offset:2775*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2775*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9fa745031b828 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x5934859e5a768 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x183ed9771bd67 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9fa745031b828; op2val:0xbfb5934859e5a768;
op3val:0x7fb183ed9771bd67; valaddr_reg:x3; val_offset:2778*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2778*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9fa745031b828 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x5934859e5a768 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x183ed9771bd67 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9fa745031b828; op2val:0xbfb5934859e5a768;
op3val:0x7fb183ed9771bd67; valaddr_reg:x3; val_offset:2781*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2781*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9fa745031b828 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x5934859e5a768 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x183ed9771bd67 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9fa745031b828; op2val:0xbfb5934859e5a768;
op3val:0x7fb183ed9771bd67; valaddr_reg:x3; val_offset:2784*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2784*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9fa745031b828 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x5934859e5a768 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x183ed9771bd67 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9fa745031b828; op2val:0xbfb5934859e5a768;
op3val:0x7fb183ed9771bd67; valaddr_reg:x3; val_offset:2787*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2787*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa04034a417446 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x948073adec2d9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x48db17a274e91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea04034a417446; op2val:0xbfe948073adec2d9;
op3val:0x7fe48db17a274e91; valaddr_reg:x3; val_offset:2790*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2790*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa04034a417446 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x948073adec2d9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x48db17a274e91 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea04034a417446; op2val:0xbfe948073adec2d9;
op3val:0x7fe48db17a274e91; valaddr_reg:x3; val_offset:2793*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2793*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa04034a417446 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x948073adec2d9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x48db17a274e91 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea04034a417446; op2val:0xbfe948073adec2d9;
op3val:0x7fe48db17a274e91; valaddr_reg:x3; val_offset:2796*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2796*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa04034a417446 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x948073adec2d9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x48db17a274e91 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea04034a417446; op2val:0xbfe948073adec2d9;
op3val:0x7fe48db17a274e91; valaddr_reg:x3; val_offset:2799*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2799*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa04034a417446 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x948073adec2d9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x48db17a274e91 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea04034a417446; op2val:0xbfe948073adec2d9;
op3val:0x7fe48db17a274e91; valaddr_reg:x3; val_offset:2802*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2802*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa314cd13968e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2cb7501dfc887 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec4877592448b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea314cd13968e7; op2val:0xbfe2cb7501dfc887;
op3val:0x7fdec4877592448b; valaddr_reg:x3; val_offset:2805*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2805*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa314cd13968e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2cb7501dfc887 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec4877592448b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea314cd13968e7; op2val:0xbfe2cb7501dfc887;
op3val:0x7fdec4877592448b; valaddr_reg:x3; val_offset:2808*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2808*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa314cd13968e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2cb7501dfc887 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec4877592448b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea314cd13968e7; op2val:0xbfe2cb7501dfc887;
op3val:0x7fdec4877592448b; valaddr_reg:x3; val_offset:2811*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2811*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa314cd13968e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2cb7501dfc887 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec4877592448b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea314cd13968e7; op2val:0xbfe2cb7501dfc887;
op3val:0x7fdec4877592448b; valaddr_reg:x3; val_offset:2814*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2814*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa314cd13968e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2cb7501dfc887 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec4877592448b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea314cd13968e7; op2val:0xbfe2cb7501dfc887;
op3val:0x7fdec4877592448b; valaddr_reg:x3; val_offset:2817*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2817*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa31550c844273 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0627da3f81f8f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad290e3462113 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea31550c844273; op2val:0xbfe0627da3f81f8f;
op3val:0x7fdad290e3462113; valaddr_reg:x3; val_offset:2820*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2820*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa31550c844273 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0627da3f81f8f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad290e3462113 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea31550c844273; op2val:0xbfe0627da3f81f8f;
op3val:0x7fdad290e3462113; valaddr_reg:x3; val_offset:2823*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2823*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa31550c844273 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0627da3f81f8f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad290e3462113 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea31550c844273; op2val:0xbfe0627da3f81f8f;
op3val:0x7fdad290e3462113; valaddr_reg:x3; val_offset:2826*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2826*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa31550c844273 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0627da3f81f8f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad290e3462113 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea31550c844273; op2val:0xbfe0627da3f81f8f;
op3val:0x7fdad290e3462113; valaddr_reg:x3; val_offset:2829*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2829*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa31550c844273 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0627da3f81f8f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad290e3462113 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea31550c844273; op2val:0xbfe0627da3f81f8f;
op3val:0x7fdad290e3462113; valaddr_reg:x3; val_offset:2832*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2832*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4252ecd893af and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5cd18d027b375 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1e3d3ab394d1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4252ecd893af; op2val:0xbfc5cd18d027b375;
op3val:0x7fc1e3d3ab394d1b; valaddr_reg:x3; val_offset:2835*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2835*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4252ecd893af and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5cd18d027b375 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1e3d3ab394d1b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4252ecd893af; op2val:0xbfc5cd18d027b375;
op3val:0x7fc1e3d3ab394d1b; valaddr_reg:x3; val_offset:2838*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2838*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4252ecd893af and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5cd18d027b375 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1e3d3ab394d1b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4252ecd893af; op2val:0xbfc5cd18d027b375;
op3val:0x7fc1e3d3ab394d1b; valaddr_reg:x3; val_offset:2841*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2841*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4252ecd893af and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5cd18d027b375 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1e3d3ab394d1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4252ecd893af; op2val:0xbfc5cd18d027b375;
op3val:0x7fc1e3d3ab394d1b; valaddr_reg:x3; val_offset:2844*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2844*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4252ecd893af and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5cd18d027b375 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1e3d3ab394d1b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4252ecd893af; op2val:0xbfc5cd18d027b375;
op3val:0x7fc1e3d3ab394d1b; valaddr_reg:x3; val_offset:2847*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2847*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa98601d6ee96c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8f2202ff70d62 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4bb832d2f03b6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea98601d6ee96c; op2val:0xbfe8f2202ff70d62;
op3val:0x7fe4bb832d2f03b6; valaddr_reg:x3; val_offset:2850*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2850*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa98601d6ee96c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8f2202ff70d62 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4bb832d2f03b6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea98601d6ee96c; op2val:0xbfe8f2202ff70d62;
op3val:0x7fe4bb832d2f03b6; valaddr_reg:x3; val_offset:2853*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2853*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa98601d6ee96c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8f2202ff70d62 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4bb832d2f03b6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea98601d6ee96c; op2val:0xbfe8f2202ff70d62;
op3val:0x7fe4bb832d2f03b6; valaddr_reg:x3; val_offset:2856*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2856*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa98601d6ee96c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8f2202ff70d62 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4bb832d2f03b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea98601d6ee96c; op2val:0xbfe8f2202ff70d62;
op3val:0x7fe4bb832d2f03b6; valaddr_reg:x3; val_offset:2859*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2859*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa98601d6ee96c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8f2202ff70d62 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4bb832d2f03b6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea98601d6ee96c; op2val:0xbfe8f2202ff70d62;
op3val:0x7fe4bb832d2f03b6; valaddr_reg:x3; val_offset:2862*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2862*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad469a4d40781 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3ef164ade94e5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0b693dfb3681f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead469a4d40781; op2val:0xbfc3ef164ade94e5;
op3val:0x7fc0b693dfb3681f; valaddr_reg:x3; val_offset:2865*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2865*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad469a4d40781 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3ef164ade94e5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0b693dfb3681f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead469a4d40781; op2val:0xbfc3ef164ade94e5;
op3val:0x7fc0b693dfb3681f; valaddr_reg:x3; val_offset:2868*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2868*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad469a4d40781 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3ef164ade94e5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0b693dfb3681f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead469a4d40781; op2val:0xbfc3ef164ade94e5;
op3val:0x7fc0b693dfb3681f; valaddr_reg:x3; val_offset:2871*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2871*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad469a4d40781 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3ef164ade94e5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0b693dfb3681f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead469a4d40781; op2val:0xbfc3ef164ade94e5;
op3val:0x7fc0b693dfb3681f; valaddr_reg:x3; val_offset:2874*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2874*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad469a4d40781 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3ef164ade94e5 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0b693dfb3681f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead469a4d40781; op2val:0xbfc3ef164ade94e5;
op3val:0x7fc0b693dfb3681f; valaddr_reg:x3; val_offset:2877*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2877*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf22d587d4b04 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0a9988863bc52 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc0fcc39d53823 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaf22d587d4b04; op2val:0xbfd0a9988863bc52;
op3val:0x7fcc0fcc39d53823; valaddr_reg:x3; val_offset:2880*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2880*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf22d587d4b04 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0a9988863bc52 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc0fcc39d53823 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaf22d587d4b04; op2val:0xbfd0a9988863bc52;
op3val:0x7fcc0fcc39d53823; valaddr_reg:x3; val_offset:2883*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2883*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf22d587d4b04 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0a9988863bc52 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc0fcc39d53823 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaf22d587d4b04; op2val:0xbfd0a9988863bc52;
op3val:0x7fcc0fcc39d53823; valaddr_reg:x3; val_offset:2886*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2886*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf22d587d4b04 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0a9988863bc52 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc0fcc39d53823 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaf22d587d4b04; op2val:0xbfd0a9988863bc52;
op3val:0x7fcc0fcc39d53823; valaddr_reg:x3; val_offset:2889*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2889*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf22d587d4b04 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0a9988863bc52 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc0fcc39d53823 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feaf22d587d4b04; op2val:0xbfd0a9988863bc52;
op3val:0x7fcc0fcc39d53823; valaddr_reg:x3; val_offset:2892*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2892*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb401c9972e963 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3722ab15268d0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x08f49bc253915 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb401c9972e963; op2val:0xbfe3722ab15268d0;
op3val:0x7fe08f49bc253915; valaddr_reg:x3; val_offset:2895*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2895*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb401c9972e963 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3722ab15268d0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x08f49bc253915 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb401c9972e963; op2val:0xbfe3722ab15268d0;
op3val:0x7fe08f49bc253915; valaddr_reg:x3; val_offset:2898*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2898*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb401c9972e963 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3722ab15268d0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x08f49bc253915 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb401c9972e963; op2val:0xbfe3722ab15268d0;
op3val:0x7fe08f49bc253915; valaddr_reg:x3; val_offset:2901*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2901*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb401c9972e963 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3722ab15268d0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x08f49bc253915 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb401c9972e963; op2val:0xbfe3722ab15268d0;
op3val:0x7fe08f49bc253915; valaddr_reg:x3; val_offset:2904*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2904*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb401c9972e963 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3722ab15268d0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x08f49bc253915 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb401c9972e963; op2val:0xbfe3722ab15268d0;
op3val:0x7fe08f49bc253915; valaddr_reg:x3; val_offset:2907*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2907*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb42c6b2e0e14b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd850efa48c7f0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x925de5e61e1ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb42c6b2e0e14b; op2val:0xbfcd850efa48c7f0;
op3val:0x7fc925de5e61e1ff; valaddr_reg:x3; val_offset:2910*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2910*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb42c6b2e0e14b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd850efa48c7f0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x925de5e61e1ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb42c6b2e0e14b; op2val:0xbfcd850efa48c7f0;
op3val:0x7fc925de5e61e1ff; valaddr_reg:x3; val_offset:2913*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2913*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb42c6b2e0e14b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd850efa48c7f0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x925de5e61e1ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb42c6b2e0e14b; op2val:0xbfcd850efa48c7f0;
op3val:0x7fc925de5e61e1ff; valaddr_reg:x3; val_offset:2916*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2916*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb42c6b2e0e14b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd850efa48c7f0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x925de5e61e1ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb42c6b2e0e14b; op2val:0xbfcd850efa48c7f0;
op3val:0x7fc925de5e61e1ff; valaddr_reg:x3; val_offset:2919*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2919*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb42c6b2e0e14b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd850efa48c7f0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x925de5e61e1ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb42c6b2e0e14b; op2val:0xbfcd850efa48c7f0;
op3val:0x7fc925de5e61e1ff; valaddr_reg:x3; val_offset:2922*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2922*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbd6501f77c75d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9521af5bd0569 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x606db39cc9430 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febd6501f77c75d; op2val:0xbfe9521af5bd0569;
op3val:0x7fe606db39cc9430; valaddr_reg:x3; val_offset:2925*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2925*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbd6501f77c75d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9521af5bd0569 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x606db39cc9430 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febd6501f77c75d; op2val:0xbfe9521af5bd0569;
op3val:0x7fe606db39cc9430; valaddr_reg:x3; val_offset:2928*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2928*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbd6501f77c75d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9521af5bd0569 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x606db39cc9430 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febd6501f77c75d; op2val:0xbfe9521af5bd0569;
op3val:0x7fe606db39cc9430; valaddr_reg:x3; val_offset:2931*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2931*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbd6501f77c75d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9521af5bd0569 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x606db39cc9430 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febd6501f77c75d; op2val:0xbfe9521af5bd0569;
op3val:0x7fe606db39cc9430; valaddr_reg:x3; val_offset:2934*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2934*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbd6501f77c75d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9521af5bd0569 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x606db39cc9430 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febd6501f77c75d; op2val:0xbfe9521af5bd0569;
op3val:0x7fe606db39cc9430; valaddr_reg:x3; val_offset:2937*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2937*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0fc879d9bd20 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1886525f3e59b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xebffc8fb4d6e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec0fc879d9bd20; op2val:0xbfe1886525f3e59b;
op3val:0x7fdebffc8fb4d6e9; valaddr_reg:x3; val_offset:2940*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2940*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0fc879d9bd20 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1886525f3e59b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xebffc8fb4d6e9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec0fc879d9bd20; op2val:0xbfe1886525f3e59b;
op3val:0x7fdebffc8fb4d6e9; valaddr_reg:x3; val_offset:2943*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2943*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0fc879d9bd20 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1886525f3e59b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xebffc8fb4d6e9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec0fc879d9bd20; op2val:0xbfe1886525f3e59b;
op3val:0x7fdebffc8fb4d6e9; valaddr_reg:x3; val_offset:2946*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2946*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0fc879d9bd20 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1886525f3e59b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xebffc8fb4d6e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec0fc879d9bd20; op2val:0xbfe1886525f3e59b;
op3val:0x7fdebffc8fb4d6e9; valaddr_reg:x3; val_offset:2949*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2949*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0fc879d9bd20 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1886525f3e59b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xebffc8fb4d6e9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec0fc879d9bd20; op2val:0xbfe1886525f3e59b;
op3val:0x7fdebffc8fb4d6e9; valaddr_reg:x3; val_offset:2952*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2952*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc1c521a7eb065 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x392da6532199c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x131d1d028d523 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec1c521a7eb065; op2val:0xbfc392da6532199c;
op3val:0x7fc131d1d028d523; valaddr_reg:x3; val_offset:2955*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2955*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc1c521a7eb065 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x392da6532199c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x131d1d028d523 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec1c521a7eb065; op2val:0xbfc392da6532199c;
op3val:0x7fc131d1d028d523; valaddr_reg:x3; val_offset:2958*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2958*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc1c521a7eb065 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x392da6532199c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x131d1d028d523 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec1c521a7eb065; op2val:0xbfc392da6532199c;
op3val:0x7fc131d1d028d523; valaddr_reg:x3; val_offset:2961*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2961*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc1c521a7eb065 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x392da6532199c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x131d1d028d523 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec1c521a7eb065; op2val:0xbfc392da6532199c;
op3val:0x7fc131d1d028d523; valaddr_reg:x3; val_offset:2964*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2964*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc1c521a7eb065 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x392da6532199c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x131d1d028d523 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec1c521a7eb065; op2val:0xbfc392da6532199c;
op3val:0x7fc131d1d028d523; valaddr_reg:x3; val_offset:2967*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2967*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc6a025abfeb31 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a98c6f1b9e65 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1757df4c3c481 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec6a025abfeb31; op2val:0xbfe3a98c6f1b9e65;
op3val:0x7fe1757df4c3c481; valaddr_reg:x3; val_offset:2970*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2970*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc6a025abfeb31 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a98c6f1b9e65 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1757df4c3c481 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec6a025abfeb31; op2val:0xbfe3a98c6f1b9e65;
op3val:0x7fe1757df4c3c481; valaddr_reg:x3; val_offset:2973*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2973*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc6a025abfeb31 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a98c6f1b9e65 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1757df4c3c481 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec6a025abfeb31; op2val:0xbfe3a98c6f1b9e65;
op3val:0x7fe1757df4c3c481; valaddr_reg:x3; val_offset:2976*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2976*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc6a025abfeb31 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a98c6f1b9e65 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1757df4c3c481 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec6a025abfeb31; op2val:0xbfe3a98c6f1b9e65;
op3val:0x7fe1757df4c3c481; valaddr_reg:x3; val_offset:2979*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2979*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc6a025abfeb31 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a98c6f1b9e65 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1757df4c3c481 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec6a025abfeb31; op2val:0xbfe3a98c6f1b9e65;
op3val:0x7fe1757df4c3c481; valaddr_reg:x3; val_offset:2982*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2982*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc74cc0bbf9bc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14efc54a35241 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec892f54a3c0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec74cc0bbf9bc9; op2val:0xbfe14efc54a35241;
op3val:0x7fdec892f54a3c0d; valaddr_reg:x3; val_offset:2985*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2985*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc74cc0bbf9bc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14efc54a35241 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec892f54a3c0d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec74cc0bbf9bc9; op2val:0xbfe14efc54a35241;
op3val:0x7fdec892f54a3c0d; valaddr_reg:x3; val_offset:2988*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2988*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc74cc0bbf9bc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14efc54a35241 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec892f54a3c0d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec74cc0bbf9bc9; op2val:0xbfe14efc54a35241;
op3val:0x7fdec892f54a3c0d; valaddr_reg:x3; val_offset:2991*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2991*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc74cc0bbf9bc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14efc54a35241 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec892f54a3c0d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec74cc0bbf9bc9; op2val:0xbfe14efc54a35241;
op3val:0x7fdec892f54a3c0d; valaddr_reg:x3; val_offset:2994*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2994*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc74cc0bbf9bc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14efc54a35241 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xec892f54a3c0d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec74cc0bbf9bc9; op2val:0xbfe14efc54a35241;
op3val:0x7fdec892f54a3c0d; valaddr_reg:x3; val_offset:2997*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2997*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc97481aa589cf and fs2 == 1 and fe2 == 0x3f5 and fm2 == 0x15fdaf55a8228 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xf0c061c12bfff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec97481aa589cf; op2val:0xbf515fdaf55a8228;
op3val:0x7f4f0c061c12bfff; valaddr_reg:x3; val_offset:3000*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc97481aa589cf and fs2 == 1 and fe2 == 0x3f5 and fm2 == 0x15fdaf55a8228 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xf0c061c12bfff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec97481aa589cf; op2val:0xbf515fdaf55a8228;
op3val:0x7f4f0c061c12bfff; valaddr_reg:x3; val_offset:3003*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3003*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc97481aa589cf and fs2 == 1 and fe2 == 0x3f5 and fm2 == 0x15fdaf55a8228 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xf0c061c12bfff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec97481aa589cf; op2val:0xbf515fdaf55a8228;
op3val:0x7f4f0c061c12bfff; valaddr_reg:x3; val_offset:3006*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3006*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc97481aa589cf and fs2 == 1 and fe2 == 0x3f5 and fm2 == 0x15fdaf55a8228 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xf0c061c12bfff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec97481aa589cf; op2val:0xbf515fdaf55a8228;
op3val:0x7f4f0c061c12bfff; valaddr_reg:x3; val_offset:3009*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3009*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc97481aa589cf and fs2 == 1 and fe2 == 0x3f5 and fm2 == 0x15fdaf55a8228 and fs3 == 0 and fe3 == 0x7f4 and fm3 == 0xf0c061c12bfff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec97481aa589cf; op2val:0xbf515fdaf55a8228;
op3val:0x7f4f0c061c12bfff; valaddr_reg:x3; val_offset:3012*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3012*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc998825886bbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5655fb54b9f4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x31f5b782c2cff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec998825886bbc; op2val:0xbfd5655fb54b9f4c;
op3val:0x7fd31f5b782c2cff; valaddr_reg:x3; val_offset:3015*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3015*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc998825886bbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5655fb54b9f4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x31f5b782c2cff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec998825886bbc; op2val:0xbfd5655fb54b9f4c;
op3val:0x7fd31f5b782c2cff; valaddr_reg:x3; val_offset:3018*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3018*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc998825886bbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5655fb54b9f4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x31f5b782c2cff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec998825886bbc; op2val:0xbfd5655fb54b9f4c;
op3val:0x7fd31f5b782c2cff; valaddr_reg:x3; val_offset:3021*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3021*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc998825886bbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5655fb54b9f4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x31f5b782c2cff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec998825886bbc; op2val:0xbfd5655fb54b9f4c;
op3val:0x7fd31f5b782c2cff; valaddr_reg:x3; val_offset:3024*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3024*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc998825886bbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5655fb54b9f4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x31f5b782c2cff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec998825886bbc; op2val:0xbfd5655fb54b9f4c;
op3val:0x7fd31f5b782c2cff; valaddr_reg:x3; val_offset:3027*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3027*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd42d44a09da1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0159563e0931a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcfb10ebe5bb27 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd42d44a09da1; op2val:0xbfc0159563e0931a;
op3val:0x7fbcfb10ebe5bb27; valaddr_reg:x3; val_offset:3030*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3030*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd42d44a09da1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0159563e0931a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcfb10ebe5bb27 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd42d44a09da1; op2val:0xbfc0159563e0931a;
op3val:0x7fbcfb10ebe5bb27; valaddr_reg:x3; val_offset:3033*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3033*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd42d44a09da1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0159563e0931a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcfb10ebe5bb27 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd42d44a09da1; op2val:0xbfc0159563e0931a;
op3val:0x7fbcfb10ebe5bb27; valaddr_reg:x3; val_offset:3036*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3036*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd42d44a09da1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0159563e0931a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcfb10ebe5bb27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd42d44a09da1; op2val:0xbfc0159563e0931a;
op3val:0x7fbcfb10ebe5bb27; valaddr_reg:x3; val_offset:3039*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3039*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd42d44a09da1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0159563e0931a and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xcfb10ebe5bb27 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd42d44a09da1; op2val:0xbfc0159563e0931a;
op3val:0x7fbcfb10ebe5bb27; valaddr_reg:x3; val_offset:3042*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3042*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2441313e69d8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x40e12b2f0404e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24379a2a5ae43 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2441313e69d8; op2val:0xbfc40e12b2f0404e;
op3val:0x7fc24379a2a5ae43; valaddr_reg:x3; val_offset:3045*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3045*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2441313e69d8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x40e12b2f0404e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24379a2a5ae43 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2441313e69d8; op2val:0xbfc40e12b2f0404e;
op3val:0x7fc24379a2a5ae43; valaddr_reg:x3; val_offset:3048*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3048*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2441313e69d8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x40e12b2f0404e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24379a2a5ae43 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2441313e69d8; op2val:0xbfc40e12b2f0404e;
op3val:0x7fc24379a2a5ae43; valaddr_reg:x3; val_offset:3051*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3051*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2441313e69d8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x40e12b2f0404e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24379a2a5ae43 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2441313e69d8; op2val:0xbfc40e12b2f0404e;
op3val:0x7fc24379a2a5ae43; valaddr_reg:x3; val_offset:3054*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3054*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd2441313e69d8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x40e12b2f0404e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24379a2a5ae43 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed2441313e69d8; op2val:0xbfc40e12b2f0404e;
op3val:0x7fc24379a2a5ae43; valaddr_reg:x3; val_offset:3057*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3057*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdbfbc83472936 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x036953caa3e91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe253919d94c5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedbfbc83472936; op2val:0xbff036953caa3e91;
op3val:0x7fee253919d94c5b; valaddr_reg:x3; val_offset:3060*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3060*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdbfbc83472936 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x036953caa3e91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe253919d94c5b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedbfbc83472936; op2val:0xbff036953caa3e91;
op3val:0x7fee253919d94c5b; valaddr_reg:x3; val_offset:3063*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3063*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdbfbc83472936 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x036953caa3e91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe253919d94c5b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedbfbc83472936; op2val:0xbff036953caa3e91;
op3val:0x7fee253919d94c5b; valaddr_reg:x3; val_offset:3066*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3066*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdbfbc83472936 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x036953caa3e91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe253919d94c5b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedbfbc83472936; op2val:0xbff036953caa3e91;
op3val:0x7fee253919d94c5b; valaddr_reg:x3; val_offset:3069*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3069*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdbfbc83472936 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x036953caa3e91 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe253919d94c5b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedbfbc83472936; op2val:0xbff036953caa3e91;
op3val:0x7fee253919d94c5b; valaddr_reg:x3; val_offset:3072*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3072*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdff07e36a58e8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04ab42936e1a4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe8b152a434b27 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedff07e36a58e8; op2val:0xbfe04ab42936e1a4;
op3val:0x7fde8b152a434b27; valaddr_reg:x3; val_offset:3075*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3075*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdff07e36a58e8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04ab42936e1a4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe8b152a434b27 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedff07e36a58e8; op2val:0xbfe04ab42936e1a4;
op3val:0x7fde8b152a434b27; valaddr_reg:x3; val_offset:3078*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3078*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdff07e36a58e8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04ab42936e1a4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe8b152a434b27 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedff07e36a58e8; op2val:0xbfe04ab42936e1a4;
op3val:0x7fde8b152a434b27; valaddr_reg:x3; val_offset:3081*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3081*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdff07e36a58e8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04ab42936e1a4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe8b152a434b27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedff07e36a58e8; op2val:0xbfe04ab42936e1a4;
op3val:0x7fde8b152a434b27; valaddr_reg:x3; val_offset:3084*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3084*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdff07e36a58e8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04ab42936e1a4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe8b152a434b27 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedff07e36a58e8; op2val:0xbfe04ab42936e1a4;
op3val:0x7fde8b152a434b27; valaddr_reg:x3; val_offset:3087*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3087*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0880de9fe705 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9845adb5f7a0a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7f2dd07517ff3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee0880de9fe705; op2val:0xbfd9845adb5f7a0a;
op3val:0x7fd7f2dd07517ff3; valaddr_reg:x3; val_offset:3090*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3090*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0880de9fe705 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9845adb5f7a0a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7f2dd07517ff3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee0880de9fe705; op2val:0xbfd9845adb5f7a0a;
op3val:0x7fd7f2dd07517ff3; valaddr_reg:x3; val_offset:3093*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3093*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0880de9fe705 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9845adb5f7a0a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7f2dd07517ff3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee0880de9fe705; op2val:0xbfd9845adb5f7a0a;
op3val:0x7fd7f2dd07517ff3; valaddr_reg:x3; val_offset:3096*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3096*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0880de9fe705 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9845adb5f7a0a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7f2dd07517ff3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee0880de9fe705; op2val:0xbfd9845adb5f7a0a;
op3val:0x7fd7f2dd07517ff3; valaddr_reg:x3; val_offset:3099*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3099*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0880de9fe705 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9845adb5f7a0a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7f2dd07517ff3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee0880de9fe705; op2val:0xbfd9845adb5f7a0a;
op3val:0x7fd7f2dd07517ff3; valaddr_reg:x3; val_offset:3102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3102*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2ffa6cff07a7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6039e999a6b85 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4c46648351903 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2ffa6cff07a7; op2val:0xbfe6039e999a6b85;
op3val:0x7fe4c46648351903; valaddr_reg:x3; val_offset:3105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3105*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2ffa6cff07a7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6039e999a6b85 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4c46648351903 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2ffa6cff07a7; op2val:0xbfe6039e999a6b85;
op3val:0x7fe4c46648351903; valaddr_reg:x3; val_offset:3108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3108*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2ffa6cff07a7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6039e999a6b85 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4c46648351903 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2ffa6cff07a7; op2val:0xbfe6039e999a6b85;
op3val:0x7fe4c46648351903; valaddr_reg:x3; val_offset:3111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3111*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2ffa6cff07a7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6039e999a6b85 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4c46648351903 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2ffa6cff07a7; op2val:0xbfe6039e999a6b85;
op3val:0x7fe4c46648351903; valaddr_reg:x3; val_offset:3114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3114*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2ffa6cff07a7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6039e999a6b85 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4c46648351903 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2ffa6cff07a7; op2val:0xbfe6039e999a6b85;
op3val:0x7fe4c46648351903; valaddr_reg:x3; val_offset:3117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3117*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe771fa9b7a387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e4bf34643a40 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5cbac8f2d7906 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee771fa9b7a387; op2val:0xbfe6e4bf34643a40;
op3val:0x7fe5cbac8f2d7906; valaddr_reg:x3; val_offset:3120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3120*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe771fa9b7a387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e4bf34643a40 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5cbac8f2d7906 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee771fa9b7a387; op2val:0xbfe6e4bf34643a40;
op3val:0x7fe5cbac8f2d7906; valaddr_reg:x3; val_offset:3123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3123*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe771fa9b7a387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e4bf34643a40 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5cbac8f2d7906 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee771fa9b7a387; op2val:0xbfe6e4bf34643a40;
op3val:0x7fe5cbac8f2d7906; valaddr_reg:x3; val_offset:3126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3126*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe771fa9b7a387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e4bf34643a40 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5cbac8f2d7906 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee771fa9b7a387; op2val:0xbfe6e4bf34643a40;
op3val:0x7fe5cbac8f2d7906; valaddr_reg:x3; val_offset:3129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3129*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe771fa9b7a387 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e4bf34643a40 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5cbac8f2d7906 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee771fa9b7a387; op2val:0xbfe6e4bf34643a40;
op3val:0x7fe5cbac8f2d7906; valaddr_reg:x3; val_offset:3132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3132*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea17c4ccbefe8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x02e25a9bb2a1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef9d4ac882cb3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea17c4ccbefe8; op2val:0xbff02e25a9bb2a1a;
op3val:0x7feef9d4ac882cb3; valaddr_reg:x3; val_offset:3135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3135*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea17c4ccbefe8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x02e25a9bb2a1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef9d4ac882cb3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea17c4ccbefe8; op2val:0xbff02e25a9bb2a1a;
op3val:0x7feef9d4ac882cb3; valaddr_reg:x3; val_offset:3138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3138*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea17c4ccbefe8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x02e25a9bb2a1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef9d4ac882cb3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea17c4ccbefe8; op2val:0xbff02e25a9bb2a1a;
op3val:0x7feef9d4ac882cb3; valaddr_reg:x3; val_offset:3141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3141*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea17c4ccbefe8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x02e25a9bb2a1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef9d4ac882cb3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea17c4ccbefe8; op2val:0xbff02e25a9bb2a1a;
op3val:0x7feef9d4ac882cb3; valaddr_reg:x3; val_offset:3144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3144*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea17c4ccbefe8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x02e25a9bb2a1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef9d4ac882cb3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea17c4ccbefe8; op2val:0xbff02e25a9bb2a1a;
op3val:0x7feef9d4ac882cb3; valaddr_reg:x3; val_offset:3147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3147*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeb6cfccb7b3a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4e7209b2b785d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x41018d7bfa2cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeb6cfccb7b3a4; op2val:0xbfe4e7209b2b785d;
op3val:0x7fe41018d7bfa2cd; valaddr_reg:x3; val_offset:3150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3150*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeb6cfccb7b3a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4e7209b2b785d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x41018d7bfa2cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeb6cfccb7b3a4; op2val:0xbfe4e7209b2b785d;
op3val:0x7fe41018d7bfa2cd; valaddr_reg:x3; val_offset:3153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3153*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeb6cfccb7b3a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4e7209b2b785d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x41018d7bfa2cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeb6cfccb7b3a4; op2val:0xbfe4e7209b2b785d;
op3val:0x7fe41018d7bfa2cd; valaddr_reg:x3; val_offset:3156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3156*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeb6cfccb7b3a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4e7209b2b785d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x41018d7bfa2cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeb6cfccb7b3a4; op2val:0xbfe4e7209b2b785d;
op3val:0x7fe41018d7bfa2cd; valaddr_reg:x3; val_offset:3159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3159*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeb6cfccb7b3a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4e7209b2b785d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x41018d7bfa2cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feeb6cfccb7b3a4; op2val:0xbfe4e7209b2b785d;
op3val:0x7fe41018d7bfa2cd; valaddr_reg:x3; val_offset:3162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3162*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec1a6c76b7bd2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe6c11aa8d2573 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd3d6ae8a2d811 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feec1a6c76b7bd2; op2val:0xbfee6c11aa8d2573;
op3val:0x7fed3d6ae8a2d811; valaddr_reg:x3; val_offset:3165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3165*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec1a6c76b7bd2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe6c11aa8d2573 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd3d6ae8a2d811 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feec1a6c76b7bd2; op2val:0xbfee6c11aa8d2573;
op3val:0x7fed3d6ae8a2d811; valaddr_reg:x3; val_offset:3168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3168*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec1a6c76b7bd2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe6c11aa8d2573 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd3d6ae8a2d811 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feec1a6c76b7bd2; op2val:0xbfee6c11aa8d2573;
op3val:0x7fed3d6ae8a2d811; valaddr_reg:x3; val_offset:3171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3171*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec1a6c76b7bd2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe6c11aa8d2573 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd3d6ae8a2d811 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feec1a6c76b7bd2; op2val:0xbfee6c11aa8d2573;
op3val:0x7fed3d6ae8a2d811; valaddr_reg:x3; val_offset:3174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3174*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec1a6c76b7bd2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe6c11aa8d2573 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd3d6ae8a2d811 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feec1a6c76b7bd2; op2val:0xbfee6c11aa8d2573;
op3val:0x7fed3d6ae8a2d811; valaddr_reg:x3; val_offset:3177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3177*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1e592ad54c35 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8fe934dea0ead and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x84e53031235b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1e592ad54c35; op2val:0xbfd8fe934dea0ead;
op3val:0x7fd84e53031235b9; valaddr_reg:x3; val_offset:3180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3180*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1e592ad54c35 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8fe934dea0ead and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x84e53031235b9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1e592ad54c35; op2val:0xbfd8fe934dea0ead;
op3val:0x7fd84e53031235b9; valaddr_reg:x3; val_offset:3183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3183*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1e592ad54c35 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8fe934dea0ead and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x84e53031235b9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1e592ad54c35; op2val:0xbfd8fe934dea0ead;
op3val:0x7fd84e53031235b9; valaddr_reg:x3; val_offset:3186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3186*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1e592ad54c35 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8fe934dea0ead and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x84e53031235b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1e592ad54c35; op2val:0xbfd8fe934dea0ead;
op3val:0x7fd84e53031235b9; valaddr_reg:x3; val_offset:3189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3189*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1e592ad54c35 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8fe934dea0ead and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x84e53031235b9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1e592ad54c35; op2val:0xbfd8fe934dea0ead;
op3val:0x7fd84e53031235b9; valaddr_reg:x3; val_offset:3192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3192*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf20566fa54831 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e11e69822d9d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x54831adf73d8a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef20566fa54831; op2val:0xbfe5e11e69822d9d;
op3val:0x7fe54831adf73d8a; valaddr_reg:x3; val_offset:3195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3195*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf20566fa54831 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e11e69822d9d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x54831adf73d8a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef20566fa54831; op2val:0xbfe5e11e69822d9d;
op3val:0x7fe54831adf73d8a; valaddr_reg:x3; val_offset:3198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3198*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf20566fa54831 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e11e69822d9d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x54831adf73d8a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef20566fa54831; op2val:0xbfe5e11e69822d9d;
op3val:0x7fe54831adf73d8a; valaddr_reg:x3; val_offset:3201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3201*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf20566fa54831 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e11e69822d9d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x54831adf73d8a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef20566fa54831; op2val:0xbfe5e11e69822d9d;
op3val:0x7fe54831adf73d8a; valaddr_reg:x3; val_offset:3204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3204*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf20566fa54831 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e11e69822d9d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x54831adf73d8a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef20566fa54831; op2val:0xbfe5e11e69822d9d;
op3val:0x7fe54831adf73d8a; valaddr_reg:x3; val_offset:3207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3207*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3403ffc18c4e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x80322f838f766 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x76a11f9800e5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3403ffc18c4e; op2val:0xbf980322f838f766;
op3val:0x7f976a11f9800e5f; valaddr_reg:x3; val_offset:3210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3210*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3403ffc18c4e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x80322f838f766 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x76a11f9800e5f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3403ffc18c4e; op2val:0xbf980322f838f766;
op3val:0x7f976a11f9800e5f; valaddr_reg:x3; val_offset:3213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3213*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3403ffc18c4e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x80322f838f766 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x76a11f9800e5f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3403ffc18c4e; op2val:0xbf980322f838f766;
op3val:0x7f976a11f9800e5f; valaddr_reg:x3; val_offset:3216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3216*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3403ffc18c4e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x80322f838f766 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x76a11f9800e5f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3403ffc18c4e; op2val:0xbf980322f838f766;
op3val:0x7f976a11f9800e5f; valaddr_reg:x3; val_offset:3219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3219*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3403ffc18c4e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x80322f838f766 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x76a11f9800e5f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3403ffc18c4e; op2val:0xbf980322f838f766;
op3val:0x7f976a11f9800e5f; valaddr_reg:x3; val_offset:3222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3222*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3b743a16ba1c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbd76f744d1ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd06cc97ae5955 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3b743a16ba1c; op2val:0xbfddbd76f744d1ce;
op3val:0x7fdd06cc97ae5955; valaddr_reg:x3; val_offset:3225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3225*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3b743a16ba1c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbd76f744d1ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd06cc97ae5955 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3b743a16ba1c; op2val:0xbfddbd76f744d1ce;
op3val:0x7fdd06cc97ae5955; valaddr_reg:x3; val_offset:3228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3228*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3b743a16ba1c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbd76f744d1ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd06cc97ae5955 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3b743a16ba1c; op2val:0xbfddbd76f744d1ce;
op3val:0x7fdd06cc97ae5955; valaddr_reg:x3; val_offset:3231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3231*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3b743a16ba1c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbd76f744d1ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd06cc97ae5955 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3b743a16ba1c; op2val:0xbfddbd76f744d1ce;
op3val:0x7fdd06cc97ae5955; valaddr_reg:x3; val_offset:3234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3234*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3b743a16ba1c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbd76f744d1ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd06cc97ae5955 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3b743a16ba1c; op2val:0xbfddbd76f744d1ce;
op3val:0x7fdd06cc97ae5955; valaddr_reg:x3; val_offset:3237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3237*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3c649975046b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf5b7610493341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe9bc871565d06 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3c649975046b; op2val:0xbfef5b7610493341;
op3val:0x7fee9bc871565d06; valaddr_reg:x3; val_offset:3240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3240*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3c649975046b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf5b7610493341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe9bc871565d06 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3c649975046b; op2val:0xbfef5b7610493341;
op3val:0x7fee9bc871565d06; valaddr_reg:x3; val_offset:3243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3243*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3c649975046b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf5b7610493341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe9bc871565d06 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3c649975046b; op2val:0xbfef5b7610493341;
op3val:0x7fee9bc871565d06; valaddr_reg:x3; val_offset:3246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3246*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3c649975046b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf5b7610493341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe9bc871565d06 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3c649975046b; op2val:0xbfef5b7610493341;
op3val:0x7fee9bc871565d06; valaddr_reg:x3; val_offset:3249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3249*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3c649975046b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf5b7610493341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe9bc871565d06 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3c649975046b; op2val:0xbfef5b7610493341;
op3val:0x7fee9bc871565d06; valaddr_reg:x3; val_offset:3252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3252*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf516548465a7f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0523ba07c099e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xff25b259efc09 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef516548465a7f; op2val:0xbff0523ba07c099e;
op3val:0x7feff25b259efc09; valaddr_reg:x3; val_offset:3255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3255*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf516548465a7f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0523ba07c099e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xff25b259efc09 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef516548465a7f; op2val:0xbff0523ba07c099e;
op3val:0x7feff25b259efc09; valaddr_reg:x3; val_offset:3258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3258*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf516548465a7f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0523ba07c099e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xff25b259efc09 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef516548465a7f; op2val:0xbff0523ba07c099e;
op3val:0x7feff25b259efc09; valaddr_reg:x3; val_offset:3261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3261*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf516548465a7f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0523ba07c099e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xff25b259efc09 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef516548465a7f; op2val:0xbff0523ba07c099e;
op3val:0x7feff25b259efc09; valaddr_reg:x3; val_offset:3264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3264*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf516548465a7f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0523ba07c099e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xff25b259efc09 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef516548465a7f; op2val:0xbff0523ba07c099e;
op3val:0x7feff25b259efc09; valaddr_reg:x3; val_offset:3267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3267*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf64315934059e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0308fdace1bed and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xfc3782a023015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef64315934059e; op2val:0xbfe0308fdace1bed;
op3val:0x7fdfc3782a023015; valaddr_reg:x3; val_offset:3270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3270*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf64315934059e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0308fdace1bed and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xfc3782a023015 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef64315934059e; op2val:0xbfe0308fdace1bed;
op3val:0x7fdfc3782a023015; valaddr_reg:x3; val_offset:3273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3273*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf64315934059e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0308fdace1bed and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xfc3782a023015 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef64315934059e; op2val:0xbfe0308fdace1bed;
op3val:0x7fdfc3782a023015; valaddr_reg:x3; val_offset:3276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3276*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf64315934059e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0308fdace1bed and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xfc3782a023015 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef64315934059e; op2val:0xbfe0308fdace1bed;
op3val:0x7fdfc3782a023015; valaddr_reg:x3; val_offset:3279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3279*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf64315934059e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0308fdace1bed and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xfc3782a023015 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef64315934059e; op2val:0xbfe0308fdace1bed;
op3val:0x7fdfc3782a023015; valaddr_reg:x3; val_offset:3282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3282*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6ffe64a9d644 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc6aa504850cbd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbeac3b0aa7ae7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6ffe64a9d644; op2val:0xbfec6aa504850cbd;
op3val:0x7febeac3b0aa7ae7; valaddr_reg:x3; val_offset:3285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3285*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6ffe64a9d644 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc6aa504850cbd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbeac3b0aa7ae7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6ffe64a9d644; op2val:0xbfec6aa504850cbd;
op3val:0x7febeac3b0aa7ae7; valaddr_reg:x3; val_offset:3288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3288*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6ffe64a9d644 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc6aa504850cbd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbeac3b0aa7ae7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6ffe64a9d644; op2val:0xbfec6aa504850cbd;
op3val:0x7febeac3b0aa7ae7; valaddr_reg:x3; val_offset:3291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3291*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6ffe64a9d644 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc6aa504850cbd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbeac3b0aa7ae7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6ffe64a9d644; op2val:0xbfec6aa504850cbd;
op3val:0x7febeac3b0aa7ae7; valaddr_reg:x3; val_offset:3294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3294*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf6ffe64a9d644 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc6aa504850cbd and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbeac3b0aa7ae7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef6ffe64a9d644; op2val:0xbfec6aa504850cbd;
op3val:0x7febeac3b0aa7ae7; valaddr_reg:x3; val_offset:3297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3297*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7f31753ade3e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xff99d9f7dd137 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf78e8c76fb50b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef7f31753ade3e; op2val:0xbfdff99d9f7dd137;
op3val:0x7fdf78e8c76fb50b; valaddr_reg:x3; val_offset:3300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3300*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7f31753ade3e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xff99d9f7dd137 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf78e8c76fb50b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef7f31753ade3e; op2val:0xbfdff99d9f7dd137;
op3val:0x7fdf78e8c76fb50b; valaddr_reg:x3; val_offset:3303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3303*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7f31753ade3e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xff99d9f7dd137 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf78e8c76fb50b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef7f31753ade3e; op2val:0xbfdff99d9f7dd137;
op3val:0x7fdf78e8c76fb50b; valaddr_reg:x3; val_offset:3306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3306*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7f31753ade3e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xff99d9f7dd137 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf78e8c76fb50b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef7f31753ade3e; op2val:0xbfdff99d9f7dd137;
op3val:0x7fdf78e8c76fb50b; valaddr_reg:x3; val_offset:3309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3309*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7f31753ade3e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xff99d9f7dd137 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf78e8c76fb50b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef7f31753ade3e; op2val:0xbfdff99d9f7dd137;
op3val:0x7fdf78e8c76fb50b; valaddr_reg:x3; val_offset:3312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3312*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf930a02671095 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14d99faa2cdd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x112af0fb1c5fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef930a02671095; op2val:0xbfe14d99faa2cdd7;
op3val:0x7fe112af0fb1c5fb; valaddr_reg:x3; val_offset:3315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3315*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf930a02671095 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14d99faa2cdd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x112af0fb1c5fb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef930a02671095; op2val:0xbfe14d99faa2cdd7;
op3val:0x7fe112af0fb1c5fb; valaddr_reg:x3; val_offset:3318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3318*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf930a02671095 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14d99faa2cdd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x112af0fb1c5fb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef930a02671095; op2val:0xbfe14d99faa2cdd7;
op3val:0x7fe112af0fb1c5fb; valaddr_reg:x3; val_offset:3321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3321*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf930a02671095 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14d99faa2cdd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x112af0fb1c5fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef930a02671095; op2val:0xbfe14d99faa2cdd7;
op3val:0x7fe112af0fb1c5fb; valaddr_reg:x3; val_offset:3324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3324*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf930a02671095 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14d99faa2cdd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x112af0fb1c5fb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef930a02671095; op2val:0xbfe14d99faa2cdd7;
op3val:0x7fe112af0fb1c5fb; valaddr_reg:x3; val_offset:3327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3327*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfa474c124960a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2f9e1d8e439c4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c398abf02815 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefa474c124960a; op2val:0xbfd2f9e1d8e439c4;
op3val:0x7fd2c398abf02815; valaddr_reg:x3; val_offset:3330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3330*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfa474c124960a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2f9e1d8e439c4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c398abf02815 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefa474c124960a; op2val:0xbfd2f9e1d8e439c4;
op3val:0x7fd2c398abf02815; valaddr_reg:x3; val_offset:3333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3333*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfa474c124960a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2f9e1d8e439c4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c398abf02815 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefa474c124960a; op2val:0xbfd2f9e1d8e439c4;
op3val:0x7fd2c398abf02815; valaddr_reg:x3; val_offset:3336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3336*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfa474c124960a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2f9e1d8e439c4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c398abf02815 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefa474c124960a; op2val:0xbfd2f9e1d8e439c4;
op3val:0x7fd2c398abf02815; valaddr_reg:x3; val_offset:3339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3339*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfa474c124960a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2f9e1d8e439c4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2c398abf02815 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefa474c124960a; op2val:0xbfd2f9e1d8e439c4;
op3val:0x7fd2c398abf02815; valaddr_reg:x3; val_offset:3342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3342*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xffa43e27b4aa7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb4a8b79988117 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb45a764ad5a54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feffa43e27b4aa7; op2val:0xbfeb4a8b79988117;
op3val:0x7feb45a764ad5a54; valaddr_reg:x3; val_offset:3345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3345*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xffa43e27b4aa7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb4a8b79988117 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb45a764ad5a54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feffa43e27b4aa7; op2val:0xbfeb4a8b79988117;
op3val:0x7feb45a764ad5a54; valaddr_reg:x3; val_offset:3348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3348*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xffa43e27b4aa7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb4a8b79988117 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb45a764ad5a54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feffa43e27b4aa7; op2val:0xbfeb4a8b79988117;
op3val:0x7feb45a764ad5a54; valaddr_reg:x3; val_offset:3351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3351*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xffa43e27b4aa7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb4a8b79988117 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb45a764ad5a54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feffa43e27b4aa7; op2val:0xbfeb4a8b79988117;
op3val:0x7feb45a764ad5a54; valaddr_reg:x3; val_offset:3354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3354*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xffa43e27b4aa7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb4a8b79988117 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb45a764ad5a54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feffa43e27b4aa7; op2val:0xbfeb4a8b79988117;
op3val:0x7feb45a764ad5a54; valaddr_reg:x3; val_offset:3357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3357*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0x5a5a59bbb3fff and fs2 == 1 and fe2 == 0x408 and fm2 == 0x32d10b0d92edf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9f1ad1f9dea0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f45a5a59bbb3fff; op2val:0xc0832d10b0d92edf;
op3val:0x7fd9f1ad1f9dea0f; valaddr_reg:x3; val_offset:3360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3360*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0x5a5a59bbb3fff and fs2 == 1 and fe2 == 0x408 and fm2 == 0x32d10b0d92edf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9f1ad1f9dea0f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f45a5a59bbb3fff; op2val:0xc0832d10b0d92edf;
op3val:0x7fd9f1ad1f9dea0f; valaddr_reg:x3; val_offset:3363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3363*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0x5a5a59bbb3fff and fs2 == 1 and fe2 == 0x408 and fm2 == 0x32d10b0d92edf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9f1ad1f9dea0f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f45a5a59bbb3fff; op2val:0xc0832d10b0d92edf;
op3val:0x7fd9f1ad1f9dea0f; valaddr_reg:x3; val_offset:3366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3366*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0x5a5a59bbb3fff and fs2 == 1 and fe2 == 0x408 and fm2 == 0x32d10b0d92edf and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9f1ad1f9dea0f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f45a5a59bbb3fff; op2val:0xc0832d10b0d92edf;
op3val:0x7fd9f1ad1f9dea0f; valaddr_reg:x3; val_offset:3369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3369*FLEN/8, x4, x1, x2)

inst_1124:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:3372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3372*FLEN/8, x4, x1, x2)

inst_1125:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:3375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3375*FLEN/8, x4, x1, x2)

inst_1126:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:3378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3378*FLEN/8, x4, x1, x2)

inst_1127:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:3381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3381*FLEN/8, x4, x1, x2)

inst_1128:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xd144fc758c3ff and fs2 == 1 and fe2 == 0x407 and fm2 == 0xeaf869e3b1341 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe28c340570cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f5d144fc758c3ff; op2val:0xc07eaf869e3b1341;
op3val:0x7febe28c340570cd; valaddr_reg:x3; val_offset:3384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3384*FLEN/8, x4, x1, x2)

inst_1129:
// fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:3387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3387*FLEN/8, x4, x1, x2)

inst_1130:
// fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xbb6ea62484dff and fs2 == 1 and fe2 == 0x406 and fm2 == 0x90c64fc55e97f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5b1a32ad4a90d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f6bb6ea62484dff; op2val:0xc0690c64fc55e97f;
op3val:0x7fe5b1a32ad4a90d; valaddr_reg:x3; val_offset:3390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3390*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(13871980826941009631,64,FLEN)
NAN_BOXED(9212660238625139215,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(13871980826941009631,64,FLEN)
NAN_BOXED(9212660238625139215,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(9212660238625139215,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(9212660238625139215,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9198580926962723135,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9198580926962723135,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9198580926962723135,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9198580926962723135,64,FLEN)
NAN_BOXED(9188072973904128191,64,FLEN)
NAN_BOXED(13840853144171413668,64,FLEN)
NAN_BOXED(9198580926962723135,64,FLEN)
NAN_BOXED(9189515434467785215,64,FLEN)
NAN_BOXED(13855216328841862403,64,FLEN)
NAN_BOXED(9214788093928294725,64,FLEN)
NAN_BOXED(9189515434467785215,64,FLEN)
NAN_BOXED(13855216328841862403,64,FLEN)
NAN_BOXED(9214788093928294725,64,FLEN)
NAN_BOXED(9189515434467785215,64,FLEN)
NAN_BOXED(13855216328841862403,64,FLEN)
NAN_BOXED(9214788093928294725,64,FLEN)
NAN_BOXED(9189515434467785215,64,FLEN)
NAN_BOXED(13855216328841862403,64,FLEN)
NAN_BOXED(9214788093928294725,64,FLEN)
NAN_BOXED(9189515434467785215,64,FLEN)
NAN_BOXED(13855216328841862403,64,FLEN)
NAN_BOXED(9214788093928294725,64,FLEN)
NAN_BOXED(9190399455804709631,64,FLEN)
NAN_BOXED(13848717010951169984,64,FLEN)
NAN_BOXED(9208662552706795875,64,FLEN)
NAN_BOXED(9190399455804709631,64,FLEN)
NAN_BOXED(13848717010951169984,64,FLEN)
NAN_BOXED(9208662552706795875,64,FLEN)
NAN_BOXED(9190399455804709631,64,FLEN)
NAN_BOXED(13848717010951169984,64,FLEN)
NAN_BOXED(9208662552706795875,64,FLEN)
NAN_BOXED(9190399455804709631,64,FLEN)
NAN_BOXED(13848717010951169984,64,FLEN)
NAN_BOXED(9208662552706795875,64,FLEN)
NAN_BOXED(9190399455804709631,64,FLEN)
NAN_BOXED(13848717010951169984,64,FLEN)
NAN_BOXED(9208662552706795875,64,FLEN)
NAN_BOXED(9190450822536017791,64,FLEN)
NAN_BOXED(13854245603946746927,64,FLEN)
NAN_BOXED(9214658153906291536,64,FLEN)
NAN_BOXED(9190450822536017791,64,FLEN)
NAN_BOXED(13854245603946746927,64,FLEN)
NAN_BOXED(9214658153906291536,64,FLEN)
NAN_BOXED(9190450822536017791,64,FLEN)
NAN_BOXED(13854245603946746927,64,FLEN)
NAN_BOXED(9214658153906291536,64,FLEN)
NAN_BOXED(9190450822536017791,64,FLEN)
NAN_BOXED(13854245603946746927,64,FLEN)
NAN_BOXED(9214658153906291536,64,FLEN)
NAN_BOXED(9190450822536017791,64,FLEN)
NAN_BOXED(13854245603946746927,64,FLEN)
NAN_BOXED(9214658153906291536,64,FLEN)
NAN_BOXED(9191233206446121791,64,FLEN)
NAN_BOXED(13856092462410091810,64,FLEN)
NAN_BOXED(9216872285732530539,64,FLEN)
NAN_BOXED(9191233206446121791,64,FLEN)
NAN_BOXED(13856092462410091810,64,FLEN)
NAN_BOXED(9216872285732530539,64,FLEN)
NAN_BOXED(9191233206446121791,64,FLEN)
NAN_BOXED(13856092462410091810,64,FLEN)
NAN_BOXED(9216872285732530539,64,FLEN)
NAN_BOXED(9191233206446121791,64,FLEN)
NAN_BOXED(13856092462410091810,64,FLEN)
NAN_BOXED(9216872285732530539,64,FLEN)
NAN_BOXED(9191233206446121791,64,FLEN)
NAN_BOXED(13856092462410091810,64,FLEN)
NAN_BOXED(9216872285732530539,64,FLEN)
NAN_BOXED(9192550852354099935,64,FLEN)
NAN_BOXED(13854704960061443314,64,FLEN)
NAN_BOXED(9216956553837207819,64,FLEN)
NAN_BOXED(9192550852354099935,64,FLEN)
NAN_BOXED(13854704960061443314,64,FLEN)
NAN_BOXED(9216956553837207819,64,FLEN)
NAN_BOXED(9192550852354099935,64,FLEN)
NAN_BOXED(13854704960061443314,64,FLEN)
NAN_BOXED(9216956553837207819,64,FLEN)
NAN_BOXED(9192550852354099935,64,FLEN)
NAN_BOXED(13854704960061443314,64,FLEN)
NAN_BOXED(9216956553837207819,64,FLEN)
NAN_BOXED(9192550852354099935,64,FLEN)
NAN_BOXED(13854704960061443314,64,FLEN)
NAN_BOXED(9216956553837207819,64,FLEN)
NAN_BOXED(9194708488840900415,64,FLEN)
NAN_BOXED(13852024817334666009,64,FLEN)
NAN_BOXED(9216369827415303142,64,FLEN)
NAN_BOXED(9194708488840900415,64,FLEN)
NAN_BOXED(13852024817334666009,64,FLEN)
NAN_BOXED(9216369827415303142,64,FLEN)
NAN_BOXED(9194708488840900415,64,FLEN)
NAN_BOXED(13852024817334666009,64,FLEN)
NAN_BOXED(9216369827415303142,64,FLEN)
NAN_BOXED(9194708488840900415,64,FLEN)
NAN_BOXED(13852024817334666009,64,FLEN)
NAN_BOXED(9216369827415303142,64,FLEN)
NAN_BOXED(9194708488840900415,64,FLEN)
NAN_BOXED(13852024817334666009,64,FLEN)
NAN_BOXED(9216369827415303142,64,FLEN)
NAN_BOXED(9195304743823041055,64,FLEN)
NAN_BOXED(13841580749310163851,64,FLEN)
NAN_BOXED(9206619477345703811,64,FLEN)
NAN_BOXED(9195304743823041055,64,FLEN)
NAN_BOXED(13841580749310163851,64,FLEN)
NAN_BOXED(9206619477345703811,64,FLEN)
NAN_BOXED(9195304743823041055,64,FLEN)
NAN_BOXED(13841580749310163851,64,FLEN)
NAN_BOXED(9206619477345703811,64,FLEN)
NAN_BOXED(9195304743823041055,64,FLEN)
NAN_BOXED(13841580749310163851,64,FLEN)
NAN_BOXED(9206619477345703811,64,FLEN)
NAN_BOXED(9195304743823041055,64,FLEN)
NAN_BOXED(13841580749310163851,64,FLEN)
NAN_BOXED(9206619477345703811,64,FLEN)
NAN_BOXED(9195703427694364383,64,FLEN)
NAN_BOXED(13848583789075419900,64,FLEN)
NAN_BOXED(9213745550396303809,64,FLEN)
NAN_BOXED(9195703427694364383,64,FLEN)
NAN_BOXED(13848583789075419900,64,FLEN)
NAN_BOXED(9213745550396303809,64,FLEN)
NAN_BOXED(9195703427694364383,64,FLEN)
NAN_BOXED(13848583789075419900,64,FLEN)
NAN_BOXED(9213745550396303809,64,FLEN)
NAN_BOXED(9195703427694364383,64,FLEN)
NAN_BOXED(13848583789075419900,64,FLEN)
NAN_BOXED(9213745550396303809,64,FLEN)
NAN_BOXED(9195703427694364383,64,FLEN)
NAN_BOXED(13848583789075419900,64,FLEN)
NAN_BOXED(9213745550396303809,64,FLEN)
NAN_BOXED(9195834788628631391,64,FLEN)
NAN_BOXED(13850992086075467707,64,FLEN)
NAN_BOXED(9216391517399800237,64,FLEN)
NAN_BOXED(9195834788628631391,64,FLEN)
NAN_BOXED(13850992086075467707,64,FLEN)
NAN_BOXED(9216391517399800237,64,FLEN)
NAN_BOXED(9195834788628631391,64,FLEN)
NAN_BOXED(13850992086075467707,64,FLEN)
NAN_BOXED(9216391517399800237,64,FLEN)
NAN_BOXED(9195834788628631391,64,FLEN)
NAN_BOXED(13850992086075467707,64,FLEN)
NAN_BOXED(9216391517399800237,64,FLEN)
NAN_BOXED(9195834788628631391,64,FLEN)
NAN_BOXED(13850992086075467707,64,FLEN)
NAN_BOXED(9216391517399800237,64,FLEN)
NAN_BOXED(9196562464233125967,64,FLEN)
NAN_BOXED(13848053145837205274,64,FLEN)
NAN_BOXED(9214248900505659733,64,FLEN)
NAN_BOXED(9196562464233125967,64,FLEN)
NAN_BOXED(13848053145837205274,64,FLEN)
NAN_BOXED(9214248900505659733,64,FLEN)
NAN_BOXED(9196562464233125967,64,FLEN)
NAN_BOXED(13848053145837205274,64,FLEN)
NAN_BOXED(9214248900505659733,64,FLEN)
NAN_BOXED(9196562464233125967,64,FLEN)
NAN_BOXED(13848053145837205274,64,FLEN)
NAN_BOXED(9214248900505659733,64,FLEN)
NAN_BOXED(9196562464233125967,64,FLEN)
NAN_BOXED(13848053145837205274,64,FLEN)
NAN_BOXED(9214248900505659733,64,FLEN)
NAN_BOXED(9197096799182944159,64,FLEN)
NAN_BOXED(13842859632276427523,64,FLEN)
NAN_BOXED(9209904885920498409,64,FLEN)
NAN_BOXED(9197096799182944159,64,FLEN)
NAN_BOXED(13842859632276427523,64,FLEN)
NAN_BOXED(9209904885920498409,64,FLEN)
NAN_BOXED(9197096799182944159,64,FLEN)
NAN_BOXED(13842859632276427523,64,FLEN)
NAN_BOXED(9209904885920498409,64,FLEN)
NAN_BOXED(9197096799182944159,64,FLEN)
NAN_BOXED(13842859632276427523,64,FLEN)
NAN_BOXED(9209904885920498409,64,FLEN)
NAN_BOXED(9197096799182944159,64,FLEN)
NAN_BOXED(13842859632276427523,64,FLEN)
NAN_BOXED(9209904885920498409,64,FLEN)
NAN_BOXED(9197126006496158671,64,FLEN)
NAN_BOXED(13851332729362538282,64,FLEN)
NAN_BOXED(9218380248694510169,64,FLEN)
NAN_BOXED(9197126006496158671,64,FLEN)
NAN_BOXED(13851332729362538282,64,FLEN)
NAN_BOXED(9218380248694510169,64,FLEN)
NAN_BOXED(9197126006496158671,64,FLEN)
NAN_BOXED(13851332729362538282,64,FLEN)
NAN_BOXED(9218380248694510169,64,FLEN)
NAN_BOXED(9197126006496158671,64,FLEN)
NAN_BOXED(13851332729362538282,64,FLEN)
NAN_BOXED(9218380248694510169,64,FLEN)
NAN_BOXED(9197126006496158671,64,FLEN)
NAN_BOXED(13851332729362538282,64,FLEN)
NAN_BOXED(9218380248694510169,64,FLEN)
NAN_BOXED(9199579944022810079,64,FLEN)
NAN_BOXED(13836882799233836017,64,FLEN)
NAN_BOXED(9206287219577137491,64,FLEN)
NAN_BOXED(9199579944022810079,64,FLEN)
NAN_BOXED(13836882799233836017,64,FLEN)
NAN_BOXED(9206287219577137491,64,FLEN)
NAN_BOXED(9199579944022810079,64,FLEN)
NAN_BOXED(13836882799233836017,64,FLEN)
NAN_BOXED(9206287219577137491,64,FLEN)
NAN_BOXED(9199579944022810079,64,FLEN)
NAN_BOXED(13836882799233836017,64,FLEN)
NAN_BOXED(9206287219577137491,64,FLEN)
NAN_BOXED(9199579944022810079,64,FLEN)
NAN_BOXED(13836882799233836017,64,FLEN)
NAN_BOXED(9206287219577137491,64,FLEN)
NAN_BOXED(9199649669642414495,64,FLEN)
NAN_BOXED(13836107819056163023,64,FLEN)
NAN_BOXED(9205664851748582515,64,FLEN)
NAN_BOXED(9199649669642414495,64,FLEN)
NAN_BOXED(13836107819056163023,64,FLEN)
NAN_BOXED(9205664851748582515,64,FLEN)
NAN_BOXED(9199649669642414495,64,FLEN)
NAN_BOXED(13836107819056163023,64,FLEN)
NAN_BOXED(9205664851748582515,64,FLEN)
NAN_BOXED(9199649669642414495,64,FLEN)
NAN_BOXED(13836107819056163023,64,FLEN)
NAN_BOXED(9205664851748582515,64,FLEN)
NAN_BOXED(9199649669642414495,64,FLEN)
NAN_BOXED(13836107819056163023,64,FLEN)
NAN_BOXED(9205664851748582515,64,FLEN)
NAN_BOXED(9199875097537070047,64,FLEN)
NAN_BOXED(13848693928298871424,64,FLEN)
NAN_BOXED(9218112457125242086,64,FLEN)
NAN_BOXED(9199875097537070047,64,FLEN)
NAN_BOXED(13848693928298871424,64,FLEN)
NAN_BOXED(9218112457125242086,64,FLEN)
NAN_BOXED(9199875097537070047,64,FLEN)
NAN_BOXED(13848693928298871424,64,FLEN)
NAN_BOXED(9218112457125242086,64,FLEN)
NAN_BOXED(9199875097537070047,64,FLEN)
NAN_BOXED(13848693928298871424,64,FLEN)
NAN_BOXED(9218112457125242086,64,FLEN)
NAN_BOXED(9199875097537070047,64,FLEN)
NAN_BOXED(13848693928298871424,64,FLEN)
NAN_BOXED(9218112457125242086,64,FLEN)
NAN_BOXED(9199881437079719055,64,FLEN)
NAN_BOXED(13846602629165334017,64,FLEN)
NAN_BOXED(9216141924496165936,64,FLEN)
NAN_BOXED(9199881437079719055,64,FLEN)
NAN_BOXED(13846602629165334017,64,FLEN)
NAN_BOXED(9216141924496165936,64,FLEN)
NAN_BOXED(9199881437079719055,64,FLEN)
NAN_BOXED(13846602629165334017,64,FLEN)
NAN_BOXED(9216141924496165936,64,FLEN)
NAN_BOXED(9199881437079719055,64,FLEN)
NAN_BOXED(13846602629165334017,64,FLEN)
NAN_BOXED(9216141924496165936,64,FLEN)
NAN_BOXED(9199881437079719055,64,FLEN)
NAN_BOXED(13846602629165334017,64,FLEN)
NAN_BOXED(9216141924496165936,64,FLEN)
NAN_BOXED(9201110151538901111,64,FLEN)
NAN_BOXED(13846688869398772240,64,FLEN)
NAN_BOXED(9217393766246337994,64,FLEN)
NAN_BOXED(9201110151538901111,64,FLEN)
NAN_BOXED(13846688869398772240,64,FLEN)
NAN_BOXED(9217393766246337994,64,FLEN)
NAN_BOXED(9201110151538901111,64,FLEN)
NAN_BOXED(13846688869398772240,64,FLEN)
NAN_BOXED(9217393766246337994,64,FLEN)
NAN_BOXED(9201110151538901111,64,FLEN)
NAN_BOXED(13846688869398772240,64,FLEN)
NAN_BOXED(9217393766246337994,64,FLEN)
NAN_BOXED(9201110151538901111,64,FLEN)
NAN_BOXED(13846688869398772240,64,FLEN)
NAN_BOXED(9217393766246337994,64,FLEN)
NAN_BOXED(9201538869792912079,64,FLEN)
NAN_BOXED(13828747773534358983,64,FLEN)
NAN_BOXED(9200142289162007791,64,FLEN)
NAN_BOXED(9201538869792912079,64,FLEN)
NAN_BOXED(13828747773534358983,64,FLEN)
NAN_BOXED(9200142289162007791,64,FLEN)
NAN_BOXED(9201538869792912079,64,FLEN)
NAN_BOXED(13828747773534358983,64,FLEN)
NAN_BOXED(9200142289162007791,64,FLEN)
NAN_BOXED(9201538869792912079,64,FLEN)
NAN_BOXED(13828747773534358983,64,FLEN)
NAN_BOXED(9200142289162007791,64,FLEN)
NAN_BOXED(9201538869792912079,64,FLEN)
NAN_BOXED(13828747773534358983,64,FLEN)
NAN_BOXED(9200142289162007791,64,FLEN)
NAN_BOXED(9201985071447198455,64,FLEN)
NAN_BOXED(13834624697135284215,64,FLEN)
NAN_BOXED(9206217575280264419,64,FLEN)
NAN_BOXED(9201985071447198455,64,FLEN)
NAN_BOXED(13834624697135284215,64,FLEN)
NAN_BOXED(9206217575280264419,64,FLEN)
NAN_BOXED(9201985071447198455,64,FLEN)
NAN_BOXED(13834624697135284215,64,FLEN)
NAN_BOXED(9206217575280264419,64,FLEN)
NAN_BOXED(9201985071447198455,64,FLEN)
NAN_BOXED(13834624697135284215,64,FLEN)
NAN_BOXED(9206217575280264419,64,FLEN)
NAN_BOXED(9201985071447198455,64,FLEN)
NAN_BOXED(13834624697135284215,64,FLEN)
NAN_BOXED(9206217575280264419,64,FLEN)
NAN_BOXED(9202492870233677071,64,FLEN)
NAN_BOXED(13843880425710683453,64,FLEN)
NAN_BOXED(9215877625680285460,64,FLEN)
NAN_BOXED(9202492870233677071,64,FLEN)
NAN_BOXED(13843880425710683453,64,FLEN)
NAN_BOXED(9215877625680285460,64,FLEN)
NAN_BOXED(9202492870233677071,64,FLEN)
NAN_BOXED(13843880425710683453,64,FLEN)
NAN_BOXED(9215877625680285460,64,FLEN)
NAN_BOXED(9202492870233677071,64,FLEN)
NAN_BOXED(13843880425710683453,64,FLEN)
NAN_BOXED(9215877625680285460,64,FLEN)
NAN_BOXED(9202492870233677071,64,FLEN)
NAN_BOXED(13843880425710683453,64,FLEN)
NAN_BOXED(9215877625680285460,64,FLEN)
NAN_BOXED(9202773466845893991,64,FLEN)
NAN_BOXED(13837433586046455492,64,FLEN)
NAN_BOXED(9210263141619799575,64,FLEN)
NAN_BOXED(9202773466845893991,64,FLEN)
NAN_BOXED(13837433586046455492,64,FLEN)
NAN_BOXED(9210263141619799575,64,FLEN)
NAN_BOXED(9202773466845893991,64,FLEN)
NAN_BOXED(13837433586046455492,64,FLEN)
NAN_BOXED(9210263141619799575,64,FLEN)
NAN_BOXED(9202773466845893991,64,FLEN)
NAN_BOXED(13837433586046455492,64,FLEN)
NAN_BOXED(9210263141619799575,64,FLEN)
NAN_BOXED(9202773466845893991,64,FLEN)
NAN_BOXED(13837433586046455492,64,FLEN)
NAN_BOXED(9210263141619799575,64,FLEN)
NAN_BOXED(9202920526188697943,64,FLEN)
NAN_BOXED(13832214731384364763,64,FLEN)
NAN_BOXED(9205342623411534423,64,FLEN)
NAN_BOXED(9202920526188697943,64,FLEN)
NAN_BOXED(13832214731384364763,64,FLEN)
NAN_BOXED(9205342623411534423,64,FLEN)
NAN_BOXED(9202920526188697943,64,FLEN)
NAN_BOXED(13832214731384364763,64,FLEN)
NAN_BOXED(9205342623411534423,64,FLEN)
NAN_BOXED(9202920526188697943,64,FLEN)
NAN_BOXED(13832214731384364763,64,FLEN)
NAN_BOXED(9205342623411534423,64,FLEN)
NAN_BOXED(9202920526188697943,64,FLEN)
NAN_BOXED(13832214731384364763,64,FLEN)
NAN_BOXED(9205342623411534423,64,FLEN)
NAN_BOXED(9202920640727475543,64,FLEN)
NAN_BOXED(13838969465715764405,64,FLEN)
NAN_BOXED(9211495874140201177,64,FLEN)
NAN_BOXED(9202920640727475543,64,FLEN)
NAN_BOXED(13838969465715764405,64,FLEN)
NAN_BOXED(9211495874140201177,64,FLEN)
NAN_BOXED(9202920640727475543,64,FLEN)
NAN_BOXED(13838969465715764405,64,FLEN)
NAN_BOXED(9211495874140201177,64,FLEN)
NAN_BOXED(9202920640727475543,64,FLEN)
NAN_BOXED(13838969465715764405,64,FLEN)
NAN_BOXED(9211495874140201177,64,FLEN)
NAN_BOXED(9202920640727475543,64,FLEN)
NAN_BOXED(13838969465715764405,64,FLEN)
NAN_BOXED(9211495874140201177,64,FLEN)
NAN_BOXED(9203339935743996151,64,FLEN)
NAN_BOXED(13823203098546289814,64,FLEN)
NAN_BOXED(9196626504756037087,64,FLEN)
NAN_BOXED(9203339935743996151,64,FLEN)
NAN_BOXED(13823203098546289814,64,FLEN)
NAN_BOXED(9196626504756037087,64,FLEN)
NAN_BOXED(9203339935743996151,64,FLEN)
NAN_BOXED(13823203098546289814,64,FLEN)
NAN_BOXED(9196626504756037087,64,FLEN)
NAN_BOXED(9203339935743996151,64,FLEN)
NAN_BOXED(13823203098546289814,64,FLEN)
NAN_BOXED(9196626504756037087,64,FLEN)
NAN_BOXED(9203339935743996151,64,FLEN)
NAN_BOXED(13823203098546289814,64,FLEN)
NAN_BOXED(9196626504756037087,64,FLEN)
NAN_BOXED(9204033984276134655,64,FLEN)
NAN_BOXED(13839646471779116258,64,FLEN)
NAN_BOXED(9213185888723133997,64,FLEN)
NAN_BOXED(9204033984276134655,64,FLEN)
NAN_BOXED(13839646471779116258,64,FLEN)
NAN_BOXED(9213185888723133997,64,FLEN)
NAN_BOXED(9204033984276134655,64,FLEN)
NAN_BOXED(13839646471779116258,64,FLEN)
NAN_BOXED(9213185888723133997,64,FLEN)
NAN_BOXED(9204033984276134655,64,FLEN)
NAN_BOXED(13839646471779116258,64,FLEN)
NAN_BOXED(9213185888723133997,64,FLEN)
NAN_BOXED(9204033984276134655,64,FLEN)
NAN_BOXED(13839646471779116258,64,FLEN)
NAN_BOXED(9213185888723133997,64,FLEN)
NAN_BOXED(9204126774981488631,64,FLEN)
NAN_BOXED(13840961108429983005,64,FLEN)
NAN_BOXED(9214957619518273718,64,FLEN)
NAN_BOXED(9204126774981488631,64,FLEN)
NAN_BOXED(13840961108429983005,64,FLEN)
NAN_BOXED(9214957619518273718,64,FLEN)
NAN_BOXED(9204126774981488631,64,FLEN)
NAN_BOXED(13840961108429983005,64,FLEN)
NAN_BOXED(9214957619518273718,64,FLEN)
NAN_BOXED(9204126774981488631,64,FLEN)
NAN_BOXED(13840961108429983005,64,FLEN)
NAN_BOXED(9214957619518273718,64,FLEN)
NAN_BOXED(9204126774981488631,64,FLEN)
NAN_BOXED(13840961108429983005,64,FLEN)
NAN_BOXED(9214957619518273718,64,FLEN)
NAN_BOXED(9204136468864259943,64,FLEN)
NAN_BOXED(13842856286919786411,64,FLEN)
NAN_BOXED(9216602208389282583,64,FLEN)
NAN_BOXED(9204136468864259943,64,FLEN)
NAN_BOXED(13842856286919786411,64,FLEN)
NAN_BOXED(9216602208389282583,64,FLEN)
NAN_BOXED(9204136468864259943,64,FLEN)
NAN_BOXED(13842856286919786411,64,FLEN)
NAN_BOXED(9216602208389282583,64,FLEN)
NAN_BOXED(9204136468864259943,64,FLEN)
NAN_BOXED(13842856286919786411,64,FLEN)
NAN_BOXED(9216602208389282583,64,FLEN)
NAN_BOXED(9204136468864259943,64,FLEN)
NAN_BOXED(13842856286919786411,64,FLEN)
NAN_BOXED(9216602208389282583,64,FLEN)
NAN_BOXED(9204148131348902983,64,FLEN)
NAN_BOXED(13838445067716618566,64,FLEN)
NAN_BOXED(9212188681253082717,64,FLEN)
NAN_BOXED(9204148131348902983,64,FLEN)
NAN_BOXED(13838445067716618566,64,FLEN)
NAN_BOXED(9212188681253082717,64,FLEN)
NAN_BOXED(9204148131348902983,64,FLEN)
NAN_BOXED(13838445067716618566,64,FLEN)
NAN_BOXED(9212188681253082717,64,FLEN)
NAN_BOXED(9204148131348902983,64,FLEN)
NAN_BOXED(13838445067716618566,64,FLEN)
NAN_BOXED(9212188681253082717,64,FLEN)
NAN_BOXED(9204148131348902983,64,FLEN)
NAN_BOXED(13838445067716618566,64,FLEN)
NAN_BOXED(9212188681253082717,64,FLEN)
NAN_BOXED(9204642426265475671,64,FLEN)
NAN_BOXED(13843192263755188880,64,FLEN)
NAN_BOXED(9217349553755283577,64,FLEN)
NAN_BOXED(9204642426265475671,64,FLEN)
NAN_BOXED(13843192263755188880,64,FLEN)
NAN_BOXED(9217349553755283577,64,FLEN)
NAN_BOXED(9204642426265475671,64,FLEN)
NAN_BOXED(13843192263755188880,64,FLEN)
NAN_BOXED(9217349553755283577,64,FLEN)
NAN_BOXED(9204642426265475671,64,FLEN)
NAN_BOXED(13843192263755188880,64,FLEN)
NAN_BOXED(9217349553755283577,64,FLEN)
NAN_BOXED(9204642426265475671,64,FLEN)
NAN_BOXED(13843192263755188880,64,FLEN)
NAN_BOXED(9217349553755283577,64,FLEN)
NAN_BOXED(9205133251891377079,64,FLEN)
NAN_BOXED(13840800772565429438,64,FLEN)
NAN_BOXED(9215460893252903951,64,FLEN)
NAN_BOXED(9205133251891377079,64,FLEN)
NAN_BOXED(13840800772565429438,64,FLEN)
NAN_BOXED(9215460893252903951,64,FLEN)
NAN_BOXED(9205133251891377079,64,FLEN)
NAN_BOXED(13840800772565429438,64,FLEN)
NAN_BOXED(9215460893252903951,64,FLEN)
NAN_BOXED(9205133251891377079,64,FLEN)
NAN_BOXED(13840800772565429438,64,FLEN)
NAN_BOXED(9215460893252903951,64,FLEN)
NAN_BOXED(9205133251891377079,64,FLEN)
NAN_BOXED(13840800772565429438,64,FLEN)
NAN_BOXED(9215460893252903951,64,FLEN)
NAN_BOXED(9206103503242040027,64,FLEN)
NAN_BOXED(13825097447963491190,64,FLEN)
NAN_BOXED(9201044250112724295,64,FLEN)
NAN_BOXED(9206103503242040027,64,FLEN)
NAN_BOXED(13825097447963491190,64,FLEN)
NAN_BOXED(9201044250112724295,64,FLEN)
NAN_BOXED(9206103503242040027,64,FLEN)
NAN_BOXED(13825097447963491190,64,FLEN)
NAN_BOXED(9201044250112724295,64,FLEN)
NAN_BOXED(9206103503242040027,64,FLEN)
NAN_BOXED(13825097447963491190,64,FLEN)
NAN_BOXED(9201044250112724295,64,FLEN)
NAN_BOXED(9206103503242040027,64,FLEN)
NAN_BOXED(13825097447963491190,64,FLEN)
NAN_BOXED(9201044250112724295,64,FLEN)
NAN_BOXED(9206231168942389619,64,FLEN)
NAN_BOXED(13841430688337318049,64,FLEN)
NAN_BOXED(9217469924500225478,64,FLEN)
NAN_BOXED(9206231168942389619,64,FLEN)
NAN_BOXED(13841430688337318049,64,FLEN)
NAN_BOXED(9217469924500225478,64,FLEN)
NAN_BOXED(9206231168942389619,64,FLEN)
NAN_BOXED(13841430688337318049,64,FLEN)
NAN_BOXED(9217469924500225478,64,FLEN)
NAN_BOXED(9206231168942389619,64,FLEN)
NAN_BOXED(13841430688337318049,64,FLEN)
NAN_BOXED(9217469924500225478,64,FLEN)
NAN_BOXED(9206231168942389619,64,FLEN)
NAN_BOXED(13841430688337318049,64,FLEN)
NAN_BOXED(9217469924500225478,64,FLEN)
NAN_BOXED(9206248630702173035,64,FLEN)
NAN_BOXED(13839649572675263902,64,FLEN)
NAN_BOXED(9215361141377448864,64,FLEN)
NAN_BOXED(9206248630702173035,64,FLEN)
NAN_BOXED(13839649572675263902,64,FLEN)
NAN_BOXED(9215361141377448864,64,FLEN)
NAN_BOXED(9206248630702173035,64,FLEN)
NAN_BOXED(13839649572675263902,64,FLEN)
NAN_BOXED(9215361141377448864,64,FLEN)
NAN_BOXED(9206248630702173035,64,FLEN)
NAN_BOXED(13839649572675263902,64,FLEN)
NAN_BOXED(9215361141377448864,64,FLEN)
NAN_BOXED(9206248630702173035,64,FLEN)
NAN_BOXED(13839649572675263902,64,FLEN)
NAN_BOXED(9215361141377448864,64,FLEN)
NAN_BOXED(9206298321698238167,64,FLEN)
NAN_BOXED(13839762151985537923,64,FLEN)
NAN_BOXED(9215547896587761606,64,FLEN)
NAN_BOXED(9206298321698238167,64,FLEN)
NAN_BOXED(13839762151985537923,64,FLEN)
NAN_BOXED(9215547896587761606,64,FLEN)
NAN_BOXED(9206298321698238167,64,FLEN)
NAN_BOXED(13839762151985537923,64,FLEN)
NAN_BOXED(9215547896587761606,64,FLEN)
NAN_BOXED(9206298321698238167,64,FLEN)
NAN_BOXED(13839762151985537923,64,FLEN)
NAN_BOXED(9215547896587761606,64,FLEN)
NAN_BOXED(9206298321698238167,64,FLEN)
NAN_BOXED(13839762151985537923,64,FLEN)
NAN_BOXED(9215547896587761606,64,FLEN)
NAN_BOXED(9206385458761636039,64,FLEN)
NAN_BOXED(13839147182294004731,64,FLEN)
NAN_BOXED(9215138125828482659,64,FLEN)
NAN_BOXED(9206385458761636039,64,FLEN)
NAN_BOXED(13839147182294004731,64,FLEN)
NAN_BOXED(9215138125828482659,64,FLEN)
NAN_BOXED(9206385458761636039,64,FLEN)
NAN_BOXED(13839147182294004731,64,FLEN)
NAN_BOXED(9215138125828482659,64,FLEN)
NAN_BOXED(9206385458761636039,64,FLEN)
NAN_BOXED(13839147182294004731,64,FLEN)
NAN_BOXED(9215138125828482659,64,FLEN)
NAN_BOXED(9206385458761636039,64,FLEN)
NAN_BOXED(13839147182294004731,64,FLEN)
NAN_BOXED(9215138125828482659,64,FLEN)
NAN_BOXED(9206673751004259787,64,FLEN)
NAN_BOXED(13822458384208168388,64,FLEN)
NAN_BOXED(9198843943644457823,64,FLEN)
NAN_BOXED(9206673751004259787,64,FLEN)
NAN_BOXED(13822458384208168388,64,FLEN)
NAN_BOXED(9198843943644457823,64,FLEN)
NAN_BOXED(9206673751004259787,64,FLEN)
NAN_BOXED(13822458384208168388,64,FLEN)
NAN_BOXED(9198843943644457823,64,FLEN)
NAN_BOXED(9206673751004259787,64,FLEN)
NAN_BOXED(13822458384208168388,64,FLEN)
NAN_BOXED(9198843943644457823,64,FLEN)
NAN_BOXED(9206673751004259787,64,FLEN)
NAN_BOXED(13822458384208168388,64,FLEN)
NAN_BOXED(9198843943644457823,64,FLEN)
NAN_BOXED(9206841038229843703,64,FLEN)
NAN_BOXED(13840726562585481467,64,FLEN)
NAN_BOXED(9217396843547375540,64,FLEN)
NAN_BOXED(9206841038229843703,64,FLEN)
NAN_BOXED(13840726562585481467,64,FLEN)
NAN_BOXED(9217396843547375540,64,FLEN)
NAN_BOXED(9206841038229843703,64,FLEN)
NAN_BOXED(13840726562585481467,64,FLEN)
NAN_BOXED(9217396843547375540,64,FLEN)
NAN_BOXED(9206841038229843703,64,FLEN)
NAN_BOXED(13840726562585481467,64,FLEN)
NAN_BOXED(9217396843547375540,64,FLEN)
NAN_BOXED(9206841038229843703,64,FLEN)
NAN_BOXED(13840726562585481467,64,FLEN)
NAN_BOXED(9217396843547375540,64,FLEN)
NAN_BOXED(9207372350226086527,64,FLEN)
NAN_BOXED(13841002340069541768,64,FLEN)
NAN_BOXED(9218464733652405448,64,FLEN)
NAN_BOXED(9207372350226086527,64,FLEN)
NAN_BOXED(13841002340069541768,64,FLEN)
NAN_BOXED(9218464733652405448,64,FLEN)
NAN_BOXED(9207372350226086527,64,FLEN)
NAN_BOXED(13841002340069541768,64,FLEN)
NAN_BOXED(9218464733652405448,64,FLEN)
NAN_BOXED(9207372350226086527,64,FLEN)
NAN_BOXED(13841002340069541768,64,FLEN)
NAN_BOXED(9218464733652405448,64,FLEN)
NAN_BOXED(9207372350226086527,64,FLEN)
NAN_BOXED(13841002340069541768,64,FLEN)
NAN_BOXED(9218464733652405448,64,FLEN)
NAN_BOXED(9207820570576940023,64,FLEN)
NAN_BOXED(13819184130238014904,64,FLEN)
NAN_BOXED(9196985634061247071,64,FLEN)
NAN_BOXED(9207820570576940023,64,FLEN)
NAN_BOXED(13819184130238014904,64,FLEN)
NAN_BOXED(9196985634061247071,64,FLEN)
NAN_BOXED(9207820570576940023,64,FLEN)
NAN_BOXED(13819184130238014904,64,FLEN)
NAN_BOXED(9196985634061247071,64,FLEN)
NAN_BOXED(9207820570576940023,64,FLEN)
NAN_BOXED(13819184130238014904,64,FLEN)
NAN_BOXED(9196985634061247071,64,FLEN)
NAN_BOXED(9207820570576940023,64,FLEN)
NAN_BOXED(13819184130238014904,64,FLEN)
NAN_BOXED(9196985634061247071,64,FLEN)
NAN_BOXED(9207934478094664215,64,FLEN)
NAN_BOXED(13839213893101618662,64,FLEN)
NAN_BOXED(9216668306423676459,64,FLEN)
NAN_BOXED(9207934478094664215,64,FLEN)
NAN_BOXED(13839213893101618662,64,FLEN)
NAN_BOXED(9216668306423676459,64,FLEN)
NAN_BOXED(9207934478094664215,64,FLEN)
NAN_BOXED(13839213893101618662,64,FLEN)
NAN_BOXED(9216668306423676459,64,FLEN)
NAN_BOXED(9207934478094664215,64,FLEN)
NAN_BOXED(13839213893101618662,64,FLEN)
NAN_BOXED(9216668306423676459,64,FLEN)
NAN_BOXED(9207934478094664215,64,FLEN)
NAN_BOXED(13839213893101618662,64,FLEN)
NAN_BOXED(9216668306423676459,64,FLEN)
NAN_BOXED(9208146538098928575,64,FLEN)
NAN_BOXED(13819562762106158298,64,FLEN)
NAN_BOXED(9197532632586167087,64,FLEN)
NAN_BOXED(9208146538098928575,64,FLEN)
NAN_BOXED(13819562762106158298,64,FLEN)
NAN_BOXED(9197532632586167087,64,FLEN)
NAN_BOXED(9208146538098928575,64,FLEN)
NAN_BOXED(13819562762106158298,64,FLEN)
NAN_BOXED(9197532632586167087,64,FLEN)
NAN_BOXED(9208146538098928575,64,FLEN)
NAN_BOXED(13819562762106158298,64,FLEN)
NAN_BOXED(9197532632586167087,64,FLEN)
NAN_BOXED(9208146538098928575,64,FLEN)
NAN_BOXED(13819562762106158298,64,FLEN)
NAN_BOXED(9197532632586167087,64,FLEN)
NAN_BOXED(9208231998280703331,64,FLEN)
NAN_BOXED(13840231643052298272,64,FLEN)
NAN_BOXED(9218336796308393303,64,FLEN)
NAN_BOXED(9208231998280703331,64,FLEN)
NAN_BOXED(13840231643052298272,64,FLEN)
NAN_BOXED(9218336796308393303,64,FLEN)
NAN_BOXED(9208231998280703331,64,FLEN)
NAN_BOXED(13840231643052298272,64,FLEN)
NAN_BOXED(9218336796308393303,64,FLEN)
NAN_BOXED(9208231998280703331,64,FLEN)
NAN_BOXED(13840231643052298272,64,FLEN)
NAN_BOXED(9218336796308393303,64,FLEN)
NAN_BOXED(9208231998280703331,64,FLEN)
NAN_BOXED(13840231643052298272,64,FLEN)
NAN_BOXED(9218336796308393303,64,FLEN)
NAN_BOXED(9208400500207166407,64,FLEN)
NAN_BOXED(13830683996836337829,64,FLEN)
NAN_BOXED(9208617566025330231,64,FLEN)
NAN_BOXED(9208400500207166407,64,FLEN)
NAN_BOXED(13830683996836337829,64,FLEN)
NAN_BOXED(9208617566025330231,64,FLEN)
NAN_BOXED(9208400500207166407,64,FLEN)
NAN_BOXED(13830683996836337829,64,FLEN)
NAN_BOXED(9208617566025330231,64,FLEN)
NAN_BOXED(9208400500207166407,64,FLEN)
NAN_BOXED(13830683996836337829,64,FLEN)
NAN_BOXED(9208617566025330231,64,FLEN)
NAN_BOXED(9208400500207166407,64,FLEN)
NAN_BOXED(13830683996836337829,64,FLEN)
NAN_BOXED(9208617566025330231,64,FLEN)
NAN_BOXED(9208745720279259695,64,FLEN)
NAN_BOXED(13837606369973089487,64,FLEN)
NAN_BOXED(9216039791441272237,64,FLEN)
NAN_BOXED(9208745720279259695,64,FLEN)
NAN_BOXED(13837606369973089487,64,FLEN)
NAN_BOXED(9216039791441272237,64,FLEN)
NAN_BOXED(9208745720279259695,64,FLEN)
NAN_BOXED(13837606369973089487,64,FLEN)
NAN_BOXED(9216039791441272237,64,FLEN)
NAN_BOXED(9208745720279259695,64,FLEN)
NAN_BOXED(13837606369973089487,64,FLEN)
NAN_BOXED(9216039791441272237,64,FLEN)
NAN_BOXED(9208745720279259695,64,FLEN)
NAN_BOXED(13837606369973089487,64,FLEN)
NAN_BOXED(9216039791441272237,64,FLEN)
NAN_BOXED(9208891631858508919,64,FLEN)
NAN_BOXED(13826233907072477035,64,FLEN)
NAN_BOXED(9204714724198862167,64,FLEN)
NAN_BOXED(9208891631858508919,64,FLEN)
NAN_BOXED(13826233907072477035,64,FLEN)
NAN_BOXED(9204714724198862167,64,FLEN)
NAN_BOXED(9208891631858508919,64,FLEN)
NAN_BOXED(13826233907072477035,64,FLEN)
NAN_BOXED(9204714724198862167,64,FLEN)
NAN_BOXED(9208891631858508919,64,FLEN)
NAN_BOXED(13826233907072477035,64,FLEN)
NAN_BOXED(9204714724198862167,64,FLEN)
NAN_BOXED(9208891631858508919,64,FLEN)
NAN_BOXED(13826233907072477035,64,FLEN)
NAN_BOXED(9204714724198862167,64,FLEN)
NAN_BOXED(9209008647636845079,64,FLEN)
NAN_BOXED(13831850974769587235,64,FLEN)
NAN_BOXED(9210608737903323979,64,FLEN)
NAN_BOXED(9209008647636845079,64,FLEN)
NAN_BOXED(13831850974769587235,64,FLEN)
NAN_BOXED(9210608737903323979,64,FLEN)
NAN_BOXED(9209008647636845079,64,FLEN)
NAN_BOXED(13831850974769587235,64,FLEN)
NAN_BOXED(9210608737903323979,64,FLEN)
NAN_BOXED(9209008647636845079,64,FLEN)
NAN_BOXED(13831850974769587235,64,FLEN)
NAN_BOXED(9210608737903323979,64,FLEN)
NAN_BOXED(9209008647636845079,64,FLEN)
NAN_BOXED(13831850974769587235,64,FLEN)
NAN_BOXED(9210608737903323979,64,FLEN)
NAN_BOXED(9209141355891554447,64,FLEN)
NAN_BOXED(13838577962180364463,64,FLEN)
NAN_BOXED(9217243482057817514,64,FLEN)
NAN_BOXED(9209141355891554447,64,FLEN)
NAN_BOXED(13838577962180364463,64,FLEN)
NAN_BOXED(9217243482057817514,64,FLEN)
NAN_BOXED(9209141355891554447,64,FLEN)
NAN_BOXED(13838577962180364463,64,FLEN)
NAN_BOXED(9217243482057817514,64,FLEN)
NAN_BOXED(9209141355891554447,64,FLEN)
NAN_BOXED(13838577962180364463,64,FLEN)
NAN_BOXED(9217243482057817514,64,FLEN)
NAN_BOXED(9209141355891554447,64,FLEN)
NAN_BOXED(13838577962180364463,64,FLEN)
NAN_BOXED(9217243482057817514,64,FLEN)
NAN_BOXED(9209299920607045663,64,FLEN)
NAN_BOXED(13833182489675059965,64,FLEN)
NAN_BOXED(9212044837524631497,64,FLEN)
NAN_BOXED(9209299920607045663,64,FLEN)
NAN_BOXED(13833182489675059965,64,FLEN)
NAN_BOXED(9212044837524631497,64,FLEN)
NAN_BOXED(9209299920607045663,64,FLEN)
NAN_BOXED(13833182489675059965,64,FLEN)
NAN_BOXED(9212044837524631497,64,FLEN)
NAN_BOXED(9209299920607045663,64,FLEN)
NAN_BOXED(13833182489675059965,64,FLEN)
NAN_BOXED(9212044837524631497,64,FLEN)
NAN_BOXED(9209299920607045663,64,FLEN)
NAN_BOXED(13833182489675059965,64,FLEN)
NAN_BOXED(9212044837524631497,64,FLEN)
NAN_BOXED(9209321484946966407,64,FLEN)
NAN_BOXED(13832437120492124106,64,FLEN)
NAN_BOXED(9211361208315264755,64,FLEN)
NAN_BOXED(9209321484946966407,64,FLEN)
NAN_BOXED(13832437120492124106,64,FLEN)
NAN_BOXED(9211361208315264755,64,FLEN)
NAN_BOXED(9209321484946966407,64,FLEN)
NAN_BOXED(13832437120492124106,64,FLEN)
NAN_BOXED(9211361208315264755,64,FLEN)
NAN_BOXED(9209321484946966407,64,FLEN)
NAN_BOXED(13832437120492124106,64,FLEN)
NAN_BOXED(9211361208315264755,64,FLEN)
NAN_BOXED(9209321484946966407,64,FLEN)
NAN_BOXED(13832437120492124106,64,FLEN)
NAN_BOXED(9211361208315264755,64,FLEN)
NAN_BOXED(9209423358733385095,64,FLEN)
NAN_BOXED(13839105292262832903,64,FLEN)
NAN_BOXED(9217996381120036023,64,FLEN)
NAN_BOXED(9209423358733385095,64,FLEN)
NAN_BOXED(13839105292262832903,64,FLEN)
NAN_BOXED(9217996381120036023,64,FLEN)
NAN_BOXED(9209423358733385095,64,FLEN)
NAN_BOXED(13839105292262832903,64,FLEN)
NAN_BOXED(9217996381120036023,64,FLEN)
NAN_BOXED(9209423358733385095,64,FLEN)
NAN_BOXED(13839105292262832903,64,FLEN)
NAN_BOXED(9217996381120036023,64,FLEN)
NAN_BOXED(9209423358733385095,64,FLEN)
NAN_BOXED(13839105292262832903,64,FLEN)
NAN_BOXED(9217996381120036023,64,FLEN)
NAN_BOXED(9209873709125039113,64,FLEN)
NAN_BOXED(13836587371237566927,64,FLEN)
NAN_BOXED(9215910859616305383,64,FLEN)
NAN_BOXED(9209873709125039113,64,FLEN)
NAN_BOXED(13836587371237566927,64,FLEN)
NAN_BOXED(9215910859616305383,64,FLEN)
NAN_BOXED(9209873709125039113,64,FLEN)
NAN_BOXED(13836587371237566927,64,FLEN)
NAN_BOXED(9215910859616305383,64,FLEN)
NAN_BOXED(9209873709125039113,64,FLEN)
NAN_BOXED(13836587371237566927,64,FLEN)
NAN_BOXED(9215910859616305383,64,FLEN)
NAN_BOXED(9209873709125039113,64,FLEN)
NAN_BOXED(13836587371237566927,64,FLEN)
NAN_BOXED(9215910859616305383,64,FLEN)
NAN_BOXED(9209936722939948631,64,FLEN)
NAN_BOXED(13837203619948781481,64,FLEN)
NAN_BOXED(9216621849107119788,64,FLEN)
NAN_BOXED(9209936722939948631,64,FLEN)
NAN_BOXED(13837203619948781481,64,FLEN)
NAN_BOXED(9216621849107119788,64,FLEN)
NAN_BOXED(9209936722939948631,64,FLEN)
NAN_BOXED(13837203619948781481,64,FLEN)
NAN_BOXED(9216621849107119788,64,FLEN)
NAN_BOXED(9209936722939948631,64,FLEN)
NAN_BOXED(13837203619948781481,64,FLEN)
NAN_BOXED(9216621849107119788,64,FLEN)
NAN_BOXED(9209936722939948631,64,FLEN)
NAN_BOXED(13837203619948781481,64,FLEN)
NAN_BOXED(9216621849107119788,64,FLEN)
NAN_BOXED(9210099869719553977,64,FLEN)
NAN_BOXED(13835273459642999810,64,FLEN)
NAN_BOXED(9214830287315356054,64,FLEN)
NAN_BOXED(9210099869719553977,64,FLEN)
NAN_BOXED(13835273459642999810,64,FLEN)
NAN_BOXED(9214830287315356054,64,FLEN)
NAN_BOXED(9210099869719553977,64,FLEN)
NAN_BOXED(13835273459642999810,64,FLEN)
NAN_BOXED(9214830287315356054,64,FLEN)
NAN_BOXED(9210099869719553977,64,FLEN)
NAN_BOXED(13835273459642999810,64,FLEN)
NAN_BOXED(9214830287315356054,64,FLEN)
NAN_BOXED(9210099869719553977,64,FLEN)
NAN_BOXED(13835273459642999810,64,FLEN)
NAN_BOXED(9214830287315356054,64,FLEN)
NAN_BOXED(9210179885870372343,64,FLEN)
NAN_BOXED(13826754820568174072,64,FLEN)
NAN_BOXED(9206430059123643835,64,FLEN)
NAN_BOXED(9210179885870372343,64,FLEN)
NAN_BOXED(13826754820568174072,64,FLEN)
NAN_BOXED(9206430059123643835,64,FLEN)
NAN_BOXED(9210179885870372343,64,FLEN)
NAN_BOXED(13826754820568174072,64,FLEN)
NAN_BOXED(9206430059123643835,64,FLEN)
NAN_BOXED(9210179885870372343,64,FLEN)
NAN_BOXED(13826754820568174072,64,FLEN)
NAN_BOXED(9206430059123643835,64,FLEN)
NAN_BOXED(9210179885870372343,64,FLEN)
NAN_BOXED(13826754820568174072,64,FLEN)
NAN_BOXED(9206430059123643835,64,FLEN)
NAN_BOXED(9210289757629882701,64,FLEN)
NAN_BOXED(13838246559600631929,64,FLEN)
NAN_BOXED(9218285249285695777,64,FLEN)
NAN_BOXED(9210289757629882701,64,FLEN)
NAN_BOXED(13838246559600631929,64,FLEN)
NAN_BOXED(9218285249285695777,64,FLEN)
NAN_BOXED(9210289757629882701,64,FLEN)
NAN_BOXED(13838246559600631929,64,FLEN)
NAN_BOXED(9218285249285695777,64,FLEN)
NAN_BOXED(9210289757629882701,64,FLEN)
NAN_BOXED(13838246559600631929,64,FLEN)
NAN_BOXED(9218285249285695777,64,FLEN)
NAN_BOXED(9210289757629882701,64,FLEN)
NAN_BOXED(13838246559600631929,64,FLEN)
NAN_BOXED(9218285249285695777,64,FLEN)
NAN_BOXED(9210375154009950811,64,FLEN)
NAN_BOXED(13832680946883490422,64,FLEN)
NAN_BOXED(9212744304008520645,64,FLEN)
NAN_BOXED(9210375154009950811,64,FLEN)
NAN_BOXED(13832680946883490422,64,FLEN)
NAN_BOXED(9212744304008520645,64,FLEN)
NAN_BOXED(9210375154009950811,64,FLEN)
NAN_BOXED(13832680946883490422,64,FLEN)
NAN_BOXED(9212744304008520645,64,FLEN)
NAN_BOXED(9210375154009950811,64,FLEN)
NAN_BOXED(13832680946883490422,64,FLEN)
NAN_BOXED(9212744304008520645,64,FLEN)
NAN_BOXED(9210375154009950811,64,FLEN)
NAN_BOXED(13832680946883490422,64,FLEN)
NAN_BOXED(9212744304008520645,64,FLEN)
NAN_BOXED(9210392345062990867,64,FLEN)
NAN_BOXED(13837937484383796494,64,FLEN)
NAN_BOXED(9218114943322703665,64,FLEN)
NAN_BOXED(9210392345062990867,64,FLEN)
NAN_BOXED(13837937484383796494,64,FLEN)
NAN_BOXED(9218114943322703665,64,FLEN)
NAN_BOXED(9210392345062990867,64,FLEN)
NAN_BOXED(13837937484383796494,64,FLEN)
NAN_BOXED(9218114943322703665,64,FLEN)
NAN_BOXED(9210392345062990867,64,FLEN)
NAN_BOXED(13837937484383796494,64,FLEN)
NAN_BOXED(9218114943322703665,64,FLEN)
NAN_BOXED(9210392345062990867,64,FLEN)
NAN_BOXED(13837937484383796494,64,FLEN)
NAN_BOXED(9218114943322703665,64,FLEN)
NAN_BOXED(9210417019200900701,64,FLEN)
NAN_BOXED(13833839055357882078,64,FLEN)
NAN_BOXED(9214106965517430297,64,FLEN)
NAN_BOXED(9210417019200900701,64,FLEN)
NAN_BOXED(13833839055357882078,64,FLEN)
NAN_BOXED(9214106965517430297,64,FLEN)
NAN_BOXED(9210417019200900701,64,FLEN)
NAN_BOXED(13833839055357882078,64,FLEN)
NAN_BOXED(9214106965517430297,64,FLEN)
NAN_BOXED(9210417019200900701,64,FLEN)
NAN_BOXED(13833839055357882078,64,FLEN)
NAN_BOXED(9214106965517430297,64,FLEN)
NAN_BOXED(9210417019200900701,64,FLEN)
NAN_BOXED(13833839055357882078,64,FLEN)
NAN_BOXED(9214106965517430297,64,FLEN)
NAN_BOXED(9210516260971866493,64,FLEN)
NAN_BOXED(13836693717885575585,64,FLEN)
NAN_BOXED(9216893421042780631,64,FLEN)
NAN_BOXED(9210516260971866493,64,FLEN)
NAN_BOXED(13836693717885575585,64,FLEN)
NAN_BOXED(9216893421042780631,64,FLEN)
NAN_BOXED(9210516260971866493,64,FLEN)
NAN_BOXED(13836693717885575585,64,FLEN)
NAN_BOXED(9216893421042780631,64,FLEN)
NAN_BOXED(9210516260971866493,64,FLEN)
NAN_BOXED(13836693717885575585,64,FLEN)
NAN_BOXED(9216893421042780631,64,FLEN)
NAN_BOXED(9210516260971866493,64,FLEN)
NAN_BOXED(13836693717885575585,64,FLEN)
NAN_BOXED(9216893421042780631,64,FLEN)
NAN_BOXED(9210516932395365879,64,FLEN)
NAN_BOXED(13833550645822878147,64,FLEN)
NAN_BOXED(9213949348104155367,64,FLEN)
NAN_BOXED(9210516932395365879,64,FLEN)
NAN_BOXED(13833550645822878147,64,FLEN)
NAN_BOXED(9213949348104155367,64,FLEN)
NAN_BOXED(9210516932395365879,64,FLEN)
NAN_BOXED(13833550645822878147,64,FLEN)
NAN_BOXED(9213949348104155367,64,FLEN)
NAN_BOXED(9210516932395365879,64,FLEN)
NAN_BOXED(13833550645822878147,64,FLEN)
NAN_BOXED(9213949348104155367,64,FLEN)
NAN_BOXED(9210516932395365879,64,FLEN)
NAN_BOXED(13833550645822878147,64,FLEN)
NAN_BOXED(9213949348104155367,64,FLEN)
NAN_BOXED(9210569296927939491,64,FLEN)
NAN_BOXED(13838038096452645041,64,FLEN)
NAN_BOXED(9218521461798185379,64,FLEN)
NAN_BOXED(9210569296927939491,64,FLEN)
NAN_BOXED(13838038096452645041,64,FLEN)
NAN_BOXED(9218521461798185379,64,FLEN)
NAN_BOXED(9210569296927939491,64,FLEN)
NAN_BOXED(13838038096452645041,64,FLEN)
NAN_BOXED(9218521461798185379,64,FLEN)
NAN_BOXED(9210569296927939491,64,FLEN)
NAN_BOXED(13838038096452645041,64,FLEN)
NAN_BOXED(9218521461798185379,64,FLEN)
NAN_BOXED(9210569296927939491,64,FLEN)
NAN_BOXED(13838038096452645041,64,FLEN)
NAN_BOXED(9218521461798185379,64,FLEN)
NAN_BOXED(9210626722169711817,64,FLEN)
NAN_BOXED(13837621797352535696,64,FLEN)
NAN_BOXED(9218129827301718863,64,FLEN)
NAN_BOXED(9210626722169711817,64,FLEN)
NAN_BOXED(13837621797352535696,64,FLEN)
NAN_BOXED(9218129827301718863,64,FLEN)
NAN_BOXED(9210626722169711817,64,FLEN)
NAN_BOXED(13837621797352535696,64,FLEN)
NAN_BOXED(9218129827301718863,64,FLEN)
NAN_BOXED(9210626722169711817,64,FLEN)
NAN_BOXED(13837621797352535696,64,FLEN)
NAN_BOXED(9218129827301718863,64,FLEN)
NAN_BOXED(9210626722169711817,64,FLEN)
NAN_BOXED(13837621797352535696,64,FLEN)
NAN_BOXED(9218129827301718863,64,FLEN)
NAN_BOXED(9210651206201357193,64,FLEN)
NAN_BOXED(13837800223839986184,64,FLEN)
NAN_BOXED(9218377973191425073,64,FLEN)
NAN_BOXED(9210651206201357193,64,FLEN)
NAN_BOXED(13837800223839986184,64,FLEN)
NAN_BOXED(9218377973191425073,64,FLEN)
NAN_BOXED(9210651206201357193,64,FLEN)
NAN_BOXED(13837800223839986184,64,FLEN)
NAN_BOXED(9218377973191425073,64,FLEN)
NAN_BOXED(9210651206201357193,64,FLEN)
NAN_BOXED(13837800223839986184,64,FLEN)
NAN_BOXED(9218377973191425073,64,FLEN)
NAN_BOXED(9210651206201357193,64,FLEN)
NAN_BOXED(13837800223839986184,64,FLEN)
NAN_BOXED(9218377973191425073,64,FLEN)
NAN_BOXED(9210668515883822777,64,FLEN)
NAN_BOXED(13832973307921924261,64,FLEN)
NAN_BOXED(9213520951543612231,64,FLEN)
NAN_BOXED(9210668515883822777,64,FLEN)
NAN_BOXED(13832973307921924261,64,FLEN)
NAN_BOXED(9213520951543612231,64,FLEN)
NAN_BOXED(9210668515883822777,64,FLEN)
NAN_BOXED(13832973307921924261,64,FLEN)
NAN_BOXED(9213520951543612231,64,FLEN)
NAN_BOXED(9210668515883822777,64,FLEN)
NAN_BOXED(13832973307921924261,64,FLEN)
NAN_BOXED(9213520951543612231,64,FLEN)
NAN_BOXED(9210668515883822777,64,FLEN)
NAN_BOXED(13832973307921924261,64,FLEN)
NAN_BOXED(9213520951543612231,64,FLEN)
NAN_BOXED(9210697981550427725,64,FLEN)
NAN_BOXED(13836859247978903580,64,FLEN)
NAN_BOXED(9217337425385776312,64,FLEN)
NAN_BOXED(9210697981550427725,64,FLEN)
NAN_BOXED(13836859247978903580,64,FLEN)
NAN_BOXED(9217337425385776312,64,FLEN)
NAN_BOXED(9210697981550427725,64,FLEN)
NAN_BOXED(13836859247978903580,64,FLEN)
NAN_BOXED(9217337425385776312,64,FLEN)
NAN_BOXED(9210697981550427725,64,FLEN)
NAN_BOXED(13836859247978903580,64,FLEN)
NAN_BOXED(9217337425385776312,64,FLEN)
NAN_BOXED(9210697981550427725,64,FLEN)
NAN_BOXED(13836859247978903580,64,FLEN)
NAN_BOXED(9217337425385776312,64,FLEN)
NAN_BOXED(9210704711128819511,64,FLEN)
NAN_BOXED(13834090387383918284,64,FLEN)
NAN_BOXED(9214633860193272109,64,FLEN)
NAN_BOXED(9210704711128819511,64,FLEN)
NAN_BOXED(13834090387383918284,64,FLEN)
NAN_BOXED(9214633860193272109,64,FLEN)
NAN_BOXED(9210704711128819511,64,FLEN)
NAN_BOXED(13834090387383918284,64,FLEN)
NAN_BOXED(9214633860193272109,64,FLEN)
NAN_BOXED(9210704711128819511,64,FLEN)
NAN_BOXED(13834090387383918284,64,FLEN)
NAN_BOXED(9214633860193272109,64,FLEN)
NAN_BOXED(9210704711128819511,64,FLEN)
NAN_BOXED(13834090387383918284,64,FLEN)
NAN_BOXED(9214633860193272109,64,FLEN)
NAN_BOXED(9210786441281014059,64,FLEN)
NAN_BOXED(13835060982838895713,64,FLEN)
NAN_BOXED(9215293569891841385,64,FLEN)
NAN_BOXED(9210786441281014059,64,FLEN)
NAN_BOXED(13835060982838895713,64,FLEN)
NAN_BOXED(9215293569891841385,64,FLEN)
NAN_BOXED(9210786441281014059,64,FLEN)
NAN_BOXED(13835060982838895713,64,FLEN)
NAN_BOXED(9215293569891841385,64,FLEN)
NAN_BOXED(9210786441281014059,64,FLEN)
NAN_BOXED(13835060982838895713,64,FLEN)
NAN_BOXED(9215293569891841385,64,FLEN)
NAN_BOXED(9210786441281014059,64,FLEN)
NAN_BOXED(13835060982838895713,64,FLEN)
NAN_BOXED(9215293569891841385,64,FLEN)
NAN_BOXED(9211046461200558691,64,FLEN)
NAN_BOXED(13832913624418554066,64,FLEN)
NAN_BOXED(9214026498125054509,64,FLEN)
NAN_BOXED(9211046461200558691,64,FLEN)
NAN_BOXED(13832913624418554066,64,FLEN)
NAN_BOXED(9214026498125054509,64,FLEN)
NAN_BOXED(9211046461200558691,64,FLEN)
NAN_BOXED(13832913624418554066,64,FLEN)
NAN_BOXED(9214026498125054509,64,FLEN)
NAN_BOXED(9211046461200558691,64,FLEN)
NAN_BOXED(13832913624418554066,64,FLEN)
NAN_BOXED(9214026498125054509,64,FLEN)
NAN_BOXED(9211046461200558691,64,FLEN)
NAN_BOXED(13832913624418554066,64,FLEN)
NAN_BOXED(9214026498125054509,64,FLEN)
NAN_BOXED(9211064599534832079,64,FLEN)
NAN_BOXED(13826593272055369286,64,FLEN)
NAN_BOXED(9207248349466969815,64,FLEN)
NAN_BOXED(9211064599534832079,64,FLEN)
NAN_BOXED(13826593272055369286,64,FLEN)
NAN_BOXED(9207248349466969815,64,FLEN)
NAN_BOXED(9211064599534832079,64,FLEN)
NAN_BOXED(13826593272055369286,64,FLEN)
NAN_BOXED(9207248349466969815,64,FLEN)
NAN_BOXED(9211064599534832079,64,FLEN)
NAN_BOXED(13826593272055369286,64,FLEN)
NAN_BOXED(9207248349466969815,64,FLEN)
NAN_BOXED(9211064599534832079,64,FLEN)
NAN_BOXED(13826593272055369286,64,FLEN)
NAN_BOXED(9207248349466969815,64,FLEN)
NAN_BOXED(9211074522877160591,64,FLEN)
NAN_BOXED(13826700013878829460,64,FLEN)
NAN_BOXED(9207394966412262307,64,FLEN)
NAN_BOXED(9211074522877160591,64,FLEN)
NAN_BOXED(13826700013878829460,64,FLEN)
NAN_BOXED(9207394966412262307,64,FLEN)
NAN_BOXED(9211074522877160591,64,FLEN)
NAN_BOXED(13826700013878829460,64,FLEN)
NAN_BOXED(9207394966412262307,64,FLEN)
NAN_BOXED(9211074522877160591,64,FLEN)
NAN_BOXED(13826700013878829460,64,FLEN)
NAN_BOXED(9207394966412262307,64,FLEN)
NAN_BOXED(9211074522877160591,64,FLEN)
NAN_BOXED(13826700013878829460,64,FLEN)
NAN_BOXED(9207394966412262307,64,FLEN)
NAN_BOXED(9211181445435641771,64,FLEN)
NAN_BOXED(13836102098415629372,64,FLEN)
NAN_BOXED(9217035144162930812,64,FLEN)
NAN_BOXED(9211181445435641771,64,FLEN)
NAN_BOXED(13836102098415629372,64,FLEN)
NAN_BOXED(9217035144162930812,64,FLEN)
NAN_BOXED(9211181445435641771,64,FLEN)
NAN_BOXED(13836102098415629372,64,FLEN)
NAN_BOXED(9217035144162930812,64,FLEN)
NAN_BOXED(9211181445435641771,64,FLEN)
NAN_BOXED(13836102098415629372,64,FLEN)
NAN_BOXED(9217035144162930812,64,FLEN)
NAN_BOXED(9211181445435641771,64,FLEN)
NAN_BOXED(13836102098415629372,64,FLEN)
NAN_BOXED(9217035144162930812,64,FLEN)
NAN_BOXED(9211444647065761477,64,FLEN)
NAN_BOXED(13829809697303133186,64,FLEN)
NAN_BOXED(9210941344046367345,64,FLEN)
NAN_BOXED(9211444647065761477,64,FLEN)
NAN_BOXED(13829809697303133186,64,FLEN)
NAN_BOXED(9210941344046367345,64,FLEN)
NAN_BOXED(9211444647065761477,64,FLEN)
NAN_BOXED(13829809697303133186,64,FLEN)
NAN_BOXED(9210941344046367345,64,FLEN)
NAN_BOXED(9211444647065761477,64,FLEN)
NAN_BOXED(13829809697303133186,64,FLEN)
NAN_BOXED(9210941344046367345,64,FLEN)
NAN_BOXED(9211444647065761477,64,FLEN)
NAN_BOXED(13829809697303133186,64,FLEN)
NAN_BOXED(9210941344046367345,64,FLEN)
NAN_BOXED(9211481804735026639,64,FLEN)
NAN_BOXED(13836676090332577350,64,FLEN)
NAN_BOXED(9218185670081607714,64,FLEN)
NAN_BOXED(9211481804735026639,64,FLEN)
NAN_BOXED(13836676090332577350,64,FLEN)
NAN_BOXED(9218185670081607714,64,FLEN)
NAN_BOXED(9211481804735026639,64,FLEN)
NAN_BOXED(13836676090332577350,64,FLEN)
NAN_BOXED(9218185670081607714,64,FLEN)
NAN_BOXED(9211481804735026639,64,FLEN)
NAN_BOXED(13836676090332577350,64,FLEN)
NAN_BOXED(9218185670081607714,64,FLEN)
NAN_BOXED(9211481804735026639,64,FLEN)
NAN_BOXED(13836676090332577350,64,FLEN)
NAN_BOXED(9218185670081607714,64,FLEN)
NAN_BOXED(9211561469565048705,64,FLEN)
NAN_BOXED(13830690609015326396,64,FLEN)
NAN_BOXED(9211749024529663413,64,FLEN)
NAN_BOXED(9211561469565048705,64,FLEN)
NAN_BOXED(13830690609015326396,64,FLEN)
NAN_BOXED(9211749024529663413,64,FLEN)
NAN_BOXED(9211561469565048705,64,FLEN)
NAN_BOXED(13830690609015326396,64,FLEN)
NAN_BOXED(9211749024529663413,64,FLEN)
NAN_BOXED(9211561469565048705,64,FLEN)
NAN_BOXED(13830690609015326396,64,FLEN)
NAN_BOXED(9211749024529663413,64,FLEN)
NAN_BOXED(9211561469565048705,64,FLEN)
NAN_BOXED(13830690609015326396,64,FLEN)
NAN_BOXED(9211749024529663413,64,FLEN)
NAN_BOXED(9211624568508179893,64,FLEN)
NAN_BOXED(13834388686970143139,64,FLEN)
NAN_BOXED(9215662442403717171,64,FLEN)
NAN_BOXED(9211624568508179893,64,FLEN)
NAN_BOXED(13834388686970143139,64,FLEN)
NAN_BOXED(9215662442403717171,64,FLEN)
NAN_BOXED(9211624568508179893,64,FLEN)
NAN_BOXED(13834388686970143139,64,FLEN)
NAN_BOXED(9215662442403717171,64,FLEN)
NAN_BOXED(9211624568508179893,64,FLEN)
NAN_BOXED(13834388686970143139,64,FLEN)
NAN_BOXED(9215662442403717171,64,FLEN)
NAN_BOXED(9211624568508179893,64,FLEN)
NAN_BOXED(13834388686970143139,64,FLEN)
NAN_BOXED(9215662442403717171,64,FLEN)
NAN_BOXED(9211663491199463485,64,FLEN)
NAN_BOXED(13835976602168402605,64,FLEN)
NAN_BOXED(9217453222362389699,64,FLEN)
NAN_BOXED(9211663491199463485,64,FLEN)
NAN_BOXED(13835976602168402605,64,FLEN)
NAN_BOXED(9217453222362389699,64,FLEN)
NAN_BOXED(9211663491199463485,64,FLEN)
NAN_BOXED(13835976602168402605,64,FLEN)
NAN_BOXED(9217453222362389699,64,FLEN)
NAN_BOXED(9211663491199463485,64,FLEN)
NAN_BOXED(13835976602168402605,64,FLEN)
NAN_BOXED(9217453222362389699,64,FLEN)
NAN_BOXED(9211663491199463485,64,FLEN)
NAN_BOXED(13835976602168402605,64,FLEN)
NAN_BOXED(9217453222362389699,64,FLEN)
NAN_BOXED(9211864257766996635,64,FLEN)
NAN_BOXED(13825320738332264625,64,FLEN)
NAN_BOXED(9206833235814318519,64,FLEN)
NAN_BOXED(9211864257766996635,64,FLEN)
NAN_BOXED(13825320738332264625,64,FLEN)
NAN_BOXED(9206833235814318519,64,FLEN)
NAN_BOXED(9211864257766996635,64,FLEN)
NAN_BOXED(13825320738332264625,64,FLEN)
NAN_BOXED(9206833235814318519,64,FLEN)
NAN_BOXED(9211864257766996635,64,FLEN)
NAN_BOXED(13825320738332264625,64,FLEN)
NAN_BOXED(9206833235814318519,64,FLEN)
NAN_BOXED(9211864257766996635,64,FLEN)
NAN_BOXED(13825320738332264625,64,FLEN)
NAN_BOXED(9206833235814318519,64,FLEN)
NAN_BOXED(9211866713098895149,64,FLEN)
NAN_BOXED(13835452980413333335,64,FLEN)
NAN_BOXED(9216941099966151747,64,FLEN)
NAN_BOXED(9211866713098895149,64,FLEN)
NAN_BOXED(13835452980413333335,64,FLEN)
NAN_BOXED(9216941099966151747,64,FLEN)
NAN_BOXED(9211866713098895149,64,FLEN)
NAN_BOXED(13835452980413333335,64,FLEN)
NAN_BOXED(9216941099966151747,64,FLEN)
NAN_BOXED(9211866713098895149,64,FLEN)
NAN_BOXED(13835452980413333335,64,FLEN)
NAN_BOXED(9216941099966151747,64,FLEN)
NAN_BOXED(9211866713098895149,64,FLEN)
NAN_BOXED(13835452980413333335,64,FLEN)
NAN_BOXED(9216941099966151747,64,FLEN)
NAN_BOXED(9211904642961209801,64,FLEN)
NAN_BOXED(13834780552303230158,64,FLEN)
NAN_BOXED(9216206535794645199,64,FLEN)
NAN_BOXED(9211904642961209801,64,FLEN)
NAN_BOXED(13834780552303230158,64,FLEN)
NAN_BOXED(9216206535794645199,64,FLEN)
NAN_BOXED(9211904642961209801,64,FLEN)
NAN_BOXED(13834780552303230158,64,FLEN)
NAN_BOXED(9216206535794645199,64,FLEN)
NAN_BOXED(9211904642961209801,64,FLEN)
NAN_BOXED(13834780552303230158,64,FLEN)
NAN_BOXED(9216206535794645199,64,FLEN)
NAN_BOXED(9211904642961209801,64,FLEN)
NAN_BOXED(13834780552303230158,64,FLEN)
NAN_BOXED(9216206535794645199,64,FLEN)
NAN_BOXED(9211954231421094877,64,FLEN)
NAN_BOXED(13833165896000041670,64,FLEN)
NAN_BOXED(9215072072338599031,64,FLEN)
NAN_BOXED(9211954231421094877,64,FLEN)
NAN_BOXED(13833165896000041670,64,FLEN)
NAN_BOXED(9215072072338599031,64,FLEN)
NAN_BOXED(9211954231421094877,64,FLEN)
NAN_BOXED(13833165896000041670,64,FLEN)
NAN_BOXED(9215072072338599031,64,FLEN)
NAN_BOXED(9211954231421094877,64,FLEN)
NAN_BOXED(13833165896000041670,64,FLEN)
NAN_BOXED(9215072072338599031,64,FLEN)
NAN_BOXED(9211954231421094877,64,FLEN)
NAN_BOXED(13833165896000041670,64,FLEN)
NAN_BOXED(9215072072338599031,64,FLEN)
NAN_BOXED(9212012926724825625,64,FLEN)
NAN_BOXED(13823973204552358501,64,FLEN)
NAN_BOXED(9205974180674283255,64,FLEN)
NAN_BOXED(9212012926724825625,64,FLEN)
NAN_BOXED(13823973204552358501,64,FLEN)
NAN_BOXED(9205974180674283255,64,FLEN)
NAN_BOXED(9212012926724825625,64,FLEN)
NAN_BOXED(13823973204552358501,64,FLEN)
NAN_BOXED(9205974180674283255,64,FLEN)
NAN_BOXED(9212012926724825625,64,FLEN)
NAN_BOXED(13823973204552358501,64,FLEN)
NAN_BOXED(9205974180674283255,64,FLEN)
NAN_BOXED(9212012926724825625,64,FLEN)
NAN_BOXED(13823973204552358501,64,FLEN)
NAN_BOXED(9205974180674283255,64,FLEN)
NAN_BOXED(9212092855461808119,64,FLEN)
NAN_BOXED(13814986685709407071,64,FLEN)
NAN_BOXED(9197043937312905695,64,FLEN)
NAN_BOXED(9212092855461808119,64,FLEN)
NAN_BOXED(13814986685709407071,64,FLEN)
NAN_BOXED(9197043937312905695,64,FLEN)
NAN_BOXED(9212092855461808119,64,FLEN)
NAN_BOXED(13814986685709407071,64,FLEN)
NAN_BOXED(9197043937312905695,64,FLEN)
NAN_BOXED(9212092855461808119,64,FLEN)
NAN_BOXED(13814986685709407071,64,FLEN)
NAN_BOXED(9197043937312905695,64,FLEN)
NAN_BOXED(9212092855461808119,64,FLEN)
NAN_BOXED(13814986685709407071,64,FLEN)
NAN_BOXED(9197043937312905695,64,FLEN)
NAN_BOXED(9212128319471812831,64,FLEN)
NAN_BOXED(13831223504010819095,64,FLEN)
NAN_BOXED(9213134162231311827,64,FLEN)
NAN_BOXED(9212128319471812831,64,FLEN)
NAN_BOXED(13831223504010819095,64,FLEN)
NAN_BOXED(9213134162231311827,64,FLEN)
NAN_BOXED(9212128319471812831,64,FLEN)
NAN_BOXED(13831223504010819095,64,FLEN)
NAN_BOXED(9213134162231311827,64,FLEN)
NAN_BOXED(9212128319471812831,64,FLEN)
NAN_BOXED(13831223504010819095,64,FLEN)
NAN_BOXED(9213134162231311827,64,FLEN)
NAN_BOXED(9212128319471812831,64,FLEN)
NAN_BOXED(13831223504010819095,64,FLEN)
NAN_BOXED(9213134162231311827,64,FLEN)
NAN_BOXED(9212149080054272401,64,FLEN)
NAN_BOXED(13836458028134951650,64,FLEN)
NAN_BOXED(9218763842931164045,64,FLEN)
NAN_BOXED(9212149080054272401,64,FLEN)
NAN_BOXED(13836458028134951650,64,FLEN)
NAN_BOXED(9218763842931164045,64,FLEN)
NAN_BOXED(9212149080054272401,64,FLEN)
NAN_BOXED(13836458028134951650,64,FLEN)
NAN_BOXED(9218763842931164045,64,FLEN)
NAN_BOXED(9212149080054272401,64,FLEN)
NAN_BOXED(13836458028134951650,64,FLEN)
NAN_BOXED(9218763842931164045,64,FLEN)
NAN_BOXED(9212149080054272401,64,FLEN)
NAN_BOXED(13836458028134951650,64,FLEN)
NAN_BOXED(9218763842931164045,64,FLEN)
NAN_BOXED(9212301705294530083,64,FLEN)
NAN_BOXED(13830629141637746707,64,FLEN)
NAN_BOXED(9212416863059142779,64,FLEN)
NAN_BOXED(9212301705294530083,64,FLEN)
NAN_BOXED(13830629141637746707,64,FLEN)
NAN_BOXED(9212416863059142779,64,FLEN)
NAN_BOXED(9212301705294530083,64,FLEN)
NAN_BOXED(13830629141637746707,64,FLEN)
NAN_BOXED(9212416863059142779,64,FLEN)
NAN_BOXED(9212301705294530083,64,FLEN)
NAN_BOXED(13830629141637746707,64,FLEN)
NAN_BOXED(9212416863059142779,64,FLEN)
NAN_BOXED(9212301705294530083,64,FLEN)
NAN_BOXED(13830629141637746707,64,FLEN)
NAN_BOXED(9212416863059142779,64,FLEN)
NAN_BOXED(9212306655633894829,64,FLEN)
NAN_BOXED(13823414712253498576,64,FLEN)
NAN_BOXED(9205769281895155067,64,FLEN)
NAN_BOXED(9212306655633894829,64,FLEN)
NAN_BOXED(13823414712253498576,64,FLEN)
NAN_BOXED(9205769281895155067,64,FLEN)
NAN_BOXED(9212306655633894829,64,FLEN)
NAN_BOXED(13823414712253498576,64,FLEN)
NAN_BOXED(9205769281895155067,64,FLEN)
NAN_BOXED(9212306655633894829,64,FLEN)
NAN_BOXED(13823414712253498576,64,FLEN)
NAN_BOXED(9205769281895155067,64,FLEN)
NAN_BOXED(9212306655633894829,64,FLEN)
NAN_BOXED(13823414712253498576,64,FLEN)
NAN_BOXED(9205769281895155067,64,FLEN)
NAN_BOXED(9212631661785055901,64,FLEN)
NAN_BOXED(13823579796400856376,64,FLEN)
NAN_BOXED(9206132486714493971,64,FLEN)
NAN_BOXED(9212631661785055901,64,FLEN)
NAN_BOXED(13823579796400856376,64,FLEN)
NAN_BOXED(9206132486714493971,64,FLEN)
NAN_BOXED(9212631661785055901,64,FLEN)
NAN_BOXED(13823579796400856376,64,FLEN)
NAN_BOXED(9206132486714493971,64,FLEN)
NAN_BOXED(9212631661785055901,64,FLEN)
NAN_BOXED(13823579796400856376,64,FLEN)
NAN_BOXED(9206132486714493971,64,FLEN)
NAN_BOXED(9212631661785055901,64,FLEN)
NAN_BOXED(13823579796400856376,64,FLEN)
NAN_BOXED(9206132486714493971,64,FLEN)
NAN_BOXED(9212669466909945405,64,FLEN)
NAN_BOXED(13826814073772203401,64,FLEN)
NAN_BOXED(9209404991043359707,64,FLEN)
NAN_BOXED(9212669466909945405,64,FLEN)
NAN_BOXED(13826814073772203401,64,FLEN)
NAN_BOXED(9209404991043359707,64,FLEN)
NAN_BOXED(9212669466909945405,64,FLEN)
NAN_BOXED(13826814073772203401,64,FLEN)
NAN_BOXED(9209404991043359707,64,FLEN)
NAN_BOXED(9212669466909945405,64,FLEN)
NAN_BOXED(13826814073772203401,64,FLEN)
NAN_BOXED(9209404991043359707,64,FLEN)
NAN_BOXED(9212669466909945405,64,FLEN)
NAN_BOXED(13826814073772203401,64,FLEN)
NAN_BOXED(9209404991043359707,64,FLEN)
NAN_BOXED(9212814450882157573,64,FLEN)
NAN_BOXED(13824058164052821717,64,FLEN)
NAN_BOXED(9206661156374273431,64,FLEN)
NAN_BOXED(9212814450882157573,64,FLEN)
NAN_BOXED(13824058164052821717,64,FLEN)
NAN_BOXED(9206661156374273431,64,FLEN)
NAN_BOXED(9212814450882157573,64,FLEN)
NAN_BOXED(13824058164052821717,64,FLEN)
NAN_BOXED(9206661156374273431,64,FLEN)
NAN_BOXED(9212814450882157573,64,FLEN)
NAN_BOXED(13824058164052821717,64,FLEN)
NAN_BOXED(9206661156374273431,64,FLEN)
NAN_BOXED(9212814450882157573,64,FLEN)
NAN_BOXED(13824058164052821717,64,FLEN)
NAN_BOXED(9206661156374273431,64,FLEN)
NAN_BOXED(9212842471680657773,64,FLEN)
NAN_BOXED(13828465975815386904,64,FLEN)
NAN_BOXED(9211106979539302517,64,FLEN)
NAN_BOXED(9212842471680657773,64,FLEN)
NAN_BOXED(13828465975815386904,64,FLEN)
NAN_BOXED(9211106979539302517,64,FLEN)
NAN_BOXED(9212842471680657773,64,FLEN)
NAN_BOXED(13828465975815386904,64,FLEN)
NAN_BOXED(9211106979539302517,64,FLEN)
NAN_BOXED(9212842471680657773,64,FLEN)
NAN_BOXED(13828465975815386904,64,FLEN)
NAN_BOXED(9211106979539302517,64,FLEN)
NAN_BOXED(9212842471680657773,64,FLEN)
NAN_BOXED(13828465975815386904,64,FLEN)
NAN_BOXED(9211106979539302517,64,FLEN)
NAN_BOXED(9213062964641420997,64,FLEN)
NAN_BOXED(13832111807657241098,64,FLEN)
NAN_BOXED(9215046158240550337,64,FLEN)
NAN_BOXED(9213062964641420997,64,FLEN)
NAN_BOXED(13832111807657241098,64,FLEN)
NAN_BOXED(9215046158240550337,64,FLEN)
NAN_BOXED(9213062964641420997,64,FLEN)
NAN_BOXED(13832111807657241098,64,FLEN)
NAN_BOXED(9215046158240550337,64,FLEN)
NAN_BOXED(9213062964641420997,64,FLEN)
NAN_BOXED(13832111807657241098,64,FLEN)
NAN_BOXED(9215046158240550337,64,FLEN)
NAN_BOXED(9213062964641420997,64,FLEN)
NAN_BOXED(13832111807657241098,64,FLEN)
NAN_BOXED(9215046158240550337,64,FLEN)
NAN_BOXED(9213133922802287545,64,FLEN)
NAN_BOXED(13828111038798362101,64,FLEN)
NAN_BOXED(9211024420837776145,64,FLEN)
NAN_BOXED(9213133922802287545,64,FLEN)
NAN_BOXED(13828111038798362101,64,FLEN)
NAN_BOXED(9211024420837776145,64,FLEN)
NAN_BOXED(9213133922802287545,64,FLEN)
NAN_BOXED(13828111038798362101,64,FLEN)
NAN_BOXED(9211024420837776145,64,FLEN)
NAN_BOXED(9213133922802287545,64,FLEN)
NAN_BOXED(13828111038798362101,64,FLEN)
NAN_BOXED(9211024420837776145,64,FLEN)
NAN_BOXED(9213133922802287545,64,FLEN)
NAN_BOXED(13828111038798362101,64,FLEN)
NAN_BOXED(9211024420837776145,64,FLEN)
NAN_BOXED(9213303220552472923,64,FLEN)
NAN_BOXED(13832688980321377816,64,FLEN)
NAN_BOXED(9215716971901424799,64,FLEN)
NAN_BOXED(9213303220552472923,64,FLEN)
NAN_BOXED(13832688980321377816,64,FLEN)
NAN_BOXED(9215716971901424799,64,FLEN)
NAN_BOXED(9213303220552472923,64,FLEN)
NAN_BOXED(13832688980321377816,64,FLEN)
NAN_BOXED(9215716971901424799,64,FLEN)
NAN_BOXED(9213303220552472923,64,FLEN)
NAN_BOXED(13832688980321377816,64,FLEN)
NAN_BOXED(9215716971901424799,64,FLEN)
NAN_BOXED(9213303220552472923,64,FLEN)
NAN_BOXED(13832688980321377816,64,FLEN)
NAN_BOXED(9215716971901424799,64,FLEN)
NAN_BOXED(9213346441025997019,64,FLEN)
NAN_BOXED(13827500425956003787,64,FLEN)
NAN_BOXED(9210637714378055473,64,FLEN)
NAN_BOXED(9213346441025997019,64,FLEN)
NAN_BOXED(13827500425956003787,64,FLEN)
NAN_BOXED(9210637714378055473,64,FLEN)
NAN_BOXED(9213346441025997019,64,FLEN)
NAN_BOXED(13827500425956003787,64,FLEN)
NAN_BOXED(9210637714378055473,64,FLEN)
NAN_BOXED(9213346441025997019,64,FLEN)
NAN_BOXED(13827500425956003787,64,FLEN)
NAN_BOXED(9210637714378055473,64,FLEN)
NAN_BOXED(9213346441025997019,64,FLEN)
NAN_BOXED(13827500425956003787,64,FLEN)
NAN_BOXED(9210637714378055473,64,FLEN)
NAN_BOXED(9213565245509624195,64,FLEN)
NAN_BOXED(13835084475940504250,64,FLEN)
NAN_BOXED(9218116995594989275,64,FLEN)
NAN_BOXED(9213565245509624195,64,FLEN)
NAN_BOXED(13835084475940504250,64,FLEN)
NAN_BOXED(9218116995594989275,64,FLEN)
NAN_BOXED(9213565245509624195,64,FLEN)
NAN_BOXED(13835084475940504250,64,FLEN)
NAN_BOXED(9218116995594989275,64,FLEN)
NAN_BOXED(9213565245509624195,64,FLEN)
NAN_BOXED(13835084475940504250,64,FLEN)
NAN_BOXED(9218116995594989275,64,FLEN)
NAN_BOXED(9213565245509624195,64,FLEN)
NAN_BOXED(13835084475940504250,64,FLEN)
NAN_BOXED(9218116995594989275,64,FLEN)
NAN_BOXED(9213566171070410211,64,FLEN)
NAN_BOXED(13829884194785037323,64,FLEN)
NAN_BOXED(9212955342095925131,64,FLEN)
NAN_BOXED(9213566171070410211,64,FLEN)
NAN_BOXED(13829884194785037323,64,FLEN)
NAN_BOXED(9212955342095925131,64,FLEN)
NAN_BOXED(9213566171070410211,64,FLEN)
NAN_BOXED(13829884194785037323,64,FLEN)
NAN_BOXED(9212955342095925131,64,FLEN)
NAN_BOXED(9213566171070410211,64,FLEN)
NAN_BOXED(13829884194785037323,64,FLEN)
NAN_BOXED(9212955342095925131,64,FLEN)
NAN_BOXED(9213566171070410211,64,FLEN)
NAN_BOXED(13829884194785037323,64,FLEN)
NAN_BOXED(9212955342095925131,64,FLEN)
NAN_BOXED(9213697205776385093,64,FLEN)
NAN_BOXED(13833995743659454092,64,FLEN)
NAN_BOXED(9217217234466790276,64,FLEN)
NAN_BOXED(9213697205776385093,64,FLEN)
NAN_BOXED(13833995743659454092,64,FLEN)
NAN_BOXED(9217217234466790276,64,FLEN)
NAN_BOXED(9213697205776385093,64,FLEN)
NAN_BOXED(13833995743659454092,64,FLEN)
NAN_BOXED(9217217234466790276,64,FLEN)
NAN_BOXED(9213697205776385093,64,FLEN)
NAN_BOXED(13833995743659454092,64,FLEN)
NAN_BOXED(9217217234466790276,64,FLEN)
NAN_BOXED(9213697205776385093,64,FLEN)
NAN_BOXED(13833995743659454092,64,FLEN)
NAN_BOXED(9217217234466790276,64,FLEN)
NAN_BOXED(9213722385432990067,64,FLEN)
NAN_BOXED(13828550694585384099,64,FLEN)
NAN_BOXED(9211861545665183577,64,FLEN)
NAN_BOXED(9213722385432990067,64,FLEN)
NAN_BOXED(13828550694585384099,64,FLEN)
NAN_BOXED(9211861545665183577,64,FLEN)
NAN_BOXED(9213722385432990067,64,FLEN)
NAN_BOXED(13828550694585384099,64,FLEN)
NAN_BOXED(9211861545665183577,64,FLEN)
NAN_BOXED(9213722385432990067,64,FLEN)
NAN_BOXED(13828550694585384099,64,FLEN)
NAN_BOXED(9211861545665183577,64,FLEN)
NAN_BOXED(9213722385432990067,64,FLEN)
NAN_BOXED(13828550694585384099,64,FLEN)
NAN_BOXED(9211861545665183577,64,FLEN)
NAN_BOXED(9213740281353932141,64,FLEN)
NAN_BOXED(13828908540470278327,64,FLEN)
NAN_BOXED(9212208493389207903,64,FLEN)
NAN_BOXED(9213740281353932141,64,FLEN)
NAN_BOXED(13828908540470278327,64,FLEN)
NAN_BOXED(9212208493389207903,64,FLEN)
NAN_BOXED(9213740281353932141,64,FLEN)
NAN_BOXED(13828908540470278327,64,FLEN)
NAN_BOXED(9212208493389207903,64,FLEN)
NAN_BOXED(9213740281353932141,64,FLEN)
NAN_BOXED(13828908540470278327,64,FLEN)
NAN_BOXED(9212208493389207903,64,FLEN)
NAN_BOXED(9213740281353932141,64,FLEN)
NAN_BOXED(13828908540470278327,64,FLEN)
NAN_BOXED(9212208493389207903,64,FLEN)
NAN_BOXED(9213807635100504967,64,FLEN)
NAN_BOXED(13826282019106552769,64,FLEN)
NAN_BOXED(9209737761254774171,64,FLEN)
NAN_BOXED(9213807635100504967,64,FLEN)
NAN_BOXED(13826282019106552769,64,FLEN)
NAN_BOXED(9209737761254774171,64,FLEN)
NAN_BOXED(9213807635100504967,64,FLEN)
NAN_BOXED(13826282019106552769,64,FLEN)
NAN_BOXED(9209737761254774171,64,FLEN)
NAN_BOXED(9213807635100504967,64,FLEN)
NAN_BOXED(13826282019106552769,64,FLEN)
NAN_BOXED(9209737761254774171,64,FLEN)
NAN_BOXED(9213807635100504967,64,FLEN)
NAN_BOXED(13826282019106552769,64,FLEN)
NAN_BOXED(9209737761254774171,64,FLEN)
NAN_BOXED(9213827766475523317,64,FLEN)
NAN_BOXED(13834573428040695871,64,FLEN)
NAN_BOXED(9217875635668322637,64,FLEN)
NAN_BOXED(9213827766475523317,64,FLEN)
NAN_BOXED(13834573428040695871,64,FLEN)
NAN_BOXED(9217875635668322637,64,FLEN)
NAN_BOXED(9213827766475523317,64,FLEN)
NAN_BOXED(13834573428040695871,64,FLEN)
NAN_BOXED(9217875635668322637,64,FLEN)
NAN_BOXED(9213827766475523317,64,FLEN)
NAN_BOXED(13834573428040695871,64,FLEN)
NAN_BOXED(9217875635668322637,64,FLEN)
NAN_BOXED(9213827766475523317,64,FLEN)
NAN_BOXED(13834573428040695871,64,FLEN)
NAN_BOXED(9217875635668322637,64,FLEN)
NAN_BOXED(9213852967555730529,64,FLEN)
NAN_BOXED(13825686043441812061,64,FLEN)
NAN_BOXED(9209005287273850043,64,FLEN)
NAN_BOXED(9213852967555730529,64,FLEN)
NAN_BOXED(13825686043441812061,64,FLEN)
NAN_BOXED(9209005287273850043,64,FLEN)
NAN_BOXED(9213852967555730529,64,FLEN)
NAN_BOXED(13825686043441812061,64,FLEN)
NAN_BOXED(9209005287273850043,64,FLEN)
NAN_BOXED(9213852967555730529,64,FLEN)
NAN_BOXED(13825686043441812061,64,FLEN)
NAN_BOXED(9209005287273850043,64,FLEN)
NAN_BOXED(9213852967555730529,64,FLEN)
NAN_BOXED(13825686043441812061,64,FLEN)
NAN_BOXED(9209005287273850043,64,FLEN)
NAN_BOXED(9213975953771845169,64,FLEN)
NAN_BOXED(13831219836753139795,64,FLEN)
NAN_BOXED(9214807049103082689,64,FLEN)
NAN_BOXED(9213975953771845169,64,FLEN)
NAN_BOXED(13831219836753139795,64,FLEN)
NAN_BOXED(9214807049103082689,64,FLEN)
NAN_BOXED(9213975953771845169,64,FLEN)
NAN_BOXED(13831219836753139795,64,FLEN)
NAN_BOXED(9214807049103082689,64,FLEN)
NAN_BOXED(9213975953771845169,64,FLEN)
NAN_BOXED(13831219836753139795,64,FLEN)
NAN_BOXED(9214807049103082689,64,FLEN)
NAN_BOXED(9213975953771845169,64,FLEN)
NAN_BOXED(13831219836753139795,64,FLEN)
NAN_BOXED(9214807049103082689,64,FLEN)
NAN_BOXED(9213987299945167241,64,FLEN)
NAN_BOXED(13827019211337416840,64,FLEN)
NAN_BOXED(9210600235745851835,64,FLEN)
NAN_BOXED(9213987299945167241,64,FLEN)
NAN_BOXED(13827019211337416840,64,FLEN)
NAN_BOXED(9210600235745851835,64,FLEN)
NAN_BOXED(9213987299945167241,64,FLEN)
NAN_BOXED(13827019211337416840,64,FLEN)
NAN_BOXED(9210600235745851835,64,FLEN)
NAN_BOXED(9213987299945167241,64,FLEN)
NAN_BOXED(13827019211337416840,64,FLEN)
NAN_BOXED(9210600235745851835,64,FLEN)
NAN_BOXED(9213987299945167241,64,FLEN)
NAN_BOXED(13827019211337416840,64,FLEN)
NAN_BOXED(9210600235745851835,64,FLEN)
NAN_BOXED(9214038399799695965,64,FLEN)
NAN_BOXED(13834571667713997161,64,FLEN)
NAN_BOXED(9218073239456932770,64,FLEN)
NAN_BOXED(9214038399799695965,64,FLEN)
NAN_BOXED(13834571667713997161,64,FLEN)
NAN_BOXED(9218073239456932770,64,FLEN)
NAN_BOXED(9214038399799695965,64,FLEN)
NAN_BOXED(13834571667713997161,64,FLEN)
NAN_BOXED(9218073239456932770,64,FLEN)
NAN_BOXED(9214038399799695965,64,FLEN)
NAN_BOXED(13834571667713997161,64,FLEN)
NAN_BOXED(9218073239456932770,64,FLEN)
NAN_BOXED(9214038399799695965,64,FLEN)
NAN_BOXED(13834571667713997161,64,FLEN)
NAN_BOXED(9218073239456932770,64,FLEN)
NAN_BOXED(9214151529081257481,64,FLEN)
NAN_BOXED(13832781037269416487,64,FLEN)
NAN_BOXED(9216432035043038140,64,FLEN)
NAN_BOXED(9214151529081257481,64,FLEN)
NAN_BOXED(13832781037269416487,64,FLEN)
NAN_BOXED(9216432035043038140,64,FLEN)
NAN_BOXED(9214151529081257481,64,FLEN)
NAN_BOXED(13832781037269416487,64,FLEN)
NAN_BOXED(9216432035043038140,64,FLEN)
NAN_BOXED(9214151529081257481,64,FLEN)
NAN_BOXED(13832781037269416487,64,FLEN)
NAN_BOXED(9216432035043038140,64,FLEN)
NAN_BOXED(9214151529081257481,64,FLEN)
NAN_BOXED(13832781037269416487,64,FLEN)
NAN_BOXED(9216432035043038140,64,FLEN)
NAN_BOXED(9214323078837340989,64,FLEN)
NAN_BOXED(13827533035625801131,64,FLEN)
NAN_BOXED(9211315666576848379,64,FLEN)
NAN_BOXED(9214323078837340989,64,FLEN)
NAN_BOXED(13827533035625801131,64,FLEN)
NAN_BOXED(9211315666576848379,64,FLEN)
NAN_BOXED(9214323078837340989,64,FLEN)
NAN_BOXED(13827533035625801131,64,FLEN)
NAN_BOXED(9211315666576848379,64,FLEN)
NAN_BOXED(9214323078837340989,64,FLEN)
NAN_BOXED(13827533035625801131,64,FLEN)
NAN_BOXED(9211315666576848379,64,FLEN)
NAN_BOXED(9214323078837340989,64,FLEN)
NAN_BOXED(13827533035625801131,64,FLEN)
NAN_BOXED(9211315666576848379,64,FLEN)
NAN_BOXED(9214352631956324495,64,FLEN)
NAN_BOXED(13827653021588881378,64,FLEN)
NAN_BOXED(9211455129619849959,64,FLEN)
NAN_BOXED(9214352631956324495,64,FLEN)
NAN_BOXED(13827653021588881378,64,FLEN)
NAN_BOXED(9211455129619849959,64,FLEN)
NAN_BOXED(9214352631956324495,64,FLEN)
NAN_BOXED(13827653021588881378,64,FLEN)
NAN_BOXED(9211455129619849959,64,FLEN)
NAN_BOXED(9214352631956324495,64,FLEN)
NAN_BOXED(13827653021588881378,64,FLEN)
NAN_BOXED(9211455129619849959,64,FLEN)
NAN_BOXED(9214352631956324495,64,FLEN)
NAN_BOXED(13827653021588881378,64,FLEN)
NAN_BOXED(9211455129619849959,64,FLEN)
NAN_BOXED(9214417476604474308,64,FLEN)
NAN_BOXED(13834156473128050219,64,FLEN)
NAN_BOXED(9218061595203376134,64,FLEN)
NAN_BOXED(9214417476604474308,64,FLEN)
NAN_BOXED(13834156473128050219,64,FLEN)
NAN_BOXED(9218061595203376134,64,FLEN)
NAN_BOXED(9214417476604474308,64,FLEN)
NAN_BOXED(13834156473128050219,64,FLEN)
NAN_BOXED(9218061595203376134,64,FLEN)
NAN_BOXED(9214417476604474308,64,FLEN)
NAN_BOXED(13834156473128050219,64,FLEN)
NAN_BOXED(9218061595203376134,64,FLEN)
NAN_BOXED(9214417476604474308,64,FLEN)
NAN_BOXED(13834156473128050219,64,FLEN)
NAN_BOXED(9218061595203376134,64,FLEN)
NAN_BOXED(9214517921305756004,64,FLEN)
NAN_BOXED(13821705168519963106,64,FLEN)
NAN_BOXED(9205674001826688927,64,FLEN)
NAN_BOXED(9214517921305756004,64,FLEN)
NAN_BOXED(13821705168519963106,64,FLEN)
NAN_BOXED(9205674001826688927,64,FLEN)
NAN_BOXED(9214517921305756004,64,FLEN)
NAN_BOXED(13821705168519963106,64,FLEN)
NAN_BOXED(9205674001826688927,64,FLEN)
NAN_BOXED(9214517921305756004,64,FLEN)
NAN_BOXED(13821705168519963106,64,FLEN)
NAN_BOXED(9205674001826688927,64,FLEN)
NAN_BOXED(9214517921305756004,64,FLEN)
NAN_BOXED(13821705168519963106,64,FLEN)
NAN_BOXED(9205674001826688927,64,FLEN)
NAN_BOXED(9214528223064441670,64,FLEN)
NAN_BOXED(13830651810230902377,64,FLEN)
NAN_BOXED(9214629109553674959,64,FLEN)
NAN_BOXED(9214528223064441670,64,FLEN)
NAN_BOXED(13830651810230902377,64,FLEN)
NAN_BOXED(9214629109553674959,64,FLEN)
NAN_BOXED(9214528223064441670,64,FLEN)
NAN_BOXED(13830651810230902377,64,FLEN)
NAN_BOXED(9214629109553674959,64,FLEN)
NAN_BOXED(9214528223064441670,64,FLEN)
NAN_BOXED(13830651810230902377,64,FLEN)
NAN_BOXED(9214629109553674959,64,FLEN)
NAN_BOXED(9214528223064441670,64,FLEN)
NAN_BOXED(13830651810230902377,64,FLEN)
NAN_BOXED(9214629109553674959,64,FLEN)
NAN_BOXED(9214587331820972631,64,FLEN)
NAN_BOXED(13832707980722304934,64,FLEN)
NAN_BOXED(9216847248868635976,64,FLEN)
NAN_BOXED(9214587331820972631,64,FLEN)
NAN_BOXED(13832707980722304934,64,FLEN)
NAN_BOXED(9216847248868635976,64,FLEN)
NAN_BOXED(9214587331820972631,64,FLEN)
NAN_BOXED(13832707980722304934,64,FLEN)
NAN_BOXED(9216847248868635976,64,FLEN)
NAN_BOXED(9214587331820972631,64,FLEN)
NAN_BOXED(13832707980722304934,64,FLEN)
NAN_BOXED(9216847248868635976,64,FLEN)
NAN_BOXED(9214587331820972631,64,FLEN)
NAN_BOXED(13832707980722304934,64,FLEN)
NAN_BOXED(9216847248868635976,64,FLEN)
NAN_BOXED(9214666560039617818,64,FLEN)
NAN_BOXED(13827222095088625796,64,FLEN)
NAN_BOXED(9211412667618072621,64,FLEN)
NAN_BOXED(9214666560039617818,64,FLEN)
NAN_BOXED(13827222095088625796,64,FLEN)
NAN_BOXED(9211412667618072621,64,FLEN)
NAN_BOXED(9214666560039617818,64,FLEN)
NAN_BOXED(13827222095088625796,64,FLEN)
NAN_BOXED(9211412667618072621,64,FLEN)
NAN_BOXED(9214666560039617818,64,FLEN)
NAN_BOXED(13827222095088625796,64,FLEN)
NAN_BOXED(9211412667618072621,64,FLEN)
NAN_BOXED(9214666560039617818,64,FLEN)
NAN_BOXED(13827222095088625796,64,FLEN)
NAN_BOXED(9211412667618072621,64,FLEN)
NAN_BOXED(9214718131199616337,64,FLEN)
NAN_BOXED(13831712102729386106,64,FLEN)
NAN_BOXED(9215966592142196585,64,FLEN)
NAN_BOXED(9214718131199616337,64,FLEN)
NAN_BOXED(13831712102729386106,64,FLEN)
NAN_BOXED(9215966592142196585,64,FLEN)
NAN_BOXED(9214718131199616337,64,FLEN)
NAN_BOXED(13831712102729386106,64,FLEN)
NAN_BOXED(9215966592142196585,64,FLEN)
NAN_BOXED(9214718131199616337,64,FLEN)
NAN_BOXED(13831712102729386106,64,FLEN)
NAN_BOXED(9215966592142196585,64,FLEN)
NAN_BOXED(9214718131199616337,64,FLEN)
NAN_BOXED(13831712102729386106,64,FLEN)
NAN_BOXED(9215966592142196585,64,FLEN)
NAN_BOXED(9214759000378731513,64,FLEN)
NAN_BOXED(13830804418694139164,64,FLEN)
NAN_BOXED(9215030840612835468,64,FLEN)
NAN_BOXED(9214759000378731513,64,FLEN)
NAN_BOXED(13830804418694139164,64,FLEN)
NAN_BOXED(9215030840612835468,64,FLEN)
NAN_BOXED(9214759000378731513,64,FLEN)
NAN_BOXED(13830804418694139164,64,FLEN)
NAN_BOXED(9215030840612835468,64,FLEN)
NAN_BOXED(9214759000378731513,64,FLEN)
NAN_BOXED(13830804418694139164,64,FLEN)
NAN_BOXED(9215030840612835468,64,FLEN)
NAN_BOXED(9214759000378731513,64,FLEN)
NAN_BOXED(13830804418694139164,64,FLEN)
NAN_BOXED(9215030840612835468,64,FLEN)
NAN_BOXED(9214771458937342072,64,FLEN)
NAN_BOXED(13826709750240889781,64,FLEN)
NAN_BOXED(9210986243813071781,64,FLEN)
NAN_BOXED(9214771458937342072,64,FLEN)
NAN_BOXED(13826709750240889781,64,FLEN)
NAN_BOXED(9210986243813071781,64,FLEN)
NAN_BOXED(9214771458937342072,64,FLEN)
NAN_BOXED(13826709750240889781,64,FLEN)
NAN_BOXED(9210986243813071781,64,FLEN)
NAN_BOXED(9214771458937342072,64,FLEN)
NAN_BOXED(13826709750240889781,64,FLEN)
NAN_BOXED(9210986243813071781,64,FLEN)
NAN_BOXED(9214771458937342072,64,FLEN)
NAN_BOXED(13826709750240889781,64,FLEN)
NAN_BOXED(9210986243813071781,64,FLEN)
NAN_BOXED(9214772150925063043,64,FLEN)
NAN_BOXED(13827153797261129963,64,FLEN)
NAN_BOXED(9211471244440624085,64,FLEN)
NAN_BOXED(9214772150925063043,64,FLEN)
NAN_BOXED(13827153797261129963,64,FLEN)
NAN_BOXED(9211471244440624085,64,FLEN)
NAN_BOXED(9214772150925063043,64,FLEN)
NAN_BOXED(13827153797261129963,64,FLEN)
NAN_BOXED(9211471244440624085,64,FLEN)
NAN_BOXED(9214772150925063043,64,FLEN)
NAN_BOXED(13827153797261129963,64,FLEN)
NAN_BOXED(9211471244440624085,64,FLEN)
NAN_BOXED(9214772150925063043,64,FLEN)
NAN_BOXED(13827153797261129963,64,FLEN)
NAN_BOXED(9211471244440624085,64,FLEN)
NAN_BOXED(9214859250582623409,64,FLEN)
NAN_BOXED(13831090018338903377,64,FLEN)
NAN_BOXED(9215453608267604609,64,FLEN)
NAN_BOXED(9214859250582623409,64,FLEN)
NAN_BOXED(13831090018338903377,64,FLEN)
NAN_BOXED(9215453608267604609,64,FLEN)
NAN_BOXED(9214859250582623409,64,FLEN)
NAN_BOXED(13831090018338903377,64,FLEN)
NAN_BOXED(9215453608267604609,64,FLEN)
NAN_BOXED(9214859250582623409,64,FLEN)
NAN_BOXED(13831090018338903377,64,FLEN)
NAN_BOXED(9215453608267604609,64,FLEN)
NAN_BOXED(9214859250582623409,64,FLEN)
NAN_BOXED(13831090018338903377,64,FLEN)
NAN_BOXED(9215453608267604609,64,FLEN)
NAN_BOXED(9215042680755139022,64,FLEN)
NAN_BOXED(13831862517528212587,64,FLEN)
NAN_BOXED(9216547620872788064,64,FLEN)
NAN_BOXED(9215042680755139022,64,FLEN)
NAN_BOXED(13831862517528212587,64,FLEN)
NAN_BOXED(9216547620872788064,64,FLEN)
NAN_BOXED(9215042680755139022,64,FLEN)
NAN_BOXED(13831862517528212587,64,FLEN)
NAN_BOXED(9216547620872788064,64,FLEN)
NAN_BOXED(9215042680755139022,64,FLEN)
NAN_BOXED(13831862517528212587,64,FLEN)
NAN_BOXED(9216547620872788064,64,FLEN)
NAN_BOXED(9215042680755139022,64,FLEN)
NAN_BOXED(13831862517528212587,64,FLEN)
NAN_BOXED(9216547620872788064,64,FLEN)
NAN_BOXED(9215093486136343160,64,FLEN)
NAN_BOXED(13833480413163080255,64,FLEN)
NAN_BOXED(9218492841555660439,64,FLEN)
NAN_BOXED(9215093486136343160,64,FLEN)
NAN_BOXED(13833480413163080255,64,FLEN)
NAN_BOXED(9218492841555660439,64,FLEN)
NAN_BOXED(9215093486136343160,64,FLEN)
NAN_BOXED(13833480413163080255,64,FLEN)
NAN_BOXED(9218492841555660439,64,FLEN)
NAN_BOXED(9215093486136343160,64,FLEN)
NAN_BOXED(13833480413163080255,64,FLEN)
NAN_BOXED(9218492841555660439,64,FLEN)
NAN_BOXED(9215093486136343160,64,FLEN)
NAN_BOXED(13833480413163080255,64,FLEN)
NAN_BOXED(9218492841555660439,64,FLEN)
NAN_BOXED(9215199145734236069,64,FLEN)
NAN_BOXED(13830260080440046201,64,FLEN)
NAN_BOXED(9215024691089770937,64,FLEN)
NAN_BOXED(9215199145734236069,64,FLEN)
NAN_BOXED(13830260080440046201,64,FLEN)
NAN_BOXED(9215024691089770937,64,FLEN)
NAN_BOXED(9215199145734236069,64,FLEN)
NAN_BOXED(13830260080440046201,64,FLEN)
NAN_BOXED(9215024691089770937,64,FLEN)
NAN_BOXED(9215199145734236069,64,FLEN)
NAN_BOXED(13830260080440046201,64,FLEN)
NAN_BOXED(9215024691089770937,64,FLEN)
NAN_BOXED(9215199145734236069,64,FLEN)
NAN_BOXED(13830260080440046201,64,FLEN)
NAN_BOXED(9215024691089770937,64,FLEN)
NAN_BOXED(9215211156029838778,64,FLEN)
NAN_BOXED(13832316097417983414,64,FLEN)
NAN_BOXED(9217303846290732735,64,FLEN)
NAN_BOXED(9215211156029838778,64,FLEN)
NAN_BOXED(13832316097417983414,64,FLEN)
NAN_BOXED(9217303846290732735,64,FLEN)
NAN_BOXED(9215211156029838778,64,FLEN)
NAN_BOXED(13832316097417983414,64,FLEN)
NAN_BOXED(9217303846290732735,64,FLEN)
NAN_BOXED(9215211156029838778,64,FLEN)
NAN_BOXED(13832316097417983414,64,FLEN)
NAN_BOXED(9217303846290732735,64,FLEN)
NAN_BOXED(9215211156029838778,64,FLEN)
NAN_BOXED(13832316097417983414,64,FLEN)
NAN_BOXED(9217303846290732735,64,FLEN)
NAN_BOXED(9215211282470298276,64,FLEN)
NAN_BOXED(13824279604996894358,64,FLEN)
NAN_BOXED(9209449972678579599,64,FLEN)
NAN_BOXED(9215211282470298276,64,FLEN)
NAN_BOXED(13824279604996894358,64,FLEN)
NAN_BOXED(9209449972678579599,64,FLEN)
NAN_BOXED(9215211282470298276,64,FLEN)
NAN_BOXED(13824279604996894358,64,FLEN)
NAN_BOXED(9209449972678579599,64,FLEN)
NAN_BOXED(9215211282470298276,64,FLEN)
NAN_BOXED(13824279604996894358,64,FLEN)
NAN_BOXED(9209449972678579599,64,FLEN)
NAN_BOXED(9215211282470298276,64,FLEN)
NAN_BOXED(13824279604996894358,64,FLEN)
NAN_BOXED(9209449972678579599,64,FLEN)
NAN_BOXED(9215227817164289166,64,FLEN)
NAN_BOXED(13824899491739129470,64,FLEN)
NAN_BOXED(9210038223205408549,64,FLEN)
NAN_BOXED(9215227817164289166,64,FLEN)
NAN_BOXED(13824899491739129470,64,FLEN)
NAN_BOXED(9210038223205408549,64,FLEN)
NAN_BOXED(9215227817164289166,64,FLEN)
NAN_BOXED(13824899491739129470,64,FLEN)
NAN_BOXED(9210038223205408549,64,FLEN)
NAN_BOXED(9215227817164289166,64,FLEN)
NAN_BOXED(13824899491739129470,64,FLEN)
NAN_BOXED(9210038223205408549,64,FLEN)
NAN_BOXED(9215227817164289166,64,FLEN)
NAN_BOXED(13824899491739129470,64,FLEN)
NAN_BOXED(9210038223205408549,64,FLEN)
NAN_BOXED(9215228967060500136,64,FLEN)
NAN_BOXED(13830069610503995082,64,FLEN)
NAN_BOXED(9214940029584440035,64,FLEN)
NAN_BOXED(9215228967060500136,64,FLEN)
NAN_BOXED(13830069610503995082,64,FLEN)
NAN_BOXED(9214940029584440035,64,FLEN)
NAN_BOXED(9215228967060500136,64,FLEN)
NAN_BOXED(13830069610503995082,64,FLEN)
NAN_BOXED(9214940029584440035,64,FLEN)
NAN_BOXED(9215228967060500136,64,FLEN)
NAN_BOXED(13830069610503995082,64,FLEN)
NAN_BOXED(9214940029584440035,64,FLEN)
NAN_BOXED(9215228967060500136,64,FLEN)
NAN_BOXED(13830069610503995082,64,FLEN)
NAN_BOXED(9214940029584440035,64,FLEN)
NAN_BOXED(9215267517754585278,64,FLEN)
NAN_BOXED(13828894162346889468,64,FLEN)
NAN_BOXED(9214177123283223779,64,FLEN)
NAN_BOXED(9215267517754585278,64,FLEN)
NAN_BOXED(13828894162346889468,64,FLEN)
NAN_BOXED(9214177123283223779,64,FLEN)
NAN_BOXED(9215267517754585278,64,FLEN)
NAN_BOXED(13828894162346889468,64,FLEN)
NAN_BOXED(9214177123283223779,64,FLEN)
NAN_BOXED(9215267517754585278,64,FLEN)
NAN_BOXED(13828894162346889468,64,FLEN)
NAN_BOXED(9214177123283223779,64,FLEN)
NAN_BOXED(9215267517754585278,64,FLEN)
NAN_BOXED(13828894162346889468,64,FLEN)
NAN_BOXED(9214177123283223779,64,FLEN)
NAN_BOXED(9215337953708494217,64,FLEN)
NAN_BOXED(13828578235869920910,64,FLEN)
NAN_BOXED(9213907837982691335,64,FLEN)
NAN_BOXED(9215337953708494217,64,FLEN)
NAN_BOXED(13828578235869920910,64,FLEN)
NAN_BOXED(9213907837982691335,64,FLEN)
NAN_BOXED(9215337953708494217,64,FLEN)
NAN_BOXED(13828578235869920910,64,FLEN)
NAN_BOXED(9213907837982691335,64,FLEN)
NAN_BOXED(9215337953708494217,64,FLEN)
NAN_BOXED(13828578235869920910,64,FLEN)
NAN_BOXED(9213907837982691335,64,FLEN)
NAN_BOXED(9215337953708494217,64,FLEN)
NAN_BOXED(13828578235869920910,64,FLEN)
NAN_BOXED(9213907837982691335,64,FLEN)
NAN_BOXED(9215343108548264665,64,FLEN)
NAN_BOXED(13826743643363236114,64,FLEN)
NAN_BOXED(9211682783373681481,64,FLEN)
NAN_BOXED(9215343108548264665,64,FLEN)
NAN_BOXED(13826743643363236114,64,FLEN)
NAN_BOXED(9211682783373681481,64,FLEN)
NAN_BOXED(9215343108548264665,64,FLEN)
NAN_BOXED(13826743643363236114,64,FLEN)
NAN_BOXED(9211682783373681481,64,FLEN)
NAN_BOXED(9215343108548264665,64,FLEN)
NAN_BOXED(13826743643363236114,64,FLEN)
NAN_BOXED(9211682783373681481,64,FLEN)
NAN_BOXED(9215343108548264665,64,FLEN)
NAN_BOXED(13826743643363236114,64,FLEN)
NAN_BOXED(9211682783373681481,64,FLEN)
NAN_BOXED(9215363083318547479,64,FLEN)
NAN_BOXED(13832819865033749606,64,FLEN)
NAN_BOXED(9218130632185987223,64,FLEN)
NAN_BOXED(9215363083318547479,64,FLEN)
NAN_BOXED(13832819865033749606,64,FLEN)
NAN_BOXED(9218130632185987223,64,FLEN)
NAN_BOXED(9215363083318547479,64,FLEN)
NAN_BOXED(13832819865033749606,64,FLEN)
NAN_BOXED(9218130632185987223,64,FLEN)
NAN_BOXED(9215363083318547479,64,FLEN)
NAN_BOXED(13832819865033749606,64,FLEN)
NAN_BOXED(9218130632185987223,64,FLEN)
NAN_BOXED(9215363083318547479,64,FLEN)
NAN_BOXED(13832819865033749606,64,FLEN)
NAN_BOXED(9218130632185987223,64,FLEN)
NAN_BOXED(9215371787989791828,64,FLEN)
NAN_BOXED(13830236012405093483,64,FLEN)
NAN_BOXED(9215176966335972706,64,FLEN)
NAN_BOXED(9215371787989791828,64,FLEN)
NAN_BOXED(13830236012405093483,64,FLEN)
NAN_BOXED(9215176966335972706,64,FLEN)
NAN_BOXED(9215371787989791828,64,FLEN)
NAN_BOXED(13830236012405093483,64,FLEN)
NAN_BOXED(9215176966335972706,64,FLEN)
NAN_BOXED(9215371787989791828,64,FLEN)
NAN_BOXED(13830236012405093483,64,FLEN)
NAN_BOXED(9215176966335972706,64,FLEN)
NAN_BOXED(9215371787989791828,64,FLEN)
NAN_BOXED(13830236012405093483,64,FLEN)
NAN_BOXED(9215176966335972706,64,FLEN)
NAN_BOXED(9215387731997531544,64,FLEN)
NAN_BOXED(13818108033712252947,64,FLEN)
NAN_BOXED(9203183060054634959,64,FLEN)
NAN_BOXED(9215387731997531544,64,FLEN)
NAN_BOXED(13818108033712252947,64,FLEN)
NAN_BOXED(9203183060054634959,64,FLEN)
NAN_BOXED(9215387731997531544,64,FLEN)
NAN_BOXED(13818108033712252947,64,FLEN)
NAN_BOXED(9203183060054634959,64,FLEN)
NAN_BOXED(9215387731997531544,64,FLEN)
NAN_BOXED(13818108033712252947,64,FLEN)
NAN_BOXED(9203183060054634959,64,FLEN)
NAN_BOXED(9215387731997531544,64,FLEN)
NAN_BOXED(13818108033712252947,64,FLEN)
NAN_BOXED(9203183060054634959,64,FLEN)
NAN_BOXED(9215389472895680703,64,FLEN)
NAN_BOXED(13826664190214720165,64,FLEN)
NAN_BOXED(9211638750023404287,64,FLEN)
NAN_BOXED(9215389472895680703,64,FLEN)
NAN_BOXED(13826664190214720165,64,FLEN)
NAN_BOXED(9211638750023404287,64,FLEN)
NAN_BOXED(9215389472895680703,64,FLEN)
NAN_BOXED(13826664190214720165,64,FLEN)
NAN_BOXED(9211638750023404287,64,FLEN)
NAN_BOXED(9215389472895680703,64,FLEN)
NAN_BOXED(13826664190214720165,64,FLEN)
NAN_BOXED(9211638750023404287,64,FLEN)
NAN_BOXED(9215389472895680703,64,FLEN)
NAN_BOXED(13826664190214720165,64,FLEN)
NAN_BOXED(9211638750023404287,64,FLEN)
NAN_BOXED(9215402179075530408,64,FLEN)
NAN_BOXED(13820780519695331938,64,FLEN)
NAN_BOXED(9205923307905679451,64,FLEN)
NAN_BOXED(9215402179075530408,64,FLEN)
NAN_BOXED(13820780519695331938,64,FLEN)
NAN_BOXED(9205923307905679451,64,FLEN)
NAN_BOXED(9215402179075530408,64,FLEN)
NAN_BOXED(13820780519695331938,64,FLEN)
NAN_BOXED(9205923307905679451,64,FLEN)
NAN_BOXED(9215402179075530408,64,FLEN)
NAN_BOXED(13820780519695331938,64,FLEN)
NAN_BOXED(9205923307905679451,64,FLEN)
NAN_BOXED(9215402179075530408,64,FLEN)
NAN_BOXED(13820780519695331938,64,FLEN)
NAN_BOXED(9205923307905679451,64,FLEN)
NAN_BOXED(9215422755854844672,64,FLEN)
NAN_BOXED(13819933048153860656,64,FLEN)
NAN_BOXED(9205418859649935507,64,FLEN)
NAN_BOXED(9215422755854844672,64,FLEN)
NAN_BOXED(13819933048153860656,64,FLEN)
NAN_BOXED(9205418859649935507,64,FLEN)
NAN_BOXED(9215422755854844672,64,FLEN)
NAN_BOXED(13819933048153860656,64,FLEN)
NAN_BOXED(9205418859649935507,64,FLEN)
NAN_BOXED(9215422755854844672,64,FLEN)
NAN_BOXED(13819933048153860656,64,FLEN)
NAN_BOXED(9205418859649935507,64,FLEN)
NAN_BOXED(9215422755854844672,64,FLEN)
NAN_BOXED(13819933048153860656,64,FLEN)
NAN_BOXED(9205418859649935507,64,FLEN)
NAN_BOXED(9215440886084654524,64,FLEN)
NAN_BOXED(13827779871799129750,64,FLEN)
NAN_BOXED(9213079417282496649,64,FLEN)
NAN_BOXED(9215440886084654524,64,FLEN)
NAN_BOXED(13827779871799129750,64,FLEN)
NAN_BOXED(9213079417282496649,64,FLEN)
NAN_BOXED(9215440886084654524,64,FLEN)
NAN_BOXED(13827779871799129750,64,FLEN)
NAN_BOXED(9213079417282496649,64,FLEN)
NAN_BOXED(9215440886084654524,64,FLEN)
NAN_BOXED(13827779871799129750,64,FLEN)
NAN_BOXED(9213079417282496649,64,FLEN)
NAN_BOXED(9215440886084654524,64,FLEN)
NAN_BOXED(13827779871799129750,64,FLEN)
NAN_BOXED(9213079417282496649,64,FLEN)
NAN_BOXED(9215467364242047246,64,FLEN)
NAN_BOXED(13813079856117835981,64,FLEN)
NAN_BOXED(9198124912941563455,64,FLEN)
NAN_BOXED(9215467364242047246,64,FLEN)
NAN_BOXED(13813079856117835981,64,FLEN)
NAN_BOXED(9198124912941563455,64,FLEN)
NAN_BOXED(9215467364242047246,64,FLEN)
NAN_BOXED(13813079856117835981,64,FLEN)
NAN_BOXED(9198124912941563455,64,FLEN)
NAN_BOXED(9215467364242047246,64,FLEN)
NAN_BOXED(13813079856117835981,64,FLEN)
NAN_BOXED(9198124912941563455,64,FLEN)
NAN_BOXED(9215467364242047246,64,FLEN)
NAN_BOXED(13813079856117835981,64,FLEN)
NAN_BOXED(9198124912941563455,64,FLEN)
NAN_BOXED(9215471837654651743,64,FLEN)
NAN_BOXED(13831414000221490851,64,FLEN)
NAN_BOXED(9216542661189510125,64,FLEN)
NAN_BOXED(9215471837654651743,64,FLEN)
NAN_BOXED(13831414000221490851,64,FLEN)
NAN_BOXED(9216542661189510125,64,FLEN)
NAN_BOXED(9215471837654651743,64,FLEN)
NAN_BOXED(13831414000221490851,64,FLEN)
NAN_BOXED(9216542661189510125,64,FLEN)
NAN_BOXED(9215471837654651743,64,FLEN)
NAN_BOXED(13831414000221490851,64,FLEN)
NAN_BOXED(9216542661189510125,64,FLEN)
NAN_BOXED(9215471837654651743,64,FLEN)
NAN_BOXED(13831414000221490851,64,FLEN)
NAN_BOXED(9216542661189510125,64,FLEN)
NAN_BOXED(9215479362256010267,64,FLEN)
NAN_BOXED(13831644494824292624,64,FLEN)
NAN_BOXED(9216839157982687343,64,FLEN)
NAN_BOXED(9215479362256010267,64,FLEN)
NAN_BOXED(13831644494824292624,64,FLEN)
NAN_BOXED(9216839157982687343,64,FLEN)
NAN_BOXED(9215479362256010267,64,FLEN)
NAN_BOXED(13831644494824292624,64,FLEN)
NAN_BOXED(9216839157982687343,64,FLEN)
NAN_BOXED(9215479362256010267,64,FLEN)
NAN_BOXED(13831644494824292624,64,FLEN)
NAN_BOXED(9216839157982687343,64,FLEN)
NAN_BOXED(9215479362256010267,64,FLEN)
NAN_BOXED(13831644494824292624,64,FLEN)
NAN_BOXED(9216839157982687343,64,FLEN)
NAN_BOXED(9215488913311851491,64,FLEN)
NAN_BOXED(13826654887562188648,64,FLEN)
NAN_BOXED(9211740108438356203,64,FLEN)
NAN_BOXED(9215488913311851491,64,FLEN)
NAN_BOXED(13826654887562188648,64,FLEN)
NAN_BOXED(9211740108438356203,64,FLEN)
NAN_BOXED(9215488913311851491,64,FLEN)
NAN_BOXED(13826654887562188648,64,FLEN)
NAN_BOXED(9211740108438356203,64,FLEN)
NAN_BOXED(9215488913311851491,64,FLEN)
NAN_BOXED(13826654887562188648,64,FLEN)
NAN_BOXED(9211740108438356203,64,FLEN)
NAN_BOXED(9215488913311851491,64,FLEN)
NAN_BOXED(13826654887562188648,64,FLEN)
NAN_BOXED(9211740108438356203,64,FLEN)
NAN_BOXED(9215530876249671969,64,FLEN)
NAN_BOXED(13832427750375101490,64,FLEN)
NAN_BOXED(9217889190560257638,64,FLEN)
NAN_BOXED(9215530876249671969,64,FLEN)
NAN_BOXED(13832427750375101490,64,FLEN)
NAN_BOXED(9217889190560257638,64,FLEN)
NAN_BOXED(9215530876249671969,64,FLEN)
NAN_BOXED(13832427750375101490,64,FLEN)
NAN_BOXED(9217889190560257638,64,FLEN)
NAN_BOXED(9215530876249671969,64,FLEN)
NAN_BOXED(13832427750375101490,64,FLEN)
NAN_BOXED(9217889190560257638,64,FLEN)
NAN_BOXED(9215530876249671969,64,FLEN)
NAN_BOXED(13832427750375101490,64,FLEN)
NAN_BOXED(9217889190560257638,64,FLEN)
NAN_BOXED(9215539370018603788,64,FLEN)
NAN_BOXED(13831680430095417096,64,FLEN)
NAN_BOXED(9216958997002174735,64,FLEN)
NAN_BOXED(9215539370018603788,64,FLEN)
NAN_BOXED(13831680430095417096,64,FLEN)
NAN_BOXED(9216958997002174735,64,FLEN)
NAN_BOXED(9215539370018603788,64,FLEN)
NAN_BOXED(13831680430095417096,64,FLEN)
NAN_BOXED(9216958997002174735,64,FLEN)
NAN_BOXED(9215539370018603788,64,FLEN)
NAN_BOXED(13831680430095417096,64,FLEN)
NAN_BOXED(9216958997002174735,64,FLEN)
NAN_BOXED(9215539370018603788,64,FLEN)
NAN_BOXED(13831680430095417096,64,FLEN)
NAN_BOXED(9216958997002174735,64,FLEN)
NAN_BOXED(9215543566189704342,64,FLEN)
NAN_BOXED(13812817913134404481,64,FLEN)
NAN_BOXED(9197879747007368271,64,FLEN)
NAN_BOXED(9215543566189704342,64,FLEN)
NAN_BOXED(13812817913134404481,64,FLEN)
NAN_BOXED(9197879747007368271,64,FLEN)
NAN_BOXED(9215543566189704342,64,FLEN)
NAN_BOXED(13812817913134404481,64,FLEN)
NAN_BOXED(9197879747007368271,64,FLEN)
NAN_BOXED(9215543566189704342,64,FLEN)
NAN_BOXED(13812817913134404481,64,FLEN)
NAN_BOXED(9197879747007368271,64,FLEN)
NAN_BOXED(9215543566189704342,64,FLEN)
NAN_BOXED(13812817913134404481,64,FLEN)
NAN_BOXED(9197879747007368271,64,FLEN)
NAN_BOXED(9215597622953587703,64,FLEN)
NAN_BOXED(13831145263570277301,64,FLEN)
NAN_BOXED(9216350154691177428,64,FLEN)
NAN_BOXED(9215597622953587703,64,FLEN)
NAN_BOXED(13831145263570277301,64,FLEN)
NAN_BOXED(9216350154691177428,64,FLEN)
NAN_BOXED(9215597622953587703,64,FLEN)
NAN_BOXED(13831145263570277301,64,FLEN)
NAN_BOXED(9216350154691177428,64,FLEN)
NAN_BOXED(9215597622953587703,64,FLEN)
NAN_BOXED(13831145263570277301,64,FLEN)
NAN_BOXED(9216350154691177428,64,FLEN)
NAN_BOXED(9215597622953587703,64,FLEN)
NAN_BOXED(13831145263570277301,64,FLEN)
NAN_BOXED(9216350154691177428,64,FLEN)
NAN_BOXED(9215669770256659588,64,FLEN)
NAN_BOXED(13829981475560553438,64,FLEN)
NAN_BOXED(9215300268785519533,64,FLEN)
NAN_BOXED(9215669770256659588,64,FLEN)
NAN_BOXED(13829981475560553438,64,FLEN)
NAN_BOXED(9215300268785519533,64,FLEN)
NAN_BOXED(9215669770256659588,64,FLEN)
NAN_BOXED(13829981475560553438,64,FLEN)
NAN_BOXED(9215300268785519533,64,FLEN)
NAN_BOXED(9215669770256659588,64,FLEN)
NAN_BOXED(13829981475560553438,64,FLEN)
NAN_BOXED(9215300268785519533,64,FLEN)
NAN_BOXED(9215669770256659588,64,FLEN)
NAN_BOXED(13829981475560553438,64,FLEN)
NAN_BOXED(9215300268785519533,64,FLEN)
NAN_BOXED(9215677523609526847,64,FLEN)
NAN_BOXED(13832692147256072557,64,FLEN)
NAN_BOXED(9218438298541871833,64,FLEN)
NAN_BOXED(9215677523609526847,64,FLEN)
NAN_BOXED(13832692147256072557,64,FLEN)
NAN_BOXED(9218438298541871833,64,FLEN)
NAN_BOXED(9215677523609526847,64,FLEN)
NAN_BOXED(13832692147256072557,64,FLEN)
NAN_BOXED(9218438298541871833,64,FLEN)
NAN_BOXED(9215677523609526847,64,FLEN)
NAN_BOXED(13832692147256072557,64,FLEN)
NAN_BOXED(9218438298541871833,64,FLEN)
NAN_BOXED(9215677523609526847,64,FLEN)
NAN_BOXED(13832692147256072557,64,FLEN)
NAN_BOXED(9218438298541871833,64,FLEN)
NAN_BOXED(9215692831533944369,64,FLEN)
NAN_BOXED(13831599176907800454,64,FLEN)
NAN_BOXED(9217045613805117657,64,FLEN)
NAN_BOXED(9215692831533944369,64,FLEN)
NAN_BOXED(13831599176907800454,64,FLEN)
NAN_BOXED(9217045613805117657,64,FLEN)
NAN_BOXED(9215692831533944369,64,FLEN)
NAN_BOXED(13831599176907800454,64,FLEN)
NAN_BOXED(9217045613805117657,64,FLEN)
NAN_BOXED(9215692831533944369,64,FLEN)
NAN_BOXED(13831599176907800454,64,FLEN)
NAN_BOXED(9217045613805117657,64,FLEN)
NAN_BOXED(9215692831533944369,64,FLEN)
NAN_BOXED(13831599176907800454,64,FLEN)
NAN_BOXED(9217045613805117657,64,FLEN)
NAN_BOXED(9215713144615661532,64,FLEN)
NAN_BOXED(13829597419493476074,64,FLEN)
NAN_BOXED(9215091365735056389,64,FLEN)
NAN_BOXED(9215713144615661532,64,FLEN)
NAN_BOXED(13829597419493476074,64,FLEN)
NAN_BOXED(9215091365735056389,64,FLEN)
NAN_BOXED(9215713144615661532,64,FLEN)
NAN_BOXED(13829597419493476074,64,FLEN)
NAN_BOXED(9215091365735056389,64,FLEN)
NAN_BOXED(9215713144615661532,64,FLEN)
NAN_BOXED(13829597419493476074,64,FLEN)
NAN_BOXED(9215091365735056389,64,FLEN)
NAN_BOXED(9215713144615661532,64,FLEN)
NAN_BOXED(13829597419493476074,64,FLEN)
NAN_BOXED(9215091365735056389,64,FLEN)
NAN_BOXED(9215842184415356004,64,FLEN)
NAN_BOXED(13831202985092912953,64,FLEN)
NAN_BOXED(9216703455433394477,64,FLEN)
NAN_BOXED(9215842184415356004,64,FLEN)
NAN_BOXED(13831202985092912953,64,FLEN)
NAN_BOXED(9216703455433394477,64,FLEN)
NAN_BOXED(9215842184415356004,64,FLEN)
NAN_BOXED(13831202985092912953,64,FLEN)
NAN_BOXED(9216703455433394477,64,FLEN)
NAN_BOXED(9215842184415356004,64,FLEN)
NAN_BOXED(13831202985092912953,64,FLEN)
NAN_BOXED(9216703455433394477,64,FLEN)
NAN_BOXED(9215842184415356004,64,FLEN)
NAN_BOXED(13831202985092912953,64,FLEN)
NAN_BOXED(9216703455433394477,64,FLEN)
NAN_BOXED(9215856035544098762,64,FLEN)
NAN_BOXED(13827241978345292442,64,FLEN)
NAN_BOXED(9212937953673468977,64,FLEN)
NAN_BOXED(9215856035544098762,64,FLEN)
NAN_BOXED(13827241978345292442,64,FLEN)
NAN_BOXED(9212937953673468977,64,FLEN)
NAN_BOXED(9215856035544098762,64,FLEN)
NAN_BOXED(13827241978345292442,64,FLEN)
NAN_BOXED(9212937953673468977,64,FLEN)
NAN_BOXED(9215856035544098762,64,FLEN)
NAN_BOXED(13827241978345292442,64,FLEN)
NAN_BOXED(9212937953673468977,64,FLEN)
NAN_BOXED(9215856035544098762,64,FLEN)
NAN_BOXED(13827241978345292442,64,FLEN)
NAN_BOXED(9212937953673468977,64,FLEN)
NAN_BOXED(9216068770802219538,64,FLEN)
NAN_BOXED(13832564239708335092,64,FLEN)
NAN_BOXED(9218838954993739681,64,FLEN)
NAN_BOXED(9216068770802219538,64,FLEN)
NAN_BOXED(13832564239708335092,64,FLEN)
NAN_BOXED(9218838954993739681,64,FLEN)
NAN_BOXED(9216068770802219538,64,FLEN)
NAN_BOXED(13832564239708335092,64,FLEN)
NAN_BOXED(9218838954993739681,64,FLEN)
NAN_BOXED(9216068770802219538,64,FLEN)
NAN_BOXED(13832564239708335092,64,FLEN)
NAN_BOXED(9218838954993739681,64,FLEN)
NAN_BOXED(9216068770802219538,64,FLEN)
NAN_BOXED(13832564239708335092,64,FLEN)
NAN_BOXED(9218838954993739681,64,FLEN)
NAN_BOXED(9216081987549895335,64,FLEN)
NAN_BOXED(13832353714886247098,64,FLEN)
NAN_BOXED(9218567275326227001,64,FLEN)
NAN_BOXED(9216081987549895335,64,FLEN)
NAN_BOXED(13832353714886247098,64,FLEN)
NAN_BOXED(9218567275326227001,64,FLEN)
NAN_BOXED(9216081987549895335,64,FLEN)
NAN_BOXED(13832353714886247098,64,FLEN)
NAN_BOXED(9218567275326227001,64,FLEN)
NAN_BOXED(9216081987549895335,64,FLEN)
NAN_BOXED(13832353714886247098,64,FLEN)
NAN_BOXED(9218567275326227001,64,FLEN)
NAN_BOXED(9216081987549895335,64,FLEN)
NAN_BOXED(13832353714886247098,64,FLEN)
NAN_BOXED(9218567275326227001,64,FLEN)
NAN_BOXED(9216089045985180306,64,FLEN)
NAN_BOXED(13830738532931259696,64,FLEN)
NAN_BOXED(9216343597462254969,64,FLEN)
NAN_BOXED(9216089045985180306,64,FLEN)
NAN_BOXED(13830738532931259696,64,FLEN)
NAN_BOXED(9216343597462254969,64,FLEN)
NAN_BOXED(9216089045985180306,64,FLEN)
NAN_BOXED(13830738532931259696,64,FLEN)
NAN_BOXED(9216343597462254969,64,FLEN)
NAN_BOXED(9216089045985180306,64,FLEN)
NAN_BOXED(13830738532931259696,64,FLEN)
NAN_BOXED(9216343597462254969,64,FLEN)
NAN_BOXED(9216089045985180306,64,FLEN)
NAN_BOXED(13830738532931259696,64,FLEN)
NAN_BOXED(9216343597462254969,64,FLEN)
NAN_BOXED(9216117832110944659,64,FLEN)
NAN_BOXED(13827159661090605109,64,FLEN)
NAN_BOXED(9213154632126704293,64,FLEN)
NAN_BOXED(9216117832110944659,64,FLEN)
NAN_BOXED(13827159661090605109,64,FLEN)
NAN_BOXED(9213154632126704293,64,FLEN)
NAN_BOXED(9216117832110944659,64,FLEN)
NAN_BOXED(13827159661090605109,64,FLEN)
NAN_BOXED(9213154632126704293,64,FLEN)
NAN_BOXED(9216117832110944659,64,FLEN)
NAN_BOXED(13827159661090605109,64,FLEN)
NAN_BOXED(9213154632126704293,64,FLEN)
NAN_BOXED(9216117832110944659,64,FLEN)
NAN_BOXED(13827159661090605109,64,FLEN)
NAN_BOXED(9213154632126704293,64,FLEN)
NAN_BOXED(9216177519788711718,64,FLEN)
NAN_BOXED(13813060508476702661,64,FLEN)
NAN_BOXED(9198893052346064975,64,FLEN)
NAN_BOXED(9216177519788711718,64,FLEN)
NAN_BOXED(13813060508476702661,64,FLEN)
NAN_BOXED(9198893052346064975,64,FLEN)
NAN_BOXED(9216177519788711718,64,FLEN)
NAN_BOXED(13813060508476702661,64,FLEN)
NAN_BOXED(9198893052346064975,64,FLEN)
NAN_BOXED(9216177519788711718,64,FLEN)
NAN_BOXED(13813060508476702661,64,FLEN)
NAN_BOXED(9198893052346064975,64,FLEN)
NAN_BOXED(9216177519788711718,64,FLEN)
NAN_BOXED(13813060508476702661,64,FLEN)
NAN_BOXED(9198893052346064975,64,FLEN)
NAN_BOXED(9216208333272537297,64,FLEN)
NAN_BOXED(13813865221176337559,64,FLEN)
NAN_BOXED(9200061539143731311,64,FLEN)
NAN_BOXED(9216208333272537297,64,FLEN)
NAN_BOXED(13813865221176337559,64,FLEN)
NAN_BOXED(9200061539143731311,64,FLEN)
NAN_BOXED(9216208333272537297,64,FLEN)
NAN_BOXED(13813865221176337559,64,FLEN)
NAN_BOXED(9200061539143731311,64,FLEN)
NAN_BOXED(9216208333272537297,64,FLEN)
NAN_BOXED(13813865221176337559,64,FLEN)
NAN_BOXED(9200061539143731311,64,FLEN)
NAN_BOXED(9216208333272537297,64,FLEN)
NAN_BOXED(13813865221176337559,64,FLEN)
NAN_BOXED(9200061539143731311,64,FLEN)
NAN_BOXED(9216239967302329712,64,FLEN)
NAN_BOXED(13829588517022854072,64,FLEN)
NAN_BOXED(9215555907706449898,64,FLEN)
NAN_BOXED(9216239967302329712,64,FLEN)
NAN_BOXED(13829588517022854072,64,FLEN)
NAN_BOXED(9215555907706449898,64,FLEN)
NAN_BOXED(9216239967302329712,64,FLEN)
NAN_BOXED(13829588517022854072,64,FLEN)
NAN_BOXED(9215555907706449898,64,FLEN)
NAN_BOXED(9216239967302329712,64,FLEN)
NAN_BOXED(13829588517022854072,64,FLEN)
NAN_BOXED(9215555907706449898,64,FLEN)
NAN_BOXED(9216239967302329712,64,FLEN)
NAN_BOXED(13829588517022854072,64,FLEN)
NAN_BOXED(9215555907706449898,64,FLEN)
NAN_BOXED(9216278357326713508,64,FLEN)
NAN_BOXED(13819348189653931939,64,FLEN)
NAN_BOXED(9205704447557608499,64,FLEN)
NAN_BOXED(9216278357326713508,64,FLEN)
NAN_BOXED(13819348189653931939,64,FLEN)
NAN_BOXED(9205704447557608499,64,FLEN)
NAN_BOXED(9216278357326713508,64,FLEN)
NAN_BOXED(13819348189653931939,64,FLEN)
NAN_BOXED(9205704447557608499,64,FLEN)
NAN_BOXED(9216278357326713508,64,FLEN)
NAN_BOXED(13819348189653931939,64,FLEN)
NAN_BOXED(9205704447557608499,64,FLEN)
NAN_BOXED(9216278357326713508,64,FLEN)
NAN_BOXED(13819348189653931939,64,FLEN)
NAN_BOXED(9205704447557608499,64,FLEN)
NAN_BOXED(9216286039957775309,64,FLEN)
NAN_BOXED(13829818488450086557,64,FLEN)
NAN_BOXED(9215761077266926976,64,FLEN)
NAN_BOXED(9216286039957775309,64,FLEN)
NAN_BOXED(13829818488450086557,64,FLEN)
NAN_BOXED(9215761077266926976,64,FLEN)
NAN_BOXED(9216286039957775309,64,FLEN)
NAN_BOXED(13829818488450086557,64,FLEN)
NAN_BOXED(9215761077266926976,64,FLEN)
NAN_BOXED(9216286039957775309,64,FLEN)
NAN_BOXED(13829818488450086557,64,FLEN)
NAN_BOXED(9215761077266926976,64,FLEN)
NAN_BOXED(9216286039957775309,64,FLEN)
NAN_BOXED(13829818488450086557,64,FLEN)
NAN_BOXED(9215761077266926976,64,FLEN)
NAN_BOXED(9216439676803129839,64,FLEN)
NAN_BOXED(13821016379770046219,64,FLEN)
NAN_BOXED(9207044749983110443,64,FLEN)
NAN_BOXED(9216439676803129839,64,FLEN)
NAN_BOXED(13821016379770046219,64,FLEN)
NAN_BOXED(9207044749983110443,64,FLEN)
NAN_BOXED(9216439676803129839,64,FLEN)
NAN_BOXED(13821016379770046219,64,FLEN)
NAN_BOXED(9207044749983110443,64,FLEN)
NAN_BOXED(9216439676803129839,64,FLEN)
NAN_BOXED(13821016379770046219,64,FLEN)
NAN_BOXED(9207044749983110443,64,FLEN)
NAN_BOXED(9216439676803129839,64,FLEN)
NAN_BOXED(13821016379770046219,64,FLEN)
NAN_BOXED(9207044749983110443,64,FLEN)
NAN_BOXED(9216451485221623217,64,FLEN)
NAN_BOXED(13831897132429601785,64,FLEN)
NAN_BOXED(9218416262878066351,64,FLEN)
NAN_BOXED(9216451485221623217,64,FLEN)
NAN_BOXED(13831897132429601785,64,FLEN)
NAN_BOXED(9218416262878066351,64,FLEN)
NAN_BOXED(9216451485221623217,64,FLEN)
NAN_BOXED(13831897132429601785,64,FLEN)
NAN_BOXED(9218416262878066351,64,FLEN)
NAN_BOXED(9216451485221623217,64,FLEN)
NAN_BOXED(13831897132429601785,64,FLEN)
NAN_BOXED(9218416262878066351,64,FLEN)
NAN_BOXED(9216451485221623217,64,FLEN)
NAN_BOXED(13831897132429601785,64,FLEN)
NAN_BOXED(9218416262878066351,64,FLEN)
NAN_BOXED(9216497318080953535,64,FLEN)
NAN_BOXED(13821309208839422033,64,FLEN)
NAN_BOXED(9207314736597259043,64,FLEN)
NAN_BOXED(9216497318080953535,64,FLEN)
NAN_BOXED(13821309208839422033,64,FLEN)
NAN_BOXED(9207314736597259043,64,FLEN)
NAN_BOXED(9216497318080953535,64,FLEN)
NAN_BOXED(13821309208839422033,64,FLEN)
NAN_BOXED(9207314736597259043,64,FLEN)
NAN_BOXED(9216497318080953535,64,FLEN)
NAN_BOXED(13821309208839422033,64,FLEN)
NAN_BOXED(9207314736597259043,64,FLEN)
NAN_BOXED(9216497318080953535,64,FLEN)
NAN_BOXED(13821309208839422033,64,FLEN)
NAN_BOXED(9207314736597259043,64,FLEN)
NAN_BOXED(9216506995954156537,64,FLEN)
NAN_BOXED(13831106009057497256,64,FLEN)
NAN_BOXED(9217320898328151475,64,FLEN)
NAN_BOXED(9216506995954156537,64,FLEN)
NAN_BOXED(13831106009057497256,64,FLEN)
NAN_BOXED(9217320898328151475,64,FLEN)
NAN_BOXED(9216506995954156537,64,FLEN)
NAN_BOXED(13831106009057497256,64,FLEN)
NAN_BOXED(9217320898328151475,64,FLEN)
NAN_BOXED(9216506995954156537,64,FLEN)
NAN_BOXED(13831106009057497256,64,FLEN)
NAN_BOXED(9217320898328151475,64,FLEN)
NAN_BOXED(9216506995954156537,64,FLEN)
NAN_BOXED(13831106009057497256,64,FLEN)
NAN_BOXED(9217320898328151475,64,FLEN)
NAN_BOXED(9216525651863645745,64,FLEN)
NAN_BOXED(13831664845097150138,64,FLEN)
NAN_BOXED(9218168802995258051,64,FLEN)
NAN_BOXED(9216525651863645745,64,FLEN)
NAN_BOXED(13831664845097150138,64,FLEN)
NAN_BOXED(9218168802995258051,64,FLEN)
NAN_BOXED(9216525651863645745,64,FLEN)
NAN_BOXED(13831664845097150138,64,FLEN)
NAN_BOXED(9218168802995258051,64,FLEN)
NAN_BOXED(9216525651863645745,64,FLEN)
NAN_BOXED(13831664845097150138,64,FLEN)
NAN_BOXED(9218168802995258051,64,FLEN)
NAN_BOXED(9216525651863645745,64,FLEN)
NAN_BOXED(13831664845097150138,64,FLEN)
NAN_BOXED(9218168802995258051,64,FLEN)
NAN_BOXED(9216528006816259676,64,FLEN)
NAN_BOXED(13826360318898382136,64,FLEN)
NAN_BOXED(9212482511282739635,64,FLEN)
NAN_BOXED(9216528006816259676,64,FLEN)
NAN_BOXED(13826360318898382136,64,FLEN)
NAN_BOXED(9212482511282739635,64,FLEN)
NAN_BOXED(9216528006816259676,64,FLEN)
NAN_BOXED(13826360318898382136,64,FLEN)
NAN_BOXED(9212482511282739635,64,FLEN)
NAN_BOXED(9216528006816259676,64,FLEN)
NAN_BOXED(13826360318898382136,64,FLEN)
NAN_BOXED(9212482511282739635,64,FLEN)
NAN_BOXED(9216528006816259676,64,FLEN)
NAN_BOXED(13826360318898382136,64,FLEN)
NAN_BOXED(9212482511282739635,64,FLEN)
NAN_BOXED(9216557849572047770,64,FLEN)
NAN_BOXED(13818267024508062750,64,FLEN)
NAN_BOXED(9204866133034040503,64,FLEN)
NAN_BOXED(9216557849572047770,64,FLEN)
NAN_BOXED(13818267024508062750,64,FLEN)
NAN_BOXED(9204866133034040503,64,FLEN)
NAN_BOXED(9216557849572047770,64,FLEN)
NAN_BOXED(13818267024508062750,64,FLEN)
NAN_BOXED(9204866133034040503,64,FLEN)
NAN_BOXED(9216557849572047770,64,FLEN)
NAN_BOXED(13818267024508062750,64,FLEN)
NAN_BOXED(9204866133034040503,64,FLEN)
NAN_BOXED(9216557849572047770,64,FLEN)
NAN_BOXED(13818267024508062750,64,FLEN)
NAN_BOXED(9204866133034040503,64,FLEN)
NAN_BOXED(9216571756200862761,64,FLEN)
NAN_BOXED(13828690038792853817,64,FLEN)
NAN_BOXED(9215182733599811771,64,FLEN)
NAN_BOXED(9216571756200862761,64,FLEN)
NAN_BOXED(13828690038792853817,64,FLEN)
NAN_BOXED(9215182733599811771,64,FLEN)
NAN_BOXED(9216571756200862761,64,FLEN)
NAN_BOXED(13828690038792853817,64,FLEN)
NAN_BOXED(9215182733599811771,64,FLEN)
NAN_BOXED(9216571756200862761,64,FLEN)
NAN_BOXED(13828690038792853817,64,FLEN)
NAN_BOXED(9215182733599811771,64,FLEN)
NAN_BOXED(9216571756200862761,64,FLEN)
NAN_BOXED(13828690038792853817,64,FLEN)
NAN_BOXED(9215182733599811771,64,FLEN)
NAN_BOXED(9216614791138654781,64,FLEN)
NAN_BOXED(13831125583313545862,64,FLEN)
NAN_BOXED(9217471248489905987,64,FLEN)
NAN_BOXED(9216614791138654781,64,FLEN)
NAN_BOXED(13831125583313545862,64,FLEN)
NAN_BOXED(9217471248489905987,64,FLEN)
NAN_BOXED(9216614791138654781,64,FLEN)
NAN_BOXED(13831125583313545862,64,FLEN)
NAN_BOXED(9217471248489905987,64,FLEN)
NAN_BOXED(9216614791138654781,64,FLEN)
NAN_BOXED(13831125583313545862,64,FLEN)
NAN_BOXED(9217471248489905987,64,FLEN)
NAN_BOXED(9216614791138654781,64,FLEN)
NAN_BOXED(13831125583313545862,64,FLEN)
NAN_BOXED(9217471248489905987,64,FLEN)
NAN_BOXED(9216709838227431883,64,FLEN)
NAN_BOXED(13781844205241107428,64,FLEN)
NAN_BOXED(9168431423644897279,64,FLEN)
NAN_BOXED(9216709838227431883,64,FLEN)
NAN_BOXED(13781844205241107428,64,FLEN)
NAN_BOXED(9168431423644897279,64,FLEN)
NAN_BOXED(9216709838227431883,64,FLEN)
NAN_BOXED(13781844205241107428,64,FLEN)
NAN_BOXED(9168431423644897279,64,FLEN)
NAN_BOXED(9216709838227431883,64,FLEN)
NAN_BOXED(13781844205241107428,64,FLEN)
NAN_BOXED(9168431423644897279,64,FLEN)
NAN_BOXED(9216709838227431883,64,FLEN)
NAN_BOXED(13781844205241107428,64,FLEN)
NAN_BOXED(9168431423644897279,64,FLEN)
NAN_BOXED(9216710300391247518,64,FLEN)
NAN_BOXED(13824167216153405220,64,FLEN)
NAN_BOXED(9210774383491170143,64,FLEN)
NAN_BOXED(9216710300391247518,64,FLEN)
NAN_BOXED(13824167216153405220,64,FLEN)
NAN_BOXED(9210774383491170143,64,FLEN)
NAN_BOXED(9216710300391247518,64,FLEN)
NAN_BOXED(13824167216153405220,64,FLEN)
NAN_BOXED(9210774383491170143,64,FLEN)
NAN_BOXED(9216710300391247518,64,FLEN)
NAN_BOXED(13824167216153405220,64,FLEN)
NAN_BOXED(9210774383491170143,64,FLEN)
NAN_BOXED(9216710300391247518,64,FLEN)
NAN_BOXED(13824167216153405220,64,FLEN)
NAN_BOXED(9210774383491170143,64,FLEN)
NAN_BOXED(9216758279689914534,64,FLEN)
NAN_BOXED(13820049730172615024,64,FLEN)
NAN_BOXED(9206604386488342707,64,FLEN)
NAN_BOXED(9216758279689914534,64,FLEN)
NAN_BOXED(13820049730172615024,64,FLEN)
NAN_BOXED(9206604386488342707,64,FLEN)
NAN_BOXED(9216758279689914534,64,FLEN)
NAN_BOXED(13820049730172615024,64,FLEN)
NAN_BOXED(9206604386488342707,64,FLEN)
NAN_BOXED(9216758279689914534,64,FLEN)
NAN_BOXED(13820049730172615024,64,FLEN)
NAN_BOXED(9206604386488342707,64,FLEN)
NAN_BOXED(9216758279689914534,64,FLEN)
NAN_BOXED(13820049730172615024,64,FLEN)
NAN_BOXED(9206604386488342707,64,FLEN)
NAN_BOXED(9216794506839228387,64,FLEN)
NAN_BOXED(13829631622593646820,64,FLEN)
NAN_BOXED(9216084158422264638,64,FLEN)
NAN_BOXED(9216794506839228387,64,FLEN)
NAN_BOXED(13829631622593646820,64,FLEN)
NAN_BOXED(9216084158422264638,64,FLEN)
NAN_BOXED(9216794506839228387,64,FLEN)
NAN_BOXED(13829631622593646820,64,FLEN)
NAN_BOXED(9216084158422264638,64,FLEN)
NAN_BOXED(9216794506839228387,64,FLEN)
NAN_BOXED(13829631622593646820,64,FLEN)
NAN_BOXED(9216084158422264638,64,FLEN)
NAN_BOXED(9216794506839228387,64,FLEN)
NAN_BOXED(13829631622593646820,64,FLEN)
NAN_BOXED(9216084158422264638,64,FLEN)
NAN_BOXED(9216840899490495565,64,FLEN)
NAN_BOXED(13829621055248742282,64,FLEN)
NAN_BOXED(9216117609296663931,64,FLEN)
NAN_BOXED(9216840899490495565,64,FLEN)
NAN_BOXED(13829621055248742282,64,FLEN)
NAN_BOXED(9216117609296663931,64,FLEN)
NAN_BOXED(9216840899490495565,64,FLEN)
NAN_BOXED(13829621055248742282,64,FLEN)
NAN_BOXED(9216117609296663931,64,FLEN)
NAN_BOXED(9216840899490495565,64,FLEN)
NAN_BOXED(13829621055248742282,64,FLEN)
NAN_BOXED(9216117609296663931,64,FLEN)
NAN_BOXED(9216840899490495565,64,FLEN)
NAN_BOXED(13829621055248742282,64,FLEN)
NAN_BOXED(9216117609296663931,64,FLEN)
NAN_BOXED(9216890200720847286,64,FLEN)
NAN_BOXED(13828251484444898507,64,FLEN)
NAN_BOXED(9215093027328022943,64,FLEN)
NAN_BOXED(9216890200720847286,64,FLEN)
NAN_BOXED(13828251484444898507,64,FLEN)
NAN_BOXED(9215093027328022943,64,FLEN)
NAN_BOXED(9216890200720847286,64,FLEN)
NAN_BOXED(13828251484444898507,64,FLEN)
NAN_BOXED(9215093027328022943,64,FLEN)
NAN_BOXED(9216890200720847286,64,FLEN)
NAN_BOXED(13828251484444898507,64,FLEN)
NAN_BOXED(9215093027328022943,64,FLEN)
NAN_BOXED(9216890200720847286,64,FLEN)
NAN_BOXED(13828251484444898507,64,FLEN)
NAN_BOXED(9215093027328022943,64,FLEN)
NAN_BOXED(9216902222347745019,64,FLEN)
NAN_BOXED(13830814281975707572,64,FLEN)
NAN_BOXED(9217308438090075745,64,FLEN)
NAN_BOXED(9216902222347745019,64,FLEN)
NAN_BOXED(13830814281975707572,64,FLEN)
NAN_BOXED(9217308438090075745,64,FLEN)
NAN_BOXED(9216902222347745019,64,FLEN)
NAN_BOXED(13830814281975707572,64,FLEN)
NAN_BOXED(9217308438090075745,64,FLEN)
NAN_BOXED(9216902222347745019,64,FLEN)
NAN_BOXED(13830814281975707572,64,FLEN)
NAN_BOXED(9217308438090075745,64,FLEN)
NAN_BOXED(9216902222347745019,64,FLEN)
NAN_BOXED(13830814281975707572,64,FLEN)
NAN_BOXED(9217308438090075745,64,FLEN)
NAN_BOXED(9216904032267117870,64,FLEN)
NAN_BOXED(13822703433533572974,64,FLEN)
NAN_BOXED(9209704879551383247,64,FLEN)
NAN_BOXED(9216904032267117870,64,FLEN)
NAN_BOXED(13822703433533572974,64,FLEN)
NAN_BOXED(9209704879551383247,64,FLEN)
NAN_BOXED(9216904032267117870,64,FLEN)
NAN_BOXED(13822703433533572974,64,FLEN)
NAN_BOXED(9209704879551383247,64,FLEN)
NAN_BOXED(9216904032267117870,64,FLEN)
NAN_BOXED(13822703433533572974,64,FLEN)
NAN_BOXED(9209704879551383247,64,FLEN)
NAN_BOXED(9216904032267117870,64,FLEN)
NAN_BOXED(13822703433533572974,64,FLEN)
NAN_BOXED(9209704879551383247,64,FLEN)
NAN_BOXED(9216905038665957698,64,FLEN)
NAN_BOXED(13831046083821591075,64,FLEN)
NAN_BOXED(9217673963772241003,64,FLEN)
NAN_BOXED(9216905038665957698,64,FLEN)
NAN_BOXED(13831046083821591075,64,FLEN)
NAN_BOXED(9217673963772241003,64,FLEN)
NAN_BOXED(9216905038665957698,64,FLEN)
NAN_BOXED(13831046083821591075,64,FLEN)
NAN_BOXED(9217673963772241003,64,FLEN)
NAN_BOXED(9216905038665957698,64,FLEN)
NAN_BOXED(13831046083821591075,64,FLEN)
NAN_BOXED(9217673963772241003,64,FLEN)
NAN_BOXED(9216905038665957698,64,FLEN)
NAN_BOXED(13831046083821591075,64,FLEN)
NAN_BOXED(9217673963772241003,64,FLEN)
NAN_BOXED(9216992692540566902,64,FLEN)
NAN_BOXED(13829096591751770827,64,FLEN)
NAN_BOXED(9215838428057618227,64,FLEN)
NAN_BOXED(9216992692540566902,64,FLEN)
NAN_BOXED(13829096591751770827,64,FLEN)
NAN_BOXED(9215838428057618227,64,FLEN)
NAN_BOXED(9216992692540566902,64,FLEN)
NAN_BOXED(13829096591751770827,64,FLEN)
NAN_BOXED(9215838428057618227,64,FLEN)
NAN_BOXED(9216992692540566902,64,FLEN)
NAN_BOXED(13829096591751770827,64,FLEN)
NAN_BOXED(9215838428057618227,64,FLEN)
NAN_BOXED(9216992692540566902,64,FLEN)
NAN_BOXED(13829096591751770827,64,FLEN)
NAN_BOXED(9215838428057618227,64,FLEN)
NAN_BOXED(9217023704863802494,64,FLEN)
NAN_BOXED(13831388447942938390,64,FLEN)
NAN_BOXED(9218350075466331403,64,FLEN)
NAN_BOXED(9217023704863802494,64,FLEN)
NAN_BOXED(13831388447942938390,64,FLEN)
NAN_BOXED(9218350075466331403,64,FLEN)
NAN_BOXED(9217023704863802494,64,FLEN)
NAN_BOXED(13831388447942938390,64,FLEN)
NAN_BOXED(9218350075466331403,64,FLEN)
NAN_BOXED(9217023704863802494,64,FLEN)
NAN_BOXED(13831388447942938390,64,FLEN)
NAN_BOXED(9218350075466331403,64,FLEN)
NAN_BOXED(9217023704863802494,64,FLEN)
NAN_BOXED(13831388447942938390,64,FLEN)
NAN_BOXED(9218350075466331403,64,FLEN)
NAN_BOXED(9217041299759802488,64,FLEN)
NAN_BOXED(13818811953300076066,64,FLEN)
NAN_BOXED(9205853661868263055,64,FLEN)
NAN_BOXED(9217041299759802488,64,FLEN)
NAN_BOXED(13818811953300076066,64,FLEN)
NAN_BOXED(9205853661868263055,64,FLEN)
NAN_BOXED(9217041299759802488,64,FLEN)
NAN_BOXED(13818811953300076066,64,FLEN)
NAN_BOXED(9205853661868263055,64,FLEN)
NAN_BOXED(9217041299759802488,64,FLEN)
NAN_BOXED(13818811953300076066,64,FLEN)
NAN_BOXED(9205853661868263055,64,FLEN)
NAN_BOXED(9217041299759802488,64,FLEN)
NAN_BOXED(13818811953300076066,64,FLEN)
NAN_BOXED(9205853661868263055,64,FLEN)
NAN_BOXED(9217042017508924609,64,FLEN)
NAN_BOXED(13830907340543524681,64,FLEN)
NAN_BOXED(9217604676003755755,64,FLEN)
NAN_BOXED(9217042017508924609,64,FLEN)
NAN_BOXED(13830907340543524681,64,FLEN)
NAN_BOXED(9217604676003755755,64,FLEN)
NAN_BOXED(9217042017508924609,64,FLEN)
NAN_BOXED(13830907340543524681,64,FLEN)
NAN_BOXED(9217604676003755755,64,FLEN)
NAN_BOXED(9217042017508924609,64,FLEN)
NAN_BOXED(13830907340543524681,64,FLEN)
NAN_BOXED(9217604676003755755,64,FLEN)
NAN_BOXED(9217042017508924609,64,FLEN)
NAN_BOXED(13830907340543524681,64,FLEN)
NAN_BOXED(9217604676003755755,64,FLEN)
NAN_BOXED(9217107558459145778,64,FLEN)
NAN_BOXED(13826399531295553674,64,FLEN)
NAN_BOXED(9213164979559113327,64,FLEN)
NAN_BOXED(9217107558459145778,64,FLEN)
NAN_BOXED(13826399531295553674,64,FLEN)
NAN_BOXED(9213164979559113327,64,FLEN)
NAN_BOXED(9217107558459145778,64,FLEN)
NAN_BOXED(13826399531295553674,64,FLEN)
NAN_BOXED(9213164979559113327,64,FLEN)
NAN_BOXED(9217107558459145778,64,FLEN)
NAN_BOXED(13826399531295553674,64,FLEN)
NAN_BOXED(9213164979559113327,64,FLEN)
NAN_BOXED(9217107558459145778,64,FLEN)
NAN_BOXED(13826399531295553674,64,FLEN)
NAN_BOXED(9213164979559113327,64,FLEN)
NAN_BOXED(9217173489859016744,64,FLEN)
NAN_BOXED(13814109370984015720,64,FLEN)
NAN_BOXED(9201280570165935463,64,FLEN)
NAN_BOXED(9217173489859016744,64,FLEN)
NAN_BOXED(13814109370984015720,64,FLEN)
NAN_BOXED(9201280570165935463,64,FLEN)
NAN_BOXED(9217173489859016744,64,FLEN)
NAN_BOXED(13814109370984015720,64,FLEN)
NAN_BOXED(9201280570165935463,64,FLEN)
NAN_BOXED(9217173489859016744,64,FLEN)
NAN_BOXED(13814109370984015720,64,FLEN)
NAN_BOXED(9201280570165935463,64,FLEN)
NAN_BOXED(9217173489859016744,64,FLEN)
NAN_BOXED(13814109370984015720,64,FLEN)
NAN_BOXED(9201280570165935463,64,FLEN)
NAN_BOXED(9217183999544357958,64,FLEN)
NAN_BOXED(13828663326707466969,64,FLEN)
NAN_BOXED(9215646530905001617,64,FLEN)
NAN_BOXED(9217183999544357958,64,FLEN)
NAN_BOXED(13828663326707466969,64,FLEN)
NAN_BOXED(9215646530905001617,64,FLEN)
NAN_BOXED(9217183999544357958,64,FLEN)
NAN_BOXED(13828663326707466969,64,FLEN)
NAN_BOXED(9215646530905001617,64,FLEN)
NAN_BOXED(9217183999544357958,64,FLEN)
NAN_BOXED(13828663326707466969,64,FLEN)
NAN_BOXED(9215646530905001617,64,FLEN)
NAN_BOXED(9217183999544357958,64,FLEN)
NAN_BOXED(13828663326707466969,64,FLEN)
NAN_BOXED(9215646530905001617,64,FLEN)
NAN_BOXED(9217233793364617447,64,FLEN)
NAN_BOXED(13826837509383899271,64,FLEN)
NAN_BOXED(9214017973718762635,64,FLEN)
NAN_BOXED(9217233793364617447,64,FLEN)
NAN_BOXED(13826837509383899271,64,FLEN)
NAN_BOXED(9214017973718762635,64,FLEN)
NAN_BOXED(9217233793364617447,64,FLEN)
NAN_BOXED(13826837509383899271,64,FLEN)
NAN_BOXED(9214017973718762635,64,FLEN)
NAN_BOXED(9217233793364617447,64,FLEN)
NAN_BOXED(13826837509383899271,64,FLEN)
NAN_BOXED(9214017973718762635,64,FLEN)
NAN_BOXED(9217233793364617447,64,FLEN)
NAN_BOXED(13826837509383899271,64,FLEN)
NAN_BOXED(9214017973718762635,64,FLEN)
NAN_BOXED(9217233828719116915,64,FLEN)
NAN_BOXED(13826159147788803983,64,FLEN)
NAN_BOXED(9212907507469918483,64,FLEN)
NAN_BOXED(9217233828719116915,64,FLEN)
NAN_BOXED(13826159147788803983,64,FLEN)
NAN_BOXED(9212907507469918483,64,FLEN)
NAN_BOXED(9217233828719116915,64,FLEN)
NAN_BOXED(13826159147788803983,64,FLEN)
NAN_BOXED(9212907507469918483,64,FLEN)
NAN_BOXED(9217233828719116915,64,FLEN)
NAN_BOXED(13826159147788803983,64,FLEN)
NAN_BOXED(9212907507469918483,64,FLEN)
NAN_BOXED(9217233828719116915,64,FLEN)
NAN_BOXED(13826159147788803983,64,FLEN)
NAN_BOXED(9212907507469918483,64,FLEN)
NAN_BOXED(9217252511295509423,64,FLEN)
NAN_BOXED(13818676538111406965,64,FLEN)
NAN_BOXED(9205889611572268315,64,FLEN)
NAN_BOXED(9217252511295509423,64,FLEN)
NAN_BOXED(13818676538111406965,64,FLEN)
NAN_BOXED(9205889611572268315,64,FLEN)
NAN_BOXED(9217252511295509423,64,FLEN)
NAN_BOXED(13818676538111406965,64,FLEN)
NAN_BOXED(9205889611572268315,64,FLEN)
NAN_BOXED(9217252511295509423,64,FLEN)
NAN_BOXED(13818676538111406965,64,FLEN)
NAN_BOXED(9205889611572268315,64,FLEN)
NAN_BOXED(9217252511295509423,64,FLEN)
NAN_BOXED(13818676538111406965,64,FLEN)
NAN_BOXED(9205889611572268315,64,FLEN)
NAN_BOXED(9217347125945231724,64,FLEN)
NAN_BOXED(13828568875898703202,64,FLEN)
NAN_BOXED(9215696909580043190,64,FLEN)
NAN_BOXED(9217347125945231724,64,FLEN)
NAN_BOXED(13828568875898703202,64,FLEN)
NAN_BOXED(9215696909580043190,64,FLEN)
NAN_BOXED(9217347125945231724,64,FLEN)
NAN_BOXED(13828568875898703202,64,FLEN)
NAN_BOXED(9215696909580043190,64,FLEN)
NAN_BOXED(9217347125945231724,64,FLEN)
NAN_BOXED(13828568875898703202,64,FLEN)
NAN_BOXED(9215696909580043190,64,FLEN)
NAN_BOXED(9217347125945231724,64,FLEN)
NAN_BOXED(13828568875898703202,64,FLEN)
NAN_BOXED(9215696909580043190,64,FLEN)
NAN_BOXED(9217413137569154945,64,FLEN)
NAN_BOXED(13818150960727233765,64,FLEN)
NAN_BOXED(9205558384574818335,64,FLEN)
NAN_BOXED(9217413137569154945,64,FLEN)
NAN_BOXED(13818150960727233765,64,FLEN)
NAN_BOXED(9205558384574818335,64,FLEN)
NAN_BOXED(9217413137569154945,64,FLEN)
NAN_BOXED(13818150960727233765,64,FLEN)
NAN_BOXED(9205558384574818335,64,FLEN)
NAN_BOXED(9217413137569154945,64,FLEN)
NAN_BOXED(13818150960727233765,64,FLEN)
NAN_BOXED(9205558384574818335,64,FLEN)
NAN_BOXED(9217413137569154945,64,FLEN)
NAN_BOXED(13818150960727233765,64,FLEN)
NAN_BOXED(9205558384574818335,64,FLEN)
NAN_BOXED(9217445863939197700,64,FLEN)
NAN_BOXED(13821733728988413010,64,FLEN)
NAN_BOXED(9208752707883841571,64,FLEN)
NAN_BOXED(9217445863939197700,64,FLEN)
NAN_BOXED(13821733728988413010,64,FLEN)
NAN_BOXED(9208752707883841571,64,FLEN)
NAN_BOXED(9217445863939197700,64,FLEN)
NAN_BOXED(13821733728988413010,64,FLEN)
NAN_BOXED(9208752707883841571,64,FLEN)
NAN_BOXED(9217445863939197700,64,FLEN)
NAN_BOXED(13821733728988413010,64,FLEN)
NAN_BOXED(9208752707883841571,64,FLEN)
NAN_BOXED(9217445863939197700,64,FLEN)
NAN_BOXED(13821733728988413010,64,FLEN)
NAN_BOXED(9208752707883841571,64,FLEN)
NAN_BOXED(9217531553921558883,64,FLEN)
NAN_BOXED(13827020808646715600,64,FLEN)
NAN_BOXED(9214522384451975445,64,FLEN)
NAN_BOXED(9217531553921558883,64,FLEN)
NAN_BOXED(13827020808646715600,64,FLEN)
NAN_BOXED(9214522384451975445,64,FLEN)
NAN_BOXED(9217531553921558883,64,FLEN)
NAN_BOXED(13827020808646715600,64,FLEN)
NAN_BOXED(9214522384451975445,64,FLEN)
NAN_BOXED(9217531553921558883,64,FLEN)
NAN_BOXED(13827020808646715600,64,FLEN)
NAN_BOXED(9214522384451975445,64,FLEN)
NAN_BOXED(9217531553921558883,64,FLEN)
NAN_BOXED(13827020808646715600,64,FLEN)
NAN_BOXED(9214522384451975445,64,FLEN)
NAN_BOXED(9217534483515892043,64,FLEN)
NAN_BOXED(13820849130845030384,64,FLEN)
NAN_BOXED(9207932550132130303,64,FLEN)
NAN_BOXED(9217534483515892043,64,FLEN)
NAN_BOXED(13820849130845030384,64,FLEN)
NAN_BOXED(9207932550132130303,64,FLEN)
NAN_BOXED(9217534483515892043,64,FLEN)
NAN_BOXED(13820849130845030384,64,FLEN)
NAN_BOXED(9207932550132130303,64,FLEN)
NAN_BOXED(9217534483515892043,64,FLEN)
NAN_BOXED(13820849130845030384,64,FLEN)
NAN_BOXED(9207932550132130303,64,FLEN)
NAN_BOXED(9217534483515892043,64,FLEN)
NAN_BOXED(13820849130845030384,64,FLEN)
NAN_BOXED(9207932550132130303,64,FLEN)
NAN_BOXED(9217696701957523293,64,FLEN)
NAN_BOXED(13828674406563251561,64,FLEN)
NAN_BOXED(9216061226097611824,64,FLEN)
NAN_BOXED(9217696701957523293,64,FLEN)
NAN_BOXED(13828674406563251561,64,FLEN)
NAN_BOXED(9216061226097611824,64,FLEN)
NAN_BOXED(9217696701957523293,64,FLEN)
NAN_BOXED(13828674406563251561,64,FLEN)
NAN_BOXED(9216061226097611824,64,FLEN)
NAN_BOXED(9217696701957523293,64,FLEN)
NAN_BOXED(13828674406563251561,64,FLEN)
NAN_BOXED(9216061226097611824,64,FLEN)
NAN_BOXED(9217696701957523293,64,FLEN)
NAN_BOXED(13828674406563251561,64,FLEN)
NAN_BOXED(9216061226097611824,64,FLEN)
NAN_BOXED(9217759891032751392,64,FLEN)
NAN_BOXED(13826482299013948827,64,FLEN)
NAN_BOXED(9214012979110270697,64,FLEN)
NAN_BOXED(9217759891032751392,64,FLEN)
NAN_BOXED(13826482299013948827,64,FLEN)
NAN_BOXED(9214012979110270697,64,FLEN)
NAN_BOXED(9217759891032751392,64,FLEN)
NAN_BOXED(13826482299013948827,64,FLEN)
NAN_BOXED(9214012979110270697,64,FLEN)
NAN_BOXED(9217759891032751392,64,FLEN)
NAN_BOXED(13826482299013948827,64,FLEN)
NAN_BOXED(9214012979110270697,64,FLEN)
NAN_BOXED(9217759891032751392,64,FLEN)
NAN_BOXED(13826482299013948827,64,FLEN)
NAN_BOXED(9214012979110270697,64,FLEN)
NAN_BOXED(9217773676277968997,64,FLEN)
NAN_BOXED(13818049548401121692,64,FLEN)
NAN_BOXED(9205693890532267299,64,FLEN)
NAN_BOXED(9217773676277968997,64,FLEN)
NAN_BOXED(13818049548401121692,64,FLEN)
NAN_BOXED(9205693890532267299,64,FLEN)
NAN_BOXED(9217773676277968997,64,FLEN)
NAN_BOXED(13818049548401121692,64,FLEN)
NAN_BOXED(9205693890532267299,64,FLEN)
NAN_BOXED(9217773676277968997,64,FLEN)
NAN_BOXED(13818049548401121692,64,FLEN)
NAN_BOXED(9205693890532267299,64,FLEN)
NAN_BOXED(9217773676277968997,64,FLEN)
NAN_BOXED(13818049548401121692,64,FLEN)
NAN_BOXED(9205693890532267299,64,FLEN)
NAN_BOXED(9217859095665568561,64,FLEN)
NAN_BOXED(13827081701582151269,64,FLEN)
NAN_BOXED(9214775496414577793,64,FLEN)
NAN_BOXED(9217859095665568561,64,FLEN)
NAN_BOXED(13827081701582151269,64,FLEN)
NAN_BOXED(9214775496414577793,64,FLEN)
NAN_BOXED(9217859095665568561,64,FLEN)
NAN_BOXED(13827081701582151269,64,FLEN)
NAN_BOXED(9214775496414577793,64,FLEN)
NAN_BOXED(9217859095665568561,64,FLEN)
NAN_BOXED(13827081701582151269,64,FLEN)
NAN_BOXED(9214775496414577793,64,FLEN)
NAN_BOXED(9217859095665568561,64,FLEN)
NAN_BOXED(13827081701582151269,64,FLEN)
NAN_BOXED(9214775496414577793,64,FLEN)
NAN_BOXED(9217870957039819721,64,FLEN)
NAN_BOXED(13826419176662848065,64,FLEN)
NAN_BOXED(9214022421152676877,64,FLEN)
NAN_BOXED(9217870957039819721,64,FLEN)
NAN_BOXED(13826419176662848065,64,FLEN)
NAN_BOXED(9214022421152676877,64,FLEN)
NAN_BOXED(9217870957039819721,64,FLEN)
NAN_BOXED(13826419176662848065,64,FLEN)
NAN_BOXED(9214022421152676877,64,FLEN)
NAN_BOXED(9217870957039819721,64,FLEN)
NAN_BOXED(13826419176662848065,64,FLEN)
NAN_BOXED(9214022421152676877,64,FLEN)
NAN_BOXED(9217870957039819721,64,FLEN)
NAN_BOXED(13826419176662848065,64,FLEN)
NAN_BOXED(9214022421152676877,64,FLEN)
NAN_BOXED(9217908873261058511,64,FLEN)
NAN_BOXED(13785905328381657640,64,FLEN)
NAN_BOXED(9173564186357317631,64,FLEN)
NAN_BOXED(9217908873261058511,64,FLEN)
NAN_BOXED(13785905328381657640,64,FLEN)
NAN_BOXED(9173564186357317631,64,FLEN)
NAN_BOXED(9217908873261058511,64,FLEN)
NAN_BOXED(13785905328381657640,64,FLEN)
NAN_BOXED(9173564186357317631,64,FLEN)
NAN_BOXED(9217908873261058511,64,FLEN)
NAN_BOXED(13785905328381657640,64,FLEN)
NAN_BOXED(9173564186357317631,64,FLEN)
NAN_BOXED(9217908873261058511,64,FLEN)
NAN_BOXED(13785905328381657640,64,FLEN)
NAN_BOXED(9173564186357317631,64,FLEN)
NAN_BOXED(9217911347344862140,64,FLEN)
NAN_BOXED(13823066093021536076,64,FLEN)
NAN_BOXED(9210740140621442303,64,FLEN)
NAN_BOXED(9217911347344862140,64,FLEN)
NAN_BOXED(13823066093021536076,64,FLEN)
NAN_BOXED(9210740140621442303,64,FLEN)
NAN_BOXED(9217911347344862140,64,FLEN)
NAN_BOXED(13823066093021536076,64,FLEN)
NAN_BOXED(9210740140621442303,64,FLEN)
NAN_BOXED(9217911347344862140,64,FLEN)
NAN_BOXED(13823066093021536076,64,FLEN)
NAN_BOXED(9210740140621442303,64,FLEN)
NAN_BOXED(9217911347344862140,64,FLEN)
NAN_BOXED(13823066093021536076,64,FLEN)
NAN_BOXED(9210740140621442303,64,FLEN)
NAN_BOXED(9217975828210556321,64,FLEN)
NAN_BOXED(13817067388142654234,64,FLEN)
NAN_BOXED(9204507788534201127,64,FLEN)
NAN_BOXED(9217975828210556321,64,FLEN)
NAN_BOXED(13817067388142654234,64,FLEN)
NAN_BOXED(9204507788534201127,64,FLEN)
NAN_BOXED(9217975828210556321,64,FLEN)
NAN_BOXED(13817067388142654234,64,FLEN)
NAN_BOXED(9204507788534201127,64,FLEN)
NAN_BOXED(9217975828210556321,64,FLEN)
NAN_BOXED(13817067388142654234,64,FLEN)
NAN_BOXED(9204507788534201127,64,FLEN)
NAN_BOXED(9217975828210556321,64,FLEN)
NAN_BOXED(13817067388142654234,64,FLEN)
NAN_BOXED(9204507788534201127,64,FLEN)
NAN_BOXED(9218063874714921432,64,FLEN)
NAN_BOXED(13818185030153814094,64,FLEN)
NAN_BOXED(9205994777997585987,64,FLEN)
NAN_BOXED(9218063874714921432,64,FLEN)
NAN_BOXED(13818185030153814094,64,FLEN)
NAN_BOXED(9205994777997585987,64,FLEN)
NAN_BOXED(9218063874714921432,64,FLEN)
NAN_BOXED(13818185030153814094,64,FLEN)
NAN_BOXED(9205994777997585987,64,FLEN)
NAN_BOXED(9218063874714921432,64,FLEN)
NAN_BOXED(13818185030153814094,64,FLEN)
NAN_BOXED(9205994777997585987,64,FLEN)
NAN_BOXED(9218063874714921432,64,FLEN)
NAN_BOXED(13818185030153814094,64,FLEN)
NAN_BOXED(9205994777997585987,64,FLEN)
NAN_BOXED(9218234828674509110,64,FLEN)
NAN_BOXED(13830614470250610321,64,FLEN)
NAN_BOXED(9218346414451018843,64,FLEN)
NAN_BOXED(9218234828674509110,64,FLEN)
NAN_BOXED(13830614470250610321,64,FLEN)
NAN_BOXED(9218346414451018843,64,FLEN)
NAN_BOXED(9218234828674509110,64,FLEN)
NAN_BOXED(13830614470250610321,64,FLEN)
NAN_BOXED(9218346414451018843,64,FLEN)
NAN_BOXED(9218234828674509110,64,FLEN)
NAN_BOXED(13830614470250610321,64,FLEN)
NAN_BOXED(9218346414451018843,64,FLEN)
NAN_BOXED(9218234828674509110,64,FLEN)
NAN_BOXED(13830614470250610321,64,FLEN)
NAN_BOXED(9218346414451018843,64,FLEN)
NAN_BOXED(9218304421642524904,64,FLEN)
NAN_BOXED(13826132993673453988,64,FLEN)
NAN_BOXED(9213954810666240807,64,FLEN)
NAN_BOXED(9218304421642524904,64,FLEN)
NAN_BOXED(13826132993673453988,64,FLEN)
NAN_BOXED(9213954810666240807,64,FLEN)
NAN_BOXED(9218304421642524904,64,FLEN)
NAN_BOXED(13826132993673453988,64,FLEN)
NAN_BOXED(9213954810666240807,64,FLEN)
NAN_BOXED(9218304421642524904,64,FLEN)
NAN_BOXED(13826132993673453988,64,FLEN)
NAN_BOXED(9213954810666240807,64,FLEN)
NAN_BOXED(9218304421642524904,64,FLEN)
NAN_BOXED(13826132993673453988,64,FLEN)
NAN_BOXED(9213954810666240807,64,FLEN)
NAN_BOXED(9218314836857841413,64,FLEN)
NAN_BOXED(13824226056952838666,64,FLEN)
NAN_BOXED(9212098593934114803,64,FLEN)
NAN_BOXED(9218314836857841413,64,FLEN)
NAN_BOXED(13824226056952838666,64,FLEN)
NAN_BOXED(9212098593934114803,64,FLEN)
NAN_BOXED(9218314836857841413,64,FLEN)
NAN_BOXED(13824226056952838666,64,FLEN)
NAN_BOXED(9212098593934114803,64,FLEN)
NAN_BOXED(9218314836857841413,64,FLEN)
NAN_BOXED(13824226056952838666,64,FLEN)
NAN_BOXED(9212098593934114803,64,FLEN)
NAN_BOXED(9218314836857841413,64,FLEN)
NAN_BOXED(13824226056952838666,64,FLEN)
NAN_BOXED(9212098593934114803,64,FLEN)
NAN_BOXED(9218358239890966439,64,FLEN)
NAN_BOXED(13827743685604436869,64,FLEN)
NAN_BOXED(9215706681084025091,64,FLEN)
NAN_BOXED(9218358239890966439,64,FLEN)
NAN_BOXED(13827743685604436869,64,FLEN)
NAN_BOXED(9215706681084025091,64,FLEN)
NAN_BOXED(9218358239890966439,64,FLEN)
NAN_BOXED(13827743685604436869,64,FLEN)
NAN_BOXED(9215706681084025091,64,FLEN)
NAN_BOXED(9218358239890966439,64,FLEN)
NAN_BOXED(13827743685604436869,64,FLEN)
NAN_BOXED(9215706681084025091,64,FLEN)
NAN_BOXED(9218358239890966439,64,FLEN)
NAN_BOXED(13827743685604436869,64,FLEN)
NAN_BOXED(9215706681084025091,64,FLEN)
NAN_BOXED(9218436465149059975,64,FLEN)
NAN_BOXED(13827991215756556864,64,FLEN)
NAN_BOXED(9215996154480523526,64,FLEN)
NAN_BOXED(9218436465149059975,64,FLEN)
NAN_BOXED(13827991215756556864,64,FLEN)
NAN_BOXED(9215996154480523526,64,FLEN)
NAN_BOXED(9218436465149059975,64,FLEN)
NAN_BOXED(13827991215756556864,64,FLEN)
NAN_BOXED(9215996154480523526,64,FLEN)
NAN_BOXED(9218436465149059975,64,FLEN)
NAN_BOXED(13827991215756556864,64,FLEN)
NAN_BOXED(9215996154480523526,64,FLEN)
NAN_BOXED(9218436465149059975,64,FLEN)
NAN_BOXED(13827991215756556864,64,FLEN)
NAN_BOXED(9215996154480523526,64,FLEN)
NAN_BOXED(9218483042510434280,64,FLEN)
NAN_BOXED(13830605194951076378,64,FLEN)
NAN_BOXED(9218580179096972467,64,FLEN)
NAN_BOXED(9218483042510434280,64,FLEN)
NAN_BOXED(13830605194951076378,64,FLEN)
NAN_BOXED(9218580179096972467,64,FLEN)
NAN_BOXED(9218483042510434280,64,FLEN)
NAN_BOXED(13830605194951076378,64,FLEN)
NAN_BOXED(9218580179096972467,64,FLEN)
NAN_BOXED(9218483042510434280,64,FLEN)
NAN_BOXED(13830605194951076378,64,FLEN)
NAN_BOXED(9218580179096972467,64,FLEN)
NAN_BOXED(9218483042510434280,64,FLEN)
NAN_BOXED(13830605194951076378,64,FLEN)
NAN_BOXED(9218580179096972467,64,FLEN)
NAN_BOXED(9218506490883060644,64,FLEN)
NAN_BOXED(13827430883162552413,64,FLEN)
NAN_BOXED(9215508436391797453,64,FLEN)
NAN_BOXED(9218506490883060644,64,FLEN)
NAN_BOXED(13827430883162552413,64,FLEN)
NAN_BOXED(9215508436391797453,64,FLEN)
NAN_BOXED(9218506490883060644,64,FLEN)
NAN_BOXED(13827430883162552413,64,FLEN)
NAN_BOXED(9215508436391797453,64,FLEN)
NAN_BOXED(9218506490883060644,64,FLEN)
NAN_BOXED(13827430883162552413,64,FLEN)
NAN_BOXED(9215508436391797453,64,FLEN)
NAN_BOXED(9218506490883060644,64,FLEN)
NAN_BOXED(13827430883162552413,64,FLEN)
NAN_BOXED(9215508436391797453,64,FLEN)
NAN_BOXED(9218518409328425938,64,FLEN)
NAN_BOXED(13830110328832992627,64,FLEN)
NAN_BOXED(9218091541676087313,64,FLEN)
NAN_BOXED(9218518409328425938,64,FLEN)
NAN_BOXED(13830110328832992627,64,FLEN)
NAN_BOXED(9218091541676087313,64,FLEN)
NAN_BOXED(9218518409328425938,64,FLEN)
NAN_BOXED(13830110328832992627,64,FLEN)
NAN_BOXED(9218091541676087313,64,FLEN)
NAN_BOXED(9218518409328425938,64,FLEN)
NAN_BOXED(13830110328832992627,64,FLEN)
NAN_BOXED(9218091541676087313,64,FLEN)
NAN_BOXED(9218518409328425938,64,FLEN)
NAN_BOXED(13830110328832992627,64,FLEN)
NAN_BOXED(9218091541676087313,64,FLEN)
NAN_BOXED(9218620330570239029,64,FLEN)
NAN_BOXED(13824078964834569901,64,FLEN)
NAN_BOXED(9212199156227126713,64,FLEN)
NAN_BOXED(9218620330570239029,64,FLEN)
NAN_BOXED(13824078964834569901,64,FLEN)
NAN_BOXED(9212199156227126713,64,FLEN)
NAN_BOXED(9218620330570239029,64,FLEN)
NAN_BOXED(13824078964834569901,64,FLEN)
NAN_BOXED(9212199156227126713,64,FLEN)
NAN_BOXED(9218620330570239029,64,FLEN)
NAN_BOXED(13824078964834569901,64,FLEN)
NAN_BOXED(9212199156227126713,64,FLEN)
NAN_BOXED(9218620330570239029,64,FLEN)
NAN_BOXED(13824078964834569901,64,FLEN)
NAN_BOXED(9212199156227126713,64,FLEN)
NAN_BOXED(9218622517863073841,64,FLEN)
NAN_BOXED(13827705751646383517,64,FLEN)
NAN_BOXED(9215851590692846986,64,FLEN)
NAN_BOXED(9218622517863073841,64,FLEN)
NAN_BOXED(13827705751646383517,64,FLEN)
NAN_BOXED(9215851590692846986,64,FLEN)
NAN_BOXED(9218622517863073841,64,FLEN)
NAN_BOXED(13827705751646383517,64,FLEN)
NAN_BOXED(9215851590692846986,64,FLEN)
NAN_BOXED(9218622517863073841,64,FLEN)
NAN_BOXED(13827705751646383517,64,FLEN)
NAN_BOXED(9215851590692846986,64,FLEN)
NAN_BOXED(9218622517863073841,64,FLEN)
NAN_BOXED(13827705751646383517,64,FLEN)
NAN_BOXED(9215851590692846986,64,FLEN)
NAN_BOXED(9218644154031115342,64,FLEN)
NAN_BOXED(13805788106432509798,64,FLEN)
NAN_BOXED(9193933789733064287,64,FLEN)
NAN_BOXED(9218644154031115342,64,FLEN)
NAN_BOXED(13805788106432509798,64,FLEN)
NAN_BOXED(9193933789733064287,64,FLEN)
NAN_BOXED(9218644154031115342,64,FLEN)
NAN_BOXED(13805788106432509798,64,FLEN)
NAN_BOXED(9193933789733064287,64,FLEN)
NAN_BOXED(9218644154031115342,64,FLEN)
NAN_BOXED(13805788106432509798,64,FLEN)
NAN_BOXED(9193933789733064287,64,FLEN)
NAN_BOXED(9218644154031115342,64,FLEN)
NAN_BOXED(13805788106432509798,64,FLEN)
NAN_BOXED(9193933789733064287,64,FLEN)
NAN_BOXED(9218652332627507740,64,FLEN)
NAN_BOXED(13825414749749563854,64,FLEN)
NAN_BOXED(9213527888457783637,64,FLEN)
NAN_BOXED(9218652332627507740,64,FLEN)
NAN_BOXED(13825414749749563854,64,FLEN)
NAN_BOXED(9213527888457783637,64,FLEN)
NAN_BOXED(9218652332627507740,64,FLEN)
NAN_BOXED(13825414749749563854,64,FLEN)
NAN_BOXED(9213527888457783637,64,FLEN)
NAN_BOXED(9218652332627507740,64,FLEN)
NAN_BOXED(13825414749749563854,64,FLEN)
NAN_BOXED(9213527888457783637,64,FLEN)
NAN_BOXED(9218652332627507740,64,FLEN)
NAN_BOXED(13825414749749563854,64,FLEN)
NAN_BOXED(9213527888457783637,64,FLEN)
NAN_BOXED(9218653365019673707,64,FLEN)
NAN_BOXED(13830373543315583809,64,FLEN)
NAN_BOXED(9218476772471233798,64,FLEN)
NAN_BOXED(9218653365019673707,64,FLEN)
NAN_BOXED(13830373543315583809,64,FLEN)
NAN_BOXED(9218476772471233798,64,FLEN)
NAN_BOXED(9218653365019673707,64,FLEN)
NAN_BOXED(13830373543315583809,64,FLEN)
NAN_BOXED(9218476772471233798,64,FLEN)
NAN_BOXED(9218653365019673707,64,FLEN)
NAN_BOXED(13830373543315583809,64,FLEN)
NAN_BOXED(9218476772471233798,64,FLEN)
NAN_BOXED(9218653365019673707,64,FLEN)
NAN_BOXED(13830373543315583809,64,FLEN)
NAN_BOXED(9218476772471233798,64,FLEN)
NAN_BOXED(9218676457696811647,64,FLEN)
NAN_BOXED(13830644871703824798,64,FLEN)
NAN_BOXED(9218853435537816585,64,FLEN)
NAN_BOXED(9218676457696811647,64,FLEN)
NAN_BOXED(13830644871703824798,64,FLEN)
NAN_BOXED(9218853435537816585,64,FLEN)
NAN_BOXED(9218676457696811647,64,FLEN)
NAN_BOXED(13830644871703824798,64,FLEN)
NAN_BOXED(9218853435537816585,64,FLEN)
NAN_BOXED(9218676457696811647,64,FLEN)
NAN_BOXED(13830644871703824798,64,FLEN)
NAN_BOXED(9218853435537816585,64,FLEN)
NAN_BOXED(9218676457696811647,64,FLEN)
NAN_BOXED(13830644871703824798,64,FLEN)
NAN_BOXED(9218853435537816585,64,FLEN)
NAN_BOXED(9218697125363451294,64,FLEN)
NAN_BOXED(13826104250436819949,64,FLEN)
NAN_BOXED(9214298283491602453,64,FLEN)
NAN_BOXED(9218697125363451294,64,FLEN)
NAN_BOXED(13826104250436819949,64,FLEN)
NAN_BOXED(9214298283491602453,64,FLEN)
NAN_BOXED(9218697125363451294,64,FLEN)
NAN_BOXED(13826104250436819949,64,FLEN)
NAN_BOXED(9214298283491602453,64,FLEN)
NAN_BOXED(9218697125363451294,64,FLEN)
NAN_BOXED(13826104250436819949,64,FLEN)
NAN_BOXED(9214298283491602453,64,FLEN)
NAN_BOXED(9218697125363451294,64,FLEN)
NAN_BOXED(13826104250436819949,64,FLEN)
NAN_BOXED(9214298283491602453,64,FLEN)
NAN_BOXED(9218710100651923012,64,FLEN)
NAN_BOXED(13829545812725927101,64,FLEN)
NAN_BOXED(9217719188547336935,64,FLEN)
NAN_BOXED(9218710100651923012,64,FLEN)
NAN_BOXED(13829545812725927101,64,FLEN)
NAN_BOXED(9217719188547336935,64,FLEN)
NAN_BOXED(9218710100651923012,64,FLEN)
NAN_BOXED(13829545812725927101,64,FLEN)
NAN_BOXED(9217719188547336935,64,FLEN)
NAN_BOXED(9218710100651923012,64,FLEN)
NAN_BOXED(13829545812725927101,64,FLEN)
NAN_BOXED(9217719188547336935,64,FLEN)
NAN_BOXED(9218710100651923012,64,FLEN)
NAN_BOXED(13829545812725927101,64,FLEN)
NAN_BOXED(9217719188547336935,64,FLEN)
NAN_BOXED(9218726812647611966,64,FLEN)
NAN_BOXED(13826043836431716663,64,FLEN)
NAN_BOXED(9214216303797056779,64,FLEN)
NAN_BOXED(9218726812647611966,64,FLEN)
NAN_BOXED(13826043836431716663,64,FLEN)
NAN_BOXED(9214216303797056779,64,FLEN)
NAN_BOXED(9218726812647611966,64,FLEN)
NAN_BOXED(13826043836431716663,64,FLEN)
NAN_BOXED(9214216303797056779,64,FLEN)
NAN_BOXED(9218726812647611966,64,FLEN)
NAN_BOXED(13826043836431716663,64,FLEN)
NAN_BOXED(9214216303797056779,64,FLEN)
NAN_BOXED(9218726812647611966,64,FLEN)
NAN_BOXED(13826043836431716663,64,FLEN)
NAN_BOXED(9214216303797056779,64,FLEN)
NAN_BOXED(9218748633449959573,64,FLEN)
NAN_BOXED(13826417654734441943,64,FLEN)
NAN_BOXED(9214666855668631035,64,FLEN)
NAN_BOXED(9218748633449959573,64,FLEN)
NAN_BOXED(13826417654734441943,64,FLEN)
NAN_BOXED(9214666855668631035,64,FLEN)
NAN_BOXED(9218748633449959573,64,FLEN)
NAN_BOXED(13826417654734441943,64,FLEN)
NAN_BOXED(9214666855668631035,64,FLEN)
NAN_BOXED(9218748633449959573,64,FLEN)
NAN_BOXED(13826417654734441943,64,FLEN)
NAN_BOXED(9214666855668631035,64,FLEN)
NAN_BOXED(9218748633449959573,64,FLEN)
NAN_BOXED(13826417654734441943,64,FLEN)
NAN_BOXED(9214666855668631035,64,FLEN)
NAN_BOXED(9218767783614256650,64,FLEN)
NAN_BOXED(13822384954755267012,64,FLEN)
NAN_BOXED(9210639248413173781,64,FLEN)
NAN_BOXED(9218767783614256650,64,FLEN)
NAN_BOXED(13822384954755267012,64,FLEN)
NAN_BOXED(9210639248413173781,64,FLEN)
NAN_BOXED(9218767783614256650,64,FLEN)
NAN_BOXED(13822384954755267012,64,FLEN)
NAN_BOXED(9210639248413173781,64,FLEN)
NAN_BOXED(9218767783614256650,64,FLEN)
NAN_BOXED(13822384954755267012,64,FLEN)
NAN_BOXED(9210639248413173781,64,FLEN)
NAN_BOXED(9218767783614256650,64,FLEN)
NAN_BOXED(13822384954755267012,64,FLEN)
NAN_BOXED(9210639248413173781,64,FLEN)
NAN_BOXED(9218862131720178343,64,FLEN)
NAN_BOXED(13829229043672187159,64,FLEN)
NAN_BOXED(9217537647594789460,64,FLEN)
NAN_BOXED(9218862131720178343,64,FLEN)
NAN_BOXED(13829229043672187159,64,FLEN)
NAN_BOXED(9217537647594789460,64,FLEN)
NAN_BOXED(9218862131720178343,64,FLEN)
NAN_BOXED(13829229043672187159,64,FLEN)
NAN_BOXED(9217537647594789460,64,FLEN)
NAN_BOXED(9218862131720178343,64,FLEN)
NAN_BOXED(13829229043672187159,64,FLEN)
NAN_BOXED(9217537647594789460,64,FLEN)
NAN_BOXED(9218862131720178343,64,FLEN)
NAN_BOXED(13829229043672187159,64,FLEN)
NAN_BOXED(9217537647594789460,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(13871980826941009631,64,FLEN)
NAN_BOXED(9212660238625139215,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(13871980826941009631,64,FLEN)
NAN_BOXED(9212660238625139215,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(13871980826941009631,64,FLEN)
NAN_BOXED(9212660238625139215,64,FLEN)
NAN_BOXED(9170918346910810111,64,FLEN)
NAN_BOXED(13871980826941009631,64,FLEN)
NAN_BOXED(9212660238625139215,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9177513948530394111,64,FLEN)
NAN_BOXED(13870716895062856513,64,FLEN)
NAN_BOXED(9217710154139922637,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
NAN_BOXED(9181633383112396287,64,FLEN)
NAN_BOXED(13864626555706534271,64,FLEN)
NAN_BOXED(9215967526839953677,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 214*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
