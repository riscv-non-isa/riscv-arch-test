
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f2, rs2==f29, rs3==f11, rd==f2,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0x6f07612d56000 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xa61a99f3a42d2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x2e9626d4a96ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f2; op2:f29; op3:f11; dest:f2; op1val:0x3f46f07612d56000; op2val:0xc06a61a99f3a42d2;
op3val:0x3fc2e9626d4a96ac; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f2, f2, f29, f11, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f30, rs2==f10, rs3==f2, rd==f29,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0x6f07612d56000 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xa61a99f3a42d2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x2e9626d4a96ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f10; op3:f2; dest:f29; op1val:0x3f46f07612d56000; op2val:0xc06a61a99f3a42d2;
op3val:0x3fc2e9626d4a96ac; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f29, f30, f10, f2, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f15, rs2==f15, rs3==f30, rd==f15,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0x6f07612d56000 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xa61a99f3a42d2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x2e9626d4a96ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f15; op2:f15; op3:f30; dest:f15; op1val:0x3f46f07612d56000; op2val:0x3f46f07612d56000;
op3val:0x3fc2e9626d4a96ac; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f15, f15, f15, f30, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rs3 == rd, rs1==f31, rs2==f31, rs3==f31, rd==f31,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0x6f07612d56000 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xa61a99f3a42d2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x2e9626d4a96ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f31; op2:f31; op3:f31; dest:f31; op1val:0x3f46f07612d56000; op2val:0x3f46f07612d56000;
op3val:0x3f46f07612d56000; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f31, f31, f31, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f27, rs2==f27, rs3==f23, rd==f6,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0x6f07612d56000 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xa61a99f3a42d2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x2e9626d4a96ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f27; op2:f27; op3:f23; dest:f6; op1val:0x3f46f07612d56000; op2val:0x3f46f07612d56000;
op3val:0x3fc2e9626d4a96ac; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f6, f27, f27, f23, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f5, rs2==f4, rs3==f28, rd==f4,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6e2cfb6da7d40 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xfa01150dafc84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e33aa07ebf5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f5; op2:f4; op3:f28; dest:f4; op1val:0x3f86e2cfb6da7d40; op2val:0xc04fa01150dafc84;
op3val:0x3fe69e33aa07ebf5; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f4, f5, f4, f28, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f29, rs2==f5, rs3==f5, rd==f18,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6e2cfb6da7d40 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xfa01150dafc84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e33aa07ebf5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f29; op2:f5; op3:f5; dest:f18; op1val:0x3f86e2cfb6da7d40; op2val:0xc04fa01150dafc84;
op3val:0xc04fa01150dafc84; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f18, f29, f5, f5, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f9, rs2==f3, rs3==f9, rd==f27,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6e2cfb6da7d40 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xfa01150dafc84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e33aa07ebf5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f9; op2:f3; op3:f9; dest:f27; op1val:0x3f86e2cfb6da7d40; op2val:0xc04fa01150dafc84;
op3val:0x3f86e2cfb6da7d40; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f27, f9, f3, f9, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f0, rs2==f17, rs3==f21, rd==f21,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6e2cfb6da7d40 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xfa01150dafc84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e33aa07ebf5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f0; op2:f17; op3:f21; dest:f21; op1val:0x3f86e2cfb6da7d40; op2val:0xc04fa01150dafc84;
op3val:0x3fe69e33aa07ebf5; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f21, f0, f17, f21, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rd == rs2 == rs3 != rs1, rs1==f26, rs2==f8, rs3==f8, rd==f8,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6e2cfb6da7d40 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xfa01150dafc84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e33aa07ebf5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f26; op2:f8; op3:f8; dest:f8; op1val:0x3f86e2cfb6da7d40; op2val:0xc04fa01150dafc84;
op3val:0xc04fa01150dafc84; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f8, f26, f8, f8, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f16, rs2==f6, rs3==f16, rd==f16,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xb3d7f663bda80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x1890703a81cce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddaa1e09c7408 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f16; op2:f6; op3:f16; dest:f16; op1val:0x3f8b3d7f663bda80; op2val:0xc041890703a81cce;
op3val:0x3f8b3d7f663bda80; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f16, f16, f6, f16, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 == rs3 != rd, rs1==f18, rs2==f18, rs3==f18, rd==f26,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xb3d7f663bda80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x1890703a81cce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddaa1e09c7408 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f18; op2:f18; op3:f18; dest:f26; op1val:0x3f8b3d7f663bda80; op2val:0x3f8b3d7f663bda80;
op3val:0x3f8b3d7f663bda80; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f26, f18, f18, f18, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f8, rs2==f0, rs3==f20, rd==f5,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xb3d7f663bda80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x1890703a81cce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddaa1e09c7408 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f8; op2:f0; op3:f20; dest:f5; op1val:0x3f8b3d7f663bda80; op2val:0xc041890703a81cce;
op3val:0x3fdddaa1e09c7408; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f5, f8, f0, f20, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f25, rs2==f22, rs3==f14, rd==f1,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xb3d7f663bda80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x1890703a81cce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddaa1e09c7408 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f25; op2:f22; op3:f14; dest:f1; op1val:0x3f8b3d7f663bda80; op2val:0xc041890703a81cce;
op3val:0x3fdddaa1e09c7408; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f1, f25, f22, f14, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f13, rs2==f1, rs3==f24, rd==f7,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xb3d7f663bda80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x1890703a81cce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddaa1e09c7408 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f13; op2:f1; op3:f24; dest:f7; op1val:0x3f8b3d7f663bda80; op2val:0xc041890703a81cce;
op3val:0x3fdddaa1e09c7408; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f7, f13, f1, f24, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f17, rs2==f20, rs3==f19, rd==f14,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x019d158a43820 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x029775a9993e2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0438b9c48257a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f17; op2:f20; op3:f19; dest:f14; op1val:0x3f9019d158a43820; op2val:0xc04029775a9993e2;
op3val:0x3fe0438b9c48257a; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f14, f17, f20, f19, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f22, rs2==f19, rs3==f12, rd==f10,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x019d158a43820 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x029775a9993e2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0438b9c48257a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f22; op2:f19; op3:f12; dest:f10; op1val:0x3f9019d158a43820; op2val:0xc04029775a9993e2;
op3val:0x3fe0438b9c48257a; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f10, f22, f19, f12, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f10, rs2==f23, rs3==f22, rd==f11,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x019d158a43820 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x029775a9993e2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0438b9c48257a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f10; op2:f23; op3:f22; dest:f11; op1val:0x3f9019d158a43820; op2val:0xc04029775a9993e2;
op3val:0x3fe0438b9c48257a; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f11, f10, f23, f22, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f28, rs2==f2, rs3==f7, rd==f9,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x019d158a43820 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x029775a9993e2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0438b9c48257a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f28; op2:f2; op3:f7; dest:f9; op1val:0x3f9019d158a43820; op2val:0xc04029775a9993e2;
op3val:0x3fe0438b9c48257a; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f9, f28, f2, f7, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f19, rs2==f12, rs3==f29, rd==f28,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x019d158a43820 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x029775a9993e2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0438b9c48257a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f19; op2:f12; op3:f29; dest:f28; op1val:0x3f9019d158a43820; op2val:0xc04029775a9993e2;
op3val:0x3fe0438b9c48257a; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f28, f19, f12, f29, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f1, rs2==f9, rs3==f4, rd==f20,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x200336ac53760 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xd087661bd3cab and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x054f13d561460 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f1; op2:f9; op3:f4; dest:f20; op1val:0x3f9200336ac53760; op2val:0xc01d087661bd3cab;
op3val:0x3fc054f13d561460; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f20, f1, f9, f4, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f3, rs2==f30, rs3==f6, rd==f23,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x200336ac53760 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xd087661bd3cab and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x054f13d561460 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f3; op2:f30; op3:f6; dest:f23; op1val:0x3f9200336ac53760; op2val:0xc01d087661bd3cab;
op3val:0x3fc054f13d561460; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f23, f3, f30, f6, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f23, rs2==f13, rs3==f3, rd==f25,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x200336ac53760 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xd087661bd3cab and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x054f13d561460 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f23; op2:f13; op3:f3; dest:f25; op1val:0x3f9200336ac53760; op2val:0xc01d087661bd3cab;
op3val:0x3fc054f13d561460; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f25, f23, f13, f3, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f11, rs2==f28, rs3==f15, rd==f0,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x200336ac53760 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xd087661bd3cab and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x054f13d561460 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f11; op2:f28; op3:f15; dest:f0; op1val:0x3f9200336ac53760; op2val:0xc01d087661bd3cab;
op3val:0x3fc054f13d561460; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f0, f11, f28, f15, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f6, rs2==f26, rs3==f17, rd==f13,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x200336ac53760 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xd087661bd3cab and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x054f13d561460 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f6; op2:f26; op3:f17; dest:f13; op1val:0x3f9200336ac53760; op2val:0xc01d087661bd3cab;
op3val:0x3fc054f13d561460; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f13, f6, f26, f17, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f20, rs2==f21, rs3==f0, rd==f24,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x379d4d97f4c20 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa7baf4b5f257c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x01e43eafee7f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f20; op2:f21; op3:f0; dest:f24; op1val:0x3f9379d4d97f4c20; op2val:0xc03a7baf4b5f257c;
op3val:0x3fe01e43eafee7f5; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f24, f20, f21, f0, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f21, rs2==f14, rs3==f25, rd==f12,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x379d4d97f4c20 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa7baf4b5f257c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x01e43eafee7f5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f21; op2:f14; op3:f25; dest:f12; op1val:0x3f9379d4d97f4c20; op2val:0xc03a7baf4b5f257c;
op3val:0x3fe01e43eafee7f5; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f12, f21, f14, f25, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f7, rs2==f11, rs3==f26, rd==f3,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x379d4d97f4c20 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa7baf4b5f257c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x01e43eafee7f5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f7; op2:f11; op3:f26; dest:f3; op1val:0x3f9379d4d97f4c20; op2val:0xc03a7baf4b5f257c;
op3val:0x3fe01e43eafee7f5; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f3, f7, f11, f26, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f24, rs2==f7, rs3==f13, rd==f30,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x379d4d97f4c20 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa7baf4b5f257c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x01e43eafee7f5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f24; op2:f7; op3:f13; dest:f30; op1val:0x3f9379d4d97f4c20; op2val:0xc03a7baf4b5f257c;
op3val:0x3fe01e43eafee7f5; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f30, f24, f7, f13, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f4, rs2==f25, rs3==f27, rd==f22,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x379d4d97f4c20 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa7baf4b5f257c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x01e43eafee7f5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f4; op2:f25; op3:f27; dest:f22; op1val:0x3f9379d4d97f4c20; op2val:0xc03a7baf4b5f257c;
op3val:0x3fe01e43eafee7f5; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f22, f4, f25, f27, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f14, rs2==f24, rs3==f1, rd==f17,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x5d356f734b000 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4011f682f3777 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xb49b4c207ec00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f14; op2:f24; op3:f1; dest:f17; op1val:0x3f95d356f734b000; op2val:0xbfb4011f682f3777;
op3val:0x3f5b49b4c207ec00; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f17, f14, f24, f1, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f12, rs2==f16, rs3==f10, rd==f19,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x5d356f734b000 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4011f682f3777 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xb49b4c207ec00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f12; op2:f16; op3:f10; dest:f19; op1val:0x3f95d356f734b000; op2val:0xbfb4011f682f3777;
op3val:0x3f5b49b4c207ec00; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f19, f12, f16, f10, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x5d356f734b000 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4011f682f3777 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xb49b4c207ec00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f95d356f734b000; op2val:0xbfb4011f682f3777;
op3val:0x3f5b49b4c207ec00; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x5d356f734b000 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4011f682f3777 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xb49b4c207ec00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f95d356f734b000; op2val:0xbfb4011f682f3777;
op3val:0x3f5b49b4c207ec00; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x5d356f734b000 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4011f682f3777 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xb49b4c207ec00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f95d356f734b000; op2val:0xbfb4011f682f3777;
op3val:0x3f5b49b4c207ec00; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x8736cd15f7280 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd2329f35c9912 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x64378ea9a2f90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f98736cd15f7280; op2val:0xbffd2329f35c9912;
op3val:0x3fa64378ea9a2f90; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x8736cd15f7280 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd2329f35c9912 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x64378ea9a2f90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f98736cd15f7280; op2val:0xbffd2329f35c9912;
op3val:0x3fa64378ea9a2f90; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x8736cd15f7280 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd2329f35c9912 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x64378ea9a2f90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f98736cd15f7280; op2val:0xbffd2329f35c9912;
op3val:0x3fa64378ea9a2f90; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x8736cd15f7280 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd2329f35c9912 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x64378ea9a2f90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f98736cd15f7280; op2val:0xbffd2329f35c9912;
op3val:0x3fa64378ea9a2f90; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x8736cd15f7280 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd2329f35c9912 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x64378ea9a2f90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f98736cd15f7280; op2val:0xbffd2329f35c9912;
op3val:0x3fa64378ea9a2f90; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x89178bd28bc60 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x6c6beeec033db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x17c99b428d355 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f989178bd28bc60; op2val:0xc036c6beeec033db;
op3val:0x3fe17c99b428d355; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x89178bd28bc60 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x6c6beeec033db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x17c99b428d355 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f989178bd28bc60; op2val:0xc036c6beeec033db;
op3val:0x3fe17c99b428d355; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x89178bd28bc60 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x6c6beeec033db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x17c99b428d355 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f989178bd28bc60; op2val:0xc036c6beeec033db;
op3val:0x3fe17c99b428d355; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x89178bd28bc60 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x6c6beeec033db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x17c99b428d355 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f989178bd28bc60; op2val:0xc036c6beeec033db;
op3val:0x3fe17c99b428d355; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x89178bd28bc60 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x6c6beeec033db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x17c99b428d355 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f989178bd28bc60; op2val:0xc036c6beeec033db;
op3val:0x3fe17c99b428d355; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x92870dd595560 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x43947472f5ed3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfcc9d3a26fff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f992870dd595560; op2val:0xc0443947472f5ed3;
op3val:0x3fefcc9d3a26fff0; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x92870dd595560 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x43947472f5ed3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfcc9d3a26fff0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f992870dd595560; op2val:0xc0443947472f5ed3;
op3val:0x3fefcc9d3a26fff0; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x92870dd595560 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x43947472f5ed3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfcc9d3a26fff0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f992870dd595560; op2val:0xc0443947472f5ed3;
op3val:0x3fefcc9d3a26fff0; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x92870dd595560 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x43947472f5ed3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfcc9d3a26fff0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f992870dd595560; op2val:0xc0443947472f5ed3;
op3val:0x3fefcc9d3a26fff0; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x92870dd595560 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x43947472f5ed3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfcc9d3a26fff0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f992870dd595560; op2val:0xc0443947472f5ed3;
op3val:0x3fefcc9d3a26fff0; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x97f8007ce7620 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x39eeea97793ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf44af7033ff8d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f997f8007ce7620; op2val:0xc0439eeea97793ee;
op3val:0x3fef44af7033ff8d; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x97f8007ce7620 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x39eeea97793ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf44af7033ff8d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f997f8007ce7620; op2val:0xc0439eeea97793ee;
op3val:0x3fef44af7033ff8d; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x97f8007ce7620 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x39eeea97793ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf44af7033ff8d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f997f8007ce7620; op2val:0xc0439eeea97793ee;
op3val:0x3fef44af7033ff8d; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x97f8007ce7620 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x39eeea97793ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf44af7033ff8d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f997f8007ce7620; op2val:0xc0439eeea97793ee;
op3val:0x3fef44af7033ff8d; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x97f8007ce7620 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x39eeea97793ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf44af7033ff8d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f997f8007ce7620; op2val:0xc0439eeea97793ee;
op3val:0x3fef44af7033ff8d; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xbf5320b56f9c0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x8890623de3f55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x56f9ca41184ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9bf5320b56f9c0; op2val:0xc028890623de3f55;
op3val:0x3fd56f9ca41184ea; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xbf5320b56f9c0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x8890623de3f55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x56f9ca41184ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9bf5320b56f9c0; op2val:0xc028890623de3f55;
op3val:0x3fd56f9ca41184ea; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xbf5320b56f9c0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x8890623de3f55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x56f9ca41184ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9bf5320b56f9c0; op2val:0xc028890623de3f55;
op3val:0x3fd56f9ca41184ea; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xbf5320b56f9c0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x8890623de3f55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x56f9ca41184ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9bf5320b56f9c0; op2val:0xc028890623de3f55;
op3val:0x3fd56f9ca41184ea; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xbf5320b56f9c0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x8890623de3f55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x56f9ca41184ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9bf5320b56f9c0; op2val:0xc028890623de3f55;
op3val:0x3fd56f9ca41184ea; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc34daa5567940 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x6842b48723e01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3d8d67e76e523 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c34daa5567940; op2val:0xc036842b48723e01;
op3val:0x3fe3d8d67e76e523; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc34daa5567940 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x6842b48723e01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3d8d67e76e523 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c34daa5567940; op2val:0xc036842b48723e01;
op3val:0x3fe3d8d67e76e523; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc34daa5567940 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x6842b48723e01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3d8d67e76e523 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c34daa5567940; op2val:0xc036842b48723e01;
op3val:0x3fe3d8d67e76e523; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc34daa5567940 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x6842b48723e01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3d8d67e76e523 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c34daa5567940; op2val:0xc036842b48723e01;
op3val:0x3fe3d8d67e76e523; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc34daa5567940 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x6842b48723e01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3d8d67e76e523 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c34daa5567940; op2val:0xc036842b48723e01;
op3val:0x3fe3d8d67e76e523; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3e593894842d0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1c19624476968 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x614a8bae93f70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa3e593894842d0; op2val:0xc001c19624476968;
op3val:0x3fb614a8bae93f70; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3e593894842d0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1c19624476968 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x614a8bae93f70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa3e593894842d0; op2val:0xc001c19624476968;
op3val:0x3fb614a8bae93f70; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3e593894842d0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1c19624476968 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x614a8bae93f70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa3e593894842d0; op2val:0xc001c19624476968;
op3val:0x3fb614a8bae93f70; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3e593894842d0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1c19624476968 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x614a8bae93f70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa3e593894842d0; op2val:0xc001c19624476968;
op3val:0x3fb614a8bae93f70; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3e593894842d0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1c19624476968 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x614a8bae93f70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa3e593894842d0; op2val:0xc001c19624476968;
op3val:0x3fb614a8bae93f70; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x493033484c5b0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x290f88a54c9d7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7dfce5080ba64 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa493033484c5b0; op2val:0xc02290f88a54c9d7;
op3val:0x3fd7dfce5080ba64; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x493033484c5b0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x290f88a54c9d7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7dfce5080ba64 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa493033484c5b0; op2val:0xc02290f88a54c9d7;
op3val:0x3fd7dfce5080ba64; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x493033484c5b0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x290f88a54c9d7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7dfce5080ba64 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa493033484c5b0; op2val:0xc02290f88a54c9d7;
op3val:0x3fd7dfce5080ba64; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x493033484c5b0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x290f88a54c9d7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7dfce5080ba64 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa493033484c5b0; op2val:0xc02290f88a54c9d7;
op3val:0x3fd7dfce5080ba64; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x493033484c5b0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x290f88a54c9d7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7dfce5080ba64 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa493033484c5b0; op2val:0xc02290f88a54c9d7;
op3val:0x3fd7dfce5080ba64; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5e83b33410170 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7ef408c47f77f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x062b5377d34c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa5e83b33410170; op2val:0xbfe7ef408c47f77f;
op3val:0x3fa062b5377d34c0; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5e83b33410170 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7ef408c47f77f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x062b5377d34c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa5e83b33410170; op2val:0xbfe7ef408c47f77f;
op3val:0x3fa062b5377d34c0; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5e83b33410170 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7ef408c47f77f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x062b5377d34c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa5e83b33410170; op2val:0xbfe7ef408c47f77f;
op3val:0x3fa062b5377d34c0; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5e83b33410170 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7ef408c47f77f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x062b5377d34c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa5e83b33410170; op2val:0xbfe7ef408c47f77f;
op3val:0x3fa062b5377d34c0; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5e83b33410170 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7ef408c47f77f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x062b5377d34c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa5e83b33410170; op2val:0xbfe7ef408c47f77f;
op3val:0x3fa062b5377d34c0; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x88e056485c780 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa98d062065da6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x468a6e1a50df2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa88e056485c780; op2val:0xc01a98d062065da6;
op3val:0x3fd468a6e1a50df2; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x88e056485c780 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa98d062065da6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x468a6e1a50df2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa88e056485c780; op2val:0xc01a98d062065da6;
op3val:0x3fd468a6e1a50df2; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x88e056485c780 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa98d062065da6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x468a6e1a50df2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa88e056485c780; op2val:0xc01a98d062065da6;
op3val:0x3fd468a6e1a50df2; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x88e056485c780 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa98d062065da6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x468a6e1a50df2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa88e056485c780; op2val:0xc01a98d062065da6;
op3val:0x3fd468a6e1a50df2; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x88e056485c780 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa98d062065da6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x468a6e1a50df2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa88e056485c780; op2val:0xc01a98d062065da6;
op3val:0x3fd468a6e1a50df2; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd0059300f8580 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x8c9daddbbe458 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x677336f95cdf8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fad0059300f8580; op2val:0xc018c9daddbbe458;
op3val:0x3fd677336f95cdf8; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd0059300f8580 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x8c9daddbbe458 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x677336f95cdf8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fad0059300f8580; op2val:0xc018c9daddbbe458;
op3val:0x3fd677336f95cdf8; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd0059300f8580 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x8c9daddbbe458 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x677336f95cdf8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fad0059300f8580; op2val:0xc018c9daddbbe458;
op3val:0x3fd677336f95cdf8; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd0059300f8580 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x8c9daddbbe458 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x677336f95cdf8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fad0059300f8580; op2val:0xc018c9daddbbe458;
op3val:0x3fd677336f95cdf8; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd0059300f8580 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x8c9daddbbe458 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x677336f95cdf8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fad0059300f8580; op2val:0xc018c9daddbbe458;
op3val:0x3fd677336f95cdf8; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf77f216018fa0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x45d26398b8183 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x406917c574006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faf77f216018fa0; op2val:0xc0245d26398b8183;
op3val:0x3fe406917c574006; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf77f216018fa0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x45d26398b8183 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x406917c574006 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faf77f216018fa0; op2val:0xc0245d26398b8183;
op3val:0x3fe406917c574006; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf77f216018fa0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x45d26398b8183 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x406917c574006 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faf77f216018fa0; op2val:0xc0245d26398b8183;
op3val:0x3fe406917c574006; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf77f216018fa0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x45d26398b8183 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x406917c574006 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faf77f216018fa0; op2val:0xc0245d26398b8183;
op3val:0x3fe406917c574006; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf77f216018fa0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x45d26398b8183 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x406917c574006 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faf77f216018fa0; op2val:0xc0245d26398b8183;
op3val:0x3fe406917c574006; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x007c0e4ad38b8 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x0b25e16a8e013 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0ba756ade5a6c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb007c0e4ad38b8; op2val:0xc020b25e16a8e013;
op3val:0x3fe0ba756ade5a6c; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x007c0e4ad38b8 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x0b25e16a8e013 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0ba756ade5a6c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb007c0e4ad38b8; op2val:0xc020b25e16a8e013;
op3val:0x3fe0ba756ade5a6c; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x007c0e4ad38b8 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x0b25e16a8e013 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0ba756ade5a6c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb007c0e4ad38b8; op2val:0xc020b25e16a8e013;
op3val:0x3fe0ba756ade5a6c; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x007c0e4ad38b8 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x0b25e16a8e013 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0ba756ade5a6c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb007c0e4ad38b8; op2val:0xc020b25e16a8e013;
op3val:0x3fe0ba756ade5a6c; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x007c0e4ad38b8 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x0b25e16a8e013 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0ba756ade5a6c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb007c0e4ad38b8; op2val:0xc020b25e16a8e013;
op3val:0x3fe0ba756ade5a6c; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0739750eb65a8 and fs2 == 1 and fe2 == 0x402 and fm2 == 0xd72d619b7f54d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe4795fd44d27c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb0739750eb65a8; op2val:0xc02d72d619b7f54d;
op3val:0x3fee4795fd44d27c; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0739750eb65a8 and fs2 == 1 and fe2 == 0x402 and fm2 == 0xd72d619b7f54d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe4795fd44d27c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb0739750eb65a8; op2val:0xc02d72d619b7f54d;
op3val:0x3fee4795fd44d27c; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0739750eb65a8 and fs2 == 1 and fe2 == 0x402 and fm2 == 0xd72d619b7f54d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe4795fd44d27c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb0739750eb65a8; op2val:0xc02d72d619b7f54d;
op3val:0x3fee4795fd44d27c; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0739750eb65a8 and fs2 == 1 and fe2 == 0x402 and fm2 == 0xd72d619b7f54d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe4795fd44d27c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb0739750eb65a8; op2val:0xc02d72d619b7f54d;
op3val:0x3fee4795fd44d27c; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0739750eb65a8 and fs2 == 1 and fe2 == 0x402 and fm2 == 0xd72d619b7f54d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe4795fd44d27c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb0739750eb65a8; op2val:0xc02d72d619b7f54d;
op3val:0x3fee4795fd44d27c; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2021be5c6b648 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa5d4b562cfe4a and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdac6e626b3a40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2021be5c6b648; op2val:0xbfea5d4b562cfe4a;
op3val:0x3fadac6e626b3a40; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2021be5c6b648 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa5d4b562cfe4a and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdac6e626b3a40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2021be5c6b648; op2val:0xbfea5d4b562cfe4a;
op3val:0x3fadac6e626b3a40; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2021be5c6b648 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa5d4b562cfe4a and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdac6e626b3a40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2021be5c6b648; op2val:0xbfea5d4b562cfe4a;
op3val:0x3fadac6e626b3a40; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2021be5c6b648 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa5d4b562cfe4a and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdac6e626b3a40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2021be5c6b648; op2val:0xbfea5d4b562cfe4a;
op3val:0x3fadac6e626b3a40; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2021be5c6b648 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa5d4b562cfe4a and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdac6e626b3a40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2021be5c6b648; op2val:0xbfea5d4b562cfe4a;
op3val:0x3fadac6e626b3a40; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x425849ad16b18 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x46b0967398181 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9b5ac7f65a3ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb425849ad16b18; op2val:0xc0146b0967398181;
op3val:0x3fd9b5ac7f65a3ce; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x425849ad16b18 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x46b0967398181 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9b5ac7f65a3ce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb425849ad16b18; op2val:0xc0146b0967398181;
op3val:0x3fd9b5ac7f65a3ce; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x425849ad16b18 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x46b0967398181 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9b5ac7f65a3ce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb425849ad16b18; op2val:0xc0146b0967398181;
op3val:0x3fd9b5ac7f65a3ce; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x425849ad16b18 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x46b0967398181 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9b5ac7f65a3ce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb425849ad16b18; op2val:0xc0146b0967398181;
op3val:0x3fd9b5ac7f65a3ce; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x425849ad16b18 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x46b0967398181 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9b5ac7f65a3ce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb425849ad16b18; op2val:0xc0146b0967398181;
op3val:0x3fd9b5ac7f65a3ce; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6ddf6760cb138 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x332104ade32d7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6f219756946f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6ddf6760cb138; op2val:0xc02332104ade32d7;
op3val:0x3feb6f219756946f; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6ddf6760cb138 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x332104ade32d7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6f219756946f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6ddf6760cb138; op2val:0xc02332104ade32d7;
op3val:0x3feb6f219756946f; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6ddf6760cb138 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x332104ade32d7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6f219756946f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6ddf6760cb138; op2val:0xc02332104ade32d7;
op3val:0x3feb6f219756946f; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6ddf6760cb138 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x332104ade32d7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6f219756946f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6ddf6760cb138; op2val:0xc02332104ade32d7;
op3val:0x3feb6f219756946f; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6ddf6760cb138 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x332104ade32d7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6f219756946f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6ddf6760cb138; op2val:0xc02332104ade32d7;
op3val:0x3feb6f219756946f; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x95e95dafb12f0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x1e5a48cfb762f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc609de283489b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb95e95dafb12f0; op2val:0xc021e5a48cfb762f;
op3val:0x3fec609de283489b; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x95e95dafb12f0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x1e5a48cfb762f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc609de283489b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb95e95dafb12f0; op2val:0xc021e5a48cfb762f;
op3val:0x3fec609de283489b; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x95e95dafb12f0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x1e5a48cfb762f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc609de283489b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb95e95dafb12f0; op2val:0xc021e5a48cfb762f;
op3val:0x3fec609de283489b; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x95e95dafb12f0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x1e5a48cfb762f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc609de283489b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb95e95dafb12f0; op2val:0xc021e5a48cfb762f;
op3val:0x3fec609de283489b; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x95e95dafb12f0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x1e5a48cfb762f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc609de283489b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb95e95dafb12f0; op2val:0xc021e5a48cfb762f;
op3val:0x3fec609de283489b; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e8c5264c3ce8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x41c535d2d80db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0486a63a1d8bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9e8c5264c3ce8; op2val:0xc0141c535d2d80db;
op3val:0x3fe0486a63a1d8bd; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e8c5264c3ce8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x41c535d2d80db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0486a63a1d8bd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9e8c5264c3ce8; op2val:0xc0141c535d2d80db;
op3val:0x3fe0486a63a1d8bd; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e8c5264c3ce8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x41c535d2d80db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0486a63a1d8bd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9e8c5264c3ce8; op2val:0xc0141c535d2d80db;
op3val:0x3fe0486a63a1d8bd; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e8c5264c3ce8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x41c535d2d80db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0486a63a1d8bd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9e8c5264c3ce8; op2val:0xc0141c535d2d80db;
op3val:0x3fe0486a63a1d8bd; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e8c5264c3ce8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x41c535d2d80db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0486a63a1d8bd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9e8c5264c3ce8; op2val:0xc0141c535d2d80db;
op3val:0x3fe0486a63a1d8bd; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa99d8d6d9d578 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xaa1813d0aa9b3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x62341a87a3a08 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba99d8d6d9d578; op2val:0xc00aa1813d0aa9b3;
op3val:0x3fd62341a87a3a08; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa99d8d6d9d578 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xaa1813d0aa9b3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x62341a87a3a08 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba99d8d6d9d578; op2val:0xc00aa1813d0aa9b3;
op3val:0x3fd62341a87a3a08; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa99d8d6d9d578 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xaa1813d0aa9b3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x62341a87a3a08 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba99d8d6d9d578; op2val:0xc00aa1813d0aa9b3;
op3val:0x3fd62341a87a3a08; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa99d8d6d9d578 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xaa1813d0aa9b3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x62341a87a3a08 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba99d8d6d9d578; op2val:0xc00aa1813d0aa9b3;
op3val:0x3fd62341a87a3a08; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa99d8d6d9d578 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xaa1813d0aa9b3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x62341a87a3a08 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba99d8d6d9d578; op2val:0xc00aa1813d0aa9b3;
op3val:0x3fd62341a87a3a08; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb33bed3bca218 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa657eed6e43ab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6705243e9e980 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb33bed3bca218; op2val:0xc01a657eed6e43ab;
op3val:0x3fe6705243e9e980; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb33bed3bca218 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa657eed6e43ab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6705243e9e980 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb33bed3bca218; op2val:0xc01a657eed6e43ab;
op3val:0x3fe6705243e9e980; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb33bed3bca218 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa657eed6e43ab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6705243e9e980 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb33bed3bca218; op2val:0xc01a657eed6e43ab;
op3val:0x3fe6705243e9e980; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb33bed3bca218 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa657eed6e43ab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6705243e9e980 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb33bed3bca218; op2val:0xc01a657eed6e43ab;
op3val:0x3fe6705243e9e980; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb33bed3bca218 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa657eed6e43ab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6705243e9e980 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb33bed3bca218; op2val:0xc01a657eed6e43ab;
op3val:0x3fe6705243e9e980; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb45bf2ad3b180 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x2c1780a1cad44 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xff83cfe78fb50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb45bf2ad3b180; op2val:0xc022c1780a1cad44;
op3val:0x3feff83cfe78fb50; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb45bf2ad3b180 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x2c1780a1cad44 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xff83cfe78fb50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb45bf2ad3b180; op2val:0xc022c1780a1cad44;
op3val:0x3feff83cfe78fb50; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb45bf2ad3b180 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x2c1780a1cad44 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xff83cfe78fb50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb45bf2ad3b180; op2val:0xc022c1780a1cad44;
op3val:0x3feff83cfe78fb50; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb45bf2ad3b180 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x2c1780a1cad44 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xff83cfe78fb50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb45bf2ad3b180; op2val:0xc022c1780a1cad44;
op3val:0x3feff83cfe78fb50; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb45bf2ad3b180 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x2c1780a1cad44 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xff83cfe78fb50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb45bf2ad3b180; op2val:0xc022c1780a1cad44;
op3val:0x3feff83cfe78fb50; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc599fa20321b0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x2bf1897794fc4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09bb6855ae1f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbc599fa20321b0; op2val:0xc012bf1897794fc4;
op3val:0x3fe09bb6855ae1f9; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc599fa20321b0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x2bf1897794fc4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09bb6855ae1f9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbc599fa20321b0; op2val:0xc012bf1897794fc4;
op3val:0x3fe09bb6855ae1f9; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc599fa20321b0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x2bf1897794fc4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09bb6855ae1f9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbc599fa20321b0; op2val:0xc012bf1897794fc4;
op3val:0x3fe09bb6855ae1f9; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc599fa20321b0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x2bf1897794fc4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09bb6855ae1f9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbc599fa20321b0; op2val:0xc012bf1897794fc4;
op3val:0x3fe09bb6855ae1f9; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc599fa20321b0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x2bf1897794fc4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09bb6855ae1f9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbc599fa20321b0; op2val:0xc012bf1897794fc4;
op3val:0x3fe09bb6855ae1f9; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xcafed2a00a670 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x03861b49e4d1d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd1504167876fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbcafed2a00a670; op2val:0xc0103861b49e4d1d;
op3val:0x3fdd1504167876fc; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xcafed2a00a670 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x03861b49e4d1d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd1504167876fc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbcafed2a00a670; op2val:0xc0103861b49e4d1d;
op3val:0x3fdd1504167876fc; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xcafed2a00a670 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x03861b49e4d1d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd1504167876fc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbcafed2a00a670; op2val:0xc0103861b49e4d1d;
op3val:0x3fdd1504167876fc; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xcafed2a00a670 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x03861b49e4d1d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd1504167876fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbcafed2a00a670; op2val:0xc0103861b49e4d1d;
op3val:0x3fdd1504167876fc; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xcafed2a00a670 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x03861b49e4d1d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd1504167876fc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbcafed2a00a670; op2val:0xc0103861b49e4d1d;
op3val:0x3fdd1504167876fc; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xea1da30f88b70 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc58063f45f965 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb21e1fdcaaffb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbea1da30f88b70; op2val:0xc01c58063f45f965;
op3val:0x3feb21e1fdcaaffb; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xea1da30f88b70 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc58063f45f965 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb21e1fdcaaffb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbea1da30f88b70; op2val:0xc01c58063f45f965;
op3val:0x3feb21e1fdcaaffb; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xea1da30f88b70 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc58063f45f965 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb21e1fdcaaffb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbea1da30f88b70; op2val:0xc01c58063f45f965;
op3val:0x3feb21e1fdcaaffb; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xea1da30f88b70 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc58063f45f965 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb21e1fdcaaffb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbea1da30f88b70; op2val:0xc01c58063f45f965;
op3val:0x3feb21e1fdcaaffb; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xea1da30f88b70 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc58063f45f965 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb21e1fdcaaffb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbea1da30f88b70; op2val:0xc01c58063f45f965;
op3val:0x3feb21e1fdcaaffb; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf1d6f2c0a7cd0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc7d411808eef3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb38b8bf5cab7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf1d6f2c0a7cd0; op2val:0xc01c7d411808eef3;
op3val:0x3febb38b8bf5cab7; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf1d6f2c0a7cd0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc7d411808eef3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb38b8bf5cab7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf1d6f2c0a7cd0; op2val:0xc01c7d411808eef3;
op3val:0x3febb38b8bf5cab7; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf1d6f2c0a7cd0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc7d411808eef3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb38b8bf5cab7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf1d6f2c0a7cd0; op2val:0xc01c7d411808eef3;
op3val:0x3febb38b8bf5cab7; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf1d6f2c0a7cd0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc7d411808eef3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb38b8bf5cab7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf1d6f2c0a7cd0; op2val:0xc01c7d411808eef3;
op3val:0x3febb38b8bf5cab7; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf1d6f2c0a7cd0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc7d411808eef3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb38b8bf5cab7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf1d6f2c0a7cd0; op2val:0xc01c7d411808eef3;
op3val:0x3febb38b8bf5cab7; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf81bc313216f8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0e2a1dd1ebd60 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a001b825948b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf81bc313216f8; op2val:0xc010e2a1dd1ebd60;
op3val:0x3fe0a001b825948b; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf81bc313216f8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0e2a1dd1ebd60 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a001b825948b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf81bc313216f8; op2val:0xc010e2a1dd1ebd60;
op3val:0x3fe0a001b825948b; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf81bc313216f8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0e2a1dd1ebd60 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a001b825948b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf81bc313216f8; op2val:0xc010e2a1dd1ebd60;
op3val:0x3fe0a001b825948b; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf81bc313216f8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0e2a1dd1ebd60 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a001b825948b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf81bc313216f8; op2val:0xc010e2a1dd1ebd60;
op3val:0x3fe0a001b825948b; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf81bc313216f8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0e2a1dd1ebd60 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a001b825948b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf81bc313216f8; op2val:0xc010e2a1dd1ebd60;
op3val:0x3fe0a001b825948b; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0a6bf8220e288 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x32a8ac4f1ee99 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3f2498c66d79e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0a6bf8220e288; op2val:0xc0032a8ac4f1ee99;
op3val:0x3fd3f2498c66d79e; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0a6bf8220e288 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x32a8ac4f1ee99 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3f2498c66d79e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0a6bf8220e288; op2val:0xc0032a8ac4f1ee99;
op3val:0x3fd3f2498c66d79e; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0a6bf8220e288 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x32a8ac4f1ee99 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3f2498c66d79e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0a6bf8220e288; op2val:0xc0032a8ac4f1ee99;
op3val:0x3fd3f2498c66d79e; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0a6bf8220e288 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x32a8ac4f1ee99 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3f2498c66d79e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0a6bf8220e288; op2val:0xc0032a8ac4f1ee99;
op3val:0x3fd3f2498c66d79e; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0a6bf8220e288 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x32a8ac4f1ee99 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3f2498c66d79e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0a6bf8220e288; op2val:0xc0032a8ac4f1ee99;
op3val:0x3fd3f2498c66d79e; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x25576d45156d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5f053f8c2f7df and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9238e25800d90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc25576d45156d0; op2val:0xc015f053f8c2f7df;
op3val:0x3fe9238e25800d90; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x25576d45156d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5f053f8c2f7df and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9238e25800d90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc25576d45156d0; op2val:0xc015f053f8c2f7df;
op3val:0x3fe9238e25800d90; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x25576d45156d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5f053f8c2f7df and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9238e25800d90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc25576d45156d0; op2val:0xc015f053f8c2f7df;
op3val:0x3fe9238e25800d90; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x25576d45156d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5f053f8c2f7df and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9238e25800d90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc25576d45156d0; op2val:0xc015f053f8c2f7df;
op3val:0x3fe9238e25800d90; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x25576d45156d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5f053f8c2f7df and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9238e25800d90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc25576d45156d0; op2val:0xc015f053f8c2f7df;
op3val:0x3fe9238e25800d90; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2f4e5347c7ad0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5b3dea9f4cc19 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b68868678780 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2f4e5347c7ad0; op2val:0xc015b3dea9f4cc19;
op3val:0x3fe9b68868678780; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2f4e5347c7ad0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5b3dea9f4cc19 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b68868678780 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2f4e5347c7ad0; op2val:0xc015b3dea9f4cc19;
op3val:0x3fe9b68868678780; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2f4e5347c7ad0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5b3dea9f4cc19 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b68868678780 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2f4e5347c7ad0; op2val:0xc015b3dea9f4cc19;
op3val:0x3fe9b68868678780; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2f4e5347c7ad0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5b3dea9f4cc19 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b68868678780 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2f4e5347c7ad0; op2val:0xc015b3dea9f4cc19;
op3val:0x3fe9b68868678780; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2f4e5347c7ad0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5b3dea9f4cc19 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b68868678780 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2f4e5347c7ad0; op2val:0xc015b3dea9f4cc19;
op3val:0x3fe9b68868678780; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2ff8d9a345a70 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa01cf8f384df5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xee16c87b58dd4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2ff8d9a345a70; op2val:0xc00a01cf8f384df5;
op3val:0x3fdee16c87b58dd4; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2ff8d9a345a70 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa01cf8f384df5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xee16c87b58dd4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2ff8d9a345a70; op2val:0xc00a01cf8f384df5;
op3val:0x3fdee16c87b58dd4; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2ff8d9a345a70 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa01cf8f384df5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xee16c87b58dd4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2ff8d9a345a70; op2val:0xc00a01cf8f384df5;
op3val:0x3fdee16c87b58dd4; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2ff8d9a345a70 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa01cf8f384df5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xee16c87b58dd4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2ff8d9a345a70; op2val:0xc00a01cf8f384df5;
op3val:0x3fdee16c87b58dd4; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2ff8d9a345a70 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa01cf8f384df5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xee16c87b58dd4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2ff8d9a345a70; op2val:0xc00a01cf8f384df5;
op3val:0x3fdee16c87b58dd4; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4374a9e0ad3ec and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3c62c6739b7e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8fc0cf18ab1f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4374a9e0ad3ec; op2val:0xc013c62c6739b7e9;
op3val:0x3fe8fc0cf18ab1f7; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4374a9e0ad3ec and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3c62c6739b7e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8fc0cf18ab1f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4374a9e0ad3ec; op2val:0xc013c62c6739b7e9;
op3val:0x3fe8fc0cf18ab1f7; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4374a9e0ad3ec and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3c62c6739b7e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8fc0cf18ab1f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4374a9e0ad3ec; op2val:0xc013c62c6739b7e9;
op3val:0x3fe8fc0cf18ab1f7; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4374a9e0ad3ec and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3c62c6739b7e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8fc0cf18ab1f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4374a9e0ad3ec; op2val:0xc013c62c6739b7e9;
op3val:0x3fe8fc0cf18ab1f7; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4374a9e0ad3ec and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3c62c6739b7e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8fc0cf18ab1f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4374a9e0ad3ec; op2val:0xc013c62c6739b7e9;
op3val:0x3fe8fc0cf18ab1f7; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4ae596cafe1f8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5863f0ad32f6b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd25b081325f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4ae596cafe1f8; op2val:0xc015863f0ad32f6b;
op3val:0x3febd25b081325f8; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4ae596cafe1f8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5863f0ad32f6b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd25b081325f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4ae596cafe1f8; op2val:0xc015863f0ad32f6b;
op3val:0x3febd25b081325f8; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4ae596cafe1f8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5863f0ad32f6b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd25b081325f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4ae596cafe1f8; op2val:0xc015863f0ad32f6b;
op3val:0x3febd25b081325f8; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4ae596cafe1f8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5863f0ad32f6b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd25b081325f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4ae596cafe1f8; op2val:0xc015863f0ad32f6b;
op3val:0x3febd25b081325f8; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4ae596cafe1f8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x5863f0ad32f6b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd25b081325f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4ae596cafe1f8; op2val:0xc015863f0ad32f6b;
op3val:0x3febd25b081325f8; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x59e7f8a445a4c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0ad886e596e9c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x688f9a5a1f892 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc59e7f8a445a4c; op2val:0xc000ad886e596e9c;
op3val:0x3fd688f9a5a1f892; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x59e7f8a445a4c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0ad886e596e9c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x688f9a5a1f892 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc59e7f8a445a4c; op2val:0xc000ad886e596e9c;
op3val:0x3fd688f9a5a1f892; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x59e7f8a445a4c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0ad886e596e9c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x688f9a5a1f892 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc59e7f8a445a4c; op2val:0xc000ad886e596e9c;
op3val:0x3fd688f9a5a1f892; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x59e7f8a445a4c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0ad886e596e9c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x688f9a5a1f892 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc59e7f8a445a4c; op2val:0xc000ad886e596e9c;
op3val:0x3fd688f9a5a1f892; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x59e7f8a445a4c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0ad886e596e9c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x688f9a5a1f892 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc59e7f8a445a4c; op2val:0xc000ad886e596e9c;
op3val:0x3fd688f9a5a1f892; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6380270014d38 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1e1e5dfdb18b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8d53571c83a53 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6380270014d38; op2val:0xc011e1e5dfdb18b3;
op3val:0x3fe8d53571c83a53; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6380270014d38 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1e1e5dfdb18b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8d53571c83a53 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6380270014d38; op2val:0xc011e1e5dfdb18b3;
op3val:0x3fe8d53571c83a53; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6380270014d38 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1e1e5dfdb18b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8d53571c83a53 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6380270014d38; op2val:0xc011e1e5dfdb18b3;
op3val:0x3fe8d53571c83a53; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6380270014d38 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1e1e5dfdb18b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8d53571c83a53 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6380270014d38; op2val:0xc011e1e5dfdb18b3;
op3val:0x3fe8d53571c83a53; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6380270014d38 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1e1e5dfdb18b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8d53571c83a53 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6380270014d38; op2val:0xc011e1e5dfdb18b3;
op3val:0x3fe8d53571c83a53; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6f6b44c9db140 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x32e0af0d738b9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb870b1531acb9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6f6b44c9db140; op2val:0xc0132e0af0d738b9;
op3val:0x3feb870b1531acb9; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6f6b44c9db140 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x32e0af0d738b9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb870b1531acb9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6f6b44c9db140; op2val:0xc0132e0af0d738b9;
op3val:0x3feb870b1531acb9; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6f6b44c9db140 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x32e0af0d738b9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb870b1531acb9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6f6b44c9db140; op2val:0xc0132e0af0d738b9;
op3val:0x3feb870b1531acb9; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6f6b44c9db140 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x32e0af0d738b9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb870b1531acb9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6f6b44c9db140; op2val:0xc0132e0af0d738b9;
op3val:0x3feb870b1531acb9; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6f6b44c9db140 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x32e0af0d738b9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb870b1531acb9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6f6b44c9db140; op2val:0xc0132e0af0d738b9;
op3val:0x3feb870b1531acb9; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x71caa898ef5dc and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe7198d2a3a627 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5fceb7b7825e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc71caa898ef5dc; op2val:0xc00e7198d2a3a627;
op3val:0x3fe5fceb7b7825e6; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x71caa898ef5dc and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe7198d2a3a627 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5fceb7b7825e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc71caa898ef5dc; op2val:0xc00e7198d2a3a627;
op3val:0x3fe5fceb7b7825e6; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x71caa898ef5dc and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe7198d2a3a627 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5fceb7b7825e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc71caa898ef5dc; op2val:0xc00e7198d2a3a627;
op3val:0x3fe5fceb7b7825e6; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x71caa898ef5dc and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe7198d2a3a627 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5fceb7b7825e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc71caa898ef5dc; op2val:0xc00e7198d2a3a627;
op3val:0x3fe5fceb7b7825e6; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x71caa898ef5dc and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe7198d2a3a627 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5fceb7b7825e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc71caa898ef5dc; op2val:0xc00e7198d2a3a627;
op3val:0x3fe5fceb7b7825e6; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x73aabcdeef630 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x99b8050bf4ab1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x296b78e5cef76 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc73aabcdeef630; op2val:0xc0099b8050bf4ab1;
op3val:0x3fe296b78e5cef76; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x73aabcdeef630 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x99b8050bf4ab1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x296b78e5cef76 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc73aabcdeef630; op2val:0xc0099b8050bf4ab1;
op3val:0x3fe296b78e5cef76; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x73aabcdeef630 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x99b8050bf4ab1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x296b78e5cef76 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc73aabcdeef630; op2val:0xc0099b8050bf4ab1;
op3val:0x3fe296b78e5cef76; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x73aabcdeef630 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x99b8050bf4ab1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x296b78e5cef76 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc73aabcdeef630; op2val:0xc0099b8050bf4ab1;
op3val:0x3fe296b78e5cef76; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x73aabcdeef630 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x99b8050bf4ab1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x296b78e5cef76 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc73aabcdeef630; op2val:0xc0099b8050bf4ab1;
op3val:0x3fe296b78e5cef76; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x73accbb1a5c60 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6e3b927089114 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09dbc4536ddba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc73accbb1a5c60; op2val:0xc006e3b927089114;
op3val:0x3fe09dbc4536ddba; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x73accbb1a5c60 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6e3b927089114 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09dbc4536ddba and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc73accbb1a5c60; op2val:0xc006e3b927089114;
op3val:0x3fe09dbc4536ddba; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x73accbb1a5c60 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6e3b927089114 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09dbc4536ddba and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc73accbb1a5c60; op2val:0xc006e3b927089114;
op3val:0x3fe09dbc4536ddba; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x73accbb1a5c60 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6e3b927089114 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09dbc4536ddba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc73accbb1a5c60; op2val:0xc006e3b927089114;
op3val:0x3fe09dbc4536ddba; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x73accbb1a5c60 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6e3b927089114 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09dbc4536ddba and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc73accbb1a5c60; op2val:0xc006e3b927089114;
op3val:0x3fe09dbc4536ddba; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7eff2d6fa2ee4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe9a9e96b67389 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6e49d0bb162dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7eff2d6fa2ee4; op2val:0xbffe9a9e96b67389;
op3val:0x3fd6e49d0bb162dc; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7eff2d6fa2ee4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe9a9e96b67389 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6e49d0bb162dc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7eff2d6fa2ee4; op2val:0xbffe9a9e96b67389;
op3val:0x3fd6e49d0bb162dc; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7eff2d6fa2ee4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe9a9e96b67389 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6e49d0bb162dc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7eff2d6fa2ee4; op2val:0xbffe9a9e96b67389;
op3val:0x3fd6e49d0bb162dc; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7eff2d6fa2ee4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe9a9e96b67389 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6e49d0bb162dc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7eff2d6fa2ee4; op2val:0xbffe9a9e96b67389;
op3val:0x3fd6e49d0bb162dc; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7eff2d6fa2ee4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe9a9e96b67389 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6e49d0bb162dc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7eff2d6fa2ee4; op2val:0xbffe9a9e96b67389;
op3val:0x3fd6e49d0bb162dc; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8162ebf391f5c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3cd5eb529665d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdcf824d11c853 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8162ebf391f5c; op2val:0xc013cd5eb529665d;
op3val:0x3fedcf824d11c853; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8162ebf391f5c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3cd5eb529665d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdcf824d11c853 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8162ebf391f5c; op2val:0xc013cd5eb529665d;
op3val:0x3fedcf824d11c853; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8162ebf391f5c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3cd5eb529665d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdcf824d11c853 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8162ebf391f5c; op2val:0xc013cd5eb529665d;
op3val:0x3fedcf824d11c853; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8162ebf391f5c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3cd5eb529665d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdcf824d11c853 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8162ebf391f5c; op2val:0xc013cd5eb529665d;
op3val:0x3fedcf824d11c853; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8162ebf391f5c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x3cd5eb529665d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdcf824d11c853 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8162ebf391f5c; op2val:0xc013cd5eb529665d;
op3val:0x3fedcf824d11c853; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9060a25e60734 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x72fb015795e64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x221a1dc27aec8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9060a25e60734; op2val:0xc0072fb015795e64;
op3val:0x3fe221a1dc27aec8; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9060a25e60734 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x72fb015795e64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x221a1dc27aec8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9060a25e60734; op2val:0xc0072fb015795e64;
op3val:0x3fe221a1dc27aec8; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9060a25e60734 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x72fb015795e64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x221a1dc27aec8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9060a25e60734; op2val:0xc0072fb015795e64;
op3val:0x3fe221a1dc27aec8; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9060a25e60734 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x72fb015795e64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x221a1dc27aec8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9060a25e60734; op2val:0xc0072fb015795e64;
op3val:0x3fe221a1dc27aec8; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9060a25e60734 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x72fb015795e64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x221a1dc27aec8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9060a25e60734; op2val:0xc0072fb015795e64;
op3val:0x3fe221a1dc27aec8; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f479ea1f8cf8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x62451fe601661 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1f5895b442450 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9f479ea1f8cf8; op2val:0xbfe62451fe601661;
op3val:0x3fc1f5895b442450; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f479ea1f8cf8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x62451fe601661 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1f5895b442450 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9f479ea1f8cf8; op2val:0xbfe62451fe601661;
op3val:0x3fc1f5895b442450; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f479ea1f8cf8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x62451fe601661 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1f5895b442450 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9f479ea1f8cf8; op2val:0xbfe62451fe601661;
op3val:0x3fc1f5895b442450; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f479ea1f8cf8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x62451fe601661 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1f5895b442450 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9f479ea1f8cf8; op2val:0xbfe62451fe601661;
op3val:0x3fc1f5895b442450; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f479ea1f8cf8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x62451fe601661 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1f5895b442450 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9f479ea1f8cf8; op2val:0xbfe62451fe601661;
op3val:0x3fc1f5895b442450; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f7165ed95e1c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0fb7e5eda3712 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb8f37a1873e5c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9f7165ed95e1c; op2val:0xc010fb7e5eda3712;
op3val:0x3feb8f37a1873e5c; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f7165ed95e1c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0fb7e5eda3712 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb8f37a1873e5c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9f7165ed95e1c; op2val:0xc010fb7e5eda3712;
op3val:0x3feb8f37a1873e5c; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f7165ed95e1c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0fb7e5eda3712 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb8f37a1873e5c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9f7165ed95e1c; op2val:0xc010fb7e5eda3712;
op3val:0x3feb8f37a1873e5c; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f7165ed95e1c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0fb7e5eda3712 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb8f37a1873e5c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9f7165ed95e1c; op2val:0xc010fb7e5eda3712;
op3val:0x3feb8f37a1873e5c; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f7165ed95e1c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0fb7e5eda3712 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb8f37a1873e5c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9f7165ed95e1c; op2val:0xc010fb7e5eda3712;
op3val:0x3feb8f37a1873e5c; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3718e4f3ee04 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1fbd528cfeace and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xd77280a24af40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca3718e4f3ee04; op2val:0xbfd1fbd528cfeace;
op3val:0x3fad77280a24af40; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3718e4f3ee04 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1fbd528cfeace and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xd77280a24af40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca3718e4f3ee04; op2val:0xbfd1fbd528cfeace;
op3val:0x3fad77280a24af40; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3718e4f3ee04 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1fbd528cfeace and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xd77280a24af40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca3718e4f3ee04; op2val:0xbfd1fbd528cfeace;
op3val:0x3fad77280a24af40; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3718e4f3ee04 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1fbd528cfeace and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xd77280a24af40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca3718e4f3ee04; op2val:0xbfd1fbd528cfeace;
op3val:0x3fad77280a24af40; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3718e4f3ee04 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1fbd528cfeace and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xd77280a24af40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca3718e4f3ee04; op2val:0xbfd1fbd528cfeace;
op3val:0x3fad77280a24af40; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaa7eb5efe4a24 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9d887361f7ffa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5878df8767198 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcaa7eb5efe4a24; op2val:0xbff9d887361f7ffa;
op3val:0x3fd5878df8767198; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaa7eb5efe4a24 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9d887361f7ffa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5878df8767198 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcaa7eb5efe4a24; op2val:0xbff9d887361f7ffa;
op3val:0x3fd5878df8767198; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaa7eb5efe4a24 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9d887361f7ffa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5878df8767198 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcaa7eb5efe4a24; op2val:0xbff9d887361f7ffa;
op3val:0x3fd5878df8767198; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaa7eb5efe4a24 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9d887361f7ffa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5878df8767198 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcaa7eb5efe4a24; op2val:0xbff9d887361f7ffa;
op3val:0x3fd5878df8767198; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaa7eb5efe4a24 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9d887361f7ffa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5878df8767198 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcaa7eb5efe4a24; op2val:0xbff9d887361f7ffa;
op3val:0x3fd5878df8767198; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe6cd673afaf4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x377c51493abd9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0f97817f46e50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbe6cd673afaf4; op2val:0xbfe377c51493abd9;
op3val:0x3fc0f97817f46e50; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe6cd673afaf4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x377c51493abd9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0f97817f46e50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbe6cd673afaf4; op2val:0xbfe377c51493abd9;
op3val:0x3fc0f97817f46e50; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe6cd673afaf4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x377c51493abd9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0f97817f46e50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbe6cd673afaf4; op2val:0xbfe377c51493abd9;
op3val:0x3fc0f97817f46e50; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe6cd673afaf4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x377c51493abd9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0f97817f46e50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbe6cd673afaf4; op2val:0xbfe377c51493abd9;
op3val:0x3fc0f97817f46e50; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe6cd673afaf4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x377c51493abd9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0f97817f46e50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbe6cd673afaf4; op2val:0xbfe377c51493abd9;
op3val:0x3fc0f97817f46e50; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbea76af696b44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbaba0b6d3ec94 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8238d420a1e4c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbea76af696b44; op2val:0xc00baba0b6d3ec94;
op3val:0x3fe8238d420a1e4c; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbea76af696b44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbaba0b6d3ec94 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8238d420a1e4c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbea76af696b44; op2val:0xc00baba0b6d3ec94;
op3val:0x3fe8238d420a1e4c; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbea76af696b44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbaba0b6d3ec94 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8238d420a1e4c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbea76af696b44; op2val:0xc00baba0b6d3ec94;
op3val:0x3fe8238d420a1e4c; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbea76af696b44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbaba0b6d3ec94 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8238d420a1e4c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbea76af696b44; op2val:0xc00baba0b6d3ec94;
op3val:0x3fe8238d420a1e4c; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbea76af696b44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbaba0b6d3ec94 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8238d420a1e4c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbea76af696b44; op2val:0xc00baba0b6d3ec94;
op3val:0x3fe8238d420a1e4c; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbf10c4dd12410 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9638cee872761 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x62b3e69b8c678 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbf10c4dd12410; op2val:0xbfe9638cee872761;
op3val:0x3fc62b3e69b8c678; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbf10c4dd12410 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9638cee872761 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x62b3e69b8c678 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbf10c4dd12410; op2val:0xbfe9638cee872761;
op3val:0x3fc62b3e69b8c678; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbf10c4dd12410 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9638cee872761 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x62b3e69b8c678 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbf10c4dd12410; op2val:0xbfe9638cee872761;
op3val:0x3fc62b3e69b8c678; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbf10c4dd12410 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9638cee872761 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x62b3e69b8c678 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbf10c4dd12410; op2val:0xbfe9638cee872761;
op3val:0x3fc62b3e69b8c678; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbf10c4dd12410 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9638cee872761 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x62b3e69b8c678 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbf10c4dd12410; op2val:0xbfe9638cee872761;
op3val:0x3fc62b3e69b8c678; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc1cc851053924 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe891a6c0c1b77 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad36e3bde4cc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc1cc851053924; op2val:0xbffe891a6c0c1b77;
op3val:0x3fdad36e3bde4cc0; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc1cc851053924 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe891a6c0c1b77 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad36e3bde4cc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc1cc851053924; op2val:0xbffe891a6c0c1b77;
op3val:0x3fdad36e3bde4cc0; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc1cc851053924 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe891a6c0c1b77 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad36e3bde4cc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc1cc851053924; op2val:0xbffe891a6c0c1b77;
op3val:0x3fdad36e3bde4cc0; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc1cc851053924 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe891a6c0c1b77 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad36e3bde4cc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc1cc851053924; op2val:0xbffe891a6c0c1b77;
op3val:0x3fdad36e3bde4cc0; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc1cc851053924 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe891a6c0c1b77 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad36e3bde4cc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc1cc851053924; op2val:0xbffe891a6c0c1b77;
op3val:0x3fdad36e3bde4cc0; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcd023aa4f0ec8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5b52df5904a62 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x38bba134cd508 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fccd023aa4f0ec8; op2val:0xbff5b52df5904a62;
op3val:0x3fd38bba134cd508; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcd023aa4f0ec8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5b52df5904a62 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x38bba134cd508 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fccd023aa4f0ec8; op2val:0xbff5b52df5904a62;
op3val:0x3fd38bba134cd508; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcd023aa4f0ec8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5b52df5904a62 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x38bba134cd508 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fccd023aa4f0ec8; op2val:0xbff5b52df5904a62;
op3val:0x3fd38bba134cd508; valaddr_reg:x3; val_offset:861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 861*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcd023aa4f0ec8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5b52df5904a62 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x38bba134cd508 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fccd023aa4f0ec8; op2val:0xbff5b52df5904a62;
op3val:0x3fd38bba134cd508; valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcd023aa4f0ec8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5b52df5904a62 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x38bba134cd508 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fccd023aa4f0ec8; op2val:0xbff5b52df5904a62;
op3val:0x3fd38bba134cd508; valaddr_reg:x3; val_offset:867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 867*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd78ea304e0070 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x57aef0fe6c3ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3c892da45a982 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcd78ea304e0070; op2val:0xbff57aef0fe6c3ab;
op3val:0x3fd3c892da45a982; valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd78ea304e0070 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x57aef0fe6c3ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3c892da45a982 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcd78ea304e0070; op2val:0xbff57aef0fe6c3ab;
op3val:0x3fd3c892da45a982; valaddr_reg:x3; val_offset:873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 873*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd78ea304e0070 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x57aef0fe6c3ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3c892da45a982 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcd78ea304e0070; op2val:0xbff57aef0fe6c3ab;
op3val:0x3fd3c892da45a982; valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd78ea304e0070 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x57aef0fe6c3ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3c892da45a982 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcd78ea304e0070; op2val:0xbff57aef0fe6c3ab;
op3val:0x3fd3c892da45a982; valaddr_reg:x3; val_offset:879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 879*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd78ea304e0070 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x57aef0fe6c3ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3c892da45a982 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcd78ea304e0070; op2val:0xbff57aef0fe6c3ab;
op3val:0x3fd3c892da45a982; valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdfcb559c4dd64 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xcb2a3a0810275 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae485b4f3c9d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdfcb559c4dd64; op2val:0xc00cb2a3a0810275;
op3val:0x3feae485b4f3c9d3; valaddr_reg:x3; val_offset:885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 885*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdfcb559c4dd64 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xcb2a3a0810275 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae485b4f3c9d3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdfcb559c4dd64; op2val:0xc00cb2a3a0810275;
op3val:0x3feae485b4f3c9d3; valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdfcb559c4dd64 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xcb2a3a0810275 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae485b4f3c9d3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdfcb559c4dd64; op2val:0xc00cb2a3a0810275;
op3val:0x3feae485b4f3c9d3; valaddr_reg:x3; val_offset:891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 891*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdfcb559c4dd64 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xcb2a3a0810275 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae485b4f3c9d3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdfcb559c4dd64; op2val:0xc00cb2a3a0810275;
op3val:0x3feae485b4f3c9d3; valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdfcb559c4dd64 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xcb2a3a0810275 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae485b4f3c9d3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdfcb559c4dd64; op2val:0xc00cb2a3a0810275;
op3val:0x3feae485b4f3c9d3; valaddr_reg:x3; val_offset:897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 897*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xeab418dfbc584 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x75960759ecf87 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x660bfdedee050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fceab418dfbc584; op2val:0xc0075960759ecf87;
op3val:0x3fe660bfdedee050; valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xeab418dfbc584 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x75960759ecf87 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x660bfdedee050 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fceab418dfbc584; op2val:0xc0075960759ecf87;
op3val:0x3fe660bfdedee050; valaddr_reg:x3; val_offset:903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 903*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xeab418dfbc584 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x75960759ecf87 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x660bfdedee050 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fceab418dfbc584; op2val:0xc0075960759ecf87;
op3val:0x3fe660bfdedee050; valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xeab418dfbc584 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x75960759ecf87 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x660bfdedee050 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fceab418dfbc584; op2val:0xc0075960759ecf87;
op3val:0x3fe660bfdedee050; valaddr_reg:x3; val_offset:909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 909*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xeab418dfbc584 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x75960759ecf87 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x660bfdedee050 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fceab418dfbc584; op2val:0xc0075960759ecf87;
op3val:0x3fe660bfdedee050; valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xeaceffa6c78d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0aef8fb2f1bae and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xffc66064ac3be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fceaceffa6c78d0; op2val:0xc010aef8fb2f1bae;
op3val:0x3feffc66064ac3be; valaddr_reg:x3; val_offset:915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 915*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xeaceffa6c78d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0aef8fb2f1bae and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xffc66064ac3be and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fceaceffa6c78d0; op2val:0xc010aef8fb2f1bae;
op3val:0x3feffc66064ac3be; valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xeaceffa6c78d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0aef8fb2f1bae and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xffc66064ac3be and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fceaceffa6c78d0; op2val:0xc010aef8fb2f1bae;
op3val:0x3feffc66064ac3be; valaddr_reg:x3; val_offset:921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 921*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xeaceffa6c78d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0aef8fb2f1bae and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xffc66064ac3be and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fceaceffa6c78d0; op2val:0xc010aef8fb2f1bae;
op3val:0x3feffc66064ac3be; valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xeaceffa6c78d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0aef8fb2f1bae and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xffc66064ac3be and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fceaceffa6c78d0; op2val:0xc010aef8fb2f1bae;
op3val:0x3feffc66064ac3be; valaddr_reg:x3; val_offset:927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 927*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xec1898de532ec and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc517682d93fff and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb37a427c600b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcec1898de532ec; op2val:0xbffc517682d93fff;
op3val:0x3fdb37a427c600b4; valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xec1898de532ec and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc517682d93fff and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb37a427c600b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcec1898de532ec; op2val:0xbffc517682d93fff;
op3val:0x3fdb37a427c600b4; valaddr_reg:x3; val_offset:933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 933*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xec1898de532ec and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc517682d93fff and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb37a427c600b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcec1898de532ec; op2val:0xbffc517682d93fff;
op3val:0x3fdb37a427c600b4; valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xec1898de532ec and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc517682d93fff and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb37a427c600b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcec1898de532ec; op2val:0xbffc517682d93fff;
op3val:0x3fdb37a427c600b4; valaddr_reg:x3; val_offset:939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 939*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xec1898de532ec and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc517682d93fff and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb37a427c600b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcec1898de532ec; op2val:0xbffc517682d93fff;
op3val:0x3fdb37a427c600b4; valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfb411e3b11a54 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcad2931cd2bbc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc691df7ffd886 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfb411e3b11a54; op2val:0xbffcad2931cd2bbc;
op3val:0x3fdc691df7ffd886; valaddr_reg:x3; val_offset:945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 945*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfb411e3b11a54 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcad2931cd2bbc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc691df7ffd886 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfb411e3b11a54; op2val:0xbffcad2931cd2bbc;
op3val:0x3fdc691df7ffd886; valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfb411e3b11a54 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcad2931cd2bbc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc691df7ffd886 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfb411e3b11a54; op2val:0xbffcad2931cd2bbc;
op3val:0x3fdc691df7ffd886; valaddr_reg:x3; val_offset:951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 951*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfb411e3b11a54 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcad2931cd2bbc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc691df7ffd886 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfb411e3b11a54; op2val:0xbffcad2931cd2bbc;
op3val:0x3fdc691df7ffd886; valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfb411e3b11a54 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcad2931cd2bbc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc691df7ffd886 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfb411e3b11a54; op2val:0xbffcad2931cd2bbc;
op3val:0x3fdc691df7ffd886; valaddr_reg:x3; val_offset:957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 957*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0035bbd238b84 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3d6c764121046 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3daf1698802f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0035bbd238b84; op2val:0xbfe3d6c764121046;
op3val:0x3fc3daf1698802f0; valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0035bbd238b84 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3d6c764121046 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3daf1698802f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0035bbd238b84; op2val:0xbfe3d6c764121046;
op3val:0x3fc3daf1698802f0; valaddr_reg:x3; val_offset:963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 963*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0035bbd238b84 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3d6c764121046 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3daf1698802f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0035bbd238b84; op2val:0xbfe3d6c764121046;
op3val:0x3fc3daf1698802f0; valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0035bbd238b84 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3d6c764121046 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3daf1698802f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0035bbd238b84; op2val:0xbfe3d6c764121046;
op3val:0x3fc3daf1698802f0; valaddr_reg:x3; val_offset:969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 969*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0035bbd238b84 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3d6c764121046 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3daf1698802f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0035bbd238b84; op2val:0xbfe3d6c764121046;
op3val:0x3fc3daf1698802f0; valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x051a3717fb7ac and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9ad3e29325ef4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa30417ef0ae88 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd051a3717fb7ac; op2val:0xbff9ad3e29325ef4;
op3val:0x3fda30417ef0ae88; valaddr_reg:x3; val_offset:975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 975*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x051a3717fb7ac and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9ad3e29325ef4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa30417ef0ae88 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd051a3717fb7ac; op2val:0xbff9ad3e29325ef4;
op3val:0x3fda30417ef0ae88; valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x051a3717fb7ac and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9ad3e29325ef4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa30417ef0ae88 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd051a3717fb7ac; op2val:0xbff9ad3e29325ef4;
op3val:0x3fda30417ef0ae88; valaddr_reg:x3; val_offset:981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 981*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x051a3717fb7ac and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9ad3e29325ef4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa30417ef0ae88 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd051a3717fb7ac; op2val:0xbff9ad3e29325ef4;
op3val:0x3fda30417ef0ae88; valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x051a3717fb7ac and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9ad3e29325ef4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa30417ef0ae88 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd051a3717fb7ac; op2val:0xbff9ad3e29325ef4;
op3val:0x3fda30417ef0ae88; valaddr_reg:x3; val_offset:987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 987*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x06aef38d708ca and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb8014fa0baa71 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc37e0afef7069 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd06aef38d708ca; op2val:0xc00b8014fa0baa71;
op3val:0x3fec37e0afef7069; valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x06aef38d708ca and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb8014fa0baa71 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc37e0afef7069 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd06aef38d708ca; op2val:0xc00b8014fa0baa71;
op3val:0x3fec37e0afef7069; valaddr_reg:x3; val_offset:993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 993*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x06aef38d708ca and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb8014fa0baa71 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc37e0afef7069 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd06aef38d708ca; op2val:0xc00b8014fa0baa71;
op3val:0x3fec37e0afef7069; valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x06aef38d708ca and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb8014fa0baa71 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc37e0afef7069 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd06aef38d708ca; op2val:0xc00b8014fa0baa71;
op3val:0x3fec37e0afef7069; valaddr_reg:x3; val_offset:999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 999*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x06aef38d708ca and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb8014fa0baa71 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc37e0afef7069 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd06aef38d708ca; op2val:0xc00b8014fa0baa71;
op3val:0x3fec37e0afef7069; valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a137d68e4346 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x29c745997aa16 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x357fb9fbf3326 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a137d68e4346; op2val:0xc0029c745997aa16;
op3val:0x3fe357fb9fbf3326; valaddr_reg:x3; val_offset:1005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1005*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a137d68e4346 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x29c745997aa16 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x357fb9fbf3326 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a137d68e4346; op2val:0xc0029c745997aa16;
op3val:0x3fe357fb9fbf3326; valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a137d68e4346 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x29c745997aa16 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x357fb9fbf3326 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a137d68e4346; op2val:0xc0029c745997aa16;
op3val:0x3fe357fb9fbf3326; valaddr_reg:x3; val_offset:1011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1011*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a137d68e4346 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x29c745997aa16 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x357fb9fbf3326 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a137d68e4346; op2val:0xc0029c745997aa16;
op3val:0x3fe357fb9fbf3326; valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a137d68e4346 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x29c745997aa16 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x357fb9fbf3326 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a137d68e4346; op2val:0xc0029c745997aa16;
op3val:0x3fe357fb9fbf3326; valaddr_reg:x3; val_offset:1017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1017*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a58072c8a39c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x31ccfc0f8e772 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3e2824f09e9e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a58072c8a39c; op2val:0xbfd31ccfc0f8e772;
op3val:0x3fb3e2824f09e9e0; valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a58072c8a39c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x31ccfc0f8e772 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3e2824f09e9e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a58072c8a39c; op2val:0xbfd31ccfc0f8e772;
op3val:0x3fb3e2824f09e9e0; valaddr_reg:x3; val_offset:1023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1023*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a58072c8a39c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x31ccfc0f8e772 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3e2824f09e9e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a58072c8a39c; op2val:0xbfd31ccfc0f8e772;
op3val:0x3fb3e2824f09e9e0; valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a58072c8a39c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x31ccfc0f8e772 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3e2824f09e9e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a58072c8a39c; op2val:0xbfd31ccfc0f8e772;
op3val:0x3fb3e2824f09e9e0; valaddr_reg:x3; val_offset:1029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1029*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a58072c8a39c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x31ccfc0f8e772 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3e2824f09e9e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a58072c8a39c; op2val:0xbfd31ccfc0f8e772;
op3val:0x3fb3e2824f09e9e0; valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0c76fc87ff80c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4f884770d0b7f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5fde9e976e930 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0c76fc87ff80c; op2val:0xbfe4f884770d0b7f;
op3val:0x3fc5fde9e976e930; valaddr_reg:x3; val_offset:1035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1035*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0c76fc87ff80c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4f884770d0b7f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5fde9e976e930 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0c76fc87ff80c; op2val:0xbfe4f884770d0b7f;
op3val:0x3fc5fde9e976e930; valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0c76fc87ff80c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4f884770d0b7f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5fde9e976e930 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0c76fc87ff80c; op2val:0xbfe4f884770d0b7f;
op3val:0x3fc5fde9e976e930; valaddr_reg:x3; val_offset:1041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1041*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0c76fc87ff80c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4f884770d0b7f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5fde9e976e930 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0c76fc87ff80c; op2val:0xbfe4f884770d0b7f;
op3val:0x3fc5fde9e976e930; valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0c76fc87ff80c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4f884770d0b7f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5fde9e976e930 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0c76fc87ff80c; op2val:0xbfe4f884770d0b7f;
op3val:0x3fc5fde9e976e930; valaddr_reg:x3; val_offset:1047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1047*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d90a64e38680 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8f0b14b3b8839 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa4301e379ab37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d90a64e38680; op2val:0xc008f0b14b3b8839;
op3val:0x3fea4301e379ab37; valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d90a64e38680 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8f0b14b3b8839 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa4301e379ab37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d90a64e38680; op2val:0xc008f0b14b3b8839;
op3val:0x3fea4301e379ab37; valaddr_reg:x3; val_offset:1053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1053*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d90a64e38680 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8f0b14b3b8839 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa4301e379ab37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d90a64e38680; op2val:0xc008f0b14b3b8839;
op3val:0x3fea4301e379ab37; valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d90a64e38680 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8f0b14b3b8839 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa4301e379ab37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d90a64e38680; op2val:0xc008f0b14b3b8839;
op3val:0x3fea4301e379ab37; valaddr_reg:x3; val_offset:1059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1059*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d90a64e38680 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8f0b14b3b8839 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa4301e379ab37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d90a64e38680; op2val:0xc008f0b14b3b8839;
op3val:0x3fea4301e379ab37; valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12137180d10f0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0dcaa39adb8b4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x20d760c41754c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12137180d10f0; op2val:0xbff0dcaa39adb8b4;
op3val:0x3fd20d760c41754c; valaddr_reg:x3; val_offset:1065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1065*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12137180d10f0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0dcaa39adb8b4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x20d760c41754c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12137180d10f0; op2val:0xbff0dcaa39adb8b4;
op3val:0x3fd20d760c41754c; valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12137180d10f0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0dcaa39adb8b4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x20d760c41754c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12137180d10f0; op2val:0xbff0dcaa39adb8b4;
op3val:0x3fd20d760c41754c; valaddr_reg:x3; val_offset:1071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1071*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12137180d10f0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0dcaa39adb8b4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x20d760c41754c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12137180d10f0; op2val:0xbff0dcaa39adb8b4;
op3val:0x3fd20d760c41754c; valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12137180d10f0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0dcaa39adb8b4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x20d760c41754c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12137180d10f0; op2val:0xbff0dcaa39adb8b4;
op3val:0x3fd20d760c41754c; valaddr_reg:x3; val_offset:1077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1077*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12c68fb7cd49c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7f262da1f0259 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x9b400b7809500 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12c68fb7cd49c; op2val:0xbfc7f262da1f0259;
op3val:0x3fa9b400b7809500; valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12c68fb7cd49c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7f262da1f0259 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x9b400b7809500 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12c68fb7cd49c; op2val:0xbfc7f262da1f0259;
op3val:0x3fa9b400b7809500; valaddr_reg:x3; val_offset:1083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1083*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12c68fb7cd49c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7f262da1f0259 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x9b400b7809500 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12c68fb7cd49c; op2val:0xbfc7f262da1f0259;
op3val:0x3fa9b400b7809500; valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12c68fb7cd49c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7f262da1f0259 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x9b400b7809500 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12c68fb7cd49c; op2val:0xbfc7f262da1f0259;
op3val:0x3fa9b400b7809500; valaddr_reg:x3; val_offset:1089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1089*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12c68fb7cd49c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7f262da1f0259 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x9b400b7809500 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12c68fb7cd49c; op2val:0xbfc7f262da1f0259;
op3val:0x3fa9b400b7809500; valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x141e3b4aabc20 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x89214bf521700 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa80652d886ab5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd141e3b4aabc20; op2val:0xc0089214bf521700;
op3val:0x3fea80652d886ab5; valaddr_reg:x3; val_offset:1095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1095*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x141e3b4aabc20 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x89214bf521700 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa80652d886ab5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd141e3b4aabc20; op2val:0xc0089214bf521700;
op3val:0x3fea80652d886ab5; valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x141e3b4aabc20 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x89214bf521700 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa80652d886ab5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd141e3b4aabc20; op2val:0xc0089214bf521700;
op3val:0x3fea80652d886ab5; valaddr_reg:x3; val_offset:1101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1101*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x141e3b4aabc20 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x89214bf521700 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa80652d886ab5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd141e3b4aabc20; op2val:0xc0089214bf521700;
op3val:0x3fea80652d886ab5; valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x141e3b4aabc20 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x89214bf521700 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa80652d886ab5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd141e3b4aabc20; op2val:0xc0089214bf521700;
op3val:0x3fea80652d886ab5; valaddr_reg:x3; val_offset:1107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1107*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1532e780d1c6a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8ba9b406e5e2d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xac6d4cbdda9c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1532e780d1c6a; op2val:0xc008ba9b406e5e2d;
op3val:0x3feac6d4cbdda9c1; valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1532e780d1c6a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8ba9b406e5e2d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xac6d4cbdda9c1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1532e780d1c6a; op2val:0xc008ba9b406e5e2d;
op3val:0x3feac6d4cbdda9c1; valaddr_reg:x3; val_offset:1113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1113*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1532e780d1c6a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8ba9b406e5e2d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xac6d4cbdda9c1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1532e780d1c6a; op2val:0xc008ba9b406e5e2d;
op3val:0x3feac6d4cbdda9c1; valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1532e780d1c6a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8ba9b406e5e2d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xac6d4cbdda9c1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1532e780d1c6a; op2val:0xc008ba9b406e5e2d;
op3val:0x3feac6d4cbdda9c1; valaddr_reg:x3; val_offset:1119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1119*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1532e780d1c6a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8ba9b406e5e2d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xac6d4cbdda9c1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1532e780d1c6a; op2val:0xc008ba9b406e5e2d;
op3val:0x3feac6d4cbdda9c1; valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1681e079f572c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x19442c7aaa4ba and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31feba49448ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1681e079f572c; op2val:0xbff19442c7aaa4ba;
op3val:0x3fd31feba49448ea; valaddr_reg:x3; val_offset:1125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1125*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1681e079f572c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x19442c7aaa4ba and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31feba49448ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1681e079f572c; op2val:0xbff19442c7aaa4ba;
op3val:0x3fd31feba49448ea; valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1681e079f572c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x19442c7aaa4ba and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31feba49448ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1681e079f572c; op2val:0xbff19442c7aaa4ba;
op3val:0x3fd31feba49448ea; valaddr_reg:x3; val_offset:1131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1131*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1681e079f572c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x19442c7aaa4ba and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31feba49448ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1681e079f572c; op2val:0xbff19442c7aaa4ba;
op3val:0x3fd31feba49448ea; valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1681e079f572c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x19442c7aaa4ba and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31feba49448ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1681e079f572c; op2val:0xbff19442c7aaa4ba;
op3val:0x3fd31feba49448ea; valaddr_reg:x3; val_offset:1137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1137*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x18f22ffe6b360 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x44b7215e230f8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x645b7e7cd6268 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd18f22ffe6b360; op2val:0xbfd44b7215e230f8;
op3val:0x3fb645b7e7cd6268; valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x18f22ffe6b360 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x44b7215e230f8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x645b7e7cd6268 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd18f22ffe6b360; op2val:0xbfd44b7215e230f8;
op3val:0x3fb645b7e7cd6268; valaddr_reg:x3; val_offset:1143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1143*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x18f22ffe6b360 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x44b7215e230f8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x645b7e7cd6268 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd18f22ffe6b360; op2val:0xbfd44b7215e230f8;
op3val:0x3fb645b7e7cd6268; valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x18f22ffe6b360 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x44b7215e230f8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x645b7e7cd6268 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd18f22ffe6b360; op2val:0xbfd44b7215e230f8;
op3val:0x3fb645b7e7cd6268; valaddr_reg:x3; val_offset:1149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1149*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x18f22ffe6b360 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x44b7215e230f8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x645b7e7cd6268 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd18f22ffe6b360; op2val:0xbfd44b7215e230f8;
op3val:0x3fb645b7e7cd6268; valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2595a6fd9b864 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x340a7cc1b4225 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x614413d4464fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2595a6fd9b864; op2val:0xbff340a7cc1b4225;
op3val:0x3fd614413d4464fe; valaddr_reg:x3; val_offset:1155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1155*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2595a6fd9b864 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x340a7cc1b4225 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x614413d4464fe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2595a6fd9b864; op2val:0xbff340a7cc1b4225;
op3val:0x3fd614413d4464fe; valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2595a6fd9b864 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x340a7cc1b4225 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x614413d4464fe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2595a6fd9b864; op2val:0xbff340a7cc1b4225;
op3val:0x3fd614413d4464fe; valaddr_reg:x3; val_offset:1161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1161*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2595a6fd9b864 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x340a7cc1b4225 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x614413d4464fe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2595a6fd9b864; op2val:0xbff340a7cc1b4225;
op3val:0x3fd614413d4464fe; valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2595a6fd9b864 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x340a7cc1b4225 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x614413d4464fe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2595a6fd9b864; op2val:0xbff340a7cc1b4225;
op3val:0x3fd614413d4464fe; valaddr_reg:x3; val_offset:1167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1167*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x26753f0d75ab6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x813427380c977 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb1250c0616f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd26753f0d75ab6; op2val:0xc00813427380c977;
op3val:0x3febb1250c0616f3; valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x26753f0d75ab6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x813427380c977 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb1250c0616f3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd26753f0d75ab6; op2val:0xc00813427380c977;
op3val:0x3febb1250c0616f3; valaddr_reg:x3; val_offset:1173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1173*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x26753f0d75ab6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x813427380c977 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb1250c0616f3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd26753f0d75ab6; op2val:0xc00813427380c977;
op3val:0x3febb1250c0616f3; valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x26753f0d75ab6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x813427380c977 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb1250c0616f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd26753f0d75ab6; op2val:0xc00813427380c977;
op3val:0x3febb1250c0616f3; valaddr_reg:x3; val_offset:1179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1179*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x26753f0d75ab6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x813427380c977 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb1250c0616f3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd26753f0d75ab6; op2val:0xc00813427380c977;
op3val:0x3febb1250c0616f3; valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2ad28b05fb51e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x429fc05d8602e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x78974c2cf202a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2ad28b05fb51e; op2val:0xbff429fc05d8602e;
op3val:0x3fd78974c2cf202a; valaddr_reg:x3; val_offset:1185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1185*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2ad28b05fb51e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x429fc05d8602e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x78974c2cf202a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2ad28b05fb51e; op2val:0xbff429fc05d8602e;
op3val:0x3fd78974c2cf202a; valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2ad28b05fb51e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x429fc05d8602e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x78974c2cf202a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2ad28b05fb51e; op2val:0xbff429fc05d8602e;
op3val:0x3fd78974c2cf202a; valaddr_reg:x3; val_offset:1191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1191*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2ad28b05fb51e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x429fc05d8602e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x78974c2cf202a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2ad28b05fb51e; op2val:0xbff429fc05d8602e;
op3val:0x3fd78974c2cf202a; valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2ad28b05fb51e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x429fc05d8602e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x78974c2cf202a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2ad28b05fb51e; op2val:0xbff429fc05d8602e;
op3val:0x3fd78974c2cf202a; valaddr_reg:x3; val_offset:1197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1197*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2e6b36e974e5c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x98b511a9cccad and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe2d0c62f9ab79 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2e6b36e974e5c; op2val:0xc0098b511a9cccad;
op3val:0x3fee2d0c62f9ab79; valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2e6b36e974e5c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x98b511a9cccad and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe2d0c62f9ab79 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2e6b36e974e5c; op2val:0xc0098b511a9cccad;
op3val:0x3fee2d0c62f9ab79; valaddr_reg:x3; val_offset:1203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1203*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2e6b36e974e5c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x98b511a9cccad and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe2d0c62f9ab79 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2e6b36e974e5c; op2val:0xc0098b511a9cccad;
op3val:0x3fee2d0c62f9ab79; valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2e6b36e974e5c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x98b511a9cccad and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe2d0c62f9ab79 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2e6b36e974e5c; op2val:0xc0098b511a9cccad;
op3val:0x3fee2d0c62f9ab79; valaddr_reg:x3; val_offset:1209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1209*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2e6b36e974e5c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x98b511a9cccad and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe2d0c62f9ab79 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2e6b36e974e5c; op2val:0xc0098b511a9cccad;
op3val:0x3fee2d0c62f9ab79; valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x31ec0141b41b2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x978047bb14a90 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6f781b81a9fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd31ec0141b41b2; op2val:0xc00978047bb14a90;
op3val:0x3fee6f781b81a9fb; valaddr_reg:x3; val_offset:1215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1215*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x31ec0141b41b2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x978047bb14a90 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6f781b81a9fb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd31ec0141b41b2; op2val:0xc00978047bb14a90;
op3val:0x3fee6f781b81a9fb; valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x31ec0141b41b2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x978047bb14a90 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6f781b81a9fb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd31ec0141b41b2; op2val:0xc00978047bb14a90;
op3val:0x3fee6f781b81a9fb; valaddr_reg:x3; val_offset:1221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1221*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x31ec0141b41b2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x978047bb14a90 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6f781b81a9fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd31ec0141b41b2; op2val:0xc00978047bb14a90;
op3val:0x3fee6f781b81a9fb; valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x31ec0141b41b2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x978047bb14a90 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6f781b81a9fb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd31ec0141b41b2; op2val:0xc00978047bb14a90;
op3val:0x3fee6f781b81a9fb; valaddr_reg:x3; val_offset:1227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1227*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3295496028172 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x96fd9927db95e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe7687752f82e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3295496028172; op2val:0xc0096fd9927db95e;
op3val:0x3fee7687752f82e2; valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3295496028172 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x96fd9927db95e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe7687752f82e2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3295496028172; op2val:0xc0096fd9927db95e;
op3val:0x3fee7687752f82e2; valaddr_reg:x3; val_offset:1233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1233*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3295496028172 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x96fd9927db95e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe7687752f82e2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3295496028172; op2val:0xc0096fd9927db95e;
op3val:0x3fee7687752f82e2; valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3295496028172 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x96fd9927db95e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe7687752f82e2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3295496028172; op2val:0xc0096fd9927db95e;
op3val:0x3fee7687752f82e2; valaddr_reg:x3; val_offset:1239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1239*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3295496028172 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x96fd9927db95e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe7687752f82e2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3295496028172; op2val:0xc0096fd9927db95e;
op3val:0x3fee7687752f82e2; valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38b5251c49cd8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xdb781882ad48b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2265675abeaad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38b5251c49cd8; op2val:0xbffdb781882ad48b;
op3val:0x3fe2265675abeaad; valaddr_reg:x3; val_offset:1245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1245*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38b5251c49cd8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xdb781882ad48b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2265675abeaad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38b5251c49cd8; op2val:0xbffdb781882ad48b;
op3val:0x3fe2265675abeaad; valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38b5251c49cd8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xdb781882ad48b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2265675abeaad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38b5251c49cd8; op2val:0xbffdb781882ad48b;
op3val:0x3fe2265675abeaad; valaddr_reg:x3; val_offset:1251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1251*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38b5251c49cd8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xdb781882ad48b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2265675abeaad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38b5251c49cd8; op2val:0xbffdb781882ad48b;
op3val:0x3fe2265675abeaad; valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38b5251c49cd8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xdb781882ad48b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2265675abeaad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38b5251c49cd8; op2val:0xbffdb781882ad48b;
op3val:0x3fe2265675abeaad; valaddr_reg:x3; val_offset:1257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1257*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3bfaee75e8ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd11bba1daba7f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1f0a822a2150c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3bfaee75e8ada; op2val:0xbfed11bba1daba7f;
op3val:0x3fd1f0a822a2150c; valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3bfaee75e8ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd11bba1daba7f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1f0a822a2150c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3bfaee75e8ada; op2val:0xbfed11bba1daba7f;
op3val:0x3fd1f0a822a2150c; valaddr_reg:x3; val_offset:1263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1263*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3bfaee75e8ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd11bba1daba7f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1f0a822a2150c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3bfaee75e8ada; op2val:0xbfed11bba1daba7f;
op3val:0x3fd1f0a822a2150c; valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3bfaee75e8ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd11bba1daba7f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1f0a822a2150c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3bfaee75e8ada; op2val:0xbfed11bba1daba7f;
op3val:0x3fd1f0a822a2150c; valaddr_reg:x3; val_offset:1269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1269*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3bfaee75e8ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd11bba1daba7f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1f0a822a2150c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3bfaee75e8ada; op2val:0xbfed11bba1daba7f;
op3val:0x3fd1f0a822a2150c; valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3cc85be6ccab0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xbab301388772c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x11e7b823bdc60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3cc85be6ccab0; op2val:0xbfbbab301388772c;
op3val:0x3fa11e7b823bdc60; valaddr_reg:x3; val_offset:1275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1275*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3cc85be6ccab0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xbab301388772c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x11e7b823bdc60 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3cc85be6ccab0; op2val:0xbfbbab301388772c;
op3val:0x3fa11e7b823bdc60; valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1278*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3cc85be6ccab0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xbab301388772c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x11e7b823bdc60 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3cc85be6ccab0; op2val:0xbfbbab301388772c;
op3val:0x3fa11e7b823bdc60; valaddr_reg:x3; val_offset:1281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1281*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3cc85be6ccab0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xbab301388772c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x11e7b823bdc60 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3cc85be6ccab0; op2val:0xbfbbab301388772c;
op3val:0x3fa11e7b823bdc60; valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3cc85be6ccab0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xbab301388772c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x11e7b823bdc60 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3cc85be6ccab0; op2val:0xbfbbab301388772c;
op3val:0x3fa11e7b823bdc60; valaddr_reg:x3; val_offset:1287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1287*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3e49045868bda and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x5911463e08067 and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0xad05e10985e00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3e49045868bda; op2val:0xbf85911463e08067;
op3val:0x3f6ad05e10985e00; valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3e49045868bda and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x5911463e08067 and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0xad05e10985e00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3e49045868bda; op2val:0xbf85911463e08067;
op3val:0x3f6ad05e10985e00; valaddr_reg:x3; val_offset:1293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1293*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3e49045868bda and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x5911463e08067 and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0xad05e10985e00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3e49045868bda; op2val:0xbf85911463e08067;
op3val:0x3f6ad05e10985e00; valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3e49045868bda and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x5911463e08067 and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0xad05e10985e00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3e49045868bda; op2val:0xbf85911463e08067;
op3val:0x3f6ad05e10985e00; valaddr_reg:x3; val_offset:1299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1299*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3e49045868bda and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x5911463e08067 and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0xad05e10985e00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3e49045868bda; op2val:0xbf85911463e08067;
op3val:0x3f6ad05e10985e00; valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fc7d5fd378ae and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0b6525d2a88b1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4e03c5458c38c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fc7d5fd378ae; op2val:0xbff0b6525d2a88b1;
op3val:0x3fd4e03c5458c38c; valaddr_reg:x3; val_offset:1305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1305*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fc7d5fd378ae and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0b6525d2a88b1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4e03c5458c38c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fc7d5fd378ae; op2val:0xbff0b6525d2a88b1;
op3val:0x3fd4e03c5458c38c; valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fc7d5fd378ae and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0b6525d2a88b1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4e03c5458c38c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fc7d5fd378ae; op2val:0xbff0b6525d2a88b1;
op3val:0x3fd4e03c5458c38c; valaddr_reg:x3; val_offset:1311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1311*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fc7d5fd378ae and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0b6525d2a88b1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4e03c5458c38c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fc7d5fd378ae; op2val:0xbff0b6525d2a88b1;
op3val:0x3fd4e03c5458c38c; valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fc7d5fd378ae and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0b6525d2a88b1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4e03c5458c38c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fc7d5fd378ae; op2val:0xbff0b6525d2a88b1;
op3val:0x3fd4e03c5458c38c; valaddr_reg:x3; val_offset:1317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1317*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4fae5f65470f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x73d652382b79b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xe792bbd3065a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4fae5f65470f8; op2val:0xbfc73d652382b79b;
op3val:0x3fae792bbd3065a0; valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4fae5f65470f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x73d652382b79b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xe792bbd3065a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4fae5f65470f8; op2val:0xbfc73d652382b79b;
op3val:0x3fae792bbd3065a0; valaddr_reg:x3; val_offset:1323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1323*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4fae5f65470f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x73d652382b79b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xe792bbd3065a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4fae5f65470f8; op2val:0xbfc73d652382b79b;
op3val:0x3fae792bbd3065a0; valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4fae5f65470f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x73d652382b79b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xe792bbd3065a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4fae5f65470f8; op2val:0xbfc73d652382b79b;
op3val:0x3fae792bbd3065a0; valaddr_reg:x3; val_offset:1329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1329*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4fae5f65470f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x73d652382b79b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xe792bbd3065a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4fae5f65470f8; op2val:0xbfc73d652382b79b;
op3val:0x3fae792bbd3065a0; valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x56786d882306a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbb5ad2070374a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x288df26ca11e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd56786d882306a; op2val:0xbffbb5ad2070374a;
op3val:0x3fe288df26ca11e7; valaddr_reg:x3; val_offset:1335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1335*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x56786d882306a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbb5ad2070374a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x288df26ca11e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd56786d882306a; op2val:0xbffbb5ad2070374a;
op3val:0x3fe288df26ca11e7; valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x56786d882306a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbb5ad2070374a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x288df26ca11e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd56786d882306a; op2val:0xbffbb5ad2070374a;
op3val:0x3fe288df26ca11e7; valaddr_reg:x3; val_offset:1341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1341*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x56786d882306a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbb5ad2070374a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x288df26ca11e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd56786d882306a; op2val:0xbffbb5ad2070374a;
op3val:0x3fe288df26ca11e7; valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x56786d882306a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xbb5ad2070374a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x288df26ca11e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd56786d882306a; op2val:0xbffbb5ad2070374a;
op3val:0x3fe288df26ca11e7; valaddr_reg:x3; val_offset:1347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1347*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x580b8c7b9b736 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e48ee8df3dbf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xec4286b1bdb48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd580b8c7b9b736; op2val:0xbfe6e48ee8df3dbf;
op3val:0x3fcec4286b1bdb48; valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x580b8c7b9b736 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e48ee8df3dbf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xec4286b1bdb48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd580b8c7b9b736; op2val:0xbfe6e48ee8df3dbf;
op3val:0x3fcec4286b1bdb48; valaddr_reg:x3; val_offset:1353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1353*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x580b8c7b9b736 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e48ee8df3dbf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xec4286b1bdb48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd580b8c7b9b736; op2val:0xbfe6e48ee8df3dbf;
op3val:0x3fcec4286b1bdb48; valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x580b8c7b9b736 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e48ee8df3dbf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xec4286b1bdb48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd580b8c7b9b736; op2val:0xbfe6e48ee8df3dbf;
op3val:0x3fcec4286b1bdb48; valaddr_reg:x3; val_offset:1359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1359*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x580b8c7b9b736 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e48ee8df3dbf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xec4286b1bdb48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd580b8c7b9b736; op2val:0xbfe6e48ee8df3dbf;
op3val:0x3fcec4286b1bdb48; valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60cf781bfd0ae and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0ce2a4bba2995 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x72918becd6320 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd60cf781bfd0ae; op2val:0xbfc0ce2a4bba2995;
op3val:0x3fa72918becd6320; valaddr_reg:x3; val_offset:1365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1365*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60cf781bfd0ae and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0ce2a4bba2995 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x72918becd6320 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd60cf781bfd0ae; op2val:0xbfc0ce2a4bba2995;
op3val:0x3fa72918becd6320; valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60cf781bfd0ae and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0ce2a4bba2995 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x72918becd6320 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd60cf781bfd0ae; op2val:0xbfc0ce2a4bba2995;
op3val:0x3fa72918becd6320; valaddr_reg:x3; val_offset:1371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1371*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60cf781bfd0ae and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0ce2a4bba2995 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x72918becd6320 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd60cf781bfd0ae; op2val:0xbfc0ce2a4bba2995;
op3val:0x3fa72918becd6320; valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60cf781bfd0ae and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0ce2a4bba2995 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x72918becd6320 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd60cf781bfd0ae; op2val:0xbfc0ce2a4bba2995;
op3val:0x3fa72918becd6320; valaddr_reg:x3; val_offset:1377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1377*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66b719e922046 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x327275cce047b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad673f92f77f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd66b719e922046; op2val:0xbff327275cce047b;
op3val:0x3fdad673f92f77f4; valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66b719e922046 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x327275cce047b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad673f92f77f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd66b719e922046; op2val:0xbff327275cce047b;
op3val:0x3fdad673f92f77f4; valaddr_reg:x3; val_offset:1383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1383*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66b719e922046 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x327275cce047b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad673f92f77f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd66b719e922046; op2val:0xbff327275cce047b;
op3val:0x3fdad673f92f77f4; valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66b719e922046 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x327275cce047b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad673f92f77f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd66b719e922046; op2val:0xbff327275cce047b;
op3val:0x3fdad673f92f77f4; valaddr_reg:x3; val_offset:1389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1389*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66b719e922046 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x327275cce047b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad673f92f77f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd66b719e922046; op2val:0xbff327275cce047b;
op3val:0x3fdad673f92f77f4; valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69064a29c639c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e4641864161 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9e7649a4b7c98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69064a29c639c; op2val:0xbfe25e4641864161;
op3val:0x3fc9e7649a4b7c98; valaddr_reg:x3; val_offset:1395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1395*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69064a29c639c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e4641864161 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9e7649a4b7c98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69064a29c639c; op2val:0xbfe25e4641864161;
op3val:0x3fc9e7649a4b7c98; valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69064a29c639c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e4641864161 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9e7649a4b7c98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69064a29c639c; op2val:0xbfe25e4641864161;
op3val:0x3fc9e7649a4b7c98; valaddr_reg:x3; val_offset:1401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1401*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69064a29c639c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e4641864161 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9e7649a4b7c98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69064a29c639c; op2val:0xbfe25e4641864161;
op3val:0x3fc9e7649a4b7c98; valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69064a29c639c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e4641864161 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9e7649a4b7c98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69064a29c639c; op2val:0xbfe25e4641864161;
op3val:0x3fc9e7649a4b7c98; valaddr_reg:x3; val_offset:1407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1407*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6aa01ab216bf6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9b967f0cbb108 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x23821c51824c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6aa01ab216bf6; op2val:0xbff9b967f0cbb108;
op3val:0x3fe23821c51824c4; valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6aa01ab216bf6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9b967f0cbb108 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x23821c51824c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6aa01ab216bf6; op2val:0xbff9b967f0cbb108;
op3val:0x3fe23821c51824c4; valaddr_reg:x3; val_offset:1413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1413*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6aa01ab216bf6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9b967f0cbb108 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x23821c51824c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6aa01ab216bf6; op2val:0xbff9b967f0cbb108;
op3val:0x3fe23821c51824c4; valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6aa01ab216bf6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9b967f0cbb108 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x23821c51824c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6aa01ab216bf6; op2val:0xbff9b967f0cbb108;
op3val:0x3fe23821c51824c4; valaddr_reg:x3; val_offset:1419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1419*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6aa01ab216bf6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9b967f0cbb108 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x23821c51824c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6aa01ab216bf6; op2val:0xbff9b967f0cbb108;
op3val:0x3fe23821c51824c4; valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6ac3cf167bb80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x14129a3556d93 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8735778e2d260 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6ac3cf167bb80; op2val:0xbfc14129a3556d93;
op3val:0x3fa8735778e2d260; valaddr_reg:x3; val_offset:1425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1425*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6ac3cf167bb80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x14129a3556d93 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8735778e2d260 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6ac3cf167bb80; op2val:0xbfc14129a3556d93;
op3val:0x3fa8735778e2d260; valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6ac3cf167bb80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x14129a3556d93 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8735778e2d260 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6ac3cf167bb80; op2val:0xbfc14129a3556d93;
op3val:0x3fa8735778e2d260; valaddr_reg:x3; val_offset:1431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1431*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6ac3cf167bb80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x14129a3556d93 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8735778e2d260 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6ac3cf167bb80; op2val:0xbfc14129a3556d93;
op3val:0x3fa8735778e2d260; valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6ac3cf167bb80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x14129a3556d93 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8735778e2d260 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6ac3cf167bb80; op2val:0xbfc14129a3556d93;
op3val:0x3fa8735778e2d260; valaddr_reg:x3; val_offset:1437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1437*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6ba57611796f6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1d928b36a937e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x95a75e8f468a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6ba57611796f6; op2val:0xbff1d928b36a937e;
op3val:0x3fd95a75e8f468a4; valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6ba57611796f6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1d928b36a937e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x95a75e8f468a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6ba57611796f6; op2val:0xbff1d928b36a937e;
op3val:0x3fd95a75e8f468a4; valaddr_reg:x3; val_offset:1443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1443*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6ba57611796f6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1d928b36a937e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x95a75e8f468a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6ba57611796f6; op2val:0xbff1d928b36a937e;
op3val:0x3fd95a75e8f468a4; valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6ba57611796f6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1d928b36a937e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x95a75e8f468a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6ba57611796f6; op2val:0xbff1d928b36a937e;
op3val:0x3fd95a75e8f468a4; valaddr_reg:x3; val_offset:1449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1449*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6ba57611796f6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1d928b36a937e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x95a75e8f468a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6ba57611796f6; op2val:0xbff1d928b36a937e;
op3val:0x3fd95a75e8f468a4; valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73d9395d59810 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8a33a4d802853 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1e4bab0082856 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd73d9395d59810; op2val:0xbfe8a33a4d802853;
op3val:0x3fd1e4bab0082856; valaddr_reg:x3; val_offset:1455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1455*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73d9395d59810 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8a33a4d802853 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1e4bab0082856 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd73d9395d59810; op2val:0xbfe8a33a4d802853;
op3val:0x3fd1e4bab0082856; valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73d9395d59810 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8a33a4d802853 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1e4bab0082856 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd73d9395d59810; op2val:0xbfe8a33a4d802853;
op3val:0x3fd1e4bab0082856; valaddr_reg:x3; val_offset:1461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1461*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73d9395d59810 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8a33a4d802853 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1e4bab0082856 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd73d9395d59810; op2val:0xbfe8a33a4d802853;
op3val:0x3fd1e4bab0082856; valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73d9395d59810 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8a33a4d802853 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1e4bab0082856 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd73d9395d59810; op2val:0xbfe8a33a4d802853;
op3val:0x3fd1e4bab0082856; valaddr_reg:x3; val_offset:1467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1467*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x79fe7ba4096d2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4c3dad8f5f478 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xea911a40ddb3b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd79fe7ba4096d2; op2val:0xc004c3dad8f5f478;
op3val:0x3feea911a40ddb3b; valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x79fe7ba4096d2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4c3dad8f5f478 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xea911a40ddb3b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd79fe7ba4096d2; op2val:0xc004c3dad8f5f478;
op3val:0x3feea911a40ddb3b; valaddr_reg:x3; val_offset:1473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1473*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x79fe7ba4096d2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4c3dad8f5f478 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xea911a40ddb3b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd79fe7ba4096d2; op2val:0xc004c3dad8f5f478;
op3val:0x3feea911a40ddb3b; valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x79fe7ba4096d2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4c3dad8f5f478 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xea911a40ddb3b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd79fe7ba4096d2; op2val:0xc004c3dad8f5f478;
op3val:0x3feea911a40ddb3b; valaddr_reg:x3; val_offset:1479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1479*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x79fe7ba4096d2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4c3dad8f5f478 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xea911a40ddb3b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd79fe7ba4096d2; op2val:0xc004c3dad8f5f478;
op3val:0x3feea911a40ddb3b; valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7a789b8d3f9e6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25aa7601b289f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb2280c960fbc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7a789b8d3f9e6; op2val:0xbfe25aa7601b289f;
op3val:0x3fcb2280c960fbc0; valaddr_reg:x3; val_offset:1485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1485*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7a789b8d3f9e6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25aa7601b289f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb2280c960fbc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7a789b8d3f9e6; op2val:0xbfe25aa7601b289f;
op3val:0x3fcb2280c960fbc0; valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7a789b8d3f9e6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25aa7601b289f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb2280c960fbc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7a789b8d3f9e6; op2val:0xbfe25aa7601b289f;
op3val:0x3fcb2280c960fbc0; valaddr_reg:x3; val_offset:1491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1491*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7a789b8d3f9e6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25aa7601b289f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb2280c960fbc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7a789b8d3f9e6; op2val:0xbfe25aa7601b289f;
op3val:0x3fcb2280c960fbc0; valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7a789b8d3f9e6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25aa7601b289f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb2280c960fbc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7a789b8d3f9e6; op2val:0xbfe25aa7601b289f;
op3val:0x3fcb2280c960fbc0; valaddr_reg:x3; val_offset:1497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1497*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b6fcf0fcedbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c718ae550cf2 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xbd4f50df14cc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7b6fcf0fcedbc; op2val:0xbfd2c718ae550cf2;
op3val:0x3fbbd4f50df14cc8; valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b6fcf0fcedbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c718ae550cf2 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xbd4f50df14cc8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7b6fcf0fcedbc; op2val:0xbfd2c718ae550cf2;
op3val:0x3fbbd4f50df14cc8; valaddr_reg:x3; val_offset:1503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1503*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b6fcf0fcedbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c718ae550cf2 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xbd4f50df14cc8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7b6fcf0fcedbc; op2val:0xbfd2c718ae550cf2;
op3val:0x3fbbd4f50df14cc8; valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b6fcf0fcedbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c718ae550cf2 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xbd4f50df14cc8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7b6fcf0fcedbc; op2val:0xbfd2c718ae550cf2;
op3val:0x3fbbd4f50df14cc8; valaddr_reg:x3; val_offset:1509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1509*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b6fcf0fcedbc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c718ae550cf2 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xbd4f50df14cc8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7b6fcf0fcedbc; op2val:0xbfd2c718ae550cf2;
op3val:0x3fbbd4f50df14cc8; valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8035174fe3838 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb88fa57b93bfe and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4a996b0a81f8a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8035174fe3838; op2val:0xbffb88fa57b93bfe;
op3val:0x3fe4a996b0a81f8a; valaddr_reg:x3; val_offset:1515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1515*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8035174fe3838 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb88fa57b93bfe and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4a996b0a81f8a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8035174fe3838; op2val:0xbffb88fa57b93bfe;
op3val:0x3fe4a996b0a81f8a; valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8035174fe3838 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb88fa57b93bfe and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4a996b0a81f8a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8035174fe3838; op2val:0xbffb88fa57b93bfe;
op3val:0x3fe4a996b0a81f8a; valaddr_reg:x3; val_offset:1521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1521*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8035174fe3838 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb88fa57b93bfe and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4a996b0a81f8a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8035174fe3838; op2val:0xbffb88fa57b93bfe;
op3val:0x3fe4a996b0a81f8a; valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8035174fe3838 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb88fa57b93bfe and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4a996b0a81f8a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8035174fe3838; op2val:0xbffb88fa57b93bfe;
op3val:0x3fe4a996b0a81f8a; valaddr_reg:x3; val_offset:1527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1527*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x814b1039307c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3292173597b3e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcd67992203e40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd814b1039307c8; op2val:0xbfe3292173597b3e;
op3val:0x3fccd67992203e40; valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x814b1039307c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3292173597b3e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcd67992203e40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd814b1039307c8; op2val:0xbfe3292173597b3e;
op3val:0x3fccd67992203e40; valaddr_reg:x3; val_offset:1533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1533*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x814b1039307c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3292173597b3e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcd67992203e40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd814b1039307c8; op2val:0xbfe3292173597b3e;
op3val:0x3fccd67992203e40; valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x814b1039307c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3292173597b3e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcd67992203e40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd814b1039307c8; op2val:0xbfe3292173597b3e;
op3val:0x3fccd67992203e40; valaddr_reg:x3; val_offset:1539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1539*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x814b1039307c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3292173597b3e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcd67992203e40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd814b1039307c8; op2val:0xbfe3292173597b3e;
op3val:0x3fccd67992203e40; valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x82260edf4d940 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e95cba1d1005 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0868fdd21b824 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd82260edf4d940; op2val:0xbfe5e95cba1d1005;
op3val:0x3fd0868fdd21b824; valaddr_reg:x3; val_offset:1545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1545*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x82260edf4d940 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e95cba1d1005 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0868fdd21b824 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd82260edf4d940; op2val:0xbfe5e95cba1d1005;
op3val:0x3fd0868fdd21b824; valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x82260edf4d940 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e95cba1d1005 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0868fdd21b824 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd82260edf4d940; op2val:0xbfe5e95cba1d1005;
op3val:0x3fd0868fdd21b824; valaddr_reg:x3; val_offset:1551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1551*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x82260edf4d940 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e95cba1d1005 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0868fdd21b824 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd82260edf4d940; op2val:0xbfe5e95cba1d1005;
op3val:0x3fd0868fdd21b824; valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x82260edf4d940 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e95cba1d1005 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0868fdd21b824 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd82260edf4d940; op2val:0xbfe5e95cba1d1005;
op3val:0x3fd0868fdd21b824; valaddr_reg:x3; val_offset:1557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1557*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x82a84064b7de2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x443865d5874fb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe9b2201c7281c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd82a84064b7de2; op2val:0xc00443865d5874fb;
op3val:0x3fee9b2201c7281c; valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x82a84064b7de2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x443865d5874fb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe9b2201c7281c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd82a84064b7de2; op2val:0xc00443865d5874fb;
op3val:0x3fee9b2201c7281c; valaddr_reg:x3; val_offset:1563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1563*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x82a84064b7de2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x443865d5874fb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe9b2201c7281c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd82a84064b7de2; op2val:0xc00443865d5874fb;
op3val:0x3fee9b2201c7281c; valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x82a84064b7de2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x443865d5874fb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe9b2201c7281c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd82a84064b7de2; op2val:0xc00443865d5874fb;
op3val:0x3fee9b2201c7281c; valaddr_reg:x3; val_offset:1569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1569*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x82a84064b7de2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x443865d5874fb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe9b2201c7281c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd82a84064b7de2; op2val:0xc00443865d5874fb;
op3val:0x3fee9b2201c7281c; valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x85aade0a05486 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x805f473275832 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2488a9eb4fbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd85aade0a05486; op2val:0xbff805f473275832;
op3val:0x3fe2488a9eb4fbbb; valaddr_reg:x3; val_offset:1575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1575*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x85aade0a05486 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x805f473275832 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2488a9eb4fbbb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd85aade0a05486; op2val:0xbff805f473275832;
op3val:0x3fe2488a9eb4fbbb; valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x85aade0a05486 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x805f473275832 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2488a9eb4fbbb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd85aade0a05486; op2val:0xbff805f473275832;
op3val:0x3fe2488a9eb4fbbb; valaddr_reg:x3; val_offset:1581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1581*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x85aade0a05486 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x805f473275832 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2488a9eb4fbbb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd85aade0a05486; op2val:0xbff805f473275832;
op3val:0x3fe2488a9eb4fbbb; valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x85aade0a05486 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x805f473275832 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2488a9eb4fbbb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd85aade0a05486; op2val:0xbff805f473275832;
op3val:0x3fe2488a9eb4fbbb; valaddr_reg:x3; val_offset:1587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1587*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x87ba86c70f9fe and fs2 == 1 and fe2 == 0x400 and fm2 == 0x24349f31d5807 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf214737895db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd87ba86c70f9fe; op2val:0xc0024349f31d5807;
op3val:0x3febf214737895db; valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x87ba86c70f9fe and fs2 == 1 and fe2 == 0x400 and fm2 == 0x24349f31d5807 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf214737895db and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd87ba86c70f9fe; op2val:0xc0024349f31d5807;
op3val:0x3febf214737895db; valaddr_reg:x3; val_offset:1593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1593*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x87ba86c70f9fe and fs2 == 1 and fe2 == 0x400 and fm2 == 0x24349f31d5807 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf214737895db and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd87ba86c70f9fe; op2val:0xc0024349f31d5807;
op3val:0x3febf214737895db; valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x87ba86c70f9fe and fs2 == 1 and fe2 == 0x400 and fm2 == 0x24349f31d5807 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf214737895db and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd87ba86c70f9fe; op2val:0xc0024349f31d5807;
op3val:0x3febf214737895db; valaddr_reg:x3; val_offset:1599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1599*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x87ba86c70f9fe and fs2 == 1 and fe2 == 0x400 and fm2 == 0x24349f31d5807 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf214737895db and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd87ba86c70f9fe; op2val:0xc0024349f31d5807;
op3val:0x3febf214737895db; valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8a1163baf42ae and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1dd05e3460388 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7f61b2b2bfe9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8a1163baf42ae; op2val:0xc001dd05e3460388;
op3val:0x3feb7f61b2b2bfe9; valaddr_reg:x3; val_offset:1605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1605*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8a1163baf42ae and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1dd05e3460388 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7f61b2b2bfe9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8a1163baf42ae; op2val:0xc001dd05e3460388;
op3val:0x3feb7f61b2b2bfe9; valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8a1163baf42ae and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1dd05e3460388 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7f61b2b2bfe9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8a1163baf42ae; op2val:0xc001dd05e3460388;
op3val:0x3feb7f61b2b2bfe9; valaddr_reg:x3; val_offset:1611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1611*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8a1163baf42ae and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1dd05e3460388 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7f61b2b2bfe9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8a1163baf42ae; op2val:0xc001dd05e3460388;
op3val:0x3feb7f61b2b2bfe9; valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8a1163baf42ae and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1dd05e3460388 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7f61b2b2bfe9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8a1163baf42ae; op2val:0xc001dd05e3460388;
op3val:0x3feb7f61b2b2bfe9; valaddr_reg:x3; val_offset:1617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1617*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b833025b7e80 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xafb298f6c20e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4d7ae5cd0da80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b833025b7e80; op2val:0xbffafb298f6c20e9;
op3val:0x3fe4d7ae5cd0da80; valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b833025b7e80 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xafb298f6c20e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4d7ae5cd0da80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b833025b7e80; op2val:0xbffafb298f6c20e9;
op3val:0x3fe4d7ae5cd0da80; valaddr_reg:x3; val_offset:1623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1623*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b833025b7e80 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xafb298f6c20e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4d7ae5cd0da80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b833025b7e80; op2val:0xbffafb298f6c20e9;
op3val:0x3fe4d7ae5cd0da80; valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b833025b7e80 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xafb298f6c20e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4d7ae5cd0da80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b833025b7e80; op2val:0xbffafb298f6c20e9;
op3val:0x3fe4d7ae5cd0da80; valaddr_reg:x3; val_offset:1629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1629*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b833025b7e80 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xafb298f6c20e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4d7ae5cd0da80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b833025b7e80; op2val:0xbffafb298f6c20e9;
op3val:0x3fe4d7ae5cd0da80; valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8bb5dad96c4ce and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2bd2fd0af094b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcf7388ed1a1c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8bb5dad96c4ce; op2val:0xc002bd2fd0af094b;
op3val:0x3fecf7388ed1a1c6; valaddr_reg:x3; val_offset:1635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1635*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8bb5dad96c4ce and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2bd2fd0af094b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcf7388ed1a1c6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8bb5dad96c4ce; op2val:0xc002bd2fd0af094b;
op3val:0x3fecf7388ed1a1c6; valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8bb5dad96c4ce and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2bd2fd0af094b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcf7388ed1a1c6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8bb5dad96c4ce; op2val:0xc002bd2fd0af094b;
op3val:0x3fecf7388ed1a1c6; valaddr_reg:x3; val_offset:1641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1641*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8bb5dad96c4ce and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2bd2fd0af094b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcf7388ed1a1c6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8bb5dad96c4ce; op2val:0xc002bd2fd0af094b;
op3val:0x3fecf7388ed1a1c6; valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8bb5dad96c4ce and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2bd2fd0af094b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcf7388ed1a1c6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8bb5dad96c4ce; op2val:0xc002bd2fd0af094b;
op3val:0x3fecf7388ed1a1c6; valaddr_reg:x3; val_offset:1647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1647*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8d85e2f6c9756 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e43729e1f458 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa3abf165d753a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8d85e2f6c9756; op2val:0xbff0e43729e1f458;
op3val:0x3fda3abf165d753a; valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8d85e2f6c9756 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e43729e1f458 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa3abf165d753a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8d85e2f6c9756; op2val:0xbff0e43729e1f458;
op3val:0x3fda3abf165d753a; valaddr_reg:x3; val_offset:1653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1653*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8d85e2f6c9756 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e43729e1f458 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa3abf165d753a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8d85e2f6c9756; op2val:0xbff0e43729e1f458;
op3val:0x3fda3abf165d753a; valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8d85e2f6c9756 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e43729e1f458 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa3abf165d753a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8d85e2f6c9756; op2val:0xbff0e43729e1f458;
op3val:0x3fda3abf165d753a; valaddr_reg:x3; val_offset:1659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1659*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8d85e2f6c9756 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e43729e1f458 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa3abf165d753a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8d85e2f6c9756; op2val:0xbff0e43729e1f458;
op3val:0x3fda3abf165d753a; valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8e8339d1957d0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaf0fdc948ab06 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4f83cfb41fb40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8e8339d1957d0; op2val:0xbfcaf0fdc948ab06;
op3val:0x3fb4f83cfb41fb40; valaddr_reg:x3; val_offset:1665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1665*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8e8339d1957d0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaf0fdc948ab06 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4f83cfb41fb40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8e8339d1957d0; op2val:0xbfcaf0fdc948ab06;
op3val:0x3fb4f83cfb41fb40; valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8e8339d1957d0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaf0fdc948ab06 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4f83cfb41fb40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8e8339d1957d0; op2val:0xbfcaf0fdc948ab06;
op3val:0x3fb4f83cfb41fb40; valaddr_reg:x3; val_offset:1671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1671*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8e8339d1957d0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaf0fdc948ab06 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4f83cfb41fb40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8e8339d1957d0; op2val:0xbfcaf0fdc948ab06;
op3val:0x3fb4f83cfb41fb40; valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8e8339d1957d0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaf0fdc948ab06 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4f83cfb41fb40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8e8339d1957d0; op2val:0xbfcaf0fdc948ab06;
op3val:0x3fb4f83cfb41fb40; valaddr_reg:x3; val_offset:1677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1677*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x90c891745fa4c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa86bd7ccf8f50 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4c3a834b70e5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd90c891745fa4c; op2val:0xbffa86bd7ccf8f50;
op3val:0x3fe4c3a834b70e5b; valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x90c891745fa4c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa86bd7ccf8f50 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4c3a834b70e5b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd90c891745fa4c; op2val:0xbffa86bd7ccf8f50;
op3val:0x3fe4c3a834b70e5b; valaddr_reg:x3; val_offset:1683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1683*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x90c891745fa4c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa86bd7ccf8f50 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4c3a834b70e5b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd90c891745fa4c; op2val:0xbffa86bd7ccf8f50;
op3val:0x3fe4c3a834b70e5b; valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x90c891745fa4c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa86bd7ccf8f50 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4c3a834b70e5b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd90c891745fa4c; op2val:0xbffa86bd7ccf8f50;
op3val:0x3fe4c3a834b70e5b; valaddr_reg:x3; val_offset:1689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1689*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x90c891745fa4c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa86bd7ccf8f50 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4c3a834b70e5b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd90c891745fa4c; op2val:0xbffa86bd7ccf8f50;
op3val:0x3fe4c3a834b70e5b; valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x915e9800f64ec and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x572178cb1bced and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cfd1c1ed57fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd915e9800f64ec; op2val:0xbff572178cb1bced;
op3val:0x3fe0cfd1c1ed57fc; valaddr_reg:x3; val_offset:1695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1695*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x915e9800f64ec and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x572178cb1bced and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cfd1c1ed57fc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd915e9800f64ec; op2val:0xbff572178cb1bced;
op3val:0x3fe0cfd1c1ed57fc; valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x915e9800f64ec and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x572178cb1bced and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cfd1c1ed57fc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd915e9800f64ec; op2val:0xbff572178cb1bced;
op3val:0x3fe0cfd1c1ed57fc; valaddr_reg:x3; val_offset:1701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1701*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x915e9800f64ec and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x572178cb1bced and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cfd1c1ed57fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd915e9800f64ec; op2val:0xbff572178cb1bced;
op3val:0x3fe0cfd1c1ed57fc; valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x915e9800f64ec and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x572178cb1bced and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cfd1c1ed57fc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd915e9800f64ec; op2val:0xbff572178cb1bced;
op3val:0x3fe0cfd1c1ed57fc; valaddr_reg:x3; val_offset:1707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1707*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x99608cc159e82 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x46d8c69e470b5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0555cd2961d8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd99608cc159e82; op2val:0xbff46d8c69e470b5;
op3val:0x3fe0555cd2961d8e; valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x99608cc159e82 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x46d8c69e470b5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0555cd2961d8e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd99608cc159e82; op2val:0xbff46d8c69e470b5;
op3val:0x3fe0555cd2961d8e; valaddr_reg:x3; val_offset:1713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1713*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x99608cc159e82 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x46d8c69e470b5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0555cd2961d8e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd99608cc159e82; op2val:0xbff46d8c69e470b5;
op3val:0x3fe0555cd2961d8e; valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x99608cc159e82 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x46d8c69e470b5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0555cd2961d8e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd99608cc159e82; op2val:0xbff46d8c69e470b5;
op3val:0x3fe0555cd2961d8e; valaddr_reg:x3; val_offset:1719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1719*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x99608cc159e82 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x46d8c69e470b5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0555cd2961d8e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd99608cc159e82; op2val:0xbff46d8c69e470b5;
op3val:0x3fe0555cd2961d8e; valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9dc285cf022ae and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1452e6e63e7f0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbe9bb5c2f0a38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9dc285cf022ae; op2val:0xbff1452e6e63e7f0;
op3val:0x3fdbe9bb5c2f0a38; valaddr_reg:x3; val_offset:1725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1725*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9dc285cf022ae and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1452e6e63e7f0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbe9bb5c2f0a38 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9dc285cf022ae; op2val:0xbff1452e6e63e7f0;
op3val:0x3fdbe9bb5c2f0a38; valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9dc285cf022ae and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1452e6e63e7f0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbe9bb5c2f0a38 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9dc285cf022ae; op2val:0xbff1452e6e63e7f0;
op3val:0x3fdbe9bb5c2f0a38; valaddr_reg:x3; val_offset:1731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1731*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9dc285cf022ae and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1452e6e63e7f0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbe9bb5c2f0a38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9dc285cf022ae; op2val:0xbff1452e6e63e7f0;
op3val:0x3fdbe9bb5c2f0a38; valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9dc285cf022ae and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1452e6e63e7f0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbe9bb5c2f0a38 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9dc285cf022ae; op2val:0xbff1452e6e63e7f0;
op3val:0x3fdbe9bb5c2f0a38; valaddr_reg:x3; val_offset:1737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1737*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9de3fd33f96e2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd4cd2f1d63a99 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7af843509306d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9de3fd33f96e2; op2val:0xbffd4cd2f1d63a99;
op3val:0x3fe7af843509306d; valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9de3fd33f96e2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd4cd2f1d63a99 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7af843509306d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9de3fd33f96e2; op2val:0xbffd4cd2f1d63a99;
op3val:0x3fe7af843509306d; valaddr_reg:x3; val_offset:1743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1743*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9de3fd33f96e2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd4cd2f1d63a99 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7af843509306d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9de3fd33f96e2; op2val:0xbffd4cd2f1d63a99;
op3val:0x3fe7af843509306d; valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9de3fd33f96e2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd4cd2f1d63a99 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7af843509306d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9de3fd33f96e2; op2val:0xbffd4cd2f1d63a99;
op3val:0x3fe7af843509306d; valaddr_reg:x3; val_offset:1749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1749*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9de3fd33f96e2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd4cd2f1d63a99 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7af843509306d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9de3fd33f96e2; op2val:0xbffd4cd2f1d63a99;
op3val:0x3fe7af843509306d; valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9fc53645f3ab6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe012d39c223ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85d82ca70ca9c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9fc53645f3ab6; op2val:0xbffe012d39c223ee;
op3val:0x3fe85d82ca70ca9c; valaddr_reg:x3; val_offset:1755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1755*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9fc53645f3ab6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe012d39c223ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85d82ca70ca9c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9fc53645f3ab6; op2val:0xbffe012d39c223ee;
op3val:0x3fe85d82ca70ca9c; valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9fc53645f3ab6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe012d39c223ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85d82ca70ca9c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9fc53645f3ab6; op2val:0xbffe012d39c223ee;
op3val:0x3fe85d82ca70ca9c; valaddr_reg:x3; val_offset:1761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1761*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9fc53645f3ab6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe012d39c223ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85d82ca70ca9c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9fc53645f3ab6; op2val:0xbffe012d39c223ee;
op3val:0x3fe85d82ca70ca9c; valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9fc53645f3ab6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe012d39c223ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85d82ca70ca9c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9fc53645f3ab6; op2val:0xbffe012d39c223ee;
op3val:0x3fe85d82ca70ca9c; valaddr_reg:x3; val_offset:1767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1767*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9fc8e453fd48a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb611a2db21769 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x63bf2dbff2500 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9fc8e453fd48a; op2val:0xbfdb611a2db21769;
op3val:0x3fc63bf2dbff2500; valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9fc8e453fd48a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb611a2db21769 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x63bf2dbff2500 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9fc8e453fd48a; op2val:0xbfdb611a2db21769;
op3val:0x3fc63bf2dbff2500; valaddr_reg:x3; val_offset:1773*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1773*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9fc8e453fd48a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb611a2db21769 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x63bf2dbff2500 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9fc8e453fd48a; op2val:0xbfdb611a2db21769;
op3val:0x3fc63bf2dbff2500; valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9fc8e453fd48a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb611a2db21769 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x63bf2dbff2500 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9fc8e453fd48a; op2val:0xbfdb611a2db21769;
op3val:0x3fc63bf2dbff2500; valaddr_reg:x3; val_offset:1779*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1779*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9fc8e453fd48a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb611a2db21769 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x63bf2dbff2500 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9fc8e453fd48a; op2val:0xbfdb611a2db21769;
op3val:0x3fc63bf2dbff2500; valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa1267000e30b4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c2be06a3e004 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb4fbbc647ec8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda1267000e30b4; op2val:0xbff0c2be06a3e004;
op3val:0x3fdb4fbbc647ec8c; valaddr_reg:x3; val_offset:1785*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1785*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa1267000e30b4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c2be06a3e004 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb4fbbc647ec8c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda1267000e30b4; op2val:0xbff0c2be06a3e004;
op3val:0x3fdb4fbbc647ec8c; valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa1267000e30b4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c2be06a3e004 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb4fbbc647ec8c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda1267000e30b4; op2val:0xbff0c2be06a3e004;
op3val:0x3fdb4fbbc647ec8c; valaddr_reg:x3; val_offset:1791*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1791*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa1267000e30b4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c2be06a3e004 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb4fbbc647ec8c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda1267000e30b4; op2val:0xbff0c2be06a3e004;
op3val:0x3fdb4fbbc647ec8c; valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa1267000e30b4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c2be06a3e004 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb4fbbc647ec8c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda1267000e30b4; op2val:0xbff0c2be06a3e004;
op3val:0x3fdb4fbbc647ec8c; valaddr_reg:x3; val_offset:1797*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1797*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad29895a78b0e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9789fd457d9c9 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x559a2e97f1680 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdad29895a78b0e; op2val:0xbfb9789fd457d9c9;
op3val:0x3fa559a2e97f1680; valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad29895a78b0e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9789fd457d9c9 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x559a2e97f1680 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdad29895a78b0e; op2val:0xbfb9789fd457d9c9;
op3val:0x3fa559a2e97f1680; valaddr_reg:x3; val_offset:1803*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1803*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad29895a78b0e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9789fd457d9c9 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x559a2e97f1680 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdad29895a78b0e; op2val:0xbfb9789fd457d9c9;
op3val:0x3fa559a2e97f1680; valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad29895a78b0e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9789fd457d9c9 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x559a2e97f1680 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdad29895a78b0e; op2val:0xbfb9789fd457d9c9;
op3val:0x3fa559a2e97f1680; valaddr_reg:x3; val_offset:1809*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1809*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad29895a78b0e and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9789fd457d9c9 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x559a2e97f1680 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdad29895a78b0e; op2val:0xbfb9789fd457d9c9;
op3val:0x3fa559a2e97f1680; valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2f02af0d9c62 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x369820f680ec1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x07d8a54cfcf3e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb2f02af0d9c62; op2val:0xbfe369820f680ec1;
op3val:0x3fd07d8a54cfcf3e; valaddr_reg:x3; val_offset:1815*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1815*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2f02af0d9c62 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x369820f680ec1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x07d8a54cfcf3e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb2f02af0d9c62; op2val:0xbfe369820f680ec1;
op3val:0x3fd07d8a54cfcf3e; valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2f02af0d9c62 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x369820f680ec1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x07d8a54cfcf3e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb2f02af0d9c62; op2val:0xbfe369820f680ec1;
op3val:0x3fd07d8a54cfcf3e; valaddr_reg:x3; val_offset:1821*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1821*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2f02af0d9c62 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x369820f680ec1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x07d8a54cfcf3e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb2f02af0d9c62; op2val:0xbfe369820f680ec1;
op3val:0x3fd07d8a54cfcf3e; valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2f02af0d9c62 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x369820f680ec1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x07d8a54cfcf3e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb2f02af0d9c62; op2val:0xbfe369820f680ec1;
op3val:0x3fd07d8a54cfcf3e; valaddr_reg:x3; val_offset:1827*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1827*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc7cab0399d69c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb418b6e6b87fe and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x84389a63c3afc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc7cab0399d69c; op2val:0xbfeb418b6e6b87fe;
op3val:0x3fd84389a63c3afc; valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc7cab0399d69c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb418b6e6b87fe and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x84389a63c3afc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc7cab0399d69c; op2val:0xbfeb418b6e6b87fe;
op3val:0x3fd84389a63c3afc; valaddr_reg:x3; val_offset:1833*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1833*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc7cab0399d69c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb418b6e6b87fe and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x84389a63c3afc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc7cab0399d69c; op2val:0xbfeb418b6e6b87fe;
op3val:0x3fd84389a63c3afc; valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc7cab0399d69c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb418b6e6b87fe and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x84389a63c3afc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc7cab0399d69c; op2val:0xbfeb418b6e6b87fe;
op3val:0x3fd84389a63c3afc; valaddr_reg:x3; val_offset:1839*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1839*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc7cab0399d69c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb418b6e6b87fe and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x84389a63c3afc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc7cab0399d69c; op2val:0xbfeb418b6e6b87fe;
op3val:0x3fd84389a63c3afc; valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce6bf6950d14a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x791f5d01f3c29 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x549ad29a8dd00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdce6bf6950d14a; op2val:0xbf9791f5d01f3c29;
op3val:0x3f8549ad29a8dd00; valaddr_reg:x3; val_offset:1845*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1845*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce6bf6950d14a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x791f5d01f3c29 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x549ad29a8dd00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdce6bf6950d14a; op2val:0xbf9791f5d01f3c29;
op3val:0x3f8549ad29a8dd00; valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce6bf6950d14a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x791f5d01f3c29 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x549ad29a8dd00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdce6bf6950d14a; op2val:0xbf9791f5d01f3c29;
op3val:0x3f8549ad29a8dd00; valaddr_reg:x3; val_offset:1851*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1851*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce6bf6950d14a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x791f5d01f3c29 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x549ad29a8dd00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdce6bf6950d14a; op2val:0xbf9791f5d01f3c29;
op3val:0x3f8549ad29a8dd00; valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce6bf6950d14a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x791f5d01f3c29 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x549ad29a8dd00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdce6bf6950d14a; op2val:0xbf9791f5d01f3c29;
op3val:0x3f8549ad29a8dd00; valaddr_reg:x3; val_offset:1857*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1857*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1b19f3e618f8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x73dfaf5ef2204 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x523da94321215 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd1b19f3e618f8; op2val:0xbff73dfaf5ef2204;
op3val:0x3fe523da94321215; valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1b19f3e618f8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x73dfaf5ef2204 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x523da94321215 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd1b19f3e618f8; op2val:0xbff73dfaf5ef2204;
op3val:0x3fe523da94321215; valaddr_reg:x3; val_offset:1863*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1863*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1b19f3e618f8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x73dfaf5ef2204 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x523da94321215 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd1b19f3e618f8; op2val:0xbff73dfaf5ef2204;
op3val:0x3fe523da94321215; valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1b19f3e618f8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x73dfaf5ef2204 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x523da94321215 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd1b19f3e618f8; op2val:0xbff73dfaf5ef2204;
op3val:0x3fe523da94321215; valaddr_reg:x3; val_offset:1869*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1869*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1b19f3e618f8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x73dfaf5ef2204 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x523da94321215 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd1b19f3e618f8; op2val:0xbff73dfaf5ef2204;
op3val:0x3fe523da94321215; valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1c5c2f436f0e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x82f6af259db09 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x600681541922d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd1c5c2f436f0e; op2val:0xbff82f6af259db09;
op3val:0x3fe600681541922d; valaddr_reg:x3; val_offset:1875*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1875*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1c5c2f436f0e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x82f6af259db09 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x600681541922d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd1c5c2f436f0e; op2val:0xbff82f6af259db09;
op3val:0x3fe600681541922d; valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1c5c2f436f0e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x82f6af259db09 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x600681541922d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd1c5c2f436f0e; op2val:0xbff82f6af259db09;
op3val:0x3fe600681541922d; valaddr_reg:x3; val_offset:1881*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1881*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1c5c2f436f0e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x82f6af259db09 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x600681541922d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd1c5c2f436f0e; op2val:0xbff82f6af259db09;
op3val:0x3fe600681541922d; valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1c5c2f436f0e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x82f6af259db09 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x600681541922d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd1c5c2f436f0e; op2val:0xbff82f6af259db09;
op3val:0x3fe600681541922d; valaddr_reg:x3; val_offset:1887*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1887*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd3305a72f280c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde218e4487790 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb448c2e015ee6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd3305a72f280c; op2val:0xbfede218e4487790;
op3val:0x3fdb448c2e015ee6; valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd3305a72f280c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde218e4487790 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb448c2e015ee6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd3305a72f280c; op2val:0xbfede218e4487790;
op3val:0x3fdb448c2e015ee6; valaddr_reg:x3; val_offset:1893*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1893*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd3305a72f280c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde218e4487790 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb448c2e015ee6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd3305a72f280c; op2val:0xbfede218e4487790;
op3val:0x3fdb448c2e015ee6; valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd3305a72f280c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde218e4487790 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb448c2e015ee6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd3305a72f280c; op2val:0xbfede218e4487790;
op3val:0x3fdb448c2e015ee6; valaddr_reg:x3; val_offset:1899*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1899*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd3305a72f280c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde218e4487790 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb448c2e015ee6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd3305a72f280c; op2val:0xbfede218e4487790;
op3val:0x3fdb448c2e015ee6; valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd7d5cd8fdb55c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x65fbff97bf2d8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x49e6ceafe812c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd7d5cd8fdb55c; op2val:0xbfe65fbff97bf2d8;
op3val:0x3fd49e6ceafe812c; valaddr_reg:x3; val_offset:1905*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1905*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd7d5cd8fdb55c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x65fbff97bf2d8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x49e6ceafe812c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd7d5cd8fdb55c; op2val:0xbfe65fbff97bf2d8;
op3val:0x3fd49e6ceafe812c; valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd7d5cd8fdb55c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x65fbff97bf2d8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x49e6ceafe812c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd7d5cd8fdb55c; op2val:0xbfe65fbff97bf2d8;
op3val:0x3fd49e6ceafe812c; valaddr_reg:x3; val_offset:1911*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1911*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd7d5cd8fdb55c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x65fbff97bf2d8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x49e6ceafe812c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd7d5cd8fdb55c; op2val:0xbfe65fbff97bf2d8;
op3val:0x3fd49e6ceafe812c; valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd7d5cd8fdb55c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x65fbff97bf2d8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x49e6ceafe812c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd7d5cd8fdb55c; op2val:0xbfe65fbff97bf2d8;
op3val:0x3fd49e6ceafe812c; valaddr_reg:x3; val_offset:1917*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1917*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xddb2b8a55f5ca and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6c502ce887dc1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x53e7dd18bb3e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdddb2b8a55f5ca; op2val:0xbff6c502ce887dc1;
op3val:0x3fe53e7dd18bb3e9; valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xddb2b8a55f5ca and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6c502ce887dc1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x53e7dd18bb3e9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdddb2b8a55f5ca; op2val:0xbff6c502ce887dc1;
op3val:0x3fe53e7dd18bb3e9; valaddr_reg:x3; val_offset:1923*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1923*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xddb2b8a55f5ca and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6c502ce887dc1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x53e7dd18bb3e9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdddb2b8a55f5ca; op2val:0xbff6c502ce887dc1;
op3val:0x3fe53e7dd18bb3e9; valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xddb2b8a55f5ca and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6c502ce887dc1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x53e7dd18bb3e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdddb2b8a55f5ca; op2val:0xbff6c502ce887dc1;
op3val:0x3fe53e7dd18bb3e9; valaddr_reg:x3; val_offset:1929*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1929*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xddb2b8a55f5ca and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6c502ce887dc1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x53e7dd18bb3e9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdddb2b8a55f5ca; op2val:0xbff6c502ce887dc1;
op3val:0x3fe53e7dd18bb3e9; valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6b490dfe2b50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe372fd2bff52e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcb90a58982adc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde6b490dfe2b50; op2val:0xbfde372fd2bff52e;
op3val:0x3fccb90a58982adc; valaddr_reg:x3; val_offset:1935*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1935*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6b490dfe2b50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe372fd2bff52e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcb90a58982adc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde6b490dfe2b50; op2val:0xbfde372fd2bff52e;
op3val:0x3fccb90a58982adc; valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6b490dfe2b50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe372fd2bff52e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcb90a58982adc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde6b490dfe2b50; op2val:0xbfde372fd2bff52e;
op3val:0x3fccb90a58982adc; valaddr_reg:x3; val_offset:1941*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1941*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6b490dfe2b50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe372fd2bff52e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcb90a58982adc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde6b490dfe2b50; op2val:0xbfde372fd2bff52e;
op3val:0x3fccb90a58982adc; valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6b490dfe2b50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe372fd2bff52e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcb90a58982adc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde6b490dfe2b50; op2val:0xbfde372fd2bff52e;
op3val:0x3fccb90a58982adc; valaddr_reg:x3; val_offset:1947*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1947*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec9b00b7a7816 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59e54c162121b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ccb0e83df27d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdec9b00b7a7816; op2val:0xbff59e54c162121b;
op3val:0x3fe4ccb0e83df27d; valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec9b00b7a7816 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59e54c162121b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ccb0e83df27d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdec9b00b7a7816; op2val:0xbff59e54c162121b;
op3val:0x3fe4ccb0e83df27d; valaddr_reg:x3; val_offset:1953*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1953*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec9b00b7a7816 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59e54c162121b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ccb0e83df27d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdec9b00b7a7816; op2val:0xbff59e54c162121b;
op3val:0x3fe4ccb0e83df27d; valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec9b00b7a7816 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59e54c162121b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ccb0e83df27d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdec9b00b7a7816; op2val:0xbff59e54c162121b;
op3val:0x3fe4ccb0e83df27d; valaddr_reg:x3; val_offset:1959*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1959*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec9b00b7a7816 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59e54c162121b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ccb0e83df27d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdec9b00b7a7816; op2val:0xbff59e54c162121b;
op3val:0x3fe4ccb0e83df27d; valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xed6cdb6dd7972 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf419490f13ff8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe1f4ac8288a60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fded6cdb6dd7972; op2val:0xbfef419490f13ff8;
op3val:0x3fde1f4ac8288a60; valaddr_reg:x3; val_offset:1965*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1965*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xed6cdb6dd7972 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf419490f13ff8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe1f4ac8288a60 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fded6cdb6dd7972; op2val:0xbfef419490f13ff8;
op3val:0x3fde1f4ac8288a60; valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xed6cdb6dd7972 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf419490f13ff8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe1f4ac8288a60 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fded6cdb6dd7972; op2val:0xbfef419490f13ff8;
op3val:0x3fde1f4ac8288a60; valaddr_reg:x3; val_offset:1971*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1971*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xed6cdb6dd7972 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf419490f13ff8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe1f4ac8288a60 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fded6cdb6dd7972; op2val:0xbfef419490f13ff8;
op3val:0x3fde1f4ac8288a60; valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xed6cdb6dd7972 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf419490f13ff8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe1f4ac8288a60 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fded6cdb6dd7972; op2val:0xbfef419490f13ff8;
op3val:0x3fde1f4ac8288a60; valaddr_reg:x3; val_offset:1977*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1977*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xee98ad832fd36 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcb1c290ad512a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb81138c49418 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdee98ad832fd36; op2val:0xbffcb1c290ad512a;
op3val:0x3febb81138c49418; valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xee98ad832fd36 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcb1c290ad512a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb81138c49418 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdee98ad832fd36; op2val:0xbffcb1c290ad512a;
op3val:0x3febb81138c49418; valaddr_reg:x3; val_offset:1983*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1983*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xee98ad832fd36 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcb1c290ad512a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb81138c49418 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdee98ad832fd36; op2val:0xbffcb1c290ad512a;
op3val:0x3febb81138c49418; valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xee98ad832fd36 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcb1c290ad512a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb81138c49418 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdee98ad832fd36; op2val:0xbffcb1c290ad512a;
op3val:0x3febb81138c49418; valaddr_reg:x3; val_offset:1989*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1989*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xee98ad832fd36 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcb1c290ad512a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbb81138c49418 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdee98ad832fd36; op2val:0xbffcb1c290ad512a;
op3val:0x3febb81138c49418; valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfa0400dad9876 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x733f9dd9567c7 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6ee8c61db5fc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfa0400dad9876; op2val:0xbfc733f9dd9567c7;
op3val:0x3fb6ee8c61db5fc8; valaddr_reg:x3; val_offset:1995*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1995*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfa0400dad9876 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x733f9dd9567c7 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6ee8c61db5fc8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfa0400dad9876; op2val:0xbfc733f9dd9567c7;
op3val:0x3fb6ee8c61db5fc8; valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfa0400dad9876 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x733f9dd9567c7 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6ee8c61db5fc8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfa0400dad9876; op2val:0xbfc733f9dd9567c7;
op3val:0x3fb6ee8c61db5fc8; valaddr_reg:x3; val_offset:2001*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2001*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfa0400dad9876 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x733f9dd9567c7 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6ee8c61db5fc8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfa0400dad9876; op2val:0xbfc733f9dd9567c7;
op3val:0x3fb6ee8c61db5fc8; valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfa0400dad9876 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x733f9dd9567c7 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6ee8c61db5fc8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfa0400dad9876; op2val:0xbfc733f9dd9567c7;
op3val:0x3fb6ee8c61db5fc8; valaddr_reg:x3; val_offset:2007*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2007*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0058cec875fb8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x523d931381dd1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x52b2e97478e8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0058cec875fb8; op2val:0xbff523d931381dd1;
op3val:0x3fe52b2e97478e8c; valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0058cec875fb8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x523d931381dd1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x52b2e97478e8c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0058cec875fb8; op2val:0xbff523d931381dd1;
op3val:0x3fe52b2e97478e8c; valaddr_reg:x3; val_offset:2013*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2013*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0058cec875fb8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x523d931381dd1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x52b2e97478e8c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0058cec875fb8; op2val:0xbff523d931381dd1;
op3val:0x3fe52b2e97478e8c; valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0058cec875fb8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x523d931381dd1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x52b2e97478e8c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0058cec875fb8; op2val:0xbff523d931381dd1;
op3val:0x3fe52b2e97478e8c; valaddr_reg:x3; val_offset:2019*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2019*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0058cec875fb8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x523d931381dd1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x52b2e97478e8c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0058cec875fb8; op2val:0xbff523d931381dd1;
op3val:0x3fe52b2e97478e8c; valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x012fd5c1bba61 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5514d32b2fc8f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x56a9a39d92502 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe012fd5c1bba61; op2val:0xbff5514d32b2fc8f;
op3val:0x3fe56a9a39d92502; valaddr_reg:x3; val_offset:2025*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2025*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x012fd5c1bba61 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5514d32b2fc8f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x56a9a39d92502 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe012fd5c1bba61; op2val:0xbff5514d32b2fc8f;
op3val:0x3fe56a9a39d92502; valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x012fd5c1bba61 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5514d32b2fc8f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x56a9a39d92502 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe012fd5c1bba61; op2val:0xbff5514d32b2fc8f;
op3val:0x3fe56a9a39d92502; valaddr_reg:x3; val_offset:2031*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2031*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x012fd5c1bba61 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5514d32b2fc8f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x56a9a39d92502 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe012fd5c1bba61; op2val:0xbff5514d32b2fc8f;
op3val:0x3fe56a9a39d92502; valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x012fd5c1bba61 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5514d32b2fc8f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x56a9a39d92502 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe012fd5c1bba61; op2val:0xbff5514d32b2fc8f;
op3val:0x3fe56a9a39d92502; valaddr_reg:x3; val_offset:2037*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2037*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06100613ea0fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e9439cc688f5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x14fca2d755886 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06100613ea0fb; op2val:0xbfe0e9439cc688f5;
op3val:0x3fd14fca2d755886; valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06100613ea0fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e9439cc688f5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x14fca2d755886 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06100613ea0fb; op2val:0xbfe0e9439cc688f5;
op3val:0x3fd14fca2d755886; valaddr_reg:x3; val_offset:2043*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2043*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06100613ea0fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e9439cc688f5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x14fca2d755886 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06100613ea0fb; op2val:0xbfe0e9439cc688f5;
op3val:0x3fd14fca2d755886; valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2046*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06100613ea0fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e9439cc688f5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x14fca2d755886 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06100613ea0fb; op2val:0xbfe0e9439cc688f5;
op3val:0x3fd14fca2d755886; valaddr_reg:x3; val_offset:2049*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2049*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06100613ea0fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e9439cc688f5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x14fca2d755886 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06100613ea0fb; op2val:0xbfe0e9439cc688f5;
op3val:0x3fd14fca2d755886; valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06e439a4ea9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xab5bfe00a7991 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb6dd241dae3f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06e439a4ea9bd; op2val:0xbfeab5bfe00a7991;
op3val:0x3fdb6dd241dae3f0; valaddr_reg:x3; val_offset:2055*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2055*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06e439a4ea9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xab5bfe00a7991 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb6dd241dae3f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06e439a4ea9bd; op2val:0xbfeab5bfe00a7991;
op3val:0x3fdb6dd241dae3f0; valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06e439a4ea9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xab5bfe00a7991 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb6dd241dae3f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06e439a4ea9bd; op2val:0xbfeab5bfe00a7991;
op3val:0x3fdb6dd241dae3f0; valaddr_reg:x3; val_offset:2061*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2061*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06e439a4ea9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xab5bfe00a7991 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb6dd241dae3f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06e439a4ea9bd; op2val:0xbfeab5bfe00a7991;
op3val:0x3fdb6dd241dae3f0; valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06e439a4ea9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xab5bfe00a7991 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb6dd241dae3f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06e439a4ea9bd; op2val:0xbfeab5bfe00a7991;
op3val:0x3fdb6dd241dae3f0; valaddr_reg:x3; val_offset:2067*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2067*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x094725c90b2d1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5cf784812ff0f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x699d34514e2e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe094725c90b2d1; op2val:0xbfc5cf784812ff0f;
op3val:0x3fb699d34514e2e8; valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x094725c90b2d1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5cf784812ff0f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x699d34514e2e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe094725c90b2d1; op2val:0xbfc5cf784812ff0f;
op3val:0x3fb699d34514e2e8; valaddr_reg:x3; val_offset:2073*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2073*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x094725c90b2d1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5cf784812ff0f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x699d34514e2e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe094725c90b2d1; op2val:0xbfc5cf784812ff0f;
op3val:0x3fb699d34514e2e8; valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x094725c90b2d1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5cf784812ff0f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x699d34514e2e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe094725c90b2d1; op2val:0xbfc5cf784812ff0f;
op3val:0x3fb699d34514e2e8; valaddr_reg:x3; val_offset:2079*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2079*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x094725c90b2d1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5cf784812ff0f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x699d34514e2e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe094725c90b2d1; op2val:0xbfc5cf784812ff0f;
op3val:0x3fb699d34514e2e8; valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0abaf2ae7633b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c64baa348f3a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6aff1561ea322 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0abaf2ae7633b; op2val:0xbff5c64baa348f3a;
op3val:0x3fe6aff1561ea322; valaddr_reg:x3; val_offset:2085*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2085*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0abaf2ae7633b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c64baa348f3a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6aff1561ea322 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0abaf2ae7633b; op2val:0xbff5c64baa348f3a;
op3val:0x3fe6aff1561ea322; valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0abaf2ae7633b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c64baa348f3a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6aff1561ea322 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0abaf2ae7633b; op2val:0xbff5c64baa348f3a;
op3val:0x3fe6aff1561ea322; valaddr_reg:x3; val_offset:2091*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2091*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0abaf2ae7633b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c64baa348f3a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6aff1561ea322 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0abaf2ae7633b; op2val:0xbff5c64baa348f3a;
op3val:0x3fe6aff1561ea322; valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0abaf2ae7633b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c64baa348f3a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6aff1561ea322 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0abaf2ae7633b; op2val:0xbff5c64baa348f3a;
op3val:0x3fe6aff1561ea322; valaddr_reg:x3; val_offset:2097*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2097*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b0d8093814e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xba9dd329c8e0a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcdb9f38e3f67c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b0d8093814e7; op2val:0xbfeba9dd329c8e0a;
op3val:0x3fdcdb9f38e3f67c; valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b0d8093814e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xba9dd329c8e0a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcdb9f38e3f67c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b0d8093814e7; op2val:0xbfeba9dd329c8e0a;
op3val:0x3fdcdb9f38e3f67c; valaddr_reg:x3; val_offset:2103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2103*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b0d8093814e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xba9dd329c8e0a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcdb9f38e3f67c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b0d8093814e7; op2val:0xbfeba9dd329c8e0a;
op3val:0x3fdcdb9f38e3f67c; valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b0d8093814e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xba9dd329c8e0a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcdb9f38e3f67c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b0d8093814e7; op2val:0xbfeba9dd329c8e0a;
op3val:0x3fdcdb9f38e3f67c; valaddr_reg:x3; val_offset:2109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2109*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b0d8093814e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xba9dd329c8e0a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcdb9f38e3f67c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b0d8093814e7; op2val:0xbfeba9dd329c8e0a;
op3val:0x3fdcdb9f38e3f67c; valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e792d49ad4b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa7508bc662511 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbf3f5360498e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e792d49ad4b8; op2val:0xbfba7508bc662511;
op3val:0x3fabf3f5360498e0; valaddr_reg:x3; val_offset:2115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2115*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e792d49ad4b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa7508bc662511 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbf3f5360498e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e792d49ad4b8; op2val:0xbfba7508bc662511;
op3val:0x3fabf3f5360498e0; valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e792d49ad4b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa7508bc662511 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbf3f5360498e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e792d49ad4b8; op2val:0xbfba7508bc662511;
op3val:0x3fabf3f5360498e0; valaddr_reg:x3; val_offset:2121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2121*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e792d49ad4b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa7508bc662511 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbf3f5360498e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e792d49ad4b8; op2val:0xbfba7508bc662511;
op3val:0x3fabf3f5360498e0; valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e792d49ad4b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa7508bc662511 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbf3f5360498e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e792d49ad4b8; op2val:0xbfba7508bc662511;
op3val:0x3fabf3f5360498e0; valaddr_reg:x3; val_offset:2127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2127*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e8c58414b9cf and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x76dc5f4069fca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c29ee35646d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e8c58414b9cf; op2val:0xbff76dc5f4069fca;
op3val:0x3fe8c29ee35646d1; valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e8c58414b9cf and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x76dc5f4069fca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c29ee35646d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e8c58414b9cf; op2val:0xbff76dc5f4069fca;
op3val:0x3fe8c29ee35646d1; valaddr_reg:x3; val_offset:2133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2133*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e8c58414b9cf and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x76dc5f4069fca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c29ee35646d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e8c58414b9cf; op2val:0xbff76dc5f4069fca;
op3val:0x3fe8c29ee35646d1; valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e8c58414b9cf and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x76dc5f4069fca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c29ee35646d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e8c58414b9cf; op2val:0xbff76dc5f4069fca;
op3val:0x3fe8c29ee35646d1; valaddr_reg:x3; val_offset:2139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2139*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e8c58414b9cf and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x76dc5f4069fca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c29ee35646d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e8c58414b9cf; op2val:0xbff76dc5f4069fca;
op3val:0x3fe8c29ee35646d1; valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f43b4ecc3d85 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaa1198790e708 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc37950217b590 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f43b4ecc3d85; op2val:0xbfcaa1198790e708;
op3val:0x3fbc37950217b590; valaddr_reg:x3; val_offset:2145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2145*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f43b4ecc3d85 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaa1198790e708 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc37950217b590 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f43b4ecc3d85; op2val:0xbfcaa1198790e708;
op3val:0x3fbc37950217b590; valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f43b4ecc3d85 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaa1198790e708 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc37950217b590 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f43b4ecc3d85; op2val:0xbfcaa1198790e708;
op3val:0x3fbc37950217b590; valaddr_reg:x3; val_offset:2151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2151*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f43b4ecc3d85 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaa1198790e708 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc37950217b590 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f43b4ecc3d85; op2val:0xbfcaa1198790e708;
op3val:0x3fbc37950217b590; valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f43b4ecc3d85 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaa1198790e708 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc37950217b590 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f43b4ecc3d85; op2val:0xbfcaa1198790e708;
op3val:0x3fbc37950217b590; valaddr_reg:x3; val_offset:2157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2157*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fd62e886b63c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b480bb5aa10e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x81c134a7a1a99 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fd62e886b63c; op2val:0xbff6b480bb5aa10e;
op3val:0x3fe81c134a7a1a99; valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fd62e886b63c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b480bb5aa10e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x81c134a7a1a99 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fd62e886b63c; op2val:0xbff6b480bb5aa10e;
op3val:0x3fe81c134a7a1a99; valaddr_reg:x3; val_offset:2163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2163*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fd62e886b63c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b480bb5aa10e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x81c134a7a1a99 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fd62e886b63c; op2val:0xbff6b480bb5aa10e;
op3val:0x3fe81c134a7a1a99; valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fd62e886b63c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b480bb5aa10e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x81c134a7a1a99 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fd62e886b63c; op2val:0xbff6b480bb5aa10e;
op3val:0x3fe81c134a7a1a99; valaddr_reg:x3; val_offset:2169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2169*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fd62e886b63c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b480bb5aa10e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x81c134a7a1a99 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fd62e886b63c; op2val:0xbff6b480bb5aa10e;
op3val:0x3fe81c134a7a1a99; valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x105d75e8ddd6c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x58fa44664b60f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6f07da7bb8429 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe105d75e8ddd6c; op2val:0xbff58fa44664b60f;
op3val:0x3fe6f07da7bb8429; valaddr_reg:x3; val_offset:2175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2175*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x105d75e8ddd6c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x58fa44664b60f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6f07da7bb8429 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe105d75e8ddd6c; op2val:0xbff58fa44664b60f;
op3val:0x3fe6f07da7bb8429; valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x105d75e8ddd6c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x58fa44664b60f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6f07da7bb8429 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe105d75e8ddd6c; op2val:0xbff58fa44664b60f;
op3val:0x3fe6f07da7bb8429; valaddr_reg:x3; val_offset:2181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2181*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x105d75e8ddd6c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x58fa44664b60f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6f07da7bb8429 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe105d75e8ddd6c; op2val:0xbff58fa44664b60f;
op3val:0x3fe6f07da7bb8429; valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x105d75e8ddd6c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x58fa44664b60f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6f07da7bb8429 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe105d75e8ddd6c; op2val:0xbff58fa44664b60f;
op3val:0x3fe6f07da7bb8429; valaddr_reg:x3; val_offset:2187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2187*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11a059e270438 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaf3ca16d156fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xccedc573bccb5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe11a059e270438; op2val:0xbffaf3ca16d156fd;
op3val:0x3feccedc573bccb5; valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11a059e270438 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaf3ca16d156fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xccedc573bccb5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe11a059e270438; op2val:0xbffaf3ca16d156fd;
op3val:0x3feccedc573bccb5; valaddr_reg:x3; val_offset:2193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2193*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11a059e270438 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaf3ca16d156fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xccedc573bccb5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe11a059e270438; op2val:0xbffaf3ca16d156fd;
op3val:0x3feccedc573bccb5; valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11a059e270438 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaf3ca16d156fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xccedc573bccb5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe11a059e270438; op2val:0xbffaf3ca16d156fd;
op3val:0x3feccedc573bccb5; valaddr_reg:x3; val_offset:2199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2199*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11a059e270438 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xaf3ca16d156fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xccedc573bccb5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe11a059e270438; op2val:0xbffaf3ca16d156fd;
op3val:0x3feccedc573bccb5; valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11c03ea987949 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x28b6878ec0dd3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3d49781599350 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe11c03ea987949; op2val:0xbff28b6878ec0dd3;
op3val:0x3fe3d49781599350; valaddr_reg:x3; val_offset:2205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2205*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11c03ea987949 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x28b6878ec0dd3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3d49781599350 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe11c03ea987949; op2val:0xbff28b6878ec0dd3;
op3val:0x3fe3d49781599350; valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11c03ea987949 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x28b6878ec0dd3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3d49781599350 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe11c03ea987949; op2val:0xbff28b6878ec0dd3;
op3val:0x3fe3d49781599350; valaddr_reg:x3; val_offset:2211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2211*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11c03ea987949 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x28b6878ec0dd3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3d49781599350 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe11c03ea987949; op2val:0xbff28b6878ec0dd3;
op3val:0x3fe3d49781599350; valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11c03ea987949 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x28b6878ec0dd3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3d49781599350 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe11c03ea987949; op2val:0xbff28b6878ec0dd3;
op3val:0x3fe3d49781599350; valaddr_reg:x3; val_offset:2217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2217*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x124274699d746 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x315df80cf1ea5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4725d8945e053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe124274699d746; op2val:0xbff315df80cf1ea5;
op3val:0x3fe4725d8945e053; valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x124274699d746 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x315df80cf1ea5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4725d8945e053 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe124274699d746; op2val:0xbff315df80cf1ea5;
op3val:0x3fe4725d8945e053; valaddr_reg:x3; val_offset:2223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2223*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x124274699d746 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x315df80cf1ea5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4725d8945e053 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe124274699d746; op2val:0xbff315df80cf1ea5;
op3val:0x3fe4725d8945e053; valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x124274699d746 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x315df80cf1ea5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4725d8945e053 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe124274699d746; op2val:0xbff315df80cf1ea5;
op3val:0x3fe4725d8945e053; valaddr_reg:x3; val_offset:2229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2229*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x124274699d746 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x315df80cf1ea5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4725d8945e053 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe124274699d746; op2val:0xbff315df80cf1ea5;
op3val:0x3fe4725d8945e053; valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12f9a92d83ddd and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5d88327cf5f73 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7770a67fe91ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe12f9a92d83ddd; op2val:0xbfd5d88327cf5f73;
op3val:0x3fc7770a67fe91ec; valaddr_reg:x3; val_offset:2235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2235*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12f9a92d83ddd and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5d88327cf5f73 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7770a67fe91ec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe12f9a92d83ddd; op2val:0xbfd5d88327cf5f73;
op3val:0x3fc7770a67fe91ec; valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12f9a92d83ddd and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5d88327cf5f73 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7770a67fe91ec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe12f9a92d83ddd; op2val:0xbfd5d88327cf5f73;
op3val:0x3fc7770a67fe91ec; valaddr_reg:x3; val_offset:2241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2241*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12f9a92d83ddd and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5d88327cf5f73 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7770a67fe91ec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe12f9a92d83ddd; op2val:0xbfd5d88327cf5f73;
op3val:0x3fc7770a67fe91ec; valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12f9a92d83ddd and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5d88327cf5f73 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7770a67fe91ec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe12f9a92d83ddd; op2val:0xbfd5d88327cf5f73;
op3val:0x3fc7770a67fe91ec; valaddr_reg:x3; val_offset:2247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2247*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16b310565690e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ff261bb603c5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x280f6df6ae03a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16b310565690e; op2val:0xbff0ff261bb603c5;
op3val:0x3fe280f6df6ae03a; valaddr_reg:x3; val_offset:2250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2250*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16b310565690e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ff261bb603c5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x280f6df6ae03a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16b310565690e; op2val:0xbff0ff261bb603c5;
op3val:0x3fe280f6df6ae03a; valaddr_reg:x3; val_offset:2253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2253*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16b310565690e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ff261bb603c5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x280f6df6ae03a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16b310565690e; op2val:0xbff0ff261bb603c5;
op3val:0x3fe280f6df6ae03a; valaddr_reg:x3; val_offset:2256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2256*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16b310565690e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ff261bb603c5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x280f6df6ae03a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16b310565690e; op2val:0xbff0ff261bb603c5;
op3val:0x3fe280f6df6ae03a; valaddr_reg:x3; val_offset:2259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2259*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16b310565690e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0ff261bb603c5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x280f6df6ae03a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16b310565690e; op2val:0xbff0ff261bb603c5;
op3val:0x3fe280f6df6ae03a; valaddr_reg:x3; val_offset:2262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2262*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16b9cc541cf3e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x39dabc0c83239 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x55b751c8e8920 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16b9cc541cf3e; op2val:0xbfc39dabc0c83239;
op3val:0x3fb55b751c8e8920; valaddr_reg:x3; val_offset:2265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2265*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16b9cc541cf3e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x39dabc0c83239 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x55b751c8e8920 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16b9cc541cf3e; op2val:0xbfc39dabc0c83239;
op3val:0x3fb55b751c8e8920; valaddr_reg:x3; val_offset:2268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2268*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16b9cc541cf3e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x39dabc0c83239 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x55b751c8e8920 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16b9cc541cf3e; op2val:0xbfc39dabc0c83239;
op3val:0x3fb55b751c8e8920; valaddr_reg:x3; val_offset:2271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2271*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16b9cc541cf3e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x39dabc0c83239 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x55b751c8e8920 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16b9cc541cf3e; op2val:0xbfc39dabc0c83239;
op3val:0x3fb55b751c8e8920; valaddr_reg:x3; val_offset:2274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2274*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16b9cc541cf3e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x39dabc0c83239 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x55b751c8e8920 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16b9cc541cf3e; op2val:0xbfc39dabc0c83239;
op3val:0x3fb55b751c8e8920; valaddr_reg:x3; val_offset:2277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2277*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1cf1cf7049b92 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x452a96e7f1ea4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69ee63fd71067 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1cf1cf7049b92; op2val:0xbff452a96e7f1ea4;
op3val:0x3fe69ee63fd71067; valaddr_reg:x3; val_offset:2280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2280*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1cf1cf7049b92 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x452a96e7f1ea4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69ee63fd71067 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1cf1cf7049b92; op2val:0xbff452a96e7f1ea4;
op3val:0x3fe69ee63fd71067; valaddr_reg:x3; val_offset:2283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2283*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1cf1cf7049b92 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x452a96e7f1ea4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69ee63fd71067 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1cf1cf7049b92; op2val:0xbff452a96e7f1ea4;
op3val:0x3fe69ee63fd71067; valaddr_reg:x3; val_offset:2286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2286*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1cf1cf7049b92 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x452a96e7f1ea4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69ee63fd71067 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1cf1cf7049b92; op2val:0xbff452a96e7f1ea4;
op3val:0x3fe69ee63fd71067; valaddr_reg:x3; val_offset:2289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2289*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1cf1cf7049b92 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x452a96e7f1ea4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69ee63fd71067 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1cf1cf7049b92; op2val:0xbff452a96e7f1ea4;
op3val:0x3fe69ee63fd71067; valaddr_reg:x3; val_offset:2292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2292*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d9a3df6d15ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x504dc3ef3dabe and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7731334ffb074 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1d9a3df6d15ce; op2val:0xbfd504dc3ef3dabe;
op3val:0x3fc7731334ffb074; valaddr_reg:x3; val_offset:2295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2295*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d9a3df6d15ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x504dc3ef3dabe and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7731334ffb074 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1d9a3df6d15ce; op2val:0xbfd504dc3ef3dabe;
op3val:0x3fc7731334ffb074; valaddr_reg:x3; val_offset:2298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2298*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d9a3df6d15ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x504dc3ef3dabe and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7731334ffb074 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1d9a3df6d15ce; op2val:0xbfd504dc3ef3dabe;
op3val:0x3fc7731334ffb074; valaddr_reg:x3; val_offset:2301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2301*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d9a3df6d15ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x504dc3ef3dabe and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7731334ffb074 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1d9a3df6d15ce; op2val:0xbfd504dc3ef3dabe;
op3val:0x3fc7731334ffb074; valaddr_reg:x3; val_offset:2304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2304*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d9a3df6d15ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x504dc3ef3dabe and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7731334ffb074 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1d9a3df6d15ce; op2val:0xbfd504dc3ef3dabe;
op3val:0x3fc7731334ffb074; valaddr_reg:x3; val_offset:2307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2307*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e2c47d80f352 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4081240b0eca3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6647b668dd6c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1e2c47d80f352; op2val:0xbfe4081240b0eca3;
op3val:0x3fd6647b668dd6c0; valaddr_reg:x3; val_offset:2310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2310*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e2c47d80f352 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4081240b0eca3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6647b668dd6c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1e2c47d80f352; op2val:0xbfe4081240b0eca3;
op3val:0x3fd6647b668dd6c0; valaddr_reg:x3; val_offset:2313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2313*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e2c47d80f352 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4081240b0eca3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6647b668dd6c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1e2c47d80f352; op2val:0xbfe4081240b0eca3;
op3val:0x3fd6647b668dd6c0; valaddr_reg:x3; val_offset:2316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2316*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e2c47d80f352 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4081240b0eca3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6647b668dd6c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1e2c47d80f352; op2val:0xbfe4081240b0eca3;
op3val:0x3fd6647b668dd6c0; valaddr_reg:x3; val_offset:2319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2319*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e2c47d80f352 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4081240b0eca3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6647b668dd6c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1e2c47d80f352; op2val:0xbfe4081240b0eca3;
op3val:0x3fd6647b668dd6c0; valaddr_reg:x3; val_offset:2322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2322*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22fc157a25e23 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x34bf4cae7768b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5ef0bb1421277 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe22fc157a25e23; op2val:0xbff34bf4cae7768b;
op3val:0x3fe5ef0bb1421277; valaddr_reg:x3; val_offset:2325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2325*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22fc157a25e23 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x34bf4cae7768b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5ef0bb1421277 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe22fc157a25e23; op2val:0xbff34bf4cae7768b;
op3val:0x3fe5ef0bb1421277; valaddr_reg:x3; val_offset:2328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2328*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22fc157a25e23 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x34bf4cae7768b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5ef0bb1421277 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe22fc157a25e23; op2val:0xbff34bf4cae7768b;
op3val:0x3fe5ef0bb1421277; valaddr_reg:x3; val_offset:2331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2331*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22fc157a25e23 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x34bf4cae7768b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5ef0bb1421277 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe22fc157a25e23; op2val:0xbff34bf4cae7768b;
op3val:0x3fe5ef0bb1421277; valaddr_reg:x3; val_offset:2334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2334*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22fc157a25e23 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x34bf4cae7768b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5ef0bb1421277 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe22fc157a25e23; op2val:0xbff34bf4cae7768b;
op3val:0x3fe5ef0bb1421277; valaddr_reg:x3; val_offset:2337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2337*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2487f902100ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7b135af2bcc57 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb12b6baab6b86 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2487f902100ff; op2val:0xbfe7b135af2bcc57;
op3val:0x3fdb12b6baab6b86; valaddr_reg:x3; val_offset:2340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2340*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2487f902100ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7b135af2bcc57 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb12b6baab6b86 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2487f902100ff; op2val:0xbfe7b135af2bcc57;
op3val:0x3fdb12b6baab6b86; valaddr_reg:x3; val_offset:2343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2343*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2487f902100ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7b135af2bcc57 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb12b6baab6b86 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2487f902100ff; op2val:0xbfe7b135af2bcc57;
op3val:0x3fdb12b6baab6b86; valaddr_reg:x3; val_offset:2346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2346*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2487f902100ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7b135af2bcc57 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb12b6baab6b86 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2487f902100ff; op2val:0xbfe7b135af2bcc57;
op3val:0x3fdb12b6baab6b86; valaddr_reg:x3; val_offset:2349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2349*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2487f902100ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7b135af2bcc57 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb12b6baab6b86 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2487f902100ff; op2val:0xbfe7b135af2bcc57;
op3val:0x3fdb12b6baab6b86; valaddr_reg:x3; val_offset:2352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2352*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25005f59ed49d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7baabb301fede and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb28af5a7ce47c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe25005f59ed49d; op2val:0xbfe7baabb301fede;
op3val:0x3fdb28af5a7ce47c; valaddr_reg:x3; val_offset:2355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2355*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25005f59ed49d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7baabb301fede and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb28af5a7ce47c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe25005f59ed49d; op2val:0xbfe7baabb301fede;
op3val:0x3fdb28af5a7ce47c; valaddr_reg:x3; val_offset:2358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2358*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25005f59ed49d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7baabb301fede and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb28af5a7ce47c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe25005f59ed49d; op2val:0xbfe7baabb301fede;
op3val:0x3fdb28af5a7ce47c; valaddr_reg:x3; val_offset:2361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2361*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25005f59ed49d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7baabb301fede and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb28af5a7ce47c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe25005f59ed49d; op2val:0xbfe7baabb301fede;
op3val:0x3fdb28af5a7ce47c; valaddr_reg:x3; val_offset:2364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2364*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25005f59ed49d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7baabb301fede and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb28af5a7ce47c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe25005f59ed49d; op2val:0xbfe7baabb301fede;
op3val:0x3fdb28af5a7ce47c; valaddr_reg:x3; val_offset:2367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2367*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aa00cec137b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f1e90c78e30c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f44a2a7b04d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe28aa00cec137b; op2val:0xbff2f1e90c78e30c;
op3val:0x3fe5f44a2a7b04d4; valaddr_reg:x3; val_offset:2370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2370*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aa00cec137b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f1e90c78e30c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f44a2a7b04d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe28aa00cec137b; op2val:0xbff2f1e90c78e30c;
op3val:0x3fe5f44a2a7b04d4; valaddr_reg:x3; val_offset:2373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2373*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aa00cec137b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f1e90c78e30c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f44a2a7b04d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe28aa00cec137b; op2val:0xbff2f1e90c78e30c;
op3val:0x3fe5f44a2a7b04d4; valaddr_reg:x3; val_offset:2376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2376*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aa00cec137b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f1e90c78e30c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f44a2a7b04d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe28aa00cec137b; op2val:0xbff2f1e90c78e30c;
op3val:0x3fe5f44a2a7b04d4; valaddr_reg:x3; val_offset:2379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2379*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aa00cec137b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f1e90c78e30c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f44a2a7b04d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe28aa00cec137b; op2val:0xbff2f1e90c78e30c;
op3val:0x3fe5f44a2a7b04d4; valaddr_reg:x3; val_offset:2382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2382*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b44ab7ebdb49 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2a31b36a2fbbd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5c980983823c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2b44ab7ebdb49; op2val:0xbff2a31b36a2fbbd;
op3val:0x3fe5c980983823c5; valaddr_reg:x3; val_offset:2385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2385*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b44ab7ebdb49 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2a31b36a2fbbd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5c980983823c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2b44ab7ebdb49; op2val:0xbff2a31b36a2fbbd;
op3val:0x3fe5c980983823c5; valaddr_reg:x3; val_offset:2388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2388*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b44ab7ebdb49 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2a31b36a2fbbd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5c980983823c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2b44ab7ebdb49; op2val:0xbff2a31b36a2fbbd;
op3val:0x3fe5c980983823c5; valaddr_reg:x3; val_offset:2391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2391*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b44ab7ebdb49 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2a31b36a2fbbd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5c980983823c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2b44ab7ebdb49; op2val:0xbff2a31b36a2fbbd;
op3val:0x3fe5c980983823c5; valaddr_reg:x3; val_offset:2394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2394*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b44ab7ebdb49 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2a31b36a2fbbd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5c980983823c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2b44ab7ebdb49; op2val:0xbff2a31b36a2fbbd;
op3val:0x3fe5c980983823c5; valaddr_reg:x3; val_offset:2397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2397*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2c108c4cab1fd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6e683acde617f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad79d43bb289a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2c108c4cab1fd; op2val:0xbff6e683acde617f;
op3val:0x3fead79d43bb289a; valaddr_reg:x3; val_offset:2400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2400*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2c108c4cab1fd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6e683acde617f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad79d43bb289a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2c108c4cab1fd; op2val:0xbff6e683acde617f;
op3val:0x3fead79d43bb289a; valaddr_reg:x3; val_offset:2403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2403*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2c108c4cab1fd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6e683acde617f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad79d43bb289a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2c108c4cab1fd; op2val:0xbff6e683acde617f;
op3val:0x3fead79d43bb289a; valaddr_reg:x3; val_offset:2406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2406*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2c108c4cab1fd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6e683acde617f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad79d43bb289a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2c108c4cab1fd; op2val:0xbff6e683acde617f;
op3val:0x3fead79d43bb289a; valaddr_reg:x3; val_offset:2409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2409*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2c108c4cab1fd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6e683acde617f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad79d43bb289a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2c108c4cab1fd; op2val:0xbff6e683acde617f;
op3val:0x3fead79d43bb289a; valaddr_reg:x3; val_offset:2412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2412*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dfe5ab522b1c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9e838ef55b053 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe8fc887ddee90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2dfe5ab522b1c; op2val:0xbff9e838ef55b053;
op3val:0x3fee8fc887ddee90; valaddr_reg:x3; val_offset:2415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2415*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dfe5ab522b1c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9e838ef55b053 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe8fc887ddee90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2dfe5ab522b1c; op2val:0xbff9e838ef55b053;
op3val:0x3fee8fc887ddee90; valaddr_reg:x3; val_offset:2418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2418*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dfe5ab522b1c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9e838ef55b053 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe8fc887ddee90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2dfe5ab522b1c; op2val:0xbff9e838ef55b053;
op3val:0x3fee8fc887ddee90; valaddr_reg:x3; val_offset:2421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2421*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dfe5ab522b1c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9e838ef55b053 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe8fc887ddee90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2dfe5ab522b1c; op2val:0xbff9e838ef55b053;
op3val:0x3fee8fc887ddee90; valaddr_reg:x3; val_offset:2424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2424*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dfe5ab522b1c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9e838ef55b053 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe8fc887ddee90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2dfe5ab522b1c; op2val:0xbff9e838ef55b053;
op3val:0x3fee8fc887ddee90; valaddr_reg:x3; val_offset:2427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2427*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302f71fdf68e1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x48a0c464b0f32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x867bd1109ab09 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe302f71fdf68e1; op2val:0xbff48a0c464b0f32;
op3val:0x3fe867bd1109ab09; valaddr_reg:x3; val_offset:2430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2430*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302f71fdf68e1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x48a0c464b0f32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x867bd1109ab09 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe302f71fdf68e1; op2val:0xbff48a0c464b0f32;
op3val:0x3fe867bd1109ab09; valaddr_reg:x3; val_offset:2433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2433*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302f71fdf68e1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x48a0c464b0f32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x867bd1109ab09 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe302f71fdf68e1; op2val:0xbff48a0c464b0f32;
op3val:0x3fe867bd1109ab09; valaddr_reg:x3; val_offset:2436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2436*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302f71fdf68e1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x48a0c464b0f32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x867bd1109ab09 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe302f71fdf68e1; op2val:0xbff48a0c464b0f32;
op3val:0x3fe867bd1109ab09; valaddr_reg:x3; val_offset:2439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2439*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302f71fdf68e1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x48a0c464b0f32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x867bd1109ab09 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe302f71fdf68e1; op2val:0xbff48a0c464b0f32;
op3val:0x3fe867bd1109ab09; valaddr_reg:x3; val_offset:2442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2442*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3142838647eb1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6e78c86fb4af7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb4fd1e38cbcfb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3142838647eb1; op2val:0xbff6e78c86fb4af7;
op3val:0x3feb4fd1e38cbcfb; valaddr_reg:x3; val_offset:2445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2445*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3142838647eb1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6e78c86fb4af7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb4fd1e38cbcfb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3142838647eb1; op2val:0xbff6e78c86fb4af7;
op3val:0x3feb4fd1e38cbcfb; valaddr_reg:x3; val_offset:2448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2448*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3142838647eb1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6e78c86fb4af7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb4fd1e38cbcfb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3142838647eb1; op2val:0xbff6e78c86fb4af7;
op3val:0x3feb4fd1e38cbcfb; valaddr_reg:x3; val_offset:2451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2451*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3142838647eb1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6e78c86fb4af7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb4fd1e38cbcfb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3142838647eb1; op2val:0xbff6e78c86fb4af7;
op3val:0x3feb4fd1e38cbcfb; valaddr_reg:x3; val_offset:2454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2454*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3142838647eb1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6e78c86fb4af7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb4fd1e38cbcfb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3142838647eb1; op2val:0xbff6e78c86fb4af7;
op3val:0x3feb4fd1e38cbcfb; valaddr_reg:x3; val_offset:2457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2457*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31fe31f3f6d80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9186faa2c411f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdff082e2155b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe31fe31f3f6d80; op2val:0xbfe9186faa2c411f;
op3val:0x3fddff082e2155b8; valaddr_reg:x3; val_offset:2460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2460*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31fe31f3f6d80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9186faa2c411f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdff082e2155b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe31fe31f3f6d80; op2val:0xbfe9186faa2c411f;
op3val:0x3fddff082e2155b8; valaddr_reg:x3; val_offset:2463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2463*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31fe31f3f6d80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9186faa2c411f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdff082e2155b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe31fe31f3f6d80; op2val:0xbfe9186faa2c411f;
op3val:0x3fddff082e2155b8; valaddr_reg:x3; val_offset:2466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2466*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31fe31f3f6d80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9186faa2c411f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdff082e2155b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe31fe31f3f6d80; op2val:0xbfe9186faa2c411f;
op3val:0x3fddff082e2155b8; valaddr_reg:x3; val_offset:2469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2469*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31fe31f3f6d80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9186faa2c411f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdff082e2155b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe31fe31f3f6d80; op2val:0xbfe9186faa2c411f;
op3val:0x3fddff082e2155b8; valaddr_reg:x3; val_offset:2472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2472*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x32a6da45a7263 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x692c2b4d8bf28 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xb0a23258a72a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe32a6da45a7263; op2val:0xbfa692c2b4d8bf28;
op3val:0x3f9b0a23258a72a0; valaddr_reg:x3; val_offset:2475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2475*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x32a6da45a7263 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x692c2b4d8bf28 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xb0a23258a72a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe32a6da45a7263; op2val:0xbfa692c2b4d8bf28;
op3val:0x3f9b0a23258a72a0; valaddr_reg:x3; val_offset:2478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2478*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x32a6da45a7263 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x692c2b4d8bf28 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xb0a23258a72a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe32a6da45a7263; op2val:0xbfa692c2b4d8bf28;
op3val:0x3f9b0a23258a72a0; valaddr_reg:x3; val_offset:2481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2481*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x32a6da45a7263 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x692c2b4d8bf28 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xb0a23258a72a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe32a6da45a7263; op2val:0xbfa692c2b4d8bf28;
op3val:0x3f9b0a23258a72a0; valaddr_reg:x3; val_offset:2484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2484*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x32a6da45a7263 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x692c2b4d8bf28 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xb0a23258a72a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe32a6da45a7263; op2val:0xbfa692c2b4d8bf28;
op3val:0x3f9b0a23258a72a0; valaddr_reg:x3; val_offset:2487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2487*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34929d8dfb1c8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8f393a4e458bb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe1357e7cef306 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34929d8dfb1c8; op2val:0xbff8f393a4e458bb;
op3val:0x3fee1357e7cef306; valaddr_reg:x3; val_offset:2490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2490*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34929d8dfb1c8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8f393a4e458bb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe1357e7cef306 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34929d8dfb1c8; op2val:0xbff8f393a4e458bb;
op3val:0x3fee1357e7cef306; valaddr_reg:x3; val_offset:2493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2493*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34929d8dfb1c8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8f393a4e458bb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe1357e7cef306 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34929d8dfb1c8; op2val:0xbff8f393a4e458bb;
op3val:0x3fee1357e7cef306; valaddr_reg:x3; val_offset:2496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2496*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34929d8dfb1c8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8f393a4e458bb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe1357e7cef306 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34929d8dfb1c8; op2val:0xbff8f393a4e458bb;
op3val:0x3fee1357e7cef306; valaddr_reg:x3; val_offset:2499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2499*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34929d8dfb1c8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8f393a4e458bb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe1357e7cef306 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34929d8dfb1c8; op2val:0xbff8f393a4e458bb;
op3val:0x3fee1357e7cef306; valaddr_reg:x3; val_offset:2502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2502*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a7f3ea7cc929 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x67e8cf7ab880c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xba267311beea1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a7f3ea7cc929; op2val:0xbff67e8cf7ab880c;
op3val:0x3feba267311beea1; valaddr_reg:x3; val_offset:2505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2505*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a7f3ea7cc929 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x67e8cf7ab880c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xba267311beea1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a7f3ea7cc929; op2val:0xbff67e8cf7ab880c;
op3val:0x3feba267311beea1; valaddr_reg:x3; val_offset:2508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2508*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a7f3ea7cc929 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x67e8cf7ab880c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xba267311beea1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a7f3ea7cc929; op2val:0xbff67e8cf7ab880c;
op3val:0x3feba267311beea1; valaddr_reg:x3; val_offset:2511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2511*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a7f3ea7cc929 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x67e8cf7ab880c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xba267311beea1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a7f3ea7cc929; op2val:0xbff67e8cf7ab880c;
op3val:0x3feba267311beea1; valaddr_reg:x3; val_offset:2514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2514*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a7f3ea7cc929 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x67e8cf7ab880c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xba267311beea1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a7f3ea7cc929; op2val:0xbff67e8cf7ab880c;
op3val:0x3feba267311beea1; valaddr_reg:x3; val_offset:2517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2517*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3aa343618dcee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfaac8a2441607 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x375d615454bc2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3aa343618dcee; op2val:0xbfefaac8a2441607;
op3val:0x3fe375d615454bc2; valaddr_reg:x3; val_offset:2520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2520*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3aa343618dcee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfaac8a2441607 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x375d615454bc2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3aa343618dcee; op2val:0xbfefaac8a2441607;
op3val:0x3fe375d615454bc2; valaddr_reg:x3; val_offset:2523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2523*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3aa343618dcee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfaac8a2441607 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x375d615454bc2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3aa343618dcee; op2val:0xbfefaac8a2441607;
op3val:0x3fe375d615454bc2; valaddr_reg:x3; val_offset:2526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2526*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3aa343618dcee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfaac8a2441607 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x375d615454bc2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3aa343618dcee; op2val:0xbfefaac8a2441607;
op3val:0x3fe375d615454bc2; valaddr_reg:x3; val_offset:2529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2529*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3aa343618dcee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfaac8a2441607 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x375d615454bc2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3aa343618dcee; op2val:0xbfefaac8a2441607;
op3val:0x3fe375d615454bc2; valaddr_reg:x3; val_offset:2532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2532*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3c355f1c09536 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x688604093980e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd5096ab702e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3c355f1c09536; op2val:0xbff688604093980e;
op3val:0x3febd5096ab702e0; valaddr_reg:x3; val_offset:2535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2535*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3c355f1c09536 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x688604093980e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd5096ab702e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3c355f1c09536; op2val:0xbff688604093980e;
op3val:0x3febd5096ab702e0; valaddr_reg:x3; val_offset:2538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2538*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3c355f1c09536 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x688604093980e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd5096ab702e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3c355f1c09536; op2val:0xbff688604093980e;
op3val:0x3febd5096ab702e0; valaddr_reg:x3; val_offset:2541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2541*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3c355f1c09536 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x688604093980e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd5096ab702e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3c355f1c09536; op2val:0xbff688604093980e;
op3val:0x3febd5096ab702e0; valaddr_reg:x3; val_offset:2544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2544*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3c355f1c09536 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x688604093980e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd5096ab702e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3c355f1c09536; op2val:0xbff688604093980e;
op3val:0x3febd5096ab702e0; valaddr_reg:x3; val_offset:2547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2547*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ef9c20b63737 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x3163170cc2055 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x7c83077df1c80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ef9c20b63737; op2val:0xbf93163170cc2055;
op3val:0x3f87c83077df1c80; valaddr_reg:x3; val_offset:2550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2550*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ef9c20b63737 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x3163170cc2055 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x7c83077df1c80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ef9c20b63737; op2val:0xbf93163170cc2055;
op3val:0x3f87c83077df1c80; valaddr_reg:x3; val_offset:2553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2553*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ef9c20b63737 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x3163170cc2055 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x7c83077df1c80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ef9c20b63737; op2val:0xbf93163170cc2055;
op3val:0x3f87c83077df1c80; valaddr_reg:x3; val_offset:2556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2556*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ef9c20b63737 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x3163170cc2055 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x7c83077df1c80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ef9c20b63737; op2val:0xbf93163170cc2055;
op3val:0x3f87c83077df1c80; valaddr_reg:x3; val_offset:2559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2559*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ef9c20b63737 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x3163170cc2055 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x7c83077df1c80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ef9c20b63737; op2val:0xbf93163170cc2055;
op3val:0x3f87c83077df1c80; valaddr_reg:x3; val_offset:2562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2562*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f2a875e925ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33ebcb5fefd67 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7fe5f9ef027c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f2a875e925ef; op2val:0xbfe33ebcb5fefd67;
op3val:0x3fd7fe5f9ef027c8; valaddr_reg:x3; val_offset:2565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2565*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f2a875e925ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33ebcb5fefd67 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7fe5f9ef027c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f2a875e925ef; op2val:0xbfe33ebcb5fefd67;
op3val:0x3fd7fe5f9ef027c8; valaddr_reg:x3; val_offset:2568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2568*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f2a875e925ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33ebcb5fefd67 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7fe5f9ef027c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f2a875e925ef; op2val:0xbfe33ebcb5fefd67;
op3val:0x3fd7fe5f9ef027c8; valaddr_reg:x3; val_offset:2571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2571*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f2a875e925ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33ebcb5fefd67 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7fe5f9ef027c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f2a875e925ef; op2val:0xbfe33ebcb5fefd67;
op3val:0x3fd7fe5f9ef027c8; valaddr_reg:x3; val_offset:2574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2574*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f2a875e925ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33ebcb5fefd67 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7fe5f9ef027c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f2a875e925ef; op2val:0xbfe33ebcb5fefd67;
op3val:0x3fd7fe5f9ef027c8; valaddr_reg:x3; val_offset:2577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2577*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f90cfa487f90 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd23288c9dfe30 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x22fa57817e116 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f90cfa487f90; op2val:0xbfed23288c9dfe30;
op3val:0x3fe22fa57817e116; valaddr_reg:x3; val_offset:2580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2580*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f90cfa487f90 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd23288c9dfe30 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x22fa57817e116 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f90cfa487f90; op2val:0xbfed23288c9dfe30;
op3val:0x3fe22fa57817e116; valaddr_reg:x3; val_offset:2583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2583*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f90cfa487f90 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd23288c9dfe30 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x22fa57817e116 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f90cfa487f90; op2val:0xbfed23288c9dfe30;
op3val:0x3fe22fa57817e116; valaddr_reg:x3; val_offset:2586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2586*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f90cfa487f90 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd23288c9dfe30 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x22fa57817e116 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f90cfa487f90; op2val:0xbfed23288c9dfe30;
op3val:0x3fe22fa57817e116; valaddr_reg:x3; val_offset:2589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2589*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f90cfa487f90 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd23288c9dfe30 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x22fa57817e116 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f90cfa487f90; op2val:0xbfed23288c9dfe30;
op3val:0x3fe22fa57817e116; valaddr_reg:x3; val_offset:2592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2592*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x402ff5c861340 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf6f994acbeb42 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3a8b1a4863ac3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe402ff5c861340; op2val:0xbfef6f994acbeb42;
op3val:0x3fe3a8b1a4863ac3; valaddr_reg:x3; val_offset:2595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2595*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x402ff5c861340 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf6f994acbeb42 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3a8b1a4863ac3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe402ff5c861340; op2val:0xbfef6f994acbeb42;
op3val:0x3fe3a8b1a4863ac3; valaddr_reg:x3; val_offset:2598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2598*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x402ff5c861340 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf6f994acbeb42 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3a8b1a4863ac3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe402ff5c861340; op2val:0xbfef6f994acbeb42;
op3val:0x3fe3a8b1a4863ac3; valaddr_reg:x3; val_offset:2601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2601*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x402ff5c861340 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf6f994acbeb42 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3a8b1a4863ac3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe402ff5c861340; op2val:0xbfef6f994acbeb42;
op3val:0x3fe3a8b1a4863ac3; valaddr_reg:x3; val_offset:2604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2604*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x402ff5c861340 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf6f994acbeb42 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3a8b1a4863ac3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe402ff5c861340; op2val:0xbfef6f994acbeb42;
op3val:0x3fe3a8b1a4863ac3; valaddr_reg:x3; val_offset:2607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2607*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4092d88247c04 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8a1f5a868521a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xed89445ccde62 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4092d88247c04; op2val:0xbff8a1f5a868521a;
op3val:0x3feed89445ccde62; valaddr_reg:x3; val_offset:2610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2610*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4092d88247c04 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8a1f5a868521a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xed89445ccde62 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4092d88247c04; op2val:0xbff8a1f5a868521a;
op3val:0x3feed89445ccde62; valaddr_reg:x3; val_offset:2613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2613*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4092d88247c04 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8a1f5a868521a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xed89445ccde62 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4092d88247c04; op2val:0xbff8a1f5a868521a;
op3val:0x3feed89445ccde62; valaddr_reg:x3; val_offset:2616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2616*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4092d88247c04 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8a1f5a868521a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xed89445ccde62 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4092d88247c04; op2val:0xbff8a1f5a868521a;
op3val:0x3feed89445ccde62; valaddr_reg:x3; val_offset:2619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2619*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4092d88247c04 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8a1f5a868521a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xed89445ccde62 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4092d88247c04; op2val:0xbff8a1f5a868521a;
op3val:0x3feed89445ccde62; valaddr_reg:x3; val_offset:2622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2622*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40a22dc7537a8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x70831d1736016 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcd8d593b66657 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40a22dc7537a8; op2val:0xbff70831d1736016;
op3val:0x3fecd8d593b66657; valaddr_reg:x3; val_offset:2625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2625*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40a22dc7537a8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x70831d1736016 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcd8d593b66657 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40a22dc7537a8; op2val:0xbff70831d1736016;
op3val:0x3fecd8d593b66657; valaddr_reg:x3; val_offset:2628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2628*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40a22dc7537a8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x70831d1736016 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcd8d593b66657 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40a22dc7537a8; op2val:0xbff70831d1736016;
op3val:0x3fecd8d593b66657; valaddr_reg:x3; val_offset:2631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2631*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40a22dc7537a8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x70831d1736016 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcd8d593b66657 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40a22dc7537a8; op2val:0xbff70831d1736016;
op3val:0x3fecd8d593b66657; valaddr_reg:x3; val_offset:2634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2634*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40a22dc7537a8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x70831d1736016 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcd8d593b66657 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40a22dc7537a8; op2val:0xbff70831d1736016;
op3val:0x3fecd8d593b66657; valaddr_reg:x3; val_offset:2637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2637*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42d8676214ef3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c4b37b96f7d8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb73d0835f7642 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42d8676214ef3; op2val:0xbff5c4b37b96f7d8;
op3val:0x3feb73d0835f7642; valaddr_reg:x3; val_offset:2640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2640*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42d8676214ef3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c4b37b96f7d8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb73d0835f7642 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42d8676214ef3; op2val:0xbff5c4b37b96f7d8;
op3val:0x3feb73d0835f7642; valaddr_reg:x3; val_offset:2643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2643*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42d8676214ef3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c4b37b96f7d8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb73d0835f7642 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42d8676214ef3; op2val:0xbff5c4b37b96f7d8;
op3val:0x3feb73d0835f7642; valaddr_reg:x3; val_offset:2646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2646*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42d8676214ef3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c4b37b96f7d8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb73d0835f7642 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42d8676214ef3; op2val:0xbff5c4b37b96f7d8;
op3val:0x3feb73d0835f7642; valaddr_reg:x3; val_offset:2649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2649*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42d8676214ef3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c4b37b96f7d8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb73d0835f7642 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42d8676214ef3; op2val:0xbff5c4b37b96f7d8;
op3val:0x3feb73d0835f7642; valaddr_reg:x3; val_offset:2652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2652*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x43169f6bc597d and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x92d0ba3c9b9f0 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xfc60f3c3b1620 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe43169f6bc597d; op2val:0xbfb92d0ba3c9b9f0;
op3val:0x3fafc60f3c3b1620; valaddr_reg:x3; val_offset:2655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2655*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x43169f6bc597d and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x92d0ba3c9b9f0 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xfc60f3c3b1620 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe43169f6bc597d; op2val:0xbfb92d0ba3c9b9f0;
op3val:0x3fafc60f3c3b1620; valaddr_reg:x3; val_offset:2658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2658*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x43169f6bc597d and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x92d0ba3c9b9f0 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xfc60f3c3b1620 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe43169f6bc597d; op2val:0xbfb92d0ba3c9b9f0;
op3val:0x3fafc60f3c3b1620; valaddr_reg:x3; val_offset:2661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2661*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x43169f6bc597d and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x92d0ba3c9b9f0 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xfc60f3c3b1620 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe43169f6bc597d; op2val:0xbfb92d0ba3c9b9f0;
op3val:0x3fafc60f3c3b1620; valaddr_reg:x3; val_offset:2664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2664*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x43169f6bc597d and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x92d0ba3c9b9f0 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xfc60f3c3b1620 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe43169f6bc597d; op2val:0xbfb92d0ba3c9b9f0;
op3val:0x3fafc60f3c3b1620; valaddr_reg:x3; val_offset:2667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2667*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x448377e7e9a11 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54799b8ed1102 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xaf98c29452710 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe448377e7e9a11; op2val:0xbfe54799b8ed1102;
op3val:0x3fdaf98c29452710; valaddr_reg:x3; val_offset:2670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2670*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x448377e7e9a11 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54799b8ed1102 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xaf98c29452710 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe448377e7e9a11; op2val:0xbfe54799b8ed1102;
op3val:0x3fdaf98c29452710; valaddr_reg:x3; val_offset:2673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2673*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x448377e7e9a11 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54799b8ed1102 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xaf98c29452710 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe448377e7e9a11; op2val:0xbfe54799b8ed1102;
op3val:0x3fdaf98c29452710; valaddr_reg:x3; val_offset:2676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2676*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x448377e7e9a11 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54799b8ed1102 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xaf98c29452710 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe448377e7e9a11; op2val:0xbfe54799b8ed1102;
op3val:0x3fdaf98c29452710; valaddr_reg:x3; val_offset:2679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2679*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x448377e7e9a11 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54799b8ed1102 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xaf98c29452710 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe448377e7e9a11; op2val:0xbfe54799b8ed1102;
op3val:0x3fdaf98c29452710; valaddr_reg:x3; val_offset:2682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2682*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x45809dd472479 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x151b1424ab809 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x605698f4318ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe45809dd472479; op2val:0xbff151b1424ab809;
op3val:0x3fe605698f4318ab; valaddr_reg:x3; val_offset:2685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2685*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x45809dd472479 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x151b1424ab809 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x605698f4318ab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe45809dd472479; op2val:0xbff151b1424ab809;
op3val:0x3fe605698f4318ab; valaddr_reg:x3; val_offset:2688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2688*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x45809dd472479 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x151b1424ab809 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x605698f4318ab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe45809dd472479; op2val:0xbff151b1424ab809;
op3val:0x3fe605698f4318ab; valaddr_reg:x3; val_offset:2691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2691*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x45809dd472479 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x151b1424ab809 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x605698f4318ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe45809dd472479; op2val:0xbff151b1424ab809;
op3val:0x3fe605698f4318ab; valaddr_reg:x3; val_offset:2694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2694*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x45809dd472479 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x151b1424ab809 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x605698f4318ab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe45809dd472479; op2val:0xbff151b1424ab809;
op3val:0x3fe605698f4318ab; valaddr_reg:x3; val_offset:2697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2697*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x45ec459c3431b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdb65d7f7913af and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2e9f872a74e60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe45ec459c3431b; op2val:0xbfddb65d7f7913af;
op3val:0x3fd2e9f872a74e60; valaddr_reg:x3; val_offset:2700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2700*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x45ec459c3431b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdb65d7f7913af and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2e9f872a74e60 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe45ec459c3431b; op2val:0xbfddb65d7f7913af;
op3val:0x3fd2e9f872a74e60; valaddr_reg:x3; val_offset:2703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2703*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x45ec459c3431b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdb65d7f7913af and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2e9f872a74e60 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe45ec459c3431b; op2val:0xbfddb65d7f7913af;
op3val:0x3fd2e9f872a74e60; valaddr_reg:x3; val_offset:2706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2706*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x45ec459c3431b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdb65d7f7913af and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2e9f872a74e60 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe45ec459c3431b; op2val:0xbfddb65d7f7913af;
op3val:0x3fd2e9f872a74e60; valaddr_reg:x3; val_offset:2709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2709*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x45ec459c3431b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdb65d7f7913af and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2e9f872a74e60 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe45ec459c3431b; op2val:0xbfddb65d7f7913af;
op3val:0x3fd2e9f872a74e60; valaddr_reg:x3; val_offset:2712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2712*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47003f7bf6069 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x57132675e762e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb639cb3470ef0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47003f7bf6069; op2val:0xbfd57132675e762e;
op3val:0x3fcb639cb3470ef0; valaddr_reg:x3; val_offset:2715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2715*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47003f7bf6069 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x57132675e762e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb639cb3470ef0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47003f7bf6069; op2val:0xbfd57132675e762e;
op3val:0x3fcb639cb3470ef0; valaddr_reg:x3; val_offset:2718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2718*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47003f7bf6069 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x57132675e762e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb639cb3470ef0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47003f7bf6069; op2val:0xbfd57132675e762e;
op3val:0x3fcb639cb3470ef0; valaddr_reg:x3; val_offset:2721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2721*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47003f7bf6069 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x57132675e762e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb639cb3470ef0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47003f7bf6069; op2val:0xbfd57132675e762e;
op3val:0x3fcb639cb3470ef0; valaddr_reg:x3; val_offset:2724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2724*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47003f7bf6069 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x57132675e762e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb639cb3470ef0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47003f7bf6069; op2val:0xbfd57132675e762e;
op3val:0x3fcb639cb3470ef0; valaddr_reg:x3; val_offset:2727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2727*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47121ce5722b2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4e3d3054e6e2e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xab07cec41bf92 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47121ce5722b2; op2val:0xbff4e3d3054e6e2e;
op3val:0x3feab07cec41bf92; valaddr_reg:x3; val_offset:2730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2730*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47121ce5722b2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4e3d3054e6e2e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xab07cec41bf92 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47121ce5722b2; op2val:0xbff4e3d3054e6e2e;
op3val:0x3feab07cec41bf92; valaddr_reg:x3; val_offset:2733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2733*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47121ce5722b2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4e3d3054e6e2e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xab07cec41bf92 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47121ce5722b2; op2val:0xbff4e3d3054e6e2e;
op3val:0x3feab07cec41bf92; valaddr_reg:x3; val_offset:2736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2736*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47121ce5722b2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4e3d3054e6e2e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xab07cec41bf92 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47121ce5722b2; op2val:0xbff4e3d3054e6e2e;
op3val:0x3feab07cec41bf92; valaddr_reg:x3; val_offset:2739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2739*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47121ce5722b2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4e3d3054e6e2e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xab07cec41bf92 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47121ce5722b2; op2val:0xbff4e3d3054e6e2e;
op3val:0x3feab07cec41bf92; valaddr_reg:x3; val_offset:2742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2742*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4cc6e1c4f87e1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xef15a53cdef9a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x41c858d3d8cf0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4cc6e1c4f87e1; op2val:0xbfcef15a53cdef9a;
op3val:0x3fc41c858d3d8cf0; valaddr_reg:x3; val_offset:2745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2745*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4cc6e1c4f87e1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xef15a53cdef9a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x41c858d3d8cf0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4cc6e1c4f87e1; op2val:0xbfcef15a53cdef9a;
op3val:0x3fc41c858d3d8cf0; valaddr_reg:x3; val_offset:2748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2748*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4cc6e1c4f87e1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xef15a53cdef9a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x41c858d3d8cf0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4cc6e1c4f87e1; op2val:0xbfcef15a53cdef9a;
op3val:0x3fc41c858d3d8cf0; valaddr_reg:x3; val_offset:2751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2751*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4cc6e1c4f87e1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xef15a53cdef9a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x41c858d3d8cf0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4cc6e1c4f87e1; op2val:0xbfcef15a53cdef9a;
op3val:0x3fc41c858d3d8cf0; valaddr_reg:x3; val_offset:2754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2754*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4cc6e1c4f87e1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xef15a53cdef9a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x41c858d3d8cf0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4cc6e1c4f87e1; op2val:0xbfcef15a53cdef9a;
op3val:0x3fc41c858d3d8cf0; valaddr_reg:x3; val_offset:2757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2757*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4de214ee78d25 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17759170e66fc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c7abad3c3f98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4de214ee78d25; op2val:0xbfe17759170e66fc;
op3val:0x3fd6c7abad3c3f98; valaddr_reg:x3; val_offset:2760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2760*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4de214ee78d25 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17759170e66fc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c7abad3c3f98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4de214ee78d25; op2val:0xbfe17759170e66fc;
op3val:0x3fd6c7abad3c3f98; valaddr_reg:x3; val_offset:2763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2763*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4de214ee78d25 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17759170e66fc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c7abad3c3f98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4de214ee78d25; op2val:0xbfe17759170e66fc;
op3val:0x3fd6c7abad3c3f98; valaddr_reg:x3; val_offset:2766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2766*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4de214ee78d25 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17759170e66fc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c7abad3c3f98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4de214ee78d25; op2val:0xbfe17759170e66fc;
op3val:0x3fd6c7abad3c3f98; valaddr_reg:x3; val_offset:2769*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2769*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4de214ee78d25 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17759170e66fc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c7abad3c3f98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4de214ee78d25; op2val:0xbfe17759170e66fc;
op3val:0x3fd6c7abad3c3f98; valaddr_reg:x3; val_offset:2772*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2772*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4fad2fdf3343f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf7de8aa740800 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4a588b86ddd25 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4fad2fdf3343f; op2val:0xbfef7de8aa740800;
op3val:0x3fe4a588b86ddd25; valaddr_reg:x3; val_offset:2775*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2775*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4fad2fdf3343f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf7de8aa740800 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4a588b86ddd25 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4fad2fdf3343f; op2val:0xbfef7de8aa740800;
op3val:0x3fe4a588b86ddd25; valaddr_reg:x3; val_offset:2778*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2778*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4fad2fdf3343f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf7de8aa740800 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4a588b86ddd25 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4fad2fdf3343f; op2val:0xbfef7de8aa740800;
op3val:0x3fe4a588b86ddd25; valaddr_reg:x3; val_offset:2781*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2781*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4fad2fdf3343f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf7de8aa740800 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4a588b86ddd25 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4fad2fdf3343f; op2val:0xbfef7de8aa740800;
op3val:0x3fe4a588b86ddd25; valaddr_reg:x3; val_offset:2784*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2784*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4fad2fdf3343f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf7de8aa740800 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4a588b86ddd25 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4fad2fdf3343f; op2val:0xbfef7de8aa740800;
op3val:0x3fe4a588b86ddd25; valaddr_reg:x3; val_offset:2787*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2787*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51f0d32e5b518 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xd667c31fd3c16 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x367c8e9843ee8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe51f0d32e5b518; op2val:0xbfbd667c31fd3c16;
op3val:0x3fb367c8e9843ee8; valaddr_reg:x3; val_offset:2790*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2790*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51f0d32e5b518 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xd667c31fd3c16 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x367c8e9843ee8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe51f0d32e5b518; op2val:0xbfbd667c31fd3c16;
op3val:0x3fb367c8e9843ee8; valaddr_reg:x3; val_offset:2793*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2793*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51f0d32e5b518 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xd667c31fd3c16 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x367c8e9843ee8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe51f0d32e5b518; op2val:0xbfbd667c31fd3c16;
op3val:0x3fb367c8e9843ee8; valaddr_reg:x3; val_offset:2796*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2796*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51f0d32e5b518 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xd667c31fd3c16 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x367c8e9843ee8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe51f0d32e5b518; op2val:0xbfbd667c31fd3c16;
op3val:0x3fb367c8e9843ee8; valaddr_reg:x3; val_offset:2799*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2799*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51f0d32e5b518 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xd667c31fd3c16 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x367c8e9843ee8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe51f0d32e5b518; op2val:0xbfbd667c31fd3c16;
op3val:0x3fb367c8e9843ee8; valaddr_reg:x3; val_offset:2802*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2802*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ff2ebbc649d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0acd705626c79 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x614d31a941ec7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe52ff2ebbc649d; op2val:0xbff0acd705626c79;
op3val:0x3fe614d31a941ec7; valaddr_reg:x3; val_offset:2805*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2805*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ff2ebbc649d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0acd705626c79 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x614d31a941ec7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe52ff2ebbc649d; op2val:0xbff0acd705626c79;
op3val:0x3fe614d31a941ec7; valaddr_reg:x3; val_offset:2808*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2808*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ff2ebbc649d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0acd705626c79 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x614d31a941ec7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe52ff2ebbc649d; op2val:0xbff0acd705626c79;
op3val:0x3fe614d31a941ec7; valaddr_reg:x3; val_offset:2811*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2811*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ff2ebbc649d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0acd705626c79 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x614d31a941ec7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe52ff2ebbc649d; op2val:0xbff0acd705626c79;
op3val:0x3fe614d31a941ec7; valaddr_reg:x3; val_offset:2814*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2814*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ff2ebbc649d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0acd705626c79 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x614d31a941ec7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe52ff2ebbc649d; op2val:0xbff0acd705626c79;
op3val:0x3fe614d31a941ec7; valaddr_reg:x3; val_offset:2817*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2817*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5a7a39f91d82a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33fd85d8eeafd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa0d7b37823e0c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5a7a39f91d82a; op2val:0xbfd33fd85d8eeafd;
op3val:0x3fca0d7b37823e0c; valaddr_reg:x3; val_offset:2820*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2820*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5a7a39f91d82a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33fd85d8eeafd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa0d7b37823e0c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5a7a39f91d82a; op2val:0xbfd33fd85d8eeafd;
op3val:0x3fca0d7b37823e0c; valaddr_reg:x3; val_offset:2823*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2823*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5a7a39f91d82a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33fd85d8eeafd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa0d7b37823e0c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5a7a39f91d82a; op2val:0xbfd33fd85d8eeafd;
op3val:0x3fca0d7b37823e0c; valaddr_reg:x3; val_offset:2826*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2826*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5a7a39f91d82a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33fd85d8eeafd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa0d7b37823e0c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5a7a39f91d82a; op2val:0xbfd33fd85d8eeafd;
op3val:0x3fca0d7b37823e0c; valaddr_reg:x3; val_offset:2829*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2829*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5a7a39f91d82a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33fd85d8eeafd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa0d7b37823e0c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5a7a39f91d82a; op2val:0xbfd33fd85d8eeafd;
op3val:0x3fca0d7b37823e0c; valaddr_reg:x3; val_offset:2832*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2832*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5d8430c20c9b8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x32ed7b9397a0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa30c3e611c117 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5d8430c20c9b8; op2val:0xbff32ed7b9397a0f;
op3val:0x3fea30c3e611c117; valaddr_reg:x3; val_offset:2835*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2835*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5d8430c20c9b8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x32ed7b9397a0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa30c3e611c117 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5d8430c20c9b8; op2val:0xbff32ed7b9397a0f;
op3val:0x3fea30c3e611c117; valaddr_reg:x3; val_offset:2838*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2838*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5d8430c20c9b8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x32ed7b9397a0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa30c3e611c117 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5d8430c20c9b8; op2val:0xbff32ed7b9397a0f;
op3val:0x3fea30c3e611c117; valaddr_reg:x3; val_offset:2841*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2841*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5d8430c20c9b8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x32ed7b9397a0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa30c3e611c117 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5d8430c20c9b8; op2val:0xbff32ed7b9397a0f;
op3val:0x3fea30c3e611c117; valaddr_reg:x3; val_offset:2844*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2844*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5d8430c20c9b8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x32ed7b9397a0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa30c3e611c117 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5d8430c20c9b8; op2val:0xbff32ed7b9397a0f;
op3val:0x3fea30c3e611c117; valaddr_reg:x3; val_offset:2847*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2847*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dcc646c67b18 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x34347daab5068 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa521a20ce0e4a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5dcc646c67b18; op2val:0xbff34347daab5068;
op3val:0x3fea521a20ce0e4a; valaddr_reg:x3; val_offset:2850*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2850*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dcc646c67b18 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x34347daab5068 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa521a20ce0e4a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5dcc646c67b18; op2val:0xbff34347daab5068;
op3val:0x3fea521a20ce0e4a; valaddr_reg:x3; val_offset:2853*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2853*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dcc646c67b18 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x34347daab5068 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa521a20ce0e4a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5dcc646c67b18; op2val:0xbff34347daab5068;
op3val:0x3fea521a20ce0e4a; valaddr_reg:x3; val_offset:2856*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2856*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dcc646c67b18 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x34347daab5068 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa521a20ce0e4a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5dcc646c67b18; op2val:0xbff34347daab5068;
op3val:0x3fea521a20ce0e4a; valaddr_reg:x3; val_offset:2859*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2859*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dcc646c67b18 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x34347daab5068 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa521a20ce0e4a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5dcc646c67b18; op2val:0xbff34347daab5068;
op3val:0x3fea521a20ce0e4a; valaddr_reg:x3; val_offset:2862*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2862*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e505db42cace and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8435d862d27ad and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x099dbe61c1ee9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5e505db42cace; op2val:0xbfe8435d862d27ad;
op3val:0x3fe099dbe61c1ee9; valaddr_reg:x3; val_offset:2865*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2865*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e505db42cace and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8435d862d27ad and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x099dbe61c1ee9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5e505db42cace; op2val:0xbfe8435d862d27ad;
op3val:0x3fe099dbe61c1ee9; valaddr_reg:x3; val_offset:2868*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2868*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e505db42cace and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8435d862d27ad and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x099dbe61c1ee9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5e505db42cace; op2val:0xbfe8435d862d27ad;
op3val:0x3fe099dbe61c1ee9; valaddr_reg:x3; val_offset:2871*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2871*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e505db42cace and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8435d862d27ad and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x099dbe61c1ee9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5e505db42cace; op2val:0xbfe8435d862d27ad;
op3val:0x3fe099dbe61c1ee9; valaddr_reg:x3; val_offset:2874*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2874*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e505db42cace and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8435d862d27ad and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x099dbe61c1ee9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5e505db42cace; op2val:0xbfe8435d862d27ad;
op3val:0x3fe099dbe61c1ee9; valaddr_reg:x3; val_offset:2877*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2877*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6280d093ede42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x976a8d41fee7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a172c46f184a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6280d093ede42; op2val:0xbfe976a8d41fee7b;
op3val:0x3fe1a172c46f184a; valaddr_reg:x3; val_offset:2880*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2880*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6280d093ede42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x976a8d41fee7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a172c46f184a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6280d093ede42; op2val:0xbfe976a8d41fee7b;
op3val:0x3fe1a172c46f184a; valaddr_reg:x3; val_offset:2883*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2883*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6280d093ede42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x976a8d41fee7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a172c46f184a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6280d093ede42; op2val:0xbfe976a8d41fee7b;
op3val:0x3fe1a172c46f184a; valaddr_reg:x3; val_offset:2886*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2886*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6280d093ede42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x976a8d41fee7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a172c46f184a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6280d093ede42; op2val:0xbfe976a8d41fee7b;
op3val:0x3fe1a172c46f184a; valaddr_reg:x3; val_offset:2889*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2889*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6280d093ede42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x976a8d41fee7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a172c46f184a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6280d093ede42; op2val:0xbfe976a8d41fee7b;
op3val:0x3fe1a172c46f184a; valaddr_reg:x3; val_offset:2892*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2892*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x635aaad702276 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5de9699de9a39 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5b69b07fe9e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe635aaad702276; op2val:0xbff5de9699de9a39;
op3val:0x3fee5b69b07fe9e3; valaddr_reg:x3; val_offset:2895*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2895*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x635aaad702276 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5de9699de9a39 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5b69b07fe9e3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe635aaad702276; op2val:0xbff5de9699de9a39;
op3val:0x3fee5b69b07fe9e3; valaddr_reg:x3; val_offset:2898*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2898*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x635aaad702276 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5de9699de9a39 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5b69b07fe9e3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe635aaad702276; op2val:0xbff5de9699de9a39;
op3val:0x3fee5b69b07fe9e3; valaddr_reg:x3; val_offset:2901*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2901*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x635aaad702276 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5de9699de9a39 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5b69b07fe9e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe635aaad702276; op2val:0xbff5de9699de9a39;
op3val:0x3fee5b69b07fe9e3; valaddr_reg:x3; val_offset:2904*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2904*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x635aaad702276 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5de9699de9a39 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5b69b07fe9e3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe635aaad702276; op2val:0xbff5de9699de9a39;
op3val:0x3fee5b69b07fe9e3; valaddr_reg:x3; val_offset:2907*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2907*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x65b4428bafb6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22dc85c4bcaf5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x966a5534f952c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe65b4428bafb6a; op2val:0xbfe22dc85c4bcaf5;
op3val:0x3fd966a5534f952c; valaddr_reg:x3; val_offset:2910*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2910*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x65b4428bafb6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22dc85c4bcaf5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x966a5534f952c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe65b4428bafb6a; op2val:0xbfe22dc85c4bcaf5;
op3val:0x3fd966a5534f952c; valaddr_reg:x3; val_offset:2913*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2913*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x65b4428bafb6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22dc85c4bcaf5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x966a5534f952c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe65b4428bafb6a; op2val:0xbfe22dc85c4bcaf5;
op3val:0x3fd966a5534f952c; valaddr_reg:x3; val_offset:2916*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2916*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x65b4428bafb6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22dc85c4bcaf5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x966a5534f952c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe65b4428bafb6a; op2val:0xbfe22dc85c4bcaf5;
op3val:0x3fd966a5534f952c; valaddr_reg:x3; val_offset:2919*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2919*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x65b4428bafb6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22dc85c4bcaf5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x966a5534f952c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe65b4428bafb6a; op2val:0xbfe22dc85c4bcaf5;
op3val:0x3fd966a5534f952c; valaddr_reg:x3; val_offset:2922*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2922*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6806ecd132c64 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x565076b5f94aa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe16a697c97da4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6806ecd132c64; op2val:0xbfe565076b5f94aa;
op3val:0x3fde16a697c97da4; valaddr_reg:x3; val_offset:2925*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2925*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6806ecd132c64 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x565076b5f94aa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe16a697c97da4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6806ecd132c64; op2val:0xbfe565076b5f94aa;
op3val:0x3fde16a697c97da4; valaddr_reg:x3; val_offset:2928*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2928*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6806ecd132c64 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x565076b5f94aa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe16a697c97da4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6806ecd132c64; op2val:0xbfe565076b5f94aa;
op3val:0x3fde16a697c97da4; valaddr_reg:x3; val_offset:2931*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2931*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6806ecd132c64 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x565076b5f94aa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe16a697c97da4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6806ecd132c64; op2val:0xbfe565076b5f94aa;
op3val:0x3fde16a697c97da4; valaddr_reg:x3; val_offset:2934*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2934*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6806ecd132c64 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x565076b5f94aa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe16a697c97da4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6806ecd132c64; op2val:0xbfe565076b5f94aa;
op3val:0x3fde16a697c97da4; valaddr_reg:x3; val_offset:2937*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2937*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6837e3a23c0d9 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xeecad1bcaeb9c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5c1c9e3de6d1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6837e3a23c0d9; op2val:0xbfceecad1bcaeb9c;
op3val:0x3fc5c1c9e3de6d1c; valaddr_reg:x3; val_offset:2940*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2940*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6837e3a23c0d9 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xeecad1bcaeb9c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5c1c9e3de6d1c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6837e3a23c0d9; op2val:0xbfceecad1bcaeb9c;
op3val:0x3fc5c1c9e3de6d1c; valaddr_reg:x3; val_offset:2943*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2943*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6837e3a23c0d9 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xeecad1bcaeb9c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5c1c9e3de6d1c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6837e3a23c0d9; op2val:0xbfceecad1bcaeb9c;
op3val:0x3fc5c1c9e3de6d1c; valaddr_reg:x3; val_offset:2946*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2946*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6837e3a23c0d9 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xeecad1bcaeb9c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5c1c9e3de6d1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6837e3a23c0d9; op2val:0xbfceecad1bcaeb9c;
op3val:0x3fc5c1c9e3de6d1c; valaddr_reg:x3; val_offset:2949*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2949*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6837e3a23c0d9 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xeecad1bcaeb9c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5c1c9e3de6d1c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6837e3a23c0d9; op2val:0xbfceecad1bcaeb9c;
op3val:0x3fc5c1c9e3de6d1c; valaddr_reg:x3; val_offset:2952*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2952*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x690e47b6f68a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d093a03e4bf2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x17fc1444fde5c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe690e47b6f68a3; op2val:0xbfe8d093a03e4bf2;
op3val:0x3fe17fc1444fde5c; valaddr_reg:x3; val_offset:2955*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2955*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x690e47b6f68a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d093a03e4bf2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x17fc1444fde5c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe690e47b6f68a3; op2val:0xbfe8d093a03e4bf2;
op3val:0x3fe17fc1444fde5c; valaddr_reg:x3; val_offset:2958*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2958*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x690e47b6f68a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d093a03e4bf2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x17fc1444fde5c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe690e47b6f68a3; op2val:0xbfe8d093a03e4bf2;
op3val:0x3fe17fc1444fde5c; valaddr_reg:x3; val_offset:2961*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2961*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x690e47b6f68a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d093a03e4bf2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x17fc1444fde5c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe690e47b6f68a3; op2val:0xbfe8d093a03e4bf2;
op3val:0x3fe17fc1444fde5c; valaddr_reg:x3; val_offset:2964*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2964*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x690e47b6f68a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d093a03e4bf2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x17fc1444fde5c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe690e47b6f68a3; op2val:0xbfe8d093a03e4bf2;
op3val:0x3fe17fc1444fde5c; valaddr_reg:x3; val_offset:2967*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2967*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x698c3982c263b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3bd9bdc5438e6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbe130ea3c3ce0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe698c3982c263b; op2val:0xbfb3bd9bdc5438e6;
op3val:0x3fabe130ea3c3ce0; valaddr_reg:x3; val_offset:2970*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2970*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x698c3982c263b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3bd9bdc5438e6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbe130ea3c3ce0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe698c3982c263b; op2val:0xbfb3bd9bdc5438e6;
op3val:0x3fabe130ea3c3ce0; valaddr_reg:x3; val_offset:2973*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2973*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x698c3982c263b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3bd9bdc5438e6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbe130ea3c3ce0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe698c3982c263b; op2val:0xbfb3bd9bdc5438e6;
op3val:0x3fabe130ea3c3ce0; valaddr_reg:x3; val_offset:2976*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2976*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x698c3982c263b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3bd9bdc5438e6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbe130ea3c3ce0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe698c3982c263b; op2val:0xbfb3bd9bdc5438e6;
op3val:0x3fabe130ea3c3ce0; valaddr_reg:x3; val_offset:2979*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2979*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x698c3982c263b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3bd9bdc5438e6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbe130ea3c3ce0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe698c3982c263b; op2val:0xbfb3bd9bdc5438e6;
op3val:0x3fabe130ea3c3ce0; valaddr_reg:x3; val_offset:2982*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2982*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6a3e5e92d499b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xdabd132599144 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4fe1831fc2580 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6a3e5e92d499b; op2val:0xbfbdabd132599144;
op3val:0x3fb4fe1831fc2580; valaddr_reg:x3; val_offset:2985*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2985*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6a3e5e92d499b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xdabd132599144 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4fe1831fc2580 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6a3e5e92d499b; op2val:0xbfbdabd132599144;
op3val:0x3fb4fe1831fc2580; valaddr_reg:x3; val_offset:2988*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2988*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6a3e5e92d499b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xdabd132599144 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4fe1831fc2580 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6a3e5e92d499b; op2val:0xbfbdabd132599144;
op3val:0x3fb4fe1831fc2580; valaddr_reg:x3; val_offset:2991*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2991*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6a3e5e92d499b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xdabd132599144 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4fe1831fc2580 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6a3e5e92d499b; op2val:0xbfbdabd132599144;
op3val:0x3fb4fe1831fc2580; valaddr_reg:x3; val_offset:2994*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2994*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6a3e5e92d499b and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xdabd132599144 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4fe1831fc2580 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6a3e5e92d499b; op2val:0xbfbdabd132599144;
op3val:0x3fb4fe1831fc2580; valaddr_reg:x3; val_offset:2997*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2997*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6af4da62f3a85 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd63b7d1cedcb2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4d58f061495a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6af4da62f3a85; op2val:0xbfdd63b7d1cedcb2;
op3val:0x3fd4d58f061495a0; valaddr_reg:x3; val_offset:3000*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6af4da62f3a85 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd63b7d1cedcb2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4d58f061495a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6af4da62f3a85; op2val:0xbfdd63b7d1cedcb2;
op3val:0x3fd4d58f061495a0; valaddr_reg:x3; val_offset:3003*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3003*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6af4da62f3a85 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd63b7d1cedcb2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4d58f061495a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6af4da62f3a85; op2val:0xbfdd63b7d1cedcb2;
op3val:0x3fd4d58f061495a0; valaddr_reg:x3; val_offset:3006*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3006*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6af4da62f3a85 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd63b7d1cedcb2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4d58f061495a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6af4da62f3a85; op2val:0xbfdd63b7d1cedcb2;
op3val:0x3fd4d58f061495a0; valaddr_reg:x3; val_offset:3009*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3009*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6af4da62f3a85 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd63b7d1cedcb2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4d58f061495a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6af4da62f3a85; op2val:0xbfdd63b7d1cedcb2;
op3val:0x3fd4d58f061495a0; valaddr_reg:x3; val_offset:3012*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3012*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6be0316bed22e and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xbc089385d1cd0 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x3b928334565c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6be0316bed22e; op2val:0xbfabc089385d1cd0;
op3val:0x3fa3b928334565c0; valaddr_reg:x3; val_offset:3015*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3015*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6be0316bed22e and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xbc089385d1cd0 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x3b928334565c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6be0316bed22e; op2val:0xbfabc089385d1cd0;
op3val:0x3fa3b928334565c0; valaddr_reg:x3; val_offset:3018*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3018*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6be0316bed22e and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xbc089385d1cd0 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x3b928334565c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6be0316bed22e; op2val:0xbfabc089385d1cd0;
op3val:0x3fa3b928334565c0; valaddr_reg:x3; val_offset:3021*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3021*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6be0316bed22e and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xbc089385d1cd0 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x3b928334565c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6be0316bed22e; op2val:0xbfabc089385d1cd0;
op3val:0x3fa3b928334565c0; valaddr_reg:x3; val_offset:3024*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3024*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6be0316bed22e and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xbc089385d1cd0 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x3b928334565c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6be0316bed22e; op2val:0xbfabc089385d1cd0;
op3val:0x3fa3b928334565c0; valaddr_reg:x3; val_offset:3027*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3027*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d5d31f6d4504 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x774aba47a229a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0bcf157e7a78c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d5d31f6d4504; op2val:0xbfe774aba47a229a;
op3val:0x3fe0bcf157e7a78c; valaddr_reg:x3; val_offset:3030*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3030*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d5d31f6d4504 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x774aba47a229a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0bcf157e7a78c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d5d31f6d4504; op2val:0xbfe774aba47a229a;
op3val:0x3fe0bcf157e7a78c; valaddr_reg:x3; val_offset:3033*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3033*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d5d31f6d4504 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x774aba47a229a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0bcf157e7a78c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d5d31f6d4504; op2val:0xbfe774aba47a229a;
op3val:0x3fe0bcf157e7a78c; valaddr_reg:x3; val_offset:3036*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3036*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d5d31f6d4504 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x774aba47a229a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0bcf157e7a78c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d5d31f6d4504; op2val:0xbfe774aba47a229a;
op3val:0x3fe0bcf157e7a78c; valaddr_reg:x3; val_offset:3039*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3039*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d5d31f6d4504 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x774aba47a229a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0bcf157e7a78c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d5d31f6d4504; op2val:0xbfe774aba47a229a;
op3val:0x3fe0bcf157e7a78c; valaddr_reg:x3; val_offset:3042*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3042*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d62149680b41 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3aa1af92c0af3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc11112870d8a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d62149680b41; op2val:0xbfd3aa1af92c0af3;
op3val:0x3fcc11112870d8a0; valaddr_reg:x3; val_offset:3045*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3045*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d62149680b41 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3aa1af92c0af3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc11112870d8a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d62149680b41; op2val:0xbfd3aa1af92c0af3;
op3val:0x3fcc11112870d8a0; valaddr_reg:x3; val_offset:3048*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3048*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d62149680b41 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3aa1af92c0af3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc11112870d8a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d62149680b41; op2val:0xbfd3aa1af92c0af3;
op3val:0x3fcc11112870d8a0; valaddr_reg:x3; val_offset:3051*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3051*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d62149680b41 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3aa1af92c0af3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc11112870d8a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d62149680b41; op2val:0xbfd3aa1af92c0af3;
op3val:0x3fcc11112870d8a0; valaddr_reg:x3; val_offset:3054*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3054*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d62149680b41 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3aa1af92c0af3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc11112870d8a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d62149680b41; op2val:0xbfd3aa1af92c0af3;
op3val:0x3fcc11112870d8a0; valaddr_reg:x3; val_offset:3057*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3057*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6dd02a7dd25bd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4f8ae07f138cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdf79da9d497c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6dd02a7dd25bd; op2val:0xbff4f8ae07f138cd;
op3val:0x3fedf79da9d497c6; valaddr_reg:x3; val_offset:3060*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3060*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6dd02a7dd25bd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4f8ae07f138cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdf79da9d497c6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6dd02a7dd25bd; op2val:0xbff4f8ae07f138cd;
op3val:0x3fedf79da9d497c6; valaddr_reg:x3; val_offset:3063*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3063*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6dd02a7dd25bd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4f8ae07f138cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdf79da9d497c6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6dd02a7dd25bd; op2val:0xbff4f8ae07f138cd;
op3val:0x3fedf79da9d497c6; valaddr_reg:x3; val_offset:3066*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3066*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6dd02a7dd25bd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4f8ae07f138cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdf79da9d497c6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6dd02a7dd25bd; op2val:0xbff4f8ae07f138cd;
op3val:0x3fedf79da9d497c6; valaddr_reg:x3; val_offset:3069*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3069*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6dd02a7dd25bd and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4f8ae07f138cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdf79da9d497c6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6dd02a7dd25bd; op2val:0xbff4f8ae07f138cd;
op3val:0x3fedf79da9d497c6; valaddr_reg:x3; val_offset:3072*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3072*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x703428ca8b8d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e2b145ce26a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0754442f0c8f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe703428ca8b8d1; op2val:0xbfe6e2b145ce26a3;
op3val:0x3fe0754442f0c8f3; valaddr_reg:x3; val_offset:3075*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3075*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x703428ca8b8d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e2b145ce26a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0754442f0c8f3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe703428ca8b8d1; op2val:0xbfe6e2b145ce26a3;
op3val:0x3fe0754442f0c8f3; valaddr_reg:x3; val_offset:3078*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3078*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x703428ca8b8d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e2b145ce26a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0754442f0c8f3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe703428ca8b8d1; op2val:0xbfe6e2b145ce26a3;
op3val:0x3fe0754442f0c8f3; valaddr_reg:x3; val_offset:3081*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3081*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x703428ca8b8d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e2b145ce26a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0754442f0c8f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe703428ca8b8d1; op2val:0xbfe6e2b145ce26a3;
op3val:0x3fe0754442f0c8f3; valaddr_reg:x3; val_offset:3084*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3084*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x703428ca8b8d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6e2b145ce26a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0754442f0c8f3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe703428ca8b8d1; op2val:0xbfe6e2b145ce26a3;
op3val:0x3fe0754442f0c8f3; valaddr_reg:x3; val_offset:3087*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3087*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70e7aff458df6 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xdb8f5b589dae8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x56a63c43dc670 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe70e7aff458df6; op2val:0xbfbdb8f5b589dae8;
op3val:0x3fb56a63c43dc670; valaddr_reg:x3; val_offset:3090*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3090*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70e7aff458df6 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xdb8f5b589dae8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x56a63c43dc670 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe70e7aff458df6; op2val:0xbfbdb8f5b589dae8;
op3val:0x3fb56a63c43dc670; valaddr_reg:x3; val_offset:3093*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3093*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70e7aff458df6 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xdb8f5b589dae8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x56a63c43dc670 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe70e7aff458df6; op2val:0xbfbdb8f5b589dae8;
op3val:0x3fb56a63c43dc670; valaddr_reg:x3; val_offset:3096*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3096*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70e7aff458df6 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xdb8f5b589dae8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x56a63c43dc670 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe70e7aff458df6; op2val:0xbfbdb8f5b589dae8;
op3val:0x3fb56a63c43dc670; valaddr_reg:x3; val_offset:3099*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3099*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70e7aff458df6 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xdb8f5b589dae8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x56a63c43dc670 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe70e7aff458df6; op2val:0xbfbdb8f5b589dae8;
op3val:0x3fb56a63c43dc670; valaddr_reg:x3; val_offset:3102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3102*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7164c4c939ad2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa2ab6842a3099 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2e0eef088ce1d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7164c4c939ad2; op2val:0xbfea2ab6842a3099;
op3val:0x3fe2e0eef088ce1d; valaddr_reg:x3; val_offset:3105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3105*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7164c4c939ad2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa2ab6842a3099 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2e0eef088ce1d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7164c4c939ad2; op2val:0xbfea2ab6842a3099;
op3val:0x3fe2e0eef088ce1d; valaddr_reg:x3; val_offset:3108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3108*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7164c4c939ad2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa2ab6842a3099 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2e0eef088ce1d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7164c4c939ad2; op2val:0xbfea2ab6842a3099;
op3val:0x3fe2e0eef088ce1d; valaddr_reg:x3; val_offset:3111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3111*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7164c4c939ad2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa2ab6842a3099 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2e0eef088ce1d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7164c4c939ad2; op2val:0xbfea2ab6842a3099;
op3val:0x3fe2e0eef088ce1d; valaddr_reg:x3; val_offset:3114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3114*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7164c4c939ad2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa2ab6842a3099 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2e0eef088ce1d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7164c4c939ad2; op2val:0xbfea2ab6842a3099;
op3val:0x3fe2e0eef088ce1d; valaddr_reg:x3; val_offset:3117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3117*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73d21bf06af59 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6d2fd1c847ca5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x0934030d2b6f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73d21bf06af59; op2val:0xbfb6d2fd1c847ca5;
op3val:0x3fb0934030d2b6f0; valaddr_reg:x3; val_offset:3120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3120*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73d21bf06af59 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6d2fd1c847ca5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x0934030d2b6f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73d21bf06af59; op2val:0xbfb6d2fd1c847ca5;
op3val:0x3fb0934030d2b6f0; valaddr_reg:x3; val_offset:3123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3123*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73d21bf06af59 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6d2fd1c847ca5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x0934030d2b6f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73d21bf06af59; op2val:0xbfb6d2fd1c847ca5;
op3val:0x3fb0934030d2b6f0; valaddr_reg:x3; val_offset:3126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3126*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73d21bf06af59 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6d2fd1c847ca5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x0934030d2b6f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73d21bf06af59; op2val:0xbfb6d2fd1c847ca5;
op3val:0x3fb0934030d2b6f0; valaddr_reg:x3; val_offset:3129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3129*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73d21bf06af59 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6d2fd1c847ca5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x0934030d2b6f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73d21bf06af59; op2val:0xbfb6d2fd1c847ca5;
op3val:0x3fb0934030d2b6f0; valaddr_reg:x3; val_offset:3132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3132*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76f0b2f92e7ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x06c756a88ae94 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x80de4b31dad14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76f0b2f92e7ea; op2val:0xbfd06c756a88ae94;
op3val:0x3fc80de4b31dad14; valaddr_reg:x3; val_offset:3135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3135*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76f0b2f92e7ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x06c756a88ae94 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x80de4b31dad14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76f0b2f92e7ea; op2val:0xbfd06c756a88ae94;
op3val:0x3fc80de4b31dad14; valaddr_reg:x3; val_offset:3138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3138*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76f0b2f92e7ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x06c756a88ae94 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x80de4b31dad14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76f0b2f92e7ea; op2val:0xbfd06c756a88ae94;
op3val:0x3fc80de4b31dad14; valaddr_reg:x3; val_offset:3141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3141*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76f0b2f92e7ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x06c756a88ae94 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x80de4b31dad14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76f0b2f92e7ea; op2val:0xbfd06c756a88ae94;
op3val:0x3fc80de4b31dad14; valaddr_reg:x3; val_offset:3144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3144*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76f0b2f92e7ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x06c756a88ae94 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x80de4b31dad14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76f0b2f92e7ea; op2val:0xbfd06c756a88ae94;
op3val:0x3fc80de4b31dad14; valaddr_reg:x3; val_offset:3147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3147*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76f18809fd504 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2779b06c88f8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0c28e51d3a91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76f18809fd504; op2val:0xbff2779b06c88f8c;
op3val:0x3feb0c28e51d3a91; valaddr_reg:x3; val_offset:3150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3150*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76f18809fd504 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2779b06c88f8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0c28e51d3a91 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76f18809fd504; op2val:0xbff2779b06c88f8c;
op3val:0x3feb0c28e51d3a91; valaddr_reg:x3; val_offset:3153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3153*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76f18809fd504 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2779b06c88f8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0c28e51d3a91 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76f18809fd504; op2val:0xbff2779b06c88f8c;
op3val:0x3feb0c28e51d3a91; valaddr_reg:x3; val_offset:3156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3156*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76f18809fd504 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2779b06c88f8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0c28e51d3a91 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76f18809fd504; op2val:0xbff2779b06c88f8c;
op3val:0x3feb0c28e51d3a91; valaddr_reg:x3; val_offset:3159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3159*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76f18809fd504 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2779b06c88f8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0c28e51d3a91 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76f18809fd504; op2val:0xbff2779b06c88f8c;
op3val:0x3feb0c28e51d3a91; valaddr_reg:x3; val_offset:3162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3162*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7937b9bbf4c23 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x378f266c3b4e5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcb15a161d6cd2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7937b9bbf4c23; op2val:0xbfe378f266c3b4e5;
op3val:0x3fdcb15a161d6cd2; valaddr_reg:x3; val_offset:3165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3165*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7937b9bbf4c23 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x378f266c3b4e5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcb15a161d6cd2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7937b9bbf4c23; op2val:0xbfe378f266c3b4e5;
op3val:0x3fdcb15a161d6cd2; valaddr_reg:x3; val_offset:3168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3168*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7937b9bbf4c23 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x378f266c3b4e5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcb15a161d6cd2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7937b9bbf4c23; op2val:0xbfe378f266c3b4e5;
op3val:0x3fdcb15a161d6cd2; valaddr_reg:x3; val_offset:3171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3171*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7937b9bbf4c23 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x378f266c3b4e5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcb15a161d6cd2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7937b9bbf4c23; op2val:0xbfe378f266c3b4e5;
op3val:0x3fdcb15a161d6cd2; valaddr_reg:x3; val_offset:3174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3174*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7937b9bbf4c23 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x378f266c3b4e5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcb15a161d6cd2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7937b9bbf4c23; op2val:0xbfe378f266c3b4e5;
op3val:0x3fdcb15a161d6cd2; valaddr_reg:x3; val_offset:3177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3177*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x798d8a20255fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc210c4a7fcf65 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4be1c3d6a0ee6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe798d8a20255fa; op2val:0xbfdc210c4a7fcf65;
op3val:0x3fd4be1c3d6a0ee6; valaddr_reg:x3; val_offset:3180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3180*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x798d8a20255fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc210c4a7fcf65 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4be1c3d6a0ee6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe798d8a20255fa; op2val:0xbfdc210c4a7fcf65;
op3val:0x3fd4be1c3d6a0ee6; valaddr_reg:x3; val_offset:3183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3183*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x798d8a20255fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc210c4a7fcf65 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4be1c3d6a0ee6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe798d8a20255fa; op2val:0xbfdc210c4a7fcf65;
op3val:0x3fd4be1c3d6a0ee6; valaddr_reg:x3; val_offset:3186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3186*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x798d8a20255fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc210c4a7fcf65 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4be1c3d6a0ee6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe798d8a20255fa; op2val:0xbfdc210c4a7fcf65;
op3val:0x3fd4be1c3d6a0ee6; valaddr_reg:x3; val_offset:3189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3189*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x798d8a20255fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc210c4a7fcf65 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x4be1c3d6a0ee6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe798d8a20255fa; op2val:0xbfdc210c4a7fcf65;
op3val:0x3fd4be1c3d6a0ee6; valaddr_reg:x3; val_offset:3192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3192*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d3845caa91f6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9772f84dfd0f8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2f5fd5e376c0a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d3845caa91f6; op2val:0xbfe9772f84dfd0f8;
op3val:0x3fe2f5fd5e376c0a; valaddr_reg:x3; val_offset:3195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3195*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d3845caa91f6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9772f84dfd0f8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2f5fd5e376c0a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d3845caa91f6; op2val:0xbfe9772f84dfd0f8;
op3val:0x3fe2f5fd5e376c0a; valaddr_reg:x3; val_offset:3198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3198*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d3845caa91f6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9772f84dfd0f8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2f5fd5e376c0a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d3845caa91f6; op2val:0xbfe9772f84dfd0f8;
op3val:0x3fe2f5fd5e376c0a; valaddr_reg:x3; val_offset:3201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3201*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d3845caa91f6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9772f84dfd0f8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2f5fd5e376c0a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d3845caa91f6; op2val:0xbfe9772f84dfd0f8;
op3val:0x3fe2f5fd5e376c0a; valaddr_reg:x3; val_offset:3204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3204*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d3845caa91f6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9772f84dfd0f8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2f5fd5e376c0a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d3845caa91f6; op2val:0xbfe9772f84dfd0f8;
op3val:0x3fe2f5fd5e376c0a; valaddr_reg:x3; val_offset:3207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3207*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ddac64ab68d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5674e6680fcd1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xfed0a3b77054c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ddac64ab68d4; op2val:0xbfd5674e6680fcd1;
op3val:0x3fcfed0a3b77054c; valaddr_reg:x3; val_offset:3210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3210*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ddac64ab68d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5674e6680fcd1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xfed0a3b77054c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ddac64ab68d4; op2val:0xbfd5674e6680fcd1;
op3val:0x3fcfed0a3b77054c; valaddr_reg:x3; val_offset:3213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3213*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ddac64ab68d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5674e6680fcd1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xfed0a3b77054c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ddac64ab68d4; op2val:0xbfd5674e6680fcd1;
op3val:0x3fcfed0a3b77054c; valaddr_reg:x3; val_offset:3216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3216*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ddac64ab68d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5674e6680fcd1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xfed0a3b77054c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ddac64ab68d4; op2val:0xbfd5674e6680fcd1;
op3val:0x3fcfed0a3b77054c; valaddr_reg:x3; val_offset:3219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3219*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ddac64ab68d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5674e6680fcd1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xfed0a3b77054c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ddac64ab68d4; op2val:0xbfd5674e6680fcd1;
op3val:0x3fcfed0a3b77054c; valaddr_reg:x3; val_offset:3222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3222*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7deaeab8f1e14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xeff67c003213d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x71f47a4b9ee90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7deaeab8f1e14; op2val:0xbfeeff67c003213d;
op3val:0x3fe71f47a4b9ee90; valaddr_reg:x3; val_offset:3225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3225*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7deaeab8f1e14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xeff67c003213d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x71f47a4b9ee90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7deaeab8f1e14; op2val:0xbfeeff67c003213d;
op3val:0x3fe71f47a4b9ee90; valaddr_reg:x3; val_offset:3228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3228*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7deaeab8f1e14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xeff67c003213d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x71f47a4b9ee90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7deaeab8f1e14; op2val:0xbfeeff67c003213d;
op3val:0x3fe71f47a4b9ee90; valaddr_reg:x3; val_offset:3231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3231*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7deaeab8f1e14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xeff67c003213d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x71f47a4b9ee90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7deaeab8f1e14; op2val:0xbfeeff67c003213d;
op3val:0x3fe71f47a4b9ee90; valaddr_reg:x3; val_offset:3234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3234*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7deaeab8f1e14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xeff67c003213d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x71f47a4b9ee90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7deaeab8f1e14; op2val:0xbfeeff67c003213d;
op3val:0x3fe71f47a4b9ee90; valaddr_reg:x3; val_offset:3237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3237*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa542ab245fb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc0bb26edb0f91 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x503cd65cf7e30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7fa542ab245fb; op2val:0xbfdc0bb26edb0f91;
op3val:0x3fd503cd65cf7e30; valaddr_reg:x3; val_offset:3240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3240*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa542ab245fb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc0bb26edb0f91 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x503cd65cf7e30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7fa542ab245fb; op2val:0xbfdc0bb26edb0f91;
op3val:0x3fd503cd65cf7e30; valaddr_reg:x3; val_offset:3243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3243*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa542ab245fb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc0bb26edb0f91 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x503cd65cf7e30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7fa542ab245fb; op2val:0xbfdc0bb26edb0f91;
op3val:0x3fd503cd65cf7e30; valaddr_reg:x3; val_offset:3246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3246*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa542ab245fb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc0bb26edb0f91 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x503cd65cf7e30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7fa542ab245fb; op2val:0xbfdc0bb26edb0f91;
op3val:0x3fd503cd65cf7e30; valaddr_reg:x3; val_offset:3249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3249*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa542ab245fb and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc0bb26edb0f91 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x503cd65cf7e30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7fa542ab245fb; op2val:0xbfdc0bb26edb0f91;
op3val:0x3fd503cd65cf7e30; valaddr_reg:x3; val_offset:3252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3252*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x825cb56e58c24 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3e67031e065e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe08aa16078411 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe825cb56e58c24; op2val:0xbff3e67031e065e5;
op3val:0x3fee08aa16078411; valaddr_reg:x3; val_offset:3255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3255*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x825cb56e58c24 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3e67031e065e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe08aa16078411 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe825cb56e58c24; op2val:0xbff3e67031e065e5;
op3val:0x3fee08aa16078411; valaddr_reg:x3; val_offset:3258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3258*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x825cb56e58c24 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3e67031e065e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe08aa16078411 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe825cb56e58c24; op2val:0xbff3e67031e065e5;
op3val:0x3fee08aa16078411; valaddr_reg:x3; val_offset:3261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3261*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x825cb56e58c24 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3e67031e065e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe08aa16078411 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe825cb56e58c24; op2val:0xbff3e67031e065e5;
op3val:0x3fee08aa16078411; valaddr_reg:x3; val_offset:3264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3264*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x825cb56e58c24 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3e67031e065e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe08aa16078411 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe825cb56e58c24; op2val:0xbff3e67031e065e5;
op3val:0x3fee08aa16078411; valaddr_reg:x3; val_offset:3267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3267*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x82a3145361807 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x366b347d54828 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd4d3640ce04fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe82a3145361807; op2val:0xbff366b347d54828;
op3val:0x3fed4d3640ce04fc; valaddr_reg:x3; val_offset:3270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3270*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x82a3145361807 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x366b347d54828 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd4d3640ce04fc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe82a3145361807; op2val:0xbff366b347d54828;
op3val:0x3fed4d3640ce04fc; valaddr_reg:x3; val_offset:3273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3273*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x82a3145361807 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x366b347d54828 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd4d3640ce04fc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe82a3145361807; op2val:0xbff366b347d54828;
op3val:0x3fed4d3640ce04fc; valaddr_reg:x3; val_offset:3276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3276*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x82a3145361807 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x366b347d54828 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd4d3640ce04fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe82a3145361807; op2val:0xbff366b347d54828;
op3val:0x3fed4d3640ce04fc; valaddr_reg:x3; val_offset:3279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3279*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x82a3145361807 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x366b347d54828 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd4d3640ce04fc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe82a3145361807; op2val:0xbff366b347d54828;
op3val:0x3fed4d3640ce04fc; valaddr_reg:x3; val_offset:3282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3282*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8358bc96c4adb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x414f65f522ead and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe62a67202a4d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8358bc96c4adb; op2val:0xbff414f65f522ead;
op3val:0x3fee62a67202a4d9; valaddr_reg:x3; val_offset:3285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3285*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8358bc96c4adb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x414f65f522ead and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe62a67202a4d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8358bc96c4adb; op2val:0xbff414f65f522ead;
op3val:0x3fee62a67202a4d9; valaddr_reg:x3; val_offset:3288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3288*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8358bc96c4adb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x414f65f522ead and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe62a67202a4d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8358bc96c4adb; op2val:0xbff414f65f522ead;
op3val:0x3fee62a67202a4d9; valaddr_reg:x3; val_offset:3291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3291*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8358bc96c4adb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x414f65f522ead and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe62a67202a4d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8358bc96c4adb; op2val:0xbff414f65f522ead;
op3val:0x3fee62a67202a4d9; valaddr_reg:x3; val_offset:3294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3294*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8358bc96c4adb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x414f65f522ead and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe62a67202a4d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8358bc96c4adb; op2val:0xbff414f65f522ead;
op3val:0x3fee62a67202a4d9; valaddr_reg:x3; val_offset:3297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3297*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8638fed20c09e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x04293409b3c29 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x8c90b14081a40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8638fed20c09e; op2val:0xbfc04293409b3c29;
op3val:0x3fb8c90b14081a40; valaddr_reg:x3; val_offset:3300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3300*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8638fed20c09e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x04293409b3c29 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x8c90b14081a40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8638fed20c09e; op2val:0xbfc04293409b3c29;
op3val:0x3fb8c90b14081a40; valaddr_reg:x3; val_offset:3303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3303*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8638fed20c09e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x04293409b3c29 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x8c90b14081a40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8638fed20c09e; op2val:0xbfc04293409b3c29;
op3val:0x3fb8c90b14081a40; valaddr_reg:x3; val_offset:3306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3306*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8638fed20c09e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x04293409b3c29 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x8c90b14081a40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8638fed20c09e; op2val:0xbfc04293409b3c29;
op3val:0x3fb8c90b14081a40; valaddr_reg:x3; val_offset:3309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3309*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8638fed20c09e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x04293409b3c29 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x8c90b14081a40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8638fed20c09e; op2val:0xbfc04293409b3c29;
op3val:0x3fb8c90b14081a40; valaddr_reg:x3; val_offset:3312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3312*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8798163de0d20 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5abd55c68cee5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09329646a2112 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8798163de0d20; op2val:0xbfe5abd55c68cee5;
op3val:0x3fe09329646a2112; valaddr_reg:x3; val_offset:3315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3315*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8798163de0d20 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5abd55c68cee5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09329646a2112 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8798163de0d20; op2val:0xbfe5abd55c68cee5;
op3val:0x3fe09329646a2112; valaddr_reg:x3; val_offset:3318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3318*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8798163de0d20 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5abd55c68cee5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09329646a2112 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8798163de0d20; op2val:0xbfe5abd55c68cee5;
op3val:0x3fe09329646a2112; valaddr_reg:x3; val_offset:3321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3321*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8798163de0d20 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5abd55c68cee5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09329646a2112 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8798163de0d20; op2val:0xbfe5abd55c68cee5;
op3val:0x3fe09329646a2112; valaddr_reg:x3; val_offset:3324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3324*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8798163de0d20 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5abd55c68cee5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x09329646a2112 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8798163de0d20; op2val:0xbfe5abd55c68cee5;
op3val:0x3fe09329646a2112; valaddr_reg:x3; val_offset:3327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3327*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87ab9c2d73e1e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbe3e792afc6bf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x555e478472086 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe87ab9c2d73e1e; op2val:0xbfebe3e792afc6bf;
op3val:0x3fe555e478472086; valaddr_reg:x3; val_offset:3330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3330*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87ab9c2d73e1e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbe3e792afc6bf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x555e478472086 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe87ab9c2d73e1e; op2val:0xbfebe3e792afc6bf;
op3val:0x3fe555e478472086; valaddr_reg:x3; val_offset:3333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3333*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87ab9c2d73e1e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbe3e792afc6bf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x555e478472086 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe87ab9c2d73e1e; op2val:0xbfebe3e792afc6bf;
op3val:0x3fe555e478472086; valaddr_reg:x3; val_offset:3336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3336*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87ab9c2d73e1e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbe3e792afc6bf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x555e478472086 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe87ab9c2d73e1e; op2val:0xbfebe3e792afc6bf;
op3val:0x3fe555e478472086; valaddr_reg:x3; val_offset:3339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3339*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87ab9c2d73e1e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbe3e792afc6bf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x555e478472086 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe87ab9c2d73e1e; op2val:0xbfebe3e792afc6bf;
op3val:0x3fe555e478472086; valaddr_reg:x3; val_offset:3342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3342*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87fa0f88bc5f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa4840ca337320 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41f038e2fc81b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe87fa0f88bc5f8; op2val:0xbfea4840ca337320;
op3val:0x3fe41f038e2fc81b; valaddr_reg:x3; val_offset:3345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3345*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87fa0f88bc5f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa4840ca337320 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41f038e2fc81b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe87fa0f88bc5f8; op2val:0xbfea4840ca337320;
op3val:0x3fe41f038e2fc81b; valaddr_reg:x3; val_offset:3348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3348*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87fa0f88bc5f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa4840ca337320 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41f038e2fc81b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe87fa0f88bc5f8; op2val:0xbfea4840ca337320;
op3val:0x3fe41f038e2fc81b; valaddr_reg:x3; val_offset:3351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3351*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87fa0f88bc5f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa4840ca337320 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41f038e2fc81b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe87fa0f88bc5f8; op2val:0xbfea4840ca337320;
op3val:0x3fe41f038e2fc81b; valaddr_reg:x3; val_offset:3354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3354*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87fa0f88bc5f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa4840ca337320 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41f038e2fc81b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe87fa0f88bc5f8; op2val:0xbfea4840ca337320;
op3val:0x3fe41f038e2fc81b; valaddr_reg:x3; val_offset:3357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3357*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89ff8315fc687 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x32a7d76038e8f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7f5bbd8798b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe89ff8315fc687; op2val:0xbff32a7d76038e8f;
op3val:0x3fed7f5bbd8798b8; valaddr_reg:x3; val_offset:3360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3360*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89ff8315fc687 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x32a7d76038e8f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7f5bbd8798b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe89ff8315fc687; op2val:0xbff32a7d76038e8f;
op3val:0x3fed7f5bbd8798b8; valaddr_reg:x3; val_offset:3363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3363*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89ff8315fc687 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x32a7d76038e8f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7f5bbd8798b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe89ff8315fc687; op2val:0xbff32a7d76038e8f;
op3val:0x3fed7f5bbd8798b8; valaddr_reg:x3; val_offset:3366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3366*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89ff8315fc687 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x32a7d76038e8f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7f5bbd8798b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe89ff8315fc687; op2val:0xbff32a7d76038e8f;
op3val:0x3fed7f5bbd8798b8; valaddr_reg:x3; val_offset:3369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3369*FLEN/8, x4, x1, x2)

inst_1124:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89ff8315fc687 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x32a7d76038e8f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7f5bbd8798b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe89ff8315fc687; op2val:0xbff32a7d76038e8f;
op3val:0x3fed7f5bbd8798b8; valaddr_reg:x3; val_offset:3372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3372*FLEN/8, x4, x1, x2)

inst_1125:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a3aea6ee61dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xdfd886b9df368 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7178d6ea30954 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a3aea6ee61dc; op2val:0xbfcdfd886b9df368;
op3val:0x3fc7178d6ea30954; valaddr_reg:x3; val_offset:3375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3375*FLEN/8, x4, x1, x2)

inst_1126:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a3aea6ee61dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xdfd886b9df368 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7178d6ea30954 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a3aea6ee61dc; op2val:0xbfcdfd886b9df368;
op3val:0x3fc7178d6ea30954; valaddr_reg:x3; val_offset:3378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3378*FLEN/8, x4, x1, x2)

inst_1127:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a3aea6ee61dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xdfd886b9df368 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7178d6ea30954 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a3aea6ee61dc; op2val:0xbfcdfd886b9df368;
op3val:0x3fc7178d6ea30954; valaddr_reg:x3; val_offset:3381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3381*FLEN/8, x4, x1, x2)

inst_1128:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a3aea6ee61dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xdfd886b9df368 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7178d6ea30954 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a3aea6ee61dc; op2val:0xbfcdfd886b9df368;
op3val:0x3fc7178d6ea30954; valaddr_reg:x3; val_offset:3384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3384*FLEN/8, x4, x1, x2)

inst_1129:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a3aea6ee61dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xdfd886b9df368 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7178d6ea30954 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a3aea6ee61dc; op2val:0xbfcdfd886b9df368;
op3val:0x3fc7178d6ea30954; valaddr_reg:x3; val_offset:3387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3387*FLEN/8, x4, x1, x2)

inst_1130:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8c1db4a06bf7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd4e0fe5912194 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6ac138e14ea5a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8c1db4a06bf7a; op2val:0xbfed4e0fe5912194;
op3val:0x3fe6ac138e14ea5a; valaddr_reg:x3; val_offset:3390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3390*FLEN/8, x4, x1, x2)

inst_1131:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8c1db4a06bf7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd4e0fe5912194 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6ac138e14ea5a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8c1db4a06bf7a; op2val:0xbfed4e0fe5912194;
op3val:0x3fe6ac138e14ea5a; valaddr_reg:x3; val_offset:3393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3393*FLEN/8, x4, x1, x2)

inst_1132:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8c1db4a06bf7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd4e0fe5912194 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6ac138e14ea5a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8c1db4a06bf7a; op2val:0xbfed4e0fe5912194;
op3val:0x3fe6ac138e14ea5a; valaddr_reg:x3; val_offset:3396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3396*FLEN/8, x4, x1, x2)

inst_1133:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8c1db4a06bf7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd4e0fe5912194 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6ac138e14ea5a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8c1db4a06bf7a; op2val:0xbfed4e0fe5912194;
op3val:0x3fe6ac138e14ea5a; valaddr_reg:x3; val_offset:3399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3399*FLEN/8, x4, x1, x2)

inst_1134:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8c1db4a06bf7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd4e0fe5912194 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6ac138e14ea5a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8c1db4a06bf7a; op2val:0xbfed4e0fe5912194;
op3val:0x3fe6ac138e14ea5a; valaddr_reg:x3; val_offset:3402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3402*FLEN/8, x4, x1, x2)

inst_1135:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8dc76810066e2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2342cb110922a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc491743aa3655 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8dc76810066e2; op2val:0xbff2342cb110922a;
op3val:0x3fec491743aa3655; valaddr_reg:x3; val_offset:3405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3405*FLEN/8, x4, x1, x2)

inst_1136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8dc76810066e2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2342cb110922a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc491743aa3655 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8dc76810066e2; op2val:0xbff2342cb110922a;
op3val:0x3fec491743aa3655; valaddr_reg:x3; val_offset:3408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3408*FLEN/8, x4, x1, x2)

inst_1137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8dc76810066e2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2342cb110922a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc491743aa3655 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8dc76810066e2; op2val:0xbff2342cb110922a;
op3val:0x3fec491743aa3655; valaddr_reg:x3; val_offset:3411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3411*FLEN/8, x4, x1, x2)

inst_1138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8dc76810066e2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2342cb110922a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc491743aa3655 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8dc76810066e2; op2val:0xbff2342cb110922a;
op3val:0x3fec491743aa3655; valaddr_reg:x3; val_offset:3414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3414*FLEN/8, x4, x1, x2)

inst_1139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8dc76810066e2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2342cb110922a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc491743aa3655 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8dc76810066e2; op2val:0xbff2342cb110922a;
op3val:0x3fec491743aa3655; valaddr_reg:x3; val_offset:3417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3417*FLEN/8, x4, x1, x2)

inst_1140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8fda3acf6c974 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9bc6262ad374c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x41946d68e44a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8fda3acf6c974; op2val:0xbfd9bc6262ad374c;
op3val:0x3fd41946d68e44a4; valaddr_reg:x3; val_offset:3420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3420*FLEN/8, x4, x1, x2)

inst_1141:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8fda3acf6c974 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9bc6262ad374c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x41946d68e44a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8fda3acf6c974; op2val:0xbfd9bc6262ad374c;
op3val:0x3fd41946d68e44a4; valaddr_reg:x3; val_offset:3423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3423*FLEN/8, x4, x1, x2)

inst_1142:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8fda3acf6c974 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9bc6262ad374c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x41946d68e44a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8fda3acf6c974; op2val:0xbfd9bc6262ad374c;
op3val:0x3fd41946d68e44a4; valaddr_reg:x3; val_offset:3426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3426*FLEN/8, x4, x1, x2)

inst_1143:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8fda3acf6c974 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9bc6262ad374c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x41946d68e44a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8fda3acf6c974; op2val:0xbfd9bc6262ad374c;
op3val:0x3fd41946d68e44a4; valaddr_reg:x3; val_offset:3429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3429*FLEN/8, x4, x1, x2)

inst_1144:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8fda3acf6c974 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9bc6262ad374c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x41946d68e44a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8fda3acf6c974; op2val:0xbfd9bc6262ad374c;
op3val:0x3fd41946d68e44a4; valaddr_reg:x3; val_offset:3432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3432*FLEN/8, x4, x1, x2)

inst_1145:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x94c2220e7d70e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc191763aad26 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x91ac73c28d472 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe94c2220e7d70e; op2val:0xbfefc191763aad26;
op3val:0x3fe91ac73c28d472; valaddr_reg:x3; val_offset:3435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3435*FLEN/8, x4, x1, x2)

inst_1146:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x94c2220e7d70e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc191763aad26 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x91ac73c28d472 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe94c2220e7d70e; op2val:0xbfefc191763aad26;
op3val:0x3fe91ac73c28d472; valaddr_reg:x3; val_offset:3438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3438*FLEN/8, x4, x1, x2)

inst_1147:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x94c2220e7d70e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc191763aad26 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x91ac73c28d472 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe94c2220e7d70e; op2val:0xbfefc191763aad26;
op3val:0x3fe91ac73c28d472; valaddr_reg:x3; val_offset:3441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3441*FLEN/8, x4, x1, x2)

inst_1148:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x94c2220e7d70e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc191763aad26 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x91ac73c28d472 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe94c2220e7d70e; op2val:0xbfefc191763aad26;
op3val:0x3fe91ac73c28d472; valaddr_reg:x3; val_offset:3444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3444*FLEN/8, x4, x1, x2)

inst_1149:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x94c2220e7d70e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc191763aad26 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x91ac73c28d472 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe94c2220e7d70e; op2val:0xbfefc191763aad26;
op3val:0x3fe91ac73c28d472; valaddr_reg:x3; val_offset:3447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3447*FLEN/8, x4, x1, x2)

inst_1150:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x972723b45f8a7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3004ea9935aae and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xe3864c2032a80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe972723b45f8a7; op2val:0xbfb3004ea9935aae;
op3val:0x3fae3864c2032a80; valaddr_reg:x3; val_offset:3450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3450*FLEN/8, x4, x1, x2)

inst_1151:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x972723b45f8a7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3004ea9935aae and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xe3864c2032a80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe972723b45f8a7; op2val:0xbfb3004ea9935aae;
op3val:0x3fae3864c2032a80; valaddr_reg:x3; val_offset:3453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3453*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_10)

inst_1152:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x972723b45f8a7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3004ea9935aae and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xe3864c2032a80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe972723b45f8a7; op2val:0xbfb3004ea9935aae;
op3val:0x3fae3864c2032a80; valaddr_reg:x3; val_offset:3456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3456*FLEN/8, x4, x1, x2)

inst_1153:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x972723b45f8a7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3004ea9935aae and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xe3864c2032a80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe972723b45f8a7; op2val:0xbfb3004ea9935aae;
op3val:0x3fae3864c2032a80; valaddr_reg:x3; val_offset:3459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3459*FLEN/8, x4, x1, x2)

inst_1154:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x972723b45f8a7 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3004ea9935aae and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xe3864c2032a80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe972723b45f8a7; op2val:0xbfb3004ea9935aae;
op3val:0x3fae3864c2032a80; valaddr_reg:x3; val_offset:3462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3462*FLEN/8, x4, x1, x2)

inst_1155:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x985e0ab37b510 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x344d84e10bcfb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebcccd20a35cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe985e0ab37b510; op2val:0xbff344d84e10bcfb;
op3val:0x3feebcccd20a35cd; valaddr_reg:x3; val_offset:3465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3465*FLEN/8, x4, x1, x2)

inst_1156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x985e0ab37b510 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x344d84e10bcfb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebcccd20a35cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe985e0ab37b510; op2val:0xbff344d84e10bcfb;
op3val:0x3feebcccd20a35cd; valaddr_reg:x3; val_offset:3468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3468*FLEN/8, x4, x1, x2)

inst_1157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x985e0ab37b510 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x344d84e10bcfb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebcccd20a35cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe985e0ab37b510; op2val:0xbff344d84e10bcfb;
op3val:0x3feebcccd20a35cd; valaddr_reg:x3; val_offset:3471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3471*FLEN/8, x4, x1, x2)

inst_1158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x985e0ab37b510 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x344d84e10bcfb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebcccd20a35cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe985e0ab37b510; op2val:0xbff344d84e10bcfb;
op3val:0x3feebcccd20a35cd; valaddr_reg:x3; val_offset:3474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3474*FLEN/8, x4, x1, x2)

inst_1159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x985e0ab37b510 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x344d84e10bcfb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebcccd20a35cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe985e0ab37b510; op2val:0xbff344d84e10bcfb;
op3val:0x3feebcccd20a35cd; valaddr_reg:x3; val_offset:3477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3477*FLEN/8, x4, x1, x2)

inst_1160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99139652409a5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x386bed000191d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf33c551b37c95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe99139652409a5; op2val:0xbff386bed000191d;
op3val:0x3fef33c551b37c95; valaddr_reg:x3; val_offset:3480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3480*FLEN/8, x4, x1, x2)

inst_1161:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99139652409a5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x386bed000191d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf33c551b37c95 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe99139652409a5; op2val:0xbff386bed000191d;
op3val:0x3fef33c551b37c95; valaddr_reg:x3; val_offset:3483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3483*FLEN/8, x4, x1, x2)

inst_1162:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99139652409a5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x386bed000191d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf33c551b37c95 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe99139652409a5; op2val:0xbff386bed000191d;
op3val:0x3fef33c551b37c95; valaddr_reg:x3; val_offset:3486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3486*FLEN/8, x4, x1, x2)

inst_1163:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99139652409a5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x386bed000191d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf33c551b37c95 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe99139652409a5; op2val:0xbff386bed000191d;
op3val:0x3fef33c551b37c95; valaddr_reg:x3; val_offset:3489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3489*FLEN/8, x4, x1, x2)

inst_1164:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99139652409a5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x386bed000191d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf33c551b37c95 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe99139652409a5; op2val:0xbff386bed000191d;
op3val:0x3fef33c551b37c95; valaddr_reg:x3; val_offset:3492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3492*FLEN/8, x4, x1, x2)

inst_1165:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99acbe8d0b5e5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8dd680d309fe and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d8f020782810 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe99acbe8d0b5e5; op2val:0xbfec8dd680d309fe;
op3val:0x3fe6d8f020782810; valaddr_reg:x3; val_offset:3495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3495*FLEN/8, x4, x1, x2)

inst_1166:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99acbe8d0b5e5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8dd680d309fe and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d8f020782810 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe99acbe8d0b5e5; op2val:0xbfec8dd680d309fe;
op3val:0x3fe6d8f020782810; valaddr_reg:x3; val_offset:3498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3498*FLEN/8, x4, x1, x2)

inst_1167:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99acbe8d0b5e5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8dd680d309fe and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d8f020782810 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe99acbe8d0b5e5; op2val:0xbfec8dd680d309fe;
op3val:0x3fe6d8f020782810; valaddr_reg:x3; val_offset:3501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3501*FLEN/8, x4, x1, x2)

inst_1168:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99acbe8d0b5e5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8dd680d309fe and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d8f020782810 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe99acbe8d0b5e5; op2val:0xbfec8dd680d309fe;
op3val:0x3fe6d8f020782810; valaddr_reg:x3; val_offset:3504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3504*FLEN/8, x4, x1, x2)

inst_1169:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99acbe8d0b5e5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8dd680d309fe and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d8f020782810 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe99acbe8d0b5e5; op2val:0xbfec8dd680d309fe;
op3val:0x3fe6d8f020782810; valaddr_reg:x3; val_offset:3507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3507*FLEN/8, x4, x1, x2)

inst_1170:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9b6182f861f7a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x374dca71351c7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf44077c100750 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9b6182f861f7a; op2val:0xbfd374dca71351c7;
op3val:0x3fcf44077c100750; valaddr_reg:x3; val_offset:3510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3510*FLEN/8, x4, x1, x2)

inst_1171:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9b6182f861f7a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x374dca71351c7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf44077c100750 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9b6182f861f7a; op2val:0xbfd374dca71351c7;
op3val:0x3fcf44077c100750; valaddr_reg:x3; val_offset:3513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3513*FLEN/8, x4, x1, x2)

inst_1172:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9b6182f861f7a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x374dca71351c7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf44077c100750 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9b6182f861f7a; op2val:0xbfd374dca71351c7;
op3val:0x3fcf44077c100750; valaddr_reg:x3; val_offset:3516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3516*FLEN/8, x4, x1, x2)

inst_1173:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9b6182f861f7a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x374dca71351c7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf44077c100750 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9b6182f861f7a; op2val:0xbfd374dca71351c7;
op3val:0x3fcf44077c100750; valaddr_reg:x3; val_offset:3519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3519*FLEN/8, x4, x1, x2)

inst_1174:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9b6182f861f7a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x374dca71351c7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf44077c100750 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9b6182f861f7a; op2val:0xbfd374dca71351c7;
op3val:0x3fcf44077c100750; valaddr_reg:x3; val_offset:3522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3522*FLEN/8, x4, x1, x2)

inst_1175:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9cffe79ce8502 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x320ca64ec245e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xedbe4b25689da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9cffe79ce8502; op2val:0xbff320ca64ec245e;
op3val:0x3feedbe4b25689da; valaddr_reg:x3; val_offset:3525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3525*FLEN/8, x4, x1, x2)

inst_1176:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9cffe79ce8502 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x320ca64ec245e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xedbe4b25689da and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9cffe79ce8502; op2val:0xbff320ca64ec245e;
op3val:0x3feedbe4b25689da; valaddr_reg:x3; val_offset:3528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3528*FLEN/8, x4, x1, x2)

inst_1177:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9cffe79ce8502 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x320ca64ec245e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xedbe4b25689da and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9cffe79ce8502; op2val:0xbff320ca64ec245e;
op3val:0x3feedbe4b25689da; valaddr_reg:x3; val_offset:3531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3531*FLEN/8, x4, x1, x2)

inst_1178:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9cffe79ce8502 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x320ca64ec245e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xedbe4b25689da and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9cffe79ce8502; op2val:0xbff320ca64ec245e;
op3val:0x3feedbe4b25689da; valaddr_reg:x3; val_offset:3534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3534*FLEN/8, x4, x1, x2)

inst_1179:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9cffe79ce8502 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x320ca64ec245e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xedbe4b25689da and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9cffe79ce8502; op2val:0xbff320ca64ec245e;
op3val:0x3feedbe4b25689da; valaddr_reg:x3; val_offset:3537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3537*FLEN/8, x4, x1, x2)

inst_1180:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa35e855815160 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc04431ff9e623 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x6f2a902eb3370 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea35e855815160; op2val:0xbfac04431ff9e623;
op3val:0x3fa6f2a902eb3370; valaddr_reg:x3; val_offset:3540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3540*FLEN/8, x4, x1, x2)

inst_1181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa35e855815160 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc04431ff9e623 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x6f2a902eb3370 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea35e855815160; op2val:0xbfac04431ff9e623;
op3val:0x3fa6f2a902eb3370; valaddr_reg:x3; val_offset:3543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3543*FLEN/8, x4, x1, x2)

inst_1182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa35e855815160 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc04431ff9e623 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x6f2a902eb3370 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea35e855815160; op2val:0xbfac04431ff9e623;
op3val:0x3fa6f2a902eb3370; valaddr_reg:x3; val_offset:3546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3546*FLEN/8, x4, x1, x2)

inst_1183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa35e855815160 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc04431ff9e623 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x6f2a902eb3370 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea35e855815160; op2val:0xbfac04431ff9e623;
op3val:0x3fa6f2a902eb3370; valaddr_reg:x3; val_offset:3549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3549*FLEN/8, x4, x1, x2)

inst_1184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa35e855815160 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc04431ff9e623 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x6f2a902eb3370 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea35e855815160; op2val:0xbfac04431ff9e623;
op3val:0x3fa6f2a902eb3370; valaddr_reg:x3; val_offset:3552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3552*FLEN/8, x4, x1, x2)

inst_1185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa42775d379294 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3293e7a519c9a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf729e9ae02556 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea42775d379294; op2val:0xbfe3293e7a519c9a;
op3val:0x3fdf729e9ae02556; valaddr_reg:x3; val_offset:3555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3555*FLEN/8, x4, x1, x2)

inst_1186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa42775d379294 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3293e7a519c9a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf729e9ae02556 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea42775d379294; op2val:0xbfe3293e7a519c9a;
op3val:0x3fdf729e9ae02556; valaddr_reg:x3; val_offset:3558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3558*FLEN/8, x4, x1, x2)

inst_1187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa42775d379294 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3293e7a519c9a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf729e9ae02556 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea42775d379294; op2val:0xbfe3293e7a519c9a;
op3val:0x3fdf729e9ae02556; valaddr_reg:x3; val_offset:3561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3561*FLEN/8, x4, x1, x2)

inst_1188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa42775d379294 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3293e7a519c9a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf729e9ae02556 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea42775d379294; op2val:0xbfe3293e7a519c9a;
op3val:0x3fdf729e9ae02556; valaddr_reg:x3; val_offset:3564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3564*FLEN/8, x4, x1, x2)

inst_1189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa42775d379294 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3293e7a519c9a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf729e9ae02556 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea42775d379294; op2val:0xbfe3293e7a519c9a;
op3val:0x3fdf729e9ae02556; valaddr_reg:x3; val_offset:3567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3567*FLEN/8, x4, x1, x2)

inst_1190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaaeb6c3349442 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9148ba3c75a15 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4e9a06a35212c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaaeb6c3349442; op2val:0xbfc9148ba3c75a15;
op3val:0x3fc4e9a06a35212c; valaddr_reg:x3; val_offset:3570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3570*FLEN/8, x4, x1, x2)

inst_1191:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaaeb6c3349442 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9148ba3c75a15 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4e9a06a35212c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaaeb6c3349442; op2val:0xbfc9148ba3c75a15;
op3val:0x3fc4e9a06a35212c; valaddr_reg:x3; val_offset:3573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3573*FLEN/8, x4, x1, x2)

inst_1192:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaaeb6c3349442 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9148ba3c75a15 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4e9a06a35212c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaaeb6c3349442; op2val:0xbfc9148ba3c75a15;
op3val:0x3fc4e9a06a35212c; valaddr_reg:x3; val_offset:3576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3576*FLEN/8, x4, x1, x2)

inst_1193:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaaeb6c3349442 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9148ba3c75a15 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4e9a06a35212c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaaeb6c3349442; op2val:0xbfc9148ba3c75a15;
op3val:0x3fc4e9a06a35212c; valaddr_reg:x3; val_offset:3579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3579*FLEN/8, x4, x1, x2)

inst_1194:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaaeb6c3349442 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9148ba3c75a15 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4e9a06a35212c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaaeb6c3349442; op2val:0xbfc9148ba3c75a15;
op3val:0x3fc4e9a06a35212c; valaddr_reg:x3; val_offset:3582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3582*FLEN/8, x4, x1, x2)

inst_1195:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac5cf7ce589af and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0c4b86af495e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84d8d674c2398 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feac5cf7ce589af; op2val:0xbfed0c4b86af495e;
op3val:0x3fe84d8d674c2398; valaddr_reg:x3; val_offset:3585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3585*FLEN/8, x4, x1, x2)

inst_1196:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac5cf7ce589af and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0c4b86af495e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84d8d674c2398 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feac5cf7ce589af; op2val:0xbfed0c4b86af495e;
op3val:0x3fe84d8d674c2398; valaddr_reg:x3; val_offset:3588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3588*FLEN/8, x4, x1, x2)

inst_1197:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac5cf7ce589af and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0c4b86af495e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84d8d674c2398 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feac5cf7ce589af; op2val:0xbfed0c4b86af495e;
op3val:0x3fe84d8d674c2398; valaddr_reg:x3; val_offset:3591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3591*FLEN/8, x4, x1, x2)

inst_1198:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac5cf7ce589af and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0c4b86af495e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84d8d674c2398 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feac5cf7ce589af; op2val:0xbfed0c4b86af495e;
op3val:0x3fe84d8d674c2398; valaddr_reg:x3; val_offset:3594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3594*FLEN/8, x4, x1, x2)

inst_1199:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac5cf7ce589af and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0c4b86af495e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84d8d674c2398 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feac5cf7ce589af; op2val:0xbfed0c4b86af495e;
op3val:0x3fe84d8d674c2398; valaddr_reg:x3; val_offset:3597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3597*FLEN/8, x4, x1, x2)

inst_1200:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad4af5cff9f91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb35ae39284d82 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d0764d4fe2e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead4af5cff9f91; op2val:0xbfeb35ae39284d82;
op3val:0x3fe6d0764d4fe2e6; valaddr_reg:x3; val_offset:3600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3600*FLEN/8, x4, x1, x2)

inst_1201:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad4af5cff9f91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb35ae39284d82 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d0764d4fe2e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead4af5cff9f91; op2val:0xbfeb35ae39284d82;
op3val:0x3fe6d0764d4fe2e6; valaddr_reg:x3; val_offset:3603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3603*FLEN/8, x4, x1, x2)

inst_1202:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad4af5cff9f91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb35ae39284d82 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d0764d4fe2e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead4af5cff9f91; op2val:0xbfeb35ae39284d82;
op3val:0x3fe6d0764d4fe2e6; valaddr_reg:x3; val_offset:3606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3606*FLEN/8, x4, x1, x2)

inst_1203:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad4af5cff9f91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb35ae39284d82 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d0764d4fe2e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead4af5cff9f91; op2val:0xbfeb35ae39284d82;
op3val:0x3fe6d0764d4fe2e6; valaddr_reg:x3; val_offset:3609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3609*FLEN/8, x4, x1, x2)

inst_1204:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad4af5cff9f91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb35ae39284d82 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d0764d4fe2e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead4af5cff9f91; op2val:0xbfeb35ae39284d82;
op3val:0x3fe6d0764d4fe2e6; valaddr_reg:x3; val_offset:3612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3612*FLEN/8, x4, x1, x2)

inst_1205:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad4c0291e968d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x227e75b7faf5d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe7242bbad194a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead4c0291e968d; op2val:0xbff227e75b7faf5d;
op3val:0x3fee7242bbad194a; valaddr_reg:x3; val_offset:3615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3615*FLEN/8, x4, x1, x2)

inst_1206:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad4c0291e968d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x227e75b7faf5d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe7242bbad194a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead4c0291e968d; op2val:0xbff227e75b7faf5d;
op3val:0x3fee7242bbad194a; valaddr_reg:x3; val_offset:3618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3618*FLEN/8, x4, x1, x2)

inst_1207:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad4c0291e968d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x227e75b7faf5d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe7242bbad194a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead4c0291e968d; op2val:0xbff227e75b7faf5d;
op3val:0x3fee7242bbad194a; valaddr_reg:x3; val_offset:3621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3621*FLEN/8, x4, x1, x2)

inst_1208:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad4c0291e968d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x227e75b7faf5d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe7242bbad194a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead4c0291e968d; op2val:0xbff227e75b7faf5d;
op3val:0x3fee7242bbad194a; valaddr_reg:x3; val_offset:3624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3624*FLEN/8, x4, x1, x2)

inst_1209:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad4c0291e968d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x227e75b7faf5d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe7242bbad194a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead4c0291e968d; op2val:0xbff227e75b7faf5d;
op3val:0x3fee7242bbad194a; valaddr_reg:x3; val_offset:3627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3627*FLEN/8, x4, x1, x2)

inst_1210:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb0ceaa962f523 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfd5ac1ca9572d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae922cbb719da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb0ceaa962f523; op2val:0xbfefd5ac1ca9572d;
op3val:0x3feae922cbb719da; valaddr_reg:x3; val_offset:3630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3630*FLEN/8, x4, x1, x2)

inst_1211:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb0ceaa962f523 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfd5ac1ca9572d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae922cbb719da and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb0ceaa962f523; op2val:0xbfefd5ac1ca9572d;
op3val:0x3feae922cbb719da; valaddr_reg:x3; val_offset:3633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3633*FLEN/8, x4, x1, x2)

inst_1212:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb0ceaa962f523 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfd5ac1ca9572d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae922cbb719da and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb0ceaa962f523; op2val:0xbfefd5ac1ca9572d;
op3val:0x3feae922cbb719da; valaddr_reg:x3; val_offset:3636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3636*FLEN/8, x4, x1, x2)

inst_1213:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb0ceaa962f523 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfd5ac1ca9572d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae922cbb719da and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb0ceaa962f523; op2val:0xbfefd5ac1ca9572d;
op3val:0x3feae922cbb719da; valaddr_reg:x3; val_offset:3639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3639*FLEN/8, x4, x1, x2)

inst_1214:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb0ceaa962f523 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfd5ac1ca9572d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae922cbb719da and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb0ceaa962f523; op2val:0xbfefd5ac1ca9572d;
op3val:0x3feae922cbb719da; valaddr_reg:x3; val_offset:3642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3642*FLEN/8, x4, x1, x2)

inst_1215:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb164cfa4c39ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf5016c824fd42 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa81659bab3338 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb164cfa4c39ce; op2val:0xbfdf5016c824fd42;
op3val:0x3fda81659bab3338; valaddr_reg:x3; val_offset:3645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3645*FLEN/8, x4, x1, x2)

inst_1216:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb164cfa4c39ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf5016c824fd42 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa81659bab3338 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb164cfa4c39ce; op2val:0xbfdf5016c824fd42;
op3val:0x3fda81659bab3338; valaddr_reg:x3; val_offset:3648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3648*FLEN/8, x4, x1, x2)

inst_1217:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb164cfa4c39ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf5016c824fd42 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa81659bab3338 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb164cfa4c39ce; op2val:0xbfdf5016c824fd42;
op3val:0x3fda81659bab3338; valaddr_reg:x3; val_offset:3651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3651*FLEN/8, x4, x1, x2)

inst_1218:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb164cfa4c39ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf5016c824fd42 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa81659bab3338 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb164cfa4c39ce; op2val:0xbfdf5016c824fd42;
op3val:0x3fda81659bab3338; valaddr_reg:x3; val_offset:3654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3654*FLEN/8, x4, x1, x2)

inst_1219:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb164cfa4c39ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf5016c824fd42 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa81659bab3338 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb164cfa4c39ce; op2val:0xbfdf5016c824fd42;
op3val:0x3fda81659bab3338; valaddr_reg:x3; val_offset:3657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3657*FLEN/8, x4, x1, x2)

inst_1220:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2a1d05b9b44a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbcb3357c80847 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x798073a939072 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb2a1d05b9b44a; op2val:0xbfdbcb3357c80847;
op3val:0x3fd798073a939072; valaddr_reg:x3; val_offset:3660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3660*FLEN/8, x4, x1, x2)

inst_1221:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2a1d05b9b44a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbcb3357c80847 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x798073a939072 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb2a1d05b9b44a; op2val:0xbfdbcb3357c80847;
op3val:0x3fd798073a939072; valaddr_reg:x3; val_offset:3663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3663*FLEN/8, x4, x1, x2)

inst_1222:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2a1d05b9b44a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbcb3357c80847 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x798073a939072 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb2a1d05b9b44a; op2val:0xbfdbcb3357c80847;
op3val:0x3fd798073a939072; valaddr_reg:x3; val_offset:3666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3666*FLEN/8, x4, x1, x2)

inst_1223:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2a1d05b9b44a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbcb3357c80847 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x798073a939072 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb2a1d05b9b44a; op2val:0xbfdbcb3357c80847;
op3val:0x3fd798073a939072; valaddr_reg:x3; val_offset:3669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3669*FLEN/8, x4, x1, x2)

inst_1224:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2a1d05b9b44a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbcb3357c80847 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x798073a939072 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb2a1d05b9b44a; op2val:0xbfdbcb3357c80847;
op3val:0x3fd798073a939072; valaddr_reg:x3; val_offset:3672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3672*FLEN/8, x4, x1, x2)

inst_1225:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb35696b448525 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd4f2fa3033307 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8ebbbe68488be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb35696b448525; op2val:0xbfdd4f2fa3033307;
op3val:0x3fd8ebbbe68488be; valaddr_reg:x3; val_offset:3675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3675*FLEN/8, x4, x1, x2)

inst_1226:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb35696b448525 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd4f2fa3033307 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8ebbbe68488be and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb35696b448525; op2val:0xbfdd4f2fa3033307;
op3val:0x3fd8ebbbe68488be; valaddr_reg:x3; val_offset:3678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3678*FLEN/8, x4, x1, x2)

inst_1227:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb35696b448525 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd4f2fa3033307 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8ebbbe68488be and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb35696b448525; op2val:0xbfdd4f2fa3033307;
op3val:0x3fd8ebbbe68488be; valaddr_reg:x3; val_offset:3681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3681*FLEN/8, x4, x1, x2)

inst_1228:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb35696b448525 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd4f2fa3033307 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8ebbbe68488be and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb35696b448525; op2val:0xbfdd4f2fa3033307;
op3val:0x3fd8ebbbe68488be; valaddr_reg:x3; val_offset:3684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3684*FLEN/8, x4, x1, x2)

inst_1229:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb35696b448525 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd4f2fa3033307 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8ebbbe68488be and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb35696b448525; op2val:0xbfdd4f2fa3033307;
op3val:0x3fd8ebbbe68488be; valaddr_reg:x3; val_offset:3687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3687*FLEN/8, x4, x1, x2)

inst_1230:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3961d3c3d1a3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x75c4a457c04fa and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3dfc2794508e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb3961d3c3d1a3; op2val:0xbfc75c4a457c04fa;
op3val:0x3fc3dfc2794508e4; valaddr_reg:x3; val_offset:3690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3690*FLEN/8, x4, x1, x2)

inst_1231:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3961d3c3d1a3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x75c4a457c04fa and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3dfc2794508e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb3961d3c3d1a3; op2val:0xbfc75c4a457c04fa;
op3val:0x3fc3dfc2794508e4; valaddr_reg:x3; val_offset:3693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3693*FLEN/8, x4, x1, x2)

inst_1232:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3961d3c3d1a3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x75c4a457c04fa and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3dfc2794508e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb3961d3c3d1a3; op2val:0xbfc75c4a457c04fa;
op3val:0x3fc3dfc2794508e4; valaddr_reg:x3; val_offset:3696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3696*FLEN/8, x4, x1, x2)

inst_1233:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3961d3c3d1a3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x75c4a457c04fa and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3dfc2794508e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb3961d3c3d1a3; op2val:0xbfc75c4a457c04fa;
op3val:0x3fc3dfc2794508e4; valaddr_reg:x3; val_offset:3699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3699*FLEN/8, x4, x1, x2)

inst_1234:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3961d3c3d1a3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x75c4a457c04fa and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3dfc2794508e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb3961d3c3d1a3; op2val:0xbfc75c4a457c04fa;
op3val:0x3fc3dfc2794508e4; valaddr_reg:x3; val_offset:3702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3702*FLEN/8, x4, x1, x2)

inst_1235:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb5668f2f1db49 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1824308305883 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdea601eac2e57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb5668f2f1db49; op2val:0xbff1824308305883;
op3val:0x3fedea601eac2e57; valaddr_reg:x3; val_offset:3705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3705*FLEN/8, x4, x1, x2)

inst_1236:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb5668f2f1db49 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1824308305883 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdea601eac2e57 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb5668f2f1db49; op2val:0xbff1824308305883;
op3val:0x3fedea601eac2e57; valaddr_reg:x3; val_offset:3708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3708*FLEN/8, x4, x1, x2)

inst_1237:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb5668f2f1db49 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1824308305883 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdea601eac2e57 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb5668f2f1db49; op2val:0xbff1824308305883;
op3val:0x3fedea601eac2e57; valaddr_reg:x3; val_offset:3711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3711*FLEN/8, x4, x1, x2)

inst_1238:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb5668f2f1db49 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1824308305883 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdea601eac2e57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb5668f2f1db49; op2val:0xbff1824308305883;
op3val:0x3fedea601eac2e57; valaddr_reg:x3; val_offset:3714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3714*FLEN/8, x4, x1, x2)

inst_1239:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb5668f2f1db49 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1824308305883 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdea601eac2e57 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb5668f2f1db49; op2val:0xbff1824308305883;
op3val:0x3fedea601eac2e57; valaddr_reg:x3; val_offset:3717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3717*FLEN/8, x4, x1, x2)

inst_1240:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbd8914dda5bbb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e1217d67968e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd6061121d1254 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febd8914dda5bbb; op2val:0xbff0e1217d67968e;
op3val:0x3fed6061121d1254; valaddr_reg:x3; val_offset:3720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3720*FLEN/8, x4, x1, x2)

inst_1241:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbd8914dda5bbb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e1217d67968e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd6061121d1254 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febd8914dda5bbb; op2val:0xbff0e1217d67968e;
op3val:0x3fed6061121d1254; valaddr_reg:x3; val_offset:3723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3723*FLEN/8, x4, x1, x2)

inst_1242:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbd8914dda5bbb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e1217d67968e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd6061121d1254 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febd8914dda5bbb; op2val:0xbff0e1217d67968e;
op3val:0x3fed6061121d1254; valaddr_reg:x3; val_offset:3726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3726*FLEN/8, x4, x1, x2)

inst_1243:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbd8914dda5bbb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e1217d67968e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd6061121d1254 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febd8914dda5bbb; op2val:0xbff0e1217d67968e;
op3val:0x3fed6061121d1254; valaddr_reg:x3; val_offset:3729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3729*FLEN/8, x4, x1, x2)

inst_1244:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbd8914dda5bbb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0e1217d67968e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd6061121d1254 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febd8914dda5bbb; op2val:0xbff0e1217d67968e;
op3val:0x3fed6061121d1254; valaddr_reg:x3; val_offset:3732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3732*FLEN/8, x4, x1, x2)

inst_1245:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1982815c1989 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb92a2a2627b7c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x83649505037e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec1982815c1989; op2val:0xbfdb92a2a2627b7c;
op3val:0x3fd83649505037e0; valaddr_reg:x3; val_offset:3735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3735*FLEN/8, x4, x1, x2)

inst_1246:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1982815c1989 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb92a2a2627b7c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x83649505037e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec1982815c1989; op2val:0xbfdb92a2a2627b7c;
op3val:0x3fd83649505037e0; valaddr_reg:x3; val_offset:3738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3738*FLEN/8, x4, x1, x2)

inst_1247:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1982815c1989 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb92a2a2627b7c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x83649505037e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec1982815c1989; op2val:0xbfdb92a2a2627b7c;
op3val:0x3fd83649505037e0; valaddr_reg:x3; val_offset:3741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3741*FLEN/8, x4, x1, x2)

inst_1248:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1982815c1989 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb92a2a2627b7c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x83649505037e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec1982815c1989; op2val:0xbfdb92a2a2627b7c;
op3val:0x3fd83649505037e0; valaddr_reg:x3; val_offset:3744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3744*FLEN/8, x4, x1, x2)

inst_1249:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1982815c1989 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb92a2a2627b7c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x83649505037e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec1982815c1989; op2val:0xbfdb92a2a2627b7c;
op3val:0x3fd83649505037e0; valaddr_reg:x3; val_offset:3747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3747*FLEN/8, x4, x1, x2)

inst_1250:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3a0de8dbcd32 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x80c1c503492a7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x536392d67da8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3a0de8dbcd32; op2val:0xbfd80c1c503492a7;
op3val:0x3fd536392d67da8c; valaddr_reg:x3; val_offset:3750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3750*FLEN/8, x4, x1, x2)

inst_1251:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3a0de8dbcd32 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x80c1c503492a7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x536392d67da8c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3a0de8dbcd32; op2val:0xbfd80c1c503492a7;
op3val:0x3fd536392d67da8c; valaddr_reg:x3; val_offset:3753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3753*FLEN/8, x4, x1, x2)

inst_1252:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3a0de8dbcd32 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x80c1c503492a7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x536392d67da8c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3a0de8dbcd32; op2val:0xbfd80c1c503492a7;
op3val:0x3fd536392d67da8c; valaddr_reg:x3; val_offset:3756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3756*FLEN/8, x4, x1, x2)

inst_1253:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3a0de8dbcd32 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x80c1c503492a7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x536392d67da8c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3a0de8dbcd32; op2val:0xbfd80c1c503492a7;
op3val:0x3fd536392d67da8c; valaddr_reg:x3; val_offset:3759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3759*FLEN/8, x4, x1, x2)

inst_1254:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3a0de8dbcd32 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x80c1c503492a7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x536392d67da8c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3a0de8dbcd32; op2val:0xbfd80c1c503492a7;
op3val:0x3fd536392d67da8c; valaddr_reg:x3; val_offset:3762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3762*FLEN/8, x4, x1, x2)

inst_1255:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4c4b2771f44c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e80868a6395e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x60668ee112e02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec4c4b2771f44c; op2val:0xbfe8e80868a6395e;
op3val:0x3fe60668ee112e02; valaddr_reg:x3; val_offset:3765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3765*FLEN/8, x4, x1, x2)

inst_1256:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4c4b2771f44c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e80868a6395e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x60668ee112e02 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec4c4b2771f44c; op2val:0xbfe8e80868a6395e;
op3val:0x3fe60668ee112e02; valaddr_reg:x3; val_offset:3768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3768*FLEN/8, x4, x1, x2)

inst_1257:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4c4b2771f44c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e80868a6395e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x60668ee112e02 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec4c4b2771f44c; op2val:0xbfe8e80868a6395e;
op3val:0x3fe60668ee112e02; valaddr_reg:x3; val_offset:3771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3771*FLEN/8, x4, x1, x2)

inst_1258:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4c4b2771f44c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e80868a6395e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x60668ee112e02 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec4c4b2771f44c; op2val:0xbfe8e80868a6395e;
op3val:0x3fe60668ee112e02; valaddr_reg:x3; val_offset:3774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3774*FLEN/8, x4, x1, x2)

inst_1259:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4c4b2771f44c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8e80868a6395e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x60668ee112e02 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec4c4b2771f44c; op2val:0xbfe8e80868a6395e;
op3val:0x3fe60668ee112e02; valaddr_reg:x3; val_offset:3777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3777*FLEN/8, x4, x1, x2)

inst_1260:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc514f693e9cb5 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x864372921e037 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x595aa773e7e18 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec514f693e9cb5; op2val:0xbfc864372921e037;
op3val:0x3fc595aa773e7e18; valaddr_reg:x3; val_offset:3780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3780*FLEN/8, x4, x1, x2)

inst_1261:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc514f693e9cb5 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x864372921e037 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x595aa773e7e18 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec514f693e9cb5; op2val:0xbfc864372921e037;
op3val:0x3fc595aa773e7e18; valaddr_reg:x3; val_offset:3783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3783*FLEN/8, x4, x1, x2)

inst_1262:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc514f693e9cb5 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x864372921e037 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x595aa773e7e18 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec514f693e9cb5; op2val:0xbfc864372921e037;
op3val:0x3fc595aa773e7e18; valaddr_reg:x3; val_offset:3786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3786*FLEN/8, x4, x1, x2)

inst_1263:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc514f693e9cb5 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x864372921e037 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x595aa773e7e18 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec514f693e9cb5; op2val:0xbfc864372921e037;
op3val:0x3fc595aa773e7e18; valaddr_reg:x3; val_offset:3789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3789*FLEN/8, x4, x1, x2)

inst_1264:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc514f693e9cb5 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x864372921e037 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x595aa773e7e18 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec514f693e9cb5; op2val:0xbfc864372921e037;
op3val:0x3fc595aa773e7e18; valaddr_reg:x3; val_offset:3792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3792*FLEN/8, x4, x1, x2)

inst_1265:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8981495bf177 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x646b83296fca5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3dd99f10494d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8981495bf177; op2val:0xbfe646b83296fca5;
op3val:0x3fe3dd99f10494d1; valaddr_reg:x3; val_offset:3795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3795*FLEN/8, x4, x1, x2)

inst_1266:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8981495bf177 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x646b83296fca5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3dd99f10494d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8981495bf177; op2val:0xbfe646b83296fca5;
op3val:0x3fe3dd99f10494d1; valaddr_reg:x3; val_offset:3798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3798*FLEN/8, x4, x1, x2)

inst_1267:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8981495bf177 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x646b83296fca5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3dd99f10494d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8981495bf177; op2val:0xbfe646b83296fca5;
op3val:0x3fe3dd99f10494d1; valaddr_reg:x3; val_offset:3801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3801*FLEN/8, x4, x1, x2)

inst_1268:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8981495bf177 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x646b83296fca5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3dd99f10494d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8981495bf177; op2val:0xbfe646b83296fca5;
op3val:0x3fe3dd99f10494d1; valaddr_reg:x3; val_offset:3804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3804*FLEN/8, x4, x1, x2)

inst_1269:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8981495bf177 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x646b83296fca5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3dd99f10494d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8981495bf177; op2val:0xbfe646b83296fca5;
op3val:0x3fe3dd99f10494d1; valaddr_reg:x3; val_offset:3807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3807*FLEN/8, x4, x1, x2)

inst_1270:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8ad4b5a41513 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20da04f9d24ce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01a3f09c089d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8ad4b5a41513; op2val:0xbfd20da04f9d24ce;
op3val:0x3fd01a3f09c089d0; valaddr_reg:x3; val_offset:3810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3810*FLEN/8, x4, x1, x2)

inst_1271:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8ad4b5a41513 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20da04f9d24ce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01a3f09c089d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8ad4b5a41513; op2val:0xbfd20da04f9d24ce;
op3val:0x3fd01a3f09c089d0; valaddr_reg:x3; val_offset:3813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3813*FLEN/8, x4, x1, x2)

inst_1272:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8ad4b5a41513 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20da04f9d24ce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01a3f09c089d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8ad4b5a41513; op2val:0xbfd20da04f9d24ce;
op3val:0x3fd01a3f09c089d0; valaddr_reg:x3; val_offset:3816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3816*FLEN/8, x4, x1, x2)

inst_1273:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8ad4b5a41513 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20da04f9d24ce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01a3f09c089d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8ad4b5a41513; op2val:0xbfd20da04f9d24ce;
op3val:0x3fd01a3f09c089d0; valaddr_reg:x3; val_offset:3819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3819*FLEN/8, x4, x1, x2)

inst_1274:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8ad4b5a41513 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20da04f9d24ce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01a3f09c089d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8ad4b5a41513; op2val:0xbfd20da04f9d24ce;
op3val:0x3fd01a3f09c089d0; valaddr_reg:x3; val_offset:3822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3822*FLEN/8, x4, x1, x2)

inst_1275:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8b6ca7a718e0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06eb115e7e12c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd50e7201e6198 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8b6ca7a718e0; op2val:0xbfe06eb115e7e12c;
op3val:0x3fdd50e7201e6198; valaddr_reg:x3; val_offset:3825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3825*FLEN/8, x4, x1, x2)

inst_1276:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8b6ca7a718e0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06eb115e7e12c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd50e7201e6198 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8b6ca7a718e0; op2val:0xbfe06eb115e7e12c;
op3val:0x3fdd50e7201e6198; valaddr_reg:x3; val_offset:3828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3828*FLEN/8, x4, x1, x2)

inst_1277:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8b6ca7a718e0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06eb115e7e12c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd50e7201e6198 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8b6ca7a718e0; op2val:0xbfe06eb115e7e12c;
op3val:0x3fdd50e7201e6198; valaddr_reg:x3; val_offset:3831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3831*FLEN/8, x4, x1, x2)

inst_1278:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8b6ca7a718e0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06eb115e7e12c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd50e7201e6198 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8b6ca7a718e0; op2val:0xbfe06eb115e7e12c;
op3val:0x3fdd50e7201e6198; valaddr_reg:x3; val_offset:3834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3834*FLEN/8, x4, x1, x2)

inst_1279:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8b6ca7a718e0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06eb115e7e12c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd50e7201e6198 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8b6ca7a718e0; op2val:0xbfe06eb115e7e12c;
op3val:0x3fdd50e7201e6198; valaddr_reg:x3; val_offset:3837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3837*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_11)

inst_1280:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8beed6b22201 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf264f6fa67af6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbc9bc68ab0e92 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8beed6b22201; op2val:0xbfdf264f6fa67af6;
op3val:0x3fdbc9bc68ab0e92; valaddr_reg:x3; val_offset:3840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3840*FLEN/8, x4, x1, x2)

inst_1281:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8beed6b22201 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf264f6fa67af6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbc9bc68ab0e92 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8beed6b22201; op2val:0xbfdf264f6fa67af6;
op3val:0x3fdbc9bc68ab0e92; valaddr_reg:x3; val_offset:3843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3843*FLEN/8, x4, x1, x2)

inst_1282:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8beed6b22201 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf264f6fa67af6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbc9bc68ab0e92 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8beed6b22201; op2val:0xbfdf264f6fa67af6;
op3val:0x3fdbc9bc68ab0e92; valaddr_reg:x3; val_offset:3846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3846*FLEN/8, x4, x1, x2)

inst_1283:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8beed6b22201 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf264f6fa67af6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbc9bc68ab0e92 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8beed6b22201; op2val:0xbfdf264f6fa67af6;
op3val:0x3fdbc9bc68ab0e92; valaddr_reg:x3; val_offset:3849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3849*FLEN/8, x4, x1, x2)

inst_1284:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8beed6b22201 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf264f6fa67af6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbc9bc68ab0e92 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec8beed6b22201; op2val:0xbfdf264f6fa67af6;
op3val:0x3fdbc9bc68ab0e92; valaddr_reg:x3; val_offset:3852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3852*FLEN/8, x4, x1, x2)

inst_1285:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc967b675320a0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x441010758ece0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2181fb6820ce9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec967b675320a0; op2val:0xbfe441010758ece0;
op3val:0x3fe2181fb6820ce9; valaddr_reg:x3; val_offset:3855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3855*FLEN/8, x4, x1, x2)

inst_1286:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc967b675320a0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x441010758ece0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2181fb6820ce9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec967b675320a0; op2val:0xbfe441010758ece0;
op3val:0x3fe2181fb6820ce9; valaddr_reg:x3; val_offset:3858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3858*FLEN/8, x4, x1, x2)

inst_1287:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc967b675320a0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x441010758ece0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2181fb6820ce9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec967b675320a0; op2val:0xbfe441010758ece0;
op3val:0x3fe2181fb6820ce9; valaddr_reg:x3; val_offset:3861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3861*FLEN/8, x4, x1, x2)

inst_1288:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc967b675320a0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x441010758ece0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2181fb6820ce9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec967b675320a0; op2val:0xbfe441010758ece0;
op3val:0x3fe2181fb6820ce9; valaddr_reg:x3; val_offset:3864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3864*FLEN/8, x4, x1, x2)

inst_1289:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc967b675320a0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x441010758ece0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2181fb6820ce9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec967b675320a0; op2val:0xbfe441010758ece0;
op3val:0x3fe2181fb6820ce9; valaddr_reg:x3; val_offset:3867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3867*FLEN/8, x4, x1, x2)

inst_1290:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xce562dfda01e1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1218bd738c2cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xef04eb7412fa2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fece562dfda01e1; op2val:0xbff1218bd738c2cd;
op3val:0x3feef04eb7412fa2; valaddr_reg:x3; val_offset:3870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3870*FLEN/8, x4, x1, x2)

inst_1291:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xce562dfda01e1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1218bd738c2cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xef04eb7412fa2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fece562dfda01e1; op2val:0xbff1218bd738c2cd;
op3val:0x3feef04eb7412fa2; valaddr_reg:x3; val_offset:3873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3873*FLEN/8, x4, x1, x2)

inst_1292:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xce562dfda01e1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1218bd738c2cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xef04eb7412fa2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fece562dfda01e1; op2val:0xbff1218bd738c2cd;
op3val:0x3feef04eb7412fa2; valaddr_reg:x3; val_offset:3876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3876*FLEN/8, x4, x1, x2)

inst_1293:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xce562dfda01e1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1218bd738c2cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xef04eb7412fa2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fece562dfda01e1; op2val:0xbff1218bd738c2cd;
op3val:0x3feef04eb7412fa2; valaddr_reg:x3; val_offset:3879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3879*FLEN/8, x4, x1, x2)

inst_1294:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xce562dfda01e1 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1218bd738c2cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xef04eb7412fa2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fece562dfda01e1; op2val:0xbff1218bd738c2cd;
op3val:0x3feef04eb7412fa2; valaddr_reg:x3; val_offset:3882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3882*FLEN/8, x4, x1, x2)

inst_1295:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcff7865224462 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x06622e5458ea6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdb894430d5126 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecff7865224462; op2val:0xbff06622e5458ea6;
op3val:0x3fedb894430d5126; valaddr_reg:x3; val_offset:3885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3885*FLEN/8, x4, x1, x2)

inst_1296:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcff7865224462 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x06622e5458ea6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdb894430d5126 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecff7865224462; op2val:0xbff06622e5458ea6;
op3val:0x3fedb894430d5126; valaddr_reg:x3; val_offset:3888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3888*FLEN/8, x4, x1, x2)

inst_1297:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcff7865224462 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x06622e5458ea6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdb894430d5126 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecff7865224462; op2val:0xbff06622e5458ea6;
op3val:0x3fedb894430d5126; valaddr_reg:x3; val_offset:3891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3891*FLEN/8, x4, x1, x2)

inst_1298:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcff7865224462 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x06622e5458ea6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdb894430d5126 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecff7865224462; op2val:0xbff06622e5458ea6;
op3val:0x3fedb894430d5126; valaddr_reg:x3; val_offset:3894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3894*FLEN/8, x4, x1, x2)

inst_1299:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcff7865224462 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x06622e5458ea6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdb894430d5126 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecff7865224462; op2val:0xbff06622e5458ea6;
op3val:0x3fedb894430d5126; valaddr_reg:x3; val_offset:3897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3897*FLEN/8, x4, x1, x2)

inst_1300:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd150df72a8355 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7367d25f25d0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x518a74df2cf93 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed150df72a8355; op2val:0xbfe7367d25f25d0f;
op3val:0x3fe518a74df2cf93; valaddr_reg:x3; val_offset:3900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3900*FLEN/8, x4, x1, x2)

inst_1301:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd150df72a8355 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7367d25f25d0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x518a74df2cf93 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed150df72a8355; op2val:0xbfe7367d25f25d0f;
op3val:0x3fe518a74df2cf93; valaddr_reg:x3; val_offset:3903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3903*FLEN/8, x4, x1, x2)

inst_1302:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd150df72a8355 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7367d25f25d0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x518a74df2cf93 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed150df72a8355; op2val:0xbfe7367d25f25d0f;
op3val:0x3fe518a74df2cf93; valaddr_reg:x3; val_offset:3906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3906*FLEN/8, x4, x1, x2)

inst_1303:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd150df72a8355 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7367d25f25d0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x518a74df2cf93 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed150df72a8355; op2val:0xbfe7367d25f25d0f;
op3val:0x3fe518a74df2cf93; valaddr_reg:x3; val_offset:3909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3909*FLEN/8, x4, x1, x2)

inst_1304:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd150df72a8355 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7367d25f25d0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x518a74df2cf93 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed150df72a8355; op2val:0xbfe7367d25f25d0f;
op3val:0x3fe518a74df2cf93; valaddr_reg:x3; val_offset:3912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3912*FLEN/8, x4, x1, x2)

inst_1305:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd15114c8be4d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed1037ed0bd8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc01b4fdf960b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed15114c8be4d5; op2val:0xbfeed1037ed0bd8c;
op3val:0x3fec01b4fdf960b5; valaddr_reg:x3; val_offset:3915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3915*FLEN/8, x4, x1, x2)

inst_1306:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd15114c8be4d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed1037ed0bd8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc01b4fdf960b5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed15114c8be4d5; op2val:0xbfeed1037ed0bd8c;
op3val:0x3fec01b4fdf960b5; valaddr_reg:x3; val_offset:3918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3918*FLEN/8, x4, x1, x2)

inst_1307:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd15114c8be4d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed1037ed0bd8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc01b4fdf960b5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed15114c8be4d5; op2val:0xbfeed1037ed0bd8c;
op3val:0x3fec01b4fdf960b5; valaddr_reg:x3; val_offset:3921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3921*FLEN/8, x4, x1, x2)

inst_1308:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd15114c8be4d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed1037ed0bd8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc01b4fdf960b5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed15114c8be4d5; op2val:0xbfeed1037ed0bd8c;
op3val:0x3fec01b4fdf960b5; valaddr_reg:x3; val_offset:3924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3924*FLEN/8, x4, x1, x2)

inst_1309:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd15114c8be4d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed1037ed0bd8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc01b4fdf960b5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed15114c8be4d5; op2val:0xbfeed1037ed0bd8c;
op3val:0x3fec01b4fdf960b5; valaddr_reg:x3; val_offset:3927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3927*FLEN/8, x4, x1, x2)

inst_1310:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd25c94a085553 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9909ac1b8a836 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7493c41f074f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed25c94a085553; op2val:0xbfe9909ac1b8a836;
op3val:0x3fe7493c41f074f4; valaddr_reg:x3; val_offset:3930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3930*FLEN/8, x4, x1, x2)

inst_1311:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd25c94a085553 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9909ac1b8a836 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7493c41f074f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed25c94a085553; op2val:0xbfe9909ac1b8a836;
op3val:0x3fe7493c41f074f4; valaddr_reg:x3; val_offset:3933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3933*FLEN/8, x4, x1, x2)

inst_1312:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd25c94a085553 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9909ac1b8a836 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7493c41f074f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed25c94a085553; op2val:0xbfe9909ac1b8a836;
op3val:0x3fe7493c41f074f4; valaddr_reg:x3; val_offset:3936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3936*FLEN/8, x4, x1, x2)

inst_1313:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd25c94a085553 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9909ac1b8a836 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7493c41f074f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed25c94a085553; op2val:0xbfe9909ac1b8a836;
op3val:0x3fe7493c41f074f4; valaddr_reg:x3; val_offset:3939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3939*FLEN/8, x4, x1, x2)

inst_1314:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd25c94a085553 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9909ac1b8a836 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7493c41f074f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed25c94a085553; op2val:0xbfe9909ac1b8a836;
op3val:0x3fe7493c41f074f4; valaddr_reg:x3; val_offset:3942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3942*FLEN/8, x4, x1, x2)

inst_1315:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd3218c4e1606f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xfee2ce3ed8938 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd21d58bc8c84c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed3218c4e1606f; op2val:0xbfcfee2ce3ed8938;
op3val:0x3fcd21d58bc8c84c; valaddr_reg:x3; val_offset:3945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3945*FLEN/8, x4, x1, x2)

inst_1316:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd3218c4e1606f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xfee2ce3ed8938 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd21d58bc8c84c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed3218c4e1606f; op2val:0xbfcfee2ce3ed8938;
op3val:0x3fcd21d58bc8c84c; valaddr_reg:x3; val_offset:3948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3948*FLEN/8, x4, x1, x2)

inst_1317:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd3218c4e1606f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xfee2ce3ed8938 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd21d58bc8c84c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed3218c4e1606f; op2val:0xbfcfee2ce3ed8938;
op3val:0x3fcd21d58bc8c84c; valaddr_reg:x3; val_offset:3951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3951*FLEN/8, x4, x1, x2)

inst_1318:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd3218c4e1606f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xfee2ce3ed8938 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd21d58bc8c84c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed3218c4e1606f; op2val:0xbfcfee2ce3ed8938;
op3val:0x3fcd21d58bc8c84c; valaddr_reg:x3; val_offset:3954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3954*FLEN/8, x4, x1, x2)

inst_1319:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd3218c4e1606f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xfee2ce3ed8938 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd21d58bc8c84c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed3218c4e1606f; op2val:0xbfcfee2ce3ed8938;
op3val:0x3fcd21d58bc8c84c; valaddr_reg:x3; val_offset:3957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3957*FLEN/8, x4, x1, x2)

inst_1320:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd45afb9b5045e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73b370fd10047 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5404127b661d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed45afb9b5045e; op2val:0xbfd73b370fd10047;
op3val:0x3fd5404127b661d6; valaddr_reg:x3; val_offset:3960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3960*FLEN/8, x4, x1, x2)

inst_1321:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd45afb9b5045e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73b370fd10047 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5404127b661d6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed45afb9b5045e; op2val:0xbfd73b370fd10047;
op3val:0x3fd5404127b661d6; valaddr_reg:x3; val_offset:3963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3963*FLEN/8, x4, x1, x2)

inst_1322:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd45afb9b5045e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73b370fd10047 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5404127b661d6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed45afb9b5045e; op2val:0xbfd73b370fd10047;
op3val:0x3fd5404127b661d6; valaddr_reg:x3; val_offset:3966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3966*FLEN/8, x4, x1, x2)

inst_1323:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd45afb9b5045e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73b370fd10047 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5404127b661d6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed45afb9b5045e; op2val:0xbfd73b370fd10047;
op3val:0x3fd5404127b661d6; valaddr_reg:x3; val_offset:3969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3969*FLEN/8, x4, x1, x2)

inst_1324:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd45afb9b5045e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73b370fd10047 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5404127b661d6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed45afb9b5045e; op2val:0xbfd73b370fd10047;
op3val:0x3fd5404127b661d6; valaddr_reg:x3; val_offset:3972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3972*FLEN/8, x4, x1, x2)

inst_1325:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4cecc84ad1c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa7848ad4370 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f4a14cd638c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4cecc84ad1c0; op2val:0xbfe7fa7848ad4370;
op3val:0x3fe5f4a14cd638c4; valaddr_reg:x3; val_offset:3975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3975*FLEN/8, x4, x1, x2)

inst_1326:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4cecc84ad1c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa7848ad4370 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f4a14cd638c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4cecc84ad1c0; op2val:0xbfe7fa7848ad4370;
op3val:0x3fe5f4a14cd638c4; valaddr_reg:x3; val_offset:3978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3978*FLEN/8, x4, x1, x2)

inst_1327:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4cecc84ad1c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa7848ad4370 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f4a14cd638c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4cecc84ad1c0; op2val:0xbfe7fa7848ad4370;
op3val:0x3fe5f4a14cd638c4; valaddr_reg:x3; val_offset:3981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3981*FLEN/8, x4, x1, x2)

inst_1328:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4cecc84ad1c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa7848ad4370 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f4a14cd638c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4cecc84ad1c0; op2val:0xbfe7fa7848ad4370;
op3val:0x3fe5f4a14cd638c4; valaddr_reg:x3; val_offset:3984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3984*FLEN/8, x4, x1, x2)

inst_1329:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4cecc84ad1c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa7848ad4370 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f4a14cd638c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4cecc84ad1c0; op2val:0xbfe7fa7848ad4370;
op3val:0x3fe5f4a14cd638c4; valaddr_reg:x3; val_offset:3987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3987*FLEN/8, x4, x1, x2)

inst_1330:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7f6a9d7e26a1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8bf1e9f7ce01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb3c79151d8ec7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed7f6a9d7e26a1; op2val:0xbfed8bf1e9f7ce01;
op3val:0x3feb3c79151d8ec7; valaddr_reg:x3; val_offset:3990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3990*FLEN/8, x4, x1, x2)

inst_1331:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7f6a9d7e26a1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8bf1e9f7ce01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb3c79151d8ec7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed7f6a9d7e26a1; op2val:0xbfed8bf1e9f7ce01;
op3val:0x3feb3c79151d8ec7; valaddr_reg:x3; val_offset:3993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3993*FLEN/8, x4, x1, x2)

inst_1332:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7f6a9d7e26a1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8bf1e9f7ce01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb3c79151d8ec7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed7f6a9d7e26a1; op2val:0xbfed8bf1e9f7ce01;
op3val:0x3feb3c79151d8ec7; valaddr_reg:x3; val_offset:3996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3996*FLEN/8, x4, x1, x2)

inst_1333:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7f6a9d7e26a1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8bf1e9f7ce01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb3c79151d8ec7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed7f6a9d7e26a1; op2val:0xbfed8bf1e9f7ce01;
op3val:0x3feb3c79151d8ec7; valaddr_reg:x3; val_offset:3999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3999*FLEN/8, x4, x1, x2)

inst_1334:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7f6a9d7e26a1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8bf1e9f7ce01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb3c79151d8ec7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed7f6a9d7e26a1; op2val:0xbfed8bf1e9f7ce01;
op3val:0x3feb3c79151d8ec7; valaddr_reg:x3; val_offset:4002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4002*FLEN/8, x4, x1, x2)

inst_1335:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdb224cae169a6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x03fbf518f4036 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe287551b730b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedb224cae169a6; op2val:0xbff03fbf518f4036;
op3val:0x3fee287551b730b1; valaddr_reg:x3; val_offset:4005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4005*FLEN/8, x4, x1, x2)

inst_1336:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdb224cae169a6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x03fbf518f4036 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe287551b730b1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedb224cae169a6; op2val:0xbff03fbf518f4036;
op3val:0x3fee287551b730b1; valaddr_reg:x3; val_offset:4008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4008*FLEN/8, x4, x1, x2)

inst_1337:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdb224cae169a6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x03fbf518f4036 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe287551b730b1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedb224cae169a6; op2val:0xbff03fbf518f4036;
op3val:0x3fee287551b730b1; valaddr_reg:x3; val_offset:4011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4011*FLEN/8, x4, x1, x2)

inst_1338:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdb224cae169a6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x03fbf518f4036 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe287551b730b1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedb224cae169a6; op2val:0xbff03fbf518f4036;
op3val:0x3fee287551b730b1; valaddr_reg:x3; val_offset:4014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4014*FLEN/8, x4, x1, x2)

inst_1339:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdb224cae169a6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x03fbf518f4036 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe287551b730b1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedb224cae169a6; op2val:0xbff03fbf518f4036;
op3val:0x3fee287551b730b1; valaddr_reg:x3; val_offset:4017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4017*FLEN/8, x4, x1, x2)

inst_1340:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde2e222c90ff1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x670411da904a3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4f4d25ff2c8d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fede2e222c90ff1; op2val:0xbfc670411da904a3;
op3val:0x3fc4f4d25ff2c8d4; valaddr_reg:x3; val_offset:4020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4020*FLEN/8, x4, x1, x2)

inst_1341:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde2e222c90ff1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x670411da904a3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4f4d25ff2c8d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fede2e222c90ff1; op2val:0xbfc670411da904a3;
op3val:0x3fc4f4d25ff2c8d4; valaddr_reg:x3; val_offset:4023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4023*FLEN/8, x4, x1, x2)

inst_1342:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde2e222c90ff1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x670411da904a3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4f4d25ff2c8d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fede2e222c90ff1; op2val:0xbfc670411da904a3;
op3val:0x3fc4f4d25ff2c8d4; valaddr_reg:x3; val_offset:4026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4026*FLEN/8, x4, x1, x2)

inst_1343:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde2e222c90ff1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x670411da904a3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4f4d25ff2c8d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fede2e222c90ff1; op2val:0xbfc670411da904a3;
op3val:0x3fc4f4d25ff2c8d4; valaddr_reg:x3; val_offset:4029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4029*FLEN/8, x4, x1, x2)

inst_1344:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde2e222c90ff1 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x670411da904a3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4f4d25ff2c8d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fede2e222c90ff1; op2val:0xbfc670411da904a3;
op3val:0x3fc4f4d25ff2c8d4; valaddr_reg:x3; val_offset:4032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4032*FLEN/8, x4, x1, x2)

inst_1345:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde3e91ec63360 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc74dcf8fe2356 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa94948f735fbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fede3e91ec63360; op2val:0xbfec74dcf8fe2356;
op3val:0x3fea94948f735fbb; valaddr_reg:x3; val_offset:4035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4035*FLEN/8, x4, x1, x2)

inst_1346:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde3e91ec63360 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc74dcf8fe2356 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa94948f735fbb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fede3e91ec63360; op2val:0xbfec74dcf8fe2356;
op3val:0x3fea94948f735fbb; valaddr_reg:x3; val_offset:4038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4038*FLEN/8, x4, x1, x2)

inst_1347:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde3e91ec63360 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc74dcf8fe2356 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa94948f735fbb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fede3e91ec63360; op2val:0xbfec74dcf8fe2356;
op3val:0x3fea94948f735fbb; valaddr_reg:x3; val_offset:4041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4041*FLEN/8, x4, x1, x2)

inst_1348:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde3e91ec63360 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc74dcf8fe2356 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa94948f735fbb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fede3e91ec63360; op2val:0xbfec74dcf8fe2356;
op3val:0x3fea94948f735fbb; valaddr_reg:x3; val_offset:4044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4044*FLEN/8, x4, x1, x2)

inst_1349:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde3e91ec63360 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc74dcf8fe2356 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa94948f735fbb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fede3e91ec63360; op2val:0xbfec74dcf8fe2356;
op3val:0x3fea94948f735fbb; valaddr_reg:x3; val_offset:4047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4047*FLEN/8, x4, x1, x2)

inst_1350:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0d60f23017e2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xe15e3b6a36767 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc41198519489c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0d60f23017e2; op2val:0xbfce15e3b6a36767;
op3val:0x3fcc41198519489c; valaddr_reg:x3; val_offset:4050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4050*FLEN/8, x4, x1, x2)

inst_1351:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0d60f23017e2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xe15e3b6a36767 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc41198519489c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0d60f23017e2; op2val:0xbfce15e3b6a36767;
op3val:0x3fcc41198519489c; valaddr_reg:x3; val_offset:4053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4053*FLEN/8, x4, x1, x2)

inst_1352:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0d60f23017e2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xe15e3b6a36767 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc41198519489c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0d60f23017e2; op2val:0xbfce15e3b6a36767;
op3val:0x3fcc41198519489c; valaddr_reg:x3; val_offset:4056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4056*FLEN/8, x4, x1, x2)

inst_1353:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0d60f23017e2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xe15e3b6a36767 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc41198519489c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0d60f23017e2; op2val:0xbfce15e3b6a36767;
op3val:0x3fcc41198519489c; valaddr_reg:x3; val_offset:4059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4059*FLEN/8, x4, x1, x2)

inst_1354:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0d60f23017e2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xe15e3b6a36767 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc41198519489c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0d60f23017e2; op2val:0xbfce15e3b6a36767;
op3val:0x3fcc41198519489c; valaddr_reg:x3; val_offset:4062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4062*FLEN/8, x4, x1, x2)

inst_1355:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe374937727337 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x48452321775da and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x35f7f6da4679e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee374937727337; op2val:0xbfd48452321775da;
op3val:0x3fd35f7f6da4679e; valaddr_reg:x3; val_offset:4065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4065*FLEN/8, x4, x1, x2)

inst_1356:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe374937727337 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x48452321775da and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x35f7f6da4679e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee374937727337; op2val:0xbfd48452321775da;
op3val:0x3fd35f7f6da4679e; valaddr_reg:x3; val_offset:4068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4068*FLEN/8, x4, x1, x2)

inst_1357:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe374937727337 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x48452321775da and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x35f7f6da4679e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee374937727337; op2val:0xbfd48452321775da;
op3val:0x3fd35f7f6da4679e; valaddr_reg:x3; val_offset:4071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4071*FLEN/8, x4, x1, x2)

inst_1358:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe374937727337 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x48452321775da and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x35f7f6da4679e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee374937727337; op2val:0xbfd48452321775da;
op3val:0x3fd35f7f6da4679e; valaddr_reg:x3; val_offset:4074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4074*FLEN/8, x4, x1, x2)

inst_1359:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe374937727337 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x48452321775da and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x35f7f6da4679e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee374937727337; op2val:0xbfd48452321775da;
op3val:0x3fd35f7f6da4679e; valaddr_reg:x3; val_offset:4077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4077*FLEN/8, x4, x1, x2)

inst_1360:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe37a5781573c2 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6c0f8e5bd8ce2 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x57c7aab92d8c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee37a5781573c2; op2val:0xbfb6c0f8e5bd8ce2;
op3val:0x3fb57c7aab92d8c8; valaddr_reg:x3; val_offset:4080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4080*FLEN/8, x4, x1, x2)

inst_1361:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe37a5781573c2 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6c0f8e5bd8ce2 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x57c7aab92d8c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee37a5781573c2; op2val:0xbfb6c0f8e5bd8ce2;
op3val:0x3fb57c7aab92d8c8; valaddr_reg:x3; val_offset:4083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4083*FLEN/8, x4, x1, x2)

inst_1362:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe37a5781573c2 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6c0f8e5bd8ce2 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x57c7aab92d8c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee37a5781573c2; op2val:0xbfb6c0f8e5bd8ce2;
op3val:0x3fb57c7aab92d8c8; valaddr_reg:x3; val_offset:4086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4086*FLEN/8, x4, x1, x2)

inst_1363:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe37a5781573c2 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6c0f8e5bd8ce2 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x57c7aab92d8c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee37a5781573c2; op2val:0xbfb6c0f8e5bd8ce2;
op3val:0x3fb57c7aab92d8c8; valaddr_reg:x3; val_offset:4089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4089*FLEN/8, x4, x1, x2)

inst_1364:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe37a5781573c2 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x6c0f8e5bd8ce2 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x57c7aab92d8c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee37a5781573c2; op2val:0xbfb6c0f8e5bd8ce2;
op3val:0x3fb57c7aab92d8c8; valaddr_reg:x3; val_offset:4092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4092*FLEN/8, x4, x1, x2)

inst_1365:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4475e06ec966 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd507640849e38 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbba25d38e82e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4475e06ec966; op2val:0xbfed507640849e38;
op3val:0x3febba25d38e82e3; valaddr_reg:x3; val_offset:4095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4095*FLEN/8, x4, x1, x2)

inst_1366:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4475e06ec966 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd507640849e38 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbba25d38e82e3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4475e06ec966; op2val:0xbfed507640849e38;
op3val:0x3febba25d38e82e3; valaddr_reg:x3; val_offset:4098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4098*FLEN/8, x4, x1, x2)

inst_1367:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4475e06ec966 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd507640849e38 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbba25d38e82e3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4475e06ec966; op2val:0xbfed507640849e38;
op3val:0x3febba25d38e82e3; valaddr_reg:x3; val_offset:4101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4101*FLEN/8, x4, x1, x2)

inst_1368:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4475e06ec966 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd507640849e38 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbba25d38e82e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4475e06ec966; op2val:0xbfed507640849e38;
op3val:0x3febba25d38e82e3; valaddr_reg:x3; val_offset:4104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4104*FLEN/8, x4, x1, x2)

inst_1369:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4475e06ec966 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd507640849e38 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbba25d38e82e3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4475e06ec966; op2val:0xbfed507640849e38;
op3val:0x3febba25d38e82e3; valaddr_reg:x3; val_offset:4107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4107*FLEN/8, x4, x1, x2)

inst_1370:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe486c849b6622 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb71760bd46cb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2ca34038b5ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee486c849b6622; op2val:0xbfecb71760bd46cb;
op3val:0x3feb2ca34038b5ab; valaddr_reg:x3; val_offset:4110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4110*FLEN/8, x4, x1, x2)

inst_1371:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe486c849b6622 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb71760bd46cb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2ca34038b5ab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee486c849b6622; op2val:0xbfecb71760bd46cb;
op3val:0x3feb2ca34038b5ab; valaddr_reg:x3; val_offset:4113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4113*FLEN/8, x4, x1, x2)

inst_1372:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe486c849b6622 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb71760bd46cb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2ca34038b5ab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee486c849b6622; op2val:0xbfecb71760bd46cb;
op3val:0x3feb2ca34038b5ab; valaddr_reg:x3; val_offset:4116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4116*FLEN/8, x4, x1, x2)

inst_1373:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe486c849b6622 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb71760bd46cb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2ca34038b5ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee486c849b6622; op2val:0xbfecb71760bd46cb;
op3val:0x3feb2ca34038b5ab; valaddr_reg:x3; val_offset:4119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4119*FLEN/8, x4, x1, x2)

inst_1374:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe486c849b6622 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb71760bd46cb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2ca34038b5ab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee486c849b6622; op2val:0xbfecb71760bd46cb;
op3val:0x3feb2ca34038b5ab; valaddr_reg:x3; val_offset:4122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4122*FLEN/8, x4, x1, x2)

inst_1375:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xecbf188330fa1 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xe3110cf661ad7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xd0e6ae71ab740 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feecbf188330fa1; op2val:0xbf9e3110cf661ad7;
op3val:0x3f9d0e6ae71ab740; valaddr_reg:x3; val_offset:4125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4125*FLEN/8, x4, x1, x2)

inst_1376:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xecbf188330fa1 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xe3110cf661ad7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xd0e6ae71ab740 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feecbf188330fa1; op2val:0xbf9e3110cf661ad7;
op3val:0x3f9d0e6ae71ab740; valaddr_reg:x3; val_offset:4128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4128*FLEN/8, x4, x1, x2)

inst_1377:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xecbf188330fa1 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xe3110cf661ad7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xd0e6ae71ab740 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feecbf188330fa1; op2val:0xbf9e3110cf661ad7;
op3val:0x3f9d0e6ae71ab740; valaddr_reg:x3; val_offset:4131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4131*FLEN/8, x4, x1, x2)

inst_1378:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xecbf188330fa1 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xe3110cf661ad7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xd0e6ae71ab740 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feecbf188330fa1; op2val:0xbf9e3110cf661ad7;
op3val:0x3f9d0e6ae71ab740; valaddr_reg:x3; val_offset:4134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4134*FLEN/8, x4, x1, x2)

inst_1379:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xecbf188330fa1 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xe3110cf661ad7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xd0e6ae71ab740 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feecbf188330fa1; op2val:0xbf9e3110cf661ad7;
op3val:0x3f9d0e6ae71ab740; valaddr_reg:x3; val_offset:4137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4137*FLEN/8, x4, x1, x2)

inst_1380:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed3ea0244a1c3 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xcce34fde9066f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbc0140162da60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feed3ea0244a1c3; op2val:0xbfacce34fde9066f;
op3val:0x3fabc0140162da60; valaddr_reg:x3; val_offset:4140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4140*FLEN/8, x4, x1, x2)

inst_1381:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed3ea0244a1c3 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xcce34fde9066f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbc0140162da60 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feed3ea0244a1c3; op2val:0xbfacce34fde9066f;
op3val:0x3fabc0140162da60; valaddr_reg:x3; val_offset:4143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4143*FLEN/8, x4, x1, x2)

inst_1382:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed3ea0244a1c3 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xcce34fde9066f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbc0140162da60 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feed3ea0244a1c3; op2val:0xbfacce34fde9066f;
op3val:0x3fabc0140162da60; valaddr_reg:x3; val_offset:4146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4146*FLEN/8, x4, x1, x2)

inst_1383:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed3ea0244a1c3 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xcce34fde9066f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbc0140162da60 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feed3ea0244a1c3; op2val:0xbfacce34fde9066f;
op3val:0x3fabc0140162da60; valaddr_reg:x3; val_offset:4149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4149*FLEN/8, x4, x1, x2)

inst_1384:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed3ea0244a1c3 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xcce34fde9066f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbc0140162da60 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feed3ea0244a1c3; op2val:0xbfacce34fde9066f;
op3val:0x3fabc0140162da60; valaddr_reg:x3; val_offset:4152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4152*FLEN/8, x4, x1, x2)

inst_1385:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed59307fd1886 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d3ae8a06b877 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7ec26b5c97e8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feed59307fd1886; op2val:0xbfe8d3ae8a06b877;
op3val:0x3fe7ec26b5c97e8b; valaddr_reg:x3; val_offset:4155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4155*FLEN/8, x4, x1, x2)

inst_1386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed59307fd1886 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d3ae8a06b877 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7ec26b5c97e8b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feed59307fd1886; op2val:0xbfe8d3ae8a06b877;
op3val:0x3fe7ec26b5c97e8b; valaddr_reg:x3; val_offset:4158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4158*FLEN/8, x4, x1, x2)

inst_1387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed59307fd1886 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d3ae8a06b877 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7ec26b5c97e8b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feed59307fd1886; op2val:0xbfe8d3ae8a06b877;
op3val:0x3fe7ec26b5c97e8b; valaddr_reg:x3; val_offset:4161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4161*FLEN/8, x4, x1, x2)

inst_1388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed59307fd1886 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d3ae8a06b877 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7ec26b5c97e8b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feed59307fd1886; op2val:0xbfe8d3ae8a06b877;
op3val:0x3fe7ec26b5c97e8b; valaddr_reg:x3; val_offset:4164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4164*FLEN/8, x4, x1, x2)

inst_1389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed59307fd1886 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d3ae8a06b877 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7ec26b5c97e8b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feed59307fd1886; op2val:0xbfe8d3ae8a06b877;
op3val:0x3fe7ec26b5c97e8b; valaddr_reg:x3; val_offset:4167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4167*FLEN/8, x4, x1, x2)

inst_1390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef3f2a0cb187b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c110c7780656 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x034b8daa9cb55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef3f2a0cb187b; op2val:0xbfe0c110c7780656;
op3val:0x3fe034b8daa9cb55; valaddr_reg:x3; val_offset:4170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4170*FLEN/8, x4, x1, x2)

inst_1391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef3f2a0cb187b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c110c7780656 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x034b8daa9cb55 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef3f2a0cb187b; op2val:0xbfe0c110c7780656;
op3val:0x3fe034b8daa9cb55; valaddr_reg:x3; val_offset:4173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4173*FLEN/8, x4, x1, x2)

inst_1392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef3f2a0cb187b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c110c7780656 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x034b8daa9cb55 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef3f2a0cb187b; op2val:0xbfe0c110c7780656;
op3val:0x3fe034b8daa9cb55; valaddr_reg:x3; val_offset:4176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4176*FLEN/8, x4, x1, x2)

inst_1393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef3f2a0cb187b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c110c7780656 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x034b8daa9cb55 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef3f2a0cb187b; op2val:0xbfe0c110c7780656;
op3val:0x3fe034b8daa9cb55; valaddr_reg:x3; val_offset:4179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4179*FLEN/8, x4, x1, x2)

inst_1394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef3f2a0cb187b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c110c7780656 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x034b8daa9cb55 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef3f2a0cb187b; op2val:0xbfe0c110c7780656;
op3val:0x3fe034b8daa9cb55; valaddr_reg:x3; val_offset:4182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4182*FLEN/8, x4, x1, x2)

inst_1395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef912d69f703a and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3f6b2d50cc6c5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x352ab07efa158 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef912d69f703a; op2val:0xbfb3f6b2d50cc6c5;
op3val:0x3fb352ab07efa158; valaddr_reg:x3; val_offset:4185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4185*FLEN/8, x4, x1, x2)

inst_1396:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef912d69f703a and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3f6b2d50cc6c5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x352ab07efa158 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef912d69f703a; op2val:0xbfb3f6b2d50cc6c5;
op3val:0x3fb352ab07efa158; valaddr_reg:x3; val_offset:4188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4188*FLEN/8, x4, x1, x2)

inst_1397:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef912d69f703a and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3f6b2d50cc6c5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x352ab07efa158 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef912d69f703a; op2val:0xbfb3f6b2d50cc6c5;
op3val:0x3fb352ab07efa158; valaddr_reg:x3; val_offset:4191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4191*FLEN/8, x4, x1, x2)

inst_1398:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef912d69f703a and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3f6b2d50cc6c5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x352ab07efa158 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef912d69f703a; op2val:0xbfb3f6b2d50cc6c5;
op3val:0x3fb352ab07efa158; valaddr_reg:x3; val_offset:4194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4194*FLEN/8, x4, x1, x2)

inst_1399:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef912d69f703a and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3f6b2d50cc6c5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x352ab07efa158 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef912d69f703a; op2val:0xbfb3f6b2d50cc6c5;
op3val:0x3fb352ab07efa158; valaddr_reg:x3; val_offset:4197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4197*FLEN/8, x4, x1, x2)

inst_1400:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0ea7d9d4e385 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x222419ef712a9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1997dacec4ca4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0ea7d9d4e385; op2val:0xbfd222419ef712a9;
op3val:0x3fd1997dacec4ca4; valaddr_reg:x3; val_offset:4200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4200*FLEN/8, x4, x1, x2)

inst_1401:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0ea7d9d4e385 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x222419ef712a9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1997dacec4ca4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0ea7d9d4e385; op2val:0xbfd222419ef712a9;
op3val:0x3fd1997dacec4ca4; valaddr_reg:x3; val_offset:4203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4203*FLEN/8, x4, x1, x2)

inst_1402:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0ea7d9d4e385 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x222419ef712a9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1997dacec4ca4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0ea7d9d4e385; op2val:0xbfd222419ef712a9;
op3val:0x3fd1997dacec4ca4; valaddr_reg:x3; val_offset:4206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4206*FLEN/8, x4, x1, x2)

inst_1403:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0ea7d9d4e385 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x222419ef712a9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1997dacec4ca4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0ea7d9d4e385; op2val:0xbfd222419ef712a9;
op3val:0x3fd1997dacec4ca4; valaddr_reg:x3; val_offset:4209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4209*FLEN/8, x4, x1, x2)

inst_1404:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0ea7d9d4e385 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x222419ef712a9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1997dacec4ca4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0ea7d9d4e385; op2val:0xbfd222419ef712a9;
op3val:0x3fd1997dacec4ca4; valaddr_reg:x3; val_offset:4212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4212*FLEN/8, x4, x1, x2)

inst_1405:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1263a0a37bc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x19c62cf93ac7c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1199e84e56b1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1263a0a37bc9; op2val:0xbfe19c62cf93ac7c;
op3val:0x3fe1199e84e56b1f; valaddr_reg:x3; val_offset:4215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4215*FLEN/8, x4, x1, x2)

inst_1406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1263a0a37bc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x19c62cf93ac7c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1199e84e56b1f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1263a0a37bc9; op2val:0xbfe19c62cf93ac7c;
op3val:0x3fe1199e84e56b1f; valaddr_reg:x3; val_offset:4218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4218*FLEN/8, x4, x1, x2)

inst_1407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1263a0a37bc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x19c62cf93ac7c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1199e84e56b1f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1263a0a37bc9; op2val:0xbfe19c62cf93ac7c;
op3val:0x3fe1199e84e56b1f; valaddr_reg:x3; val_offset:4221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4221*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_12)

inst_1408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1263a0a37bc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x19c62cf93ac7c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1199e84e56b1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1263a0a37bc9; op2val:0xbfe19c62cf93ac7c;
op3val:0x3fe1199e84e56b1f; valaddr_reg:x3; val_offset:4224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4224*FLEN/8, x4, x1, x2)

inst_1409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1263a0a37bc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x19c62cf93ac7c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1199e84e56b1f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1263a0a37bc9; op2val:0xbfe19c62cf93ac7c;
op3val:0x3fe1199e84e56b1f; valaddr_reg:x3; val_offset:4227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4227*FLEN/8, x4, x1, x2)

inst_1410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1db86f37b4ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xba48f5418f75c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae1174da77a1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1db86f37b4ef; op2val:0xbfeba48f5418f75c;
op3val:0x3feae1174da77a1f; valaddr_reg:x3; val_offset:4230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4230*FLEN/8, x4, x1, x2)

inst_1411:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1db86f37b4ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xba48f5418f75c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae1174da77a1f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1db86f37b4ef; op2val:0xbfeba48f5418f75c;
op3val:0x3feae1174da77a1f; valaddr_reg:x3; val_offset:4233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4233*FLEN/8, x4, x1, x2)

inst_1412:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1db86f37b4ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xba48f5418f75c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae1174da77a1f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1db86f37b4ef; op2val:0xbfeba48f5418f75c;
op3val:0x3feae1174da77a1f; valaddr_reg:x3; val_offset:4236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4236*FLEN/8, x4, x1, x2)

inst_1413:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1db86f37b4ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xba48f5418f75c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae1174da77a1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1db86f37b4ef; op2val:0xbfeba48f5418f75c;
op3val:0x3feae1174da77a1f; valaddr_reg:x3; val_offset:4239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4239*FLEN/8, x4, x1, x2)

inst_1414:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1db86f37b4ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xba48f5418f75c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae1174da77a1f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1db86f37b4ef; op2val:0xbfeba48f5418f75c;
op3val:0x3feae1174da77a1f; valaddr_reg:x3; val_offset:4242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4242*FLEN/8, x4, x1, x2)

inst_1415:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2eaac2aaf486 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x23820fc01aafc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1c0f1dc90b832 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef2eaac2aaf486; op2val:0xbfd23820fc01aafc;
op3val:0x3fd1c0f1dc90b832; valaddr_reg:x3; val_offset:4245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4245*FLEN/8, x4, x1, x2)

inst_1416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2eaac2aaf486 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x23820fc01aafc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1c0f1dc90b832 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef2eaac2aaf486; op2val:0xbfd23820fc01aafc;
op3val:0x3fd1c0f1dc90b832; valaddr_reg:x3; val_offset:4248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4248*FLEN/8, x4, x1, x2)

inst_1417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2eaac2aaf486 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x23820fc01aafc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1c0f1dc90b832 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef2eaac2aaf486; op2val:0xbfd23820fc01aafc;
op3val:0x3fd1c0f1dc90b832; valaddr_reg:x3; val_offset:4251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4251*FLEN/8, x4, x1, x2)

inst_1418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2eaac2aaf486 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x23820fc01aafc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1c0f1dc90b832 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef2eaac2aaf486; op2val:0xbfd23820fc01aafc;
op3val:0x3fd1c0f1dc90b832; valaddr_reg:x3; val_offset:4254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4254*FLEN/8, x4, x1, x2)

inst_1419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2eaac2aaf486 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x23820fc01aafc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1c0f1dc90b832 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef2eaac2aaf486; op2val:0xbfd23820fc01aafc;
op3val:0x3fd1c0f1dc90b832; valaddr_reg:x3; val_offset:4257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4257*FLEN/8, x4, x1, x2)

inst_1420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6bfda1cdc1a9 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbab5ecbe4405a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb2b64294c7bd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef6bfda1cdc1a9; op2val:0xbfcbab5ecbe4405a;
op3val:0x3fcb2b64294c7bd0; valaddr_reg:x3; val_offset:4260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4260*FLEN/8, x4, x1, x2)

inst_1421:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6bfda1cdc1a9 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbab5ecbe4405a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb2b64294c7bd0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef6bfda1cdc1a9; op2val:0xbfcbab5ecbe4405a;
op3val:0x3fcb2b64294c7bd0; valaddr_reg:x3; val_offset:4263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4263*FLEN/8, x4, x1, x2)

inst_1422:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6bfda1cdc1a9 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbab5ecbe4405a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb2b64294c7bd0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef6bfda1cdc1a9; op2val:0xbfcbab5ecbe4405a;
op3val:0x3fcb2b64294c7bd0; valaddr_reg:x3; val_offset:4266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4266*FLEN/8, x4, x1, x2)

inst_1423:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6bfda1cdc1a9 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbab5ecbe4405a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb2b64294c7bd0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef6bfda1cdc1a9; op2val:0xbfcbab5ecbe4405a;
op3val:0x3fcb2b64294c7bd0; valaddr_reg:x3; val_offset:4269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4269*FLEN/8, x4, x1, x2)

inst_1424:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6bfda1cdc1a9 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbab5ecbe4405a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb2b64294c7bd0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef6bfda1cdc1a9; op2val:0xbfcbab5ecbe4405a;
op3val:0x3fcb2b64294c7bd0; valaddr_reg:x3; val_offset:4272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4272*FLEN/8, x4, x1, x2)

inst_1425:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7164363c330a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfc4848f59e17 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd76a6cd239b52 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef7164363c330a; op2val:0xbfddfc4848f59e17;
op3val:0x3fdd76a6cd239b52; valaddr_reg:x3; val_offset:4275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4275*FLEN/8, x4, x1, x2)

inst_1426:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7164363c330a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfc4848f59e17 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd76a6cd239b52 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef7164363c330a; op2val:0xbfddfc4848f59e17;
op3val:0x3fdd76a6cd239b52; valaddr_reg:x3; val_offset:4278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4278*FLEN/8, x4, x1, x2)

inst_1427:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7164363c330a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfc4848f59e17 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd76a6cd239b52 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef7164363c330a; op2val:0xbfddfc4848f59e17;
op3val:0x3fdd76a6cd239b52; valaddr_reg:x3; val_offset:4281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4281*FLEN/8, x4, x1, x2)

inst_1428:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7164363c330a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfc4848f59e17 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd76a6cd239b52 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef7164363c330a; op2val:0xbfddfc4848f59e17;
op3val:0x3fdd76a6cd239b52; valaddr_reg:x3; val_offset:4284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4284*FLEN/8, x4, x1, x2)

inst_1429:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7164363c330a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfc4848f59e17 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd76a6cd239b52 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef7164363c330a; op2val:0xbfddfc4848f59e17;
op3val:0x3fdd76a6cd239b52; valaddr_reg:x3; val_offset:4287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4287*FLEN/8, x4, x1, x2)

inst_1430:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf88b862480473 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcc941cc2e908c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc5df4f3145a50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef88b862480473; op2val:0xbfccc941cc2e908c;
op3val:0x3fcc5df4f3145a50; valaddr_reg:x3; val_offset:4290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4290*FLEN/8, x4, x1, x2)

inst_1431:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf88b862480473 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcc941cc2e908c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc5df4f3145a50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef88b862480473; op2val:0xbfccc941cc2e908c;
op3val:0x3fcc5df4f3145a50; valaddr_reg:x3; val_offset:4293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4293*FLEN/8, x4, x1, x2)

inst_1432:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf88b862480473 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcc941cc2e908c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc5df4f3145a50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef88b862480473; op2val:0xbfccc941cc2e908c;
op3val:0x3fcc5df4f3145a50; valaddr_reg:x3; val_offset:4296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4296*FLEN/8, x4, x1, x2)

inst_1433:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf88b862480473 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcc941cc2e908c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc5df4f3145a50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef88b862480473; op2val:0xbfccc941cc2e908c;
op3val:0x3fcc5df4f3145a50; valaddr_reg:x3; val_offset:4299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4299*FLEN/8, x4, x1, x2)

inst_1434:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf88b862480473 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcc941cc2e908c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc5df4f3145a50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef88b862480473; op2val:0xbfccc941cc2e908c;
op3val:0x3fcc5df4f3145a50; valaddr_reg:x3; val_offset:4302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4302*FLEN/8, x4, x1, x2)

inst_1435:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf93d6ae142d22 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe50ee3cdf6e97 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdea75f384795e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef93d6ae142d22; op2val:0xbfde50ee3cdf6e97;
op3val:0x3fddea75f384795e; valaddr_reg:x3; val_offset:4305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4305*FLEN/8, x4, x1, x2)

inst_1436:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf93d6ae142d22 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe50ee3cdf6e97 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdea75f384795e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef93d6ae142d22; op2val:0xbfde50ee3cdf6e97;
op3val:0x3fddea75f384795e; valaddr_reg:x3; val_offset:4308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4308*FLEN/8, x4, x1, x2)

inst_1437:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf93d6ae142d22 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe50ee3cdf6e97 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdea75f384795e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef93d6ae142d22; op2val:0xbfde50ee3cdf6e97;
op3val:0x3fddea75f384795e; valaddr_reg:x3; val_offset:4311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4311*FLEN/8, x4, x1, x2)

inst_1438:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf93d6ae142d22 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe50ee3cdf6e97 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdea75f384795e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef93d6ae142d22; op2val:0xbfde50ee3cdf6e97;
op3val:0x3fddea75f384795e; valaddr_reg:x3; val_offset:4314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4314*FLEN/8, x4, x1, x2)

inst_1439:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf93d6ae142d22 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe50ee3cdf6e97 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdea75f384795e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef93d6ae142d22; op2val:0xbfde50ee3cdf6e97;
op3val:0x3fddea75f384795e; valaddr_reg:x3; val_offset:4317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4317*FLEN/8, x4, x1, x2)

inst_1440:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf94918d134494 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x965d0c5a7379c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9108caa5e0da7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef94918d134494; op2val:0xbfe965d0c5a7379c;
op3val:0x3fe9108caa5e0da7; valaddr_reg:x3; val_offset:4320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4320*FLEN/8, x4, x1, x2)

inst_1441:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf94918d134494 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x965d0c5a7379c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9108caa5e0da7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef94918d134494; op2val:0xbfe965d0c5a7379c;
op3val:0x3fe9108caa5e0da7; valaddr_reg:x3; val_offset:4323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4323*FLEN/8, x4, x1, x2)

inst_1442:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf94918d134494 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x965d0c5a7379c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9108caa5e0da7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef94918d134494; op2val:0xbfe965d0c5a7379c;
op3val:0x3fe9108caa5e0da7; valaddr_reg:x3; val_offset:4326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4326*FLEN/8, x4, x1, x2)

inst_1443:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf94918d134494 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x965d0c5a7379c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9108caa5e0da7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef94918d134494; op2val:0xbfe965d0c5a7379c;
op3val:0x3fe9108caa5e0da7; valaddr_reg:x3; val_offset:4329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4329*FLEN/8, x4, x1, x2)

inst_1444:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf94918d134494 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x965d0c5a7379c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9108caa5e0da7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef94918d134494; op2val:0xbfe965d0c5a7379c;
op3val:0x3fe9108caa5e0da7; valaddr_reg:x3; val_offset:4332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4332*FLEN/8, x4, x1, x2)

inst_1445:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa1219a1a5018 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd550fa34280bd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcfe19e9cf6d74 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefa1219a1a5018; op2val:0xbfdd550fa34280bd;
op3val:0x3fdcfe19e9cf6d74; valaddr_reg:x3; val_offset:4335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4335*FLEN/8, x4, x1, x2)

inst_1446:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa1219a1a5018 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd550fa34280bd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcfe19e9cf6d74 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefa1219a1a5018; op2val:0xbfdd550fa34280bd;
op3val:0x3fdcfe19e9cf6d74; valaddr_reg:x3; val_offset:4338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4338*FLEN/8, x4, x1, x2)

inst_1447:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa1219a1a5018 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd550fa34280bd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcfe19e9cf6d74 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefa1219a1a5018; op2val:0xbfdd550fa34280bd;
op3val:0x3fdcfe19e9cf6d74; valaddr_reg:x3; val_offset:4341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4341*FLEN/8, x4, x1, x2)

inst_1448:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa1219a1a5018 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd550fa34280bd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcfe19e9cf6d74 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefa1219a1a5018; op2val:0xbfdd550fa34280bd;
op3val:0x3fdcfe19e9cf6d74; valaddr_reg:x3; val_offset:4344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4344*FLEN/8, x4, x1, x2)

inst_1449:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa1219a1a5018 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd550fa34280bd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcfe19e9cf6d74 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefa1219a1a5018; op2val:0xbfdd550fa34280bd;
op3val:0x3fdcfe19e9cf6d74; valaddr_reg:x3; val_offset:4347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4347*FLEN/8, x4, x1, x2)

inst_1450:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb5a13e304f5d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xec8c188e2ec1b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe8136212b416c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefb5a13e304f5d; op2val:0xbfeec8c188e2ec1b;
op3val:0x3fee8136212b416c; valaddr_reg:x3; val_offset:4350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4350*FLEN/8, x4, x1, x2)

inst_1451:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb5a13e304f5d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xec8c188e2ec1b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe8136212b416c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefb5a13e304f5d; op2val:0xbfeec8c188e2ec1b;
op3val:0x3fee8136212b416c; valaddr_reg:x3; val_offset:4353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4353*FLEN/8, x4, x1, x2)

inst_1452:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb5a13e304f5d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xec8c188e2ec1b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe8136212b416c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefb5a13e304f5d; op2val:0xbfeec8c188e2ec1b;
op3val:0x3fee8136212b416c; valaddr_reg:x3; val_offset:4356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4356*FLEN/8, x4, x1, x2)

inst_1453:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb5a13e304f5d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xec8c188e2ec1b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe8136212b416c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefb5a13e304f5d; op2val:0xbfeec8c188e2ec1b;
op3val:0x3fee8136212b416c; valaddr_reg:x3; val_offset:4359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4359*FLEN/8, x4, x1, x2)

inst_1454:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb5a13e304f5d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xec8c188e2ec1b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe8136212b416c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefb5a13e304f5d; op2val:0xbfeec8c188e2ec1b;
op3val:0x3fee8136212b416c; valaddr_reg:x3; val_offset:4362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4362*FLEN/8, x4, x1, x2)

inst_1455:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe449159db7b2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4aea33ccef598 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x49cb9aa56ade4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefe449159db7b2; op2val:0xbfd4aea33ccef598;
op3val:0x3fd49cb9aa56ade4; valaddr_reg:x3; val_offset:4365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4365*FLEN/8, x4, x1, x2)

inst_1456:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe449159db7b2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4aea33ccef598 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x49cb9aa56ade4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefe449159db7b2; op2val:0xbfd4aea33ccef598;
op3val:0x3fd49cb9aa56ade4; valaddr_reg:x3; val_offset:4368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4368*FLEN/8, x4, x1, x2)

inst_1457:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe449159db7b2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4aea33ccef598 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x49cb9aa56ade4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefe449159db7b2; op2val:0xbfd4aea33ccef598;
op3val:0x3fd49cb9aa56ade4; valaddr_reg:x3; val_offset:4371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4371*FLEN/8, x4, x1, x2)

inst_1458:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe449159db7b2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4aea33ccef598 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x49cb9aa56ade4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefe449159db7b2; op2val:0xbfd4aea33ccef598;
op3val:0x3fd49cb9aa56ade4; valaddr_reg:x3; val_offset:4374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4374*FLEN/8, x4, x1, x2)

inst_1459:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe449159db7b2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4aea33ccef598 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x49cb9aa56ade4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefe449159db7b2; op2val:0xbfd4aea33ccef598;
op3val:0x3fd49cb9aa56ade4; valaddr_reg:x3; val_offset:4377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4377*FLEN/8, x4, x1, x2)

inst_1460:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff175d81c539e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x07d4d329b52bf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x075cf2fea3cc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff175d81c539e; op2val:0xbfc07d4d329b52bf;
op3val:0x3fc075cf2fea3cc8; valaddr_reg:x3; val_offset:4380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4380*FLEN/8, x4, x1, x2)

inst_1461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff175d81c539e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x07d4d329b52bf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x075cf2fea3cc8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff175d81c539e; op2val:0xbfc07d4d329b52bf;
op3val:0x3fc075cf2fea3cc8; valaddr_reg:x3; val_offset:4383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4383*FLEN/8, x4, x1, x2)

inst_1462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff175d81c539e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x07d4d329b52bf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x075cf2fea3cc8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff175d81c539e; op2val:0xbfc07d4d329b52bf;
op3val:0x3fc075cf2fea3cc8; valaddr_reg:x3; val_offset:4386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4386*FLEN/8, x4, x1, x2)

inst_1463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff175d81c539e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x07d4d329b52bf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x075cf2fea3cc8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff175d81c539e; op2val:0xbfc07d4d329b52bf;
op3val:0x3fc075cf2fea3cc8; valaddr_reg:x3; val_offset:4389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4389*FLEN/8, x4, x1, x2)

inst_1464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff175d81c539e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x07d4d329b52bf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x075cf2fea3cc8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff175d81c539e; op2val:0xbfc07d4d329b52bf;
op3val:0x3fc075cf2fea3cc8; valaddr_reg:x3; val_offset:4392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4392*FLEN/8, x4, x1, x2)

inst_1465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffa9696991130 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x30a61c8407e29 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3072970310af8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffa9696991130; op2val:0xbfe30a61c8407e29;
op3val:0x3fe3072970310af8; valaddr_reg:x3; val_offset:4395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4395*FLEN/8, x4, x1, x2)

inst_1466:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffa9696991130 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x30a61c8407e29 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3072970310af8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffa9696991130; op2val:0xbfe30a61c8407e29;
op3val:0x3fe3072970310af8; valaddr_reg:x3; val_offset:4398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4398*FLEN/8, x4, x1, x2)

inst_1467:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffa9696991130 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x30a61c8407e29 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3072970310af8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffa9696991130; op2val:0xbfe30a61c8407e29;
op3val:0x3fe3072970310af8; valaddr_reg:x3; val_offset:4401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4401*FLEN/8, x4, x1, x2)

inst_1468:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffa9696991130 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x30a61c8407e29 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3072970310af8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffa9696991130; op2val:0xbfe30a61c8407e29;
op3val:0x3fe3072970310af8; valaddr_reg:x3; val_offset:4404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4404*FLEN/8, x4, x1, x2)

inst_1469:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffa9696991130 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x30a61c8407e29 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3072970310af8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffa9696991130; op2val:0xbfe30a61c8407e29;
op3val:0x3fe3072970310af8; valaddr_reg:x3; val_offset:4407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4407*FLEN/8, x4, x1, x2)

inst_1470:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0x6f07612d56000 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xa61a99f3a42d2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x2e9626d4a96ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f46f07612d56000; op2val:0xc06a61a99f3a42d2;
op3val:0x3fc2e9626d4a96ac; valaddr_reg:x3; val_offset:4410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4410*FLEN/8, x4, x1, x2)

inst_1471:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0x6f07612d56000 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xa61a99f3a42d2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x2e9626d4a96ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f46f07612d56000; op2val:0xc06a61a99f3a42d2;
op3val:0x3fc2e9626d4a96ac; valaddr_reg:x3; val_offset:4413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4413*FLEN/8, x4, x1, x2)

inst_1472:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0x6f07612d56000 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xa61a99f3a42d2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x2e9626d4a96ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f46f07612d56000; op2val:0xc06a61a99f3a42d2;
op3val:0x3fc2e9626d4a96ac; valaddr_reg:x3; val_offset:4416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4416*FLEN/8, x4, x1, x2)

inst_1473:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0x6f07612d56000 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xa61a99f3a42d2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x2e9626d4a96ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f46f07612d56000; op2val:0xc06a61a99f3a42d2;
op3val:0x3fc2e9626d4a96ac; valaddr_reg:x3; val_offset:4419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4419*FLEN/8, x4, x1, x2)

inst_1474:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6e2cfb6da7d40 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xfa01150dafc84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e33aa07ebf5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f86e2cfb6da7d40; op2val:0xc04fa01150dafc84;
op3val:0x3fe69e33aa07ebf5; valaddr_reg:x3; val_offset:4422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4422*FLEN/8, x4, x1, x2)

inst_1475:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6e2cfb6da7d40 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xfa01150dafc84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e33aa07ebf5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f86e2cfb6da7d40; op2val:0xc04fa01150dafc84;
op3val:0x3fe69e33aa07ebf5; valaddr_reg:x3; val_offset:4425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4425*FLEN/8, x4, x1, x2)

inst_1476:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6e2cfb6da7d40 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xfa01150dafc84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e33aa07ebf5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f86e2cfb6da7d40; op2val:0xc04fa01150dafc84;
op3val:0x3fe69e33aa07ebf5; valaddr_reg:x3; val_offset:4428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4428*FLEN/8, x4, x1, x2)

inst_1477:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6e2cfb6da7d40 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xfa01150dafc84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e33aa07ebf5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f86e2cfb6da7d40; op2val:0xc04fa01150dafc84;
op3val:0x3fe69e33aa07ebf5; valaddr_reg:x3; val_offset:4431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4431*FLEN/8, x4, x1, x2)

inst_1478:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6e2cfb6da7d40 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xfa01150dafc84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e33aa07ebf5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f86e2cfb6da7d40; op2val:0xc04fa01150dafc84;
op3val:0x3fe69e33aa07ebf5; valaddr_reg:x3; val_offset:4434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4434*FLEN/8, x4, x1, x2)

inst_1479:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xb3d7f663bda80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x1890703a81cce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddaa1e09c7408 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8b3d7f663bda80; op2val:0xc041890703a81cce;
op3val:0x3fdddaa1e09c7408; valaddr_reg:x3; val_offset:4437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4437*FLEN/8, x4, x1, x2)

inst_1480:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xb3d7f663bda80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x1890703a81cce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddaa1e09c7408 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8b3d7f663bda80; op2val:0xc041890703a81cce;
op3val:0x3fdddaa1e09c7408; valaddr_reg:x3; val_offset:4440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4440*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(13865001783962256082,64,FLEN)
NAN_BOXED(4594491178820998828,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(13865001783962256082,64,FLEN)
NAN_BOXED(4594491178820998828,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(4594491178820998828,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(4594491178820998828,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(4604541613766077429,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(4604541613766077429,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(4578821063537580672,64,FLEN)
NAN_BOXED(13853504591987481806,64,FLEN)
NAN_BOXED(4578821063537580672,64,FLEN)
NAN_BOXED(4578821063537580672,64,FLEN)
NAN_BOXED(4578821063537580672,64,FLEN)
NAN_BOXED(4578821063537580672,64,FLEN)
NAN_BOXED(4578821063537580672,64,FLEN)
NAN_BOXED(13853504591987481806,64,FLEN)
NAN_BOXED(4602074783035454472,64,FLEN)
NAN_BOXED(4578821063537580672,64,FLEN)
NAN_BOXED(13853504591987481806,64,FLEN)
NAN_BOXED(4602074783035454472,64,FLEN)
NAN_BOXED(4578821063537580672,64,FLEN)
NAN_BOXED(13853504591987481806,64,FLEN)
NAN_BOXED(4602074783035454472,64,FLEN)
NAN_BOXED(4580189207961810976,64,FLEN)
NAN_BOXED(13853118046389507042,64,FLEN)
NAN_BOXED(4602753086074135930,64,FLEN)
NAN_BOXED(4580189207961810976,64,FLEN)
NAN_BOXED(13853118046389507042,64,FLEN)
NAN_BOXED(4602753086074135930,64,FLEN)
NAN_BOXED(4580189207961810976,64,FLEN)
NAN_BOXED(13853118046389507042,64,FLEN)
NAN_BOXED(4602753086074135930,64,FLEN)
NAN_BOXED(4580189207961810976,64,FLEN)
NAN_BOXED(13853118046389507042,64,FLEN)
NAN_BOXED(4602753086074135930,64,FLEN)
NAN_BOXED(4580189207961810976,64,FLEN)
NAN_BOXED(13853118046389507042,64,FLEN)
NAN_BOXED(4602753086074135930,64,FLEN)
NAN_BOXED(4580723991823857504,64,FLEN)
NAN_BOXED(13843230134145727659,64,FLEN)
NAN_BOXED(4593765015010808928,64,FLEN)
NAN_BOXED(4580723991823857504,64,FLEN)
NAN_BOXED(13843230134145727659,64,FLEN)
NAN_BOXED(4593765015010808928,64,FLEN)
NAN_BOXED(4580723991823857504,64,FLEN)
NAN_BOXED(13843230134145727659,64,FLEN)
NAN_BOXED(4593765015010808928,64,FLEN)
NAN_BOXED(4580723991823857504,64,FLEN)
NAN_BOXED(13843230134145727659,64,FLEN)
NAN_BOXED(4593765015010808928,64,FLEN)
NAN_BOXED(4580723991823857504,64,FLEN)
NAN_BOXED(13843230134145727659,64,FLEN)
NAN_BOXED(4593765015010808928,64,FLEN)
NAN_BOXED(4581139201054952480,64,FLEN)
NAN_BOXED(13851519596745401724,64,FLEN)
NAN_BOXED(4602712096226863093,64,FLEN)
NAN_BOXED(4581139201054952480,64,FLEN)
NAN_BOXED(13851519596745401724,64,FLEN)
NAN_BOXED(4602712096226863093,64,FLEN)
NAN_BOXED(4581139201054952480,64,FLEN)
NAN_BOXED(13851519596745401724,64,FLEN)
NAN_BOXED(4602712096226863093,64,FLEN)
NAN_BOXED(4581139201054952480,64,FLEN)
NAN_BOXED(13851519596745401724,64,FLEN)
NAN_BOXED(4602712096226863093,64,FLEN)
NAN_BOXED(4581139201054952480,64,FLEN)
NAN_BOXED(13851519596745401724,64,FLEN)
NAN_BOXED(4602712096226863093,64,FLEN)
NAN_BOXED(4581800566387421184,64,FLEN)
NAN_BOXED(13813667191455692663,64,FLEN)
NAN_BOXED(4565323687968369664,64,FLEN)
NAN_BOXED(4581800566387421184,64,FLEN)
NAN_BOXED(13813667191455692663,64,FLEN)
NAN_BOXED(4565323687968369664,64,FLEN)
NAN_BOXED(4581800566387421184,64,FLEN)
NAN_BOXED(13813667191455692663,64,FLEN)
NAN_BOXED(4565323687968369664,64,FLEN)
NAN_BOXED(4581800566387421184,64,FLEN)
NAN_BOXED(13813667191455692663,64,FLEN)
NAN_BOXED(4565323687968369664,64,FLEN)
NAN_BOXED(4581800566387421184,64,FLEN)
NAN_BOXED(13813667191455692663,64,FLEN)
NAN_BOXED(4565323687968369664,64,FLEN)
NAN_BOXED(4582539532055835264,64,FLEN)
NAN_BOXED(13834252293435595026,64,FLEN)
NAN_BOXED(4586427457134538640,64,FLEN)
NAN_BOXED(4582539532055835264,64,FLEN)
NAN_BOXED(13834252293435595026,64,FLEN)
NAN_BOXED(4586427457134538640,64,FLEN)
NAN_BOXED(4582539532055835264,64,FLEN)
NAN_BOXED(13834252293435595026,64,FLEN)
NAN_BOXED(4586427457134538640,64,FLEN)
NAN_BOXED(4582539532055835264,64,FLEN)
NAN_BOXED(13834252293435595026,64,FLEN)
NAN_BOXED(4586427457134538640,64,FLEN)
NAN_BOXED(4582539532055835264,64,FLEN)
NAN_BOXED(13834252293435595026,64,FLEN)
NAN_BOXED(4586427457134538640,64,FLEN)
NAN_BOXED(4582572568605146208,64,FLEN)
NAN_BOXED(13850476227376198619,64,FLEN)
NAN_BOXED(4603097293743772501,64,FLEN)
NAN_BOXED(4582572568605146208,64,FLEN)
NAN_BOXED(13850476227376198619,64,FLEN)
NAN_BOXED(4603097293743772501,64,FLEN)
NAN_BOXED(4582572568605146208,64,FLEN)
NAN_BOXED(13850476227376198619,64,FLEN)
NAN_BOXED(4603097293743772501,64,FLEN)
NAN_BOXED(4582572568605146208,64,FLEN)
NAN_BOXED(13850476227376198619,64,FLEN)
NAN_BOXED(4603097293743772501,64,FLEN)
NAN_BOXED(4582572568605146208,64,FLEN)
NAN_BOXED(13850476227376198619,64,FLEN)
NAN_BOXED(4603097293743772501,64,FLEN)
NAN_BOXED(4582738561041257824,64,FLEN)
NAN_BOXED(13854261331998236371,64,FLEN)
NAN_BOXED(4607125919480872944,64,FLEN)
NAN_BOXED(4582738561041257824,64,FLEN)
NAN_BOXED(13854261331998236371,64,FLEN)
NAN_BOXED(4607125919480872944,64,FLEN)
NAN_BOXED(4582738561041257824,64,FLEN)
NAN_BOXED(13854261331998236371,64,FLEN)
NAN_BOXED(4607125919480872944,64,FLEN)
NAN_BOXED(4582738561041257824,64,FLEN)
NAN_BOXED(13854261331998236371,64,FLEN)
NAN_BOXED(4607125919480872944,64,FLEN)
NAN_BOXED(4582738561041257824,64,FLEN)
NAN_BOXED(13854261331998236371,64,FLEN)
NAN_BOXED(4607125919480872944,64,FLEN)
NAN_BOXED(4582834283689702944,64,FLEN)
NAN_BOXED(13854091626604368878,64,FLEN)
NAN_BOXED(4606976464115728269,64,FLEN)
NAN_BOXED(4582834283689702944,64,FLEN)
NAN_BOXED(13854091626604368878,64,FLEN)
NAN_BOXED(4606976464115728269,64,FLEN)
NAN_BOXED(4582834283689702944,64,FLEN)
NAN_BOXED(13854091626604368878,64,FLEN)
NAN_BOXED(4606976464115728269,64,FLEN)
NAN_BOXED(4582834283689702944,64,FLEN)
NAN_BOXED(13854091626604368878,64,FLEN)
NAN_BOXED(4606976464115728269,64,FLEN)
NAN_BOXED(4582834283689702944,64,FLEN)
NAN_BOXED(13854091626604368878,64,FLEN)
NAN_BOXED(4606976464115728269,64,FLEN)
NAN_BOXED(4583526641067030976,64,FLEN)
NAN_BOXED(13846467713815166805,64,FLEN)
NAN_BOXED(4599705312987022570,64,FLEN)
NAN_BOXED(4583526641067030976,64,FLEN)
NAN_BOXED(13846467713815166805,64,FLEN)
NAN_BOXED(4599705312987022570,64,FLEN)
NAN_BOXED(4583526641067030976,64,FLEN)
NAN_BOXED(13846467713815166805,64,FLEN)
NAN_BOXED(4599705312987022570,64,FLEN)
NAN_BOXED(4583526641067030976,64,FLEN)
NAN_BOXED(13846467713815166805,64,FLEN)
NAN_BOXED(4599705312987022570,64,FLEN)
NAN_BOXED(4583526641067030976,64,FLEN)
NAN_BOXED(13846467713815166805,64,FLEN)
NAN_BOXED(4599705312987022570,64,FLEN)
NAN_BOXED(4583596634437744960,64,FLEN)
NAN_BOXED(13850403025458445825,64,FLEN)
NAN_BOXED(4603761659859100963,64,FLEN)
NAN_BOXED(4583596634437744960,64,FLEN)
NAN_BOXED(13850403025458445825,64,FLEN)
NAN_BOXED(4603761659859100963,64,FLEN)
NAN_BOXED(4583596634437744960,64,FLEN)
NAN_BOXED(13850403025458445825,64,FLEN)
NAN_BOXED(4603761659859100963,64,FLEN)
NAN_BOXED(4583596634437744960,64,FLEN)
NAN_BOXED(13850403025458445825,64,FLEN)
NAN_BOXED(4603761659859100963,64,FLEN)
NAN_BOXED(4583596634437744960,64,FLEN)
NAN_BOXED(13850403025458445825,64,FLEN)
NAN_BOXED(4603761659859100963,64,FLEN)
NAN_BOXED(4585761267419464400,64,FLEN)
NAN_BOXED(13835552380856789352,64,FLEN)
NAN_BOXED(4590879585073708912,64,FLEN)
NAN_BOXED(4585761267419464400,64,FLEN)
NAN_BOXED(13835552380856789352,64,FLEN)
NAN_BOXED(4590879585073708912,64,FLEN)
NAN_BOXED(4585761267419464400,64,FLEN)
NAN_BOXED(13835552380856789352,64,FLEN)
NAN_BOXED(4590879585073708912,64,FLEN)
NAN_BOXED(4585761267419464400,64,FLEN)
NAN_BOXED(13835552380856789352,64,FLEN)
NAN_BOXED(4590879585073708912,64,FLEN)
NAN_BOXED(4585761267419464400,64,FLEN)
NAN_BOXED(13835552380856789352,64,FLEN)
NAN_BOXED(4590879585073708912,64,FLEN)
NAN_BOXED(4585951962545309104,64,FLEN)
NAN_BOXED(13844787601637427671,64,FLEN)
NAN_BOXED(4600391621589121636,64,FLEN)
NAN_BOXED(4585951962545309104,64,FLEN)
NAN_BOXED(13844787601637427671,64,FLEN)
NAN_BOXED(4600391621589121636,64,FLEN)
NAN_BOXED(4585951962545309104,64,FLEN)
NAN_BOXED(13844787601637427671,64,FLEN)
NAN_BOXED(4600391621589121636,64,FLEN)
NAN_BOXED(4585951962545309104,64,FLEN)
NAN_BOXED(13844787601637427671,64,FLEN)
NAN_BOXED(4600391621589121636,64,FLEN)
NAN_BOXED(4585951962545309104,64,FLEN)
NAN_BOXED(13844787601637427671,64,FLEN)
NAN_BOXED(4600391621589121636,64,FLEN)
NAN_BOXED(4586327136507330928,64,FLEN)
NAN_BOXED(13828284241374869375,64,FLEN)
NAN_BOXED(4584772951122719936,64,FLEN)
NAN_BOXED(4586327136507330928,64,FLEN)
NAN_BOXED(13828284241374869375,64,FLEN)
NAN_BOXED(4584772951122719936,64,FLEN)
NAN_BOXED(4586327136507330928,64,FLEN)
NAN_BOXED(13828284241374869375,64,FLEN)
NAN_BOXED(4584772951122719936,64,FLEN)
NAN_BOXED(4586327136507330928,64,FLEN)
NAN_BOXED(13828284241374869375,64,FLEN)
NAN_BOXED(4584772951122719936,64,FLEN)
NAN_BOXED(4586327136507330928,64,FLEN)
NAN_BOXED(13828284241374869375,64,FLEN)
NAN_BOXED(4584772951122719936,64,FLEN)
NAN_BOXED(4587072374289319808,64,FLEN)
NAN_BOXED(13842544425441844646,64,FLEN)
NAN_BOXED(4599416185411669490,64,FLEN)
NAN_BOXED(4587072374289319808,64,FLEN)
NAN_BOXED(13842544425441844646,64,FLEN)
NAN_BOXED(4599416185411669490,64,FLEN)
NAN_BOXED(4587072374289319808,64,FLEN)
NAN_BOXED(13842544425441844646,64,FLEN)
NAN_BOXED(4599416185411669490,64,FLEN)
NAN_BOXED(4587072374289319808,64,FLEN)
NAN_BOXED(13842544425441844646,64,FLEN)
NAN_BOXED(4599416185411669490,64,FLEN)
NAN_BOXED(4587072374289319808,64,FLEN)
NAN_BOXED(13842544425441844646,64,FLEN)
NAN_BOXED(4599416185411669490,64,FLEN)
NAN_BOXED(4588323978418816384,64,FLEN)
NAN_BOXED(13842035396583351384,64,FLEN)
NAN_BOXED(4599995132204666360,64,FLEN)
NAN_BOXED(4588323978418816384,64,FLEN)
NAN_BOXED(13842035396583351384,64,FLEN)
NAN_BOXED(4599995132204666360,64,FLEN)
NAN_BOXED(4588323978418816384,64,FLEN)
NAN_BOXED(13842035396583351384,64,FLEN)
NAN_BOXED(4599995132204666360,64,FLEN)
NAN_BOXED(4588323978418816384,64,FLEN)
NAN_BOXED(13842035396583351384,64,FLEN)
NAN_BOXED(4599995132204666360,64,FLEN)
NAN_BOXED(4588323978418816384,64,FLEN)
NAN_BOXED(13842035396583351384,64,FLEN)
NAN_BOXED(4599995132204666360,64,FLEN)
NAN_BOXED(4589018426948816800,64,FLEN)
NAN_BOXED(13845293573199331715,64,FLEN)
NAN_BOXED(4603811941005606918,64,FLEN)
NAN_BOXED(4589018426948816800,64,FLEN)
NAN_BOXED(13845293573199331715,64,FLEN)
NAN_BOXED(4603811941005606918,64,FLEN)
NAN_BOXED(4589018426948816800,64,FLEN)
NAN_BOXED(13845293573199331715,64,FLEN)
NAN_BOXED(4603811941005606918,64,FLEN)
NAN_BOXED(4589018426948816800,64,FLEN)
NAN_BOXED(13845293573199331715,64,FLEN)
NAN_BOXED(4603811941005606918,64,FLEN)
NAN_BOXED(4589018426948816800,64,FLEN)
NAN_BOXED(13845293573199331715,64,FLEN)
NAN_BOXED(4603811941005606918,64,FLEN)
NAN_BOXED(4589176545342208184,64,FLEN)
NAN_BOXED(13844261371713740819,64,FLEN)
NAN_BOXED(4602883832639543916,64,FLEN)
NAN_BOXED(4589176545342208184,64,FLEN)
NAN_BOXED(13844261371713740819,64,FLEN)
NAN_BOXED(4602883832639543916,64,FLEN)
NAN_BOXED(4589176545342208184,64,FLEN)
NAN_BOXED(13844261371713740819,64,FLEN)
NAN_BOXED(4602883832639543916,64,FLEN)
NAN_BOXED(4589176545342208184,64,FLEN)
NAN_BOXED(13844261371713740819,64,FLEN)
NAN_BOXED(4602883832639543916,64,FLEN)
NAN_BOXED(4589176545342208184,64,FLEN)
NAN_BOXED(13844261371713740819,64,FLEN)
NAN_BOXED(4602883832639543916,64,FLEN)
NAN_BOXED(4589295114025395624,64,FLEN)
NAN_BOXED(13847850693114197325,64,FLEN)
NAN_BOXED(4606698178371441276,64,FLEN)
NAN_BOXED(4589295114025395624,64,FLEN)
NAN_BOXED(13847850693114197325,64,FLEN)
NAN_BOXED(4606698178371441276,64,FLEN)
NAN_BOXED(4589295114025395624,64,FLEN)
NAN_BOXED(13847850693114197325,64,FLEN)
NAN_BOXED(4606698178371441276,64,FLEN)
NAN_BOXED(4589295114025395624,64,FLEN)
NAN_BOXED(13847850693114197325,64,FLEN)
NAN_BOXED(4606698178371441276,64,FLEN)
NAN_BOXED(4589295114025395624,64,FLEN)
NAN_BOXED(13847850693114197325,64,FLEN)
NAN_BOXED(4606698178371441276,64,FLEN)
NAN_BOXED(4589733289086334536,64,FLEN)
NAN_BOXED(13828968183944248906,64,FLEN)
NAN_BOXED(4588513185457977920,64,FLEN)
NAN_BOXED(4589733289086334536,64,FLEN)
NAN_BOXED(13828968183944248906,64,FLEN)
NAN_BOXED(4588513185457977920,64,FLEN)
NAN_BOXED(4589733289086334536,64,FLEN)
NAN_BOXED(13828968183944248906,64,FLEN)
NAN_BOXED(4588513185457977920,64,FLEN)
NAN_BOXED(4589733289086334536,64,FLEN)
NAN_BOXED(13828968183944248906,64,FLEN)
NAN_BOXED(4588513185457977920,64,FLEN)
NAN_BOXED(4589733289086334536,64,FLEN)
NAN_BOXED(13828968183944248906,64,FLEN)
NAN_BOXED(4588513185457977920,64,FLEN)
NAN_BOXED(4590335171660704536,64,FLEN)
NAN_BOXED(13840805242947076481,64,FLEN)
NAN_BOXED(4600908246812042190,64,FLEN)
NAN_BOXED(4590335171660704536,64,FLEN)
NAN_BOXED(13840805242947076481,64,FLEN)
NAN_BOXED(4600908246812042190,64,FLEN)
NAN_BOXED(4590335171660704536,64,FLEN)
NAN_BOXED(13840805242947076481,64,FLEN)
NAN_BOXED(4600908246812042190,64,FLEN)
NAN_BOXED(4590335171660704536,64,FLEN)
NAN_BOXED(13840805242947076481,64,FLEN)
NAN_BOXED(4600908246812042190,64,FLEN)
NAN_BOXED(4590335171660704536,64,FLEN)
NAN_BOXED(13840805242947076481,64,FLEN)
NAN_BOXED(4600908246812042190,64,FLEN)
NAN_BOXED(4591100920763035960,64,FLEN)
NAN_BOXED(13844964725023978199,64,FLEN)
NAN_BOXED(4605897233980101743,64,FLEN)
NAN_BOXED(4591100920763035960,64,FLEN)
NAN_BOXED(13844964725023978199,64,FLEN)
NAN_BOXED(4605897233980101743,64,FLEN)
NAN_BOXED(4591100920763035960,64,FLEN)
NAN_BOXED(13844964725023978199,64,FLEN)
NAN_BOXED(4605897233980101743,64,FLEN)
NAN_BOXED(4591100920763035960,64,FLEN)
NAN_BOXED(13844964725023978199,64,FLEN)
NAN_BOXED(4605897233980101743,64,FLEN)
NAN_BOXED(4591100920763035960,64,FLEN)
NAN_BOXED(13844964725023978199,64,FLEN)
NAN_BOXED(4605897233980101743,64,FLEN)
NAN_BOXED(4591805292797956848,64,FLEN)
NAN_BOXED(13844599224416302639,64,FLEN)
NAN_BOXED(4606162750119561371,64,FLEN)
NAN_BOXED(4591805292797956848,64,FLEN)
NAN_BOXED(13844599224416302639,64,FLEN)
NAN_BOXED(4606162750119561371,64,FLEN)
NAN_BOXED(4591805292797956848,64,FLEN)
NAN_BOXED(13844599224416302639,64,FLEN)
NAN_BOXED(4606162750119561371,64,FLEN)
NAN_BOXED(4591805292797956848,64,FLEN)
NAN_BOXED(13844599224416302639,64,FLEN)
NAN_BOXED(4606162750119561371,64,FLEN)
NAN_BOXED(4591805292797956848,64,FLEN)
NAN_BOXED(13844599224416302639,64,FLEN)
NAN_BOXED(4606162750119561371,64,FLEN)
NAN_BOXED(4591957228529663208,64,FLEN)
NAN_BOXED(13840718699187503323,64,FLEN)
NAN_BOXED(4602758440947931325,64,FLEN)
NAN_BOXED(4591957228529663208,64,FLEN)
NAN_BOXED(13840718699187503323,64,FLEN)
NAN_BOXED(4602758440947931325,64,FLEN)
NAN_BOXED(4591957228529663208,64,FLEN)
NAN_BOXED(13840718699187503323,64,FLEN)
NAN_BOXED(4602758440947931325,64,FLEN)
NAN_BOXED(4591957228529663208,64,FLEN)
NAN_BOXED(13840718699187503323,64,FLEN)
NAN_BOXED(4602758440947931325,64,FLEN)
NAN_BOXED(4591957228529663208,64,FLEN)
NAN_BOXED(13840718699187503323,64,FLEN)
NAN_BOXED(4602758440947931325,64,FLEN)
NAN_BOXED(4592151926654227832,64,FLEN)
NAN_BOXED(13838050381496232371,64,FLEN)
NAN_BOXED(4599902834311969288,64,FLEN)
NAN_BOXED(4592151926654227832,64,FLEN)
NAN_BOXED(13838050381496232371,64,FLEN)
NAN_BOXED(4599902834311969288,64,FLEN)
NAN_BOXED(4592151926654227832,64,FLEN)
NAN_BOXED(13838050381496232371,64,FLEN)
NAN_BOXED(4599902834311969288,64,FLEN)
NAN_BOXED(4592151926654227832,64,FLEN)
NAN_BOXED(13838050381496232371,64,FLEN)
NAN_BOXED(4599902834311969288,64,FLEN)
NAN_BOXED(4592151926654227832,64,FLEN)
NAN_BOXED(13838050381496232371,64,FLEN)
NAN_BOXED(4599902834311969288,64,FLEN)
NAN_BOXED(4592321139723510296,64,FLEN)
NAN_BOXED(13842488000500351915,64,FLEN)
NAN_BOXED(4604491167661943168,64,FLEN)
NAN_BOXED(4592321139723510296,64,FLEN)
NAN_BOXED(13842488000500351915,64,FLEN)
NAN_BOXED(4604491167661943168,64,FLEN)
NAN_BOXED(4592321139723510296,64,FLEN)
NAN_BOXED(13842488000500351915,64,FLEN)
NAN_BOXED(4604491167661943168,64,FLEN)
NAN_BOXED(4592321139723510296,64,FLEN)
NAN_BOXED(13842488000500351915,64,FLEN)
NAN_BOXED(4604491167661943168,64,FLEN)
NAN_BOXED(4592321139723510296,64,FLEN)
NAN_BOXED(13842488000500351915,64,FLEN)
NAN_BOXED(4604491167661943168,64,FLEN)
NAN_BOXED(4592340932393939328,64,FLEN)
NAN_BOXED(13844840925800213828,64,FLEN)
NAN_BOXED(4607173884674374480,64,FLEN)
NAN_BOXED(4592340932393939328,64,FLEN)
NAN_BOXED(13844840925800213828,64,FLEN)
NAN_BOXED(4607173884674374480,64,FLEN)
NAN_BOXED(4592340932393939328,64,FLEN)
NAN_BOXED(13844840925800213828,64,FLEN)
NAN_BOXED(4607173884674374480,64,FLEN)
NAN_BOXED(4592340932393939328,64,FLEN)
NAN_BOXED(13844840925800213828,64,FLEN)
NAN_BOXED(4607173884674374480,64,FLEN)
NAN_BOXED(4592340932393939328,64,FLEN)
NAN_BOXED(13844840925800213828,64,FLEN)
NAN_BOXED(4607173884674374480,64,FLEN)
NAN_BOXED(4592644262163849648,64,FLEN)
NAN_BOXED(13840334717204385732,64,FLEN)
NAN_BOXED(4602850027396325881,64,FLEN)
NAN_BOXED(4592644262163849648,64,FLEN)
NAN_BOXED(13840334717204385732,64,FLEN)
NAN_BOXED(4602850027396325881,64,FLEN)
NAN_BOXED(4592644262163849648,64,FLEN)
NAN_BOXED(13840334717204385732,64,FLEN)
NAN_BOXED(4602850027396325881,64,FLEN)
NAN_BOXED(4592644262163849648,64,FLEN)
NAN_BOXED(13840334717204385732,64,FLEN)
NAN_BOXED(4602850027396325881,64,FLEN)
NAN_BOXED(4592644262163849648,64,FLEN)
NAN_BOXED(13840334717204385732,64,FLEN)
NAN_BOXED(4602850027396325881,64,FLEN)
NAN_BOXED(4592739153157858928,64,FLEN)
NAN_BOXED(13839623647202790685,64,FLEN)
NAN_BOXED(4601857501543560956,64,FLEN)
NAN_BOXED(4592739153157858928,64,FLEN)
NAN_BOXED(13839623647202790685,64,FLEN)
NAN_BOXED(4601857501543560956,64,FLEN)
NAN_BOXED(4592739153157858928,64,FLEN)
NAN_BOXED(13839623647202790685,64,FLEN)
NAN_BOXED(4601857501543560956,64,FLEN)
NAN_BOXED(4592739153157858928,64,FLEN)
NAN_BOXED(13839623647202790685,64,FLEN)
NAN_BOXED(4601857501543560956,64,FLEN)
NAN_BOXED(4592739153157858928,64,FLEN)
NAN_BOXED(13839623647202790685,64,FLEN)
NAN_BOXED(4601857501543560956,64,FLEN)
NAN_BOXED(4593286628461022064,64,FLEN)
NAN_BOXED(13843036138484660581,64,FLEN)
NAN_BOXED(4605812298425741307,64,FLEN)
NAN_BOXED(4593286628461022064,64,FLEN)
NAN_BOXED(13843036138484660581,64,FLEN)
NAN_BOXED(4605812298425741307,64,FLEN)
NAN_BOXED(4593286628461022064,64,FLEN)
NAN_BOXED(13843036138484660581,64,FLEN)
NAN_BOXED(4605812298425741307,64,FLEN)
NAN_BOXED(4593286628461022064,64,FLEN)
NAN_BOXED(13843036138484660581,64,FLEN)
NAN_BOXED(4605812298425741307,64,FLEN)
NAN_BOXED(4593286628461022064,64,FLEN)
NAN_BOXED(13843036138484660581,64,FLEN)
NAN_BOXED(4605812298425741307,64,FLEN)
NAN_BOXED(4593422508258655440,64,FLEN)
NAN_BOXED(13843077073159646963,64,FLEN)
NAN_BOXED(4605972455846431415,64,FLEN)
NAN_BOXED(4593422508258655440,64,FLEN)
NAN_BOXED(13843077073159646963,64,FLEN)
NAN_BOXED(4605972455846431415,64,FLEN)
NAN_BOXED(4593422508258655440,64,FLEN)
NAN_BOXED(13843077073159646963,64,FLEN)
NAN_BOXED(4605972455846431415,64,FLEN)
NAN_BOXED(4593422508258655440,64,FLEN)
NAN_BOXED(13843077073159646963,64,FLEN)
NAN_BOXED(4605972455846431415,64,FLEN)
NAN_BOXED(4593422508258655440,64,FLEN)
NAN_BOXED(13843077073159646963,64,FLEN)
NAN_BOXED(4605972455846431415,64,FLEN)
NAN_BOXED(4593532790220396280,64,FLEN)
NAN_BOXED(13839810839736925536,64,FLEN)
NAN_BOXED(4602854748417528971,64,FLEN)
NAN_BOXED(4593532790220396280,64,FLEN)
NAN_BOXED(13839810839736925536,64,FLEN)
NAN_BOXED(4602854748417528971,64,FLEN)
NAN_BOXED(4593532790220396280,64,FLEN)
NAN_BOXED(13839810839736925536,64,FLEN)
NAN_BOXED(4602854748417528971,64,FLEN)
NAN_BOXED(4593532790220396280,64,FLEN)
NAN_BOXED(13839810839736925536,64,FLEN)
NAN_BOXED(4602854748417528971,64,FLEN)
NAN_BOXED(4593532790220396280,64,FLEN)
NAN_BOXED(13839810839736925536,64,FLEN)
NAN_BOXED(4602854748417528971,64,FLEN)
NAN_BOXED(4593854961370063496,64,FLEN)
NAN_BOXED(13835949255710338713,64,FLEN)
NAN_BOXED(4599286042177492894,64,FLEN)
NAN_BOXED(4593854961370063496,64,FLEN)
NAN_BOXED(13835949255710338713,64,FLEN)
NAN_BOXED(4599286042177492894,64,FLEN)
NAN_BOXED(4593854961370063496,64,FLEN)
NAN_BOXED(13835949255710338713,64,FLEN)
NAN_BOXED(4599286042177492894,64,FLEN)
NAN_BOXED(4593854961370063496,64,FLEN)
NAN_BOXED(13835949255710338713,64,FLEN)
NAN_BOXED(4599286042177492894,64,FLEN)
NAN_BOXED(4593854961370063496,64,FLEN)
NAN_BOXED(13835949255710338713,64,FLEN)
NAN_BOXED(4599286042177492894,64,FLEN)
NAN_BOXED(4594328538727929552,64,FLEN)
NAN_BOXED(13841233273239566303,64,FLEN)
NAN_BOXED(4605251187384520080,64,FLEN)
NAN_BOXED(4594328538727929552,64,FLEN)
NAN_BOXED(13841233273239566303,64,FLEN)
NAN_BOXED(4605251187384520080,64,FLEN)
NAN_BOXED(4594328538727929552,64,FLEN)
NAN_BOXED(13841233273239566303,64,FLEN)
NAN_BOXED(4605251187384520080,64,FLEN)
NAN_BOXED(4594328538727929552,64,FLEN)
NAN_BOXED(13841233273239566303,64,FLEN)
NAN_BOXED(4605251187384520080,64,FLEN)
NAN_BOXED(4594328538727929552,64,FLEN)
NAN_BOXED(13841233273239566303,64,FLEN)
NAN_BOXED(4605251187384520080,64,FLEN)
NAN_BOXED(4594503835136588496,64,FLEN)
NAN_BOXED(13841166798708591641,64,FLEN)
NAN_BOXED(4605412790946465664,64,FLEN)
NAN_BOXED(4594503835136588496,64,FLEN)
NAN_BOXED(13841166798708591641,64,FLEN)
NAN_BOXED(4605412790946465664,64,FLEN)
NAN_BOXED(4594503835136588496,64,FLEN)
NAN_BOXED(13841166798708591641,64,FLEN)
NAN_BOXED(4605412790946465664,64,FLEN)
NAN_BOXED(4594503835136588496,64,FLEN)
NAN_BOXED(13841166798708591641,64,FLEN)
NAN_BOXED(4605412790946465664,64,FLEN)
NAN_BOXED(4594503835136588496,64,FLEN)
NAN_BOXED(13841166798708591641,64,FLEN)
NAN_BOXED(4605412790946465664,64,FLEN)
NAN_BOXED(4594515553513921136,64,FLEN)
NAN_BOXED(13837874796021960181,64,FLEN)
NAN_BOXED(4602363725468765652,64,FLEN)
NAN_BOXED(4594515553513921136,64,FLEN)
NAN_BOXED(13837874796021960181,64,FLEN)
NAN_BOXED(4602363725468765652,64,FLEN)
NAN_BOXED(4594515553513921136,64,FLEN)
NAN_BOXED(13837874796021960181,64,FLEN)
NAN_BOXED(4602363725468765652,64,FLEN)
NAN_BOXED(4594515553513921136,64,FLEN)
NAN_BOXED(13837874796021960181,64,FLEN)
NAN_BOXED(4602363725468765652,64,FLEN)
NAN_BOXED(4594515553513921136,64,FLEN)
NAN_BOXED(13837874796021960181,64,FLEN)
NAN_BOXED(4602363725468765652,64,FLEN)
NAN_BOXED(4594858313443365868,64,FLEN)
NAN_BOXED(13840623973852362729,64,FLEN)
NAN_BOXED(4605207751508537847,64,FLEN)
NAN_BOXED(4594858313443365868,64,FLEN)
NAN_BOXED(13840623973852362729,64,FLEN)
NAN_BOXED(4605207751508537847,64,FLEN)
NAN_BOXED(4594858313443365868,64,FLEN)
NAN_BOXED(13840623973852362729,64,FLEN)
NAN_BOXED(4605207751508537847,64,FLEN)
NAN_BOXED(4594858313443365868,64,FLEN)
NAN_BOXED(13840623973852362729,64,FLEN)
NAN_BOXED(4605207751508537847,64,FLEN)
NAN_BOXED(4594858313443365868,64,FLEN)
NAN_BOXED(13840623973852362729,64,FLEN)
NAN_BOXED(4605207751508537847,64,FLEN)
NAN_BOXED(4594989218923536888,64,FLEN)
NAN_BOXED(13841116635115761515,64,FLEN)
NAN_BOXED(4606006332335793656,64,FLEN)
NAN_BOXED(4594989218923536888,64,FLEN)
NAN_BOXED(13841116635115761515,64,FLEN)
NAN_BOXED(4606006332335793656,64,FLEN)
NAN_BOXED(4594989218923536888,64,FLEN)
NAN_BOXED(13841116635115761515,64,FLEN)
NAN_BOXED(4606006332335793656,64,FLEN)
NAN_BOXED(4594989218923536888,64,FLEN)
NAN_BOXED(13841116635115761515,64,FLEN)
NAN_BOXED(4606006332335793656,64,FLEN)
NAN_BOXED(4594989218923536888,64,FLEN)
NAN_BOXED(13841116635115761515,64,FLEN)
NAN_BOXED(4606006332335793656,64,FLEN)
NAN_BOXED(4595253265419229772,64,FLEN)
NAN_BOXED(13835248856760675996,64,FLEN)
NAN_BOXED(4600014675212630162,64,FLEN)
NAN_BOXED(4595253265419229772,64,FLEN)
NAN_BOXED(13835248856760675996,64,FLEN)
NAN_BOXED(4600014675212630162,64,FLEN)
NAN_BOXED(4595253265419229772,64,FLEN)
NAN_BOXED(13835248856760675996,64,FLEN)
NAN_BOXED(4600014675212630162,64,FLEN)
NAN_BOXED(4595253265419229772,64,FLEN)
NAN_BOXED(13835248856760675996,64,FLEN)
NAN_BOXED(4600014675212630162,64,FLEN)
NAN_BOXED(4595253265419229772,64,FLEN)
NAN_BOXED(13835248856760675996,64,FLEN)
NAN_BOXED(4600014675212630162,64,FLEN)
NAN_BOXED(4595422052898393400,64,FLEN)
NAN_BOXED(13840091507305683123,64,FLEN)
NAN_BOXED(4605165044505262675,64,FLEN)
NAN_BOXED(4595422052898393400,64,FLEN)
NAN_BOXED(13840091507305683123,64,FLEN)
NAN_BOXED(4605165044505262675,64,FLEN)
NAN_BOXED(4595422052898393400,64,FLEN)
NAN_BOXED(13840091507305683123,64,FLEN)
NAN_BOXED(4605165044505262675,64,FLEN)
NAN_BOXED(4595422052898393400,64,FLEN)
NAN_BOXED(13840091507305683123,64,FLEN)
NAN_BOXED(4605165044505262675,64,FLEN)
NAN_BOXED(4595422052898393400,64,FLEN)
NAN_BOXED(13840091507305683123,64,FLEN)
NAN_BOXED(4605165044505262675,64,FLEN)
NAN_BOXED(4595631724018118976,64,FLEN)
NAN_BOXED(13840456704364853433,64,FLEN)
NAN_BOXED(4605923525586431161,64,FLEN)
NAN_BOXED(4595631724018118976,64,FLEN)
NAN_BOXED(13840456704364853433,64,FLEN)
NAN_BOXED(4605923525586431161,64,FLEN)
NAN_BOXED(4595631724018118976,64,FLEN)
NAN_BOXED(13840456704364853433,64,FLEN)
NAN_BOXED(4605923525586431161,64,FLEN)
NAN_BOXED(4595631724018118976,64,FLEN)
NAN_BOXED(13840456704364853433,64,FLEN)
NAN_BOXED(4605923525586431161,64,FLEN)
NAN_BOXED(4595631724018118976,64,FLEN)
NAN_BOXED(13840456704364853433,64,FLEN)
NAN_BOXED(4605923525586431161,64,FLEN)
NAN_BOXED(4595673463532746204,64,FLEN)
NAN_BOXED(13839123606139020839,64,FLEN)
NAN_BOXED(4604364282375185894,64,FLEN)
NAN_BOXED(4595673463532746204,64,FLEN)
NAN_BOXED(13839123606139020839,64,FLEN)
NAN_BOXED(4604364282375185894,64,FLEN)
NAN_BOXED(4595673463532746204,64,FLEN)
NAN_BOXED(13839123606139020839,64,FLEN)
NAN_BOXED(4604364282375185894,64,FLEN)
NAN_BOXED(4595673463532746204,64,FLEN)
NAN_BOXED(13839123606139020839,64,FLEN)
NAN_BOXED(4604364282375185894,64,FLEN)
NAN_BOXED(4595673463532746204,64,FLEN)
NAN_BOXED(13839123606139020839,64,FLEN)
NAN_BOXED(4604364282375185894,64,FLEN)
NAN_BOXED(4595706454323689008,64,FLEN)
NAN_BOXED(13837762305485392561,64,FLEN)
NAN_BOXED(4603407484237705078,64,FLEN)
NAN_BOXED(4595706454323689008,64,FLEN)
NAN_BOXED(13837762305485392561,64,FLEN)
NAN_BOXED(4603407484237705078,64,FLEN)
NAN_BOXED(4595706454323689008,64,FLEN)
NAN_BOXED(13837762305485392561,64,FLEN)
NAN_BOXED(4603407484237705078,64,FLEN)
NAN_BOXED(4595706454323689008,64,FLEN)
NAN_BOXED(13837762305485392561,64,FLEN)
NAN_BOXED(4603407484237705078,64,FLEN)
NAN_BOXED(4595706454323689008,64,FLEN)
NAN_BOXED(13837762305485392561,64,FLEN)
NAN_BOXED(4603407484237705078,64,FLEN)
NAN_BOXED(4595706595741686880,64,FLEN)
NAN_BOXED(13836997289505755412,64,FLEN)
NAN_BOXED(4602852251113283002,64,FLEN)
NAN_BOXED(4595706595741686880,64,FLEN)
NAN_BOXED(13836997289505755412,64,FLEN)
NAN_BOXED(4602852251113283002,64,FLEN)
NAN_BOXED(4595706595741686880,64,FLEN)
NAN_BOXED(13836997289505755412,64,FLEN)
NAN_BOXED(4602852251113283002,64,FLEN)
NAN_BOXED(4595706595741686880,64,FLEN)
NAN_BOXED(13836997289505755412,64,FLEN)
NAN_BOXED(4602852251113283002,64,FLEN)
NAN_BOXED(4595706595741686880,64,FLEN)
NAN_BOXED(13836997289505755412,64,FLEN)
NAN_BOXED(4602852251113283002,64,FLEN)
NAN_BOXED(4595905771022724836,64,FLEN)
NAN_BOXED(13834665111252792201,64,FLEN)
NAN_BOXED(4600115432562713308,64,FLEN)
NAN_BOXED(4595905771022724836,64,FLEN)
NAN_BOXED(13834665111252792201,64,FLEN)
NAN_BOXED(4600115432562713308,64,FLEN)
NAN_BOXED(4595905771022724836,64,FLEN)
NAN_BOXED(13834665111252792201,64,FLEN)
NAN_BOXED(4600115432562713308,64,FLEN)
NAN_BOXED(4595905771022724836,64,FLEN)
NAN_BOXED(13834665111252792201,64,FLEN)
NAN_BOXED(4600115432562713308,64,FLEN)
NAN_BOXED(4595905771022724836,64,FLEN)
NAN_BOXED(13834665111252792201,64,FLEN)
NAN_BOXED(4600115432562713308,64,FLEN)
NAN_BOXED(4595947809764089692,64,FLEN)
NAN_BOXED(13840631886489675357,64,FLEN)
NAN_BOXED(4606566152415594579,64,FLEN)
NAN_BOXED(4595947809764089692,64,FLEN)
NAN_BOXED(13840631886489675357,64,FLEN)
NAN_BOXED(4606566152415594579,64,FLEN)
NAN_BOXED(4595947809764089692,64,FLEN)
NAN_BOXED(13840631886489675357,64,FLEN)
NAN_BOXED(4606566152415594579,64,FLEN)
NAN_BOXED(4595947809764089692,64,FLEN)
NAN_BOXED(13840631886489675357,64,FLEN)
NAN_BOXED(4606566152415594579,64,FLEN)
NAN_BOXED(4595947809764089692,64,FLEN)
NAN_BOXED(13840631886489675357,64,FLEN)
NAN_BOXED(4606566152415594579,64,FLEN)
NAN_BOXED(4596211535363573556,64,FLEN)
NAN_BOXED(13837080813440163428,64,FLEN)
NAN_BOXED(4603278748193107656,64,FLEN)
NAN_BOXED(4596211535363573556,64,FLEN)
NAN_BOXED(13837080813440163428,64,FLEN)
NAN_BOXED(4603278748193107656,64,FLEN)
NAN_BOXED(4596211535363573556,64,FLEN)
NAN_BOXED(13837080813440163428,64,FLEN)
NAN_BOXED(4603278748193107656,64,FLEN)
NAN_BOXED(4596211535363573556,64,FLEN)
NAN_BOXED(13837080813440163428,64,FLEN)
NAN_BOXED(4603278748193107656,64,FLEN)
NAN_BOXED(4596211535363573556,64,FLEN)
NAN_BOXED(13837080813440163428,64,FLEN)
NAN_BOXED(4603278748193107656,64,FLEN)
NAN_BOXED(4596473699164458232,64,FLEN)
NAN_BOXED(13827779640466347617,64,FLEN)
NAN_BOXED(4594223065185133648,64,FLEN)
NAN_BOXED(4596473699164458232,64,FLEN)
NAN_BOXED(13827779640466347617,64,FLEN)
NAN_BOXED(4594223065185133648,64,FLEN)
NAN_BOXED(4596473699164458232,64,FLEN)
NAN_BOXED(13827779640466347617,64,FLEN)
NAN_BOXED(4594223065185133648,64,FLEN)
NAN_BOXED(4596473699164458232,64,FLEN)
NAN_BOXED(13827779640466347617,64,FLEN)
NAN_BOXED(4594223065185133648,64,FLEN)
NAN_BOXED(4596473699164458232,64,FLEN)
NAN_BOXED(13827779640466347617,64,FLEN)
NAN_BOXED(4594223065185133648,64,FLEN)
NAN_BOXED(4596476570160946716,64,FLEN)
NAN_BOXED(13839838175085344530,64,FLEN)
NAN_BOXED(4605932513012432476,64,FLEN)
NAN_BOXED(4596476570160946716,64,FLEN)
NAN_BOXED(13839838175085344530,64,FLEN)
NAN_BOXED(4605932513012432476,64,FLEN)
NAN_BOXED(4596476570160946716,64,FLEN)
NAN_BOXED(13839838175085344530,64,FLEN)
NAN_BOXED(4605932513012432476,64,FLEN)
NAN_BOXED(4596476570160946716,64,FLEN)
NAN_BOXED(13839838175085344530,64,FLEN)
NAN_BOXED(4605932513012432476,64,FLEN)
NAN_BOXED(4596476570160946716,64,FLEN)
NAN_BOXED(13839838175085344530,64,FLEN)
NAN_BOXED(4605932513012432476,64,FLEN)
NAN_BOXED(4596546949744946692,64,FLEN)
NAN_BOXED(13822105624308083406,64,FLEN)
NAN_BOXED(4588454609212976960,64,FLEN)
NAN_BOXED(4596546949744946692,64,FLEN)
NAN_BOXED(13822105624308083406,64,FLEN)
NAN_BOXED(4588454609212976960,64,FLEN)
NAN_BOXED(4596546949744946692,64,FLEN)
NAN_BOXED(13822105624308083406,64,FLEN)
NAN_BOXED(4588454609212976960,64,FLEN)
NAN_BOXED(4596546949744946692,64,FLEN)
NAN_BOXED(13822105624308083406,64,FLEN)
NAN_BOXED(4588454609212976960,64,FLEN)
NAN_BOXED(4596546949744946692,64,FLEN)
NAN_BOXED(13822105624308083406,64,FLEN)
NAN_BOXED(4588454609212976960,64,FLEN)
NAN_BOXED(4596670999037889060,64,FLEN)
NAN_BOXED(13833325805685407738,64,FLEN)
NAN_BOXED(4599731638257480088,64,FLEN)
NAN_BOXED(4596670999037889060,64,FLEN)
NAN_BOXED(13833325805685407738,64,FLEN)
NAN_BOXED(4599731638257480088,64,FLEN)
NAN_BOXED(4596670999037889060,64,FLEN)
NAN_BOXED(13833325805685407738,64,FLEN)
NAN_BOXED(4599731638257480088,64,FLEN)
NAN_BOXED(4596670999037889060,64,FLEN)
NAN_BOXED(13833325805685407738,64,FLEN)
NAN_BOXED(4599731638257480088,64,FLEN)
NAN_BOXED(4596670999037889060,64,FLEN)
NAN_BOXED(13833325805685407738,64,FLEN)
NAN_BOXED(4599731638257480088,64,FLEN)
NAN_BOXED(4597021614536325876,64,FLEN)
NAN_BOXED(13827026969295039449,64,FLEN)
NAN_BOXED(4593945914111192656,64,FLEN)
NAN_BOXED(4597021614536325876,64,FLEN)
NAN_BOXED(13827026969295039449,64,FLEN)
NAN_BOXED(4593945914111192656,64,FLEN)
NAN_BOXED(4597021614536325876,64,FLEN)
NAN_BOXED(13827026969295039449,64,FLEN)
NAN_BOXED(4593945914111192656,64,FLEN)
NAN_BOXED(4597021614536325876,64,FLEN)
NAN_BOXED(13827026969295039449,64,FLEN)
NAN_BOXED(4593945914111192656,64,FLEN)
NAN_BOXED(4597021614536325876,64,FLEN)
NAN_BOXED(13827026969295039449,64,FLEN)
NAN_BOXED(4593945914111192656,64,FLEN)
NAN_BOXED(4597025640131685188,64,FLEN)
NAN_BOXED(13838342986776439956,64,FLEN)
NAN_BOXED(4604969708591652428,64,FLEN)
NAN_BOXED(4597025640131685188,64,FLEN)
NAN_BOXED(13838342986776439956,64,FLEN)
NAN_BOXED(4604969708591652428,64,FLEN)
NAN_BOXED(4597025640131685188,64,FLEN)
NAN_BOXED(13838342986776439956,64,FLEN)
NAN_BOXED(4604969708591652428,64,FLEN)
NAN_BOXED(4597025640131685188,64,FLEN)
NAN_BOXED(13838342986776439956,64,FLEN)
NAN_BOXED(4604969708591652428,64,FLEN)
NAN_BOXED(4597025640131685188,64,FLEN)
NAN_BOXED(13838342986776439956,64,FLEN)
NAN_BOXED(4604969708591652428,64,FLEN)
NAN_BOXED(4597032879809176592,64,FLEN)
NAN_BOXED(13828693587766224737,64,FLEN)
NAN_BOXED(4595408016839853688,64,FLEN)
NAN_BOXED(4597032879809176592,64,FLEN)
NAN_BOXED(13828693587766224737,64,FLEN)
NAN_BOXED(4595408016839853688,64,FLEN)
NAN_BOXED(4597032879809176592,64,FLEN)
NAN_BOXED(13828693587766224737,64,FLEN)
NAN_BOXED(4595408016839853688,64,FLEN)
NAN_BOXED(4597032879809176592,64,FLEN)
NAN_BOXED(13828693587766224737,64,FLEN)
NAN_BOXED(4595408016839853688,64,FLEN)
NAN_BOXED(4597032879809176592,64,FLEN)
NAN_BOXED(13828693587766224737,64,FLEN)
NAN_BOXED(4595408016839853688,64,FLEN)
NAN_BOXED(4597080966316767524,64,FLEN)
NAN_BOXED(13834645851903630199,64,FLEN)
NAN_BOXED(4601222439716670656,64,FLEN)
NAN_BOXED(4597080966316767524,64,FLEN)
NAN_BOXED(13834645851903630199,64,FLEN)
NAN_BOXED(4601222439716670656,64,FLEN)
NAN_BOXED(4597080966316767524,64,FLEN)
NAN_BOXED(13834645851903630199,64,FLEN)
NAN_BOXED(4601222439716670656,64,FLEN)
NAN_BOXED(4597080966316767524,64,FLEN)
NAN_BOXED(13834645851903630199,64,FLEN)
NAN_BOXED(4601222439716670656,64,FLEN)
NAN_BOXED(4597080966316767524,64,FLEN)
NAN_BOXED(13834645851903630199,64,FLEN)
NAN_BOXED(4601222439716670656,64,FLEN)
NAN_BOXED(4597278171238174408,64,FLEN)
NAN_BOXED(13832161039536376418,64,FLEN)
NAN_BOXED(4599173275779388680,64,FLEN)
NAN_BOXED(4597278171238174408,64,FLEN)
NAN_BOXED(13832161039536376418,64,FLEN)
NAN_BOXED(4599173275779388680,64,FLEN)
NAN_BOXED(4597278171238174408,64,FLEN)
NAN_BOXED(13832161039536376418,64,FLEN)
NAN_BOXED(4599173275779388680,64,FLEN)
NAN_BOXED(4597278171238174408,64,FLEN)
NAN_BOXED(13832161039536376418,64,FLEN)
NAN_BOXED(4599173275779388680,64,FLEN)
NAN_BOXED(4597278171238174408,64,FLEN)
NAN_BOXED(13832161039536376418,64,FLEN)
NAN_BOXED(4599173275779388680,64,FLEN)
NAN_BOXED(4597463741843243120,64,FLEN)
NAN_BOXED(13832096997720900523,64,FLEN)
NAN_BOXED(4599240177528187266,64,FLEN)
NAN_BOXED(4597463741843243120,64,FLEN)
NAN_BOXED(13832096997720900523,64,FLEN)
NAN_BOXED(4599240177528187266,64,FLEN)
NAN_BOXED(4597463741843243120,64,FLEN)
NAN_BOXED(13832096997720900523,64,FLEN)
NAN_BOXED(4599240177528187266,64,FLEN)
NAN_BOXED(4597463741843243120,64,FLEN)
NAN_BOXED(13832096997720900523,64,FLEN)
NAN_BOXED(4599240177528187266,64,FLEN)
NAN_BOXED(4597463741843243120,64,FLEN)
NAN_BOXED(13832096997720900523,64,FLEN)
NAN_BOXED(4599240177528187266,64,FLEN)
NAN_BOXED(4597608650440498532,64,FLEN)
NAN_BOXED(13838632170844914293,64,FLEN)
NAN_BOXED(4605744831857412563,64,FLEN)
NAN_BOXED(4597608650440498532,64,FLEN)
NAN_BOXED(13838632170844914293,64,FLEN)
NAN_BOXED(4605744831857412563,64,FLEN)
NAN_BOXED(4597608650440498532,64,FLEN)
NAN_BOXED(13838632170844914293,64,FLEN)
NAN_BOXED(4605744831857412563,64,FLEN)
NAN_BOXED(4597608650440498532,64,FLEN)
NAN_BOXED(13838632170844914293,64,FLEN)
NAN_BOXED(4605744831857412563,64,FLEN)
NAN_BOXED(4597608650440498532,64,FLEN)
NAN_BOXED(13838632170844914293,64,FLEN)
NAN_BOXED(4605744831857412563,64,FLEN)
NAN_BOXED(4597800567635166596,64,FLEN)
NAN_BOXED(13837126650944212871,64,FLEN)
NAN_BOXED(4604474046227079248,64,FLEN)
NAN_BOXED(4597800567635166596,64,FLEN)
NAN_BOXED(13837126650944212871,64,FLEN)
NAN_BOXED(4604474046227079248,64,FLEN)
NAN_BOXED(4597800567635166596,64,FLEN)
NAN_BOXED(13837126650944212871,64,FLEN)
NAN_BOXED(4604474046227079248,64,FLEN)
NAN_BOXED(4597800567635166596,64,FLEN)
NAN_BOXED(13837126650944212871,64,FLEN)
NAN_BOXED(4604474046227079248,64,FLEN)
NAN_BOXED(4597800567635166596,64,FLEN)
NAN_BOXED(13837126650944212871,64,FLEN)
NAN_BOXED(4604474046227079248,64,FLEN)
NAN_BOXED(4597802416290429136,64,FLEN)
NAN_BOXED(13839754039298825134,64,FLEN)
NAN_BOXED(4607178458945733566,64,FLEN)
NAN_BOXED(4597802416290429136,64,FLEN)
NAN_BOXED(13839754039298825134,64,FLEN)
NAN_BOXED(4607178458945733566,64,FLEN)
NAN_BOXED(4597802416290429136,64,FLEN)
NAN_BOXED(13839754039298825134,64,FLEN)
NAN_BOXED(4607178458945733566,64,FLEN)
NAN_BOXED(4597802416290429136,64,FLEN)
NAN_BOXED(13839754039298825134,64,FLEN)
NAN_BOXED(4607178458945733566,64,FLEN)
NAN_BOXED(4597802416290429136,64,FLEN)
NAN_BOXED(13839754039298825134,64,FLEN)
NAN_BOXED(4607178458945733566,64,FLEN)
NAN_BOXED(4597825066127143660,64,FLEN)
NAN_BOXED(13834021724818587647,64,FLEN)
NAN_BOXED(4601332622470545588,64,FLEN)
NAN_BOXED(4597825066127143660,64,FLEN)
NAN_BOXED(13834021724818587647,64,FLEN)
NAN_BOXED(4601332622470545588,64,FLEN)
NAN_BOXED(4597825066127143660,64,FLEN)
NAN_BOXED(13834021724818587647,64,FLEN)
NAN_BOXED(4601332622470545588,64,FLEN)
NAN_BOXED(4597825066127143660,64,FLEN)
NAN_BOXED(13834021724818587647,64,FLEN)
NAN_BOXED(4601332622470545588,64,FLEN)
NAN_BOXED(4597825066127143660,64,FLEN)
NAN_BOXED(13834021724818587647,64,FLEN)
NAN_BOXED(4601332622470545588,64,FLEN)
NAN_BOXED(4598091733496044116,64,FLEN)
NAN_BOXED(13834122547816115132,64,FLEN)
NAN_BOXED(4601668496701511814,64,FLEN)
NAN_BOXED(4598091733496044116,64,FLEN)
NAN_BOXED(13834122547816115132,64,FLEN)
NAN_BOXED(4601668496701511814,64,FLEN)
NAN_BOXED(4598091733496044116,64,FLEN)
NAN_BOXED(13834122547816115132,64,FLEN)
NAN_BOXED(4601668496701511814,64,FLEN)
NAN_BOXED(4598091733496044116,64,FLEN)
NAN_BOXED(13834122547816115132,64,FLEN)
NAN_BOXED(4601668496701511814,64,FLEN)
NAN_BOXED(4598091733496044116,64,FLEN)
NAN_BOXED(13834122547816115132,64,FLEN)
NAN_BOXED(4601668496701511814,64,FLEN)
NAN_BOXED(4598178912095406980,64,FLEN)
NAN_BOXED(13827131432823296070,64,FLEN)
NAN_BOXED(4594756775240532720,64,FLEN)
NAN_BOXED(4598178912095406980,64,FLEN)
NAN_BOXED(13827131432823296070,64,FLEN)
NAN_BOXED(4594756775240532720,64,FLEN)
NAN_BOXED(4598178912095406980,64,FLEN)
NAN_BOXED(13827131432823296070,64,FLEN)
NAN_BOXED(4594756775240532720,64,FLEN)
NAN_BOXED(4598178912095406980,64,FLEN)
NAN_BOXED(13827131432823296070,64,FLEN)
NAN_BOXED(4594756775240532720,64,FLEN)
NAN_BOXED(4598178912095406980,64,FLEN)
NAN_BOXED(13827131432823296070,64,FLEN)
NAN_BOXED(4594756775240532720,64,FLEN)
NAN_BOXED(4598264981970991020,64,FLEN)
NAN_BOXED(13833278212935933684,64,FLEN)
NAN_BOXED(4601043027173093000,64,FLEN)
NAN_BOXED(4598264981970991020,64,FLEN)
NAN_BOXED(13833278212935933684,64,FLEN)
NAN_BOXED(4601043027173093000,64,FLEN)
NAN_BOXED(4598264981970991020,64,FLEN)
NAN_BOXED(13833278212935933684,64,FLEN)
NAN_BOXED(4601043027173093000,64,FLEN)
NAN_BOXED(4598264981970991020,64,FLEN)
NAN_BOXED(13833278212935933684,64,FLEN)
NAN_BOXED(4601043027173093000,64,FLEN)
NAN_BOXED(4598264981970991020,64,FLEN)
NAN_BOXED(13833278212935933684,64,FLEN)
NAN_BOXED(4601043027173093000,64,FLEN)
NAN_BOXED(4598292795228621002,64,FLEN)
NAN_BOXED(13838295107608750705,64,FLEN)
NAN_BOXED(4606117957057081449,64,FLEN)
NAN_BOXED(4598292795228621002,64,FLEN)
NAN_BOXED(13838295107608750705,64,FLEN)
NAN_BOXED(4606117957057081449,64,FLEN)
NAN_BOXED(4598292795228621002,64,FLEN)
NAN_BOXED(13838295107608750705,64,FLEN)
NAN_BOXED(4606117957057081449,64,FLEN)
NAN_BOXED(4598292795228621002,64,FLEN)
NAN_BOXED(13838295107608750705,64,FLEN)
NAN_BOXED(4606117957057081449,64,FLEN)
NAN_BOXED(4598292795228621002,64,FLEN)
NAN_BOXED(13838295107608750705,64,FLEN)
NAN_BOXED(4606117957057081449,64,FLEN)
NAN_BOXED(4598352480740197190,64,FLEN)
NAN_BOXED(13835793028768836118,64,FLEN)
NAN_BOXED(4603619982331294502,64,FLEN)
NAN_BOXED(4598352480740197190,64,FLEN)
NAN_BOXED(13835793028768836118,64,FLEN)
NAN_BOXED(4603619982331294502,64,FLEN)
NAN_BOXED(4598352480740197190,64,FLEN)
NAN_BOXED(13835793028768836118,64,FLEN)
NAN_BOXED(4603619982331294502,64,FLEN)
NAN_BOXED(4598352480740197190,64,FLEN)
NAN_BOXED(13835793028768836118,64,FLEN)
NAN_BOXED(4603619982331294502,64,FLEN)
NAN_BOXED(4598352480740197190,64,FLEN)
NAN_BOXED(13835793028768836118,64,FLEN)
NAN_BOXED(4603619982331294502,64,FLEN)
NAN_BOXED(4598357190645425052,64,FLEN)
NAN_BOXED(13822423359951529842,64,FLEN)
NAN_BOXED(4590261494520343008,64,FLEN)
NAN_BOXED(4598357190645425052,64,FLEN)
NAN_BOXED(13822423359951529842,64,FLEN)
NAN_BOXED(4590261494520343008,64,FLEN)
NAN_BOXED(4598357190645425052,64,FLEN)
NAN_BOXED(13822423359951529842,64,FLEN)
NAN_BOXED(4590261494520343008,64,FLEN)
NAN_BOXED(4598357190645425052,64,FLEN)
NAN_BOXED(13822423359951529842,64,FLEN)
NAN_BOXED(4590261494520343008,64,FLEN)
NAN_BOXED(4598357190645425052,64,FLEN)
NAN_BOXED(13822423359951529842,64,FLEN)
NAN_BOXED(4590261494520343008,64,FLEN)
NAN_BOXED(4598394502464403468,64,FLEN)
NAN_BOXED(13827450003750980479,64,FLEN)
NAN_BOXED(4595358175887550768,64,FLEN)
NAN_BOXED(4598394502464403468,64,FLEN)
NAN_BOXED(13827450003750980479,64,FLEN)
NAN_BOXED(4595358175887550768,64,FLEN)
NAN_BOXED(4598394502464403468,64,FLEN)
NAN_BOXED(13827450003750980479,64,FLEN)
NAN_BOXED(4595358175887550768,64,FLEN)
NAN_BOXED(4598394502464403468,64,FLEN)
NAN_BOXED(13827450003750980479,64,FLEN)
NAN_BOXED(4595358175887550768,64,FLEN)
NAN_BOXED(4598394502464403468,64,FLEN)
NAN_BOXED(13827450003750980479,64,FLEN)
NAN_BOXED(4595358175887550768,64,FLEN)
NAN_BOXED(4598413858210809472,64,FLEN)
NAN_BOXED(13837574499357919289,64,FLEN)
NAN_BOXED(4605567244330183479,64,FLEN)
NAN_BOXED(4598413858210809472,64,FLEN)
NAN_BOXED(13837574499357919289,64,FLEN)
NAN_BOXED(4605567244330183479,64,FLEN)
NAN_BOXED(4598413858210809472,64,FLEN)
NAN_BOXED(13837574499357919289,64,FLEN)
NAN_BOXED(4605567244330183479,64,FLEN)
NAN_BOXED(4598413858210809472,64,FLEN)
NAN_BOXED(13837574499357919289,64,FLEN)
NAN_BOXED(4605567244330183479,64,FLEN)
NAN_BOXED(4598413858210809472,64,FLEN)
NAN_BOXED(13837574499357919289,64,FLEN)
NAN_BOXED(4605567244330183479,64,FLEN)
NAN_BOXED(4598493215032414448,64,FLEN)
NAN_BOXED(13830797079325030580,64,FLEN)
NAN_BOXED(4598752970161616204,64,FLEN)
NAN_BOXED(4598493215032414448,64,FLEN)
NAN_BOXED(13830797079325030580,64,FLEN)
NAN_BOXED(4598752970161616204,64,FLEN)
NAN_BOXED(4598493215032414448,64,FLEN)
NAN_BOXED(13830797079325030580,64,FLEN)
NAN_BOXED(4598752970161616204,64,FLEN)
NAN_BOXED(4598493215032414448,64,FLEN)
NAN_BOXED(13830797079325030580,64,FLEN)
NAN_BOXED(4598752970161616204,64,FLEN)
NAN_BOXED(4598493215032414448,64,FLEN)
NAN_BOXED(13830797079325030580,64,FLEN)
NAN_BOXED(4598752970161616204,64,FLEN)
NAN_BOXED(4598505523929470108,64,FLEN)
NAN_BOXED(13819280487989838425,64,FLEN)
NAN_BOXED(4587395610625217792,64,FLEN)
NAN_BOXED(4598505523929470108,64,FLEN)
NAN_BOXED(13819280487989838425,64,FLEN)
NAN_BOXED(4587395610625217792,64,FLEN)
NAN_BOXED(4598505523929470108,64,FLEN)
NAN_BOXED(13819280487989838425,64,FLEN)
NAN_BOXED(4587395610625217792,64,FLEN)
NAN_BOXED(4598505523929470108,64,FLEN)
NAN_BOXED(13819280487989838425,64,FLEN)
NAN_BOXED(4587395610625217792,64,FLEN)
NAN_BOXED(4598505523929470108,64,FLEN)
NAN_BOXED(13819280487989838425,64,FLEN)
NAN_BOXED(4587395610625217792,64,FLEN)
NAN_BOXED(4598529140766456864,64,FLEN)
NAN_BOXED(13837470472902678272,64,FLEN)
NAN_BOXED(4605634740983720629,64,FLEN)
NAN_BOXED(4598529140766456864,64,FLEN)
NAN_BOXED(13837470472902678272,64,FLEN)
NAN_BOXED(4605634740983720629,64,FLEN)
NAN_BOXED(4598529140766456864,64,FLEN)
NAN_BOXED(13837470472902678272,64,FLEN)
NAN_BOXED(4605634740983720629,64,FLEN)
NAN_BOXED(4598529140766456864,64,FLEN)
NAN_BOXED(13837470472902678272,64,FLEN)
NAN_BOXED(4605634740983720629,64,FLEN)
NAN_BOXED(4598529140766456864,64,FLEN)
NAN_BOXED(13837470472902678272,64,FLEN)
NAN_BOXED(4605634740983720629,64,FLEN)
NAN_BOXED(4598548153569713258,64,FLEN)
NAN_BOXED(13837515031059521069,64,FLEN)
NAN_BOXED(4605712186195421633,64,FLEN)
NAN_BOXED(4598548153569713258,64,FLEN)
NAN_BOXED(13837515031059521069,64,FLEN)
NAN_BOXED(4605712186195421633,64,FLEN)
NAN_BOXED(4598548153569713258,64,FLEN)
NAN_BOXED(13837515031059521069,64,FLEN)
NAN_BOXED(4605712186195421633,64,FLEN)
NAN_BOXED(4598548153569713258,64,FLEN)
NAN_BOXED(13837515031059521069,64,FLEN)
NAN_BOXED(4605712186195421633,64,FLEN)
NAN_BOXED(4598548153569713258,64,FLEN)
NAN_BOXED(13837515031059521069,64,FLEN)
NAN_BOXED(4605712186195421633,64,FLEN)
NAN_BOXED(4598571172708177708,64,FLEN)
NAN_BOXED(13830998945170105530,64,FLEN)
NAN_BOXED(4599054741414365418,64,FLEN)
NAN_BOXED(4598571172708177708,64,FLEN)
NAN_BOXED(13830998945170105530,64,FLEN)
NAN_BOXED(4599054741414365418,64,FLEN)
NAN_BOXED(4598571172708177708,64,FLEN)
NAN_BOXED(13830998945170105530,64,FLEN)
NAN_BOXED(4599054741414365418,64,FLEN)
NAN_BOXED(4598571172708177708,64,FLEN)
NAN_BOXED(13830998945170105530,64,FLEN)
NAN_BOXED(4599054741414365418,64,FLEN)
NAN_BOXED(4598571172708177708,64,FLEN)
NAN_BOXED(13830998945170105530,64,FLEN)
NAN_BOXED(4599054741414365418,64,FLEN)
NAN_BOXED(4598614075006956384,64,FLEN)
NAN_BOXED(13822756109672395000,64,FLEN)
NAN_BOXED(4590933526321128040,64,FLEN)
NAN_BOXED(4598614075006956384,64,FLEN)
NAN_BOXED(13822756109672395000,64,FLEN)
NAN_BOXED(4590933526321128040,64,FLEN)
NAN_BOXED(4598614075006956384,64,FLEN)
NAN_BOXED(13822756109672395000,64,FLEN)
NAN_BOXED(4590933526321128040,64,FLEN)
NAN_BOXED(4598614075006956384,64,FLEN)
NAN_BOXED(13822756109672395000,64,FLEN)
NAN_BOXED(4590933526321128040,64,FLEN)
NAN_BOXED(4598614075006956384,64,FLEN)
NAN_BOXED(13822756109672395000,64,FLEN)
NAN_BOXED(4590933526321128040,64,FLEN)
NAN_BOXED(4598836414457165924,64,FLEN)
NAN_BOXED(13831469970012979749,64,FLEN)
NAN_BOXED(4599886339838862590,64,FLEN)
NAN_BOXED(4598836414457165924,64,FLEN)
NAN_BOXED(13831469970012979749,64,FLEN)
NAN_BOXED(4599886339838862590,64,FLEN)
NAN_BOXED(4598836414457165924,64,FLEN)
NAN_BOXED(13831469970012979749,64,FLEN)
NAN_BOXED(4599886339838862590,64,FLEN)
NAN_BOXED(4598836414457165924,64,FLEN)
NAN_BOXED(13831469970012979749,64,FLEN)
NAN_BOXED(4599886339838862590,64,FLEN)
NAN_BOXED(4598836414457165924,64,FLEN)
NAN_BOXED(13831469970012979749,64,FLEN)
NAN_BOXED(4599886339838862590,64,FLEN)
NAN_BOXED(4598851779719289526,64,FLEN)
NAN_BOXED(13837331031222438263,64,FLEN)
NAN_BOXED(4605969816590096115,64,FLEN)
NAN_BOXED(4598851779719289526,64,FLEN)
NAN_BOXED(13837331031222438263,64,FLEN)
NAN_BOXED(4605969816590096115,64,FLEN)
NAN_BOXED(4598851779719289526,64,FLEN)
NAN_BOXED(13837331031222438263,64,FLEN)
NAN_BOXED(4605969816590096115,64,FLEN)
NAN_BOXED(4598851779719289526,64,FLEN)
NAN_BOXED(13837331031222438263,64,FLEN)
NAN_BOXED(4605969816590096115,64,FLEN)
NAN_BOXED(4598851779719289526,64,FLEN)
NAN_BOXED(13837331031222438263,64,FLEN)
NAN_BOXED(4605969816590096115,64,FLEN)
NAN_BOXED(4598928559768057118,64,FLEN)
NAN_BOXED(13831726517968199726,64,FLEN)
NAN_BOXED(4600296678959816746,64,FLEN)
NAN_BOXED(4598928559768057118,64,FLEN)
NAN_BOXED(13831726517968199726,64,FLEN)
NAN_BOXED(4600296678959816746,64,FLEN)
NAN_BOXED(4598928559768057118,64,FLEN)
NAN_BOXED(13831726517968199726,64,FLEN)
NAN_BOXED(4600296678959816746,64,FLEN)
NAN_BOXED(4598928559768057118,64,FLEN)
NAN_BOXED(13831726517968199726,64,FLEN)
NAN_BOXED(4600296678959816746,64,FLEN)
NAN_BOXED(4598928559768057118,64,FLEN)
NAN_BOXED(13831726517968199726,64,FLEN)
NAN_BOXED(4600296678959816746,64,FLEN)
NAN_BOXED(4598991827827641948,64,FLEN)
NAN_BOXED(13837744510527655085,64,FLEN)
NAN_BOXED(4606669000069983097,64,FLEN)
NAN_BOXED(4598991827827641948,64,FLEN)
NAN_BOXED(13837744510527655085,64,FLEN)
NAN_BOXED(4606669000069983097,64,FLEN)
NAN_BOXED(4598991827827641948,64,FLEN)
NAN_BOXED(13837744510527655085,64,FLEN)
NAN_BOXED(4606669000069983097,64,FLEN)
NAN_BOXED(4598991827827641948,64,FLEN)
NAN_BOXED(13837744510527655085,64,FLEN)
NAN_BOXED(4606669000069983097,64,FLEN)
NAN_BOXED(4598991827827641948,64,FLEN)
NAN_BOXED(13837744510527655085,64,FLEN)
NAN_BOXED(4606669000069983097,64,FLEN)
NAN_BOXED(4599053454795293106,64,FLEN)
NAN_BOXED(13837723290722978448,64,FLEN)
NAN_BOXED(4606742030494837243,64,FLEN)
NAN_BOXED(4599053454795293106,64,FLEN)
NAN_BOXED(13837723290722978448,64,FLEN)
NAN_BOXED(4606742030494837243,64,FLEN)
NAN_BOXED(4599053454795293106,64,FLEN)
NAN_BOXED(13837723290722978448,64,FLEN)
NAN_BOXED(4606742030494837243,64,FLEN)
NAN_BOXED(4599053454795293106,64,FLEN)
NAN_BOXED(13837723290722978448,64,FLEN)
NAN_BOXED(4606742030494837243,64,FLEN)
NAN_BOXED(4599053454795293106,64,FLEN)
NAN_BOXED(13837723290722978448,64,FLEN)
NAN_BOXED(4606742030494837243,64,FLEN)
NAN_BOXED(4599065087746146674,64,FLEN)
NAN_BOXED(13837714310328858974,64,FLEN)
NAN_BOXED(4606749793005306594,64,FLEN)
NAN_BOXED(4599065087746146674,64,FLEN)
NAN_BOXED(13837714310328858974,64,FLEN)
NAN_BOXED(4606749793005306594,64,FLEN)
NAN_BOXED(4599065087746146674,64,FLEN)
NAN_BOXED(13837714310328858974,64,FLEN)
NAN_BOXED(4606749793005306594,64,FLEN)
NAN_BOXED(4599065087746146674,64,FLEN)
NAN_BOXED(13837714310328858974,64,FLEN)
NAN_BOXED(4606749793005306594,64,FLEN)
NAN_BOXED(4599065087746146674,64,FLEN)
NAN_BOXED(13837714310328858974,64,FLEN)
NAN_BOXED(4606749793005306594,64,FLEN)
NAN_BOXED(4599172830150827224,64,FLEN)
NAN_BOXED(13834415397315204235,64,FLEN)
NAN_BOXED(4603283921909312173,64,FLEN)
NAN_BOXED(4599172830150827224,64,FLEN)
NAN_BOXED(13834415397315204235,64,FLEN)
NAN_BOXED(4603283921909312173,64,FLEN)
NAN_BOXED(4599172830150827224,64,FLEN)
NAN_BOXED(13834415397315204235,64,FLEN)
NAN_BOXED(4603283921909312173,64,FLEN)
NAN_BOXED(4599172830150827224,64,FLEN)
NAN_BOXED(13834415397315204235,64,FLEN)
NAN_BOXED(4603283921909312173,64,FLEN)
NAN_BOXED(4599172830150827224,64,FLEN)
NAN_BOXED(13834415397315204235,64,FLEN)
NAN_BOXED(4603283921909312173,64,FLEN)
NAN_BOXED(4599230402402355930,64,FLEN)
NAN_BOXED(13829729528296684159,64,FLEN)
NAN_BOXED(4598721299448206604,64,FLEN)
NAN_BOXED(4599230402402355930,64,FLEN)
NAN_BOXED(13829729528296684159,64,FLEN)
NAN_BOXED(4598721299448206604,64,FLEN)
NAN_BOXED(4599230402402355930,64,FLEN)
NAN_BOXED(13829729528296684159,64,FLEN)
NAN_BOXED(4598721299448206604,64,FLEN)
NAN_BOXED(4599230402402355930,64,FLEN)
NAN_BOXED(13829729528296684159,64,FLEN)
NAN_BOXED(4598721299448206604,64,FLEN)
NAN_BOXED(4599230402402355930,64,FLEN)
NAN_BOXED(13829729528296684159,64,FLEN)
NAN_BOXED(4598721299448206604,64,FLEN)
NAN_BOXED(4599244519272925872,64,FLEN)
NAN_BOXED(13815824504863618860,64,FLEN)
NAN_BOXED(4584979411454647392,64,FLEN)
NAN_BOXED(4599244519272925872,64,FLEN)
NAN_BOXED(13815824504863618860,64,FLEN)
NAN_BOXED(4584979411454647392,64,FLEN)
NAN_BOXED(4599244519272925872,64,FLEN)
NAN_BOXED(13815824504863618860,64,FLEN)
NAN_BOXED(4584979411454647392,64,FLEN)
NAN_BOXED(4599244519272925872,64,FLEN)
NAN_BOXED(13815824504863618860,64,FLEN)
NAN_BOXED(4584979411454647392,64,FLEN)
NAN_BOXED(4599244519272925872,64,FLEN)
NAN_BOXED(13815824504863618860,64,FLEN)
NAN_BOXED(4584979411454647392,64,FLEN)
NAN_BOXED(4599270952768277466,64,FLEN)
NAN_BOXED(13800596149907783783,64,FLEN)
NAN_BOXED(4569693874344713728,64,FLEN)
NAN_BOXED(4599270952768277466,64,FLEN)
NAN_BOXED(13800596149907783783,64,FLEN)
NAN_BOXED(4569693874344713728,64,FLEN)
NAN_BOXED(4599270952768277466,64,FLEN)
NAN_BOXED(13800596149907783783,64,FLEN)
NAN_BOXED(4569693874344713728,64,FLEN)
NAN_BOXED(4599270952768277466,64,FLEN)
NAN_BOXED(13800596149907783783,64,FLEN)
NAN_BOXED(4569693874344713728,64,FLEN)
NAN_BOXED(4599270952768277466,64,FLEN)
NAN_BOXED(13800596149907783783,64,FLEN)
NAN_BOXED(4569693874344713728,64,FLEN)
NAN_BOXED(4599297259884214446,64,FLEN)
NAN_BOXED(13830754920521435313,64,FLEN)
NAN_BOXED(4599547669169881996,64,FLEN)
NAN_BOXED(4599297259884214446,64,FLEN)
NAN_BOXED(13830754920521435313,64,FLEN)
NAN_BOXED(4599547669169881996,64,FLEN)
NAN_BOXED(4599297259884214446,64,FLEN)
NAN_BOXED(13830754920521435313,64,FLEN)
NAN_BOXED(4599547669169881996,64,FLEN)
NAN_BOXED(4599297259884214446,64,FLEN)
NAN_BOXED(13830754920521435313,64,FLEN)
NAN_BOXED(4599547669169881996,64,FLEN)
NAN_BOXED(4599297259884214446,64,FLEN)
NAN_BOXED(13830754920521435313,64,FLEN)
NAN_BOXED(4599547669169881996,64,FLEN)
NAN_BOXED(4599576985039302904,64,FLEN)
NAN_BOXED(13819081486206416795,64,FLEN)
NAN_BOXED(4588738299101734304,64,FLEN)
NAN_BOXED(4599576985039302904,64,FLEN)
NAN_BOXED(13819081486206416795,64,FLEN)
NAN_BOXED(4588738299101734304,64,FLEN)
NAN_BOXED(4599576985039302904,64,FLEN)
NAN_BOXED(13819081486206416795,64,FLEN)
NAN_BOXED(4588738299101734304,64,FLEN)
NAN_BOXED(4599576985039302904,64,FLEN)
NAN_BOXED(13819081486206416795,64,FLEN)
NAN_BOXED(4588738299101734304,64,FLEN)
NAN_BOXED(4599576985039302904,64,FLEN)
NAN_BOXED(13819081486206416795,64,FLEN)
NAN_BOXED(4588738299101734304,64,FLEN)
NAN_BOXED(4599696423284519018,64,FLEN)
NAN_BOXED(13833850435576805194,64,FLEN)
NAN_BOXED(4603392261135929831,64,FLEN)
NAN_BOXED(4599696423284519018,64,FLEN)
NAN_BOXED(13833850435576805194,64,FLEN)
NAN_BOXED(4603392261135929831,64,FLEN)
NAN_BOXED(4599696423284519018,64,FLEN)
NAN_BOXED(13833850435576805194,64,FLEN)
NAN_BOXED(4603392261135929831,64,FLEN)
NAN_BOXED(4599696423284519018,64,FLEN)
NAN_BOXED(13833850435576805194,64,FLEN)
NAN_BOXED(4603392261135929831,64,FLEN)
NAN_BOXED(4599696423284519018,64,FLEN)
NAN_BOXED(13833850435576805194,64,FLEN)
NAN_BOXED(4603392261135929831,64,FLEN)
NAN_BOXED(4599724125542004534,64,FLEN)
NAN_BOXED(13827991008331120063,64,FLEN)
NAN_BOXED(4597827947466578760,64,FLEN)
NAN_BOXED(4599724125542004534,64,FLEN)
NAN_BOXED(13827991008331120063,64,FLEN)
NAN_BOXED(4597827947466578760,64,FLEN)
NAN_BOXED(4599724125542004534,64,FLEN)
NAN_BOXED(13827991008331120063,64,FLEN)
NAN_BOXED(4597827947466578760,64,FLEN)
NAN_BOXED(4599724125542004534,64,FLEN)
NAN_BOXED(13827991008331120063,64,FLEN)
NAN_BOXED(4597827947466578760,64,FLEN)
NAN_BOXED(4599724125542004534,64,FLEN)
NAN_BOXED(13827991008331120063,64,FLEN)
NAN_BOXED(4597827947466578760,64,FLEN)
NAN_BOXED(4599878326578827438,64,FLEN)
NAN_BOXED(13817270337827121557,64,FLEN)
NAN_BOXED(4586679931757224736,64,FLEN)
NAN_BOXED(4599878326578827438,64,FLEN)
NAN_BOXED(13817270337827121557,64,FLEN)
NAN_BOXED(4586679931757224736,64,FLEN)
NAN_BOXED(4599878326578827438,64,FLEN)
NAN_BOXED(13817270337827121557,64,FLEN)
NAN_BOXED(4586679931757224736,64,FLEN)
NAN_BOXED(4599878326578827438,64,FLEN)
NAN_BOXED(13817270337827121557,64,FLEN)
NAN_BOXED(4586679931757224736,64,FLEN)
NAN_BOXED(4599878326578827438,64,FLEN)
NAN_BOXED(13817270337827121557,64,FLEN)
NAN_BOXED(4586679931757224736,64,FLEN)
NAN_BOXED(4599982205141393478,64,FLEN)
NAN_BOXED(13831441930599138427,64,FLEN)
NAN_BOXED(4601225762902603764,64,FLEN)
NAN_BOXED(4599982205141393478,64,FLEN)
NAN_BOXED(13831441930599138427,64,FLEN)
NAN_BOXED(4601225762902603764,64,FLEN)
NAN_BOXED(4599982205141393478,64,FLEN)
NAN_BOXED(13831441930599138427,64,FLEN)
NAN_BOXED(4601225762902603764,64,FLEN)
NAN_BOXED(4599982205141393478,64,FLEN)
NAN_BOXED(13831441930599138427,64,FLEN)
NAN_BOXED(4601225762902603764,64,FLEN)
NAN_BOXED(4599982205141393478,64,FLEN)
NAN_BOXED(13831441930599138427,64,FLEN)
NAN_BOXED(4601225762902603764,64,FLEN)
NAN_BOXED(4600022831304827804,64,FLEN)
NAN_BOXED(13826717461820883297,64,FLEN)
NAN_BOXED(4596459313979686040,64,FLEN)
NAN_BOXED(4600022831304827804,64,FLEN)
NAN_BOXED(13826717461820883297,64,FLEN)
NAN_BOXED(4596459313979686040,64,FLEN)
NAN_BOXED(4600022831304827804,64,FLEN)
NAN_BOXED(13826717461820883297,64,FLEN)
NAN_BOXED(4596459313979686040,64,FLEN)
NAN_BOXED(4600022831304827804,64,FLEN)
NAN_BOXED(13826717461820883297,64,FLEN)
NAN_BOXED(4596459313979686040,64,FLEN)
NAN_BOXED(4600022831304827804,64,FLEN)
NAN_BOXED(13826717461820883297,64,FLEN)
NAN_BOXED(4596459313979686040,64,FLEN)
NAN_BOXED(4600050993548323830,64,FLEN)
NAN_BOXED(13833291586517840136,64,FLEN)
NAN_BOXED(4603303486817838276,64,FLEN)
NAN_BOXED(4600050993548323830,64,FLEN)
NAN_BOXED(13833291586517840136,64,FLEN)
NAN_BOXED(4603303486817838276,64,FLEN)
NAN_BOXED(4600050993548323830,64,FLEN)
NAN_BOXED(13833291586517840136,64,FLEN)
NAN_BOXED(4603303486817838276,64,FLEN)
NAN_BOXED(4600050993548323830,64,FLEN)
NAN_BOXED(13833291586517840136,64,FLEN)
NAN_BOXED(4603303486817838276,64,FLEN)
NAN_BOXED(4600050993548323830,64,FLEN)
NAN_BOXED(13833291586517840136,64,FLEN)
NAN_BOXED(4603303486817838276,64,FLEN)
NAN_BOXED(4600053447153662848,64,FLEN)
NAN_BOXED(13817396778839141779,64,FLEN)
NAN_BOXED(4587043040004330080,64,FLEN)
NAN_BOXED(4600053447153662848,64,FLEN)
NAN_BOXED(13817396778839141779,64,FLEN)
NAN_BOXED(4587043040004330080,64,FLEN)
NAN_BOXED(4600053447153662848,64,FLEN)
NAN_BOXED(13817396778839141779,64,FLEN)
NAN_BOXED(4587043040004330080,64,FLEN)
NAN_BOXED(4600053447153662848,64,FLEN)
NAN_BOXED(13817396778839141779,64,FLEN)
NAN_BOXED(4587043040004330080,64,FLEN)
NAN_BOXED(4600053447153662848,64,FLEN)
NAN_BOXED(13817396778839141779,64,FLEN)
NAN_BOXED(4587043040004330080,64,FLEN)
NAN_BOXED(4600068953859397366,64,FLEN)
NAN_BOXED(13831074699463529342,64,FLEN)
NAN_BOXED(4600807956801677476,64,FLEN)
NAN_BOXED(4600068953859397366,64,FLEN)
NAN_BOXED(13831074699463529342,64,FLEN)
NAN_BOXED(4600807956801677476,64,FLEN)
NAN_BOXED(4600068953859397366,64,FLEN)
NAN_BOXED(13831074699463529342,64,FLEN)
NAN_BOXED(4600807956801677476,64,FLEN)
NAN_BOXED(4600068953859397366,64,FLEN)
NAN_BOXED(13831074699463529342,64,FLEN)
NAN_BOXED(4600807956801677476,64,FLEN)
NAN_BOXED(4600068953859397366,64,FLEN)
NAN_BOXED(13831074699463529342,64,FLEN)
NAN_BOXED(4600807956801677476,64,FLEN)
NAN_BOXED(4600213248465541136,64,FLEN)
NAN_BOXED(13828482126644783187,64,FLEN)
NAN_BOXED(4598708184990361686,64,FLEN)
NAN_BOXED(4600213248465541136,64,FLEN)
NAN_BOXED(13828482126644783187,64,FLEN)
NAN_BOXED(4598708184990361686,64,FLEN)
NAN_BOXED(4600213248465541136,64,FLEN)
NAN_BOXED(13828482126644783187,64,FLEN)
NAN_BOXED(4598708184990361686,64,FLEN)
NAN_BOXED(4600213248465541136,64,FLEN)
NAN_BOXED(13828482126644783187,64,FLEN)
NAN_BOXED(4598708184990361686,64,FLEN)
NAN_BOXED(4600213248465541136,64,FLEN)
NAN_BOXED(13828482126644783187,64,FLEN)
NAN_BOXED(4598708184990361686,64,FLEN)
NAN_BOXED(4600321361993307858,64,FLEN)
NAN_BOXED(13836399299899290744,64,FLEN)
NAN_BOXED(4606805362078505787,64,FLEN)
NAN_BOXED(4600321361993307858,64,FLEN)
NAN_BOXED(13836399299899290744,64,FLEN)
NAN_BOXED(4606805362078505787,64,FLEN)
NAN_BOXED(4600321361993307858,64,FLEN)
NAN_BOXED(13836399299899290744,64,FLEN)
NAN_BOXED(4606805362078505787,64,FLEN)
NAN_BOXED(4600321361993307858,64,FLEN)
NAN_BOXED(13836399299899290744,64,FLEN)
NAN_BOXED(4606805362078505787,64,FLEN)
NAN_BOXED(4600321361993307858,64,FLEN)
NAN_BOXED(13836399299899290744,64,FLEN)
NAN_BOXED(4606805362078505787,64,FLEN)
NAN_BOXED(4600329754335508966,64,FLEN)
NAN_BOXED(13826713480899274911,64,FLEN)
NAN_BOXED(4596805781191457728,64,FLEN)
NAN_BOXED(4600329754335508966,64,FLEN)
NAN_BOXED(13826713480899274911,64,FLEN)
NAN_BOXED(4596805781191457728,64,FLEN)
NAN_BOXED(4600329754335508966,64,FLEN)
NAN_BOXED(13826713480899274911,64,FLEN)
NAN_BOXED(4596805781191457728,64,FLEN)
NAN_BOXED(4600329754335508966,64,FLEN)
NAN_BOXED(13826713480899274911,64,FLEN)
NAN_BOXED(4596805781191457728,64,FLEN)
NAN_BOXED(4600329754335508966,64,FLEN)
NAN_BOXED(13826713480899274911,64,FLEN)
NAN_BOXED(4596805781191457728,64,FLEN)
NAN_BOXED(4600346741873372604,64,FLEN)
NAN_BOXED(13822329115171425522,64,FLEN)
NAN_BOXED(4592498394000346312,64,FLEN)
NAN_BOXED(4600346741873372604,64,FLEN)
NAN_BOXED(13822329115171425522,64,FLEN)
NAN_BOXED(4592498394000346312,64,FLEN)
NAN_BOXED(4600346741873372604,64,FLEN)
NAN_BOXED(13822329115171425522,64,FLEN)
NAN_BOXED(4592498394000346312,64,FLEN)
NAN_BOXED(4600346741873372604,64,FLEN)
NAN_BOXED(13822329115171425522,64,FLEN)
NAN_BOXED(4592498394000346312,64,FLEN)
NAN_BOXED(4600346741873372604,64,FLEN)
NAN_BOXED(13822329115171425522,64,FLEN)
NAN_BOXED(4592498394000346312,64,FLEN)
NAN_BOXED(4600430667749013560,64,FLEN)
NAN_BOXED(13833801289193569278,64,FLEN)
NAN_BOXED(4603991183753486218,64,FLEN)
NAN_BOXED(4600430667749013560,64,FLEN)
NAN_BOXED(13833801289193569278,64,FLEN)
NAN_BOXED(4603991183753486218,64,FLEN)
NAN_BOXED(4600430667749013560,64,FLEN)
NAN_BOXED(13833801289193569278,64,FLEN)
NAN_BOXED(4603991183753486218,64,FLEN)
NAN_BOXED(4600430667749013560,64,FLEN)
NAN_BOXED(13833801289193569278,64,FLEN)
NAN_BOXED(4603991183753486218,64,FLEN)
NAN_BOXED(4600430667749013560,64,FLEN)
NAN_BOXED(13833801289193569278,64,FLEN)
NAN_BOXED(4603991183753486218,64,FLEN)
NAN_BOXED(4600449769860696008,64,FLEN)
NAN_BOXED(13826940504603458366,64,FLEN)
NAN_BOXED(4597285137269407296,64,FLEN)
NAN_BOXED(4600449769860696008,64,FLEN)
NAN_BOXED(13826940504603458366,64,FLEN)
NAN_BOXED(4597285137269407296,64,FLEN)
NAN_BOXED(4600449769860696008,64,FLEN)
NAN_BOXED(13826940504603458366,64,FLEN)
NAN_BOXED(4597285137269407296,64,FLEN)
NAN_BOXED(4600449769860696008,64,FLEN)
NAN_BOXED(13826940504603458366,64,FLEN)
NAN_BOXED(4597285137269407296,64,FLEN)
NAN_BOXED(4600449769860696008,64,FLEN)
NAN_BOXED(13826940504603458366,64,FLEN)
NAN_BOXED(4597285137269407296,64,FLEN)
NAN_BOXED(4600464819063413056,64,FLEN)
NAN_BOXED(13827714815379705861,64,FLEN)
NAN_BOXED(4598323171993696292,64,FLEN)
NAN_BOXED(4600464819063413056,64,FLEN)
NAN_BOXED(13827714815379705861,64,FLEN)
NAN_BOXED(4598323171993696292,64,FLEN)
NAN_BOXED(4600464819063413056,64,FLEN)
NAN_BOXED(13827714815379705861,64,FLEN)
NAN_BOXED(4598323171993696292,64,FLEN)
NAN_BOXED(4600464819063413056,64,FLEN)
NAN_BOXED(13827714815379705861,64,FLEN)
NAN_BOXED(4598323171993696292,64,FLEN)
NAN_BOXED(4600464819063413056,64,FLEN)
NAN_BOXED(13827714815379705861,64,FLEN)
NAN_BOXED(4598323171993696292,64,FLEN)
NAN_BOXED(4600473765888622050,64,FLEN)
NAN_BOXED(13836258199559763195,64,FLEN)
NAN_BOXED(4606790039207618588,64,FLEN)
NAN_BOXED(4600473765888622050,64,FLEN)
NAN_BOXED(13836258199559763195,64,FLEN)
NAN_BOXED(4606790039207618588,64,FLEN)
NAN_BOXED(4600473765888622050,64,FLEN)
NAN_BOXED(13836258199559763195,64,FLEN)
NAN_BOXED(4606790039207618588,64,FLEN)
NAN_BOXED(4600473765888622050,64,FLEN)
NAN_BOXED(13836258199559763195,64,FLEN)
NAN_BOXED(4606790039207618588,64,FLEN)
NAN_BOXED(4600473765888622050,64,FLEN)
NAN_BOXED(13836258199559763195,64,FLEN)
NAN_BOXED(4606790039207618588,64,FLEN)
NAN_BOXED(4600526722203407494,64,FLEN)
NAN_BOXED(13832812802930595890,64,FLEN)
NAN_BOXED(4603321529331415995,64,FLEN)
NAN_BOXED(4600526722203407494,64,FLEN)
NAN_BOXED(13832812802930595890,64,FLEN)
NAN_BOXED(4603321529331415995,64,FLEN)
NAN_BOXED(4600526722203407494,64,FLEN)
NAN_BOXED(13832812802930595890,64,FLEN)
NAN_BOXED(4603321529331415995,64,FLEN)
NAN_BOXED(4600526722203407494,64,FLEN)
NAN_BOXED(13832812802930595890,64,FLEN)
NAN_BOXED(4603321529331415995,64,FLEN)
NAN_BOXED(4600526722203407494,64,FLEN)
NAN_BOXED(13832812802930595890,64,FLEN)
NAN_BOXED(4603321529331415995,64,FLEN)
NAN_BOXED(4600562982663027198,64,FLEN)
NAN_BOXED(13835694990126045191,64,FLEN)
NAN_BOXED(4606041213567014363,64,FLEN)
NAN_BOXED(4600562982663027198,64,FLEN)
NAN_BOXED(13835694990126045191,64,FLEN)
NAN_BOXED(4606041213567014363,64,FLEN)
NAN_BOXED(4600562982663027198,64,FLEN)
NAN_BOXED(13835694990126045191,64,FLEN)
NAN_BOXED(4606041213567014363,64,FLEN)
NAN_BOXED(4600562982663027198,64,FLEN)
NAN_BOXED(13835694990126045191,64,FLEN)
NAN_BOXED(4606041213567014363,64,FLEN)
NAN_BOXED(4600562982663027198,64,FLEN)
NAN_BOXED(13835694990126045191,64,FLEN)
NAN_BOXED(4606041213567014363,64,FLEN)
NAN_BOXED(4600604136221655726,64,FLEN)
NAN_BOXED(13835582547616465800,64,FLEN)
NAN_BOXED(4605915101503078377,64,FLEN)
NAN_BOXED(4600604136221655726,64,FLEN)
NAN_BOXED(13835582547616465800,64,FLEN)
NAN_BOXED(4605915101503078377,64,FLEN)
NAN_BOXED(4600604136221655726,64,FLEN)
NAN_BOXED(13835582547616465800,64,FLEN)
NAN_BOXED(4605915101503078377,64,FLEN)
NAN_BOXED(4600604136221655726,64,FLEN)
NAN_BOXED(13835582547616465800,64,FLEN)
NAN_BOXED(4605915101503078377,64,FLEN)
NAN_BOXED(4600604136221655726,64,FLEN)
NAN_BOXED(13835582547616465800,64,FLEN)
NAN_BOXED(4605915101503078377,64,FLEN)
NAN_BOXED(4600629548581355136,64,FLEN)
NAN_BOXED(13833645361340358889,64,FLEN)
NAN_BOXED(4604041862960962176,64,FLEN)
NAN_BOXED(4600629548581355136,64,FLEN)
NAN_BOXED(13833645361340358889,64,FLEN)
NAN_BOXED(4604041862960962176,64,FLEN)
NAN_BOXED(4600629548581355136,64,FLEN)
NAN_BOXED(13833645361340358889,64,FLEN)
NAN_BOXED(4604041862960962176,64,FLEN)
NAN_BOXED(4600629548581355136,64,FLEN)
NAN_BOXED(13833645361340358889,64,FLEN)
NAN_BOXED(4604041862960962176,64,FLEN)
NAN_BOXED(4600629548581355136,64,FLEN)
NAN_BOXED(13833645361340358889,64,FLEN)
NAN_BOXED(4604041862960962176,64,FLEN)
NAN_BOXED(4600633030377653454,64,FLEN)
NAN_BOXED(13835829018297829707,64,FLEN)
NAN_BOXED(4606328341179507142,64,FLEN)
NAN_BOXED(4600633030377653454,64,FLEN)
NAN_BOXED(13835829018297829707,64,FLEN)
NAN_BOXED(4606328341179507142,64,FLEN)
NAN_BOXED(4600633030377653454,64,FLEN)
NAN_BOXED(13835829018297829707,64,FLEN)
NAN_BOXED(4606328341179507142,64,FLEN)
NAN_BOXED(4600633030377653454,64,FLEN)
NAN_BOXED(13835829018297829707,64,FLEN)
NAN_BOXED(4606328341179507142,64,FLEN)
NAN_BOXED(4600633030377653454,64,FLEN)
NAN_BOXED(13835829018297829707,64,FLEN)
NAN_BOXED(4606328341179507142,64,FLEN)
NAN_BOXED(4600664918393132886,64,FLEN)
NAN_BOXED(13830805381231801432,64,FLEN)
NAN_BOXED(4601054561700771130,64,FLEN)
NAN_BOXED(4600664918393132886,64,FLEN)
NAN_BOXED(13830805381231801432,64,FLEN)
NAN_BOXED(4601054561700771130,64,FLEN)
NAN_BOXED(4600664918393132886,64,FLEN)
NAN_BOXED(13830805381231801432,64,FLEN)
NAN_BOXED(4601054561700771130,64,FLEN)
NAN_BOXED(4600664918393132886,64,FLEN)
NAN_BOXED(13830805381231801432,64,FLEN)
NAN_BOXED(4601054561700771130,64,FLEN)
NAN_BOXED(4600664918393132886,64,FLEN)
NAN_BOXED(13830805381231801432,64,FLEN)
NAN_BOXED(4601054561700771130,64,FLEN)
NAN_BOXED(4600682327735621584,64,FLEN)
NAN_BOXED(13820123379334163206,64,FLEN)
NAN_BOXED(4590566860994509632,64,FLEN)
NAN_BOXED(4600682327735621584,64,FLEN)
NAN_BOXED(13820123379334163206,64,FLEN)
NAN_BOXED(4590566860994509632,64,FLEN)
NAN_BOXED(4600682327735621584,64,FLEN)
NAN_BOXED(13820123379334163206,64,FLEN)
NAN_BOXED(4590566860994509632,64,FLEN)
NAN_BOXED(4600682327735621584,64,FLEN)
NAN_BOXED(13820123379334163206,64,FLEN)
NAN_BOXED(4590566860994509632,64,FLEN)
NAN_BOXED(4600682327735621584,64,FLEN)
NAN_BOXED(13820123379334163206,64,FLEN)
NAN_BOXED(4590566860994509632,64,FLEN)
NAN_BOXED(4600722277276187212,64,FLEN)
NAN_BOXED(13833517353822818128,64,FLEN)
NAN_BOXED(4604019846285823579,64,FLEN)
NAN_BOXED(4600722277276187212,64,FLEN)
NAN_BOXED(13833517353822818128,64,FLEN)
NAN_BOXED(4604019846285823579,64,FLEN)
NAN_BOXED(4600722277276187212,64,FLEN)
NAN_BOXED(13833517353822818128,64,FLEN)
NAN_BOXED(4604019846285823579,64,FLEN)
NAN_BOXED(4600722277276187212,64,FLEN)
NAN_BOXED(13833517353822818128,64,FLEN)
NAN_BOXED(4604019846285823579,64,FLEN)
NAN_BOXED(4600722277276187212,64,FLEN)
NAN_BOXED(13833517353822818128,64,FLEN)
NAN_BOXED(4604019846285823579,64,FLEN)
NAN_BOXED(4600732586955728108,64,FLEN)
NAN_BOXED(13832087276008619245,64,FLEN)
NAN_BOXED(4602907318981318652,64,FLEN)
NAN_BOXED(4600732586955728108,64,FLEN)
NAN_BOXED(13832087276008619245,64,FLEN)
NAN_BOXED(4602907318981318652,64,FLEN)
NAN_BOXED(4600732586955728108,64,FLEN)
NAN_BOXED(13832087276008619245,64,FLEN)
NAN_BOXED(4602907318981318652,64,FLEN)
NAN_BOXED(4600732586955728108,64,FLEN)
NAN_BOXED(13832087276008619245,64,FLEN)
NAN_BOXED(4602907318981318652,64,FLEN)
NAN_BOXED(4600732586955728108,64,FLEN)
NAN_BOXED(13832087276008619245,64,FLEN)
NAN_BOXED(4602907318981318652,64,FLEN)
NAN_BOXED(4600873458863545986,64,FLEN)
NAN_BOXED(13831800805401063605,64,FLEN)
NAN_BOXED(4602772676331052430,64,FLEN)
NAN_BOXED(4600873458863545986,64,FLEN)
NAN_BOXED(13831800805401063605,64,FLEN)
NAN_BOXED(4602772676331052430,64,FLEN)
NAN_BOXED(4600873458863545986,64,FLEN)
NAN_BOXED(13831800805401063605,64,FLEN)
NAN_BOXED(4602772676331052430,64,FLEN)
NAN_BOXED(4600873458863545986,64,FLEN)
NAN_BOXED(13831800805401063605,64,FLEN)
NAN_BOXED(4602772676331052430,64,FLEN)
NAN_BOXED(4600873458863545986,64,FLEN)
NAN_BOXED(13831800805401063605,64,FLEN)
NAN_BOXED(4602772676331052430,64,FLEN)
NAN_BOXED(4600950560251716270,64,FLEN)
NAN_BOXED(13830911996354357232,64,FLEN)
NAN_BOXED(4601528435203836472,64,FLEN)
NAN_BOXED(4600950560251716270,64,FLEN)
NAN_BOXED(13830911996354357232,64,FLEN)
NAN_BOXED(4601528435203836472,64,FLEN)
NAN_BOXED(4600950560251716270,64,FLEN)
NAN_BOXED(13830911996354357232,64,FLEN)
NAN_BOXED(4601528435203836472,64,FLEN)
NAN_BOXED(4600950560251716270,64,FLEN)
NAN_BOXED(13830911996354357232,64,FLEN)
NAN_BOXED(4601528435203836472,64,FLEN)
NAN_BOXED(4600950560251716270,64,FLEN)
NAN_BOXED(13830911996354357232,64,FLEN)
NAN_BOXED(4601528435203836472,64,FLEN)
NAN_BOXED(4600952860044138210,64,FLEN)
NAN_BOXED(13834298099236223641,64,FLEN)
NAN_BOXED(4604842126369960045,64,FLEN)
NAN_BOXED(4600952860044138210,64,FLEN)
NAN_BOXED(13834298099236223641,64,FLEN)
NAN_BOXED(4604842126369960045,64,FLEN)
NAN_BOXED(4600952860044138210,64,FLEN)
NAN_BOXED(13834298099236223641,64,FLEN)
NAN_BOXED(4604842126369960045,64,FLEN)
NAN_BOXED(4600952860044138210,64,FLEN)
NAN_BOXED(13834298099236223641,64,FLEN)
NAN_BOXED(4604842126369960045,64,FLEN)
NAN_BOXED(4600952860044138210,64,FLEN)
NAN_BOXED(13834298099236223641,64,FLEN)
NAN_BOXED(4604842126369960045,64,FLEN)
NAN_BOXED(4600985929432119990,64,FLEN)
NAN_BOXED(13834496399082922990,64,FLEN)
NAN_BOXED(4605033435309853340,64,FLEN)
NAN_BOXED(4600985929432119990,64,FLEN)
NAN_BOXED(13834496399082922990,64,FLEN)
NAN_BOXED(4605033435309853340,64,FLEN)
NAN_BOXED(4600985929432119990,64,FLEN)
NAN_BOXED(13834496399082922990,64,FLEN)
NAN_BOXED(4605033435309853340,64,FLEN)
NAN_BOXED(4600985929432119990,64,FLEN)
NAN_BOXED(13834496399082922990,64,FLEN)
NAN_BOXED(4605033435309853340,64,FLEN)
NAN_BOXED(4600985929432119990,64,FLEN)
NAN_BOXED(13834496399082922990,64,FLEN)
NAN_BOXED(4605033435309853340,64,FLEN)
NAN_BOXED(4600986182313038986,64,FLEN)
NAN_BOXED(13824750246207559529,64,FLEN)
NAN_BOXED(4595426384037225728,64,FLEN)
NAN_BOXED(4600986182313038986,64,FLEN)
NAN_BOXED(13824750246207559529,64,FLEN)
NAN_BOXED(4595426384037225728,64,FLEN)
NAN_BOXED(4600986182313038986,64,FLEN)
NAN_BOXED(13824750246207559529,64,FLEN)
NAN_BOXED(4595426384037225728,64,FLEN)
NAN_BOXED(4600986182313038986,64,FLEN)
NAN_BOXED(13824750246207559529,64,FLEN)
NAN_BOXED(4595426384037225728,64,FLEN)
NAN_BOXED(4600986182313038986,64,FLEN)
NAN_BOXED(13824750246207559529,64,FLEN)
NAN_BOXED(4595426384037225728,64,FLEN)
NAN_BOXED(4601010202904244404,64,FLEN)
NAN_BOXED(13830768577065771012,64,FLEN)
NAN_BOXED(4601359112193174668,64,FLEN)
NAN_BOXED(4601010202904244404,64,FLEN)
NAN_BOXED(13830768577065771012,64,FLEN)
NAN_BOXED(4601359112193174668,64,FLEN)
NAN_BOXED(4601010202904244404,64,FLEN)
NAN_BOXED(13830768577065771012,64,FLEN)
NAN_BOXED(4601359112193174668,64,FLEN)
NAN_BOXED(4601010202904244404,64,FLEN)
NAN_BOXED(13830768577065771012,64,FLEN)
NAN_BOXED(4601359112193174668,64,FLEN)
NAN_BOXED(4601010202904244404,64,FLEN)
NAN_BOXED(13830768577065771012,64,FLEN)
NAN_BOXED(4601359112193174668,64,FLEN)
NAN_BOXED(4601221522100030222,64,FLEN)
NAN_BOXED(13815205959793367497,64,FLEN)
NAN_BOXED(4586170351783712384,64,FLEN)
NAN_BOXED(4601221522100030222,64,FLEN)
NAN_BOXED(13815205959793367497,64,FLEN)
NAN_BOXED(4586170351783712384,64,FLEN)
NAN_BOXED(4601221522100030222,64,FLEN)
NAN_BOXED(13815205959793367497,64,FLEN)
NAN_BOXED(4586170351783712384,64,FLEN)
NAN_BOXED(4601221522100030222,64,FLEN)
NAN_BOXED(13815205959793367497,64,FLEN)
NAN_BOXED(4586170351783712384,64,FLEN)
NAN_BOXED(4601221522100030222,64,FLEN)
NAN_BOXED(13815205959793367497,64,FLEN)
NAN_BOXED(4586170351783712384,64,FLEN)
NAN_BOXED(4601323132862438498,64,FLEN)
NAN_BOXED(13827011288282697409,64,FLEN)
NAN_BOXED(4598313252627140414,64,FLEN)
NAN_BOXED(4601323132862438498,64,FLEN)
NAN_BOXED(13827011288282697409,64,FLEN)
NAN_BOXED(4598313252627140414,64,FLEN)
NAN_BOXED(4601323132862438498,64,FLEN)
NAN_BOXED(13827011288282697409,64,FLEN)
NAN_BOXED(4598313252627140414,64,FLEN)
NAN_BOXED(4601323132862438498,64,FLEN)
NAN_BOXED(13827011288282697409,64,FLEN)
NAN_BOXED(4598313252627140414,64,FLEN)
NAN_BOXED(4601323132862438498,64,FLEN)
NAN_BOXED(13827011288282697409,64,FLEN)
NAN_BOXED(4598313252627140414,64,FLEN)
NAN_BOXED(4601689993207469724,64,FLEN)
NAN_BOXED(13829219147880040446,64,FLEN)
NAN_BOXED(4600501277837507324,64,FLEN)
NAN_BOXED(4601689993207469724,64,FLEN)
NAN_BOXED(13829219147880040446,64,FLEN)
NAN_BOXED(4600501277837507324,64,FLEN)
NAN_BOXED(4601689993207469724,64,FLEN)
NAN_BOXED(13829219147880040446,64,FLEN)
NAN_BOXED(4600501277837507324,64,FLEN)
NAN_BOXED(4601689993207469724,64,FLEN)
NAN_BOXED(13829219147880040446,64,FLEN)
NAN_BOXED(4600501277837507324,64,FLEN)
NAN_BOXED(4601689993207469724,64,FLEN)
NAN_BOXED(13829219147880040446,64,FLEN)
NAN_BOXED(4600501277837507324,64,FLEN)
NAN_BOXED(4601806629045850442,64,FLEN)
NAN_BOXED(13805663667672267817,64,FLEN)
NAN_BOXED(4577145604369079552,64,FLEN)
NAN_BOXED(4601806629045850442,64,FLEN)
NAN_BOXED(13805663667672267817,64,FLEN)
NAN_BOXED(4577145604369079552,64,FLEN)
NAN_BOXED(4601806629045850442,64,FLEN)
NAN_BOXED(13805663667672267817,64,FLEN)
NAN_BOXED(4577145604369079552,64,FLEN)
NAN_BOXED(4601806629045850442,64,FLEN)
NAN_BOXED(13805663667672267817,64,FLEN)
NAN_BOXED(4577145604369079552,64,FLEN)
NAN_BOXED(4601806629045850442,64,FLEN)
NAN_BOXED(13805663667672267817,64,FLEN)
NAN_BOXED(4577145604369079552,64,FLEN)
NAN_BOXED(4601864192522590456,64,FLEN)
NAN_BOXED(13832592928568975876,64,FLEN)
NAN_BOXED(4604125615752352277,64,FLEN)
NAN_BOXED(4601864192522590456,64,FLEN)
NAN_BOXED(13832592928568975876,64,FLEN)
NAN_BOXED(4604125615752352277,64,FLEN)
NAN_BOXED(4601864192522590456,64,FLEN)
NAN_BOXED(13832592928568975876,64,FLEN)
NAN_BOXED(4604125615752352277,64,FLEN)
NAN_BOXED(4601864192522590456,64,FLEN)
NAN_BOXED(13832592928568975876,64,FLEN)
NAN_BOXED(4604125615752352277,64,FLEN)
NAN_BOXED(4601864192522590456,64,FLEN)
NAN_BOXED(13832592928568975876,64,FLEN)
NAN_BOXED(4604125615752352277,64,FLEN)
NAN_BOXED(4601865576498032398,64,FLEN)
NAN_BOXED(13832858391847492361,64,FLEN)
NAN_BOXED(4604368116066128429,64,FLEN)
NAN_BOXED(4601865576498032398,64,FLEN)
NAN_BOXED(13832858391847492361,64,FLEN)
NAN_BOXED(4604368116066128429,64,FLEN)
NAN_BOXED(4601865576498032398,64,FLEN)
NAN_BOXED(13832858391847492361,64,FLEN)
NAN_BOXED(4604368116066128429,64,FLEN)
NAN_BOXED(4601865576498032398,64,FLEN)
NAN_BOXED(13832858391847492361,64,FLEN)
NAN_BOXED(4604368116066128429,64,FLEN)
NAN_BOXED(4601865576498032398,64,FLEN)
NAN_BOXED(13832858391847492361,64,FLEN)
NAN_BOXED(4604368116066128429,64,FLEN)
NAN_BOXED(4601890493615253516,64,FLEN)
NAN_BOXED(13829958627261708176,64,FLEN)
NAN_BOXED(4601346813147045606,64,FLEN)
NAN_BOXED(4601890493615253516,64,FLEN)
NAN_BOXED(13829958627261708176,64,FLEN)
NAN_BOXED(4601346813147045606,64,FLEN)
NAN_BOXED(4601890493615253516,64,FLEN)
NAN_BOXED(13829958627261708176,64,FLEN)
NAN_BOXED(4601346813147045606,64,FLEN)
NAN_BOXED(4601890493615253516,64,FLEN)
NAN_BOXED(13829958627261708176,64,FLEN)
NAN_BOXED(4601346813147045606,64,FLEN)
NAN_BOXED(4601890493615253516,64,FLEN)
NAN_BOXED(13829958627261708176,64,FLEN)
NAN_BOXED(4601346813147045606,64,FLEN)
NAN_BOXED(4601972231973483868,64,FLEN)
NAN_BOXED(13827844984016728792,64,FLEN)
NAN_BOXED(4599475310088323372,64,FLEN)
NAN_BOXED(4601972231973483868,64,FLEN)
NAN_BOXED(13827844984016728792,64,FLEN)
NAN_BOXED(4599475310088323372,64,FLEN)
NAN_BOXED(4601972231973483868,64,FLEN)
NAN_BOXED(13827844984016728792,64,FLEN)
NAN_BOXED(4599475310088323372,64,FLEN)
NAN_BOXED(4601972231973483868,64,FLEN)
NAN_BOXED(13827844984016728792,64,FLEN)
NAN_BOXED(4599475310088323372,64,FLEN)
NAN_BOXED(4601972231973483868,64,FLEN)
NAN_BOXED(13827844984016728792,64,FLEN)
NAN_BOXED(4599475310088323372,64,FLEN)
NAN_BOXED(4602075374293480906,64,FLEN)
NAN_BOXED(13832459921360715201,64,FLEN)
NAN_BOXED(4604154904163628009,64,FLEN)
NAN_BOXED(4602075374293480906,64,FLEN)
NAN_BOXED(13832459921360715201,64,FLEN)
NAN_BOXED(4604154904163628009,64,FLEN)
NAN_BOXED(4602075374293480906,64,FLEN)
NAN_BOXED(13832459921360715201,64,FLEN)
NAN_BOXED(4604154904163628009,64,FLEN)
NAN_BOXED(4602075374293480906,64,FLEN)
NAN_BOXED(13832459921360715201,64,FLEN)
NAN_BOXED(4604154904163628009,64,FLEN)
NAN_BOXED(4602075374293480906,64,FLEN)
NAN_BOXED(13832459921360715201,64,FLEN)
NAN_BOXED(4604154904163628009,64,FLEN)
NAN_BOXED(4602233830730771280,64,FLEN)
NAN_BOXED(13825548584612787502,64,FLEN)
NAN_BOXED(4597252773725612764,64,FLEN)
NAN_BOXED(4602233830730771280,64,FLEN)
NAN_BOXED(13825548584612787502,64,FLEN)
NAN_BOXED(4597252773725612764,64,FLEN)
NAN_BOXED(4602233830730771280,64,FLEN)
NAN_BOXED(13825548584612787502,64,FLEN)
NAN_BOXED(4597252773725612764,64,FLEN)
NAN_BOXED(4602233830730771280,64,FLEN)
NAN_BOXED(13825548584612787502,64,FLEN)
NAN_BOXED(4597252773725612764,64,FLEN)
NAN_BOXED(4602233830730771280,64,FLEN)
NAN_BOXED(13825548584612787502,64,FLEN)
NAN_BOXED(4597252773725612764,64,FLEN)
NAN_BOXED(4602337627163228182,64,FLEN)
NAN_BOXED(13832135917397217819,64,FLEN)
NAN_BOXED(4604029779262173821,64,FLEN)
NAN_BOXED(4602337627163228182,64,FLEN)
NAN_BOXED(13832135917397217819,64,FLEN)
NAN_BOXED(4604029779262173821,64,FLEN)
NAN_BOXED(4602337627163228182,64,FLEN)
NAN_BOXED(13832135917397217819,64,FLEN)
NAN_BOXED(4604029779262173821,64,FLEN)
NAN_BOXED(4602337627163228182,64,FLEN)
NAN_BOXED(13832135917397217819,64,FLEN)
NAN_BOXED(4604029779262173821,64,FLEN)
NAN_BOXED(4602337627163228182,64,FLEN)
NAN_BOXED(13832135917397217819,64,FLEN)
NAN_BOXED(4604029779262173821,64,FLEN)
NAN_BOXED(4602352048243833202,64,FLEN)
NAN_BOXED(13830345087020777464,64,FLEN)
NAN_BOXED(4602150275265366624,64,FLEN)
NAN_BOXED(4602352048243833202,64,FLEN)
NAN_BOXED(13830345087020777464,64,FLEN)
NAN_BOXED(4602150275265366624,64,FLEN)
NAN_BOXED(4602352048243833202,64,FLEN)
NAN_BOXED(13830345087020777464,64,FLEN)
NAN_BOXED(4602150275265366624,64,FLEN)
NAN_BOXED(4602352048243833202,64,FLEN)
NAN_BOXED(13830345087020777464,64,FLEN)
NAN_BOXED(4602150275265366624,64,FLEN)
NAN_BOXED(4602352048243833202,64,FLEN)
NAN_BOXED(13830345087020777464,64,FLEN)
NAN_BOXED(4602150275265366624,64,FLEN)
NAN_BOXED(4602372651761204534,64,FLEN)
NAN_BOXED(13834127604584370474,64,FLEN)
NAN_BOXED(4605977428022826008,64,FLEN)
NAN_BOXED(4602372651761204534,64,FLEN)
NAN_BOXED(13834127604584370474,64,FLEN)
NAN_BOXED(4605977428022826008,64,FLEN)
NAN_BOXED(4602372651761204534,64,FLEN)
NAN_BOXED(13834127604584370474,64,FLEN)
NAN_BOXED(4605977428022826008,64,FLEN)
NAN_BOXED(4602372651761204534,64,FLEN)
NAN_BOXED(13834127604584370474,64,FLEN)
NAN_BOXED(4605977428022826008,64,FLEN)
NAN_BOXED(4602372651761204534,64,FLEN)
NAN_BOXED(13834127604584370474,64,FLEN)
NAN_BOXED(4605977428022826008,64,FLEN)
NAN_BOXED(4602573541163767926,64,FLEN)
NAN_BOXED(13819071129867085767,64,FLEN)
NAN_BOXED(4591119156855398344,64,FLEN)
NAN_BOXED(4602573541163767926,64,FLEN)
NAN_BOXED(13819071129867085767,64,FLEN)
NAN_BOXED(4591119156855398344,64,FLEN)
NAN_BOXED(4602573541163767926,64,FLEN)
NAN_BOXED(13819071129867085767,64,FLEN)
NAN_BOXED(4591119156855398344,64,FLEN)
NAN_BOXED(4602573541163767926,64,FLEN)
NAN_BOXED(13819071129867085767,64,FLEN)
NAN_BOXED(4591119156855398344,64,FLEN)
NAN_BOXED(4602573541163767926,64,FLEN)
NAN_BOXED(13819071129867085767,64,FLEN)
NAN_BOXED(4591119156855398344,64,FLEN)
NAN_BOXED(4602684921994502072,64,FLEN)
NAN_BOXED(13832001246278983121,64,FLEN)
NAN_BOXED(4604133673162739340,64,FLEN)
NAN_BOXED(4602684921994502072,64,FLEN)
NAN_BOXED(13832001246278983121,64,FLEN)
NAN_BOXED(4604133673162739340,64,FLEN)
NAN_BOXED(4602684921994502072,64,FLEN)
NAN_BOXED(13832001246278983121,64,FLEN)
NAN_BOXED(4604133673162739340,64,FLEN)
NAN_BOXED(4602684921994502072,64,FLEN)
NAN_BOXED(13832001246278983121,64,FLEN)
NAN_BOXED(4604133673162739340,64,FLEN)
NAN_BOXED(4602684921994502072,64,FLEN)
NAN_BOXED(13832001246278983121,64,FLEN)
NAN_BOXED(4604133673162739340,64,FLEN)
NAN_BOXED(4602699698553993825,64,FLEN)
NAN_BOXED(13832051222543269007,64,FLEN)
NAN_BOXED(4604203404684240130,64,FLEN)
NAN_BOXED(4602699698553993825,64,FLEN)
NAN_BOXED(13832051222543269007,64,FLEN)
NAN_BOXED(4604203404684240130,64,FLEN)
NAN_BOXED(4602699698553993825,64,FLEN)
NAN_BOXED(13832051222543269007,64,FLEN)
NAN_BOXED(4604203404684240130,64,FLEN)
NAN_BOXED(4602699698553993825,64,FLEN)
NAN_BOXED(13832051222543269007,64,FLEN)
NAN_BOXED(4604203404684240130,64,FLEN)
NAN_BOXED(4602699698553993825,64,FLEN)
NAN_BOXED(13832051222543269007,64,FLEN)
NAN_BOXED(4604203404684240130,64,FLEN)
NAN_BOXED(4602785473432035579,64,FLEN)
NAN_BOXED(13826307332629760245,64,FLEN)
NAN_BOXED(4598544424286640262,64,FLEN)
NAN_BOXED(4602785473432035579,64,FLEN)
NAN_BOXED(13826307332629760245,64,FLEN)
NAN_BOXED(4598544424286640262,64,FLEN)
NAN_BOXED(4602785473432035579,64,FLEN)
NAN_BOXED(13826307332629760245,64,FLEN)
NAN_BOXED(4598544424286640262,64,FLEN)
NAN_BOXED(4602785473432035579,64,FLEN)
NAN_BOXED(13826307332629760245,64,FLEN)
NAN_BOXED(4598544424286640262,64,FLEN)
NAN_BOXED(4602785473432035579,64,FLEN)
NAN_BOXED(13826307332629760245,64,FLEN)
NAN_BOXED(4598544424286640262,64,FLEN)
NAN_BOXED(4602800055803357629,64,FLEN)
NAN_BOXED(13829065441496693137,64,FLEN)
NAN_BOXED(4601392194104517616,64,FLEN)
NAN_BOXED(4602800055803357629,64,FLEN)
NAN_BOXED(13829065441496693137,64,FLEN)
NAN_BOXED(4601392194104517616,64,FLEN)
NAN_BOXED(4602800055803357629,64,FLEN)
NAN_BOXED(13829065441496693137,64,FLEN)
NAN_BOXED(4601392194104517616,64,FLEN)
NAN_BOXED(4602800055803357629,64,FLEN)
NAN_BOXED(13829065441496693137,64,FLEN)
NAN_BOXED(4601392194104517616,64,FLEN)
NAN_BOXED(4602800055803357629,64,FLEN)
NAN_BOXED(13829065441496693137,64,FLEN)
NAN_BOXED(4601392194104517616,64,FLEN)
NAN_BOXED(4602842038072816337,64,FLEN)
NAN_BOXED(13818679147168464655,64,FLEN)
NAN_BOXED(4591026002826945256,64,FLEN)
NAN_BOXED(4602842038072816337,64,FLEN)
NAN_BOXED(13818679147168464655,64,FLEN)
NAN_BOXED(4591026002826945256,64,FLEN)
NAN_BOXED(4602842038072816337,64,FLEN)
NAN_BOXED(13818679147168464655,64,FLEN)
NAN_BOXED(4591026002826945256,64,FLEN)
NAN_BOXED(4602842038072816337,64,FLEN)
NAN_BOXED(13818679147168464655,64,FLEN)
NAN_BOXED(4591026002826945256,64,FLEN)
NAN_BOXED(4602842038072816337,64,FLEN)
NAN_BOXED(13818679147168464655,64,FLEN)
NAN_BOXED(4591026002826945256,64,FLEN)
NAN_BOXED(4602867588000080699,64,FLEN)
NAN_BOXED(13832179858818764602,64,FLEN)
NAN_BOXED(4604561120099738402,64,FLEN)
NAN_BOXED(4602867588000080699,64,FLEN)
NAN_BOXED(13832179858818764602,64,FLEN)
NAN_BOXED(4604561120099738402,64,FLEN)
NAN_BOXED(4602867588000080699,64,FLEN)
NAN_BOXED(13832179858818764602,64,FLEN)
NAN_BOXED(4604561120099738402,64,FLEN)
NAN_BOXED(4602867588000080699,64,FLEN)
NAN_BOXED(13832179858818764602,64,FLEN)
NAN_BOXED(4604561120099738402,64,FLEN)
NAN_BOXED(4602867588000080699,64,FLEN)
NAN_BOXED(13832179858818764602,64,FLEN)
NAN_BOXED(4604561120099738402,64,FLEN)
NAN_BOXED(4602873261086741735,64,FLEN)
NAN_BOXED(13829333848273227274,64,FLEN)
NAN_BOXED(4601794396166551164,64,FLEN)
NAN_BOXED(4602873261086741735,64,FLEN)
NAN_BOXED(13829333848273227274,64,FLEN)
NAN_BOXED(4601794396166551164,64,FLEN)
NAN_BOXED(4602873261086741735,64,FLEN)
NAN_BOXED(13829333848273227274,64,FLEN)
NAN_BOXED(4601794396166551164,64,FLEN)
NAN_BOXED(4602873261086741735,64,FLEN)
NAN_BOXED(13829333848273227274,64,FLEN)
NAN_BOXED(4601794396166551164,64,FLEN)
NAN_BOXED(4602873261086741735,64,FLEN)
NAN_BOXED(13829333848273227274,64,FLEN)
NAN_BOXED(4601794396166551164,64,FLEN)
NAN_BOXED(4602933436990805176,64,FLEN)
NAN_BOXED(13815483487293416721,64,FLEN)
NAN_BOXED(4588028879905790176,64,FLEN)
NAN_BOXED(4602933436990805176,64,FLEN)
NAN_BOXED(13815483487293416721,64,FLEN)
NAN_BOXED(4588028879905790176,64,FLEN)
NAN_BOXED(4602933436990805176,64,FLEN)
NAN_BOXED(13815483487293416721,64,FLEN)
NAN_BOXED(4588028879905790176,64,FLEN)
NAN_BOXED(4602933436990805176,64,FLEN)
NAN_BOXED(13815483487293416721,64,FLEN)
NAN_BOXED(4588028879905790176,64,FLEN)
NAN_BOXED(4602933436990805176,64,FLEN)
NAN_BOXED(13815483487293416721,64,FLEN)
NAN_BOXED(4588028879905790176,64,FLEN)
NAN_BOXED(4602934754194799055,64,FLEN)
NAN_BOXED(13832645477461827530,64,FLEN)
NAN_BOXED(4605144606661035729,64,FLEN)
NAN_BOXED(4602934754194799055,64,FLEN)
NAN_BOXED(13832645477461827530,64,FLEN)
NAN_BOXED(4605144606661035729,64,FLEN)
NAN_BOXED(4602934754194799055,64,FLEN)
NAN_BOXED(13832645477461827530,64,FLEN)
NAN_BOXED(4605144606661035729,64,FLEN)
NAN_BOXED(4602934754194799055,64,FLEN)
NAN_BOXED(13832645477461827530,64,FLEN)
NAN_BOXED(4605144606661035729,64,FLEN)
NAN_BOXED(4602934754194799055,64,FLEN)
NAN_BOXED(13832645477461827530,64,FLEN)
NAN_BOXED(4605144606661035729,64,FLEN)
NAN_BOXED(4602947354734902661,64,FLEN)
NAN_BOXED(13820035537560463112,64,FLEN)
NAN_BOXED(4592606833135826320,64,FLEN)
NAN_BOXED(4602947354734902661,64,FLEN)
NAN_BOXED(13820035537560463112,64,FLEN)
NAN_BOXED(4592606833135826320,64,FLEN)
NAN_BOXED(4602947354734902661,64,FLEN)
NAN_BOXED(13820035537560463112,64,FLEN)
NAN_BOXED(4592606833135826320,64,FLEN)
NAN_BOXED(4602947354734902661,64,FLEN)
NAN_BOXED(13820035537560463112,64,FLEN)
NAN_BOXED(4592606833135826320,64,FLEN)
NAN_BOXED(4602947354734902661,64,FLEN)
NAN_BOXED(13820035537560463112,64,FLEN)
NAN_BOXED(4592606833135826320,64,FLEN)
NAN_BOXED(4602957420422411836,64,FLEN)
NAN_BOXED(13832441770507149582,64,FLEN)
NAN_BOXED(4604961488165804697,64,FLEN)
NAN_BOXED(4602957420422411836,64,FLEN)
NAN_BOXED(13832441770507149582,64,FLEN)
NAN_BOXED(4604961488165804697,64,FLEN)
NAN_BOXED(4602957420422411836,64,FLEN)
NAN_BOXED(13832441770507149582,64,FLEN)
NAN_BOXED(4604961488165804697,64,FLEN)
NAN_BOXED(4602957420422411836,64,FLEN)
NAN_BOXED(13832441770507149582,64,FLEN)
NAN_BOXED(4604961488165804697,64,FLEN)
NAN_BOXED(4602957420422411836,64,FLEN)
NAN_BOXED(13832441770507149582,64,FLEN)
NAN_BOXED(4604961488165804697,64,FLEN)
NAN_BOXED(4602966716711820652,64,FLEN)
NAN_BOXED(13832119766256760335,64,FLEN)
NAN_BOXED(4604632091508573225,64,FLEN)
NAN_BOXED(4602966716711820652,64,FLEN)
NAN_BOXED(13832119766256760335,64,FLEN)
NAN_BOXED(4604632091508573225,64,FLEN)
NAN_BOXED(4602966716711820652,64,FLEN)
NAN_BOXED(13832119766256760335,64,FLEN)
NAN_BOXED(4604632091508573225,64,FLEN)
NAN_BOXED(4602966716711820652,64,FLEN)
NAN_BOXED(13832119766256760335,64,FLEN)
NAN_BOXED(4604632091508573225,64,FLEN)
NAN_BOXED(4602966716711820652,64,FLEN)
NAN_BOXED(13832119766256760335,64,FLEN)
NAN_BOXED(4604632091508573225,64,FLEN)
NAN_BOXED(4602988905579873336,64,FLEN)
NAN_BOXED(13833637254713661181,64,FLEN)
NAN_BOXED(4606283964644838581,64,FLEN)
NAN_BOXED(4602988905579873336,64,FLEN)
NAN_BOXED(13833637254713661181,64,FLEN)
NAN_BOXED(4606283964644838581,64,FLEN)
NAN_BOXED(4602988905579873336,64,FLEN)
NAN_BOXED(13833637254713661181,64,FLEN)
NAN_BOXED(4606283964644838581,64,FLEN)
NAN_BOXED(4602988905579873336,64,FLEN)
NAN_BOXED(13833637254713661181,64,FLEN)
NAN_BOXED(4606283964644838581,64,FLEN)
NAN_BOXED(4602988905579873336,64,FLEN)
NAN_BOXED(13833637254713661181,64,FLEN)
NAN_BOXED(4606283964644838581,64,FLEN)
NAN_BOXED(4602991097295698249,64,FLEN)
NAN_BOXED(13831270686429810131,64,FLEN)
NAN_BOXED(4603756991278060368,64,FLEN)
NAN_BOXED(4602991097295698249,64,FLEN)
NAN_BOXED(13831270686429810131,64,FLEN)
NAN_BOXED(4603756991278060368,64,FLEN)
NAN_BOXED(4602991097295698249,64,FLEN)
NAN_BOXED(13831270686429810131,64,FLEN)
NAN_BOXED(4603756991278060368,64,FLEN)
NAN_BOXED(4602991097295698249,64,FLEN)
NAN_BOXED(13831270686429810131,64,FLEN)
NAN_BOXED(4603756991278060368,64,FLEN)
NAN_BOXED(4602991097295698249,64,FLEN)
NAN_BOXED(13831270686429810131,64,FLEN)
NAN_BOXED(4603756991278060368,64,FLEN)
NAN_BOXED(4603000045256169286,64,FLEN)
NAN_BOXED(13831422930267872933,64,FLEN)
NAN_BOXED(4603930465140072531,64,FLEN)
NAN_BOXED(4603000045256169286,64,FLEN)
NAN_BOXED(13831422930267872933,64,FLEN)
NAN_BOXED(4603930465140072531,64,FLEN)
NAN_BOXED(4603000045256169286,64,FLEN)
NAN_BOXED(13831422930267872933,64,FLEN)
NAN_BOXED(4603930465140072531,64,FLEN)
NAN_BOXED(4603000045256169286,64,FLEN)
NAN_BOXED(13831422930267872933,64,FLEN)
NAN_BOXED(4603930465140072531,64,FLEN)
NAN_BOXED(4603000045256169286,64,FLEN)
NAN_BOXED(13831422930267872933,64,FLEN)
NAN_BOXED(4603930465140072531,64,FLEN)
NAN_BOXED(4603012635084471773,64,FLEN)
NAN_BOXED(13823192689103822707,64,FLEN)
NAN_BOXED(4595772831332995564,64,FLEN)
NAN_BOXED(4603012635084471773,64,FLEN)
NAN_BOXED(13823192689103822707,64,FLEN)
NAN_BOXED(4595772831332995564,64,FLEN)
NAN_BOXED(4603012635084471773,64,FLEN)
NAN_BOXED(13823192689103822707,64,FLEN)
NAN_BOXED(4595772831332995564,64,FLEN)
NAN_BOXED(4603012635084471773,64,FLEN)
NAN_BOXED(13823192689103822707,64,FLEN)
NAN_BOXED(4595772831332995564,64,FLEN)
NAN_BOXED(4603012635084471773,64,FLEN)
NAN_BOXED(13823192689103822707,64,FLEN)
NAN_BOXED(4595772831332995564,64,FLEN)
NAN_BOXED(4603078152437459214,64,FLEN)
NAN_BOXED(13830834994793546693,64,FLEN)
NAN_BOXED(4603383566924701754,64,FLEN)
NAN_BOXED(4603078152437459214,64,FLEN)
NAN_BOXED(13830834994793546693,64,FLEN)
NAN_BOXED(4603383566924701754,64,FLEN)
NAN_BOXED(4603078152437459214,64,FLEN)
NAN_BOXED(13830834994793546693,64,FLEN)
NAN_BOXED(4603383566924701754,64,FLEN)
NAN_BOXED(4603078152437459214,64,FLEN)
NAN_BOXED(13830834994793546693,64,FLEN)
NAN_BOXED(4603383566924701754,64,FLEN)
NAN_BOXED(4603078152437459214,64,FLEN)
NAN_BOXED(13830834994793546693,64,FLEN)
NAN_BOXED(4603383566924701754,64,FLEN)
NAN_BOXED(4603078615217852222,64,FLEN)
NAN_BOXED(13818061442702127673,64,FLEN)
NAN_BOXED(4590675953722493216,64,FLEN)
NAN_BOXED(4603078615217852222,64,FLEN)
NAN_BOXED(13818061442702127673,64,FLEN)
NAN_BOXED(4590675953722493216,64,FLEN)
NAN_BOXED(4603078615217852222,64,FLEN)
NAN_BOXED(13818061442702127673,64,FLEN)
NAN_BOXED(4590675953722493216,64,FLEN)
NAN_BOXED(4603078615217852222,64,FLEN)
NAN_BOXED(13818061442702127673,64,FLEN)
NAN_BOXED(4590675953722493216,64,FLEN)
NAN_BOXED(4603078615217852222,64,FLEN)
NAN_BOXED(13818061442702127673,64,FLEN)
NAN_BOXED(4590675953722493216,64,FLEN)
NAN_BOXED(4603188017459665810,64,FLEN)
NAN_BOXED(13831771243218411172,64,FLEN)
NAN_BOXED(4604542380783636583,64,FLEN)
NAN_BOXED(4603188017459665810,64,FLEN)
NAN_BOXED(13831771243218411172,64,FLEN)
NAN_BOXED(4604542380783636583,64,FLEN)
NAN_BOXED(4603188017459665810,64,FLEN)
NAN_BOXED(13831771243218411172,64,FLEN)
NAN_BOXED(4604542380783636583,64,FLEN)
NAN_BOXED(4603188017459665810,64,FLEN)
NAN_BOXED(13831771243218411172,64,FLEN)
NAN_BOXED(4604542380783636583,64,FLEN)
NAN_BOXED(4603188017459665810,64,FLEN)
NAN_BOXED(13831771243218411172,64,FLEN)
NAN_BOXED(4604542380783636583,64,FLEN)
NAN_BOXED(4603199592000722382,64,FLEN)
NAN_BOXED(13822959975279090366,64,FLEN)
NAN_BOXED(4595768471085625460,64,FLEN)
NAN_BOXED(4603199592000722382,64,FLEN)
NAN_BOXED(13822959975279090366,64,FLEN)
NAN_BOXED(4595768471085625460,64,FLEN)
NAN_BOXED(4603199592000722382,64,FLEN)
NAN_BOXED(13822959975279090366,64,FLEN)
NAN_BOXED(4595768471085625460,64,FLEN)
NAN_BOXED(4603199592000722382,64,FLEN)
NAN_BOXED(13822959975279090366,64,FLEN)
NAN_BOXED(4595768471085625460,64,FLEN)
NAN_BOXED(4603199592000722382,64,FLEN)
NAN_BOXED(13822959975279090366,64,FLEN)
NAN_BOXED(4595768471085625460,64,FLEN)
NAN_BOXED(4603209627696427858,64,FLEN)
NAN_BOXED(13827185630422035619,64,FLEN)
NAN_BOXED(4599974550569866944,64,FLEN)
NAN_BOXED(4603209627696427858,64,FLEN)
NAN_BOXED(13827185630422035619,64,FLEN)
NAN_BOXED(4599974550569866944,64,FLEN)
NAN_BOXED(4603209627696427858,64,FLEN)
NAN_BOXED(13827185630422035619,64,FLEN)
NAN_BOXED(4599974550569866944,64,FLEN)
NAN_BOXED(4603209627696427858,64,FLEN)
NAN_BOXED(13827185630422035619,64,FLEN)
NAN_BOXED(4599974550569866944,64,FLEN)
NAN_BOXED(4603209627696427858,64,FLEN)
NAN_BOXED(13827185630422035619,64,FLEN)
NAN_BOXED(4599974550569866944,64,FLEN)
NAN_BOXED(4603294276571520547,64,FLEN)
NAN_BOXED(13831482395333195403,64,FLEN)
NAN_BOXED(4604349027553776247,64,FLEN)
NAN_BOXED(4603294276571520547,64,FLEN)
NAN_BOXED(13831482395333195403,64,FLEN)
NAN_BOXED(4604349027553776247,64,FLEN)
NAN_BOXED(4603294276571520547,64,FLEN)
NAN_BOXED(13831482395333195403,64,FLEN)
NAN_BOXED(4604349027553776247,64,FLEN)
NAN_BOXED(4603294276571520547,64,FLEN)
NAN_BOXED(13831482395333195403,64,FLEN)
NAN_BOXED(4604349027553776247,64,FLEN)
NAN_BOXED(4603294276571520547,64,FLEN)
NAN_BOXED(13831482395333195403,64,FLEN)
NAN_BOXED(4604349027553776247,64,FLEN)
NAN_BOXED(4603321481842196735,64,FLEN)
NAN_BOXED(13828216024994663511,64,FLEN)
NAN_BOXED(4601292020314237830,64,FLEN)
NAN_BOXED(4603321481842196735,64,FLEN)
NAN_BOXED(13828216024994663511,64,FLEN)
NAN_BOXED(4601292020314237830,64,FLEN)
NAN_BOXED(4603321481842196735,64,FLEN)
NAN_BOXED(13828216024994663511,64,FLEN)
NAN_BOXED(4601292020314237830,64,FLEN)
NAN_BOXED(4603321481842196735,64,FLEN)
NAN_BOXED(13828216024994663511,64,FLEN)
NAN_BOXED(4601292020314237830,64,FLEN)
NAN_BOXED(4603321481842196735,64,FLEN)
NAN_BOXED(13828216024994663511,64,FLEN)
NAN_BOXED(4601292020314237830,64,FLEN)
NAN_BOXED(4603329755651953821,64,FLEN)
NAN_BOXED(13828226427469823710,64,FLEN)
NAN_BOXED(4601316177891615868,64,FLEN)
NAN_BOXED(4603329755651953821,64,FLEN)
NAN_BOXED(13828226427469823710,64,FLEN)
NAN_BOXED(4601316177891615868,64,FLEN)
NAN_BOXED(4603329755651953821,64,FLEN)
NAN_BOXED(13828226427469823710,64,FLEN)
NAN_BOXED(4601316177891615868,64,FLEN)
NAN_BOXED(4603329755651953821,64,FLEN)
NAN_BOXED(13828226427469823710,64,FLEN)
NAN_BOXED(4601316177891615868,64,FLEN)
NAN_BOXED(4603329755651953821,64,FLEN)
NAN_BOXED(13828226427469823710,64,FLEN)
NAN_BOXED(4601316177891615868,64,FLEN)
NAN_BOXED(4603394189142266747,64,FLEN)
NAN_BOXED(13831383388847137548,64,FLEN)
NAN_BOXED(4604354793433662676,64,FLEN)
NAN_BOXED(4603394189142266747,64,FLEN)
NAN_BOXED(13831383388847137548,64,FLEN)
NAN_BOXED(4604354793433662676,64,FLEN)
NAN_BOXED(4603394189142266747,64,FLEN)
NAN_BOXED(13831383388847137548,64,FLEN)
NAN_BOXED(4604354793433662676,64,FLEN)
NAN_BOXED(4603394189142266747,64,FLEN)
NAN_BOXED(13831383388847137548,64,FLEN)
NAN_BOXED(4604354793433662676,64,FLEN)
NAN_BOXED(4603394189142266747,64,FLEN)
NAN_BOXED(13831383388847137548,64,FLEN)
NAN_BOXED(4604354793433662676,64,FLEN)
NAN_BOXED(4603440002132335433,64,FLEN)
NAN_BOXED(13831296742884309949,64,FLEN)
NAN_BOXED(4604307748203013061,64,FLEN)
NAN_BOXED(4603440002132335433,64,FLEN)
NAN_BOXED(13831296742884309949,64,FLEN)
NAN_BOXED(4604307748203013061,64,FLEN)
NAN_BOXED(4603440002132335433,64,FLEN)
NAN_BOXED(13831296742884309949,64,FLEN)
NAN_BOXED(4604307748203013061,64,FLEN)
NAN_BOXED(4603440002132335433,64,FLEN)
NAN_BOXED(13831296742884309949,64,FLEN)
NAN_BOXED(4604307748203013061,64,FLEN)
NAN_BOXED(4603440002132335433,64,FLEN)
NAN_BOXED(13831296742884309949,64,FLEN)
NAN_BOXED(4604307748203013061,64,FLEN)
NAN_BOXED(4603454012531585533,64,FLEN)
NAN_BOXED(13832496758730416511,64,FLEN)
NAN_BOXED(4605730639385929882,64,FLEN)
NAN_BOXED(4603454012531585533,64,FLEN)
NAN_BOXED(13832496758730416511,64,FLEN)
NAN_BOXED(4605730639385929882,64,FLEN)
NAN_BOXED(4603454012531585533,64,FLEN)
NAN_BOXED(13832496758730416511,64,FLEN)
NAN_BOXED(4605730639385929882,64,FLEN)
NAN_BOXED(4603454012531585533,64,FLEN)
NAN_BOXED(13832496758730416511,64,FLEN)
NAN_BOXED(4605730639385929882,64,FLEN)
NAN_BOXED(4603454012531585533,64,FLEN)
NAN_BOXED(13832496758730416511,64,FLEN)
NAN_BOXED(4605730639385929882,64,FLEN)
NAN_BOXED(4603487946640861980,64,FLEN)
NAN_BOXED(13833343061676372051,64,FLEN)
NAN_BOXED(4606777560282295952,64,FLEN)
NAN_BOXED(4603487946640861980,64,FLEN)
NAN_BOXED(13833343061676372051,64,FLEN)
NAN_BOXED(4606777560282295952,64,FLEN)
NAN_BOXED(4603487946640861980,64,FLEN)
NAN_BOXED(13833343061676372051,64,FLEN)
NAN_BOXED(4606777560282295952,64,FLEN)
NAN_BOXED(4603487946640861980,64,FLEN)
NAN_BOXED(13833343061676372051,64,FLEN)
NAN_BOXED(4606777560282295952,64,FLEN)
NAN_BOXED(4603487946640861980,64,FLEN)
NAN_BOXED(13833343061676372051,64,FLEN)
NAN_BOXED(4606777560282295952,64,FLEN)
NAN_BOXED(4603526504517691617,64,FLEN)
NAN_BOXED(13831832140885200690,64,FLEN)
NAN_BOXED(4605044680718658313,64,FLEN)
NAN_BOXED(4603526504517691617,64,FLEN)
NAN_BOXED(13831832140885200690,64,FLEN)
NAN_BOXED(4605044680718658313,64,FLEN)
NAN_BOXED(4603526504517691617,64,FLEN)
NAN_BOXED(13831832140885200690,64,FLEN)
NAN_BOXED(4605044680718658313,64,FLEN)
NAN_BOXED(4603526504517691617,64,FLEN)
NAN_BOXED(13831832140885200690,64,FLEN)
NAN_BOXED(4605044680718658313,64,FLEN)
NAN_BOXED(4603526504517691617,64,FLEN)
NAN_BOXED(13831832140885200690,64,FLEN)
NAN_BOXED(4605044680718658313,64,FLEN)
NAN_BOXED(4603545407080136369,64,FLEN)
NAN_BOXED(13832497896261110519,64,FLEN)
NAN_BOXED(4605862806800874747,64,FLEN)
NAN_BOXED(4603545407080136369,64,FLEN)
NAN_BOXED(13832497896261110519,64,FLEN)
NAN_BOXED(4605862806800874747,64,FLEN)
NAN_BOXED(4603545407080136369,64,FLEN)
NAN_BOXED(13832497896261110519,64,FLEN)
NAN_BOXED(4605862806800874747,64,FLEN)
NAN_BOXED(4603545407080136369,64,FLEN)
NAN_BOXED(13832497896261110519,64,FLEN)
NAN_BOXED(4605862806800874747,64,FLEN)
NAN_BOXED(4603545407080136369,64,FLEN)
NAN_BOXED(13832497896261110519,64,FLEN)
NAN_BOXED(4605862806800874747,64,FLEN)
NAN_BOXED(4603558304445066624,64,FLEN)
NAN_BOXED(13828610998693282079,64,FLEN)
NAN_BOXED(4602114804841272760,64,FLEN)
NAN_BOXED(4603558304445066624,64,FLEN)
NAN_BOXED(13828610998693282079,64,FLEN)
NAN_BOXED(4602114804841272760,64,FLEN)
NAN_BOXED(4603558304445066624,64,FLEN)
NAN_BOXED(13828610998693282079,64,FLEN)
NAN_BOXED(4602114804841272760,64,FLEN)
NAN_BOXED(4603558304445066624,64,FLEN)
NAN_BOXED(13828610998693282079,64,FLEN)
NAN_BOXED(4602114804841272760,64,FLEN)
NAN_BOXED(4603558304445066624,64,FLEN)
NAN_BOXED(13828610998693282079,64,FLEN)
NAN_BOXED(4602114804841272760,64,FLEN)
NAN_BOXED(4603569894499971683,64,FLEN)
NAN_BOXED(13809886672333618984,64,FLEN)
NAN_BOXED(4583268191849575072,64,FLEN)
NAN_BOXED(4603569894499971683,64,FLEN)
NAN_BOXED(13809886672333618984,64,FLEN)
NAN_BOXED(4583268191849575072,64,FLEN)
NAN_BOXED(4603569894499971683,64,FLEN)
NAN_BOXED(13809886672333618984,64,FLEN)
NAN_BOXED(4583268191849575072,64,FLEN)
NAN_BOXED(4603569894499971683,64,FLEN)
NAN_BOXED(13809886672333618984,64,FLEN)
NAN_BOXED(4583268191849575072,64,FLEN)
NAN_BOXED(4603569894499971683,64,FLEN)
NAN_BOXED(13809886672333618984,64,FLEN)
NAN_BOXED(4583268191849575072,64,FLEN)
NAN_BOXED(4603603688183804360,64,FLEN)
NAN_BOXED(13833074070920648891,64,FLEN)
NAN_BOXED(4606640737118778118,64,FLEN)
NAN_BOXED(4603603688183804360,64,FLEN)
NAN_BOXED(13833074070920648891,64,FLEN)
NAN_BOXED(4606640737118778118,64,FLEN)
NAN_BOXED(4603603688183804360,64,FLEN)
NAN_BOXED(13833074070920648891,64,FLEN)
NAN_BOXED(4606640737118778118,64,FLEN)
NAN_BOXED(4603603688183804360,64,FLEN)
NAN_BOXED(13833074070920648891,64,FLEN)
NAN_BOXED(4606640737118778118,64,FLEN)
NAN_BOXED(4603603688183804360,64,FLEN)
NAN_BOXED(13833074070920648891,64,FLEN)
NAN_BOXED(4606640737118778118,64,FLEN)
NAN_BOXED(4603707910155716905,64,FLEN)
NAN_BOXED(13832382449430792204,64,FLEN)
NAN_BOXED(4605953608005709473,64,FLEN)
NAN_BOXED(4603707910155716905,64,FLEN)
NAN_BOXED(13832382449430792204,64,FLEN)
NAN_BOXED(4605953608005709473,64,FLEN)
NAN_BOXED(4603707910155716905,64,FLEN)
NAN_BOXED(13832382449430792204,64,FLEN)
NAN_BOXED(4605953608005709473,64,FLEN)
NAN_BOXED(4603707910155716905,64,FLEN)
NAN_BOXED(13832382449430792204,64,FLEN)
NAN_BOXED(4605953608005709473,64,FLEN)
NAN_BOXED(4603707910155716905,64,FLEN)
NAN_BOXED(13832382449430792204,64,FLEN)
NAN_BOXED(4605953608005709473,64,FLEN)
NAN_BOXED(4603710385325399278,64,FLEN)
NAN_BOXED(13830460759370634759,64,FLEN)
NAN_BOXED(4603652806443092930,64,FLEN)
NAN_BOXED(4603710385325399278,64,FLEN)
NAN_BOXED(13830460759370634759,64,FLEN)
NAN_BOXED(4603652806443092930,64,FLEN)
NAN_BOXED(4603710385325399278,64,FLEN)
NAN_BOXED(13830460759370634759,64,FLEN)
NAN_BOXED(4603652806443092930,64,FLEN)
NAN_BOXED(4603710385325399278,64,FLEN)
NAN_BOXED(13830460759370634759,64,FLEN)
NAN_BOXED(4603652806443092930,64,FLEN)
NAN_BOXED(4603710385325399278,64,FLEN)
NAN_BOXED(13830460759370634759,64,FLEN)
NAN_BOXED(4603652806443092930,64,FLEN)
NAN_BOXED(4603738017998345526,64,FLEN)
NAN_BOXED(13832393252496709646,64,FLEN)
NAN_BOXED(4606009280338264800,64,FLEN)
NAN_BOXED(4603738017998345526,64,FLEN)
NAN_BOXED(13832393252496709646,64,FLEN)
NAN_BOXED(4606009280338264800,64,FLEN)
NAN_BOXED(4603738017998345526,64,FLEN)
NAN_BOXED(13832393252496709646,64,FLEN)
NAN_BOXED(4606009280338264800,64,FLEN)
NAN_BOXED(4603738017998345526,64,FLEN)
NAN_BOXED(13832393252496709646,64,FLEN)
NAN_BOXED(4606009280338264800,64,FLEN)
NAN_BOXED(4603738017998345526,64,FLEN)
NAN_BOXED(13832393252496709646,64,FLEN)
NAN_BOXED(4606009280338264800,64,FLEN)
NAN_BOXED(4603786697945528119,64,FLEN)
NAN_BOXED(13804401684422336597,64,FLEN)
NAN_BOXED(4577847656740494464,64,FLEN)
NAN_BOXED(4603786697945528119,64,FLEN)
NAN_BOXED(13804401684422336597,64,FLEN)
NAN_BOXED(4577847656740494464,64,FLEN)
NAN_BOXED(4603786697945528119,64,FLEN)
NAN_BOXED(13804401684422336597,64,FLEN)
NAN_BOXED(4577847656740494464,64,FLEN)
NAN_BOXED(4603786697945528119,64,FLEN)
NAN_BOXED(13804401684422336597,64,FLEN)
NAN_BOXED(4577847656740494464,64,FLEN)
NAN_BOXED(4603786697945528119,64,FLEN)
NAN_BOXED(13804401684422336597,64,FLEN)
NAN_BOXED(4577847656740494464,64,FLEN)
NAN_BOXED(4603790049449420271,64,FLEN)
NAN_BOXED(13826964261185715559,64,FLEN)
NAN_BOXED(4600425231024138184,64,FLEN)
NAN_BOXED(4603790049449420271,64,FLEN)
NAN_BOXED(13826964261185715559,64,FLEN)
NAN_BOXED(4600425231024138184,64,FLEN)
NAN_BOXED(4603790049449420271,64,FLEN)
NAN_BOXED(13826964261185715559,64,FLEN)
NAN_BOXED(4600425231024138184,64,FLEN)
NAN_BOXED(4603790049449420271,64,FLEN)
NAN_BOXED(13826964261185715559,64,FLEN)
NAN_BOXED(4600425231024138184,64,FLEN)
NAN_BOXED(4603790049449420271,64,FLEN)
NAN_BOXED(13826964261185715559,64,FLEN)
NAN_BOXED(4600425231024138184,64,FLEN)
NAN_BOXED(4603797078236757904,64,FLEN)
NAN_BOXED(13829748687789489712,64,FLEN)
NAN_BOXED(4603294156857008406,64,FLEN)
NAN_BOXED(4603797078236757904,64,FLEN)
NAN_BOXED(13829748687789489712,64,FLEN)
NAN_BOXED(4603294156857008406,64,FLEN)
NAN_BOXED(4603797078236757904,64,FLEN)
NAN_BOXED(13829748687789489712,64,FLEN)
NAN_BOXED(4603294156857008406,64,FLEN)
NAN_BOXED(4603797078236757904,64,FLEN)
NAN_BOXED(13829748687789489712,64,FLEN)
NAN_BOXED(4603294156857008406,64,FLEN)
NAN_BOXED(4603797078236757904,64,FLEN)
NAN_BOXED(13829748687789489712,64,FLEN)
NAN_BOXED(4603294156857008406,64,FLEN)
NAN_BOXED(4603808014871696192,64,FLEN)
NAN_BOXED(13830395684853640002,64,FLEN)
NAN_BOXED(4603708725025716931,64,FLEN)
NAN_BOXED(4603808014871696192,64,FLEN)
NAN_BOXED(13830395684853640002,64,FLEN)
NAN_BOXED(4603708725025716931,64,FLEN)
NAN_BOXED(4603808014871696192,64,FLEN)
NAN_BOXED(13830395684853640002,64,FLEN)
NAN_BOXED(4603708725025716931,64,FLEN)
NAN_BOXED(4603808014871696192,64,FLEN)
NAN_BOXED(13830395684853640002,64,FLEN)
NAN_BOXED(4603708725025716931,64,FLEN)
NAN_BOXED(4603808014871696192,64,FLEN)
NAN_BOXED(13830395684853640002,64,FLEN)
NAN_BOXED(4603708725025716931,64,FLEN)
NAN_BOXED(4603814810241760260,64,FLEN)
NAN_BOXED(13832984331932946970,64,FLEN)
NAN_BOXED(4606857600184409698,64,FLEN)
NAN_BOXED(4603814810241760260,64,FLEN)
NAN_BOXED(13832984331932946970,64,FLEN)
NAN_BOXED(4606857600184409698,64,FLEN)
NAN_BOXED(4603814810241760260,64,FLEN)
NAN_BOXED(13832984331932946970,64,FLEN)
NAN_BOXED(4606857600184409698,64,FLEN)
NAN_BOXED(4603814810241760260,64,FLEN)
NAN_BOXED(13832984331932946970,64,FLEN)
NAN_BOXED(4606857600184409698,64,FLEN)
NAN_BOXED(4603814810241760260,64,FLEN)
NAN_BOXED(13832984331932946970,64,FLEN)
NAN_BOXED(4606857600184409698,64,FLEN)
NAN_BOXED(4603815863923324840,64,FLEN)
NAN_BOXED(13832533790552186902,64,FLEN)
NAN_BOXED(4606294930711012951,64,FLEN)
NAN_BOXED(4603815863923324840,64,FLEN)
NAN_BOXED(13832533790552186902,64,FLEN)
NAN_BOXED(4606294930711012951,64,FLEN)
NAN_BOXED(4603815863923324840,64,FLEN)
NAN_BOXED(13832533790552186902,64,FLEN)
NAN_BOXED(4606294930711012951,64,FLEN)
NAN_BOXED(4603815863923324840,64,FLEN)
NAN_BOXED(13832533790552186902,64,FLEN)
NAN_BOXED(4606294930711012951,64,FLEN)
NAN_BOXED(4603815863923324840,64,FLEN)
NAN_BOXED(13832533790552186902,64,FLEN)
NAN_BOXED(4606294930711012951,64,FLEN)
NAN_BOXED(4603854774610251507,64,FLEN)
NAN_BOXED(13832178105690027992,64,FLEN)
NAN_BOXED(4605902383310927426,64,FLEN)
NAN_BOXED(4603854774610251507,64,FLEN)
NAN_BOXED(13832178105690027992,64,FLEN)
NAN_BOXED(4605902383310927426,64,FLEN)
NAN_BOXED(4603854774610251507,64,FLEN)
NAN_BOXED(13832178105690027992,64,FLEN)
NAN_BOXED(4605902383310927426,64,FLEN)
NAN_BOXED(4603854774610251507,64,FLEN)
NAN_BOXED(13832178105690027992,64,FLEN)
NAN_BOXED(4605902383310927426,64,FLEN)
NAN_BOXED(4603854774610251507,64,FLEN)
NAN_BOXED(13832178105690027992,64,FLEN)
NAN_BOXED(4605902383310927426,64,FLEN)
NAN_BOXED(4603859050260355453,64,FLEN)
NAN_BOXED(13815122859951503856,64,FLEN)
NAN_BOXED(4589104314051139104,64,FLEN)
NAN_BOXED(4603859050260355453,64,FLEN)
NAN_BOXED(13815122859951503856,64,FLEN)
NAN_BOXED(4589104314051139104,64,FLEN)
NAN_BOXED(4603859050260355453,64,FLEN)
NAN_BOXED(13815122859951503856,64,FLEN)
NAN_BOXED(4589104314051139104,64,FLEN)
NAN_BOXED(4603859050260355453,64,FLEN)
NAN_BOXED(13815122859951503856,64,FLEN)
NAN_BOXED(4589104314051139104,64,FLEN)
NAN_BOXED(4603859050260355453,64,FLEN)
NAN_BOXED(13815122859951503856,64,FLEN)
NAN_BOXED(4589104314051139104,64,FLEN)
NAN_BOXED(4603884122262116881,64,FLEN)
NAN_BOXED(13827536956469088514,64,FLEN)
NAN_BOXED(4601264349695518480,64,FLEN)
NAN_BOXED(4603884122262116881,64,FLEN)
NAN_BOXED(13827536956469088514,64,FLEN)
NAN_BOXED(4601264349695518480,64,FLEN)
NAN_BOXED(4603884122262116881,64,FLEN)
NAN_BOXED(13827536956469088514,64,FLEN)
NAN_BOXED(4601264349695518480,64,FLEN)
NAN_BOXED(4603884122262116881,64,FLEN)
NAN_BOXED(13827536956469088514,64,FLEN)
NAN_BOXED(4601264349695518480,64,FLEN)
NAN_BOXED(4603884122262116881,64,FLEN)
NAN_BOXED(13827536956469088514,64,FLEN)
NAN_BOXED(4601264349695518480,64,FLEN)
NAN_BOXED(4603901518469866617,64,FLEN)
NAN_BOXED(13830925752394758153,64,FLEN)
NAN_BOXED(4604373619966154923,64,FLEN)
NAN_BOXED(4603901518469866617,64,FLEN)
NAN_BOXED(13830925752394758153,64,FLEN)
NAN_BOXED(4604373619966154923,64,FLEN)
NAN_BOXED(4603901518469866617,64,FLEN)
NAN_BOXED(13830925752394758153,64,FLEN)
NAN_BOXED(4604373619966154923,64,FLEN)
NAN_BOXED(4603901518469866617,64,FLEN)
NAN_BOXED(13830925752394758153,64,FLEN)
NAN_BOXED(4604373619966154923,64,FLEN)
NAN_BOXED(4603901518469866617,64,FLEN)
NAN_BOXED(13830925752394758153,64,FLEN)
NAN_BOXED(4604373619966154923,64,FLEN)
NAN_BOXED(4603908916492059419,64,FLEN)
NAN_BOXED(13825406943784145839,64,FLEN)
NAN_BOXED(4598995422783426144,64,FLEN)
NAN_BOXED(4603908916492059419,64,FLEN)
NAN_BOXED(13825406943784145839,64,FLEN)
NAN_BOXED(4598995422783426144,64,FLEN)
NAN_BOXED(4603908916492059419,64,FLEN)
NAN_BOXED(13825406943784145839,64,FLEN)
NAN_BOXED(4598995422783426144,64,FLEN)
NAN_BOXED(4603908916492059419,64,FLEN)
NAN_BOXED(13825406943784145839,64,FLEN)
NAN_BOXED(4598995422783426144,64,FLEN)
NAN_BOXED(4603908916492059419,64,FLEN)
NAN_BOXED(13825406943784145839,64,FLEN)
NAN_BOXED(4598995422783426144,64,FLEN)
NAN_BOXED(4603927881423216745,64,FLEN)
NAN_BOXED(13823079092580152878,64,FLEN)
NAN_BOXED(4596877369335549680,64,FLEN)
NAN_BOXED(4603927881423216745,64,FLEN)
NAN_BOXED(13823079092580152878,64,FLEN)
NAN_BOXED(4596877369335549680,64,FLEN)
NAN_BOXED(4603927881423216745,64,FLEN)
NAN_BOXED(13823079092580152878,64,FLEN)
NAN_BOXED(4596877369335549680,64,FLEN)
NAN_BOXED(4603927881423216745,64,FLEN)
NAN_BOXED(13823079092580152878,64,FLEN)
NAN_BOXED(4596877369335549680,64,FLEN)
NAN_BOXED(4603927881423216745,64,FLEN)
NAN_BOXED(13823079092580152878,64,FLEN)
NAN_BOXED(4596877369335549680,64,FLEN)
NAN_BOXED(4603929109089166002,64,FLEN)
NAN_BOXED(13831930851028266542,64,FLEN)
NAN_BOXED(4605687619525918610,64,FLEN)
NAN_BOXED(4603929109089166002,64,FLEN)
NAN_BOXED(13831930851028266542,64,FLEN)
NAN_BOXED(4605687619525918610,64,FLEN)
NAN_BOXED(4603929109089166002,64,FLEN)
NAN_BOXED(13831930851028266542,64,FLEN)
NAN_BOXED(4605687619525918610,64,FLEN)
NAN_BOXED(4603929109089166002,64,FLEN)
NAN_BOXED(13831930851028266542,64,FLEN)
NAN_BOXED(4605687619525918610,64,FLEN)
NAN_BOXED(4603929109089166002,64,FLEN)
NAN_BOXED(13831930851028266542,64,FLEN)
NAN_BOXED(4605687619525918610,64,FLEN)
NAN_BOXED(4604029492372932577,64,FLEN)
NAN_BOXED(13821249676701986714,64,FLEN)
NAN_BOXED(4594828879750597872,64,FLEN)
NAN_BOXED(4604029492372932577,64,FLEN)
NAN_BOXED(13821249676701986714,64,FLEN)
NAN_BOXED(4594828879750597872,64,FLEN)
NAN_BOXED(4604029492372932577,64,FLEN)
NAN_BOXED(13821249676701986714,64,FLEN)
NAN_BOXED(4594828879750597872,64,FLEN)
NAN_BOXED(4604029492372932577,64,FLEN)
NAN_BOXED(13821249676701986714,64,FLEN)
NAN_BOXED(4594828879750597872,64,FLEN)
NAN_BOXED(4604029492372932577,64,FLEN)
NAN_BOXED(13821249676701986714,64,FLEN)
NAN_BOXED(4594828879750597872,64,FLEN)
NAN_BOXED(4604048953718574373,64,FLEN)
NAN_BOXED(13826463555526747900,64,FLEN)
NAN_BOXED(4600083609565282200,64,FLEN)
NAN_BOXED(4604048953718574373,64,FLEN)
NAN_BOXED(13826463555526747900,64,FLEN)
NAN_BOXED(4600083609565282200,64,FLEN)
NAN_BOXED(4604048953718574373,64,FLEN)
NAN_BOXED(13826463555526747900,64,FLEN)
NAN_BOXED(4600083609565282200,64,FLEN)
NAN_BOXED(4604048953718574373,64,FLEN)
NAN_BOXED(13826463555526747900,64,FLEN)
NAN_BOXED(4600083609565282200,64,FLEN)
NAN_BOXED(4604048953718574373,64,FLEN)
NAN_BOXED(13826463555526747900,64,FLEN)
NAN_BOXED(4600083609565282200,64,FLEN)
NAN_BOXED(4604080503190139967,64,FLEN)
NAN_BOXED(13830411418923698176,64,FLEN)
NAN_BOXED(4603986725707832613,64,FLEN)
NAN_BOXED(4604080503190139967,64,FLEN)
NAN_BOXED(13830411418923698176,64,FLEN)
NAN_BOXED(4603986725707832613,64,FLEN)
NAN_BOXED(4604080503190139967,64,FLEN)
NAN_BOXED(13830411418923698176,64,FLEN)
NAN_BOXED(4603986725707832613,64,FLEN)
NAN_BOXED(4604080503190139967,64,FLEN)
NAN_BOXED(13830411418923698176,64,FLEN)
NAN_BOXED(4603986725707832613,64,FLEN)
NAN_BOXED(4604080503190139967,64,FLEN)
NAN_BOXED(13830411418923698176,64,FLEN)
NAN_BOXED(4603986725707832613,64,FLEN)
NAN_BOXED(4604120335605151000,64,FLEN)
NAN_BOXED(13816311915443207190,64,FLEN)
NAN_BOXED(4590126557829545704,64,FLEN)
NAN_BOXED(4604120335605151000,64,FLEN)
NAN_BOXED(13816311915443207190,64,FLEN)
NAN_BOXED(4590126557829545704,64,FLEN)
NAN_BOXED(4604120335605151000,64,FLEN)
NAN_BOXED(13816311915443207190,64,FLEN)
NAN_BOXED(4590126557829545704,64,FLEN)
NAN_BOXED(4604120335605151000,64,FLEN)
NAN_BOXED(13816311915443207190,64,FLEN)
NAN_BOXED(4590126557829545704,64,FLEN)
NAN_BOXED(4604120335605151000,64,FLEN)
NAN_BOXED(13816311915443207190,64,FLEN)
NAN_BOXED(4590126557829545704,64,FLEN)
NAN_BOXED(4604138914439783581,64,FLEN)
NAN_BOXED(13830744495163075705,64,FLEN)
NAN_BOXED(4604390565949480647,64,FLEN)
NAN_BOXED(4604138914439783581,64,FLEN)
NAN_BOXED(13830744495163075705,64,FLEN)
NAN_BOXED(4604390565949480647,64,FLEN)
NAN_BOXED(4604138914439783581,64,FLEN)
NAN_BOXED(13830744495163075705,64,FLEN)
NAN_BOXED(4604390565949480647,64,FLEN)
NAN_BOXED(4604138914439783581,64,FLEN)
NAN_BOXED(13830744495163075705,64,FLEN)
NAN_BOXED(4604390565949480647,64,FLEN)
NAN_BOXED(4604138914439783581,64,FLEN)
NAN_BOXED(13830744495163075705,64,FLEN)
NAN_BOXED(4604390565949480647,64,FLEN)
NAN_BOXED(4604270515254843434,64,FLEN)
NAN_BOXED(13822461879845317373,64,FLEN)
NAN_BOXED(4596501192548433420,64,FLEN)
NAN_BOXED(4604270515254843434,64,FLEN)
NAN_BOXED(13822461879845317373,64,FLEN)
NAN_BOXED(4596501192548433420,64,FLEN)
NAN_BOXED(4604270515254843434,64,FLEN)
NAN_BOXED(13822461879845317373,64,FLEN)
NAN_BOXED(4596501192548433420,64,FLEN)
NAN_BOXED(4604270515254843434,64,FLEN)
NAN_BOXED(13822461879845317373,64,FLEN)
NAN_BOXED(4596501192548433420,64,FLEN)
NAN_BOXED(4604270515254843434,64,FLEN)
NAN_BOXED(13822461879845317373,64,FLEN)
NAN_BOXED(4596501192548433420,64,FLEN)
NAN_BOXED(4604323976534084024,64,FLEN)
NAN_BOXED(13831450384645323279,64,FLEN)
NAN_BOXED(4605547186876432663,64,FLEN)
NAN_BOXED(4604323976534084024,64,FLEN)
NAN_BOXED(13831450384645323279,64,FLEN)
NAN_BOXED(4605547186876432663,64,FLEN)
NAN_BOXED(4604323976534084024,64,FLEN)
NAN_BOXED(13831450384645323279,64,FLEN)
NAN_BOXED(4605547186876432663,64,FLEN)
NAN_BOXED(4604323976534084024,64,FLEN)
NAN_BOXED(13831450384645323279,64,FLEN)
NAN_BOXED(4605547186876432663,64,FLEN)
NAN_BOXED(4604323976534084024,64,FLEN)
NAN_BOXED(13831450384645323279,64,FLEN)
NAN_BOXED(4605547186876432663,64,FLEN)
NAN_BOXED(4604328938205248280,64,FLEN)
NAN_BOXED(13831472856475324520,64,FLEN)
NAN_BOXED(4605583841112755786,64,FLEN)
NAN_BOXED(4604328938205248280,64,FLEN)
NAN_BOXED(13831472856475324520,64,FLEN)
NAN_BOXED(4605583841112755786,64,FLEN)
NAN_BOXED(4604328938205248280,64,FLEN)
NAN_BOXED(13831472856475324520,64,FLEN)
NAN_BOXED(4605583841112755786,64,FLEN)
NAN_BOXED(4604328938205248280,64,FLEN)
NAN_BOXED(13831472856475324520,64,FLEN)
NAN_BOXED(4605583841112755786,64,FLEN)
NAN_BOXED(4604328938205248280,64,FLEN)
NAN_BOXED(13831472856475324520,64,FLEN)
NAN_BOXED(4605583841112755786,64,FLEN)
NAN_BOXED(4604338007372384974,64,FLEN)
NAN_BOXED(13828376724803233709,64,FLEN)
NAN_BOXED(4602847988910137065,64,FLEN)
NAN_BOXED(4604338007372384974,64,FLEN)
NAN_BOXED(13828376724803233709,64,FLEN)
NAN_BOXED(4602847988910137065,64,FLEN)
NAN_BOXED(4604338007372384974,64,FLEN)
NAN_BOXED(13828376724803233709,64,FLEN)
NAN_BOXED(4602847988910137065,64,FLEN)
NAN_BOXED(4604338007372384974,64,FLEN)
NAN_BOXED(13828376724803233709,64,FLEN)
NAN_BOXED(4602847988910137065,64,FLEN)
NAN_BOXED(4604338007372384974,64,FLEN)
NAN_BOXED(13828376724803233709,64,FLEN)
NAN_BOXED(4602847988910137065,64,FLEN)
NAN_BOXED(4604411705487711810,64,FLEN)
NAN_BOXED(13828714598303264379,64,FLEN)
NAN_BOXED(4603137808443316298,64,FLEN)
NAN_BOXED(4604411705487711810,64,FLEN)
NAN_BOXED(13828714598303264379,64,FLEN)
NAN_BOXED(4603137808443316298,64,FLEN)
NAN_BOXED(4604411705487711810,64,FLEN)
NAN_BOXED(13828714598303264379,64,FLEN)
NAN_BOXED(4603137808443316298,64,FLEN)
NAN_BOXED(4604411705487711810,64,FLEN)
NAN_BOXED(13828714598303264379,64,FLEN)
NAN_BOXED(4603137808443316298,64,FLEN)
NAN_BOXED(4604411705487711810,64,FLEN)
NAN_BOXED(13828714598303264379,64,FLEN)
NAN_BOXED(4603137808443316298,64,FLEN)
NAN_BOXED(4604426676203430518,64,FLEN)
NAN_BOXED(13832206568946309689,64,FLEN)
NAN_BOXED(4606719978337462755,64,FLEN)
NAN_BOXED(4604426676203430518,64,FLEN)
NAN_BOXED(13832206568946309689,64,FLEN)
NAN_BOXED(4606719978337462755,64,FLEN)
NAN_BOXED(4604426676203430518,64,FLEN)
NAN_BOXED(13832206568946309689,64,FLEN)
NAN_BOXED(4606719978337462755,64,FLEN)
NAN_BOXED(4604426676203430518,64,FLEN)
NAN_BOXED(13832206568946309689,64,FLEN)
NAN_BOXED(4606719978337462755,64,FLEN)
NAN_BOXED(4604426676203430518,64,FLEN)
NAN_BOXED(13832206568946309689,64,FLEN)
NAN_BOXED(4606719978337462755,64,FLEN)
NAN_BOXED(4604468017332157290,64,FLEN)
NAN_BOXED(13826664144546024181,64,FLEN)
NAN_BOXED(4600821354589033772,64,FLEN)
NAN_BOXED(4604468017332157290,64,FLEN)
NAN_BOXED(13826664144546024181,64,FLEN)
NAN_BOXED(4600821354589033772,64,FLEN)
NAN_BOXED(4604468017332157290,64,FLEN)
NAN_BOXED(13826664144546024181,64,FLEN)
NAN_BOXED(4600821354589033772,64,FLEN)
NAN_BOXED(4604468017332157290,64,FLEN)
NAN_BOXED(13826664144546024181,64,FLEN)
NAN_BOXED(4600821354589033772,64,FLEN)
NAN_BOXED(4604468017332157290,64,FLEN)
NAN_BOXED(13826664144546024181,64,FLEN)
NAN_BOXED(4600821354589033772,64,FLEN)
NAN_BOXED(4604508882408254564,64,FLEN)
NAN_BOXED(13827569313451578538,64,FLEN)
NAN_BOXED(4602140773986172324,64,FLEN)
NAN_BOXED(4604508882408254564,64,FLEN)
NAN_BOXED(13827569313451578538,64,FLEN)
NAN_BOXED(4602140773986172324,64,FLEN)
NAN_BOXED(4604508882408254564,64,FLEN)
NAN_BOXED(13827569313451578538,64,FLEN)
NAN_BOXED(4602140773986172324,64,FLEN)
NAN_BOXED(4604508882408254564,64,FLEN)
NAN_BOXED(13827569313451578538,64,FLEN)
NAN_BOXED(4602140773986172324,64,FLEN)
NAN_BOXED(4604508882408254564,64,FLEN)
NAN_BOXED(13827569313451578538,64,FLEN)
NAN_BOXED(4602140773986172324,64,FLEN)
NAN_BOXED(4604512247197450457,64,FLEN)
NAN_BOXED(13821244534686411676,64,FLEN)
NAN_BOXED(4595292067657051420,64,FLEN)
NAN_BOXED(4604512247197450457,64,FLEN)
NAN_BOXED(13821244534686411676,64,FLEN)
NAN_BOXED(4595292067657051420,64,FLEN)
NAN_BOXED(4604512247197450457,64,FLEN)
NAN_BOXED(13821244534686411676,64,FLEN)
NAN_BOXED(4595292067657051420,64,FLEN)
NAN_BOXED(4604512247197450457,64,FLEN)
NAN_BOXED(13821244534686411676,64,FLEN)
NAN_BOXED(4595292067657051420,64,FLEN)
NAN_BOXED(4604512247197450457,64,FLEN)
NAN_BOXED(13821244534686411676,64,FLEN)
NAN_BOXED(4595292067657051420,64,FLEN)
NAN_BOXED(4604526980030752931,64,FLEN)
NAN_BOXED(13828531988308315122,64,FLEN)
NAN_BOXED(4603100762200858204,64,FLEN)
NAN_BOXED(4604526980030752931,64,FLEN)
NAN_BOXED(13828531988308315122,64,FLEN)
NAN_BOXED(4603100762200858204,64,FLEN)
NAN_BOXED(4604526980030752931,64,FLEN)
NAN_BOXED(13828531988308315122,64,FLEN)
NAN_BOXED(4603100762200858204,64,FLEN)
NAN_BOXED(4604526980030752931,64,FLEN)
NAN_BOXED(13828531988308315122,64,FLEN)
NAN_BOXED(4603100762200858204,64,FLEN)
NAN_BOXED(4604526980030752931,64,FLEN)
NAN_BOXED(13828531988308315122,64,FLEN)
NAN_BOXED(4603100762200858204,64,FLEN)
NAN_BOXED(4604535634871985723,64,FLEN)
NAN_BOXED(13813592959189530854,64,FLEN)
NAN_BOXED(4588008245611478240,64,FLEN)
NAN_BOXED(4604535634871985723,64,FLEN)
NAN_BOXED(13813592959189530854,64,FLEN)
NAN_BOXED(4588008245611478240,64,FLEN)
NAN_BOXED(4604535634871985723,64,FLEN)
NAN_BOXED(13813592959189530854,64,FLEN)
NAN_BOXED(4588008245611478240,64,FLEN)
NAN_BOXED(4604535634871985723,64,FLEN)
NAN_BOXED(13813592959189530854,64,FLEN)
NAN_BOXED(4588008245611478240,64,FLEN)
NAN_BOXED(4604535634871985723,64,FLEN)
NAN_BOXED(13813592959189530854,64,FLEN)
NAN_BOXED(4588008245611478240,64,FLEN)
NAN_BOXED(4604547876887808411,64,FLEN)
NAN_BOXED(13816388146823795012,64,FLEN)
NAN_BOXED(4590573300068656512,64,FLEN)
NAN_BOXED(4604547876887808411,64,FLEN)
NAN_BOXED(13816388146823795012,64,FLEN)
NAN_BOXED(4590573300068656512,64,FLEN)
NAN_BOXED(4604547876887808411,64,FLEN)
NAN_BOXED(13816388146823795012,64,FLEN)
NAN_BOXED(4590573300068656512,64,FLEN)
NAN_BOXED(4604547876887808411,64,FLEN)
NAN_BOXED(13816388146823795012,64,FLEN)
NAN_BOXED(4590573300068656512,64,FLEN)
NAN_BOXED(4604547876887808411,64,FLEN)
NAN_BOXED(13816388146823795012,64,FLEN)
NAN_BOXED(4590573300068656512,64,FLEN)
NAN_BOXED(4604560417068366469,64,FLEN)
NAN_BOXED(13825316072247450802,64,FLEN)
NAN_BOXED(4599535929711170976,64,FLEN)
NAN_BOXED(4604560417068366469,64,FLEN)
NAN_BOXED(13825316072247450802,64,FLEN)
NAN_BOXED(4599535929711170976,64,FLEN)
NAN_BOXED(4604560417068366469,64,FLEN)
NAN_BOXED(13825316072247450802,64,FLEN)
NAN_BOXED(4599535929711170976,64,FLEN)
NAN_BOXED(4604560417068366469,64,FLEN)
NAN_BOXED(13825316072247450802,64,FLEN)
NAN_BOXED(4599535929711170976,64,FLEN)
NAN_BOXED(4604560417068366469,64,FLEN)
NAN_BOXED(13825316072247450802,64,FLEN)
NAN_BOXED(4599535929711170976,64,FLEN)
NAN_BOXED(4604576589508694574,64,FLEN)
NAN_BOXED(13811344377850436816,64,FLEN)
NAN_BOXED(4585712427903313344,64,FLEN)
NAN_BOXED(4604576589508694574,64,FLEN)
NAN_BOXED(13811344377850436816,64,FLEN)
NAN_BOXED(4585712427903313344,64,FLEN)
NAN_BOXED(4604576589508694574,64,FLEN)
NAN_BOXED(13811344377850436816,64,FLEN)
NAN_BOXED(4585712427903313344,64,FLEN)
NAN_BOXED(4604576589508694574,64,FLEN)
NAN_BOXED(13811344377850436816,64,FLEN)
NAN_BOXED(4585712427903313344,64,FLEN)
NAN_BOXED(4604576589508694574,64,FLEN)
NAN_BOXED(13811344377850436816,64,FLEN)
NAN_BOXED(4585712427903313344,64,FLEN)
NAN_BOXED(4604602771774981380,64,FLEN)
NAN_BOXED(13828149461412094618,64,FLEN)
NAN_BOXED(4602886563920586636,64,FLEN)
NAN_BOXED(4604602771774981380,64,FLEN)
NAN_BOXED(13828149461412094618,64,FLEN)
NAN_BOXED(4602886563920586636,64,FLEN)
NAN_BOXED(4604602771774981380,64,FLEN)
NAN_BOXED(13828149461412094618,64,FLEN)
NAN_BOXED(4602886563920586636,64,FLEN)
NAN_BOXED(4604602771774981380,64,FLEN)
NAN_BOXED(13828149461412094618,64,FLEN)
NAN_BOXED(4602886563920586636,64,FLEN)
NAN_BOXED(4604602771774981380,64,FLEN)
NAN_BOXED(13828149461412094618,64,FLEN)
NAN_BOXED(4602886563920586636,64,FLEN)
NAN_BOXED(4604603107486731073,64,FLEN)
NAN_BOXED(13822578714156468979,64,FLEN)
NAN_BOXED(4597068085029034144,64,FLEN)
NAN_BOXED(4604603107486731073,64,FLEN)
NAN_BOXED(13822578714156468979,64,FLEN)
NAN_BOXED(4597068085029034144,64,FLEN)
NAN_BOXED(4604603107486731073,64,FLEN)
NAN_BOXED(13822578714156468979,64,FLEN)
NAN_BOXED(4597068085029034144,64,FLEN)
NAN_BOXED(4604603107486731073,64,FLEN)
NAN_BOXED(13822578714156468979,64,FLEN)
NAN_BOXED(4597068085029034144,64,FLEN)
NAN_BOXED(4604603107486731073,64,FLEN)
NAN_BOXED(13822578714156468979,64,FLEN)
NAN_BOXED(4597068085029034144,64,FLEN)
NAN_BOXED(4604610672508872125,64,FLEN)
NAN_BOXED(13831953781902883021,64,FLEN)
NAN_BOXED(4606610250401093574,64,FLEN)
NAN_BOXED(4604610672508872125,64,FLEN)
NAN_BOXED(13831953781902883021,64,FLEN)
NAN_BOXED(4606610250401093574,64,FLEN)
NAN_BOXED(4604610672508872125,64,FLEN)
NAN_BOXED(13831953781902883021,64,FLEN)
NAN_BOXED(4606610250401093574,64,FLEN)
NAN_BOXED(4604610672508872125,64,FLEN)
NAN_BOXED(13831953781902883021,64,FLEN)
NAN_BOXED(4606610250401093574,64,FLEN)
NAN_BOXED(4604610672508872125,64,FLEN)
NAN_BOXED(13831953781902883021,64,FLEN)
NAN_BOXED(4606610250401093574,64,FLEN)
NAN_BOXED(4604652728372213969,64,FLEN)
NAN_BOXED(13827988956895913635,64,FLEN)
NAN_BOXED(4602807755213949171,64,FLEN)
NAN_BOXED(4604652728372213969,64,FLEN)
NAN_BOXED(13827988956895913635,64,FLEN)
NAN_BOXED(4602807755213949171,64,FLEN)
NAN_BOXED(4604652728372213969,64,FLEN)
NAN_BOXED(13827988956895913635,64,FLEN)
NAN_BOXED(4602807755213949171,64,FLEN)
NAN_BOXED(4604652728372213969,64,FLEN)
NAN_BOXED(13827988956895913635,64,FLEN)
NAN_BOXED(4602807755213949171,64,FLEN)
NAN_BOXED(4604652728372213969,64,FLEN)
NAN_BOXED(13827988956895913635,64,FLEN)
NAN_BOXED(4602807755213949171,64,FLEN)
NAN_BOXED(4604665065441168886,64,FLEN)
NAN_BOXED(13816402597294758632,64,FLEN)
NAN_BOXED(4590692371900778096,64,FLEN)
NAN_BOXED(4604665065441168886,64,FLEN)
NAN_BOXED(13816402597294758632,64,FLEN)
NAN_BOXED(4590692371900778096,64,FLEN)
NAN_BOXED(4604665065441168886,64,FLEN)
NAN_BOXED(13816402597294758632,64,FLEN)
NAN_BOXED(4590692371900778096,64,FLEN)
NAN_BOXED(4604665065441168886,64,FLEN)
NAN_BOXED(13816402597294758632,64,FLEN)
NAN_BOXED(4590692371900778096,64,FLEN)
NAN_BOXED(4604665065441168886,64,FLEN)
NAN_BOXED(13816402597294758632,64,FLEN)
NAN_BOXED(4590692371900778096,64,FLEN)
NAN_BOXED(4604673660967688914,64,FLEN)
NAN_BOXED(13828912569184301209,64,FLEN)
NAN_BOXED(4603489085968403997,64,FLEN)
NAN_BOXED(4604673660967688914,64,FLEN)
NAN_BOXED(13828912569184301209,64,FLEN)
NAN_BOXED(4603489085968403997,64,FLEN)
NAN_BOXED(4604673660967688914,64,FLEN)
NAN_BOXED(13828912569184301209,64,FLEN)
NAN_BOXED(4603489085968403997,64,FLEN)
NAN_BOXED(4604673660967688914,64,FLEN)
NAN_BOXED(13828912569184301209,64,FLEN)
NAN_BOXED(4603489085968403997,64,FLEN)
NAN_BOXED(4604673660967688914,64,FLEN)
NAN_BOXED(13828912569184301209,64,FLEN)
NAN_BOXED(4603489085968403997,64,FLEN)
NAN_BOXED(4604716359157722969,64,FLEN)
NAN_BOXED(13814460891552578725,64,FLEN)
NAN_BOXED(4589329924196841200,64,FLEN)
NAN_BOXED(4604716359157722969,64,FLEN)
NAN_BOXED(13814460891552578725,64,FLEN)
NAN_BOXED(4589329924196841200,64,FLEN)
NAN_BOXED(4604716359157722969,64,FLEN)
NAN_BOXED(13814460891552578725,64,FLEN)
NAN_BOXED(4589329924196841200,64,FLEN)
NAN_BOXED(4604716359157722969,64,FLEN)
NAN_BOXED(13814460891552578725,64,FLEN)
NAN_BOXED(4589329924196841200,64,FLEN)
NAN_BOXED(4604716359157722969,64,FLEN)
NAN_BOXED(13814460891552578725,64,FLEN)
NAN_BOXED(4589329924196841200,64,FLEN)
NAN_BOXED(4604771237843101674,64,FLEN)
NAN_BOXED(13821666507954368148,64,FLEN)
NAN_BOXED(4595938695640362260,64,FLEN)
NAN_BOXED(4604771237843101674,64,FLEN)
NAN_BOXED(13821666507954368148,64,FLEN)
NAN_BOXED(4595938695640362260,64,FLEN)
NAN_BOXED(4604771237843101674,64,FLEN)
NAN_BOXED(13821666507954368148,64,FLEN)
NAN_BOXED(4595938695640362260,64,FLEN)
NAN_BOXED(4604771237843101674,64,FLEN)
NAN_BOXED(13821666507954368148,64,FLEN)
NAN_BOXED(4595938695640362260,64,FLEN)
NAN_BOXED(4604771237843101674,64,FLEN)
NAN_BOXED(13821666507954368148,64,FLEN)
NAN_BOXED(4595938695640362260,64,FLEN)
NAN_BOXED(4604771295037478148,64,FLEN)
NAN_BOXED(13831248913325657996,64,FLEN)
NAN_BOXED(4605788413698587281,64,FLEN)
NAN_BOXED(4604771295037478148,64,FLEN)
NAN_BOXED(13831248913325657996,64,FLEN)
NAN_BOXED(4605788413698587281,64,FLEN)
NAN_BOXED(4604771295037478148,64,FLEN)
NAN_BOXED(13831248913325657996,64,FLEN)
NAN_BOXED(4605788413698587281,64,FLEN)
NAN_BOXED(4604771295037478148,64,FLEN)
NAN_BOXED(13831248913325657996,64,FLEN)
NAN_BOXED(4605788413698587281,64,FLEN)
NAN_BOXED(4604771295037478148,64,FLEN)
NAN_BOXED(13831248913325657996,64,FLEN)
NAN_BOXED(4605788413698587281,64,FLEN)
NAN_BOXED(4604811303112887331,64,FLEN)
NAN_BOXED(13827028263459075301,64,FLEN)
NAN_BOXED(4601747919742004434,64,FLEN)
NAN_BOXED(4604811303112887331,64,FLEN)
NAN_BOXED(13827028263459075301,64,FLEN)
NAN_BOXED(4601747919742004434,64,FLEN)
NAN_BOXED(4604811303112887331,64,FLEN)
NAN_BOXED(13827028263459075301,64,FLEN)
NAN_BOXED(4601747919742004434,64,FLEN)
NAN_BOXED(4604811303112887331,64,FLEN)
NAN_BOXED(13827028263459075301,64,FLEN)
NAN_BOXED(4601747919742004434,64,FLEN)
NAN_BOXED(4604811303112887331,64,FLEN)
NAN_BOXED(13827028263459075301,64,FLEN)
NAN_BOXED(4601747919742004434,64,FLEN)
NAN_BOXED(4604817200208041466,64,FLEN)
NAN_BOXED(13824961292793794405,64,FLEN)
NAN_BOXED(4599510147950841574,64,FLEN)
NAN_BOXED(4604817200208041466,64,FLEN)
NAN_BOXED(13824961292793794405,64,FLEN)
NAN_BOXED(4599510147950841574,64,FLEN)
NAN_BOXED(4604817200208041466,64,FLEN)
NAN_BOXED(13824961292793794405,64,FLEN)
NAN_BOXED(4599510147950841574,64,FLEN)
NAN_BOXED(4604817200208041466,64,FLEN)
NAN_BOXED(13824961292793794405,64,FLEN)
NAN_BOXED(4599510147950841574,64,FLEN)
NAN_BOXED(4604817200208041466,64,FLEN)
NAN_BOXED(13824961292793794405,64,FLEN)
NAN_BOXED(4599510147950841574,64,FLEN)
NAN_BOXED(4604881709453447670,64,FLEN)
NAN_BOXED(13828715176794247416,64,FLEN)
NAN_BOXED(4603512237682289674,64,FLEN)
NAN_BOXED(4604881709453447670,64,FLEN)
NAN_BOXED(13828715176794247416,64,FLEN)
NAN_BOXED(4603512237682289674,64,FLEN)
NAN_BOXED(4604881709453447670,64,FLEN)
NAN_BOXED(13828715176794247416,64,FLEN)
NAN_BOXED(4603512237682289674,64,FLEN)
NAN_BOXED(4604881709453447670,64,FLEN)
NAN_BOXED(13828715176794247416,64,FLEN)
NAN_BOXED(4603512237682289674,64,FLEN)
NAN_BOXED(4604881709453447670,64,FLEN)
NAN_BOXED(13828715176794247416,64,FLEN)
NAN_BOXED(4603512237682289674,64,FLEN)
NAN_BOXED(4604892876502690004,64,FLEN)
NAN_BOXED(13823068217708444881,64,FLEN)
NAN_BOXED(4598154372771677516,64,FLEN)
NAN_BOXED(4604892876502690004,64,FLEN)
NAN_BOXED(13823068217708444881,64,FLEN)
NAN_BOXED(4598154372771677516,64,FLEN)
NAN_BOXED(4604892876502690004,64,FLEN)
NAN_BOXED(13823068217708444881,64,FLEN)
NAN_BOXED(4598154372771677516,64,FLEN)
NAN_BOXED(4604892876502690004,64,FLEN)
NAN_BOXED(13823068217708444881,64,FLEN)
NAN_BOXED(4598154372771677516,64,FLEN)
NAN_BOXED(4604892876502690004,64,FLEN)
NAN_BOXED(13823068217708444881,64,FLEN)
NAN_BOXED(4598154372771677516,64,FLEN)
NAN_BOXED(4604893985793580564,64,FLEN)
NAN_BOXED(13830272326769516861,64,FLEN)
NAN_BOXED(4604683536576409232,64,FLEN)
NAN_BOXED(4604893985793580564,64,FLEN)
NAN_BOXED(13830272326769516861,64,FLEN)
NAN_BOXED(4604683536576409232,64,FLEN)
NAN_BOXED(4604893985793580564,64,FLEN)
NAN_BOXED(13830272326769516861,64,FLEN)
NAN_BOXED(4604683536576409232,64,FLEN)
NAN_BOXED(4604893985793580564,64,FLEN)
NAN_BOXED(13830272326769516861,64,FLEN)
NAN_BOXED(4604683536576409232,64,FLEN)
NAN_BOXED(4604893985793580564,64,FLEN)
NAN_BOXED(13830272326769516861,64,FLEN)
NAN_BOXED(4604683536576409232,64,FLEN)
NAN_BOXED(4604924383410144763,64,FLEN)
NAN_BOXED(13824937817112514449,64,FLEN)
NAN_BOXED(4599586775140105776,64,FLEN)
NAN_BOXED(4604924383410144763,64,FLEN)
NAN_BOXED(13824937817112514449,64,FLEN)
NAN_BOXED(4599586775140105776,64,FLEN)
NAN_BOXED(4604924383410144763,64,FLEN)
NAN_BOXED(13824937817112514449,64,FLEN)
NAN_BOXED(4599586775140105776,64,FLEN)
NAN_BOXED(4604924383410144763,64,FLEN)
NAN_BOXED(13824937817112514449,64,FLEN)
NAN_BOXED(4599586775140105776,64,FLEN)
NAN_BOXED(4604924383410144763,64,FLEN)
NAN_BOXED(13824937817112514449,64,FLEN)
NAN_BOXED(4599586775140105776,64,FLEN)
NAN_BOXED(4604972174252805156,64,FLEN)
NAN_BOXED(13831652250132440549,64,FLEN)
NAN_BOXED(4606628995453649937,64,FLEN)
NAN_BOXED(4604972174252805156,64,FLEN)
NAN_BOXED(13831652250132440549,64,FLEN)
NAN_BOXED(4606628995453649937,64,FLEN)
NAN_BOXED(4604972174252805156,64,FLEN)
NAN_BOXED(13831652250132440549,64,FLEN)
NAN_BOXED(4606628995453649937,64,FLEN)
NAN_BOXED(4604972174252805156,64,FLEN)
NAN_BOXED(13831652250132440549,64,FLEN)
NAN_BOXED(4606628995453649937,64,FLEN)
NAN_BOXED(4604972174252805156,64,FLEN)
NAN_BOXED(13831652250132440549,64,FLEN)
NAN_BOXED(4606628995453649937,64,FLEN)
NAN_BOXED(4604977010089269255,64,FLEN)
NAN_BOXED(13831511800775264296,64,FLEN)
NAN_BOXED(4606422889280701692,64,FLEN)
NAN_BOXED(4604977010089269255,64,FLEN)
NAN_BOXED(13831511800775264296,64,FLEN)
NAN_BOXED(4606422889280701692,64,FLEN)
NAN_BOXED(4604977010089269255,64,FLEN)
NAN_BOXED(13831511800775264296,64,FLEN)
NAN_BOXED(4606422889280701692,64,FLEN)
NAN_BOXED(4604977010089269255,64,FLEN)
NAN_BOXED(13831511800775264296,64,FLEN)
NAN_BOXED(4606422889280701692,64,FLEN)
NAN_BOXED(4604977010089269255,64,FLEN)
NAN_BOXED(13831511800775264296,64,FLEN)
NAN_BOXED(4606422889280701692,64,FLEN)
NAN_BOXED(4604989493482375899,64,FLEN)
NAN_BOXED(13831703403955367597,64,FLEN)
NAN_BOXED(4606727935863465177,64,FLEN)
NAN_BOXED(4604989493482375899,64,FLEN)
NAN_BOXED(13831703403955367597,64,FLEN)
NAN_BOXED(4606727935863465177,64,FLEN)
NAN_BOXED(4604989493482375899,64,FLEN)
NAN_BOXED(13831703403955367597,64,FLEN)
NAN_BOXED(4606727935863465177,64,FLEN)
NAN_BOXED(4604989493482375899,64,FLEN)
NAN_BOXED(13831703403955367597,64,FLEN)
NAN_BOXED(4606727935863465177,64,FLEN)
NAN_BOXED(4604989493482375899,64,FLEN)
NAN_BOXED(13831703403955367597,64,FLEN)
NAN_BOXED(4606727935863465177,64,FLEN)
NAN_BOXED(4605040088796151966,64,FLEN)
NAN_BOXED(13817116856984222761,64,FLEN)
NAN_BOXED(4591640869522119232,64,FLEN)
NAN_BOXED(4605040088796151966,64,FLEN)
NAN_BOXED(13817116856984222761,64,FLEN)
NAN_BOXED(4591640869522119232,64,FLEN)
NAN_BOXED(4605040088796151966,64,FLEN)
NAN_BOXED(13817116856984222761,64,FLEN)
NAN_BOXED(4591640869522119232,64,FLEN)
NAN_BOXED(4605040088796151966,64,FLEN)
NAN_BOXED(13817116856984222761,64,FLEN)
NAN_BOXED(4591640869522119232,64,FLEN)
NAN_BOXED(4605040088796151966,64,FLEN)
NAN_BOXED(13817116856984222761,64,FLEN)
NAN_BOXED(4591640869522119232,64,FLEN)
NAN_BOXED(4605064215619570976,64,FLEN)
NAN_BOXED(13827647163777732325,64,FLEN)
NAN_BOXED(4602840625160266002,64,FLEN)
NAN_BOXED(4605064215619570976,64,FLEN)
NAN_BOXED(13827647163777732325,64,FLEN)
NAN_BOXED(4602840625160266002,64,FLEN)
NAN_BOXED(4605064215619570976,64,FLEN)
NAN_BOXED(13827647163777732325,64,FLEN)
NAN_BOXED(4602840625160266002,64,FLEN)
NAN_BOXED(4605064215619570976,64,FLEN)
NAN_BOXED(13827647163777732325,64,FLEN)
NAN_BOXED(4602840625160266002,64,FLEN)
NAN_BOXED(4605064215619570976,64,FLEN)
NAN_BOXED(13827647163777732325,64,FLEN)
NAN_BOXED(4602840625160266002,64,FLEN)
NAN_BOXED(4605065557242756638,64,FLEN)
NAN_BOXED(13829397664509183679,64,FLEN)
NAN_BOXED(4604180633815031942,64,FLEN)
NAN_BOXED(4605065557242756638,64,FLEN)
NAN_BOXED(13829397664509183679,64,FLEN)
NAN_BOXED(4604180633815031942,64,FLEN)
NAN_BOXED(4605065557242756638,64,FLEN)
NAN_BOXED(13829397664509183679,64,FLEN)
NAN_BOXED(4604180633815031942,64,FLEN)
NAN_BOXED(4605065557242756638,64,FLEN)
NAN_BOXED(13829397664509183679,64,FLEN)
NAN_BOXED(4604180633815031942,64,FLEN)
NAN_BOXED(4605065557242756638,64,FLEN)
NAN_BOXED(13829397664509183679,64,FLEN)
NAN_BOXED(4604180633815031942,64,FLEN)
NAN_BOXED(4605070948327736824,64,FLEN)
NAN_BOXED(13828945048902005536,64,FLEN)
NAN_BOXED(4603838819210348571,64,FLEN)
NAN_BOXED(4605070948327736824,64,FLEN)
NAN_BOXED(13828945048902005536,64,FLEN)
NAN_BOXED(4603838819210348571,64,FLEN)
NAN_BOXED(4605070948327736824,64,FLEN)
NAN_BOXED(13828945048902005536,64,FLEN)
NAN_BOXED(4603838819210348571,64,FLEN)
NAN_BOXED(4605070948327736824,64,FLEN)
NAN_BOXED(13828945048902005536,64,FLEN)
NAN_BOXED(4603838819210348571,64,FLEN)
NAN_BOXED(4605070948327736824,64,FLEN)
NAN_BOXED(13828945048902005536,64,FLEN)
NAN_BOXED(4603838819210348571,64,FLEN)
NAN_BOXED(4605106507315398279,64,FLEN)
NAN_BOXED(13831445598924148367,64,FLEN)
NAN_BOXED(4606478025868417208,64,FLEN)
NAN_BOXED(4605106507315398279,64,FLEN)
NAN_BOXED(13831445598924148367,64,FLEN)
NAN_BOXED(4606478025868417208,64,FLEN)
NAN_BOXED(4605106507315398279,64,FLEN)
NAN_BOXED(13831445598924148367,64,FLEN)
NAN_BOXED(4606478025868417208,64,FLEN)
NAN_BOXED(4605106507315398279,64,FLEN)
NAN_BOXED(13831445598924148367,64,FLEN)
NAN_BOXED(4606478025868417208,64,FLEN)
NAN_BOXED(4605106507315398279,64,FLEN)
NAN_BOXED(13831445598924148367,64,FLEN)
NAN_BOXED(4606478025868417208,64,FLEN)
NAN_BOXED(4605110589506609628,64,FLEN)
NAN_BOXED(13820981593832813416,64,FLEN)
NAN_BOXED(4595667840968886612,64,FLEN)
NAN_BOXED(4605110589506609628,64,FLEN)
NAN_BOXED(13820981593832813416,64,FLEN)
NAN_BOXED(4595667840968886612,64,FLEN)
NAN_BOXED(4605110589506609628,64,FLEN)
NAN_BOXED(13820981593832813416,64,FLEN)
NAN_BOXED(4595667840968886612,64,FLEN)
NAN_BOXED(4605110589506609628,64,FLEN)
NAN_BOXED(13820981593832813416,64,FLEN)
NAN_BOXED(4595667840968886612,64,FLEN)
NAN_BOXED(4605110589506609628,64,FLEN)
NAN_BOXED(13820981593832813416,64,FLEN)
NAN_BOXED(4595667840968886612,64,FLEN)
NAN_BOXED(4605143766570286970,64,FLEN)
NAN_BOXED(13829795860907630996,64,FLEN)
NAN_BOXED(4604556869021002330,64,FLEN)
NAN_BOXED(4605143766570286970,64,FLEN)
NAN_BOXED(13829795860907630996,64,FLEN)
NAN_BOXED(4604556869021002330,64,FLEN)
NAN_BOXED(4605143766570286970,64,FLEN)
NAN_BOXED(13829795860907630996,64,FLEN)
NAN_BOXED(4604556869021002330,64,FLEN)
NAN_BOXED(4605143766570286970,64,FLEN)
NAN_BOXED(13829795860907630996,64,FLEN)
NAN_BOXED(4604556869021002330,64,FLEN)
NAN_BOXED(4605143766570286970,64,FLEN)
NAN_BOXED(13829795860907630996,64,FLEN)
NAN_BOXED(4604556869021002330,64,FLEN)
NAN_BOXED(4605173020514871010,64,FLEN)
NAN_BOXED(13831174772162073130,64,FLEN)
NAN_BOXED(4606136883161478741,64,FLEN)
NAN_BOXED(4605173020514871010,64,FLEN)
NAN_BOXED(13831174772162073130,64,FLEN)
NAN_BOXED(4606136883161478741,64,FLEN)
NAN_BOXED(4605173020514871010,64,FLEN)
NAN_BOXED(13831174772162073130,64,FLEN)
NAN_BOXED(4606136883161478741,64,FLEN)
NAN_BOXED(4605173020514871010,64,FLEN)
NAN_BOXED(13831174772162073130,64,FLEN)
NAN_BOXED(4606136883161478741,64,FLEN)
NAN_BOXED(4605173020514871010,64,FLEN)
NAN_BOXED(13831174772162073130,64,FLEN)
NAN_BOXED(4606136883161478741,64,FLEN)
NAN_BOXED(4605209498409683316,64,FLEN)
NAN_BOXED(13824287661938784076,64,FLEN)
NAN_BOXED(4599328911490172068,64,FLEN)
NAN_BOXED(4605209498409683316,64,FLEN)
NAN_BOXED(13824287661938784076,64,FLEN)
NAN_BOXED(4599328911490172068,64,FLEN)
NAN_BOXED(4605209498409683316,64,FLEN)
NAN_BOXED(13824287661938784076,64,FLEN)
NAN_BOXED(4599328911490172068,64,FLEN)
NAN_BOXED(4605209498409683316,64,FLEN)
NAN_BOXED(13824287661938784076,64,FLEN)
NAN_BOXED(4599328911490172068,64,FLEN)
NAN_BOXED(4605209498409683316,64,FLEN)
NAN_BOXED(13824287661938784076,64,FLEN)
NAN_BOXED(4599328911490172068,64,FLEN)
NAN_BOXED(4605295803427706638,64,FLEN)
NAN_BOXED(13830485811176058150,64,FLEN)
NAN_BOXED(4605241536973165682,64,FLEN)
NAN_BOXED(4605295803427706638,64,FLEN)
NAN_BOXED(13830485811176058150,64,FLEN)
NAN_BOXED(4605241536973165682,64,FLEN)
NAN_BOXED(4605295803427706638,64,FLEN)
NAN_BOXED(13830485811176058150,64,FLEN)
NAN_BOXED(4605241536973165682,64,FLEN)
NAN_BOXED(4605295803427706638,64,FLEN)
NAN_BOXED(13830485811176058150,64,FLEN)
NAN_BOXED(4605241536973165682,64,FLEN)
NAN_BOXED(4605295803427706638,64,FLEN)
NAN_BOXED(13830485811176058150,64,FLEN)
NAN_BOXED(4605241536973165682,64,FLEN)
NAN_BOXED(4605337928909322407,64,FLEN)
NAN_BOXED(13813384819927898798,64,FLEN)
NAN_BOXED(4588667075739986560,64,FLEN)
NAN_BOXED(4605337928909322407,64,FLEN)
NAN_BOXED(13813384819927898798,64,FLEN)
NAN_BOXED(4588667075739986560,64,FLEN)
NAN_BOXED(4605337928909322407,64,FLEN)
NAN_BOXED(13813384819927898798,64,FLEN)
NAN_BOXED(4588667075739986560,64,FLEN)
NAN_BOXED(4605337928909322407,64,FLEN)
NAN_BOXED(13813384819927898798,64,FLEN)
NAN_BOXED(4588667075739986560,64,FLEN)
NAN_BOXED(4605337928909322407,64,FLEN)
NAN_BOXED(13813384819927898798,64,FLEN)
NAN_BOXED(4588667075739986560,64,FLEN)
NAN_BOXED(4605359293954766096,64,FLEN)
NAN_BOXED(13831474576398269691,64,FLEN)
NAN_BOXED(4606827056729830861,64,FLEN)
NAN_BOXED(4605359293954766096,64,FLEN)
NAN_BOXED(13831474576398269691,64,FLEN)
NAN_BOXED(4606827056729830861,64,FLEN)
NAN_BOXED(4605359293954766096,64,FLEN)
NAN_BOXED(13831474576398269691,64,FLEN)
NAN_BOXED(4606827056729830861,64,FLEN)
NAN_BOXED(4605359293954766096,64,FLEN)
NAN_BOXED(13831474576398269691,64,FLEN)
NAN_BOXED(4606827056729830861,64,FLEN)
NAN_BOXED(4605359293954766096,64,FLEN)
NAN_BOXED(13831474576398269691,64,FLEN)
NAN_BOXED(4606827056729830861,64,FLEN)
NAN_BOXED(4605371769659066789,64,FLEN)
NAN_BOXED(13831547034676500765,64,FLEN)
NAN_BOXED(4606957866395597973,64,FLEN)
NAN_BOXED(4605371769659066789,64,FLEN)
NAN_BOXED(13831547034676500765,64,FLEN)
NAN_BOXED(4606957866395597973,64,FLEN)
NAN_BOXED(4605371769659066789,64,FLEN)
NAN_BOXED(13831547034676500765,64,FLEN)
NAN_BOXED(4606957866395597973,64,FLEN)
NAN_BOXED(4605371769659066789,64,FLEN)
NAN_BOXED(13831547034676500765,64,FLEN)
NAN_BOXED(4606957866395597973,64,FLEN)
NAN_BOXED(4605371769659066789,64,FLEN)
NAN_BOXED(13831547034676500765,64,FLEN)
NAN_BOXED(4606957866395597973,64,FLEN)
NAN_BOXED(4605382294538073573,64,FLEN)
NAN_BOXED(13829584508171782654,64,FLEN)
NAN_BOXED(4604606194881406992,64,FLEN)
NAN_BOXED(4605382294538073573,64,FLEN)
NAN_BOXED(13829584508171782654,64,FLEN)
NAN_BOXED(4604606194881406992,64,FLEN)
NAN_BOXED(4605382294538073573,64,FLEN)
NAN_BOXED(13829584508171782654,64,FLEN)
NAN_BOXED(4604606194881406992,64,FLEN)
NAN_BOXED(4605382294538073573,64,FLEN)
NAN_BOXED(13829584508171782654,64,FLEN)
NAN_BOXED(4604606194881406992,64,FLEN)
NAN_BOXED(4605382294538073573,64,FLEN)
NAN_BOXED(13829584508171782654,64,FLEN)
NAN_BOXED(4604606194881406992,64,FLEN)
NAN_BOXED(4605412308955832186,64,FLEN)
NAN_BOXED(13822520172374872519,64,FLEN)
NAN_BOXED(4597968543505450832,64,FLEN)
NAN_BOXED(4605412308955832186,64,FLEN)
NAN_BOXED(13822520172374872519,64,FLEN)
NAN_BOXED(4597968543505450832,64,FLEN)
NAN_BOXED(4605412308955832186,64,FLEN)
NAN_BOXED(13822520172374872519,64,FLEN)
NAN_BOXED(4597968543505450832,64,FLEN)
NAN_BOXED(4605412308955832186,64,FLEN)
NAN_BOXED(13822520172374872519,64,FLEN)
NAN_BOXED(4597968543505450832,64,FLEN)
NAN_BOXED(4605412308955832186,64,FLEN)
NAN_BOXED(13822520172374872519,64,FLEN)
NAN_BOXED(4597968543505450832,64,FLEN)
NAN_BOXED(4605440785835263234,64,FLEN)
NAN_BOXED(13831434934233605214,64,FLEN)
NAN_BOXED(4606861244137638362,64,FLEN)
NAN_BOXED(4605440785835263234,64,FLEN)
NAN_BOXED(13831434934233605214,64,FLEN)
NAN_BOXED(4606861244137638362,64,FLEN)
NAN_BOXED(4605440785835263234,64,FLEN)
NAN_BOXED(13831434934233605214,64,FLEN)
NAN_BOXED(4606861244137638362,64,FLEN)
NAN_BOXED(4605440785835263234,64,FLEN)
NAN_BOXED(13831434934233605214,64,FLEN)
NAN_BOXED(4606861244137638362,64,FLEN)
NAN_BOXED(4605440785835263234,64,FLEN)
NAN_BOXED(13831434934233605214,64,FLEN)
NAN_BOXED(4606861244137638362,64,FLEN)
NAN_BOXED(4605552840922976608,64,FLEN)
NAN_BOXED(13811418843584259619,64,FLEN)
NAN_BOXED(4586620078235792240,64,FLEN)
NAN_BOXED(4605552840922976608,64,FLEN)
NAN_BOXED(13811418843584259619,64,FLEN)
NAN_BOXED(4586620078235792240,64,FLEN)
NAN_BOXED(4605552840922976608,64,FLEN)
NAN_BOXED(13811418843584259619,64,FLEN)
NAN_BOXED(4586620078235792240,64,FLEN)
NAN_BOXED(4605552840922976608,64,FLEN)
NAN_BOXED(13811418843584259619,64,FLEN)
NAN_BOXED(4586620078235792240,64,FLEN)
NAN_BOXED(4605552840922976608,64,FLEN)
NAN_BOXED(13811418843584259619,64,FLEN)
NAN_BOXED(4586620078235792240,64,FLEN)
NAN_BOXED(4605566649372218004,64,FLEN)
NAN_BOXED(13826940629274434714,64,FLEN)
NAN_BOXED(4602523369724716374,64,FLEN)
NAN_BOXED(4605566649372218004,64,FLEN)
NAN_BOXED(13826940629274434714,64,FLEN)
NAN_BOXED(4602523369724716374,64,FLEN)
NAN_BOXED(4605566649372218004,64,FLEN)
NAN_BOXED(13826940629274434714,64,FLEN)
NAN_BOXED(4602523369724716374,64,FLEN)
NAN_BOXED(4605566649372218004,64,FLEN)
NAN_BOXED(13826940629274434714,64,FLEN)
NAN_BOXED(4602523369724716374,64,FLEN)
NAN_BOXED(4605566649372218004,64,FLEN)
NAN_BOXED(13826940629274434714,64,FLEN)
NAN_BOXED(4602523369724716374,64,FLEN)
NAN_BOXED(4605685668922037314,64,FLEN)
NAN_BOXED(13819599521543838229,64,FLEN)
NAN_BOXED(4595054395010654508,64,FLEN)
NAN_BOXED(4605685668922037314,64,FLEN)
NAN_BOXED(13819599521543838229,64,FLEN)
NAN_BOXED(4595054395010654508,64,FLEN)
NAN_BOXED(4605685668922037314,64,FLEN)
NAN_BOXED(13819599521543838229,64,FLEN)
NAN_BOXED(4595054395010654508,64,FLEN)
NAN_BOXED(4605685668922037314,64,FLEN)
NAN_BOXED(13819599521543838229,64,FLEN)
NAN_BOXED(4595054395010654508,64,FLEN)
NAN_BOXED(4605685668922037314,64,FLEN)
NAN_BOXED(13819599521543838229,64,FLEN)
NAN_BOXED(4595054395010654508,64,FLEN)
NAN_BOXED(4605711063884073391,64,FLEN)
NAN_BOXED(13829723549246376286,64,FLEN)
NAN_BOXED(4605015888705102744,64,FLEN)
NAN_BOXED(4605711063884073391,64,FLEN)
NAN_BOXED(13829723549246376286,64,FLEN)
NAN_BOXED(4605015888705102744,64,FLEN)
NAN_BOXED(4605711063884073391,64,FLEN)
NAN_BOXED(13829723549246376286,64,FLEN)
NAN_BOXED(4605015888705102744,64,FLEN)
NAN_BOXED(4605711063884073391,64,FLEN)
NAN_BOXED(13829723549246376286,64,FLEN)
NAN_BOXED(4605015888705102744,64,FLEN)
NAN_BOXED(4605711063884073391,64,FLEN)
NAN_BOXED(13829723549246376286,64,FLEN)
NAN_BOXED(4605015888705102744,64,FLEN)
NAN_BOXED(4605727418584375185,64,FLEN)
NAN_BOXED(13829206103170764162,64,FLEN)
NAN_BOXED(4604596875554710246,64,FLEN)
NAN_BOXED(4605727418584375185,64,FLEN)
NAN_BOXED(13829206103170764162,64,FLEN)
NAN_BOXED(4604596875554710246,64,FLEN)
NAN_BOXED(4605727418584375185,64,FLEN)
NAN_BOXED(13829206103170764162,64,FLEN)
NAN_BOXED(4604596875554710246,64,FLEN)
NAN_BOXED(4605727418584375185,64,FLEN)
NAN_BOXED(13829206103170764162,64,FLEN)
NAN_BOXED(4604596875554710246,64,FLEN)
NAN_BOXED(4605727418584375185,64,FLEN)
NAN_BOXED(13829206103170764162,64,FLEN)
NAN_BOXED(4604596875554710246,64,FLEN)
NAN_BOXED(4605727490728433293,64,FLEN)
NAN_BOXED(13831161280234237789,64,FLEN)
NAN_BOXED(4606745099788687690,64,FLEN)
NAN_BOXED(4605727490728433293,64,FLEN)
NAN_BOXED(13831161280234237789,64,FLEN)
NAN_BOXED(4606745099788687690,64,FLEN)
NAN_BOXED(4605727490728433293,64,FLEN)
NAN_BOXED(13831161280234237789,64,FLEN)
NAN_BOXED(4606745099788687690,64,FLEN)
NAN_BOXED(4605727490728433293,64,FLEN)
NAN_BOXED(13831161280234237789,64,FLEN)
NAN_BOXED(4606745099788687690,64,FLEN)
NAN_BOXED(4605727490728433293,64,FLEN)
NAN_BOXED(13831161280234237789,64,FLEN)
NAN_BOXED(4606745099788687690,64,FLEN)
NAN_BOXED(4605789245920179491,64,FLEN)
NAN_BOXED(13830507915870033709,64,FLEN)
NAN_BOXED(4605749904595687898,64,FLEN)
NAN_BOXED(4605789245920179491,64,FLEN)
NAN_BOXED(13830507915870033709,64,FLEN)
NAN_BOXED(4605749904595687898,64,FLEN)
NAN_BOXED(4605789245920179491,64,FLEN)
NAN_BOXED(13830507915870033709,64,FLEN)
NAN_BOXED(4605749904595687898,64,FLEN)
NAN_BOXED(4605789245920179491,64,FLEN)
NAN_BOXED(13830507915870033709,64,FLEN)
NAN_BOXED(4605749904595687898,64,FLEN)
NAN_BOXED(4605789245920179491,64,FLEN)
NAN_BOXED(13830507915870033709,64,FLEN)
NAN_BOXED(4605749904595687898,64,FLEN)
NAN_BOXED(4605799563789089230,64,FLEN)
NAN_BOXED(13825857439828081986,64,FLEN)
NAN_BOXED(4601132242715751224,64,FLEN)
NAN_BOXED(4605799563789089230,64,FLEN)
NAN_BOXED(13825857439828081986,64,FLEN)
NAN_BOXED(4601132242715751224,64,FLEN)
NAN_BOXED(4605799563789089230,64,FLEN)
NAN_BOXED(13825857439828081986,64,FLEN)
NAN_BOXED(4601132242715751224,64,FLEN)
NAN_BOXED(4605799563789089230,64,FLEN)
NAN_BOXED(13825857439828081986,64,FLEN)
NAN_BOXED(4601132242715751224,64,FLEN)
NAN_BOXED(4605799563789089230,64,FLEN)
NAN_BOXED(13825857439828081986,64,FLEN)
NAN_BOXED(4601132242715751224,64,FLEN)
NAN_BOXED(4605821348054938698,64,FLEN)
NAN_BOXED(13824866902520367175,64,FLEN)
NAN_BOXED(4600312701197193330,64,FLEN)
NAN_BOXED(4605821348054938698,64,FLEN)
NAN_BOXED(13824866902520367175,64,FLEN)
NAN_BOXED(4600312701197193330,64,FLEN)
NAN_BOXED(4605821348054938698,64,FLEN)
NAN_BOXED(13824866902520367175,64,FLEN)
NAN_BOXED(4600312701197193330,64,FLEN)
NAN_BOXED(4605821348054938698,64,FLEN)
NAN_BOXED(13824866902520367175,64,FLEN)
NAN_BOXED(4600312701197193330,64,FLEN)
NAN_BOXED(4605821348054938698,64,FLEN)
NAN_BOXED(13824866902520367175,64,FLEN)
NAN_BOXED(4600312701197193330,64,FLEN)
NAN_BOXED(4605833770803954981,64,FLEN)
NAN_BOXED(13825293497114243847,64,FLEN)
NAN_BOXED(4600686211617818814,64,FLEN)
NAN_BOXED(4605833770803954981,64,FLEN)
NAN_BOXED(13825293497114243847,64,FLEN)
NAN_BOXED(4600686211617818814,64,FLEN)
NAN_BOXED(4605833770803954981,64,FLEN)
NAN_BOXED(13825293497114243847,64,FLEN)
NAN_BOXED(4600686211617818814,64,FLEN)
NAN_BOXED(4605833770803954981,64,FLEN)
NAN_BOXED(13825293497114243847,64,FLEN)
NAN_BOXED(4600686211617818814,64,FLEN)
NAN_BOXED(4605833770803954981,64,FLEN)
NAN_BOXED(13825293497114243847,64,FLEN)
NAN_BOXED(4600686211617818814,64,FLEN)
NAN_BOXED(4605838136243900835,64,FLEN)
NAN_BOXED(13819115455672747258,64,FLEN)
NAN_BOXED(4594762071199254756,64,FLEN)
NAN_BOXED(4605838136243900835,64,FLEN)
NAN_BOXED(13819115455672747258,64,FLEN)
NAN_BOXED(4594762071199254756,64,FLEN)
NAN_BOXED(4605838136243900835,64,FLEN)
NAN_BOXED(13819115455672747258,64,FLEN)
NAN_BOXED(4594762071199254756,64,FLEN)
NAN_BOXED(4605838136243900835,64,FLEN)
NAN_BOXED(13819115455672747258,64,FLEN)
NAN_BOXED(4594762071199254756,64,FLEN)
NAN_BOXED(4605838136243900835,64,FLEN)
NAN_BOXED(13819115455672747258,64,FLEN)
NAN_BOXED(4594762071199254756,64,FLEN)
NAN_BOXED(4605870052668988233,64,FLEN)
NAN_BOXED(13830979155043309699,64,FLEN)
NAN_BOXED(4606595692422245975,64,FLEN)
NAN_BOXED(4605870052668988233,64,FLEN)
NAN_BOXED(13830979155043309699,64,FLEN)
NAN_BOXED(4606595692422245975,64,FLEN)
NAN_BOXED(4605870052668988233,64,FLEN)
NAN_BOXED(13830979155043309699,64,FLEN)
NAN_BOXED(4606595692422245975,64,FLEN)
NAN_BOXED(4605870052668988233,64,FLEN)
NAN_BOXED(13830979155043309699,64,FLEN)
NAN_BOXED(4606595692422245975,64,FLEN)
NAN_BOXED(4605870052668988233,64,FLEN)
NAN_BOXED(13830979155043309699,64,FLEN)
NAN_BOXED(4606595692422245975,64,FLEN)
NAN_BOXED(4606013162504477627,64,FLEN)
NAN_BOXED(13830801989608904334,64,FLEN)
NAN_BOXED(4606443963901874772,64,FLEN)
NAN_BOXED(4606013162504477627,64,FLEN)
NAN_BOXED(13830801989608904334,64,FLEN)
NAN_BOXED(4606443963901874772,64,FLEN)
NAN_BOXED(4606013162504477627,64,FLEN)
NAN_BOXED(13830801989608904334,64,FLEN)
NAN_BOXED(4606443963901874772,64,FLEN)
NAN_BOXED(4606013162504477627,64,FLEN)
NAN_BOXED(13830801989608904334,64,FLEN)
NAN_BOXED(4606443963901874772,64,FLEN)
NAN_BOXED(4606013162504477627,64,FLEN)
NAN_BOXED(13830801989608904334,64,FLEN)
NAN_BOXED(4606443963901874772,64,FLEN)
NAN_BOXED(4606084567199914377,64,FLEN)
NAN_BOXED(13824804708350589820,64,FLEN)
NAN_BOXED(4600486707866908640,64,FLEN)
NAN_BOXED(4606084567199914377,64,FLEN)
NAN_BOXED(13824804708350589820,64,FLEN)
NAN_BOXED(4600486707866908640,64,FLEN)
NAN_BOXED(4606084567199914377,64,FLEN)
NAN_BOXED(13824804708350589820,64,FLEN)
NAN_BOXED(4600486707866908640,64,FLEN)
NAN_BOXED(4606084567199914377,64,FLEN)
NAN_BOXED(13824804708350589820,64,FLEN)
NAN_BOXED(4600486707866908640,64,FLEN)
NAN_BOXED(4606084567199914377,64,FLEN)
NAN_BOXED(13824804708350589820,64,FLEN)
NAN_BOXED(4600486707866908640,64,FLEN)
NAN_BOXED(4606120350308879666,64,FLEN)
NAN_BOXED(13823812371957977767,64,FLEN)
NAN_BOXED(4599642213631646348,64,FLEN)
NAN_BOXED(4606120350308879666,64,FLEN)
NAN_BOXED(13823812371957977767,64,FLEN)
NAN_BOXED(4599642213631646348,64,FLEN)
NAN_BOXED(4606120350308879666,64,FLEN)
NAN_BOXED(13823812371957977767,64,FLEN)
NAN_BOXED(4599642213631646348,64,FLEN)
NAN_BOXED(4606120350308879666,64,FLEN)
NAN_BOXED(13823812371957977767,64,FLEN)
NAN_BOXED(4599642213631646348,64,FLEN)
NAN_BOXED(4606120350308879666,64,FLEN)
NAN_BOXED(13823812371957977767,64,FLEN)
NAN_BOXED(4599642213631646348,64,FLEN)
NAN_BOXED(4606140404561212492,64,FLEN)
NAN_BOXED(13828557778654214494,64,FLEN)
NAN_BOXED(4604374716773379586,64,FLEN)
NAN_BOXED(4606140404561212492,64,FLEN)
NAN_BOXED(13828557778654214494,64,FLEN)
NAN_BOXED(4604374716773379586,64,FLEN)
NAN_BOXED(4606140404561212492,64,FLEN)
NAN_BOXED(13828557778654214494,64,FLEN)
NAN_BOXED(4604374716773379586,64,FLEN)
NAN_BOXED(4606140404561212492,64,FLEN)
NAN_BOXED(13828557778654214494,64,FLEN)
NAN_BOXED(4604374716773379586,64,FLEN)
NAN_BOXED(4606140404561212492,64,FLEN)
NAN_BOXED(13828557778654214494,64,FLEN)
NAN_BOXED(4604374716773379586,64,FLEN)
NAN_BOXED(4606145920403152053,64,FLEN)
NAN_BOXED(13819405644662431799,64,FLEN)
NAN_BOXED(4595243554179022360,64,FLEN)
NAN_BOXED(4606145920403152053,64,FLEN)
NAN_BOXED(13819405644662431799,64,FLEN)
NAN_BOXED(4595243554179022360,64,FLEN)
NAN_BOXED(4606145920403152053,64,FLEN)
NAN_BOXED(13819405644662431799,64,FLEN)
NAN_BOXED(4595243554179022360,64,FLEN)
NAN_BOXED(4606145920403152053,64,FLEN)
NAN_BOXED(13819405644662431799,64,FLEN)
NAN_BOXED(4595243554179022360,64,FLEN)
NAN_BOXED(4606145920403152053,64,FLEN)
NAN_BOXED(13819405644662431799,64,FLEN)
NAN_BOXED(4595243554179022360,64,FLEN)
NAN_BOXED(4606207707267723639,64,FLEN)
NAN_BOXED(13827817462824369317,64,FLEN)
NAN_BOXED(4603766897346122961,64,FLEN)
NAN_BOXED(4606207707267723639,64,FLEN)
NAN_BOXED(13827817462824369317,64,FLEN)
NAN_BOXED(4603766897346122961,64,FLEN)
NAN_BOXED(4606207707267723639,64,FLEN)
NAN_BOXED(13827817462824369317,64,FLEN)
NAN_BOXED(4603766897346122961,64,FLEN)
NAN_BOXED(4606207707267723639,64,FLEN)
NAN_BOXED(13827817462824369317,64,FLEN)
NAN_BOXED(4603766897346122961,64,FLEN)
NAN_BOXED(4606207707267723639,64,FLEN)
NAN_BOXED(13827817462824369317,64,FLEN)
NAN_BOXED(4603766897346122961,64,FLEN)
NAN_BOXED(4606209165078304019,64,FLEN)
NAN_BOXED(13822125188535100622,64,FLEN)
NAN_BOXED(4598204077594151376,64,FLEN)
NAN_BOXED(4606209165078304019,64,FLEN)
NAN_BOXED(13822125188535100622,64,FLEN)
NAN_BOXED(4598204077594151376,64,FLEN)
NAN_BOXED(4606209165078304019,64,FLEN)
NAN_BOXED(13822125188535100622,64,FLEN)
NAN_BOXED(4598204077594151376,64,FLEN)
NAN_BOXED(4606209165078304019,64,FLEN)
NAN_BOXED(13822125188535100622,64,FLEN)
NAN_BOXED(4598204077594151376,64,FLEN)
NAN_BOXED(4606209165078304019,64,FLEN)
NAN_BOXED(13822125188535100622,64,FLEN)
NAN_BOXED(4598204077594151376,64,FLEN)
NAN_BOXED(4606209817678649568,64,FLEN)
NAN_BOXED(13826172562883207468,64,FLEN)
NAN_BOXED(4601923347849044376,64,FLEN)
NAN_BOXED(4606209817678649568,64,FLEN)
NAN_BOXED(13826172562883207468,64,FLEN)
NAN_BOXED(4601923347849044376,64,FLEN)
NAN_BOXED(4606209817678649568,64,FLEN)
NAN_BOXED(13826172562883207468,64,FLEN)
NAN_BOXED(4601923347849044376,64,FLEN)
NAN_BOXED(4606209817678649568,64,FLEN)
NAN_BOXED(13826172562883207468,64,FLEN)
NAN_BOXED(4601923347849044376,64,FLEN)
NAN_BOXED(4606209817678649568,64,FLEN)
NAN_BOXED(13826172562883207468,64,FLEN)
NAN_BOXED(4601923347849044376,64,FLEN)
NAN_BOXED(4606210376813650433,64,FLEN)
NAN_BOXED(13825811503668165366,64,FLEN)
NAN_BOXED(4601493255336169106,64,FLEN)
NAN_BOXED(4606210376813650433,64,FLEN)
NAN_BOXED(13825811503668165366,64,FLEN)
NAN_BOXED(4601493255336169106,64,FLEN)
NAN_BOXED(4606210376813650433,64,FLEN)
NAN_BOXED(13825811503668165366,64,FLEN)
NAN_BOXED(4601493255336169106,64,FLEN)
NAN_BOXED(4606210376813650433,64,FLEN)
NAN_BOXED(13825811503668165366,64,FLEN)
NAN_BOXED(4601493255336169106,64,FLEN)
NAN_BOXED(4606210376813650433,64,FLEN)
NAN_BOXED(13825811503668165366,64,FLEN)
NAN_BOXED(4601493255336169106,64,FLEN)
NAN_BOXED(4606221975651819680,64,FLEN)
NAN_BOXED(13827248228608306400,64,FLEN)
NAN_BOXED(4603268293611097321,64,FLEN)
NAN_BOXED(4606221975651819680,64,FLEN)
NAN_BOXED(13827248228608306400,64,FLEN)
NAN_BOXED(4603268293611097321,64,FLEN)
NAN_BOXED(4606221975651819680,64,FLEN)
NAN_BOXED(13827248228608306400,64,FLEN)
NAN_BOXED(4603268293611097321,64,FLEN)
NAN_BOXED(4606221975651819680,64,FLEN)
NAN_BOXED(13827248228608306400,64,FLEN)
NAN_BOXED(4603268293611097321,64,FLEN)
NAN_BOXED(4606221975651819680,64,FLEN)
NAN_BOXED(13827248228608306400,64,FLEN)
NAN_BOXED(4603268293611097321,64,FLEN)
NAN_BOXED(4606308731718336993,64,FLEN)
NAN_BOXED(13830872815126495949,64,FLEN)
NAN_BOXED(4606883689719213986,64,FLEN)
NAN_BOXED(4606308731718336993,64,FLEN)
NAN_BOXED(13830872815126495949,64,FLEN)
NAN_BOXED(4606883689719213986,64,FLEN)
NAN_BOXED(4606308731718336993,64,FLEN)
NAN_BOXED(13830872815126495949,64,FLEN)
NAN_BOXED(4606883689719213986,64,FLEN)
NAN_BOXED(4606308731718336993,64,FLEN)
NAN_BOXED(13830872815126495949,64,FLEN)
NAN_BOXED(4606883689719213986,64,FLEN)
NAN_BOXED(4606308731718336993,64,FLEN)
NAN_BOXED(13830872815126495949,64,FLEN)
NAN_BOXED(4606883689719213986,64,FLEN)
NAN_BOXED(4606337411451077730,64,FLEN)
NAN_BOXED(13830666755716255398,64,FLEN)
NAN_BOXED(4606540940789502246,64,FLEN)
NAN_BOXED(4606337411451077730,64,FLEN)
NAN_BOXED(13830666755716255398,64,FLEN)
NAN_BOXED(4606540940789502246,64,FLEN)
NAN_BOXED(4606337411451077730,64,FLEN)
NAN_BOXED(13830666755716255398,64,FLEN)
NAN_BOXED(4606540940789502246,64,FLEN)
NAN_BOXED(4606337411451077730,64,FLEN)
NAN_BOXED(13830666755716255398,64,FLEN)
NAN_BOXED(4606540940789502246,64,FLEN)
NAN_BOXED(4606337411451077730,64,FLEN)
NAN_BOXED(13830666755716255398,64,FLEN)
NAN_BOXED(4606540940789502246,64,FLEN)
NAN_BOXED(4606361143595402069,64,FLEN)
NAN_BOXED(13828081091999849743,64,FLEN)
NAN_BOXED(4604113300902563731,64,FLEN)
NAN_BOXED(4606361143595402069,64,FLEN)
NAN_BOXED(13828081091999849743,64,FLEN)
NAN_BOXED(4604113300902563731,64,FLEN)
NAN_BOXED(4606361143595402069,64,FLEN)
NAN_BOXED(13828081091999849743,64,FLEN)
NAN_BOXED(4604113300902563731,64,FLEN)
NAN_BOXED(4606361143595402069,64,FLEN)
NAN_BOXED(13828081091999849743,64,FLEN)
NAN_BOXED(4604113300902563731,64,FLEN)
NAN_BOXED(4606361143595402069,64,FLEN)
NAN_BOXED(13828081091999849743,64,FLEN)
NAN_BOXED(4604113300902563731,64,FLEN)
NAN_BOXED(4606361157912749269,64,FLEN)
NAN_BOXED(13830221318644088204,64,FLEN)
NAN_BOXED(4606058395759894709,64,FLEN)
NAN_BOXED(4606361157912749269,64,FLEN)
NAN_BOXED(13830221318644088204,64,FLEN)
NAN_BOXED(4606058395759894709,64,FLEN)
NAN_BOXED(4606361157912749269,64,FLEN)
NAN_BOXED(13830221318644088204,64,FLEN)
NAN_BOXED(4606058395759894709,64,FLEN)
NAN_BOXED(4606361157912749269,64,FLEN)
NAN_BOXED(13830221318644088204,64,FLEN)
NAN_BOXED(4606058395759894709,64,FLEN)
NAN_BOXED(4606361157912749269,64,FLEN)
NAN_BOXED(13830221318644088204,64,FLEN)
NAN_BOXED(4606058395759894709,64,FLEN)
NAN_BOXED(4606379540330599763,64,FLEN)
NAN_BOXED(13828743125167286326,64,FLEN)
NAN_BOXED(4604729667162764532,64,FLEN)
NAN_BOXED(4606379540330599763,64,FLEN)
NAN_BOXED(13828743125167286326,64,FLEN)
NAN_BOXED(4604729667162764532,64,FLEN)
NAN_BOXED(4606379540330599763,64,FLEN)
NAN_BOXED(13828743125167286326,64,FLEN)
NAN_BOXED(4604729667162764532,64,FLEN)
NAN_BOXED(4606379540330599763,64,FLEN)
NAN_BOXED(13828743125167286326,64,FLEN)
NAN_BOXED(4604729667162764532,64,FLEN)
NAN_BOXED(4606379540330599763,64,FLEN)
NAN_BOXED(13828743125167286326,64,FLEN)
NAN_BOXED(4604729667162764532,64,FLEN)
NAN_BOXED(4606393075833593967,64,FLEN)
NAN_BOXED(13821527657993308472,64,FLEN)
NAN_BOXED(4597367995672086604,64,FLEN)
NAN_BOXED(4606393075833593967,64,FLEN)
NAN_BOXED(13821527657993308472,64,FLEN)
NAN_BOXED(4597367995672086604,64,FLEN)
NAN_BOXED(4606393075833593967,64,FLEN)
NAN_BOXED(13821527657993308472,64,FLEN)
NAN_BOXED(4597367995672086604,64,FLEN)
NAN_BOXED(4606393075833593967,64,FLEN)
NAN_BOXED(13821527657993308472,64,FLEN)
NAN_BOXED(4597367995672086604,64,FLEN)
NAN_BOXED(4606393075833593967,64,FLEN)
NAN_BOXED(13821527657993308472,64,FLEN)
NAN_BOXED(4597367995672086604,64,FLEN)
NAN_BOXED(4606414614907126878,64,FLEN)
NAN_BOXED(13823582688911622215,64,FLEN)
NAN_BOXED(4599653243012145622,64,FLEN)
NAN_BOXED(4606414614907126878,64,FLEN)
NAN_BOXED(13823582688911622215,64,FLEN)
NAN_BOXED(4599653243012145622,64,FLEN)
NAN_BOXED(4606414614907126878,64,FLEN)
NAN_BOXED(13823582688911622215,64,FLEN)
NAN_BOXED(4599653243012145622,64,FLEN)
NAN_BOXED(4606414614907126878,64,FLEN)
NAN_BOXED(13823582688911622215,64,FLEN)
NAN_BOXED(4599653243012145622,64,FLEN)
NAN_BOXED(4606414614907126878,64,FLEN)
NAN_BOXED(13823582688911622215,64,FLEN)
NAN_BOXED(4599653243012145622,64,FLEN)
NAN_BOXED(4606422573726224832,64,FLEN)
NAN_BOXED(13828296575386731376,64,FLEN)
NAN_BOXED(4604355167672219844,64,FLEN)
NAN_BOXED(4606422573726224832,64,FLEN)
NAN_BOXED(13828296575386731376,64,FLEN)
NAN_BOXED(4604355167672219844,64,FLEN)
NAN_BOXED(4606422573726224832,64,FLEN)
NAN_BOXED(13828296575386731376,64,FLEN)
NAN_BOXED(4604355167672219844,64,FLEN)
NAN_BOXED(4606422573726224832,64,FLEN)
NAN_BOXED(13828296575386731376,64,FLEN)
NAN_BOXED(4604355167672219844,64,FLEN)
NAN_BOXED(4606422573726224832,64,FLEN)
NAN_BOXED(13828296575386731376,64,FLEN)
NAN_BOXED(4604355167672219844,64,FLEN)
NAN_BOXED(4606478089755436705,64,FLEN)
NAN_BOXED(13829863901853371905,64,FLEN)
NAN_BOXED(4605841534659432135,64,FLEN)
NAN_BOXED(4606478089755436705,64,FLEN)
NAN_BOXED(13829863901853371905,64,FLEN)
NAN_BOXED(4605841534659432135,64,FLEN)
NAN_BOXED(4606478089755436705,64,FLEN)
NAN_BOXED(13829863901853371905,64,FLEN)
NAN_BOXED(4605841534659432135,64,FLEN)
NAN_BOXED(4606478089755436705,64,FLEN)
NAN_BOXED(13829863901853371905,64,FLEN)
NAN_BOXED(4605841534659432135,64,FLEN)
NAN_BOXED(4606478089755436705,64,FLEN)
NAN_BOXED(13829863901853371905,64,FLEN)
NAN_BOXED(4605841534659432135,64,FLEN)
NAN_BOXED(4606533864962222502,64,FLEN)
NAN_BOXED(13830624546594439222,64,FLEN)
NAN_BOXED(4606663953193840817,64,FLEN)
NAN_BOXED(4606533864962222502,64,FLEN)
NAN_BOXED(13830624546594439222,64,FLEN)
NAN_BOXED(4606663953193840817,64,FLEN)
NAN_BOXED(4606533864962222502,64,FLEN)
NAN_BOXED(13830624546594439222,64,FLEN)
NAN_BOXED(4606663953193840817,64,FLEN)
NAN_BOXED(4606533864962222502,64,FLEN)
NAN_BOXED(13830624546594439222,64,FLEN)
NAN_BOXED(4606663953193840817,64,FLEN)
NAN_BOXED(4606533864962222502,64,FLEN)
NAN_BOXED(13830624546594439222,64,FLEN)
NAN_BOXED(4606663953193840817,64,FLEN)
NAN_BOXED(4606587454743973873,64,FLEN)
NAN_BOXED(13818855931605746851,64,FLEN)
NAN_BOXED(4595066704214804692,64,FLEN)
NAN_BOXED(4606587454743973873,64,FLEN)
NAN_BOXED(13818855931605746851,64,FLEN)
NAN_BOXED(4595066704214804692,64,FLEN)
NAN_BOXED(4606587454743973873,64,FLEN)
NAN_BOXED(13818855931605746851,64,FLEN)
NAN_BOXED(4595066704214804692,64,FLEN)
NAN_BOXED(4606587454743973873,64,FLEN)
NAN_BOXED(13818855931605746851,64,FLEN)
NAN_BOXED(4595066704214804692,64,FLEN)
NAN_BOXED(4606587454743973873,64,FLEN)
NAN_BOXED(13818855931605746851,64,FLEN)
NAN_BOXED(4595066704214804692,64,FLEN)
NAN_BOXED(4606588584253076320,64,FLEN)
NAN_BOXED(13829557048166982486,64,FLEN)
NAN_BOXED(4605656934722527163,64,FLEN)
NAN_BOXED(4606588584253076320,64,FLEN)
NAN_BOXED(13829557048166982486,64,FLEN)
NAN_BOXED(4605656934722527163,64,FLEN)
NAN_BOXED(4606588584253076320,64,FLEN)
NAN_BOXED(13829557048166982486,64,FLEN)
NAN_BOXED(4605656934722527163,64,FLEN)
NAN_BOXED(4606588584253076320,64,FLEN)
NAN_BOXED(13829557048166982486,64,FLEN)
NAN_BOXED(4605656934722527163,64,FLEN)
NAN_BOXED(4606588584253076320,64,FLEN)
NAN_BOXED(13829557048166982486,64,FLEN)
NAN_BOXED(4605656934722527163,64,FLEN)
NAN_BOXED(4606634178877855714,64,FLEN)
NAN_BOXED(13821008374212552551,64,FLEN)
NAN_BOXED(4597120897501448348,64,FLEN)
NAN_BOXED(4606634178877855714,64,FLEN)
NAN_BOXED(13821008374212552551,64,FLEN)
NAN_BOXED(4597120897501448348,64,FLEN)
NAN_BOXED(4606634178877855714,64,FLEN)
NAN_BOXED(13821008374212552551,64,FLEN)
NAN_BOXED(4597120897501448348,64,FLEN)
NAN_BOXED(4606634178877855714,64,FLEN)
NAN_BOXED(13821008374212552551,64,FLEN)
NAN_BOXED(4597120897501448348,64,FLEN)
NAN_BOXED(4606634178877855714,64,FLEN)
NAN_BOXED(13821008374212552551,64,FLEN)
NAN_BOXED(4597120897501448348,64,FLEN)
NAN_BOXED(4606680256448983863,64,FLEN)
NAN_BOXED(13822818644869477850,64,FLEN)
NAN_BOXED(4599124645380384670,64,FLEN)
NAN_BOXED(4606680256448983863,64,FLEN)
NAN_BOXED(13822818644869477850,64,FLEN)
NAN_BOXED(4599124645380384670,64,FLEN)
NAN_BOXED(4606680256448983863,64,FLEN)
NAN_BOXED(13822818644869477850,64,FLEN)
NAN_BOXED(4599124645380384670,64,FLEN)
NAN_BOXED(4606680256448983863,64,FLEN)
NAN_BOXED(13822818644869477850,64,FLEN)
NAN_BOXED(4599124645380384670,64,FLEN)
NAN_BOXED(4606680256448983863,64,FLEN)
NAN_BOXED(13822818644869477850,64,FLEN)
NAN_BOXED(4599124645380384670,64,FLEN)
NAN_BOXED(4606680652670399426,64,FLEN)
NAN_BOXED(13814441082244402402,64,FLEN)
NAN_BOXED(4590712261480470728,64,FLEN)
NAN_BOXED(4606680652670399426,64,FLEN)
NAN_BOXED(13814441082244402402,64,FLEN)
NAN_BOXED(4590712261480470728,64,FLEN)
NAN_BOXED(4606680652670399426,64,FLEN)
NAN_BOXED(13814441082244402402,64,FLEN)
NAN_BOXED(4590712261480470728,64,FLEN)
NAN_BOXED(4606680652670399426,64,FLEN)
NAN_BOXED(13814441082244402402,64,FLEN)
NAN_BOXED(4590712261480470728,64,FLEN)
NAN_BOXED(4606680652670399426,64,FLEN)
NAN_BOXED(13814441082244402402,64,FLEN)
NAN_BOXED(4590712261480470728,64,FLEN)
NAN_BOXED(4606694741913815398,64,FLEN)
NAN_BOXED(13829798499543457336,64,FLEN)
NAN_BOXED(4605979715542352611,64,FLEN)
NAN_BOXED(4606694741913815398,64,FLEN)
NAN_BOXED(13829798499543457336,64,FLEN)
NAN_BOXED(4605979715542352611,64,FLEN)
NAN_BOXED(4606694741913815398,64,FLEN)
NAN_BOXED(13829798499543457336,64,FLEN)
NAN_BOXED(4605979715542352611,64,FLEN)
NAN_BOXED(4606694741913815398,64,FLEN)
NAN_BOXED(13829798499543457336,64,FLEN)
NAN_BOXED(4605979715542352611,64,FLEN)
NAN_BOXED(4606694741913815398,64,FLEN)
NAN_BOXED(13829798499543457336,64,FLEN)
NAN_BOXED(4605979715542352611,64,FLEN)
NAN_BOXED(4606699099765040674,64,FLEN)
NAN_BOXED(13829629866783098571,64,FLEN)
NAN_BOXED(4605824123585213867,64,FLEN)
NAN_BOXED(4606699099765040674,64,FLEN)
NAN_BOXED(13829629866783098571,64,FLEN)
NAN_BOXED(4605824123585213867,64,FLEN)
NAN_BOXED(4606699099765040674,64,FLEN)
NAN_BOXED(13829629866783098571,64,FLEN)
NAN_BOXED(4605824123585213867,64,FLEN)
NAN_BOXED(4606699099765040674,64,FLEN)
NAN_BOXED(13829629866783098571,64,FLEN)
NAN_BOXED(4605824123585213867,64,FLEN)
NAN_BOXED(4606699099765040674,64,FLEN)
NAN_BOXED(13829629866783098571,64,FLEN)
NAN_BOXED(4605824123585213867,64,FLEN)
NAN_BOXED(4606843707079200673,64,FLEN)
NAN_BOXED(13807527455833332439,64,FLEN)
NAN_BOXED(4583835848039642944,64,FLEN)
NAN_BOXED(4606843707079200673,64,FLEN)
NAN_BOXED(13807527455833332439,64,FLEN)
NAN_BOXED(4583835848039642944,64,FLEN)
NAN_BOXED(4606843707079200673,64,FLEN)
NAN_BOXED(13807527455833332439,64,FLEN)
NAN_BOXED(4583835848039642944,64,FLEN)
NAN_BOXED(4606843707079200673,64,FLEN)
NAN_BOXED(13807527455833332439,64,FLEN)
NAN_BOXED(4583835848039642944,64,FLEN)
NAN_BOXED(4606843707079200673,64,FLEN)
NAN_BOXED(13807527455833332439,64,FLEN)
NAN_BOXED(4583835848039642944,64,FLEN)
NAN_BOXED(4606852470860456387,64,FLEN)
NAN_BOXED(13811640884231997039,64,FLEN)
NAN_BOXED(4587971837562116704,64,FLEN)
NAN_BOXED(4606852470860456387,64,FLEN)
NAN_BOXED(13811640884231997039,64,FLEN)
NAN_BOXED(4587971837562116704,64,FLEN)
NAN_BOXED(4606852470860456387,64,FLEN)
NAN_BOXED(13811640884231997039,64,FLEN)
NAN_BOXED(4587971837562116704,64,FLEN)
NAN_BOXED(4606852470860456387,64,FLEN)
NAN_BOXED(13811640884231997039,64,FLEN)
NAN_BOXED(4587971837562116704,64,FLEN)
NAN_BOXED(4606852470860456387,64,FLEN)
NAN_BOXED(13811640884231997039,64,FLEN)
NAN_BOXED(4587971837562116704,64,FLEN)
NAN_BOXED(4606854296317532294,64,FLEN)
NAN_BOXED(13828535402434574455,64,FLEN)
NAN_BOXED(4604908795012415115,64,FLEN)
NAN_BOXED(4606854296317532294,64,FLEN)
NAN_BOXED(13828535402434574455,64,FLEN)
NAN_BOXED(4604908795012415115,64,FLEN)
NAN_BOXED(4606854296317532294,64,FLEN)
NAN_BOXED(13828535402434574455,64,FLEN)
NAN_BOXED(4604908795012415115,64,FLEN)
NAN_BOXED(4606854296317532294,64,FLEN)
NAN_BOXED(13828535402434574455,64,FLEN)
NAN_BOXED(4604908795012415115,64,FLEN)
NAN_BOXED(4606854296317532294,64,FLEN)
NAN_BOXED(13828535402434574455,64,FLEN)
NAN_BOXED(4604908795012415115,64,FLEN)
NAN_BOXED(4606887692251895931,64,FLEN)
NAN_BOXED(13826263133837592150,64,FLEN)
NAN_BOXED(4602736787719834453,64,FLEN)
NAN_BOXED(4606887692251895931,64,FLEN)
NAN_BOXED(13826263133837592150,64,FLEN)
NAN_BOXED(4602736787719834453,64,FLEN)
NAN_BOXED(4606887692251895931,64,FLEN)
NAN_BOXED(13826263133837592150,64,FLEN)
NAN_BOXED(4602736787719834453,64,FLEN)
NAN_BOXED(4606887692251895931,64,FLEN)
NAN_BOXED(13826263133837592150,64,FLEN)
NAN_BOXED(4602736787719834453,64,FLEN)
NAN_BOXED(4606887692251895931,64,FLEN)
NAN_BOXED(13826263133837592150,64,FLEN)
NAN_BOXED(4602736787719834453,64,FLEN)
NAN_BOXED(4606893328152096826,64,FLEN)
NAN_BOXED(13813655730014439109,64,FLEN)
NAN_BOXED(4590103339746697560,64,FLEN)
NAN_BOXED(4606893328152096826,64,FLEN)
NAN_BOXED(13813655730014439109,64,FLEN)
NAN_BOXED(4590103339746697560,64,FLEN)
NAN_BOXED(4606893328152096826,64,FLEN)
NAN_BOXED(13813655730014439109,64,FLEN)
NAN_BOXED(4590103339746697560,64,FLEN)
NAN_BOXED(4606893328152096826,64,FLEN)
NAN_BOXED(13813655730014439109,64,FLEN)
NAN_BOXED(4590103339746697560,64,FLEN)
NAN_BOXED(4606893328152096826,64,FLEN)
NAN_BOXED(13813655730014439109,64,FLEN)
NAN_BOXED(4590103339746697560,64,FLEN)
NAN_BOXED(4606917057900241797,64,FLEN)
NAN_BOXED(13822147871588684457,64,FLEN)
NAN_BOXED(4598625459573116068,64,FLEN)
NAN_BOXED(4606917057900241797,64,FLEN)
NAN_BOXED(13822147871588684457,64,FLEN)
NAN_BOXED(4598625459573116068,64,FLEN)
NAN_BOXED(4606917057900241797,64,FLEN)
NAN_BOXED(13822147871588684457,64,FLEN)
NAN_BOXED(4598625459573116068,64,FLEN)
NAN_BOXED(4606917057900241797,64,FLEN)
NAN_BOXED(13822147871588684457,64,FLEN)
NAN_BOXED(4598625459573116068,64,FLEN)
NAN_BOXED(4606917057900241797,64,FLEN)
NAN_BOXED(13822147871588684457,64,FLEN)
NAN_BOXED(4598625459573116068,64,FLEN)
NAN_BOXED(4606921162929437641,64,FLEN)
NAN_BOXED(13826504279207423100,64,FLEN)
NAN_BOXED(4602988462774512415,64,FLEN)
NAN_BOXED(4606921162929437641,64,FLEN)
NAN_BOXED(13826504279207423100,64,FLEN)
NAN_BOXED(4602988462774512415,64,FLEN)
NAN_BOXED(4606921162929437641,64,FLEN)
NAN_BOXED(13826504279207423100,64,FLEN)
NAN_BOXED(4602988462774512415,64,FLEN)
NAN_BOXED(4606921162929437641,64,FLEN)
NAN_BOXED(13826504279207423100,64,FLEN)
NAN_BOXED(4602988462774512415,64,FLEN)
NAN_BOXED(4606921162929437641,64,FLEN)
NAN_BOXED(13826504279207423100,64,FLEN)
NAN_BOXED(4602988462774512415,64,FLEN)
NAN_BOXED(4606933621800416495,64,FLEN)
NAN_BOXED(13829328016269440860,64,FLEN)
NAN_BOXED(4605741059143072287,64,FLEN)
NAN_BOXED(4606933621800416495,64,FLEN)
NAN_BOXED(13829328016269440860,64,FLEN)
NAN_BOXED(4605741059143072287,64,FLEN)
NAN_BOXED(4606933621800416495,64,FLEN)
NAN_BOXED(13829328016269440860,64,FLEN)
NAN_BOXED(4605741059143072287,64,FLEN)
NAN_BOXED(4606933621800416495,64,FLEN)
NAN_BOXED(13829328016269440860,64,FLEN)
NAN_BOXED(4605741059143072287,64,FLEN)
NAN_BOXED(4606933621800416495,64,FLEN)
NAN_BOXED(13829328016269440860,64,FLEN)
NAN_BOXED(4605741059143072287,64,FLEN)
NAN_BOXED(4606952254768608390,64,FLEN)
NAN_BOXED(13822171920671550204,64,FLEN)
NAN_BOXED(4598668839542110258,64,FLEN)
NAN_BOXED(4606952254768608390,64,FLEN)
NAN_BOXED(13822171920671550204,64,FLEN)
NAN_BOXED(4598668839542110258,64,FLEN)
NAN_BOXED(4606952254768608390,64,FLEN)
NAN_BOXED(13822171920671550204,64,FLEN)
NAN_BOXED(4598668839542110258,64,FLEN)
NAN_BOXED(4606952254768608390,64,FLEN)
NAN_BOXED(13822171920671550204,64,FLEN)
NAN_BOXED(4598668839542110258,64,FLEN)
NAN_BOXED(4606952254768608390,64,FLEN)
NAN_BOXED(13822171920671550204,64,FLEN)
NAN_BOXED(4598668839542110258,64,FLEN)
NAN_BOXED(4607019680908820905,64,FLEN)
NAN_BOXED(13820328305152507994,64,FLEN)
NAN_BOXED(4596815553851325392,64,FLEN)
NAN_BOXED(4607019680908820905,64,FLEN)
NAN_BOXED(13820328305152507994,64,FLEN)
NAN_BOXED(4596815553851325392,64,FLEN)
NAN_BOXED(4607019680908820905,64,FLEN)
NAN_BOXED(13820328305152507994,64,FLEN)
NAN_BOXED(4596815553851325392,64,FLEN)
NAN_BOXED(4607019680908820905,64,FLEN)
NAN_BOXED(13820328305152507994,64,FLEN)
NAN_BOXED(4596815553851325392,64,FLEN)
NAN_BOXED(4607019680908820905,64,FLEN)
NAN_BOXED(13820328305152507994,64,FLEN)
NAN_BOXED(4596815553851325392,64,FLEN)
NAN_BOXED(4607025619043889930,64,FLEN)
NAN_BOXED(13825483818489191959,64,FLEN)
NAN_BOXED(4601964853020826450,64,FLEN)
NAN_BOXED(4607025619043889930,64,FLEN)
NAN_BOXED(13825483818489191959,64,FLEN)
NAN_BOXED(4601964853020826450,64,FLEN)
NAN_BOXED(4607025619043889930,64,FLEN)
NAN_BOXED(13825483818489191959,64,FLEN)
NAN_BOXED(4601964853020826450,64,FLEN)
NAN_BOXED(4607025619043889930,64,FLEN)
NAN_BOXED(13825483818489191959,64,FLEN)
NAN_BOXED(4601964853020826450,64,FLEN)
NAN_BOXED(4607025619043889930,64,FLEN)
NAN_BOXED(13825483818489191959,64,FLEN)
NAN_BOXED(4601964853020826450,64,FLEN)
NAN_BOXED(4607051269327553651,64,FLEN)
NAN_BOXED(13820642640928870540,64,FLEN)
NAN_BOXED(4597152626270034512,64,FLEN)
NAN_BOXED(4607051269327553651,64,FLEN)
NAN_BOXED(13820642640928870540,64,FLEN)
NAN_BOXED(4597152626270034512,64,FLEN)
NAN_BOXED(4607051269327553651,64,FLEN)
NAN_BOXED(13820642640928870540,64,FLEN)
NAN_BOXED(4597152626270034512,64,FLEN)
NAN_BOXED(4607051269327553651,64,FLEN)
NAN_BOXED(13820642640928870540,64,FLEN)
NAN_BOXED(4597152626270034512,64,FLEN)
NAN_BOXED(4607051269327553651,64,FLEN)
NAN_BOXED(13820642640928870540,64,FLEN)
NAN_BOXED(4597152626270034512,64,FLEN)
NAN_BOXED(4607063494076149026,64,FLEN)
NAN_BOXED(13825576890227715735,64,FLEN)
NAN_BOXED(4602092186560133470,64,FLEN)
NAN_BOXED(4607063494076149026,64,FLEN)
NAN_BOXED(13825576890227715735,64,FLEN)
NAN_BOXED(4602092186560133470,64,FLEN)
NAN_BOXED(4607063494076149026,64,FLEN)
NAN_BOXED(13825576890227715735,64,FLEN)
NAN_BOXED(4602092186560133470,64,FLEN)
NAN_BOXED(4607063494076149026,64,FLEN)
NAN_BOXED(13825576890227715735,64,FLEN)
NAN_BOXED(4602092186560133470,64,FLEN)
NAN_BOXED(4607063494076149026,64,FLEN)
NAN_BOXED(13825576890227715735,64,FLEN)
NAN_BOXED(4602092186560133470,64,FLEN)
NAN_BOXED(4607064296681325716,64,FLEN)
NAN_BOXED(13828696078161491868,64,FLEN)
NAN_BOXED(4605230290302799271,64,FLEN)
NAN_BOXED(4607064296681325716,64,FLEN)
NAN_BOXED(13828696078161491868,64,FLEN)
NAN_BOXED(4605230290302799271,64,FLEN)
NAN_BOXED(4607064296681325716,64,FLEN)
NAN_BOXED(13828696078161491868,64,FLEN)
NAN_BOXED(4605230290302799271,64,FLEN)
NAN_BOXED(4607064296681325716,64,FLEN)
NAN_BOXED(13828696078161491868,64,FLEN)
NAN_BOXED(4605230290302799271,64,FLEN)
NAN_BOXED(4607064296681325716,64,FLEN)
NAN_BOXED(13828696078161491868,64,FLEN)
NAN_BOXED(4605230290302799271,64,FLEN)
NAN_BOXED(4607078109514715160,64,FLEN)
NAN_BOXED(13825299956749205693,64,FLEN)
NAN_BOXED(4601832306516127092,64,FLEN)
NAN_BOXED(4607078109514715160,64,FLEN)
NAN_BOXED(13825299956749205693,64,FLEN)
NAN_BOXED(4601832306516127092,64,FLEN)
NAN_BOXED(4607078109514715160,64,FLEN)
NAN_BOXED(13825299956749205693,64,FLEN)
NAN_BOXED(4601832306516127092,64,FLEN)
NAN_BOXED(4607078109514715160,64,FLEN)
NAN_BOXED(13825299956749205693,64,FLEN)
NAN_BOXED(4601832306516127092,64,FLEN)
NAN_BOXED(4607078109514715160,64,FLEN)
NAN_BOXED(13825299956749205693,64,FLEN)
NAN_BOXED(4601832306516127092,64,FLEN)
NAN_BOXED(4607100647961022301,64,FLEN)
NAN_BOXED(13830212239252188187,64,FLEN)
NAN_BOXED(4606761538331296108,64,FLEN)
NAN_BOXED(4607100647961022301,64,FLEN)
NAN_BOXED(13830212239252188187,64,FLEN)
NAN_BOXED(4606761538331296108,64,FLEN)
NAN_BOXED(4607100647961022301,64,FLEN)
NAN_BOXED(13830212239252188187,64,FLEN)
NAN_BOXED(4606761538331296108,64,FLEN)
NAN_BOXED(4607100647961022301,64,FLEN)
NAN_BOXED(13830212239252188187,64,FLEN)
NAN_BOXED(4606761538331296108,64,FLEN)
NAN_BOXED(4607100647961022301,64,FLEN)
NAN_BOXED(13830212239252188187,64,FLEN)
NAN_BOXED(4606761538331296108,64,FLEN)
NAN_BOXED(4607151946369710002,64,FLEN)
NAN_BOXED(13822865172429993368,64,FLEN)
NAN_BOXED(4599473440692809188,64,FLEN)
NAN_BOXED(4607151946369710002,64,FLEN)
NAN_BOXED(13822865172429993368,64,FLEN)
NAN_BOXED(4599473440692809188,64,FLEN)
NAN_BOXED(4607151946369710002,64,FLEN)
NAN_BOXED(13822865172429993368,64,FLEN)
NAN_BOXED(4599473440692809188,64,FLEN)
NAN_BOXED(4607151946369710002,64,FLEN)
NAN_BOXED(13822865172429993368,64,FLEN)
NAN_BOXED(4599473440692809188,64,FLEN)
NAN_BOXED(4607151946369710002,64,FLEN)
NAN_BOXED(13822865172429993368,64,FLEN)
NAN_BOXED(4599473440692809188,64,FLEN)
NAN_BOXED(4607166432262509470,64,FLEN)
NAN_BOXED(13817181427287675583,64,FLEN)
NAN_BOXED(4593801152640466120,64,FLEN)
NAN_BOXED(4607166432262509470,64,FLEN)
NAN_BOXED(13817181427287675583,64,FLEN)
NAN_BOXED(4593801152640466120,64,FLEN)
NAN_BOXED(4607166432262509470,64,FLEN)
NAN_BOXED(13817181427287675583,64,FLEN)
NAN_BOXED(4593801152640466120,64,FLEN)
NAN_BOXED(4607166432262509470,64,FLEN)
NAN_BOXED(13817181427287675583,64,FLEN)
NAN_BOXED(4593801152640466120,64,FLEN)
NAN_BOXED(4607166432262509470,64,FLEN)
NAN_BOXED(13817181427287675583,64,FLEN)
NAN_BOXED(4593801152640466120,64,FLEN)
NAN_BOXED(4607176468501958960,64,FLEN)
NAN_BOXED(13826906696045329961,64,FLEN)
NAN_BOXED(4603531118660094712,64,FLEN)
NAN_BOXED(4607176468501958960,64,FLEN)
NAN_BOXED(13826906696045329961,64,FLEN)
NAN_BOXED(4603531118660094712,64,FLEN)
NAN_BOXED(4607176468501958960,64,FLEN)
NAN_BOXED(13826906696045329961,64,FLEN)
NAN_BOXED(4603531118660094712,64,FLEN)
NAN_BOXED(4607176468501958960,64,FLEN)
NAN_BOXED(13826906696045329961,64,FLEN)
NAN_BOXED(4603531118660094712,64,FLEN)
NAN_BOXED(4607176468501958960,64,FLEN)
NAN_BOXED(13826906696045329961,64,FLEN)
NAN_BOXED(4603531118660094712,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(13865001783962256082,64,FLEN)
NAN_BOXED(4594491178820998828,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(13865001783962256082,64,FLEN)
NAN_BOXED(4594491178820998828,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(13865001783962256082,64,FLEN)
NAN_BOXED(4594491178820998828,64,FLEN)
NAN_BOXED(4559596062671986688,64,FLEN)
NAN_BOXED(13865001783962256082,64,FLEN)
NAN_BOXED(4594491178820998828,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(4604541613766077429,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(4604541613766077429,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(4604541613766077429,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(4604541613766077429,64,FLEN)
NAN_BOXED(4577595453022567744,64,FLEN)
NAN_BOXED(13857470574673722500,64,FLEN)
NAN_BOXED(4604541613766077429,64,FLEN)
NAN_BOXED(4578821063537580672,64,FLEN)
NAN_BOXED(13853504591987481806,64,FLEN)
NAN_BOXED(4602074783035454472,64,FLEN)
NAN_BOXED(4578821063537580672,64,FLEN)
NAN_BOXED(13853504591987481806,64,FLEN)
NAN_BOXED(4602074783035454472,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_12:
    .fill 146*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
