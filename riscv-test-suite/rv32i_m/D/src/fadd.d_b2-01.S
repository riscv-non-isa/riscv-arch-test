
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:04:18 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fadd.d_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fadd.d_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==f3, rs2==f3, rd==f3,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffff7fffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f3; op2:f3; dest:f3; op1val:0x1; op2val:0x1; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f3, f3, f3, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs2 == rd != rs1, rs1==f21, rs2==f7, rd==f7,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f21; op2:f7; dest:f7; op1val:0x1; op2val:0xffffffffffffc; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f7, f21, f7, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==f13, rs2==f13, rd==f29,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f13; op2:f13; dest:f29; op1val:0x1; op2val:0x1; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f29, f13, f13, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f27, rs2==f28, rd==f14,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f27; op2:f28; dest:f14; op1val:0x1; op2val:0x800fffffffffff00; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f14, f27, f28, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2, rs1==f4, rs2==f26, rd==f4,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f4; op2:f26; dest:f4; op1val:0x2; op2val:0x8000000000000007; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f4, f4, f26, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f10, rs2==f21, rd==f27,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xffffffffffff9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f10; op2:f21; dest:f27; op1val:0x2; op2val:0x800ffffffffffff9; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f27, f10, f21, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f18, rs2==f31, rd==f20,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000006 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000007fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f18; op2:f31; dest:f20; op1val:0x6; op2val:0x7fb; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f20, f18, f31, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f2, rs2==f6, rd==f25,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffbffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f2; op2:f6; dest:f25; op1val:0x7; op2val:0xfffffffbffff8; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f25, f2, f6, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f9, rs2==f14, rd==f0,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000007fff9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f9; op2:f14; dest:f0; op1val:0x8; op2val:0x7fff9; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f0, f9, f14, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f8, rs2==f4, rd==f30,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffffbff6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f8; op2:f4; dest:f30; op1val:0x9; op2val:0xfffffffffbff6; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f30, f8, f4, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f12, rs2==f10, rd==f16,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000109 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f12; op2:f10; dest:f16; op1val:0x9; op2val:0x8000000000000109; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f16, f12, f10, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f16, rs2==f19, rd==f26,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000003ff6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f16; op2:f19; dest:f26; op1val:0xa; op2val:0x3ff6; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f26, f16, f19, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f1, rs2==f24, rd==f22,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000080c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f1; op2:f24; dest:f22; op1val:0xb; op2val:0x800000000000080c; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f22, f1, f24, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f5, rs2==f25, rd==f6,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x000 and fm2 == 0xffffffffe000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f5; op2:f25; dest:f6; op1val:0xb; op2val:0x800ffffffffe000a; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f6, f5, f25, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f29, rs2==f18, rd==f24,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f29; op2:f18; dest:f24; op1val:0xc; op2val:0x800000000000000e; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f24, f29, f18, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f31, rs2==f8, rd==f11,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000100c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f31; op2:f8; dest:f11; op1val:0xc; op2val:0x800000000000100c; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f11, f31, f8, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f7, rs2==f17, rd==f9,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000040000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f7; op2:f17; dest:f9; op1val:0xc; op2val:0x800000000040000c; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f9, f7, f17, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f23, rs2==f5, rd==f8,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000001f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f23; op2:f5; dest:f8; op1val:0xd; op2val:0x1f3; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f8, f23, f5, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f24, rs2==f30, rd==f31,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000ff4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f24; op2:f30; dest:f31; op1val:0xd; op2val:0xff4; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f24, f30, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f22, rs2==f15, rd==f28,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000001ff3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f22; op2:f15; dest:f28; op1val:0xd; op2val:0x1ff3; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f28, f22, f15, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f25, rs2==f20, rd==f23,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x000 and fm2 == 0xfffffffff800c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f25; op2:f20; dest:f23; op1val:0xd; op2val:0x800fffffffff800c; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f23, f25, f20, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f11, rs2==f22, rd==f2,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x000 and fm2 == 0xffffffffffc0c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f11; op2:f22; dest:f2; op1val:0xd; op2val:0x800ffffffffffc0c; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f2, f11, f22, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f17, rs2==f11, rd==f19,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x000 and fm2 == 0xffffffff8000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f17; op2:f11; dest:f19; op1val:0xf; op2val:0x800ffffffff8000e; 
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f19, f17, f11, dyn, 0, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f19, rs2==f16, rd==f17,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000010 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000020010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f19; op2:f16; dest:f17; op1val:0x10; op2val:0x8000000000020010; 
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f17, f19, f16, dyn, 0, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f20, rs2==f27, rd==f21,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000010 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xffffffffff80f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f20; op2:f27; dest:f21; op1val:0x10; op2val:0x800ffffffffff80f; 
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f21, f20, f27, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f0, rs2==f1, rd==f18,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000011 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000100012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f0; op2:f1; dest:f18; op1val:0x11; op2val:0x8000000000100012; 
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f18, f0, f1, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f6, rs2==f12, rd==f10,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000006e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f6; op2:f12; dest:f10; op1val:0x12; op2val:0x6e; 
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f10, f6, f12, dyn, 0, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f28, rs2==f2, rd==f1,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000000ee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f28; op2:f2; dest:f1; op1val:0x12; op2val:0xee; 
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f1, f28, f2, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f30, rs2==f0, rd==f12,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000004013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f0; dest:f12; op1val:0x12; op2val:0x8000000000004013; 
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f12, f30, f0, dyn, 0, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f14, rs2==f29, rd==f13,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xffffffff00011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f14; op2:f29; dest:f13; op1val:0x12; op2val:0x800ffffffff00011; 
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f13, f14, f29, dyn, 0, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f26, rs2==f9, rd==f5,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000013 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000fed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f26; op2:f9; dest:f5; op1val:0x13; op2val:0xfed; 
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f5, f26, f9, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f15,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000014 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000115 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f15; op2:f20; dest:f12; op1val:0x14; op2val:0x8000000000000115; 
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f12, f15, f20, dyn, 0, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// rs2==f23,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000fffec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f6; op2:f23; dest:f4; op1val:0x15; op2val:0xfffec; 
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f4, f6, f23, dyn, 0, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// rd==f15,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000016 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffffdfe9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f7; op2:f22; dest:f15; op1val:0x16; op2val:0xfffffffffdfe9; 
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f15, f7, f22, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000018 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000001e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x18; op2val:0x1e9; 
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffffffe2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x19; op2val:0xfffffffffffe2; 
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 1 and fe2 == 0x001 and fm2 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x19; op2val:0x8010000000000017; 
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000003ffe6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1b; op2val:0x3ffe6; 
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000008001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1b; op2val:0x800000000008001b; 
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1c; op2val:0x24; 
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001c and fs2 == 1 and fe2 == 0x000 and fm2 == 0xfffffffffffdb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1c; op2val:0x800fffffffffffdb; 
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1d; op2val:0x24; 
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffffffd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1f; op2val:0xfffffffffffd0; 
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001f and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000041f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1f; op2val:0x800000000000041f; 
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x20; op2val:0x8000000000000060; 
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000021 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000003df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x21; op2val:0x3df; 
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000021 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000003fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x21; op2val:0x3fffe0; 
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000003fdf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x22; op2val:0x3fdf; 
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000003fffde and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x22; op2val:0x3fffde; 
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x22; op2val:0x8000000000000001; 
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x22; op2val:0x800000000000001e; 
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xffffffffc0023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x24; op2val:0x800ffffffffc0023; 
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000025 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000020026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x25; op2val:0x8000000000020026; 
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000025 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000200025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x25; op2val:0x8000000000200025; 
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000010026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x26; op2val:0x8000000000010026; 
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000027 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x27; op2val:0x8000000000000017; 
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000027 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000008027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x27; op2val:0x8000000000008027; 
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000027 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xfffffffffe026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x27; op2val:0x800fffffffffe026; 
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000028 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffdfffd7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x28; op2val:0xfffffffdfffd7; 
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000028 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x28; op2val:0x8000000000000049; 
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000028 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000200029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x28; op2val:0x8000000000200029; 
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000003ffd7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x29; op2val:0x3ffd7; 
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000002029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x29; op2val:0x8000000000002029; 
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x001 and fm2 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x29; op2val:0x8010000000000008; 
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002a and fs2 == 1 and fe2 == 0x000 and fm2 == 0x00000000000aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2a; op2val:0x80000000000000aa; 
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000007fd5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2b; op2val:0x7fd5; 
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002b and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffffffcc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2b; op2val:0xfffffffffffcc; 
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002b and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000004002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2b; op2val:0x800000000004002b; 
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000001fffd5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2c; op2val:0x1fffd5; 
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000000d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2d; op2val:0xd4; 
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000001ffd2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2e; op2val:0x1ffd2; 
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2e; op2val:0x800000000000000e; 
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000006f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2e; op2val:0x800000000000006f; 
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000001002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2e; op2val:0x800000000001002f; 
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000004002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2e; op2val:0x800000000004002f; 
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000031 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffffff8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x31; op2val:0xfffffffffff8e; 
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000032 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x32; op2val:0x8000000000000031; 
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000001fce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x33; op2val:0x1fce; 
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000033 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xfffffffff0032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x33; op2val:0x800fffffffff0032; 
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000034 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffffffdcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x34; op2val:0xffffffffffdcb; 
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000034 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x34; op2val:0x8000000000000038; 
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000036 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffffffec9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x36; op2val:0xffffffffffec9; 
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000036 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x36; op2val:0x8000000000000034; 
   valaddr_reg:x3; val_offset:164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000039 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000001fffc7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x39; op2val:0x1fffc7; 
   valaddr_reg:x3; val_offset:166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003a and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffffeffc5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3a; op2val:0xffffffffeffc5; 
   valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003b and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000043c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3b; op2val:0x800000000000043c; 
   valaddr_reg:x3; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3e; op2val:0x800000000000003e; 
   valaddr_reg:x3; val_offset:172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffffdffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f; op2val:0xffffffffdffc0; 
   valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f; op2val:0x8000000000000037; 
   valaddr_reg:x3; val_offset:176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000403f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f; op2val:0x800000000000403f; 
   valaddr_reg:x3; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffefffbf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x40; op2val:0xfffffffefffbf; 
   valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x40; op2val:0x8000000000000060; 
   valaddr_reg:x3; val_offset:182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000003c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x41; op2val:0x3c0; 
   valaddr_reg:x3; val_offset:184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000043 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xfffffffe00042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x43; op2val:0x800fffffffe00042; 
   valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xffffffffffe43 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x44; op2val:0x800ffffffffffe43; 
   valaddr_reg:x3; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000046 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x46; op2val:0x800000000000003d; 
   valaddr_reg:x3; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000046 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000846 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x46; op2val:0x8000000000000846; 
   valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000046 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000002047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x46; op2val:0x8000000000002047; 
   valaddr_reg:x3; val_offset:194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 194*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000fffb9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x47; op2val:0xfffb9; 
   valaddr_reg:x3; val_offset:196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 196*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x47; op2val:0x8000000000000048; 
   valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000100047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x47; op2val:0x8000000000100047; 
   valaddr_reg:x3; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 200*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000048 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000ffb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x48; op2val:0xffb8; 
   valaddr_reg:x3; val_offset:202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 202*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000ffb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x49; op2val:0xffb8; 
   valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffffffbb6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x49; op2val:0xffffffffffbb6; 
   valaddr_reg:x3; val_offset:206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 206*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x49; op2val:0x800000000000005a; 
   valaddr_reg:x3; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 208*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x49; op2val:0x8000000000000249; 
   valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004d and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x4d; op2val:0x800000000000004d; 
   valaddr_reg:x3; val_offset:212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 212*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004e and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffffbffb1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x4e; op2val:0xffffffffbffb1; 
   valaddr_reg:x3; val_offset:214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 214*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x50; op2val:0x800000000000003f; 
   valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000007ffae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x52; op2val:0x7ffae; 
   valaddr_reg:x3; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 218*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffffff8d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x52; op2val:0xfffffffffff8d; 
   valaddr_reg:x3; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 220*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000080053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x52; op2val:0x8000000000080053; 
   valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 1 and fe2 == 0x001 and fm2 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x52; op2val:0x801000000000004f; 
   valaddr_reg:x3; val_offset:224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 224*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x53; op2val:0x2e; 
   valaddr_reg:x3; val_offset:226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 226*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xfffffffc00052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x53; op2val:0x800fffffffc00052; 
   valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffffffaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x54; op2val:0xfffffffffffaa; 
   valaddr_reg:x3; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 230*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xffffffffff053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x54; op2val:0x800ffffffffff053; 
   valaddr_reg:x3; val_offset:232*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 232*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x00000000000d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x55; op2val:0x80000000000000d6; 
   valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000056 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x56; op2val:0x8000000000000059; 
   valaddr_reg:x3; val_offset:236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 236*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000056 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x56; op2val:0x800000000000005e; 
   valaddr_reg:x3; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 238*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000057 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffffff28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x57; op2val:0xfffffffffff28; 
   valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000057 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x57; op2val:0x8000000000000052; 
   valaddr_reg:x3; val_offset:242*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 242*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000057 and fs2 == 1 and fe2 == 0x001 and fm2 == 0x0000000000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x57; op2val:0x8010000000000046; 
   valaddr_reg:x3; val_offset:244*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 244*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x58; op2val:0x8000000000000061; 
   valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000025a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x59; op2val:0x800000000000025a; 
   valaddr_reg:x3; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 248*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x000 and fm2 == 0xfffffffffc058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x59; op2val:0x800fffffffffc058; 
   valaddr_reg:x3; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 250*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000001ffa7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x5a; op2val:0x1ffa7; 
   valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005a and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffff7fa5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x5a; op2val:0xfffffffff7fa5; 
   valaddr_reg:x3; val_offset:254*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 254*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000007a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x5b; op2val:0x7a5; 
   valaddr_reg:x3; val_offset:256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 256*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x000 and fm2 == 0xfffffffffefa4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x5b; op2val:0xfffffffffefa4; 
   valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005c and fs2 == 1 and fe2 == 0x000 and fm2 == 0xfffffffffffdb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x5c; op2val:0x800fffffffffffdb; 
   valaddr_reg:x3; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 260*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005d and fs2 == 1 and fe2 == 0x001 and fm2 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x5d; op2val:0x8010000000000058; 
   valaddr_reg:x3; val_offset:262*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 262*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000007fa3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x5e; op2val:0x7fa3; 
   valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x5e; op2val:0x800000000000005b; 
   valaddr_reg:x3; val_offset:266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 266*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005f and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000001060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x5f; op2val:0x8000000000001060; 
   valaddr_reg:x3; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 268*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000060 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000400061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x60; op2val:0x8000000000400061; 
   valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000008063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x62; op2val:0x8000000000008063; 
   valaddr_reg:x3; val_offset:272*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 272*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000063 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffffff79c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x63; op2val:0xffffffffff79c; 
   valaddr_reg:x3; val_offset:274*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 274*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000001ffffb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000005; op2val:0x1ffffb; 
   valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000020002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000005; op2val:0x8020000000020002; 
   valaddr_reg:x3; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 278*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000006 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000006; op2val:0x8000000000000002; 
   valaddr_reg:x3; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 280*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000007; op2val:0x8020000000000024; 
   valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000000806 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000000d; op2val:0x8020000000000806; 
   valaddr_reg:x3; val_offset:284*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 284*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x000 and fm2 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000000f; op2val:0x800000000000000e; 
   valaddr_reg:x3; val_offset:286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 286*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000000f; op2val:0x8020000000000010; 
   valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000008008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000000f; op2val:0x8020000000008008; 
   valaddr_reg:x3; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 290*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000010 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000004008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000010; op2val:0x8020000000004008; 
   valaddr_reg:x3; val_offset:292*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 292*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000011 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000011; op2val:0x802000000000000c; 
   valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000012 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000ffee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000012; op2val:0xffee; 
   valaddr_reg:x3; val_offset:296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 296*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000014 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000014; op2val:0x802000000000000a; 
   valaddr_reg:x3; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 298*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x000000010000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000016; op2val:0x802000000010000b; 
   valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000017 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000001fe9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000017; op2val:0x1fe9; 
   valaddr_reg:x3; val_offset:302*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 302*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000017 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x000000000004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000017; op2val:0x802000000000004c; 
   valaddr_reg:x3; val_offset:304*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 304*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001b and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000001b; op2val:0x8000000000000013; 
   valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000022 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000022; op2val:0x8000000000000012; 
   valaddr_reg:x3; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 308*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000023 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000001ffdd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000023; op2val:0x1ffdd; 
   valaddr_reg:x3; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 310*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000023 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000003fffdd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000023; op2val:0x3fffdd; 
   valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000024; op2val:0x8000000000000022; 
   valaddr_reg:x3; val_offset:314*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 314*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000026 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000007fda and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000026; op2val:0x7fda; 
   valaddr_reg:x3; val_offset:316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 316*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000026; op2val:0x8020000000000014; 
   valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000027 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000000114 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000027; op2val:0x8020000000000114; 
   valaddr_reg:x3; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 320*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000029; op2val:0x8000000000000009; 
   valaddr_reg:x3; val_offset:322*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 322*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002b and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000000216 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000002b; op2val:0x8020000000000216; 
   valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002b and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000040016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000002b; op2val:0x8020000000040016; 
   valaddr_reg:x3; val_offset:326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 326*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000003ffd4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000002c; op2val:0x3ffd4; 
   valaddr_reg:x3; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 328*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000fffd4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000002c; op2val:0xfffd4; 
   valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002c and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000002016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000002c; op2val:0x8020000000002016; 
   valaddr_reg:x3; val_offset:332*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 332*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000030 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000fd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000030; op2val:0xfd0; 
   valaddr_reg:x3; val_offset:334*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 334*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000031 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000003fcf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000031; op2val:0x3fcf; 
   valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000033 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x000000000001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000033; op2val:0x802000000000001c; 
   valaddr_reg:x3; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 338*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000036 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x000000000041b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000036; op2val:0x802000000000041b; 
   valaddr_reg:x3; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 340*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000003e and fs2 == 1 and fe2 == 0x002 and fm2 == 0x000000000101f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000003e; op2val:0x802000000000101f; 
   valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000040 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000001c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000040; op2val:0x1c0; 
   valaddr_reg:x3; val_offset:344*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 344*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000010020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000040; op2val:0x8020000000010020; 
   valaddr_reg:x3; val_offset:346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 346*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000049; op2val:0x8000000000000009; 
   valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x0000000200024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000049; op2val:0x8020000000200024; 
   valaddr_reg:x3; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 350*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000000b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000004e; op2val:0xb2; 
   valaddr_reg:x3; val_offset:352*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 352*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000007ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000052; op2val:0x7ae; 
   valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x00000000003ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000053; op2val:0x3ad; 
   valaddr_reg:x3; val_offset:356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 356*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x002 and fm2 == 0x000000008002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000058; op2val:0x802000000008002c; 
   valaddr_reg:x3; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 358*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000007ffa4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000005c; op2val:0x7ffa4; 
   valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x002 and fm2 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000005e; op2val:0x802000000000003f; 
   valaddr_reg:x3; val_offset:362*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 362*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x002 and fm2 == 0x00000000000af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1000000000005e; op2val:0x80200000000000af; 
   valaddr_reg:x3; val_offset:364*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 364*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000060 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x10000000000060; op2val:0x20; 
   valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000003; op2val:0xbf90000000000006; 
   valaddr_reg:x3; val_offset:368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 368*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000002002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000004; op2val:0xbf90000000002002; 
   valaddr_reg:x3; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 370*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000000084 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000008; op2val:0xbf90000000000084; 
   valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000020006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f8000000000000c; op2val:0xbf90000000020006; 
   valaddr_reg:x3; val_offset:374*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 374*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000040008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f8000000000000f; op2val:0xbf90000000040008; 
   valaddr_reg:x3; val_offset:376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 376*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000010 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000010008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000010; op2val:0xbf90000000010008; 
   valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000013 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x000000000010a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000013; op2val:0xbf9000000000010a; 
   valaddr_reg:x3; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 380*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000019 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000019; op2val:0xbf9000000000000e; 
   valaddr_reg:x3; val_offset:382*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 382*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000019 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x000000010000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000019; op2val:0xbf9000000010000c; 
   valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000001d and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x000000000020e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f8000000000001d; op2val:0xbf9000000000020e; 
   valaddr_reg:x3; val_offset:386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 386*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000023 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000023; op2val:0xbf9000000000001a; 
   valaddr_reg:x3; val_offset:388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 388*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000002b and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f8000000000002b; op2val:0xbf90000000000056; 
   valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000030; op2val:0xbf90000000000038; 
   valaddr_reg:x3; val_offset:392*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 392*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f8000000000003f; op2val:0xbf90000000000020; 
   valaddr_reg:x3; val_offset:394*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 394*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000045 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000000822 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000045; op2val:0xbf90000000000822; 
   valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000004a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000000425 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f8000000000004a; op2val:0xbf90000000000425; 
   valaddr_reg:x3; val_offset:398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 398*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000004e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000008027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f8000000000004e; op2val:0xbf90000000008027; 
   valaddr_reg:x3; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 400*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000004e and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000080027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f8000000000004e; op2val:0xbf90000000080027; 
   valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000051 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000051; op2val:0xbf9000000000002a; 
   valaddr_reg:x3; val_offset:404*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 404*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000052 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x0000000004029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000052; op2val:0xbf90000000004029; 
   valaddr_reg:x3; val_offset:406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 406*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x000000000102c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000000000058; op2val:0xbf9000000000102c; 
   valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000005b and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f8000000000005b; op2val:0xbf9000000000003e; 
   valaddr_reg:x3; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 410*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000005c and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x000000020002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f8000000000005c; op2val:0xbf9000000020002e; 
   valaddr_reg:x3; val_offset:412*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 412*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x3ce and fm2 == 0x6000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000005; op2val:0x3ce6000000000000; 
   valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x3d4 and fm2 == 0xfa80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000000b; op2val:0x3d4fa80000000000; 
   valaddr_reg:x3; val_offset:416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 416*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x3df and fm2 == 0xffff500000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000000b; op2val:0x3dfffff500000000; 
   valaddr_reg:x3; val_offset:418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 418*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000000c and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0xd000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000000c; op2val:0x3d1d000000000000; 
   valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000014 and fs2 == 0 and fe2 == 0x3d3 and fm2 == 0xec00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000014; op2val:0x3d3ec00000000000; 
   valaddr_reg:x3; val_offset:422*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 422*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000019 and fs2 == 1 and fe2 == 0x3cf and fm2 == 0x1000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000019; op2val:0xbcf1000000000000; 
   valaddr_reg:x3; val_offset:424*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 424*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x3d9 and fm2 == 0xff90000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000001c; op2val:0x3d9ff90000000000; 
   valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0x1000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000026; op2val:0xbd01000000000000; 
   valaddr_reg:x3; val_offset:428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 428*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000032 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0x8800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000032; op2val:0xbd08800000000000; 
   valaddr_reg:x3; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 430*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x3d6 and fm2 == 0xf9a0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000033; op2val:0x3d6f9a0000000000; 
   valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000003a and fs2 == 0 and fe2 == 0x3dc and fm2 == 0xffe3000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000003a; op2val:0x3dcffe3000000000; 
   valaddr_reg:x3; val_offset:434*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 434*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000003d and fs2 == 0 and fe2 == 0x3cc and fm2 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000003d; op2val:0x3cc8000000000000; 
   valaddr_reg:x3; val_offset:436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 436*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000043 and fs2 == 0 and fe2 == 0x3d8 and fm2 == 0xfde8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000043; op2val:0x3d8fde8000000000; 
   valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x3d7 and fm2 == 0xfbc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000044; op2val:0x3d7fbc0000000000; 
   valaddr_reg:x3; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 440*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000046 and fs2 == 0 and fe2 == 0x3d5 and fm2 == 0xee80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000046; op2val:0x3d5ee80000000000; 
   valaddr_reg:x3; val_offset:442*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 442*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004a and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x2000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000004a; op2val:0xbd12000000000000; 
   valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x3db and fm2 == 0xffb5000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000004b; op2val:0x3dbffb5000000000; 
   valaddr_reg:x3; val_offset:446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 446*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x3da and fm2 == 0xff68000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000004c; op2val:0x3daff68000000000; 
   valaddr_reg:x3; val_offset:448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 448*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004f and fs2 == 0 and fe2 == 0x3e0 and fm2 == 0xfffd880000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000004f; op2val:0x3e0fffd880000000; 
   valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x3dd and fm2 == 0xffeac00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000055; op2val:0x3ddffeac00000000; 
   valaddr_reg:x3; val_offset:452*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 452*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0xa800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000055; op2val:0xbd0a800000000000; 
   valaddr_reg:x3; val_offset:454*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 454*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000005a and fs2 == 0 and fe2 == 0x3de and fm2 == 0xfff4c00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff000000000005a; op2val:0x3defff4c00000000; 
   valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000061 and fs2 == 0 and fe2 == 0x3d2 and fm2 == 0x3e00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3ff0000000000061; op2val:0x3d23e00000000000; 
   valaddr_reg:x3; val_offset:458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 458*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000002; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 460*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000004 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xffffffffbfff6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000004; op2val:0x7fdffffffffbfff6; 
   valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000005; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:464*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 464*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000006 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000006; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 466*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xffffffffdffec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000009; op2val:0x7fdffffffffdffec; 
   valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffffffe8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000009; op2val:0x7fdfffffffffffe8; 
   valaddr_reg:x3; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 470*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffffefe8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000000b; op2val:0x7fdfffffffffefe8; 
   valaddr_reg:x3; val_offset:472*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 472*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffffffa4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000000d; op2val:0x7fdfffffffffffa4; 
   valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000e and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000000e; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 476*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000010 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffdfffde and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000010; op2val:0x7fdfffffffdfffde; 
   valaddr_reg:x3; val_offset:478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 478*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000013 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000013; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000014 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000014; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:482*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 482*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffffffc2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000001a; op2val:0x7fdfffffffffffc2; 
   valaddr_reg:x3; val_offset:484*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 484*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001a and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000001a; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001b and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffff7fffc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000001b; op2val:0x7fdfffffff7fffc8; 
   valaddr_reg:x3; val_offset:488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 488*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xffffffffff7c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000001c; op2val:0x7fdffffffffff7c6; 
   valaddr_reg:x3; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 490*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffffdfc4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000001d; op2val:0x7fdfffffffffdfc4; 
   valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffffffb4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000001d; op2val:0x7fdfffffffffffb4; 
   valaddr_reg:x3; val_offset:494*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 494*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000026 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xffffffffffeb2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000026; op2val:0x7fdffffffffffeb2; 
   valaddr_reg:x3; val_offset:496*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 496*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000029; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002e and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xffffffffeffa2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000002e; op2val:0x7fdffffffffeffa2; 
   valaddr_reg:x3; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 500*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002f and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000002f; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:502*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 502*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000031; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000032 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffffff7a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000032; op2val:0x7fdfffffffffff7a; 
   valaddr_reg:x3; val_offset:506*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 506*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffbfff98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000033; op2val:0x7fdfffffffbfff98; 
   valaddr_reg:x3; val_offset:508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 508*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000034 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000034; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000038 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffff7f8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000038; op2val:0x7fdfffffffff7f8e; 
   valaddr_reg:x3; val_offset:512*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 512*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003a and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xffffffff7ff8a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000003a; op2val:0x7fdffffffff7ff8a; 
   valaddr_reg:x3; val_offset:514*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 514*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003b and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000003b; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xffffffffffd80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000003f; op2val:0x7fdffffffffffd80; 
   valaddr_reg:x3; val_offset:518*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 518*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000040; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 520*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000043 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000043; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000048 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xffffffffffeee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000048; op2val:0x7fdffffffffffeee; 
   valaddr_reg:x3; val_offset:524*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 524*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffffbf68 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000004b; op2val:0x7fdfffffffffbf68; 
   valaddr_reg:x3; val_offset:526*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 526*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004d and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000004d; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004e and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000004e; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 530*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004f and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000004f; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:532*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 532*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000050 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000050; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffffff58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000052; op2val:0x7fdfffffffffff58; 
   valaddr_reg:x3; val_offset:536*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 536*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000052 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000052; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:538*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 538*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000057 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfffffffefff50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000057; op2val:0x7fdfffffffefff50; 
   valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000057 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000057; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:542*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 542*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0000000000058; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:544*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 544*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005b and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000005b; op2val:0xfff0000000000000; 
   valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005c and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xffffffffffb46 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe000000000005c; op2val:0x7fdffffffffffb46; 
   valaddr_reg:x3; val_offset:548*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 548*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffff7fffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0xffffffff7fffe; 
   valaddr_reg:x3; val_offset:550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 550*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0xffffffffffffc; 
   valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0x8000000000000011; 
   valaddr_reg:x3; val_offset:554*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 554*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x000 and fm2 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x2; op2val:0x8000000000000007; 
   valaddr_reg:x3; val_offset:556*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 556*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(1,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(9227875636482146048,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(9227875636482146297,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(2043,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4503599623176184,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(524281,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(4503599627354102,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(9223372036854776073,64,FLEN)
NAN_BOXED(10,64,FLEN)
NAN_BOXED(16374,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(9223372036854777868,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(9227875636482015242,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(9223372036854775822,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(9223372036854779916,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(9223372036858970124,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(499,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(4084,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(8179,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(9227875636482113548,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(9227875636482145292,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(9227875636481622030,64,FLEN)
NAN_BOXED(16,64,FLEN)
NAN_BOXED(9223372036854906896,64,FLEN)
NAN_BOXED(16,64,FLEN)
NAN_BOXED(9227875636482144271,64,FLEN)
NAN_BOXED(17,64,FLEN)
NAN_BOXED(9223372036855824402,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(110,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(238,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(9223372036854792211,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(9227875636481097745,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(4077,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(9223372036854776085,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(1048556,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(4503599627362281,64,FLEN)
NAN_BOXED(24,64,FLEN)
NAN_BOXED(489,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(4503599627370466,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(9227875636482146327,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(262118,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(9223372036855300123,64,FLEN)
NAN_BOXED(28,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(28,64,FLEN)
NAN_BOXED(9227875636482146267,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(4503599627370448,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(9223372036854776863,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(9223372036854775904,64,FLEN)
NAN_BOXED(33,64,FLEN)
NAN_BOXED(991,64,FLEN)
NAN_BOXED(33,64,FLEN)
NAN_BOXED(4194272,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(16351,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(4194270,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(9223372036854775838,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(9227875636481884195,64,FLEN)
NAN_BOXED(37,64,FLEN)
NAN_BOXED(9223372036854906918,64,FLEN)
NAN_BOXED(37,64,FLEN)
NAN_BOXED(9223372036856872997,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(9223372036854841382,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(9223372036854775831,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(9223372036854808615,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(9227875636482138150,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(4503599625273303,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(9223372036854775881,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(9223372036856873001,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(262103,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(9223372036854784041,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(9227875636482146312,64,FLEN)
NAN_BOXED(42,64,FLEN)
NAN_BOXED(9223372036854775978,64,FLEN)
NAN_BOXED(43,64,FLEN)
NAN_BOXED(32725,64,FLEN)
NAN_BOXED(43,64,FLEN)
NAN_BOXED(4503599627370444,64,FLEN)
NAN_BOXED(43,64,FLEN)
NAN_BOXED(9223372036855037995,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(2097109,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(212,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(131026,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(9223372036854775822,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(9223372036854775919,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(9223372036854841391,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(9223372036855037999,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(4503599627370382,64,FLEN)
NAN_BOXED(50,64,FLEN)
NAN_BOXED(9223372036854775857,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(8142,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(9227875636482080818,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(4503599627369931,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(9223372036854775864,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(4503599627370185,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(9223372036854775860,64,FLEN)
NAN_BOXED(57,64,FLEN)
NAN_BOXED(2097095,64,FLEN)
NAN_BOXED(58,64,FLEN)
NAN_BOXED(4503599627304901,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(9223372036854776892,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(9223372036854775870,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(4503599627239360,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(9223372036854775863,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(9223372036854792255,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(4503599626321855,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(9223372036854775904,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(960,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(9227875636480049218,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(9227875636482145859,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(9223372036854775869,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(9223372036854777926,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(9223372036854784071,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(1048505,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(9223372036854775880,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(9223372036855824455,64,FLEN)
NAN_BOXED(72,64,FLEN)
NAN_BOXED(65464,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(65464,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(4503599627369398,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(9223372036854775898,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(9223372036854776393,64,FLEN)
NAN_BOXED(77,64,FLEN)
NAN_BOXED(9223372036854775885,64,FLEN)
NAN_BOXED(78,64,FLEN)
NAN_BOXED(4503599627108273,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(524206,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(4503599627370381,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(9223372036855300179,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(9227875636482146383,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(9227875636477952082,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(4503599627370410,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(9227875636482142291,64,FLEN)
NAN_BOXED(85,64,FLEN)
NAN_BOXED(9223372036854776022,64,FLEN)
NAN_BOXED(86,64,FLEN)
NAN_BOXED(9223372036854775897,64,FLEN)
NAN_BOXED(86,64,FLEN)
NAN_BOXED(9223372036854775902,64,FLEN)
NAN_BOXED(87,64,FLEN)
NAN_BOXED(4503599627370280,64,FLEN)
NAN_BOXED(87,64,FLEN)
NAN_BOXED(9223372036854775890,64,FLEN)
NAN_BOXED(87,64,FLEN)
NAN_BOXED(9227875636482146374,64,FLEN)
NAN_BOXED(88,64,FLEN)
NAN_BOXED(9223372036854775905,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(9223372036854776410,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(9227875636482130008,64,FLEN)
NAN_BOXED(90,64,FLEN)
NAN_BOXED(130983,64,FLEN)
NAN_BOXED(90,64,FLEN)
NAN_BOXED(4503599627337637,64,FLEN)
NAN_BOXED(91,64,FLEN)
NAN_BOXED(1957,64,FLEN)
NAN_BOXED(91,64,FLEN)
NAN_BOXED(4503599627366308,64,FLEN)
NAN_BOXED(92,64,FLEN)
NAN_BOXED(9227875636482146267,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(9227875636482146392,64,FLEN)
NAN_BOXED(94,64,FLEN)
NAN_BOXED(32675,64,FLEN)
NAN_BOXED(94,64,FLEN)
NAN_BOXED(9223372036854775899,64,FLEN)
NAN_BOXED(95,64,FLEN)
NAN_BOXED(9223372036854780000,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(9223372036858970209,64,FLEN)
NAN_BOXED(98,64,FLEN)
NAN_BOXED(9223372036854808675,64,FLEN)
NAN_BOXED(99,64,FLEN)
NAN_BOXED(4503599627368348,64,FLEN)
NAN_BOXED(4503599627370501,64,FLEN)
NAN_BOXED(2097147,64,FLEN)
NAN_BOXED(4503599627370501,64,FLEN)
NAN_BOXED(9232379236109647874,64,FLEN)
NAN_BOXED(4503599627370502,64,FLEN)
NAN_BOXED(9223372036854775810,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(9232379236109516836,64,FLEN)
NAN_BOXED(4503599627370509,64,FLEN)
NAN_BOXED(9232379236109518854,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(9223372036854775822,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(9232379236109516816,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(9232379236109549576,64,FLEN)
NAN_BOXED(4503599627370512,64,FLEN)
NAN_BOXED(9232379236109533192,64,FLEN)
NAN_BOXED(4503599627370513,64,FLEN)
NAN_BOXED(9232379236109516812,64,FLEN)
NAN_BOXED(4503599627370514,64,FLEN)
NAN_BOXED(65518,64,FLEN)
NAN_BOXED(4503599627370516,64,FLEN)
NAN_BOXED(9232379236109516810,64,FLEN)
NAN_BOXED(4503599627370518,64,FLEN)
NAN_BOXED(9232379236110565387,64,FLEN)
NAN_BOXED(4503599627370519,64,FLEN)
NAN_BOXED(8169,64,FLEN)
NAN_BOXED(4503599627370519,64,FLEN)
NAN_BOXED(9232379236109516876,64,FLEN)
NAN_BOXED(4503599627370523,64,FLEN)
NAN_BOXED(9223372036854775827,64,FLEN)
NAN_BOXED(4503599627370530,64,FLEN)
NAN_BOXED(9223372036854775826,64,FLEN)
NAN_BOXED(4503599627370531,64,FLEN)
NAN_BOXED(131037,64,FLEN)
NAN_BOXED(4503599627370531,64,FLEN)
NAN_BOXED(4194269,64,FLEN)
NAN_BOXED(4503599627370532,64,FLEN)
NAN_BOXED(9223372036854775842,64,FLEN)
NAN_BOXED(4503599627370534,64,FLEN)
NAN_BOXED(32730,64,FLEN)
NAN_BOXED(4503599627370534,64,FLEN)
NAN_BOXED(9232379236109516820,64,FLEN)
NAN_BOXED(4503599627370535,64,FLEN)
NAN_BOXED(9232379236109517076,64,FLEN)
NAN_BOXED(4503599627370537,64,FLEN)
NAN_BOXED(9223372036854775817,64,FLEN)
NAN_BOXED(4503599627370539,64,FLEN)
NAN_BOXED(9232379236109517334,64,FLEN)
NAN_BOXED(4503599627370539,64,FLEN)
NAN_BOXED(9232379236109778966,64,FLEN)
NAN_BOXED(4503599627370540,64,FLEN)
NAN_BOXED(262100,64,FLEN)
NAN_BOXED(4503599627370540,64,FLEN)
NAN_BOXED(1048532,64,FLEN)
NAN_BOXED(4503599627370540,64,FLEN)
NAN_BOXED(9232379236109525014,64,FLEN)
NAN_BOXED(4503599627370544,64,FLEN)
NAN_BOXED(4048,64,FLEN)
NAN_BOXED(4503599627370545,64,FLEN)
NAN_BOXED(16335,64,FLEN)
NAN_BOXED(4503599627370547,64,FLEN)
NAN_BOXED(9232379236109516828,64,FLEN)
NAN_BOXED(4503599627370550,64,FLEN)
NAN_BOXED(9232379236109517851,64,FLEN)
NAN_BOXED(4503599627370558,64,FLEN)
NAN_BOXED(9232379236109520927,64,FLEN)
NAN_BOXED(4503599627370560,64,FLEN)
NAN_BOXED(448,64,FLEN)
NAN_BOXED(4503599627370560,64,FLEN)
NAN_BOXED(9232379236109582368,64,FLEN)
NAN_BOXED(4503599627370569,64,FLEN)
NAN_BOXED(9223372036854775817,64,FLEN)
NAN_BOXED(4503599627370569,64,FLEN)
NAN_BOXED(9232379236111613988,64,FLEN)
NAN_BOXED(4503599627370574,64,FLEN)
NAN_BOXED(178,64,FLEN)
NAN_BOXED(4503599627370578,64,FLEN)
NAN_BOXED(1966,64,FLEN)
NAN_BOXED(4503599627370579,64,FLEN)
NAN_BOXED(941,64,FLEN)
NAN_BOXED(4503599627370584,64,FLEN)
NAN_BOXED(9232379236110041132,64,FLEN)
NAN_BOXED(4503599627370588,64,FLEN)
NAN_BOXED(524196,64,FLEN)
NAN_BOXED(4503599627370590,64,FLEN)
NAN_BOXED(9232379236109516863,64,FLEN)
NAN_BOXED(4503599627370590,64,FLEN)
NAN_BOXED(9232379236109516975,64,FLEN)
NAN_BOXED(4503599627370592,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(4575657221408423939,64,FLEN)
NAN_BOXED(13803532857890570246,64,FLEN)
NAN_BOXED(4575657221408423940,64,FLEN)
NAN_BOXED(13803532857890578434,64,FLEN)
NAN_BOXED(4575657221408423944,64,FLEN)
NAN_BOXED(13803532857890570372,64,FLEN)
NAN_BOXED(4575657221408423948,64,FLEN)
NAN_BOXED(13803532857890701318,64,FLEN)
NAN_BOXED(4575657221408423951,64,FLEN)
NAN_BOXED(13803532857890832392,64,FLEN)
NAN_BOXED(4575657221408423952,64,FLEN)
NAN_BOXED(13803532857890635784,64,FLEN)
NAN_BOXED(4575657221408423955,64,FLEN)
NAN_BOXED(13803532857890570506,64,FLEN)
NAN_BOXED(4575657221408423961,64,FLEN)
NAN_BOXED(13803532857890570254,64,FLEN)
NAN_BOXED(4575657221408423961,64,FLEN)
NAN_BOXED(13803532857891618828,64,FLEN)
NAN_BOXED(4575657221408423965,64,FLEN)
NAN_BOXED(13803532857890570766,64,FLEN)
NAN_BOXED(4575657221408423971,64,FLEN)
NAN_BOXED(13803532857890570266,64,FLEN)
NAN_BOXED(4575657221408423979,64,FLEN)
NAN_BOXED(13803532857890570326,64,FLEN)
NAN_BOXED(4575657221408423984,64,FLEN)
NAN_BOXED(13803532857890570296,64,FLEN)
NAN_BOXED(4575657221408423999,64,FLEN)
NAN_BOXED(13803532857890570272,64,FLEN)
NAN_BOXED(4575657221408424005,64,FLEN)
NAN_BOXED(13803532857890572322,64,FLEN)
NAN_BOXED(4575657221408424010,64,FLEN)
NAN_BOXED(13803532857890571301,64,FLEN)
NAN_BOXED(4575657221408424014,64,FLEN)
NAN_BOXED(13803532857890603047,64,FLEN)
NAN_BOXED(4575657221408424014,64,FLEN)
NAN_BOXED(13803532857891094567,64,FLEN)
NAN_BOXED(4575657221408424017,64,FLEN)
NAN_BOXED(13803532857890570282,64,FLEN)
NAN_BOXED(4575657221408424018,64,FLEN)
NAN_BOXED(13803532857890586665,64,FLEN)
NAN_BOXED(4575657221408424024,64,FLEN)
NAN_BOXED(13803532857890574380,64,FLEN)
NAN_BOXED(4575657221408424027,64,FLEN)
NAN_BOXED(13803532857890570302,64,FLEN)
NAN_BOXED(4575657221408424028,64,FLEN)
NAN_BOXED(13803532857892667438,64,FLEN)
NAN_BOXED(4607182418800017413,64,FLEN)
NAN_BOXED(4388194886919127040,64,FLEN)
NAN_BOXED(4607182418800017419,64,FLEN)
NAN_BOXED(4417934477427212288,64,FLEN)
NAN_BOXED(4607182418800017419,64,FLEN)
NAN_BOXED(4467570783106891776,64,FLEN)
NAN_BOXED(4607182418800017420,64,FLEN)
NAN_BOXED(4403676010638213120,64,FLEN)
NAN_BOXED(4607182418800017428,64,FLEN)
NAN_BOXED(4413175791102197760,64,FLEN)
NAN_BOXED(4607182418800017433,64,FLEN)
NAN_BOXED(13614663148517720064,64,FLEN)
NAN_BOXED(4607182418800017436,64,FLEN)
NAN_BOXED(4440541536005914624,64,FLEN)
NAN_BOXED(4607182418800017446,64,FLEN)
NAN_BOXED(13619166748145090560,64,FLEN)
NAN_BOXED(4607182418800017458,64,FLEN)
NAN_BOXED(13621277810470420480,64,FLEN)
NAN_BOXED(4607182418800017459,64,FLEN)
NAN_BOXED(4426926283519164416,64,FLEN)
NAN_BOXED(4607182418800017466,64,FLEN)
NAN_BOXED(4454058038604595200,64,FLEN)
NAN_BOXED(4607182418800017469,64,FLEN)
NAN_BOXED(4379750637617807360,64,FLEN)
NAN_BOXED(4607182418800017475,64,FLEN)
NAN_BOXED(4436008799320408064,64,FLEN)
NAN_BOXED(4607182418800017476,64,FLEN)
NAN_BOXED(4431467266541879296,64,FLEN)
NAN_BOXED(4607182418800017478,64,FLEN)
NAN_BOXED(4422226970822049792,64,FLEN)
NAN_BOXED(4607182418800017482,64,FLEN)
NAN_BOXED(13623951822749171712,64,FLEN)
NAN_BOXED(4607182418800017483,64,FLEN)
NAN_BOXED(4449551277881294848,64,FLEN)
NAN_BOXED(4607182418800017484,64,FLEN)
NAN_BOXED(4445042386854215680,64,FLEN)
NAN_BOXED(4607182418800017487,64,FLEN)
NAN_BOXED(4472074260327694336,64,FLEN)
NAN_BOXED(4607182418800017493,64,FLEN)
NAN_BOXED(4458562170807910400,64,FLEN)
NAN_BOXED(4607182418800017493,64,FLEN)
NAN_BOXED(13621840760423841792,64,FLEN)
NAN_BOXED(4607182418800017498,64,FLEN)
NAN_BOXED(4463066457630048256,64,FLEN)
NAN_BOXED(4607182418800017505,64,FLEN)
NAN_BOXED(4405611151103098880,64,FLEN)
NAN_BOXED(9214364837600034818,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034820,64,FLEN)
NAN_BOXED(9214364837599772662,64,FLEN)
NAN_BOXED(9214364837600034821,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034822,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034825,64,FLEN)
NAN_BOXED(9214364837599903724,64,FLEN)
NAN_BOXED(9214364837600034825,64,FLEN)
NAN_BOXED(9214364837600034792,64,FLEN)
NAN_BOXED(9214364837600034827,64,FLEN)
NAN_BOXED(9214364837600030696,64,FLEN)
NAN_BOXED(9214364837600034829,64,FLEN)
NAN_BOXED(9214364837600034724,64,FLEN)
NAN_BOXED(9214364837600034830,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034832,64,FLEN)
NAN_BOXED(9214364837597937630,64,FLEN)
NAN_BOXED(9214364837600034835,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034836,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034842,64,FLEN)
NAN_BOXED(9214364837600034754,64,FLEN)
NAN_BOXED(9214364837600034842,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034843,64,FLEN)
NAN_BOXED(9214364837591646152,64,FLEN)
NAN_BOXED(9214364837600034844,64,FLEN)
NAN_BOXED(9214364837600032710,64,FLEN)
NAN_BOXED(9214364837600034845,64,FLEN)
NAN_BOXED(9214364837600026564,64,FLEN)
NAN_BOXED(9214364837600034845,64,FLEN)
NAN_BOXED(9214364837600034740,64,FLEN)
NAN_BOXED(9214364837600034854,64,FLEN)
NAN_BOXED(9214364837600034482,64,FLEN)
NAN_BOXED(9214364837600034857,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034862,64,FLEN)
NAN_BOXED(9214364837599969186,64,FLEN)
NAN_BOXED(9214364837600034863,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034865,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034866,64,FLEN)
NAN_BOXED(9214364837600034682,64,FLEN)
NAN_BOXED(9214364837600034867,64,FLEN)
NAN_BOXED(9214364837595840408,64,FLEN)
NAN_BOXED(9214364837600034868,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034872,64,FLEN)
NAN_BOXED(9214364837600001934,64,FLEN)
NAN_BOXED(9214364837600034874,64,FLEN)
NAN_BOXED(9214364837599510410,64,FLEN)
NAN_BOXED(9214364837600034875,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034879,64,FLEN)
NAN_BOXED(9214364837600034176,64,FLEN)
NAN_BOXED(9214364837600034880,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034883,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034888,64,FLEN)
NAN_BOXED(9214364837600034542,64,FLEN)
NAN_BOXED(9214364837600034891,64,FLEN)
NAN_BOXED(9214364837600018280,64,FLEN)
NAN_BOXED(9214364837600034893,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034894,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034895,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034896,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034898,64,FLEN)
NAN_BOXED(9214364837600034648,64,FLEN)
NAN_BOXED(9214364837600034898,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034903,64,FLEN)
NAN_BOXED(9214364837598986064,64,FLEN)
NAN_BOXED(9214364837600034903,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034904,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034907,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034908,64,FLEN)
NAN_BOXED(9214364837600033606,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(4503599626846206,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(9223372036854775825,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 46*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
