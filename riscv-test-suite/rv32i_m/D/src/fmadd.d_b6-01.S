
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b6 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b6)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f21, rs2==f20, rs3==f29, rd==f21,fs1 == 0 and fe1 == 0x396 and fm1 == 0x750f3fabf4677 and fs2 == 0 and fe2 == 0x413 and fm2 == 0x5f57da03cf336 and fs3 == 0 and fe3 == 0x396 and fm3 == 0x1d00f1dc80e1e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f21; op2:f20; op3:f29; dest:f21; op1val:0x396750f3fabf4677; op2val:0x4135f57da03cf336;
op3val:0x3961d00f1dc80e1e; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f21, f21, f20, f29, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f24, rs2==f1, rs3==f27, rd==f14,fs1 == 0 and fe1 == 0x396 and fm1 == 0x750f3fabf4677 and fs2 == 0 and fe2 == 0x413 and fm2 == 0x5f57da03cf336 and fs3 == 0 and fe3 == 0x396 and fm3 == 0x1d00f1dc80e1e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f24; op2:f1; op3:f27; dest:f14; op1val:0x396750f3fabf4677; op2val:0x4135f57da03cf336;
op3val:0x3961d00f1dc80e1e; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f14, f24, f1, f27, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f6, rs2==f6, rs3==f28, rd==f6,fs1 == 0 and fe1 == 0x396 and fm1 == 0x750f3fabf4677 and fs2 == 0 and fe2 == 0x413 and fm2 == 0x5f57da03cf336 and fs3 == 0 and fe3 == 0x396 and fm3 == 0x1d00f1dc80e1e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f6; op2:f6; op3:f28; dest:f6; op1val:0x396750f3fabf4677; op2val:0x396750f3fabf4677;
op3val:0x3961d00f1dc80e1e; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f6, f6, f6, f28, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rs3 == rd, rs1==f23, rs2==f23, rs3==f23, rd==f23,fs1 == 0 and fe1 == 0x396 and fm1 == 0x750f3fabf4677 and fs2 == 0 and fe2 == 0x413 and fm2 == 0x5f57da03cf336 and fs3 == 0 and fe3 == 0x396 and fm3 == 0x1d00f1dc80e1e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f23; op2:f23; op3:f23; dest:f23; op1val:0x396750f3fabf4677; op2val:0x396750f3fabf4677;
op3val:0x396750f3fabf4677; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f23, f23, f23, f23, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f19, rs2==f19, rs3==f26, rd==f8,fs1 == 0 and fe1 == 0x396 and fm1 == 0x750f3fabf4677 and fs2 == 0 and fe2 == 0x413 and fm2 == 0x5f57da03cf336 and fs3 == 0 and fe3 == 0x396 and fm3 == 0x1d00f1dc80e1e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f19; op2:f19; op3:f26; dest:f8; op1val:0x396750f3fabf4677; op2val:0x396750f3fabf4677;
op3val:0x3961d00f1dc80e1e; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f8, f19, f19, f26, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f12, rs2==f27, rs3==f0, rd==f27,fs1 == 0 and fe1 == 0x399 and fm1 == 0x328175f6f27a7 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc4b935ffb5f5c and fs3 == 0 and fe3 == 0x395 and fm3 == 0xef834e8f93d95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f12; op2:f27; op3:f0; dest:f27; op1val:0x399328175f6f27a7; op2val:0xbfac4b935ffb5f5c;
op3val:0x395ef834e8f93d95; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f27, f12, f27, f0, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f31, rs2==f25, rs3==f25, rd==f11,fs1 == 0 and fe1 == 0x399 and fm1 == 0x328175f6f27a7 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc4b935ffb5f5c and fs3 == 0 and fe3 == 0x395 and fm3 == 0xef834e8f93d95 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f31; op2:f25; op3:f25; dest:f11; op1val:0x399328175f6f27a7; op2val:0xbfac4b935ffb5f5c;
op3val:0xbfac4b935ffb5f5c; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f11, f31, f25, f25, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f4, rs2==f8, rs3==f4, rd==f20,fs1 == 0 and fe1 == 0x399 and fm1 == 0x328175f6f27a7 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc4b935ffb5f5c and fs3 == 0 and fe3 == 0x395 and fm3 == 0xef834e8f93d95 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f4; op2:f8; op3:f4; dest:f20; op1val:0x399328175f6f27a7; op2val:0xbfac4b935ffb5f5c;
op3val:0x399328175f6f27a7; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f20, f4, f8, f4, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f27, rs2==f0, rs3==f15, rd==f15,fs1 == 0 and fe1 == 0x399 and fm1 == 0x328175f6f27a7 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc4b935ffb5f5c and fs3 == 0 and fe3 == 0x395 and fm3 == 0xef834e8f93d95 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f27; op2:f0; op3:f15; dest:f15; op1val:0x399328175f6f27a7; op2val:0xbfac4b935ffb5f5c;
op3val:0x395ef834e8f93d95; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f15, f27, f0, f15, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rd == rs2 == rs3 != rs1, rs1==f0, rs2==f16, rs3==f16, rd==f16,fs1 == 0 and fe1 == 0x399 and fm1 == 0x328175f6f27a7 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc4b935ffb5f5c and fs3 == 0 and fe3 == 0x395 and fm3 == 0xef834e8f93d95 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f0; op2:f16; op3:f16; dest:f16; op1val:0x399328175f6f27a7; op2val:0xbfac4b935ffb5f5c;
op3val:0xbfac4b935ffb5f5c; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f16, f0, f16, f16, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f18, rs2==f12, rs3==f18, rd==f18,fs1 == 0 and fe1 == 0x399 and fm1 == 0xa60f4558bba7f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xaa944fc0f6c3c and fs3 == 0 and fe3 == 0x398 and fm3 == 0x62e30037fb4cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f18; op2:f12; op3:f18; dest:f18; op1val:0x399a60f4558bba7f; op2val:0xbfdaa944fc0f6c3c;
op3val:0x399a60f4558bba7f; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f18, f18, f12, f18, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 == rs3 != rd, rs1==f13, rs2==f13, rs3==f13, rd==f17,fs1 == 0 and fe1 == 0x399 and fm1 == 0xa60f4558bba7f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xaa944fc0f6c3c and fs3 == 0 and fe3 == 0x398 and fm3 == 0x62e30037fb4cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f13; op2:f13; op3:f13; dest:f17; op1val:0x399a60f4558bba7f; op2val:0x399a60f4558bba7f;
op3val:0x399a60f4558bba7f; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f17, f13, f13, f13, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f28, rs2==f9, rs3==f11, rd==f26,fs1 == 0 and fe1 == 0x399 and fm1 == 0xa60f4558bba7f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xaa944fc0f6c3c and fs3 == 0 and fe3 == 0x398 and fm3 == 0x62e30037fb4cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f28; op2:f9; op3:f11; dest:f26; op1val:0x399a60f4558bba7f; op2val:0xbfdaa944fc0f6c3c;
op3val:0x39862e30037fb4cd; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f26, f28, f9, f11, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f25, rs2==f28, rs3==f12, rd==f24,fs1 == 0 and fe1 == 0x399 and fm1 == 0xa60f4558bba7f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xaa944fc0f6c3c and fs3 == 0 and fe3 == 0x398 and fm3 == 0x62e30037fb4cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f25; op2:f28; op3:f12; dest:f24; op1val:0x399a60f4558bba7f; op2val:0xbfdaa944fc0f6c3c;
op3val:0x39862e30037fb4cd; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f24, f25, f28, f12, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f22, rs2==f24, rs3==f31, rd==f10,fs1 == 0 and fe1 == 0x399 and fm1 == 0xa60f4558bba7f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xaa944fc0f6c3c and fs3 == 0 and fe3 == 0x398 and fm3 == 0x62e30037fb4cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f22; op2:f24; op3:f31; dest:f10; op1val:0x399a60f4558bba7f; op2val:0xbfdaa944fc0f6c3c;
op3val:0x39862e30037fb4cd; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f10, f22, f24, f31, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f10, rs2==f21, rs3==f6, rd==f4,fs1 == 0 and fe1 == 0x399 and fm1 == 0xcb3de38d2af33 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5f019cdd5390a and fs3 == 0 and fe3 == 0x39b and fm3 == 0x3e585862dd141 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f10; op2:f21; op3:f6; dest:f4; op1val:0x399cb3de38d2af33; op2val:0xc005f019cdd5390a;
op3val:0x39b3e585862dd141; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f4, f10, f21, f6, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f29, rs2==f5, rs3==f24, rd==f12,fs1 == 0 and fe1 == 0x399 and fm1 == 0xcb3de38d2af33 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5f019cdd5390a and fs3 == 0 and fe3 == 0x39b and fm3 == 0x3e585862dd141 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f29; op2:f5; op3:f24; dest:f12; op1val:0x399cb3de38d2af33; op2val:0xc005f019cdd5390a;
op3val:0x39b3e585862dd141; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f12, f29, f5, f24, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f20, rs2==f15, rs3==f30, rd==f22,fs1 == 0 and fe1 == 0x399 and fm1 == 0xcb3de38d2af33 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5f019cdd5390a and fs3 == 0 and fe3 == 0x39b and fm3 == 0x3e585862dd141 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f20; op2:f15; op3:f30; dest:f22; op1val:0x399cb3de38d2af33; op2val:0xc005f019cdd5390a;
op3val:0x39b3e585862dd141; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f22, f20, f15, f30, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f1, rs2==f30, rs3==f19, rd==f29,fs1 == 0 and fe1 == 0x399 and fm1 == 0xcb3de38d2af33 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5f019cdd5390a and fs3 == 0 and fe3 == 0x39b and fm3 == 0x3e585862dd141 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f1; op2:f30; op3:f19; dest:f29; op1val:0x399cb3de38d2af33; op2val:0xc005f019cdd5390a;
op3val:0x39b3e585862dd141; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f29, f1, f30, f19, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f3, rs2==f22, rs3==f21, rd==f30,fs1 == 0 and fe1 == 0x399 and fm1 == 0xcb3de38d2af33 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5f019cdd5390a and fs3 == 0 and fe3 == 0x39b and fm3 == 0x3e585862dd141 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f3; op2:f22; op3:f21; dest:f30; op1val:0x399cb3de38d2af33; op2val:0xc005f019cdd5390a;
op3val:0x39b3e585862dd141; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f30, f3, f22, f21, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f7, rs2==f14, rs3==f22, rd==f0,fs1 == 0 and fe1 == 0x399 and fm1 == 0xcb6b7d892c724 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0d19d99aca709 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1e8062836913b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f7; op2:f14; op3:f22; dest:f0; op1val:0x399cb6b7d892c724; op2val:0xc000d19d99aca709;
op3val:0x39b1e8062836913b; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f0, f7, f14, f22, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f11, rs2==f29, rs3==f14, rd==f28,fs1 == 0 and fe1 == 0x399 and fm1 == 0xcb6b7d892c724 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0d19d99aca709 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1e8062836913b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f11; op2:f29; op3:f14; dest:f28; op1val:0x399cb6b7d892c724; op2val:0xc000d19d99aca709;
op3val:0x39b1e8062836913b; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f28, f11, f29, f14, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f14, rs2==f18, rs3==f8, rd==f9,fs1 == 0 and fe1 == 0x399 and fm1 == 0xcb6b7d892c724 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0d19d99aca709 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1e8062836913b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f14; op2:f18; op3:f8; dest:f9; op1val:0x399cb6b7d892c724; op2val:0xc000d19d99aca709;
op3val:0x39b1e8062836913b; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f9, f14, f18, f8, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f17, rs2==f4, rs3==f2, rd==f1,fs1 == 0 and fe1 == 0x399 and fm1 == 0xcb6b7d892c724 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0d19d99aca709 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1e8062836913b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f17; op2:f4; op3:f2; dest:f1; op1val:0x399cb6b7d892c724; op2val:0xc000d19d99aca709;
op3val:0x39b1e8062836913b; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f1, f17, f4, f2, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f16, rs2==f7, rs3==f20, rd==f3,fs1 == 0 and fe1 == 0x399 and fm1 == 0xcb6b7d892c724 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0d19d99aca709 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1e8062836913b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f16; op2:f7; op3:f20; dest:f3; op1val:0x399cb6b7d892c724; op2val:0xc000d19d99aca709;
op3val:0x39b1e8062836913b; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f3, f16, f7, f20, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f26, rs2==f3, rs3==f5, rd==f25,fs1 == 0 and fe1 == 0x399 and fm1 == 0xed499e45bcd24 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7d3b6768d9788 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2166f83814469 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f26; op2:f3; op3:f5; dest:f25; op1val:0x399ed499e45bcd24; op2val:0x4017d3b6768d9788;
op3val:0x39b2166f83814469; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f25, f26, f3, f5, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f30, rs2==f10, rs3==f17, rd==f2,fs1 == 0 and fe1 == 0x399 and fm1 == 0xed499e45bcd24 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7d3b6768d9788 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2166f83814469 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f10; op3:f17; dest:f2; op1val:0x399ed499e45bcd24; op2val:0x4017d3b6768d9788;
op3val:0x39b2166f83814469; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f2, f30, f10, f17, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f9, rs2==f31, rs3==f10, rd==f5,fs1 == 0 and fe1 == 0x399 and fm1 == 0xed499e45bcd24 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7d3b6768d9788 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2166f83814469 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f9; op2:f31; op3:f10; dest:f5; op1val:0x399ed499e45bcd24; op2val:0x4017d3b6768d9788;
op3val:0x39b2166f83814469; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f5, f9, f31, f10, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f5, rs2==f11, rs3==f7, rd==f13,fs1 == 0 and fe1 == 0x399 and fm1 == 0xed499e45bcd24 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7d3b6768d9788 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2166f83814469 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f5; op2:f11; op3:f7; dest:f13; op1val:0x399ed499e45bcd24; op2val:0x4017d3b6768d9788;
op3val:0x39b2166f83814469; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f13, f5, f11, f7, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f15, rs2==f2, rs3==f1, rd==f7,fs1 == 0 and fe1 == 0x399 and fm1 == 0xed499e45bcd24 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7d3b6768d9788 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2166f83814469 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f15; op2:f2; op3:f1; dest:f7; op1val:0x399ed499e45bcd24; op2val:0x4017d3b6768d9788;
op3val:0x39b2166f83814469; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f7, f15, f2, f1, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f8, rs2==f17, rs3==f3, rd==f31,fs1 == 0 and fe1 == 0x39a and fm1 == 0x17854491e5cd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2edcffb124d27 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xfed560cf3e7cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f8; op2:f17; op3:f3; dest:f31; op1val:0x39a17854491e5cd7; op2val:0xbfe2edcffb124d27;
op3val:0x399fed560cf3e7cf; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f8, f17, f3, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f2, rs2==f26, rs3==f9, rd==f19,fs1 == 0 and fe1 == 0x39a and fm1 == 0x17854491e5cd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2edcffb124d27 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xfed560cf3e7cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f2; op2:f26; op3:f9; dest:f19; op1val:0x39a17854491e5cd7; op2val:0xbfe2edcffb124d27;
op3val:0x399fed560cf3e7cf; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f19, f2, f26, f9, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x17854491e5cd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2edcffb124d27 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xfed560cf3e7cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a17854491e5cd7; op2val:0xbfe2edcffb124d27;
op3val:0x399fed560cf3e7cf; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x17854491e5cd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2edcffb124d27 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xfed560cf3e7cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a17854491e5cd7; op2val:0xbfe2edcffb124d27;
op3val:0x399fed560cf3e7cf; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x17854491e5cd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2edcffb124d27 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xfed560cf3e7cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a17854491e5cd7; op2val:0xbfe2edcffb124d27;
op3val:0x399fed560cf3e7cf; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x20ba1488c74a2 and fs2 == 0 and fe2 == 0x41d and fm2 == 0xc5f721cb706a2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x5c32469e46a31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a20ba1488c74a2; op2val:0x41dc5f721cb706a2;
op3val:0x3995c32469e46a31; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x20ba1488c74a2 and fs2 == 0 and fe2 == 0x41d and fm2 == 0xc5f721cb706a2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x5c32469e46a31 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a20ba1488c74a2; op2val:0x41dc5f721cb706a2;
op3val:0x3995c32469e46a31; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x20ba1488c74a2 and fs2 == 0 and fe2 == 0x41d and fm2 == 0xc5f721cb706a2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x5c32469e46a31 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a20ba1488c74a2; op2val:0x41dc5f721cb706a2;
op3val:0x3995c32469e46a31; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x20ba1488c74a2 and fs2 == 0 and fe2 == 0x41d and fm2 == 0xc5f721cb706a2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x5c32469e46a31 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a20ba1488c74a2; op2val:0x41dc5f721cb706a2;
op3val:0x3995c32469e46a31; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x20ba1488c74a2 and fs2 == 0 and fe2 == 0x41d and fm2 == 0xc5f721cb706a2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x5c32469e46a31 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a20ba1488c74a2; op2val:0x41dc5f721cb706a2;
op3val:0x3995c32469e46a31; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2b78566710e8f and fs2 == 0 and fe2 == 0x40f and fm2 == 0xb5ace13241177 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x5838754c8fa60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2b78566710e8f; op2val:0x40fb5ace13241177;
op3val:0x39a5838754c8fa60; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2b78566710e8f and fs2 == 0 and fe2 == 0x40f and fm2 == 0xb5ace13241177 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x5838754c8fa60 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2b78566710e8f; op2val:0x40fb5ace13241177;
op3val:0x39a5838754c8fa60; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2b78566710e8f and fs2 == 0 and fe2 == 0x40f and fm2 == 0xb5ace13241177 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x5838754c8fa60 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2b78566710e8f; op2val:0x40fb5ace13241177;
op3val:0x39a5838754c8fa60; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2b78566710e8f and fs2 == 0 and fe2 == 0x40f and fm2 == 0xb5ace13241177 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x5838754c8fa60 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2b78566710e8f; op2val:0x40fb5ace13241177;
op3val:0x39a5838754c8fa60; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2b78566710e8f and fs2 == 0 and fe2 == 0x40f and fm2 == 0xb5ace13241177 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x5838754c8fa60 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2b78566710e8f; op2val:0x40fb5ace13241177;
op3val:0x39a5838754c8fa60; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2dbbbdf85e1fb and fs2 == 0 and fe2 == 0x407 and fm2 == 0x7c3f8dfbb3a21 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x9d6430df3895a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2dbbbdf85e1fb; op2val:0x4077c3f8dfbb3a21;
op3val:0x3999d6430df3895a; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2dbbbdf85e1fb and fs2 == 0 and fe2 == 0x407 and fm2 == 0x7c3f8dfbb3a21 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x9d6430df3895a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2dbbbdf85e1fb; op2val:0x4077c3f8dfbb3a21;
op3val:0x3999d6430df3895a; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2dbbbdf85e1fb and fs2 == 0 and fe2 == 0x407 and fm2 == 0x7c3f8dfbb3a21 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x9d6430df3895a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2dbbbdf85e1fb; op2val:0x4077c3f8dfbb3a21;
op3val:0x3999d6430df3895a; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2dbbbdf85e1fb and fs2 == 0 and fe2 == 0x407 and fm2 == 0x7c3f8dfbb3a21 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x9d6430df3895a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2dbbbdf85e1fb; op2val:0x4077c3f8dfbb3a21;
op3val:0x3999d6430df3895a; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2dbbbdf85e1fb and fs2 == 0 and fe2 == 0x407 and fm2 == 0x7c3f8dfbb3a21 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x9d6430df3895a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2dbbbdf85e1fb; op2val:0x4077c3f8dfbb3a21;
op3val:0x3999d6430df3895a; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x3e098724d83a1 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x67848cf5259e6 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2c200ae7f2a1e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a3e098724d83a1; op2val:0x40767848cf5259e6;
op3val:0x39b2c200ae7f2a1e; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x3e098724d83a1 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x67848cf5259e6 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2c200ae7f2a1e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a3e098724d83a1; op2val:0x40767848cf5259e6;
op3val:0x39b2c200ae7f2a1e; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x3e098724d83a1 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x67848cf5259e6 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2c200ae7f2a1e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a3e098724d83a1; op2val:0x40767848cf5259e6;
op3val:0x39b2c200ae7f2a1e; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x3e098724d83a1 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x67848cf5259e6 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2c200ae7f2a1e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a3e098724d83a1; op2val:0x40767848cf5259e6;
op3val:0x39b2c200ae7f2a1e; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x3e098724d83a1 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x67848cf5259e6 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2c200ae7f2a1e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a3e098724d83a1; op2val:0x40767848cf5259e6;
op3val:0x39b2c200ae7f2a1e; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x45107ec7c7f1b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28f64d94c431e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0dd85a18a0163 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a45107ec7c7f1b; op2val:0x40128f64d94c431e;
op3val:0x39b0dd85a18a0163; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x45107ec7c7f1b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28f64d94c431e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0dd85a18a0163 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a45107ec7c7f1b; op2val:0x40128f64d94c431e;
op3val:0x39b0dd85a18a0163; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x45107ec7c7f1b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28f64d94c431e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0dd85a18a0163 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a45107ec7c7f1b; op2val:0x40128f64d94c431e;
op3val:0x39b0dd85a18a0163; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x45107ec7c7f1b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28f64d94c431e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0dd85a18a0163 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a45107ec7c7f1b; op2val:0x40128f64d94c431e;
op3val:0x39b0dd85a18a0163; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x45107ec7c7f1b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28f64d94c431e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0dd85a18a0163 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a45107ec7c7f1b; op2val:0x40128f64d94c431e;
op3val:0x39b0dd85a18a0163; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x4b277a3d78b96 and fs2 == 0 and fe2 == 0x41d and fm2 == 0x8bcdb324bebf8 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x441762863bd7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a4b277a3d78b96; op2val:0x41d8bcdb324bebf8;
op3val:0x39b441762863bd7c; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x4b277a3d78b96 and fs2 == 0 and fe2 == 0x41d and fm2 == 0x8bcdb324bebf8 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x441762863bd7c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a4b277a3d78b96; op2val:0x41d8bcdb324bebf8;
op3val:0x39b441762863bd7c; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x4b277a3d78b96 and fs2 == 0 and fe2 == 0x41d and fm2 == 0x8bcdb324bebf8 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x441762863bd7c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a4b277a3d78b96; op2val:0x41d8bcdb324bebf8;
op3val:0x39b441762863bd7c; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x4b277a3d78b96 and fs2 == 0 and fe2 == 0x41d and fm2 == 0x8bcdb324bebf8 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x441762863bd7c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a4b277a3d78b96; op2val:0x41d8bcdb324bebf8;
op3val:0x39b441762863bd7c; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x4b277a3d78b96 and fs2 == 0 and fe2 == 0x41d and fm2 == 0x8bcdb324bebf8 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x441762863bd7c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a4b277a3d78b96; op2val:0x41d8bcdb324bebf8;
op3val:0x39b441762863bd7c; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x553ba996686f1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9ab36131b4858 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x6bcac20aae8b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a553ba996686f1; op2val:0xbfe9ab36131b4858;
op3val:0x39a6bcac20aae8b9; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x553ba996686f1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9ab36131b4858 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x6bcac20aae8b9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a553ba996686f1; op2val:0xbfe9ab36131b4858;
op3val:0x39a6bcac20aae8b9; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x553ba996686f1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9ab36131b4858 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x6bcac20aae8b9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a553ba996686f1; op2val:0xbfe9ab36131b4858;
op3val:0x39a6bcac20aae8b9; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x553ba996686f1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9ab36131b4858 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x6bcac20aae8b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a553ba996686f1; op2val:0xbfe9ab36131b4858;
op3val:0x39a6bcac20aae8b9; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x553ba996686f1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9ab36131b4858 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x6bcac20aae8b9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a553ba996686f1; op2val:0xbfe9ab36131b4858;
op3val:0x39a6bcac20aae8b9; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x70762f226b782 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9e72fa59afaac and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2aaa0fc3296fd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a70762f226b782; op2val:0xbff9e72fa59afaac;
op3val:0x39b2aaa0fc3296fd; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x70762f226b782 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9e72fa59afaac and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2aaa0fc3296fd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a70762f226b782; op2val:0xbff9e72fa59afaac;
op3val:0x39b2aaa0fc3296fd; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x70762f226b782 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9e72fa59afaac and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2aaa0fc3296fd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a70762f226b782; op2val:0xbff9e72fa59afaac;
op3val:0x39b2aaa0fc3296fd; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x70762f226b782 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9e72fa59afaac and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2aaa0fc3296fd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a70762f226b782; op2val:0xbff9e72fa59afaac;
op3val:0x39b2aaa0fc3296fd; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x70762f226b782 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9e72fa59afaac and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2aaa0fc3296fd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a70762f226b782; op2val:0xbff9e72fa59afaac;
op3val:0x39b2aaa0fc3296fd; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x793914d36b26e and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4a066a0a938ed and fs3 == 0 and fe3 == 0x398 and fm3 == 0x9b2f78fc2a2d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a793914d36b26e; op2val:0x4014a066a0a938ed;
op3val:0x3989b2f78fc2a2d6; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x793914d36b26e and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4a066a0a938ed and fs3 == 0 and fe3 == 0x398 and fm3 == 0x9b2f78fc2a2d6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a793914d36b26e; op2val:0x4014a066a0a938ed;
op3val:0x3989b2f78fc2a2d6; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x793914d36b26e and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4a066a0a938ed and fs3 == 0 and fe3 == 0x398 and fm3 == 0x9b2f78fc2a2d6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a793914d36b26e; op2val:0x4014a066a0a938ed;
op3val:0x3989b2f78fc2a2d6; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x793914d36b26e and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4a066a0a938ed and fs3 == 0 and fe3 == 0x398 and fm3 == 0x9b2f78fc2a2d6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a793914d36b26e; op2val:0x4014a066a0a938ed;
op3val:0x3989b2f78fc2a2d6; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x793914d36b26e and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4a066a0a938ed and fs3 == 0 and fe3 == 0x398 and fm3 == 0x9b2f78fc2a2d6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a793914d36b26e; op2val:0x4014a066a0a938ed;
op3val:0x3989b2f78fc2a2d6; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x8947be5d6873c and fs2 == 0 and fe2 == 0x407 and fm2 == 0x234253a7619a2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x89d63b4599df3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a8947be5d6873c; op2val:0x407234253a7619a2;
op3val:0x39a89d63b4599df3; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x8947be5d6873c and fs2 == 0 and fe2 == 0x407 and fm2 == 0x234253a7619a2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x89d63b4599df3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a8947be5d6873c; op2val:0x407234253a7619a2;
op3val:0x39a89d63b4599df3; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x8947be5d6873c and fs2 == 0 and fe2 == 0x407 and fm2 == 0x234253a7619a2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x89d63b4599df3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a8947be5d6873c; op2val:0x407234253a7619a2;
op3val:0x39a89d63b4599df3; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x8947be5d6873c and fs2 == 0 and fe2 == 0x407 and fm2 == 0x234253a7619a2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x89d63b4599df3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a8947be5d6873c; op2val:0x407234253a7619a2;
op3val:0x39a89d63b4599df3; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x8947be5d6873c and fs2 == 0 and fe2 == 0x407 and fm2 == 0x234253a7619a2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x89d63b4599df3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a8947be5d6873c; op2val:0x407234253a7619a2;
op3val:0x39a89d63b4599df3; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb2ae0cc66e7fd and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2d88f8d729a64 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x8ffbe6c7e0560 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab2ae0cc66e7fd; op2val:0x40f2d88f8d729a64;
op3val:0x3998ffbe6c7e0560; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb2ae0cc66e7fd and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2d88f8d729a64 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x8ffbe6c7e0560 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab2ae0cc66e7fd; op2val:0x40f2d88f8d729a64;
op3val:0x3998ffbe6c7e0560; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb2ae0cc66e7fd and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2d88f8d729a64 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x8ffbe6c7e0560 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab2ae0cc66e7fd; op2val:0x40f2d88f8d729a64;
op3val:0x3998ffbe6c7e0560; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb2ae0cc66e7fd and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2d88f8d729a64 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x8ffbe6c7e0560 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab2ae0cc66e7fd; op2val:0x40f2d88f8d729a64;
op3val:0x3998ffbe6c7e0560; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb2ae0cc66e7fd and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2d88f8d729a64 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x8ffbe6c7e0560 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab2ae0cc66e7fd; op2val:0x40f2d88f8d729a64;
op3val:0x3998ffbe6c7e0560; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb5c3297b4b89a and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2b699c6bac2c2 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xd817bbc10b60c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab5c3297b4b89a; op2val:0x40f2b699c6bac2c2;
op3val:0x398d817bbc10b60c; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb5c3297b4b89a and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2b699c6bac2c2 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xd817bbc10b60c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab5c3297b4b89a; op2val:0x40f2b699c6bac2c2;
op3val:0x398d817bbc10b60c; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb5c3297b4b89a and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2b699c6bac2c2 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xd817bbc10b60c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab5c3297b4b89a; op2val:0x40f2b699c6bac2c2;
op3val:0x398d817bbc10b60c; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb5c3297b4b89a and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2b699c6bac2c2 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xd817bbc10b60c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab5c3297b4b89a; op2val:0x40f2b699c6bac2c2;
op3val:0x398d817bbc10b60c; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb5c3297b4b89a and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2b699c6bac2c2 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xd817bbc10b60c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab5c3297b4b89a; op2val:0x40f2b699c6bac2c2;
op3val:0x398d817bbc10b60c; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd542fcca1c01a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c69b27f83a24 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x42d66038a2fcf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ad542fcca1c01a; op2val:0xbff5c69b27f83a24;
op3val:0x39b42d66038a2fcf; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd542fcca1c01a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c69b27f83a24 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x42d66038a2fcf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ad542fcca1c01a; op2val:0xbff5c69b27f83a24;
op3val:0x39b42d66038a2fcf; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd542fcca1c01a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c69b27f83a24 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x42d66038a2fcf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ad542fcca1c01a; op2val:0xbff5c69b27f83a24;
op3val:0x39b42d66038a2fcf; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd542fcca1c01a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c69b27f83a24 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x42d66038a2fcf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ad542fcca1c01a; op2val:0xbff5c69b27f83a24;
op3val:0x39b42d66038a2fcf; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd542fcca1c01a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5c69b27f83a24 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x42d66038a2fcf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ad542fcca1c01a; op2val:0xbff5c69b27f83a24;
op3val:0x39b42d66038a2fcf; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xdca7693fa12c9 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x87f49ce452d65 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2634da905cb63 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39adca7693fa12c9; op2val:0x40087f49ce452d65;
op3val:0x39b2634da905cb63; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xdca7693fa12c9 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x87f49ce452d65 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2634da905cb63 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39adca7693fa12c9; op2val:0x40087f49ce452d65;
op3val:0x39b2634da905cb63; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xdca7693fa12c9 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x87f49ce452d65 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2634da905cb63 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39adca7693fa12c9; op2val:0x40087f49ce452d65;
op3val:0x39b2634da905cb63; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xdca7693fa12c9 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x87f49ce452d65 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2634da905cb63 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39adca7693fa12c9; op2val:0x40087f49ce452d65;
op3val:0x39b2634da905cb63; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xdca7693fa12c9 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x87f49ce452d65 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2634da905cb63 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39adca7693fa12c9; op2val:0x40087f49ce452d65;
op3val:0x39b2634da905cb63; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xe9606a456e60e and fs2 == 0 and fe2 == 0x41d and fm2 == 0x0bd5a971a7452 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xd028d30b73b82 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ae9606a456e60e; op2val:0x41d0bd5a971a7452;
op3val:0x39ad028d30b73b82; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xe9606a456e60e and fs2 == 0 and fe2 == 0x41d and fm2 == 0x0bd5a971a7452 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xd028d30b73b82 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ae9606a456e60e; op2val:0x41d0bd5a971a7452;
op3val:0x39ad028d30b73b82; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xe9606a456e60e and fs2 == 0 and fe2 == 0x41d and fm2 == 0x0bd5a971a7452 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xd028d30b73b82 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ae9606a456e60e; op2val:0x41d0bd5a971a7452;
op3val:0x39ad028d30b73b82; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xe9606a456e60e and fs2 == 0 and fe2 == 0x41d and fm2 == 0x0bd5a971a7452 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xd028d30b73b82 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ae9606a456e60e; op2val:0x41d0bd5a971a7452;
op3val:0x39ad028d30b73b82; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xe9606a456e60e and fs2 == 0 and fe2 == 0x41d and fm2 == 0x0bd5a971a7452 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xd028d30b73b82 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ae9606a456e60e; op2val:0x41d0bd5a971a7452;
op3val:0x39ad028d30b73b82; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xef2417c41b624 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb4e3aa2d86754 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0049aab588052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39aef2417c41b624; op2val:0xbfeb4e3aa2d86754;
op3val:0x39b0049aab588052; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xef2417c41b624 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb4e3aa2d86754 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0049aab588052 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39aef2417c41b624; op2val:0xbfeb4e3aa2d86754;
op3val:0x39b0049aab588052; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xef2417c41b624 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb4e3aa2d86754 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0049aab588052 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39aef2417c41b624; op2val:0xbfeb4e3aa2d86754;
op3val:0x39b0049aab588052; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xef2417c41b624 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb4e3aa2d86754 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0049aab588052 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39aef2417c41b624; op2val:0xbfeb4e3aa2d86754;
op3val:0x39b0049aab588052; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xef2417c41b624 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb4e3aa2d86754 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0049aab588052 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39aef2417c41b624; op2val:0xbfeb4e3aa2d86754;
op3val:0x39b0049aab588052; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f2287fcf470c and fs2 == 0 and fe2 == 0x41c and fm2 == 0xe36b7e7d0dc99 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xddabfd3b9dd04 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b0f2287fcf470c; op2val:0x41ce36b7e7d0dc99;
op3val:0x39addabfd3b9dd04; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f2287fcf470c and fs2 == 0 and fe2 == 0x41c and fm2 == 0xe36b7e7d0dc99 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xddabfd3b9dd04 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b0f2287fcf470c; op2val:0x41ce36b7e7d0dc99;
op3val:0x39addabfd3b9dd04; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f2287fcf470c and fs2 == 0 and fe2 == 0x41c and fm2 == 0xe36b7e7d0dc99 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xddabfd3b9dd04 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b0f2287fcf470c; op2val:0x41ce36b7e7d0dc99;
op3val:0x39addabfd3b9dd04; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f2287fcf470c and fs2 == 0 and fe2 == 0x41c and fm2 == 0xe36b7e7d0dc99 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xddabfd3b9dd04 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b0f2287fcf470c; op2val:0x41ce36b7e7d0dc99;
op3val:0x39addabfd3b9dd04; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f2287fcf470c and fs2 == 0 and fe2 == 0x41c and fm2 == 0xe36b7e7d0dc99 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xddabfd3b9dd04 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b0f2287fcf470c; op2val:0x41ce36b7e7d0dc99;
op3val:0x39addabfd3b9dd04; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x21fb04d7b4cb7 and fs2 == 0 and fe2 == 0x406 and fm2 == 0x8a96ce44f8024 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0290397edd944 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b21fb04d7b4cb7; op2val:0x4068a96ce44f8024;
op3val:0x39b0290397edd944; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x21fb04d7b4cb7 and fs2 == 0 and fe2 == 0x406 and fm2 == 0x8a96ce44f8024 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0290397edd944 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b21fb04d7b4cb7; op2val:0x4068a96ce44f8024;
op3val:0x39b0290397edd944; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x21fb04d7b4cb7 and fs2 == 0 and fe2 == 0x406 and fm2 == 0x8a96ce44f8024 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0290397edd944 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b21fb04d7b4cb7; op2val:0x4068a96ce44f8024;
op3val:0x39b0290397edd944; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x21fb04d7b4cb7 and fs2 == 0 and fe2 == 0x406 and fm2 == 0x8a96ce44f8024 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0290397edd944 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b21fb04d7b4cb7; op2val:0x4068a96ce44f8024;
op3val:0x39b0290397edd944; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x21fb04d7b4cb7 and fs2 == 0 and fe2 == 0x406 and fm2 == 0x8a96ce44f8024 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0290397edd944 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b21fb04d7b4cb7; op2val:0x4068a96ce44f8024;
op3val:0x39b0290397edd944; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x23f8335dcbd7f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00336ade1c517 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x2b36c8d4a60c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b23f8335dcbd7f; op2val:0xbfe00336ade1c517;
op3val:0x39a2b36c8d4a60c8; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x23f8335dcbd7f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00336ade1c517 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x2b36c8d4a60c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b23f8335dcbd7f; op2val:0xbfe00336ade1c517;
op3val:0x39a2b36c8d4a60c8; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x23f8335dcbd7f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00336ade1c517 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x2b36c8d4a60c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b23f8335dcbd7f; op2val:0xbfe00336ade1c517;
op3val:0x39a2b36c8d4a60c8; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x23f8335dcbd7f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00336ade1c517 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x2b36c8d4a60c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b23f8335dcbd7f; op2val:0xbfe00336ade1c517;
op3val:0x39a2b36c8d4a60c8; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x23f8335dcbd7f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00336ade1c517 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x2b36c8d4a60c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b23f8335dcbd7f; op2val:0xbfe00336ade1c517;
op3val:0x39a2b36c8d4a60c8; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3418b0aba6add and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x24cbc7a6ed8a8 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x6130ebb7253ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3418b0aba6add; op2val:0xbfe24cbc7a6ed8a8;
op3val:0x39a6130ebb7253ff; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3418b0aba6add and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x24cbc7a6ed8a8 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x6130ebb7253ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3418b0aba6add; op2val:0xbfe24cbc7a6ed8a8;
op3val:0x39a6130ebb7253ff; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3418b0aba6add and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x24cbc7a6ed8a8 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x6130ebb7253ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3418b0aba6add; op2val:0xbfe24cbc7a6ed8a8;
op3val:0x39a6130ebb7253ff; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3418b0aba6add and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x24cbc7a6ed8a8 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x6130ebb7253ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3418b0aba6add; op2val:0xbfe24cbc7a6ed8a8;
op3val:0x39a6130ebb7253ff; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3418b0aba6add and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x24cbc7a6ed8a8 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x6130ebb7253ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3418b0aba6add; op2val:0xbfe24cbc7a6ed8a8;
op3val:0x39a6130ebb7253ff; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x38279a7e437f6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5485a1301ce00 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa27593ab37361 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b38279a7e437f6; op2val:0xbfc5485a1301ce00;
op3val:0x398a27593ab37361; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x38279a7e437f6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5485a1301ce00 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa27593ab37361 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b38279a7e437f6; op2val:0xbfc5485a1301ce00;
op3val:0x398a27593ab37361; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x38279a7e437f6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5485a1301ce00 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa27593ab37361 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b38279a7e437f6; op2val:0xbfc5485a1301ce00;
op3val:0x398a27593ab37361; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x38279a7e437f6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5485a1301ce00 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa27593ab37361 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b38279a7e437f6; op2val:0xbfc5485a1301ce00;
op3val:0x398a27593ab37361; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x38279a7e437f6 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5485a1301ce00 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa27593ab37361 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b38279a7e437f6; op2val:0xbfc5485a1301ce00;
op3val:0x398a27593ab37361; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x396 and fm1 == 0x750f3fabf4677 and fs2 == 0 and fe2 == 0x413 and fm2 == 0x5f57da03cf336 and fs3 == 0 and fe3 == 0x396 and fm3 == 0x1d00f1dc80e1e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x396750f3fabf4677; op2val:0x4135f57da03cf336;
op3val:0x3961d00f1dc80e1e; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x396 and fm1 == 0x750f3fabf4677 and fs2 == 0 and fe2 == 0x413 and fm2 == 0x5f57da03cf336 and fs3 == 0 and fe3 == 0x396 and fm3 == 0x1d00f1dc80e1e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x396750f3fabf4677; op2val:0x4135f57da03cf336;
op3val:0x3961d00f1dc80e1e; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x396 and fm1 == 0x750f3fabf4677 and fs2 == 0 and fe2 == 0x413 and fm2 == 0x5f57da03cf336 and fs3 == 0 and fe3 == 0x396 and fm3 == 0x1d00f1dc80e1e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x396750f3fabf4677; op2val:0x4135f57da03cf336;
op3val:0x3961d00f1dc80e1e; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x396 and fm1 == 0x750f3fabf4677 and fs2 == 0 and fe2 == 0x413 and fm2 == 0x5f57da03cf336 and fs3 == 0 and fe3 == 0x396 and fm3 == 0x1d00f1dc80e1e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x396750f3fabf4677; op2val:0x4135f57da03cf336;
op3val:0x3961d00f1dc80e1e; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x328175f6f27a7 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc4b935ffb5f5c and fs3 == 0 and fe3 == 0x395 and fm3 == 0xef834e8f93d95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399328175f6f27a7; op2val:0xbfac4b935ffb5f5c;
op3val:0x395ef834e8f93d95; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x328175f6f27a7 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc4b935ffb5f5c and fs3 == 0 and fe3 == 0x395 and fm3 == 0xef834e8f93d95 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399328175f6f27a7; op2val:0xbfac4b935ffb5f5c;
op3val:0x395ef834e8f93d95; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x328175f6f27a7 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc4b935ffb5f5c and fs3 == 0 and fe3 == 0x395 and fm3 == 0xef834e8f93d95 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399328175f6f27a7; op2val:0xbfac4b935ffb5f5c;
op3val:0x395ef834e8f93d95; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x328175f6f27a7 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc4b935ffb5f5c and fs3 == 0 and fe3 == 0x395 and fm3 == 0xef834e8f93d95 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399328175f6f27a7; op2val:0xbfac4b935ffb5f5c;
op3val:0x395ef834e8f93d95; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x328175f6f27a7 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc4b935ffb5f5c and fs3 == 0 and fe3 == 0x395 and fm3 == 0xef834e8f93d95 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399328175f6f27a7; op2val:0xbfac4b935ffb5f5c;
op3val:0x395ef834e8f93d95; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xa60f4558bba7f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xaa944fc0f6c3c and fs3 == 0 and fe3 == 0x398 and fm3 == 0x62e30037fb4cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399a60f4558bba7f; op2val:0xbfdaa944fc0f6c3c;
op3val:0x39862e30037fb4cd; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xa60f4558bba7f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xaa944fc0f6c3c and fs3 == 0 and fe3 == 0x398 and fm3 == 0x62e30037fb4cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399a60f4558bba7f; op2val:0xbfdaa944fc0f6c3c;
op3val:0x39862e30037fb4cd; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 450*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4698931706139046710,64,FLEN)
NAN_BOXED(4134814696245562910,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4698931706139046710,64,FLEN)
NAN_BOXED(4134814696245562910,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4134814696245562910,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4134814696245562910,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(4134014414103330197,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(4134014414103330197,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(4150736609098840703,64,FLEN)
NAN_BOXED(13824548119918898236,64,FLEN)
NAN_BOXED(4150736609098840703,64,FLEN)
NAN_BOXED(4150736609098840703,64,FLEN)
NAN_BOXED(4150736609098840703,64,FLEN)
NAN_BOXED(4150736609098840703,64,FLEN)
NAN_BOXED(4150736609098840703,64,FLEN)
NAN_BOXED(13824548119918898236,64,FLEN)
NAN_BOXED(4145051290793129165,64,FLEN)
NAN_BOXED(4150736609098840703,64,FLEN)
NAN_BOXED(13824548119918898236,64,FLEN)
NAN_BOXED(4145051290793129165,64,FLEN)
NAN_BOXED(4150736609098840703,64,FLEN)
NAN_BOXED(13824548119918898236,64,FLEN)
NAN_BOXED(4145051290793129165,64,FLEN)
NAN_BOXED(4151390723546197811,64,FLEN)
NAN_BOXED(13836729423783868682,64,FLEN)
NAN_BOXED(4157919242637660481,64,FLEN)
NAN_BOXED(4151390723546197811,64,FLEN)
NAN_BOXED(13836729423783868682,64,FLEN)
NAN_BOXED(4157919242637660481,64,FLEN)
NAN_BOXED(4151390723546197811,64,FLEN)
NAN_BOXED(13836729423783868682,64,FLEN)
NAN_BOXED(4157919242637660481,64,FLEN)
NAN_BOXED(4151390723546197811,64,FLEN)
NAN_BOXED(13836729423783868682,64,FLEN)
NAN_BOXED(4157919242637660481,64,FLEN)
NAN_BOXED(4151390723546197811,64,FLEN)
NAN_BOXED(13836729423783868682,64,FLEN)
NAN_BOXED(4157919242637660481,64,FLEN)
NAN_BOXED(4151393857257522980,64,FLEN)
NAN_BOXED(13835288530100463369,64,FLEN)
NAN_BOXED(4157359044181791035,64,FLEN)
NAN_BOXED(4151393857257522980,64,FLEN)
NAN_BOXED(13835288530100463369,64,FLEN)
NAN_BOXED(4157359044181791035,64,FLEN)
NAN_BOXED(4151393857257522980,64,FLEN)
NAN_BOXED(13835288530100463369,64,FLEN)
NAN_BOXED(4157359044181791035,64,FLEN)
NAN_BOXED(4151393857257522980,64,FLEN)
NAN_BOXED(13835288530100463369,64,FLEN)
NAN_BOXED(4157359044181791035,64,FLEN)
NAN_BOXED(4151393857257522980,64,FLEN)
NAN_BOXED(13835288530100463369,64,FLEN)
NAN_BOXED(4157359044181791035,64,FLEN)
NAN_BOXED(4151989663908482340,64,FLEN)
NAN_BOXED(4618392723518232456,64,FLEN)
NAN_BOXED(4157410074219857001,64,FLEN)
NAN_BOXED(4151989663908482340,64,FLEN)
NAN_BOXED(4618392723518232456,64,FLEN)
NAN_BOXED(4157410074219857001,64,FLEN)
NAN_BOXED(4151989663908482340,64,FLEN)
NAN_BOXED(4618392723518232456,64,FLEN)
NAN_BOXED(4157410074219857001,64,FLEN)
NAN_BOXED(4151989663908482340,64,FLEN)
NAN_BOXED(4618392723518232456,64,FLEN)
NAN_BOXED(4157410074219857001,64,FLEN)
NAN_BOXED(4151989663908482340,64,FLEN)
NAN_BOXED(4618392723518232456,64,FLEN)
NAN_BOXED(4157410074219857001,64,FLEN)
NAN_BOXED(4152732634811620567,64,FLEN)
NAN_BOXED(13826875283507137831,64,FLEN)
NAN_BOXED(4152298335299168207,64,FLEN)
NAN_BOXED(4152732634811620567,64,FLEN)
NAN_BOXED(13826875283507137831,64,FLEN)
NAN_BOXED(4152298335299168207,64,FLEN)
NAN_BOXED(4152732634811620567,64,FLEN)
NAN_BOXED(13826875283507137831,64,FLEN)
NAN_BOXED(4152298335299168207,64,FLEN)
NAN_BOXED(4152732634811620567,64,FLEN)
NAN_BOXED(13826875283507137831,64,FLEN)
NAN_BOXED(4152298335299168207,64,FLEN)
NAN_BOXED(4152732634811620567,64,FLEN)
NAN_BOXED(13826875283507137831,64,FLEN)
NAN_BOXED(4152298335299168207,64,FLEN)
NAN_BOXED(4152894593723823266,64,FLEN)
NAN_BOXED(4745773051054327458,64,FLEN)
NAN_BOXED(4149437192854596145,64,FLEN)
NAN_BOXED(4152894593723823266,64,FLEN)
NAN_BOXED(4745773051054327458,64,FLEN)
NAN_BOXED(4149437192854596145,64,FLEN)
NAN_BOXED(4152894593723823266,64,FLEN)
NAN_BOXED(4745773051054327458,64,FLEN)
NAN_BOXED(4149437192854596145,64,FLEN)
NAN_BOXED(4152894593723823266,64,FLEN)
NAN_BOXED(4745773051054327458,64,FLEN)
NAN_BOXED(4149437192854596145,64,FLEN)
NAN_BOXED(4152894593723823266,64,FLEN)
NAN_BOXED(4745773051054327458,64,FLEN)
NAN_BOXED(4149437192854596145,64,FLEN)
NAN_BOXED(4153083589966237327,64,FLEN)
NAN_BOXED(4682436078712656247,64,FLEN)
NAN_BOXED(4153870848585431648,64,FLEN)
NAN_BOXED(4153083589966237327,64,FLEN)
NAN_BOXED(4682436078712656247,64,FLEN)
NAN_BOXED(4153870848585431648,64,FLEN)
NAN_BOXED(4153083589966237327,64,FLEN)
NAN_BOXED(4682436078712656247,64,FLEN)
NAN_BOXED(4153870848585431648,64,FLEN)
NAN_BOXED(4153083589966237327,64,FLEN)
NAN_BOXED(4682436078712656247,64,FLEN)
NAN_BOXED(4153870848585431648,64,FLEN)
NAN_BOXED(4153083589966237327,64,FLEN)
NAN_BOXED(4682436078712656247,64,FLEN)
NAN_BOXED(4153870848585431648,64,FLEN)
NAN_BOXED(4153123406344479227,64,FLEN)
NAN_BOXED(4645397014328850977,64,FLEN)
NAN_BOXED(4150584115083839834,64,FLEN)
NAN_BOXED(4153123406344479227,64,FLEN)
NAN_BOXED(4645397014328850977,64,FLEN)
NAN_BOXED(4150584115083839834,64,FLEN)
NAN_BOXED(4153123406344479227,64,FLEN)
NAN_BOXED(4645397014328850977,64,FLEN)
NAN_BOXED(4150584115083839834,64,FLEN)
NAN_BOXED(4153123406344479227,64,FLEN)
NAN_BOXED(4645397014328850977,64,FLEN)
NAN_BOXED(4150584115083839834,64,FLEN)
NAN_BOXED(4153123406344479227,64,FLEN)
NAN_BOXED(4645397014328850977,64,FLEN)
NAN_BOXED(4150584115083839834,64,FLEN)
NAN_BOXED(4153410226723062689,64,FLEN)
NAN_BOXED(4645032319790504422,64,FLEN)
NAN_BOXED(4157598714199747102,64,FLEN)
NAN_BOXED(4153410226723062689,64,FLEN)
NAN_BOXED(4645032319790504422,64,FLEN)
NAN_BOXED(4157598714199747102,64,FLEN)
NAN_BOXED(4153410226723062689,64,FLEN)
NAN_BOXED(4645032319790504422,64,FLEN)
NAN_BOXED(4157598714199747102,64,FLEN)
NAN_BOXED(4153410226723062689,64,FLEN)
NAN_BOXED(4645032319790504422,64,FLEN)
NAN_BOXED(4157598714199747102,64,FLEN)
NAN_BOXED(4153410226723062689,64,FLEN)
NAN_BOXED(4645032319790504422,64,FLEN)
NAN_BOXED(4157598714199747102,64,FLEN)
NAN_BOXED(4153533850816642843,64,FLEN)
NAN_BOXED(4616910231313335070,64,FLEN)
NAN_BOXED(4157066022073532771,64,FLEN)
NAN_BOXED(4153533850816642843,64,FLEN)
NAN_BOXED(4616910231313335070,64,FLEN)
NAN_BOXED(4157066022073532771,64,FLEN)
NAN_BOXED(4153533850816642843,64,FLEN)
NAN_BOXED(4616910231313335070,64,FLEN)
NAN_BOXED(4157066022073532771,64,FLEN)
NAN_BOXED(4153533850816642843,64,FLEN)
NAN_BOXED(4616910231313335070,64,FLEN)
NAN_BOXED(4157066022073532771,64,FLEN)
NAN_BOXED(4153533850816642843,64,FLEN)
NAN_BOXED(4616910231313335070,64,FLEN)
NAN_BOXED(4157066022073532771,64,FLEN)
NAN_BOXED(4153640983262104470,64,FLEN)
NAN_BOXED(4744749857062513656,64,FLEN)
NAN_BOXED(4158020331709382012,64,FLEN)
NAN_BOXED(4153640983262104470,64,FLEN)
NAN_BOXED(4744749857062513656,64,FLEN)
NAN_BOXED(4158020331709382012,64,FLEN)
NAN_BOXED(4153640983262104470,64,FLEN)
NAN_BOXED(4744749857062513656,64,FLEN)
NAN_BOXED(4158020331709382012,64,FLEN)
NAN_BOXED(4153640983262104470,64,FLEN)
NAN_BOXED(4744749857062513656,64,FLEN)
NAN_BOXED(4158020331709382012,64,FLEN)
NAN_BOXED(4153640983262104470,64,FLEN)
NAN_BOXED(4744749857062513656,64,FLEN)
NAN_BOXED(4158020331709382012,64,FLEN)
NAN_BOXED(4153818292221806321,64,FLEN)
NAN_BOXED(13828772379554957400,64,FLEN)
NAN_BOXED(4154215153764329657,64,FLEN)
NAN_BOXED(4153818292221806321,64,FLEN)
NAN_BOXED(13828772379554957400,64,FLEN)
NAN_BOXED(4154215153764329657,64,FLEN)
NAN_BOXED(4153818292221806321,64,FLEN)
NAN_BOXED(13828772379554957400,64,FLEN)
NAN_BOXED(4154215153764329657,64,FLEN)
NAN_BOXED(4153818292221806321,64,FLEN)
NAN_BOXED(13828772379554957400,64,FLEN)
NAN_BOXED(4154215153764329657,64,FLEN)
NAN_BOXED(4153818292221806321,64,FLEN)
NAN_BOXED(13828772379554957400,64,FLEN)
NAN_BOXED(4154215153764329657,64,FLEN)
NAN_BOXED(4154297302823384962,64,FLEN)
NAN_BOXED(13833341922273065644,64,FLEN)
NAN_BOXED(4157573014419052285,64,FLEN)
NAN_BOXED(4154297302823384962,64,FLEN)
NAN_BOXED(13833341922273065644,64,FLEN)
NAN_BOXED(4157573014419052285,64,FLEN)
NAN_BOXED(4154297302823384962,64,FLEN)
NAN_BOXED(13833341922273065644,64,FLEN)
NAN_BOXED(4157573014419052285,64,FLEN)
NAN_BOXED(4154297302823384962,64,FLEN)
NAN_BOXED(13833341922273065644,64,FLEN)
NAN_BOXED(4157573014419052285,64,FLEN)
NAN_BOXED(4154297302823384962,64,FLEN)
NAN_BOXED(13833341922273065644,64,FLEN)
NAN_BOXED(4157573014419052285,64,FLEN)
NAN_BOXED(4154451433547543150,64,FLEN)
NAN_BOXED(4617491880604154093,64,FLEN)
NAN_BOXED(4146041708309816022,64,FLEN)
NAN_BOXED(4154451433547543150,64,FLEN)
NAN_BOXED(4617491880604154093,64,FLEN)
NAN_BOXED(4146041708309816022,64,FLEN)
NAN_BOXED(4154451433547543150,64,FLEN)
NAN_BOXED(4617491880604154093,64,FLEN)
NAN_BOXED(4146041708309816022,64,FLEN)
NAN_BOXED(4154451433547543150,64,FLEN)
NAN_BOXED(4617491880604154093,64,FLEN)
NAN_BOXED(4146041708309816022,64,FLEN)
NAN_BOXED(4154451433547543150,64,FLEN)
NAN_BOXED(4617491880604154093,64,FLEN)
NAN_BOXED(4146041708309816022,64,FLEN)
NAN_BOXED(4154733916107212604,64,FLEN)
NAN_BOXED(4643831500271655330,64,FLEN)
NAN_BOXED(4154743707802377715,64,FLEN)
NAN_BOXED(4154733916107212604,64,FLEN)
NAN_BOXED(4643831500271655330,64,FLEN)
NAN_BOXED(4154743707802377715,64,FLEN)
NAN_BOXED(4154733916107212604,64,FLEN)
NAN_BOXED(4643831500271655330,64,FLEN)
NAN_BOXED(4154743707802377715,64,FLEN)
NAN_BOXED(4154733916107212604,64,FLEN)
NAN_BOXED(4643831500271655330,64,FLEN)
NAN_BOXED(4154743707802377715,64,FLEN)
NAN_BOXED(4154733916107212604,64,FLEN)
NAN_BOXED(4643831500271655330,64,FLEN)
NAN_BOXED(4154743707802377715,64,FLEN)
NAN_BOXED(4155462226169751549,64,FLEN)
NAN_BOXED(4680041073856387684,64,FLEN)
NAN_BOXED(4150348249950979424,64,FLEN)
NAN_BOXED(4155462226169751549,64,FLEN)
NAN_BOXED(4680041073856387684,64,FLEN)
NAN_BOXED(4150348249950979424,64,FLEN)
NAN_BOXED(4155462226169751549,64,FLEN)
NAN_BOXED(4680041073856387684,64,FLEN)
NAN_BOXED(4150348249950979424,64,FLEN)
NAN_BOXED(4155462226169751549,64,FLEN)
NAN_BOXED(4680041073856387684,64,FLEN)
NAN_BOXED(4150348249950979424,64,FLEN)
NAN_BOXED(4155462226169751549,64,FLEN)
NAN_BOXED(4680041073856387684,64,FLEN)
NAN_BOXED(4150348249950979424,64,FLEN)
NAN_BOXED(4155516453542738074,64,FLEN)
NAN_BOXED(4680003734371746498,64,FLEN)
NAN_BOXED(4147113200314267148,64,FLEN)
NAN_BOXED(4155516453542738074,64,FLEN)
NAN_BOXED(4680003734371746498,64,FLEN)
NAN_BOXED(4147113200314267148,64,FLEN)
NAN_BOXED(4155516453542738074,64,FLEN)
NAN_BOXED(4680003734371746498,64,FLEN)
NAN_BOXED(4147113200314267148,64,FLEN)
NAN_BOXED(4155516453542738074,64,FLEN)
NAN_BOXED(4680003734371746498,64,FLEN)
NAN_BOXED(4147113200314267148,64,FLEN)
NAN_BOXED(4155516453542738074,64,FLEN)
NAN_BOXED(4680003734371746498,64,FLEN)
NAN_BOXED(4147113200314267148,64,FLEN)
NAN_BOXED(4156070595406184474,64,FLEN)
NAN_BOXED(13832180200231156260,64,FLEN)
NAN_BOXED(4157998272139112399,64,FLEN)
NAN_BOXED(4156070595406184474,64,FLEN)
NAN_BOXED(13832180200231156260,64,FLEN)
NAN_BOXED(4157998272139112399,64,FLEN)
NAN_BOXED(4156070595406184474,64,FLEN)
NAN_BOXED(13832180200231156260,64,FLEN)
NAN_BOXED(4157998272139112399,64,FLEN)
NAN_BOXED(4156070595406184474,64,FLEN)
NAN_BOXED(13832180200231156260,64,FLEN)
NAN_BOXED(4157998272139112399,64,FLEN)
NAN_BOXED(4156070595406184474,64,FLEN)
NAN_BOXED(13832180200231156260,64,FLEN)
NAN_BOXED(4157998272139112399,64,FLEN)
NAN_BOXED(4156200641770427081,64,FLEN)
NAN_BOXED(4614077773211053413,64,FLEN)
NAN_BOXED(4157494591215749987,64,FLEN)
NAN_BOXED(4156200641770427081,64,FLEN)
NAN_BOXED(4614077773211053413,64,FLEN)
NAN_BOXED(4157494591215749987,64,FLEN)
NAN_BOXED(4156200641770427081,64,FLEN)
NAN_BOXED(4614077773211053413,64,FLEN)
NAN_BOXED(4157494591215749987,64,FLEN)
NAN_BOXED(4156200641770427081,64,FLEN)
NAN_BOXED(4614077773211053413,64,FLEN)
NAN_BOXED(4157494591215749987,64,FLEN)
NAN_BOXED(4156200641770427081,64,FLEN)
NAN_BOXED(4614077773211053413,64,FLEN)
NAN_BOXED(4157494591215749987,64,FLEN)
NAN_BOXED(4156424461380675086,64,FLEN)
NAN_BOXED(4742498604400931922,64,FLEN)
NAN_BOXED(4155980836563794818,64,FLEN)
NAN_BOXED(4156424461380675086,64,FLEN)
NAN_BOXED(4742498604400931922,64,FLEN)
NAN_BOXED(4155980836563794818,64,FLEN)
NAN_BOXED(4156424461380675086,64,FLEN)
NAN_BOXED(4742498604400931922,64,FLEN)
NAN_BOXED(4155980836563794818,64,FLEN)
NAN_BOXED(4156424461380675086,64,FLEN)
NAN_BOXED(4742498604400931922,64,FLEN)
NAN_BOXED(4155980836563794818,64,FLEN)
NAN_BOXED(4156424461380675086,64,FLEN)
NAN_BOXED(4742498604400931922,64,FLEN)
NAN_BOXED(4155980836563794818,64,FLEN)
NAN_BOXED(4156525869181023780,64,FLEN)
NAN_BOXED(13829233094518400852,64,FLEN)
NAN_BOXED(4156827518409146450,64,FLEN)
NAN_BOXED(4156525869181023780,64,FLEN)
NAN_BOXED(13829233094518400852,64,FLEN)
NAN_BOXED(4156827518409146450,64,FLEN)
NAN_BOXED(4156525869181023780,64,FLEN)
NAN_BOXED(13829233094518400852,64,FLEN)
NAN_BOXED(4156827518409146450,64,FLEN)
NAN_BOXED(4156525869181023780,64,FLEN)
NAN_BOXED(13829233094518400852,64,FLEN)
NAN_BOXED(4156827518409146450,64,FLEN)
NAN_BOXED(4156525869181023780,64,FLEN)
NAN_BOXED(13829233094518400852,64,FLEN)
NAN_BOXED(4156827518409146450,64,FLEN)
NAN_BOXED(4157088711819872012,64,FLEN)
NAN_BOXED(4741787621163850905,64,FLEN)
NAN_BOXED(4156218548558617860,64,FLEN)
NAN_BOXED(4157088711819872012,64,FLEN)
NAN_BOXED(4741787621163850905,64,FLEN)
NAN_BOXED(4156218548558617860,64,FLEN)
NAN_BOXED(4157088711819872012,64,FLEN)
NAN_BOXED(4741787621163850905,64,FLEN)
NAN_BOXED(4156218548558617860,64,FLEN)
NAN_BOXED(4157088711819872012,64,FLEN)
NAN_BOXED(4741787621163850905,64,FLEN)
NAN_BOXED(4156218548558617860,64,FLEN)
NAN_BOXED(4157088711819872012,64,FLEN)
NAN_BOXED(4741787621163850905,64,FLEN)
NAN_BOXED(4156218548558617860,64,FLEN)
NAN_BOXED(4157420248091020471,64,FLEN)
NAN_BOXED(4641145701157273636,64,FLEN)
NAN_BOXED(4156867551473555780,64,FLEN)
NAN_BOXED(4157420248091020471,64,FLEN)
NAN_BOXED(4641145701157273636,64,FLEN)
NAN_BOXED(4156867551473555780,64,FLEN)
NAN_BOXED(4157420248091020471,64,FLEN)
NAN_BOXED(4641145701157273636,64,FLEN)
NAN_BOXED(4156867551473555780,64,FLEN)
NAN_BOXED(4157420248091020471,64,FLEN)
NAN_BOXED(4641145701157273636,64,FLEN)
NAN_BOXED(4156867551473555780,64,FLEN)
NAN_BOXED(4157420248091020471,64,FLEN)
NAN_BOXED(4641145701157273636,64,FLEN)
NAN_BOXED(4156867551473555780,64,FLEN)
NAN_BOXED(4157455238793313663,64,FLEN)
NAN_BOXED(13826054389407794455,64,FLEN)
NAN_BOXED(4153079085197320392,64,FLEN)
NAN_BOXED(4157455238793313663,64,FLEN)
NAN_BOXED(13826054389407794455,64,FLEN)
NAN_BOXED(4153079085197320392,64,FLEN)
NAN_BOXED(4157455238793313663,64,FLEN)
NAN_BOXED(13826054389407794455,64,FLEN)
NAN_BOXED(4153079085197320392,64,FLEN)
NAN_BOXED(4157455238793313663,64,FLEN)
NAN_BOXED(13826054389407794455,64,FLEN)
NAN_BOXED(4153079085197320392,64,FLEN)
NAN_BOXED(4157455238793313663,64,FLEN)
NAN_BOXED(13826054389407794455,64,FLEN)
NAN_BOXED(4153079085197320392,64,FLEN)
NAN_BOXED(4157738946429348573,64,FLEN)
NAN_BOXED(13826698178372491432,64,FLEN)
NAN_BOXED(4154028660291163135,64,FLEN)
NAN_BOXED(4157738946429348573,64,FLEN)
NAN_BOXED(13826698178372491432,64,FLEN)
NAN_BOXED(4154028660291163135,64,FLEN)
NAN_BOXED(4157738946429348573,64,FLEN)
NAN_BOXED(13826698178372491432,64,FLEN)
NAN_BOXED(4154028660291163135,64,FLEN)
NAN_BOXED(4157738946429348573,64,FLEN)
NAN_BOXED(13826698178372491432,64,FLEN)
NAN_BOXED(4154028660291163135,64,FLEN)
NAN_BOXED(4157738946429348573,64,FLEN)
NAN_BOXED(13826698178372491432,64,FLEN)
NAN_BOXED(4154028660291163135,64,FLEN)
NAN_BOXED(4157810340012505078,64,FLEN)
NAN_BOXED(13818530583359376896,64,FLEN)
NAN_BOXED(4146169671138374497,64,FLEN)
NAN_BOXED(4157810340012505078,64,FLEN)
NAN_BOXED(13818530583359376896,64,FLEN)
NAN_BOXED(4146169671138374497,64,FLEN)
NAN_BOXED(4157810340012505078,64,FLEN)
NAN_BOXED(13818530583359376896,64,FLEN)
NAN_BOXED(4146169671138374497,64,FLEN)
NAN_BOXED(4157810340012505078,64,FLEN)
NAN_BOXED(13818530583359376896,64,FLEN)
NAN_BOXED(4146169671138374497,64,FLEN)
NAN_BOXED(4157810340012505078,64,FLEN)
NAN_BOXED(13818530583359376896,64,FLEN)
NAN_BOXED(4146169671138374497,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4698931706139046710,64,FLEN)
NAN_BOXED(4134814696245562910,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4698931706139046710,64,FLEN)
NAN_BOXED(4134814696245562910,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4698931706139046710,64,FLEN)
NAN_BOXED(4134814696245562910,64,FLEN)
NAN_BOXED(4136363791577204343,64,FLEN)
NAN_BOXED(4698931706139046710,64,FLEN)
NAN_BOXED(4134814696245562910,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(4134014414103330197,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(4134014414103330197,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(4134014414103330197,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(4134014414103330197,64,FLEN)
NAN_BOXED(4148703762588837799,64,FLEN)
NAN_BOXED(13811497253581053788,64,FLEN)
NAN_BOXED(4134014414103330197,64,FLEN)
NAN_BOXED(4150736609098840703,64,FLEN)
NAN_BOXED(13824548119918898236,64,FLEN)
NAN_BOXED(4145051290793129165,64,FLEN)
NAN_BOXED(4150736609098840703,64,FLEN)
NAN_BOXED(13824548119918898236,64,FLEN)
NAN_BOXED(4145051290793129165,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 46*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
