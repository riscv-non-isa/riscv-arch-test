
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:04:18 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fadd.d_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fadd.d_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==f28, rs2==f28, rd==f28,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f28; op2:f28; dest:f28; op1val:0x3f6ea7e132f81500; op2val:0x3f6ea7e132f81500; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f28, f28, f28, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs2 == rd != rs1, rs1==f18, rs2==f9, rd==f9,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f18; op2:f9; dest:f9; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f9, f18, f9, dyn, 32, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==f26, rs2==f26, rd==f25,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f26; op2:f26; dest:f25; op1val:0x3f6ea7e132f81500; op2val:0x3f6ea7e132f81500; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f25, f26, f26, dyn, 64, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f13, rs2==f17, rd==f20,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f13; op2:f17; dest:f20; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f20, f13, f17, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2, rs1==f15, rs2==f2, rd==f15,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f15; op2:f2; dest:f15; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f15, f15, f2, dyn, 128, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f29, rs2==f1, rd==f24,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xcde95d6a03380 and fs2 == 1 and fe2 == 0x3f7 and fm2 == 0xcde95d6a03380 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f29; op2:f1; dest:f24; op1val:0x3f7cde95d6a03380; op2val:0xbf7cde95d6a03380; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f24, f29, f1, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f23, rs2==f21, rd==f29,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xcde95d6a03380 and fs2 == 1 and fe2 == 0x3f7 and fm2 == 0xcde95d6a03380 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f23; op2:f21; dest:f29; op1val:0x3f7cde95d6a03380; op2val:0xbf7cde95d6a03380; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f29, f23, f21, dyn, 32, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f19, rs2==f29, rd==f18,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xcde95d6a03380 and fs2 == 1 and fe2 == 0x3f7 and fm2 == 0xcde95d6a03380 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f19; op2:f29; dest:f18; op1val:0x3f7cde95d6a03380; op2val:0xbf7cde95d6a03380; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f18, f19, f29, dyn, 64, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f8, rs2==f30, rd==f11,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xcde95d6a03380 and fs2 == 1 and fe2 == 0x3f7 and fm2 == 0xcde95d6a03380 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f8; op2:f30; dest:f11; op1val:0x3f7cde95d6a03380; op2val:0xbf7cde95d6a03380; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f11, f8, f30, dyn, 96, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f12, rs2==f19, rd==f22,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xcde95d6a03380 and fs2 == 1 and fe2 == 0x3f7 and fm2 == 0xcde95d6a03380 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f12; op2:f19; dest:f22; op1val:0x3f7cde95d6a03380; op2val:0xbf7cde95d6a03380; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f22, f12, f19, dyn, 128, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f1, rs2==f4, rd==f0,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x363a9ec73cbc0 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x363a9ec73cbc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f1; op2:f4; dest:f0; op1val:0x3f8363a9ec73cbc0; op2val:0xbf8363a9ec73cbc0; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f0, f1, f4, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f27, rs2==f31, rd==f26,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x363a9ec73cbc0 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x363a9ec73cbc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f27; op2:f31; dest:f26; op1val:0x3f8363a9ec73cbc0; op2val:0xbf8363a9ec73cbc0; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f26, f27, f31, dyn, 32, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f16, rs2==f11, rd==f8,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x363a9ec73cbc0 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x363a9ec73cbc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f16; op2:f11; dest:f8; op1val:0x3f8363a9ec73cbc0; op2val:0xbf8363a9ec73cbc0; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f8, f16, f11, dyn, 64, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f2, rs2==f16, rd==f31,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x363a9ec73cbc0 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x363a9ec73cbc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f2; op2:f16; dest:f31; op1val:0x3f8363a9ec73cbc0; op2val:0xbf8363a9ec73cbc0; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f2, f16, dyn, 96, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f30, rs2==f14, rd==f13,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x363a9ec73cbc0 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x363a9ec73cbc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f14; dest:f13; op1val:0x3f8363a9ec73cbc0; op2val:0xbf8363a9ec73cbc0; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f13, f30, f14, dyn, 128, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f10, rs2==f23, rd==f7,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x16b46c18c7260 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x16b46c18c7260 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f10; op2:f23; dest:f7; op1val:0x3f916b46c18c7260; op2val:0xbf916b46c18c7260; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f7, f10, f23, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f9, rs2==f6, rd==f4,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x16b46c18c7260 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x16b46c18c7260 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f9; op2:f6; dest:f4; op1val:0x3f916b46c18c7260; op2val:0xbf916b46c18c7260; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f4, f9, f6, dyn, 32, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f11, rs2==f13, rd==f10,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x16b46c18c7260 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x16b46c18c7260 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f11; op2:f13; dest:f10; op1val:0x3f916b46c18c7260; op2val:0xbf916b46c18c7260; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f10, f11, f13, dyn, 64, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f25, rs2==f7, rd==f27,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x16b46c18c7260 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x16b46c18c7260 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f25; op2:f7; dest:f27; op1val:0x3f916b46c18c7260; op2val:0xbf916b46c18c7260; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f27, f25, f7, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f20, rs2==f18, rd==f21,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x16b46c18c7260 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x16b46c18c7260 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f20; op2:f18; dest:f21; op1val:0x3f916b46c18c7260; op2val:0xbf916b46c18c7260; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f21, f20, f18, dyn, 128, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f4, rs2==f20, rd==f3,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xa0cce81168960 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xa0cce81168960 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f4; op2:f20; dest:f3; op1val:0x3f9a0cce81168960; op2val:0xbf9a0cce81168960; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f3, f4, f20, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f7, rs2==f12, rd==f1,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xa0cce81168960 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xa0cce81168960 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f7; op2:f12; dest:f1; op1val:0x3f9a0cce81168960; op2val:0xbf9a0cce81168960; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f1, f7, f12, dyn, 32, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f31, rs2==f15, rd==f23,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xa0cce81168960 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xa0cce81168960 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f31; op2:f15; dest:f23; op1val:0x3f9a0cce81168960; op2val:0xbf9a0cce81168960; 
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f23, f31, f15, dyn, 64, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f3, rs2==f8, rd==f12,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xa0cce81168960 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xa0cce81168960 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f3; op2:f8; dest:f12; op1val:0x3f9a0cce81168960; op2val:0xbf9a0cce81168960; 
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f12, f3, f8, dyn, 96, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f6, rs2==f3, rd==f16,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xa0cce81168960 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xa0cce81168960 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f6; op2:f3; dest:f16; op1val:0x3f9a0cce81168960; op2val:0xbf9a0cce81168960; 
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f16, f6, f3, dyn, 128, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f0, rs2==f10, rd==f14,fs1 == 0 and fe1 == 0x3fa and fm1 == 0x013e3283c4340 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x013e3283c4340 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f0; op2:f10; dest:f14; op1val:0x3fa013e3283c4340; op2val:0xbfa013e3283c4340; 
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f14, f0, f10, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f5, rs2==f0, rd==f30,fs1 == 0 and fe1 == 0x3fa and fm1 == 0x013e3283c4340 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x013e3283c4340 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f5; op2:f0; dest:f30; op1val:0x3fa013e3283c4340; op2val:0xbfa013e3283c4340; 
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f30, f5, f0, dyn, 32, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f14, rs2==f24, rd==f17,fs1 == 0 and fe1 == 0x3fa and fm1 == 0x013e3283c4340 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x013e3283c4340 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f14; op2:f24; dest:f17; op1val:0x3fa013e3283c4340; op2val:0xbfa013e3283c4340; 
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f17, f14, f24, dyn, 64, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f21, rs2==f22, rd==f6,fs1 == 0 and fe1 == 0x3fa and fm1 == 0x013e3283c4340 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x013e3283c4340 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f21; op2:f22; dest:f6; op1val:0x3fa013e3283c4340; op2val:0xbfa013e3283c4340; 
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f6, f21, f22, dyn, 96, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f24, rs2==f5, rd==f19,fs1 == 0 and fe1 == 0x3fa and fm1 == 0x013e3283c4340 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x013e3283c4340 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f24; op2:f5; dest:f19; op1val:0x3fa013e3283c4340; op2val:0xbfa013e3283c4340; 
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f19, f24, f5, dyn, 128, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f22, rs2==f25, rd==f5,fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1246332ae28f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1246332ae28f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f22; op2:f25; dest:f5; op1val:0x3fa1246332ae28f0; op2val:0xbfa1246332ae28f0; 
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f5, f22, f25, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f17, rs2==f27, rd==f2,fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1246332ae28f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1246332ae28f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f17; op2:f27; dest:f2; op1val:0x3fa1246332ae28f0; op2val:0xbfa1246332ae28f0; 
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f2, f17, f27, dyn, 32, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1246332ae28f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1246332ae28f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa1246332ae28f0; op2val:0xbfa1246332ae28f0; 
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1246332ae28f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1246332ae28f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa1246332ae28f0; op2val:0xbfa1246332ae28f0; 
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1246332ae28f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1246332ae28f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa1246332ae28f0; op2val:0xbfa1246332ae28f0; 
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x283c10cd62fb0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x283c10cd62fb0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa283c10cd62fb0; op2val:0xbfa283c10cd62fb0; 
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x283c10cd62fb0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x283c10cd62fb0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa283c10cd62fb0; op2val:0xbfa283c10cd62fb0; 
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x283c10cd62fb0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x283c10cd62fb0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa283c10cd62fb0; op2val:0xbfa283c10cd62fb0; 
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x283c10cd62fb0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x283c10cd62fb0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa283c10cd62fb0; op2val:0xbfa283c10cd62fb0; 
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x283c10cd62fb0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x283c10cd62fb0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa283c10cd62fb0; op2val:0xbfa283c10cd62fb0; 
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3f3b541e02f10 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3f3b541e02f10 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa3f3b541e02f10; op2val:0xbfa3f3b541e02f10; 
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3f3b541e02f10 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3f3b541e02f10 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa3f3b541e02f10; op2val:0xbfa3f3b541e02f10; 
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3f3b541e02f10 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3f3b541e02f10 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa3f3b541e02f10; op2val:0xbfa3f3b541e02f10; 
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3f3b541e02f10 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3f3b541e02f10 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa3f3b541e02f10; op2val:0xbfa3f3b541e02f10; 
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3f3b541e02f10 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3f3b541e02f10 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa3f3b541e02f10; op2val:0xbfa3f3b541e02f10; 
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4e7786f7957b0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4e7786f7957b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa4e7786f7957b0; op2val:0xbfa4e7786f7957b0; 
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4e7786f7957b0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4e7786f7957b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa4e7786f7957b0; op2val:0xbfa4e7786f7957b0; 
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4e7786f7957b0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4e7786f7957b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa4e7786f7957b0; op2val:0xbfa4e7786f7957b0; 
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4e7786f7957b0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4e7786f7957b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa4e7786f7957b0; op2val:0xbfa4e7786f7957b0; 
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4e7786f7957b0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4e7786f7957b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa4e7786f7957b0; op2val:0xbfa4e7786f7957b0; 
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b86b25282b70 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x9b86b25282b70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9b86b25282b70; op2val:0xbfa9b86b25282b70; 
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b86b25282b70 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x9b86b25282b70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9b86b25282b70; op2val:0xbfa9b86b25282b70; 
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b86b25282b70 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x9b86b25282b70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9b86b25282b70; op2val:0xbfa9b86b25282b70; 
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b86b25282b70 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x9b86b25282b70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9b86b25282b70; op2val:0xbfa9b86b25282b70; 
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b86b25282b70 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x9b86b25282b70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fa9b86b25282b70; op2val:0xbfa9b86b25282b70; 
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa25981e2177c0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa25981e2177c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faa25981e2177c0; op2val:0xbfaa25981e2177c0; 
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa25981e2177c0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa25981e2177c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faa25981e2177c0; op2val:0xbfaa25981e2177c0; 
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa25981e2177c0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa25981e2177c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faa25981e2177c0; op2val:0xbfaa25981e2177c0; 
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa25981e2177c0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa25981e2177c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faa25981e2177c0; op2val:0xbfaa25981e2177c0; 
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa25981e2177c0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa25981e2177c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faa25981e2177c0; op2val:0xbfaa25981e2177c0; 
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaa4cf4cf6dab0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xaa4cf4cf6dab0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faaa4cf4cf6dab0; op2val:0xbfaaa4cf4cf6dab0; 
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaa4cf4cf6dab0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xaa4cf4cf6dab0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faaa4cf4cf6dab0; op2val:0xbfaaa4cf4cf6dab0; 
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaa4cf4cf6dab0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xaa4cf4cf6dab0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faaa4cf4cf6dab0; op2val:0xbfaaa4cf4cf6dab0; 
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaa4cf4cf6dab0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xaa4cf4cf6dab0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faaa4cf4cf6dab0; op2val:0xbfaaa4cf4cf6dab0; 
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaa4cf4cf6dab0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xaa4cf4cf6dab0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faaa4cf4cf6dab0; op2val:0xbfaaa4cf4cf6dab0; 
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb64046884cff0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xb64046884cff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fab64046884cff0; op2val:0xbfab64046884cff0; 
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb64046884cff0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xb64046884cff0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fab64046884cff0; op2val:0xbfab64046884cff0; 
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb64046884cff0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xb64046884cff0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fab64046884cff0; op2val:0xbfab64046884cff0; 
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb64046884cff0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xb64046884cff0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fab64046884cff0; op2val:0xbfab64046884cff0; 
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb64046884cff0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xb64046884cff0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fab64046884cff0; op2val:0xbfab64046884cff0; 
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc455e9eb748f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc455e9eb748f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fac455e9eb748f0; op2val:0xbfac455e9eb748f0; 
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc455e9eb748f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc455e9eb748f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fac455e9eb748f0; op2val:0xbfac455e9eb748f0; 
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc455e9eb748f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc455e9eb748f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fac455e9eb748f0; op2val:0xbfac455e9eb748f0; 
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc455e9eb748f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc455e9eb748f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fac455e9eb748f0; op2val:0xbfac455e9eb748f0; 
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc455e9eb748f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc455e9eb748f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fac455e9eb748f0; op2val:0xbfac455e9eb748f0; 
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd360c4b32ddf0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xd360c4b32ddf0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fad360c4b32ddf0; op2val:0xbfad360c4b32ddf0; 
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd360c4b32ddf0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xd360c4b32ddf0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fad360c4b32ddf0; op2val:0xbfad360c4b32ddf0; 
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd360c4b32ddf0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xd360c4b32ddf0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fad360c4b32ddf0; op2val:0xbfad360c4b32ddf0; 
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd360c4b32ddf0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xd360c4b32ddf0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fad360c4b32ddf0; op2val:0xbfad360c4b32ddf0; 
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd360c4b32ddf0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xd360c4b32ddf0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fad360c4b32ddf0; op2val:0xbfad360c4b32ddf0; 
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf9c1686579700 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf9c1686579700 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faf9c1686579700; op2val:0xbfaf9c1686579700; 
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf9c1686579700 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf9c1686579700 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faf9c1686579700; op2val:0xbfaf9c1686579700; 
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf9c1686579700 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf9c1686579700 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faf9c1686579700; op2val:0xbfaf9c1686579700; 
   valaddr_reg:x3; val_offset:164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf9c1686579700 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf9c1686579700 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faf9c1686579700; op2val:0xbfaf9c1686579700; 
   valaddr_reg:x3; val_offset:166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf9c1686579700 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf9c1686579700 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3faf9c1686579700; op2val:0xbfaf9c1686579700; 
   valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0187483e41018 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0187483e41018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb0187483e41018; op2val:0xbfb0187483e41018; 
   valaddr_reg:x3; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0187483e41018 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0187483e41018 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb0187483e41018; op2val:0xbfb0187483e41018; 
   valaddr_reg:x3; val_offset:172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0187483e41018 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0187483e41018 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb0187483e41018; op2val:0xbfb0187483e41018; 
   valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0187483e41018 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0187483e41018 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb0187483e41018; op2val:0xbfb0187483e41018; 
   valaddr_reg:x3; val_offset:176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0187483e41018 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0187483e41018 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb0187483e41018; op2val:0xbfb0187483e41018; 
   valaddr_reg:x3; val_offset:178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x39d4d3ec372c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x39d4d3ec372c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb39d4d3ec372c8; op2val:0xbfb39d4d3ec372c8; 
   valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x39d4d3ec372c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x39d4d3ec372c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb39d4d3ec372c8; op2val:0xbfb39d4d3ec372c8; 
   valaddr_reg:x3; val_offset:182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x39d4d3ec372c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x39d4d3ec372c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb39d4d3ec372c8; op2val:0xbfb39d4d3ec372c8; 
   valaddr_reg:x3; val_offset:184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x39d4d3ec372c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x39d4d3ec372c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb39d4d3ec372c8; op2val:0xbfb39d4d3ec372c8; 
   valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x39d4d3ec372c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x39d4d3ec372c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb39d4d3ec372c8; op2val:0xbfb39d4d3ec372c8; 
   valaddr_reg:x3; val_offset:188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3be191d4f9c08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3be191d4f9c08 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb3be191d4f9c08; op2val:0xbfb3be191d4f9c08; 
   valaddr_reg:x3; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3be191d4f9c08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3be191d4f9c08 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb3be191d4f9c08; op2val:0xbfb3be191d4f9c08; 
   valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3be191d4f9c08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3be191d4f9c08 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb3be191d4f9c08; op2val:0xbfb3be191d4f9c08; 
   valaddr_reg:x3; val_offset:194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 194*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3be191d4f9c08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3be191d4f9c08 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb3be191d4f9c08; op2val:0xbfb3be191d4f9c08; 
   valaddr_reg:x3; val_offset:196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 196*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3be191d4f9c08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3be191d4f9c08 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb3be191d4f9c08; op2val:0xbfb3be191d4f9c08; 
   valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a9e96459a3c0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4a9e96459a3c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4a9e96459a3c0; op2val:0xbfb4a9e96459a3c0; 
   valaddr_reg:x3; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 200*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a9e96459a3c0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4a9e96459a3c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4a9e96459a3c0; op2val:0xbfb4a9e96459a3c0; 
   valaddr_reg:x3; val_offset:202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 202*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a9e96459a3c0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4a9e96459a3c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4a9e96459a3c0; op2val:0xbfb4a9e96459a3c0; 
   valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a9e96459a3c0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4a9e96459a3c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4a9e96459a3c0; op2val:0xbfb4a9e96459a3c0; 
   valaddr_reg:x3; val_offset:206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 206*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a9e96459a3c0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4a9e96459a3c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4a9e96459a3c0; op2val:0xbfb4a9e96459a3c0; 
   valaddr_reg:x3; val_offset:208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 208*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4de5c0dc474c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4de5c0dc474c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4de5c0dc474c8; op2val:0xbfb4de5c0dc474c8; 
   valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4de5c0dc474c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4de5c0dc474c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4de5c0dc474c8; op2val:0xbfb4de5c0dc474c8; 
   valaddr_reg:x3; val_offset:212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 212*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4de5c0dc474c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4de5c0dc474c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4de5c0dc474c8; op2val:0xbfb4de5c0dc474c8; 
   valaddr_reg:x3; val_offset:214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 214*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4de5c0dc474c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4de5c0dc474c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4de5c0dc474c8; op2val:0xbfb4de5c0dc474c8; 
   valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4de5c0dc474c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4de5c0dc474c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb4de5c0dc474c8; op2val:0xbfb4de5c0dc474c8; 
   valaddr_reg:x3; val_offset:218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 218*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x53c6de3974a78 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x53c6de3974a78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb53c6de3974a78; op2val:0xbfb53c6de3974a78; 
   valaddr_reg:x3; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 220*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x53c6de3974a78 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x53c6de3974a78 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb53c6de3974a78; op2val:0xbfb53c6de3974a78; 
   valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x53c6de3974a78 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x53c6de3974a78 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb53c6de3974a78; op2val:0xbfb53c6de3974a78; 
   valaddr_reg:x3; val_offset:224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 224*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x53c6de3974a78 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x53c6de3974a78 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb53c6de3974a78; op2val:0xbfb53c6de3974a78; 
   valaddr_reg:x3; val_offset:226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 226*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x53c6de3974a78 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x53c6de3974a78 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb53c6de3974a78; op2val:0xbfb53c6de3974a78; 
   valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x644e85974eb18 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x644e85974eb18 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb644e85974eb18; op2val:0xbfb644e85974eb18; 
   valaddr_reg:x3; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 230*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x644e85974eb18 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x644e85974eb18 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb644e85974eb18; op2val:0xbfb644e85974eb18; 
   valaddr_reg:x3; val_offset:232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 232*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x644e85974eb18 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x644e85974eb18 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb644e85974eb18; op2val:0xbfb644e85974eb18; 
   valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x644e85974eb18 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x644e85974eb18 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb644e85974eb18; op2val:0xbfb644e85974eb18; 
   valaddr_reg:x3; val_offset:236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 236*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x644e85974eb18 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x644e85974eb18 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb644e85974eb18; op2val:0xbfb644e85974eb18; 
   valaddr_reg:x3; val_offset:238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 238*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x70930c20807d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x70930c20807d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb70930c20807d0; op2val:0xbfb70930c20807d0; 
   valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x70930c20807d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x70930c20807d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb70930c20807d0; op2val:0xbfb70930c20807d0; 
   valaddr_reg:x3; val_offset:242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 242*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x70930c20807d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x70930c20807d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb70930c20807d0; op2val:0xbfb70930c20807d0; 
   valaddr_reg:x3; val_offset:244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 244*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x70930c20807d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x70930c20807d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb70930c20807d0; op2val:0xbfb70930c20807d0; 
   valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x70930c20807d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x70930c20807d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb70930c20807d0; op2val:0xbfb70930c20807d0; 
   valaddr_reg:x3; val_offset:248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 248*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x713fe44d167d8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x713fe44d167d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb713fe44d167d8; op2val:0xbfb713fe44d167d8; 
   valaddr_reg:x3; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 250*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x713fe44d167d8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x713fe44d167d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb713fe44d167d8; op2val:0xbfb713fe44d167d8; 
   valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x713fe44d167d8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x713fe44d167d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb713fe44d167d8; op2val:0xbfb713fe44d167d8; 
   valaddr_reg:x3; val_offset:254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 254*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x713fe44d167d8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x713fe44d167d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb713fe44d167d8; op2val:0xbfb713fe44d167d8; 
   valaddr_reg:x3; val_offset:256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 256*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x713fe44d167d8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x713fe44d167d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb713fe44d167d8; op2val:0xbfb713fe44d167d8; 
   valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x71ade8ef53d20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x71ade8ef53d20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb71ade8ef53d20; op2val:0xbfb71ade8ef53d20; 
   valaddr_reg:x3; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 260*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x71ade8ef53d20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x71ade8ef53d20 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb71ade8ef53d20; op2val:0xbfb71ade8ef53d20; 
   valaddr_reg:x3; val_offset:262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 262*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x71ade8ef53d20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x71ade8ef53d20 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb71ade8ef53d20; op2val:0xbfb71ade8ef53d20; 
   valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x71ade8ef53d20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x71ade8ef53d20 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb71ade8ef53d20; op2val:0xbfb71ade8ef53d20; 
   valaddr_reg:x3; val_offset:266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 266*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x71ade8ef53d20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x71ade8ef53d20 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb71ade8ef53d20; op2val:0xbfb71ade8ef53d20; 
   valaddr_reg:x3; val_offset:268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 268*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x76237f09a3c90 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x76237f09a3c90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb76237f09a3c90; op2val:0xbfb76237f09a3c90; 
   valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x76237f09a3c90 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x76237f09a3c90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb76237f09a3c90; op2val:0xbfb76237f09a3c90; 
   valaddr_reg:x3; val_offset:272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 272*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x76237f09a3c90 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x76237f09a3c90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb76237f09a3c90; op2val:0xbfb76237f09a3c90; 
   valaddr_reg:x3; val_offset:274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 274*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x76237f09a3c90 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x76237f09a3c90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb76237f09a3c90; op2val:0xbfb76237f09a3c90; 
   valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x76237f09a3c90 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x76237f09a3c90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb76237f09a3c90; op2val:0xbfb76237f09a3c90; 
   valaddr_reg:x3; val_offset:278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 278*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x785e9f9028468 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x785e9f9028468 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb785e9f9028468; op2val:0xbfb785e9f9028468; 
   valaddr_reg:x3; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 280*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x785e9f9028468 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x785e9f9028468 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb785e9f9028468; op2val:0xbfb785e9f9028468; 
   valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x785e9f9028468 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x785e9f9028468 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb785e9f9028468; op2val:0xbfb785e9f9028468; 
   valaddr_reg:x3; val_offset:284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 284*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x785e9f9028468 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x785e9f9028468 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb785e9f9028468; op2val:0xbfb785e9f9028468; 
   valaddr_reg:x3; val_offset:286*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 286*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x785e9f9028468 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x785e9f9028468 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb785e9f9028468; op2val:0xbfb785e9f9028468; 
   valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x81ec127da2ad0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x81ec127da2ad0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb81ec127da2ad0; op2val:0xbfb81ec127da2ad0; 
   valaddr_reg:x3; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 290*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x81ec127da2ad0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x81ec127da2ad0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb81ec127da2ad0; op2val:0xbfb81ec127da2ad0; 
   valaddr_reg:x3; val_offset:292*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 292*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x81ec127da2ad0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x81ec127da2ad0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb81ec127da2ad0; op2val:0xbfb81ec127da2ad0; 
   valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x81ec127da2ad0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x81ec127da2ad0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb81ec127da2ad0; op2val:0xbfb81ec127da2ad0; 
   valaddr_reg:x3; val_offset:296*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 296*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x81ec127da2ad0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x81ec127da2ad0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb81ec127da2ad0; op2val:0xbfb81ec127da2ad0; 
   valaddr_reg:x3; val_offset:298*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 298*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8e7fcd1529f20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8e7fcd1529f20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb8e7fcd1529f20; op2val:0xbfb8e7fcd1529f20; 
   valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8e7fcd1529f20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8e7fcd1529f20 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb8e7fcd1529f20; op2val:0xbfb8e7fcd1529f20; 
   valaddr_reg:x3; val_offset:302*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 302*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8e7fcd1529f20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8e7fcd1529f20 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb8e7fcd1529f20; op2val:0xbfb8e7fcd1529f20; 
   valaddr_reg:x3; val_offset:304*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 304*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8e7fcd1529f20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8e7fcd1529f20 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb8e7fcd1529f20; op2val:0xbfb8e7fcd1529f20; 
   valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8e7fcd1529f20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8e7fcd1529f20 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb8e7fcd1529f20; op2val:0xbfb8e7fcd1529f20; 
   valaddr_reg:x3; val_offset:308*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 308*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x952226f0bd0d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x952226f0bd0d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb952226f0bd0d0; op2val:0xbfb952226f0bd0d0; 
   valaddr_reg:x3; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 310*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x952226f0bd0d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x952226f0bd0d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb952226f0bd0d0; op2val:0xbfb952226f0bd0d0; 
   valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x952226f0bd0d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x952226f0bd0d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb952226f0bd0d0; op2val:0xbfb952226f0bd0d0; 
   valaddr_reg:x3; val_offset:314*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 314*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x952226f0bd0d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x952226f0bd0d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb952226f0bd0d0; op2val:0xbfb952226f0bd0d0; 
   valaddr_reg:x3; val_offset:316*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 316*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x952226f0bd0d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x952226f0bd0d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb952226f0bd0d0; op2val:0xbfb952226f0bd0d0; 
   valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9da9bf5d0d198 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9da9bf5d0d198 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9da9bf5d0d198; op2val:0xbfb9da9bf5d0d198; 
   valaddr_reg:x3; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 320*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9da9bf5d0d198 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9da9bf5d0d198 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9da9bf5d0d198; op2val:0xbfb9da9bf5d0d198; 
   valaddr_reg:x3; val_offset:322*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 322*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9da9bf5d0d198 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9da9bf5d0d198 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9da9bf5d0d198; op2val:0xbfb9da9bf5d0d198; 
   valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9da9bf5d0d198 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9da9bf5d0d198 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9da9bf5d0d198; op2val:0xbfb9da9bf5d0d198; 
   valaddr_reg:x3; val_offset:326*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 326*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9da9bf5d0d198 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9da9bf5d0d198 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9da9bf5d0d198; op2val:0xbfb9da9bf5d0d198; 
   valaddr_reg:x3; val_offset:328*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 328*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e5bbe4c8eb20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9e5bbe4c8eb20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9e5bbe4c8eb20; op2val:0xbfb9e5bbe4c8eb20; 
   valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e5bbe4c8eb20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9e5bbe4c8eb20 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9e5bbe4c8eb20; op2val:0xbfb9e5bbe4c8eb20; 
   valaddr_reg:x3; val_offset:332*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 332*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e5bbe4c8eb20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9e5bbe4c8eb20 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9e5bbe4c8eb20; op2val:0xbfb9e5bbe4c8eb20; 
   valaddr_reg:x3; val_offset:334*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 334*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e5bbe4c8eb20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9e5bbe4c8eb20 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9e5bbe4c8eb20; op2val:0xbfb9e5bbe4c8eb20; 
   valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e5bbe4c8eb20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9e5bbe4c8eb20 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fb9e5bbe4c8eb20; op2val:0xbfb9e5bbe4c8eb20; 
   valaddr_reg:x3; val_offset:338*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 338*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa1153899f25d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa1153899f25d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fba1153899f25d0; op2val:0xbfba1153899f25d0; 
   valaddr_reg:x3; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 340*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa1153899f25d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa1153899f25d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fba1153899f25d0; op2val:0xbfba1153899f25d0; 
   valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa1153899f25d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa1153899f25d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fba1153899f25d0; op2val:0xbfba1153899f25d0; 
   valaddr_reg:x3; val_offset:344*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 344*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa1153899f25d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa1153899f25d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fba1153899f25d0; op2val:0xbfba1153899f25d0; 
   valaddr_reg:x3; val_offset:346*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 346*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa1153899f25d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa1153899f25d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fba1153899f25d0; op2val:0xbfba1153899f25d0; 
   valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa31f35b4c6010 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa31f35b4c6010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fba31f35b4c6010; op2val:0xbfba31f35b4c6010; 
   valaddr_reg:x3; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 350*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa31f35b4c6010 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa31f35b4c6010 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fba31f35b4c6010; op2val:0xbfba31f35b4c6010; 
   valaddr_reg:x3; val_offset:352*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 352*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa31f35b4c6010 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa31f35b4c6010 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fba31f35b4c6010; op2val:0xbfba31f35b4c6010; 
   valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa31f35b4c6010 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa31f35b4c6010 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fba31f35b4c6010; op2val:0xbfba31f35b4c6010; 
   valaddr_reg:x3; val_offset:356*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 356*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa31f35b4c6010 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa31f35b4c6010 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fba31f35b4c6010; op2val:0xbfba31f35b4c6010; 
   valaddr_reg:x3; val_offset:358*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 358*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xadeb9ea41bf00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xadeb9ea41bf00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbadeb9ea41bf00; op2val:0xbfbadeb9ea41bf00; 
   valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xadeb9ea41bf00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xadeb9ea41bf00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbadeb9ea41bf00; op2val:0xbfbadeb9ea41bf00; 
   valaddr_reg:x3; val_offset:362*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 362*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xadeb9ea41bf00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xadeb9ea41bf00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbadeb9ea41bf00; op2val:0xbfbadeb9ea41bf00; 
   valaddr_reg:x3; val_offset:364*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 364*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xadeb9ea41bf00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xadeb9ea41bf00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbadeb9ea41bf00; op2val:0xbfbadeb9ea41bf00; 
   valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xadeb9ea41bf00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xadeb9ea41bf00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbadeb9ea41bf00; op2val:0xbfbadeb9ea41bf00; 
   valaddr_reg:x3; val_offset:368*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 368*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb089dbb04ccc0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb089dbb04ccc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb089dbb04ccc0; op2val:0xbfbb089dbb04ccc0; 
   valaddr_reg:x3; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 370*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb089dbb04ccc0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb089dbb04ccc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb089dbb04ccc0; op2val:0xbfbb089dbb04ccc0; 
   valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb089dbb04ccc0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb089dbb04ccc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb089dbb04ccc0; op2val:0xbfbb089dbb04ccc0; 
   valaddr_reg:x3; val_offset:374*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 374*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb089dbb04ccc0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb089dbb04ccc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb089dbb04ccc0; op2val:0xbfbb089dbb04ccc0; 
   valaddr_reg:x3; val_offset:376*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 376*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb089dbb04ccc0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb089dbb04ccc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb089dbb04ccc0; op2val:0xbfbb089dbb04ccc0; 
   valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb47d67b6a28b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb47d67b6a28b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb47d67b6a28b8; op2val:0xbfbb47d67b6a28b8; 
   valaddr_reg:x3; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 380*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb47d67b6a28b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb47d67b6a28b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb47d67b6a28b8; op2val:0xbfbb47d67b6a28b8; 
   valaddr_reg:x3; val_offset:382*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 382*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb47d67b6a28b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb47d67b6a28b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb47d67b6a28b8; op2val:0xbfbb47d67b6a28b8; 
   valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb47d67b6a28b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb47d67b6a28b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb47d67b6a28b8; op2val:0xbfbb47d67b6a28b8; 
   valaddr_reg:x3; val_offset:386*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 386*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb47d67b6a28b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb47d67b6a28b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbb47d67b6a28b8; op2val:0xbfbb47d67b6a28b8; 
   valaddr_reg:x3; val_offset:388*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 388*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc796f0bec1ca8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc796f0bec1ca8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbc796f0bec1ca8; op2val:0xbfbc796f0bec1ca8; 
   valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc796f0bec1ca8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc796f0bec1ca8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbc796f0bec1ca8; op2val:0xbfbc796f0bec1ca8; 
   valaddr_reg:x3; val_offset:392*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 392*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc796f0bec1ca8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc796f0bec1ca8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbc796f0bec1ca8; op2val:0xbfbc796f0bec1ca8; 
   valaddr_reg:x3; val_offset:394*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 394*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc796f0bec1ca8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc796f0bec1ca8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbc796f0bec1ca8; op2val:0xbfbc796f0bec1ca8; 
   valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc796f0bec1ca8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc796f0bec1ca8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbc796f0bec1ca8; op2val:0xbfbc796f0bec1ca8; 
   valaddr_reg:x3; val_offset:398*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 398*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf51e5ef521850 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf51e5ef521850 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbf51e5ef521850; op2val:0xbfbf51e5ef521850; 
   valaddr_reg:x3; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 400*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf51e5ef521850 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf51e5ef521850 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbf51e5ef521850; op2val:0xbfbf51e5ef521850; 
   valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf51e5ef521850 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf51e5ef521850 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbf51e5ef521850; op2val:0xbfbf51e5ef521850; 
   valaddr_reg:x3; val_offset:404*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 404*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf51e5ef521850 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf51e5ef521850 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbf51e5ef521850; op2val:0xbfbf51e5ef521850; 
   valaddr_reg:x3; val_offset:406*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 406*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf51e5ef521850 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf51e5ef521850 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbf51e5ef521850; op2val:0xbfbf51e5ef521850; 
   valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe440aa706f00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xfe440aa706f00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbfe440aa706f00; op2val:0xbfbfe440aa706f00; 
   valaddr_reg:x3; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 410*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe440aa706f00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xfe440aa706f00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbfe440aa706f00; op2val:0xbfbfe440aa706f00; 
   valaddr_reg:x3; val_offset:412*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 412*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe440aa706f00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xfe440aa706f00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbfe440aa706f00; op2val:0xbfbfe440aa706f00; 
   valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe440aa706f00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xfe440aa706f00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbfe440aa706f00; op2val:0xbfbfe440aa706f00; 
   valaddr_reg:x3; val_offset:416*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 416*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe440aa706f00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xfe440aa706f00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbfe440aa706f00; op2val:0xbfbfe440aa706f00; 
   valaddr_reg:x3; val_offset:418*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 418*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xffeee00d38b08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xffeee00d38b08 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbffeee00d38b08; op2val:0xbfbffeee00d38b08; 
   valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xffeee00d38b08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xffeee00d38b08 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbffeee00d38b08; op2val:0xbfbffeee00d38b08; 
   valaddr_reg:x3; val_offset:422*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 422*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xffeee00d38b08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xffeee00d38b08 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbffeee00d38b08; op2val:0xbfbffeee00d38b08; 
   valaddr_reg:x3; val_offset:424*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 424*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xffeee00d38b08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xffeee00d38b08 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbffeee00d38b08; op2val:0xbfbffeee00d38b08; 
   valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xffeee00d38b08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xffeee00d38b08 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fbffeee00d38b08; op2val:0xbfbffeee00d38b08; 
   valaddr_reg:x3; val_offset:428*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 428*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x050c840ade358 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x050c840ade358 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc050c840ade358; op2val:0xbfc050c840ade358; 
   valaddr_reg:x3; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 430*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x050c840ade358 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x050c840ade358 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc050c840ade358; op2val:0xbfc050c840ade358; 
   valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x050c840ade358 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x050c840ade358 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc050c840ade358; op2val:0xbfc050c840ade358; 
   valaddr_reg:x3; val_offset:434*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 434*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x050c840ade358 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x050c840ade358 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc050c840ade358; op2val:0xbfc050c840ade358; 
   valaddr_reg:x3; val_offset:436*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 436*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x050c840ade358 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x050c840ade358 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc050c840ade358; op2val:0xbfc050c840ade358; 
   valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x066c40d8769c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x066c40d8769c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc066c40d8769c8; op2val:0xbfc066c40d8769c8; 
   valaddr_reg:x3; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 440*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x066c40d8769c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x066c40d8769c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc066c40d8769c8; op2val:0xbfc066c40d8769c8; 
   valaddr_reg:x3; val_offset:442*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 442*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x066c40d8769c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x066c40d8769c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc066c40d8769c8; op2val:0xbfc066c40d8769c8; 
   valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x066c40d8769c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x066c40d8769c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc066c40d8769c8; op2val:0xbfc066c40d8769c8; 
   valaddr_reg:x3; val_offset:446*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 446*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x066c40d8769c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x066c40d8769c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc066c40d8769c8; op2val:0xbfc066c40d8769c8; 
   valaddr_reg:x3; val_offset:448*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 448*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0c809d15a0db8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0c809d15a0db8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0c809d15a0db8; op2val:0xbfc0c809d15a0db8; 
   valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0c809d15a0db8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0c809d15a0db8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0c809d15a0db8; op2val:0xbfc0c809d15a0db8; 
   valaddr_reg:x3; val_offset:452*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 452*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0c809d15a0db8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0c809d15a0db8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0c809d15a0db8; op2val:0xbfc0c809d15a0db8; 
   valaddr_reg:x3; val_offset:454*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 454*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0c809d15a0db8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0c809d15a0db8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0c809d15a0db8; op2val:0xbfc0c809d15a0db8; 
   valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0c809d15a0db8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0c809d15a0db8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0c809d15a0db8; op2val:0xbfc0c809d15a0db8; 
   valaddr_reg:x3; val_offset:458*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 458*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f2646aab7a80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f2646aab7a80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0f2646aab7a80; op2val:0xbfc0f2646aab7a80; 
   valaddr_reg:x3; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 460*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f2646aab7a80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f2646aab7a80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0f2646aab7a80; op2val:0xbfc0f2646aab7a80; 
   valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f2646aab7a80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f2646aab7a80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0f2646aab7a80; op2val:0xbfc0f2646aab7a80; 
   valaddr_reg:x3; val_offset:464*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 464*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f2646aab7a80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f2646aab7a80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0f2646aab7a80; op2val:0xbfc0f2646aab7a80; 
   valaddr_reg:x3; val_offset:466*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 466*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f2646aab7a80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f2646aab7a80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc0f2646aab7a80; op2val:0xbfc0f2646aab7a80; 
   valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x206889dbad440 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x206889dbad440 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc206889dbad440; op2val:0xbfc206889dbad440; 
   valaddr_reg:x3; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 470*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x206889dbad440 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x206889dbad440 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc206889dbad440; op2val:0xbfc206889dbad440; 
   valaddr_reg:x3; val_offset:472*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 472*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x206889dbad440 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x206889dbad440 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc206889dbad440; op2val:0xbfc206889dbad440; 
   valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x206889dbad440 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x206889dbad440 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc206889dbad440; op2val:0xbfc206889dbad440; 
   valaddr_reg:x3; val_offset:476*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 476*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x206889dbad440 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x206889dbad440 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc206889dbad440; op2val:0xbfc206889dbad440; 
   valaddr_reg:x3; val_offset:478*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 478*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3c9207d68a2dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c9207d68a2dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc3c9207d68a2dc; op2val:0xbfc3c9207d68a2dc; 
   valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3c9207d68a2dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c9207d68a2dc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc3c9207d68a2dc; op2val:0xbfc3c9207d68a2dc; 
   valaddr_reg:x3; val_offset:482*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 482*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3c9207d68a2dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c9207d68a2dc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc3c9207d68a2dc; op2val:0xbfc3c9207d68a2dc; 
   valaddr_reg:x3; val_offset:484*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 484*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3c9207d68a2dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c9207d68a2dc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc3c9207d68a2dc; op2val:0xbfc3c9207d68a2dc; 
   valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3c9207d68a2dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c9207d68a2dc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc3c9207d68a2dc; op2val:0xbfc3c9207d68a2dc; 
   valaddr_reg:x3; val_offset:488*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 488*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc3e9fc19d60908; op2val:0xbfc3e9fc19d60908; 
   valaddr_reg:x3; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 490*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc3e9fc19d60908; op2val:0xbfc3e9fc19d60908; 
   valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc3e9fc19d60908; op2val:0xbfc3e9fc19d60908; 
   valaddr_reg:x3; val_offset:494*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 494*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc3e9fc19d60908; op2val:0xbfc3e9fc19d60908; 
   valaddr_reg:x3; val_offset:496*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 496*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc3e9fc19d60908; op2val:0xbfc3e9fc19d60908; 
   valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42e6be9ef9858 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x42e6be9ef9858 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc42e6be9ef9858; op2val:0xbfc42e6be9ef9858; 
   valaddr_reg:x3; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 500*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42e6be9ef9858 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x42e6be9ef9858 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc42e6be9ef9858; op2val:0xbfc42e6be9ef9858; 
   valaddr_reg:x3; val_offset:502*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 502*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42e6be9ef9858 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x42e6be9ef9858 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc42e6be9ef9858; op2val:0xbfc42e6be9ef9858; 
   valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42e6be9ef9858 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x42e6be9ef9858 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc42e6be9ef9858; op2val:0xbfc42e6be9ef9858; 
   valaddr_reg:x3; val_offset:506*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 506*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42e6be9ef9858 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x42e6be9ef9858 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc42e6be9ef9858; op2val:0xbfc42e6be9ef9858; 
   valaddr_reg:x3; val_offset:508*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 508*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x45f14f33be81c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x45f14f33be81c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc45f14f33be81c; op2val:0xbfc45f14f33be81c; 
   valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x45f14f33be81c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x45f14f33be81c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc45f14f33be81c; op2val:0xbfc45f14f33be81c; 
   valaddr_reg:x3; val_offset:512*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 512*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x45f14f33be81c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x45f14f33be81c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc45f14f33be81c; op2val:0xbfc45f14f33be81c; 
   valaddr_reg:x3; val_offset:514*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 514*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x45f14f33be81c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x45f14f33be81c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc45f14f33be81c; op2val:0xbfc45f14f33be81c; 
   valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x45f14f33be81c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x45f14f33be81c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc45f14f33be81c; op2val:0xbfc45f14f33be81c; 
   valaddr_reg:x3; val_offset:518*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 518*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c784c57a6770 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4c784c57a6770 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc4c784c57a6770; op2val:0xbfc4c784c57a6770; 
   valaddr_reg:x3; val_offset:520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 520*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c784c57a6770 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4c784c57a6770 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc4c784c57a6770; op2val:0xbfc4c784c57a6770; 
   valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c784c57a6770 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4c784c57a6770 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc4c784c57a6770; op2val:0xbfc4c784c57a6770; 
   valaddr_reg:x3; val_offset:524*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 524*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c784c57a6770 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4c784c57a6770 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc4c784c57a6770; op2val:0xbfc4c784c57a6770; 
   valaddr_reg:x3; val_offset:526*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 526*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c784c57a6770 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4c784c57a6770 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc4c784c57a6770; op2val:0xbfc4c784c57a6770; 
   valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c480eaa7d5c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5c480eaa7d5c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc5c480eaa7d5c8; op2val:0xbfc5c480eaa7d5c8; 
   valaddr_reg:x3; val_offset:530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 530*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c480eaa7d5c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5c480eaa7d5c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc5c480eaa7d5c8; op2val:0xbfc5c480eaa7d5c8; 
   valaddr_reg:x3; val_offset:532*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 532*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c480eaa7d5c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5c480eaa7d5c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc5c480eaa7d5c8; op2val:0xbfc5c480eaa7d5c8; 
   valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c480eaa7d5c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5c480eaa7d5c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc5c480eaa7d5c8; op2val:0xbfc5c480eaa7d5c8; 
   valaddr_reg:x3; val_offset:536*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 536*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c480eaa7d5c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5c480eaa7d5c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc5c480eaa7d5c8; op2val:0xbfc5c480eaa7d5c8; 
   valaddr_reg:x3; val_offset:538*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 538*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x64f92c07070fc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x64f92c07070fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc64f92c07070fc; op2val:0xbfc64f92c07070fc; 
   valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x64f92c07070fc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x64f92c07070fc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc64f92c07070fc; op2val:0xbfc64f92c07070fc; 
   valaddr_reg:x3; val_offset:542*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 542*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x64f92c07070fc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x64f92c07070fc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc64f92c07070fc; op2val:0xbfc64f92c07070fc; 
   valaddr_reg:x3; val_offset:544*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 544*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x64f92c07070fc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x64f92c07070fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc64f92c07070fc; op2val:0xbfc64f92c07070fc; 
   valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x64f92c07070fc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x64f92c07070fc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc64f92c07070fc; op2val:0xbfc64f92c07070fc; 
   valaddr_reg:x3; val_offset:548*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 548*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x66b7ad37071c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x66b7ad37071c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc66b7ad37071c4; op2val:0xbfc66b7ad37071c4; 
   valaddr_reg:x3; val_offset:550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 550*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x66b7ad37071c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x66b7ad37071c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc66b7ad37071c4; op2val:0xbfc66b7ad37071c4; 
   valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x66b7ad37071c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x66b7ad37071c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc66b7ad37071c4; op2val:0xbfc66b7ad37071c4; 
   valaddr_reg:x3; val_offset:554*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 554*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x66b7ad37071c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x66b7ad37071c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc66b7ad37071c4; op2val:0xbfc66b7ad37071c4; 
   valaddr_reg:x3; val_offset:556*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 556*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x66b7ad37071c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x66b7ad37071c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc66b7ad37071c4; op2val:0xbfc66b7ad37071c4; 
   valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6b0bcb530144c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6b0bcb530144c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6b0bcb530144c; op2val:0xbfc6b0bcb530144c; 
   valaddr_reg:x3; val_offset:560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 560*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6b0bcb530144c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6b0bcb530144c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6b0bcb530144c; op2val:0xbfc6b0bcb530144c; 
   valaddr_reg:x3; val_offset:562*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 562*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6b0bcb530144c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6b0bcb530144c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6b0bcb530144c; op2val:0xbfc6b0bcb530144c; 
   valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6b0bcb530144c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6b0bcb530144c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6b0bcb530144c; op2val:0xbfc6b0bcb530144c; 
   valaddr_reg:x3; val_offset:566*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 566*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6b0bcb530144c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6b0bcb530144c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc6b0bcb530144c; op2val:0xbfc6b0bcb530144c; 
   valaddr_reg:x3; val_offset:568*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 568*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72ac9da25ac50 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x72ac9da25ac50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc72ac9da25ac50; op2val:0xbfc72ac9da25ac50; 
   valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72ac9da25ac50 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x72ac9da25ac50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc72ac9da25ac50; op2val:0xbfc72ac9da25ac50; 
   valaddr_reg:x3; val_offset:572*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 572*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72ac9da25ac50 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x72ac9da25ac50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc72ac9da25ac50; op2val:0xbfc72ac9da25ac50; 
   valaddr_reg:x3; val_offset:574*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 574*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72ac9da25ac50 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x72ac9da25ac50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc72ac9da25ac50; op2val:0xbfc72ac9da25ac50; 
   valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72ac9da25ac50 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x72ac9da25ac50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc72ac9da25ac50; op2val:0xbfc72ac9da25ac50; 
   valaddr_reg:x3; val_offset:578*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 578*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x79028df01427c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79028df01427c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc79028df01427c; op2val:0xbfc79028df01427c; 
   valaddr_reg:x3; val_offset:580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 580*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x79028df01427c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79028df01427c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc79028df01427c; op2val:0xbfc79028df01427c; 
   valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x79028df01427c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79028df01427c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc79028df01427c; op2val:0xbfc79028df01427c; 
   valaddr_reg:x3; val_offset:584*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 584*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x79028df01427c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79028df01427c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc79028df01427c; op2val:0xbfc79028df01427c; 
   valaddr_reg:x3; val_offset:586*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 586*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x79028df01427c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79028df01427c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc79028df01427c; op2val:0xbfc79028df01427c; 
   valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7bf8cc13e7714 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7bf8cc13e7714 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc7bf8cc13e7714; op2val:0xbfc7bf8cc13e7714; 
   valaddr_reg:x3; val_offset:590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 590*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7bf8cc13e7714 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7bf8cc13e7714 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc7bf8cc13e7714; op2val:0xbfc7bf8cc13e7714; 
   valaddr_reg:x3; val_offset:592*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 592*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7bf8cc13e7714 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7bf8cc13e7714 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc7bf8cc13e7714; op2val:0xbfc7bf8cc13e7714; 
   valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7bf8cc13e7714 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7bf8cc13e7714 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc7bf8cc13e7714; op2val:0xbfc7bf8cc13e7714; 
   valaddr_reg:x3; val_offset:596*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 596*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7bf8cc13e7714 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7bf8cc13e7714 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc7bf8cc13e7714; op2val:0xbfc7bf8cc13e7714; 
   valaddr_reg:x3; val_offset:598*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 598*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x81c8cec3b628c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x81c8cec3b628c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc81c8cec3b628c; op2val:0xbfc81c8cec3b628c; 
   valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x81c8cec3b628c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x81c8cec3b628c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc81c8cec3b628c; op2val:0xbfc81c8cec3b628c; 
   valaddr_reg:x3; val_offset:602*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 602*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x81c8cec3b628c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x81c8cec3b628c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc81c8cec3b628c; op2val:0xbfc81c8cec3b628c; 
   valaddr_reg:x3; val_offset:604*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 604*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x81c8cec3b628c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x81c8cec3b628c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc81c8cec3b628c; op2val:0xbfc81c8cec3b628c; 
   valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x81c8cec3b628c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x81c8cec3b628c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc81c8cec3b628c; op2val:0xbfc81c8cec3b628c; 
   valaddr_reg:x3; val_offset:608*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 608*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x849b33e0e1f14 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x849b33e0e1f14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc849b33e0e1f14; op2val:0xbfc849b33e0e1f14; 
   valaddr_reg:x3; val_offset:610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 610*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x849b33e0e1f14 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x849b33e0e1f14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc849b33e0e1f14; op2val:0xbfc849b33e0e1f14; 
   valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x849b33e0e1f14 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x849b33e0e1f14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc849b33e0e1f14; op2val:0xbfc849b33e0e1f14; 
   valaddr_reg:x3; val_offset:614*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 614*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x849b33e0e1f14 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x849b33e0e1f14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc849b33e0e1f14; op2val:0xbfc849b33e0e1f14; 
   valaddr_reg:x3; val_offset:616*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 616*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x849b33e0e1f14 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x849b33e0e1f14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc849b33e0e1f14; op2val:0xbfc849b33e0e1f14; 
   valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x84acd365e9bf0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x84acd365e9bf0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc84acd365e9bf0; op2val:0xbfc84acd365e9bf0; 
   valaddr_reg:x3; val_offset:620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 620*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x84acd365e9bf0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x84acd365e9bf0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc84acd365e9bf0; op2val:0xbfc84acd365e9bf0; 
   valaddr_reg:x3; val_offset:622*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 622*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x84acd365e9bf0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x84acd365e9bf0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc84acd365e9bf0; op2val:0xbfc84acd365e9bf0; 
   valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x84acd365e9bf0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x84acd365e9bf0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc84acd365e9bf0; op2val:0xbfc84acd365e9bf0; 
   valaddr_reg:x3; val_offset:626*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 626*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x84acd365e9bf0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x84acd365e9bf0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc84acd365e9bf0; op2val:0xbfc84acd365e9bf0; 
   valaddr_reg:x3; val_offset:628*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 628*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f227e7b6475c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f227e7b6475c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc8f227e7b6475c; op2val:0xbfc8f227e7b6475c; 
   valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f227e7b6475c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f227e7b6475c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc8f227e7b6475c; op2val:0xbfc8f227e7b6475c; 
   valaddr_reg:x3; val_offset:632*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 632*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f227e7b6475c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f227e7b6475c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc8f227e7b6475c; op2val:0xbfc8f227e7b6475c; 
   valaddr_reg:x3; val_offset:634*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 634*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f227e7b6475c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f227e7b6475c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc8f227e7b6475c; op2val:0xbfc8f227e7b6475c; 
   valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f227e7b6475c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f227e7b6475c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc8f227e7b6475c; op2val:0xbfc8f227e7b6475c; 
   valaddr_reg:x3; val_offset:638*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 638*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x909bd1c6f5700 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x909bd1c6f5700 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc909bd1c6f5700; op2val:0xbfc909bd1c6f5700; 
   valaddr_reg:x3; val_offset:640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 640*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x909bd1c6f5700 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x909bd1c6f5700 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc909bd1c6f5700; op2val:0xbfc909bd1c6f5700; 
   valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x909bd1c6f5700 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x909bd1c6f5700 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc909bd1c6f5700; op2val:0xbfc909bd1c6f5700; 
   valaddr_reg:x3; val_offset:644*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 644*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x909bd1c6f5700 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x909bd1c6f5700 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc909bd1c6f5700; op2val:0xbfc909bd1c6f5700; 
   valaddr_reg:x3; val_offset:646*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 646*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x909bd1c6f5700 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x909bd1c6f5700 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc909bd1c6f5700; op2val:0xbfc909bd1c6f5700; 
   valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9316a474fe9c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9316a474fe9c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9316a474fe9c4; op2val:0xbfc9316a474fe9c4; 
   valaddr_reg:x3; val_offset:650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 650*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9316a474fe9c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9316a474fe9c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9316a474fe9c4; op2val:0xbfc9316a474fe9c4; 
   valaddr_reg:x3; val_offset:652*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 652*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9316a474fe9c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9316a474fe9c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9316a474fe9c4; op2val:0xbfc9316a474fe9c4; 
   valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9316a474fe9c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9316a474fe9c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9316a474fe9c4; op2val:0xbfc9316a474fe9c4; 
   valaddr_reg:x3; val_offset:656*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 656*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9316a474fe9c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9316a474fe9c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9316a474fe9c4; op2val:0xbfc9316a474fe9c4; 
   valaddr_reg:x3; val_offset:658*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 658*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x98122bf05cbdc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x98122bf05cbdc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc98122bf05cbdc; op2val:0xbfc98122bf05cbdc; 
   valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x98122bf05cbdc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x98122bf05cbdc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc98122bf05cbdc; op2val:0xbfc98122bf05cbdc; 
   valaddr_reg:x3; val_offset:662*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 662*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x98122bf05cbdc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x98122bf05cbdc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc98122bf05cbdc; op2val:0xbfc98122bf05cbdc; 
   valaddr_reg:x3; val_offset:664*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 664*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x98122bf05cbdc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x98122bf05cbdc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc98122bf05cbdc; op2val:0xbfc98122bf05cbdc; 
   valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x98122bf05cbdc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x98122bf05cbdc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc98122bf05cbdc; op2val:0xbfc98122bf05cbdc; 
   valaddr_reg:x3; val_offset:668*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 668*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9af2feb4c94ac and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9af2feb4c94ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9af2feb4c94ac; op2val:0xbfc9af2feb4c94ac; 
   valaddr_reg:x3; val_offset:670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 670*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9af2feb4c94ac and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9af2feb4c94ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9af2feb4c94ac; op2val:0xbfc9af2feb4c94ac; 
   valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9af2feb4c94ac and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9af2feb4c94ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9af2feb4c94ac; op2val:0xbfc9af2feb4c94ac; 
   valaddr_reg:x3; val_offset:674*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 674*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9af2feb4c94ac and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9af2feb4c94ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9af2feb4c94ac; op2val:0xbfc9af2feb4c94ac; 
   valaddr_reg:x3; val_offset:676*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 676*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9af2feb4c94ac and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9af2feb4c94ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9af2feb4c94ac; op2val:0xbfc9af2feb4c94ac; 
   valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9d92fefac1b4c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9d92fefac1b4c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9d92fefac1b4c; op2val:0xbfc9d92fefac1b4c; 
   valaddr_reg:x3; val_offset:680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 680*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9d92fefac1b4c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9d92fefac1b4c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9d92fefac1b4c; op2val:0xbfc9d92fefac1b4c; 
   valaddr_reg:x3; val_offset:682*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 682*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9d92fefac1b4c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9d92fefac1b4c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9d92fefac1b4c; op2val:0xbfc9d92fefac1b4c; 
   valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9d92fefac1b4c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9d92fefac1b4c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9d92fefac1b4c; op2val:0xbfc9d92fefac1b4c; 
   valaddr_reg:x3; val_offset:686*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 686*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9d92fefac1b4c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9d92fefac1b4c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fc9d92fefac1b4c; op2val:0xbfc9d92fefac1b4c; 
   valaddr_reg:x3; val_offset:688*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 688*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa0bbaee431ca4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa0bbaee431ca4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca0bbaee431ca4; op2val:0xbfca0bbaee431ca4; 
   valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa0bbaee431ca4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa0bbaee431ca4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca0bbaee431ca4; op2val:0xbfca0bbaee431ca4; 
   valaddr_reg:x3; val_offset:692*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 692*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa0bbaee431ca4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa0bbaee431ca4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca0bbaee431ca4; op2val:0xbfca0bbaee431ca4; 
   valaddr_reg:x3; val_offset:694*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 694*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa0bbaee431ca4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa0bbaee431ca4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca0bbaee431ca4; op2val:0xbfca0bbaee431ca4; 
   valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa0bbaee431ca4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa0bbaee431ca4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca0bbaee431ca4; op2val:0xbfca0bbaee431ca4; 
   valaddr_reg:x3; val_offset:698*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 698*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa27e804c22884 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa27e804c22884 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca27e804c22884; op2val:0xbfca27e804c22884; 
   valaddr_reg:x3; val_offset:700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 700*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa27e804c22884 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa27e804c22884 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca27e804c22884; op2val:0xbfca27e804c22884; 
   valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa27e804c22884 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa27e804c22884 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca27e804c22884; op2val:0xbfca27e804c22884; 
   valaddr_reg:x3; val_offset:704*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 704*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa27e804c22884 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa27e804c22884 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca27e804c22884; op2val:0xbfca27e804c22884; 
   valaddr_reg:x3; val_offset:706*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 706*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa27e804c22884 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa27e804c22884 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca27e804c22884; op2val:0xbfca27e804c22884; 
   valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa4b1aed45b4e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa4b1aed45b4e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca4b1aed45b4e8; op2val:0xbfca4b1aed45b4e8; 
   valaddr_reg:x3; val_offset:710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 710*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa4b1aed45b4e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa4b1aed45b4e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca4b1aed45b4e8; op2val:0xbfca4b1aed45b4e8; 
   valaddr_reg:x3; val_offset:712*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 712*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa4b1aed45b4e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa4b1aed45b4e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca4b1aed45b4e8; op2val:0xbfca4b1aed45b4e8; 
   valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa4b1aed45b4e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa4b1aed45b4e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca4b1aed45b4e8; op2val:0xbfca4b1aed45b4e8; 
   valaddr_reg:x3; val_offset:716*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 716*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa4b1aed45b4e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa4b1aed45b4e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca4b1aed45b4e8; op2val:0xbfca4b1aed45b4e8; 
   valaddr_reg:x3; val_offset:718*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 718*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa7452da4838f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7452da4838f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca7452da4838f8; op2val:0xbfca7452da4838f8; 
   valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa7452da4838f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7452da4838f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca7452da4838f8; op2val:0xbfca7452da4838f8; 
   valaddr_reg:x3; val_offset:722*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 722*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa7452da4838f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7452da4838f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca7452da4838f8; op2val:0xbfca7452da4838f8; 
   valaddr_reg:x3; val_offset:724*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 724*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa7452da4838f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7452da4838f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca7452da4838f8; op2val:0xbfca7452da4838f8; 
   valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa7452da4838f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7452da4838f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca7452da4838f8; op2val:0xbfca7452da4838f8; 
   valaddr_reg:x3; val_offset:728*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 728*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa948d7e25c484 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa948d7e25c484 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca948d7e25c484; op2val:0xbfca948d7e25c484; 
   valaddr_reg:x3; val_offset:730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 730*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa948d7e25c484 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa948d7e25c484 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca948d7e25c484; op2val:0xbfca948d7e25c484; 
   valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa948d7e25c484 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa948d7e25c484 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca948d7e25c484; op2val:0xbfca948d7e25c484; 
   valaddr_reg:x3; val_offset:734*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 734*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa948d7e25c484 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa948d7e25c484 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca948d7e25c484; op2val:0xbfca948d7e25c484; 
   valaddr_reg:x3; val_offset:736*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 736*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa948d7e25c484 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa948d7e25c484 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fca948d7e25c484; op2val:0xbfca948d7e25c484; 
   valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabf31c071baf8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xabf31c071baf8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcabf31c071baf8; op2val:0xbfcabf31c071baf8; 
   valaddr_reg:x3; val_offset:740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 740*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabf31c071baf8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xabf31c071baf8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcabf31c071baf8; op2val:0xbfcabf31c071baf8; 
   valaddr_reg:x3; val_offset:742*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 742*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabf31c071baf8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xabf31c071baf8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcabf31c071baf8; op2val:0xbfcabf31c071baf8; 
   valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabf31c071baf8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xabf31c071baf8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcabf31c071baf8; op2val:0xbfcabf31c071baf8; 
   valaddr_reg:x3; val_offset:746*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 746*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabf31c071baf8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xabf31c071baf8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcabf31c071baf8; op2val:0xbfcabf31c071baf8; 
   valaddr_reg:x3; val_offset:748*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 748*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaefbd55e345e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaefbd55e345e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcaefbd55e345e8; op2val:0xbfcaefbd55e345e8; 
   valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaefbd55e345e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaefbd55e345e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcaefbd55e345e8; op2val:0xbfcaefbd55e345e8; 
   valaddr_reg:x3; val_offset:752*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 752*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaefbd55e345e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaefbd55e345e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcaefbd55e345e8; op2val:0xbfcaefbd55e345e8; 
   valaddr_reg:x3; val_offset:754*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 754*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaefbd55e345e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaefbd55e345e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcaefbd55e345e8; op2val:0xbfcaefbd55e345e8; 
   valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaefbd55e345e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaefbd55e345e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcaefbd55e345e8; op2val:0xbfcaefbd55e345e8; 
   valaddr_reg:x3; val_offset:758*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 758*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb7517701108e4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xb7517701108e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcb7517701108e4; op2val:0xbfcb7517701108e4; 
   valaddr_reg:x3; val_offset:760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 760*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb7517701108e4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xb7517701108e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcb7517701108e4; op2val:0xbfcb7517701108e4; 
   valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb7517701108e4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xb7517701108e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcb7517701108e4; op2val:0xbfcb7517701108e4; 
   valaddr_reg:x3; val_offset:764*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 764*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb7517701108e4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xb7517701108e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcb7517701108e4; op2val:0xbfcb7517701108e4; 
   valaddr_reg:x3; val_offset:766*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 766*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb7517701108e4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xb7517701108e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcb7517701108e4; op2val:0xbfcb7517701108e4; 
   valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbac7ce2b8ec2c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbac7ce2b8ec2c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcbac7ce2b8ec2c; op2val:0xbfcbac7ce2b8ec2c; 
   valaddr_reg:x3; val_offset:770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 770*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbac7ce2b8ec2c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbac7ce2b8ec2c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcbac7ce2b8ec2c; op2val:0xbfcbac7ce2b8ec2c; 
   valaddr_reg:x3; val_offset:772*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 772*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbac7ce2b8ec2c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbac7ce2b8ec2c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcbac7ce2b8ec2c; op2val:0xbfcbac7ce2b8ec2c; 
   valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbac7ce2b8ec2c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbac7ce2b8ec2c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcbac7ce2b8ec2c; op2val:0xbfcbac7ce2b8ec2c; 
   valaddr_reg:x3; val_offset:776*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 776*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbac7ce2b8ec2c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbac7ce2b8ec2c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcbac7ce2b8ec2c; op2val:0xbfcbac7ce2b8ec2c; 
   valaddr_reg:x3; val_offset:778*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 778*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe3af59ba428c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbe3af59ba428c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcbe3af59ba428c; op2val:0xbfcbe3af59ba428c; 
   valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe3af59ba428c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbe3af59ba428c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcbe3af59ba428c; op2val:0xbfcbe3af59ba428c; 
   valaddr_reg:x3; val_offset:782*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 782*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe3af59ba428c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbe3af59ba428c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcbe3af59ba428c; op2val:0xbfcbe3af59ba428c; 
   valaddr_reg:x3; val_offset:784*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 784*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe3af59ba428c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbe3af59ba428c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcbe3af59ba428c; op2val:0xbfcbe3af59ba428c; 
   valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe3af59ba428c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbe3af59ba428c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcbe3af59ba428c; op2val:0xbfcbe3af59ba428c; 
   valaddr_reg:x3; val_offset:788*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 788*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcf381fd806190 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcf381fd806190 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fccf381fd806190; op2val:0xbfccf381fd806190; 
   valaddr_reg:x3; val_offset:790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 790*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcf381fd806190 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcf381fd806190 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fccf381fd806190; op2val:0xbfccf381fd806190; 
   valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcf381fd806190 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcf381fd806190 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fccf381fd806190; op2val:0xbfccf381fd806190; 
   valaddr_reg:x3; val_offset:794*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 794*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcf381fd806190 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcf381fd806190 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fccf381fd806190; op2val:0xbfccf381fd806190; 
   valaddr_reg:x3; val_offset:796*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 796*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcf381fd806190 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcf381fd806190 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fccf381fd806190; op2val:0xbfccf381fd806190; 
   valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf06d5adea99c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf06d5adea99c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf06d5adea99c8; op2val:0xbfcf06d5adea99c8; 
   valaddr_reg:x3; val_offset:800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 800*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf06d5adea99c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf06d5adea99c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf06d5adea99c8; op2val:0xbfcf06d5adea99c8; 
   valaddr_reg:x3; val_offset:802*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 802*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf06d5adea99c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf06d5adea99c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf06d5adea99c8; op2val:0xbfcf06d5adea99c8; 
   valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf06d5adea99c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf06d5adea99c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf06d5adea99c8; op2val:0xbfcf06d5adea99c8; 
   valaddr_reg:x3; val_offset:806*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 806*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf06d5adea99c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf06d5adea99c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf06d5adea99c8; op2val:0xbfcf06d5adea99c8; 
   valaddr_reg:x3; val_offset:808*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 808*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf27331cf3cdd0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf27331cf3cdd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf27331cf3cdd0; op2val:0xbfcf27331cf3cdd0; 
   valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf27331cf3cdd0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf27331cf3cdd0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf27331cf3cdd0; op2val:0xbfcf27331cf3cdd0; 
   valaddr_reg:x3; val_offset:812*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 812*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf27331cf3cdd0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf27331cf3cdd0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf27331cf3cdd0; op2val:0xbfcf27331cf3cdd0; 
   valaddr_reg:x3; val_offset:814*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 814*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf27331cf3cdd0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf27331cf3cdd0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf27331cf3cdd0; op2val:0xbfcf27331cf3cdd0; 
   valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf27331cf3cdd0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf27331cf3cdd0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf27331cf3cdd0; op2val:0xbfcf27331cf3cdd0; 
   valaddr_reg:x3; val_offset:818*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 818*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf4c466fffb77c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf4c466fffb77c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf4c466fffb77c; op2val:0xbfcf4c466fffb77c; 
   valaddr_reg:x3; val_offset:820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 820*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf4c466fffb77c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf4c466fffb77c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf4c466fffb77c; op2val:0xbfcf4c466fffb77c; 
   valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf4c466fffb77c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf4c466fffb77c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf4c466fffb77c; op2val:0xbfcf4c466fffb77c; 
   valaddr_reg:x3; val_offset:824*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 824*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf4c466fffb77c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf4c466fffb77c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf4c466fffb77c; op2val:0xbfcf4c466fffb77c; 
   valaddr_reg:x3; val_offset:826*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 826*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf4c466fffb77c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf4c466fffb77c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fcf4c466fffb77c; op2val:0xbfcf4c466fffb77c; 
   valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x002230e3b4592 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x002230e3b4592 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd002230e3b4592; op2val:0xbfd002230e3b4592; 
   valaddr_reg:x3; val_offset:830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 830*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x002230e3b4592 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x002230e3b4592 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd002230e3b4592; op2val:0xbfd002230e3b4592; 
   valaddr_reg:x3; val_offset:832*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 832*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x002230e3b4592 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x002230e3b4592 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd002230e3b4592; op2val:0xbfd002230e3b4592; 
   valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x002230e3b4592 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x002230e3b4592 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd002230e3b4592; op2val:0xbfd002230e3b4592; 
   valaddr_reg:x3; val_offset:836*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 836*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x002230e3b4592 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x002230e3b4592 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd002230e3b4592; op2val:0xbfd002230e3b4592; 
   valaddr_reg:x3; val_offset:838*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 838*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x00e2cd04f74da and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x00e2cd04f74da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd00e2cd04f74da; op2val:0xbfd00e2cd04f74da; 
   valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x00e2cd04f74da and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x00e2cd04f74da and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd00e2cd04f74da; op2val:0xbfd00e2cd04f74da; 
   valaddr_reg:x3; val_offset:842*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 842*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x00e2cd04f74da and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x00e2cd04f74da and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd00e2cd04f74da; op2val:0xbfd00e2cd04f74da; 
   valaddr_reg:x3; val_offset:844*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 844*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x00e2cd04f74da and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x00e2cd04f74da and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd00e2cd04f74da; op2val:0xbfd00e2cd04f74da; 
   valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x00e2cd04f74da and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x00e2cd04f74da and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd00e2cd04f74da; op2val:0xbfd00e2cd04f74da; 
   valaddr_reg:x3; val_offset:848*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 848*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x08a0b9f5e0e90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08a0b9f5e0e90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd08a0b9f5e0e90; op2val:0xbfd08a0b9f5e0e90; 
   valaddr_reg:x3; val_offset:850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 850*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x08a0b9f5e0e90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08a0b9f5e0e90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd08a0b9f5e0e90; op2val:0xbfd08a0b9f5e0e90; 
   valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x08a0b9f5e0e90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08a0b9f5e0e90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd08a0b9f5e0e90; op2val:0xbfd08a0b9f5e0e90; 
   valaddr_reg:x3; val_offset:854*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 854*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x08a0b9f5e0e90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08a0b9f5e0e90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd08a0b9f5e0e90; op2val:0xbfd08a0b9f5e0e90; 
   valaddr_reg:x3; val_offset:856*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 856*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x08a0b9f5e0e90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08a0b9f5e0e90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd08a0b9f5e0e90; op2val:0xbfd08a0b9f5e0e90; 
   valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12d7e4c3cff50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x12d7e4c3cff50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd12d7e4c3cff50; op2val:0xbfd12d7e4c3cff50; 
   valaddr_reg:x3; val_offset:860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 860*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12d7e4c3cff50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x12d7e4c3cff50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd12d7e4c3cff50; op2val:0xbfd12d7e4c3cff50; 
   valaddr_reg:x3; val_offset:862*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 862*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12d7e4c3cff50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x12d7e4c3cff50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd12d7e4c3cff50; op2val:0xbfd12d7e4c3cff50; 
   valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12d7e4c3cff50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x12d7e4c3cff50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd12d7e4c3cff50; op2val:0xbfd12d7e4c3cff50; 
   valaddr_reg:x3; val_offset:866*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 866*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12d7e4c3cff50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x12d7e4c3cff50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd12d7e4c3cff50; op2val:0xbfd12d7e4c3cff50; 
   valaddr_reg:x3; val_offset:868*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 868*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1657d98ca36fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1657d98ca36fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1657d98ca36fa; op2val:0xbfd1657d98ca36fa; 
   valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1657d98ca36fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1657d98ca36fa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1657d98ca36fa; op2val:0xbfd1657d98ca36fa; 
   valaddr_reg:x3; val_offset:872*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 872*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1657d98ca36fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1657d98ca36fa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1657d98ca36fa; op2val:0xbfd1657d98ca36fa; 
   valaddr_reg:x3; val_offset:874*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 874*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1657d98ca36fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1657d98ca36fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1657d98ca36fa; op2val:0xbfd1657d98ca36fa; 
   valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1657d98ca36fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1657d98ca36fa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1657d98ca36fa; op2val:0xbfd1657d98ca36fa; 
   valaddr_reg:x3; val_offset:878*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 878*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1908476f4b104 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1908476f4b104 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1908476f4b104; op2val:0xbfd1908476f4b104; 
   valaddr_reg:x3; val_offset:880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 880*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1908476f4b104 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1908476f4b104 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1908476f4b104; op2val:0xbfd1908476f4b104; 
   valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1908476f4b104 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1908476f4b104 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1908476f4b104; op2val:0xbfd1908476f4b104; 
   valaddr_reg:x3; val_offset:884*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 884*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1908476f4b104 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1908476f4b104 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1908476f4b104; op2val:0xbfd1908476f4b104; 
   valaddr_reg:x3; val_offset:886*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 886*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1908476f4b104 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1908476f4b104 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1908476f4b104; op2val:0xbfd1908476f4b104; 
   valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c1dbf5fab43c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1c1dbf5fab43c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1c1dbf5fab43c; op2val:0xbfd1c1dbf5fab43c; 
   valaddr_reg:x3; val_offset:890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 890*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c1dbf5fab43c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1c1dbf5fab43c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1c1dbf5fab43c; op2val:0xbfd1c1dbf5fab43c; 
   valaddr_reg:x3; val_offset:892*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 892*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c1dbf5fab43c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1c1dbf5fab43c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1c1dbf5fab43c; op2val:0xbfd1c1dbf5fab43c; 
   valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c1dbf5fab43c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1c1dbf5fab43c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1c1dbf5fab43c; op2val:0xbfd1c1dbf5fab43c; 
   valaddr_reg:x3; val_offset:896*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 896*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c1dbf5fab43c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1c1dbf5fab43c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1c1dbf5fab43c; op2val:0xbfd1c1dbf5fab43c; 
   valaddr_reg:x3; val_offset:898*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 898*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f05bc1477e42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1f05bc1477e42 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1f05bc1477e42; op2val:0xbfd1f05bc1477e42; 
   valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f05bc1477e42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1f05bc1477e42 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1f05bc1477e42; op2val:0xbfd1f05bc1477e42; 
   valaddr_reg:x3; val_offset:902*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 902*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f05bc1477e42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1f05bc1477e42 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1f05bc1477e42; op2val:0xbfd1f05bc1477e42; 
   valaddr_reg:x3; val_offset:904*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 904*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f05bc1477e42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1f05bc1477e42 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1f05bc1477e42; op2val:0xbfd1f05bc1477e42; 
   valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f05bc1477e42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1f05bc1477e42 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd1f05bc1477e42; op2val:0xbfd1f05bc1477e42; 
   valaddr_reg:x3; val_offset:908*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 908*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2041aff401648 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2041aff401648 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2041aff401648; op2val:0xbfd2041aff401648; 
   valaddr_reg:x3; val_offset:910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 910*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2041aff401648 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2041aff401648 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2041aff401648; op2val:0xbfd2041aff401648; 
   valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2041aff401648 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2041aff401648 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2041aff401648; op2val:0xbfd2041aff401648; 
   valaddr_reg:x3; val_offset:914*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 914*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2041aff401648 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2041aff401648 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2041aff401648; op2val:0xbfd2041aff401648; 
   valaddr_reg:x3; val_offset:916*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 916*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2041aff401648 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2041aff401648 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2041aff401648; op2val:0xbfd2041aff401648; 
   valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20a218a595902 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20a218a595902 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd20a218a595902; op2val:0xbfd20a218a595902; 
   valaddr_reg:x3; val_offset:920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 920*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20a218a595902 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20a218a595902 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd20a218a595902; op2val:0xbfd20a218a595902; 
   valaddr_reg:x3; val_offset:922*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 922*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20a218a595902 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20a218a595902 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd20a218a595902; op2val:0xbfd20a218a595902; 
   valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20a218a595902 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20a218a595902 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd20a218a595902; op2val:0xbfd20a218a595902; 
   valaddr_reg:x3; val_offset:926*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 926*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20a218a595902 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20a218a595902 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd20a218a595902; op2val:0xbfd20a218a595902; 
   valaddr_reg:x3; val_offset:928*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 928*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2175c79f643a2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2175c79f643a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2175c79f643a2; op2val:0xbfd2175c79f643a2; 
   valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2175c79f643a2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2175c79f643a2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2175c79f643a2; op2val:0xbfd2175c79f643a2; 
   valaddr_reg:x3; val_offset:932*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 932*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2175c79f643a2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2175c79f643a2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2175c79f643a2; op2val:0xbfd2175c79f643a2; 
   valaddr_reg:x3; val_offset:934*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 934*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2175c79f643a2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2175c79f643a2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2175c79f643a2; op2val:0xbfd2175c79f643a2; 
   valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2175c79f643a2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2175c79f643a2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2175c79f643a2; op2val:0xbfd2175c79f643a2; 
   valaddr_reg:x3; val_offset:938*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 938*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x219945f58d7ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x219945f58d7ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd219945f58d7ce; op2val:0xbfd219945f58d7ce; 
   valaddr_reg:x3; val_offset:940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 940*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x219945f58d7ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x219945f58d7ce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd219945f58d7ce; op2val:0xbfd219945f58d7ce; 
   valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x219945f58d7ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x219945f58d7ce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd219945f58d7ce; op2val:0xbfd219945f58d7ce; 
   valaddr_reg:x3; val_offset:944*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 944*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x219945f58d7ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x219945f58d7ce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd219945f58d7ce; op2val:0xbfd219945f58d7ce; 
   valaddr_reg:x3; val_offset:946*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 946*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x219945f58d7ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x219945f58d7ce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd219945f58d7ce; op2val:0xbfd219945f58d7ce; 
   valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2334ae58482b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2334ae58482b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2334ae58482b4; op2val:0xbfd2334ae58482b4; 
   valaddr_reg:x3; val_offset:950*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 950*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2334ae58482b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2334ae58482b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2334ae58482b4; op2val:0xbfd2334ae58482b4; 
   valaddr_reg:x3; val_offset:952*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 952*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2334ae58482b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2334ae58482b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2334ae58482b4; op2val:0xbfd2334ae58482b4; 
   valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2334ae58482b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2334ae58482b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2334ae58482b4; op2val:0xbfd2334ae58482b4; 
   valaddr_reg:x3; val_offset:956*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 956*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2334ae58482b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2334ae58482b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2334ae58482b4; op2val:0xbfd2334ae58482b4; 
   valaddr_reg:x3; val_offset:958*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 958*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c7b2a700633e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c7b2a700633e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2c7b2a700633e; op2val:0xbfd2c7b2a700633e; 
   valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c7b2a700633e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c7b2a700633e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2c7b2a700633e; op2val:0xbfd2c7b2a700633e; 
   valaddr_reg:x3; val_offset:962*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 962*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c7b2a700633e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c7b2a700633e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2c7b2a700633e; op2val:0xbfd2c7b2a700633e; 
   valaddr_reg:x3; val_offset:964*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 964*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c7b2a700633e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c7b2a700633e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2c7b2a700633e; op2val:0xbfd2c7b2a700633e; 
   valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c7b2a700633e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c7b2a700633e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2c7b2a700633e; op2val:0xbfd2c7b2a700633e; 
   valaddr_reg:x3; val_offset:968*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 968*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dca303cdac2e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2dca303cdac2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2dca303cdac2e; op2val:0xbfd2dca303cdac2e; 
   valaddr_reg:x3; val_offset:970*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 970*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dca303cdac2e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2dca303cdac2e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2dca303cdac2e; op2val:0xbfd2dca303cdac2e; 
   valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dca303cdac2e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2dca303cdac2e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2dca303cdac2e; op2val:0xbfd2dca303cdac2e; 
   valaddr_reg:x3; val_offset:974*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 974*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dca303cdac2e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2dca303cdac2e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2dca303cdac2e; op2val:0xbfd2dca303cdac2e; 
   valaddr_reg:x3; val_offset:976*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 976*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dca303cdac2e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2dca303cdac2e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd2dca303cdac2e; op2val:0xbfd2dca303cdac2e; 
   valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3125d2fc76fb8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3125d2fc76fb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3125d2fc76fb8; op2val:0xbfd3125d2fc76fb8; 
   valaddr_reg:x3; val_offset:980*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 980*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3125d2fc76fb8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3125d2fc76fb8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3125d2fc76fb8; op2val:0xbfd3125d2fc76fb8; 
   valaddr_reg:x3; val_offset:982*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 982*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3125d2fc76fb8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3125d2fc76fb8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3125d2fc76fb8; op2val:0xbfd3125d2fc76fb8; 
   valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3125d2fc76fb8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3125d2fc76fb8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3125d2fc76fb8; op2val:0xbfd3125d2fc76fb8; 
   valaddr_reg:x3; val_offset:986*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 986*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3125d2fc76fb8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3125d2fc76fb8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd3125d2fc76fb8; op2val:0xbfd3125d2fc76fb8; 
   valaddr_reg:x3; val_offset:988*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 988*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x315393375d110 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x315393375d110 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd315393375d110; op2val:0xbfd315393375d110; 
   valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x315393375d110 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x315393375d110 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd315393375d110; op2val:0xbfd315393375d110; 
   valaddr_reg:x3; val_offset:992*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 992*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x315393375d110 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x315393375d110 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd315393375d110; op2val:0xbfd315393375d110; 
   valaddr_reg:x3; val_offset:994*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 994*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x315393375d110 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x315393375d110 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd315393375d110; op2val:0xbfd315393375d110; 
   valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x315393375d110 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x315393375d110 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd315393375d110; op2val:0xbfd315393375d110; 
   valaddr_reg:x3; val_offset:998*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 998*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x339d4ac04a3c4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x339d4ac04a3c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd339d4ac04a3c4; op2val:0xbfd339d4ac04a3c4; 
   valaddr_reg:x3; val_offset:1000*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1000*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x339d4ac04a3c4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x339d4ac04a3c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd339d4ac04a3c4; op2val:0xbfd339d4ac04a3c4; 
   valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x339d4ac04a3c4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x339d4ac04a3c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd339d4ac04a3c4; op2val:0xbfd339d4ac04a3c4; 
   valaddr_reg:x3; val_offset:1004*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1004*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x339d4ac04a3c4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x339d4ac04a3c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd339d4ac04a3c4; op2val:0xbfd339d4ac04a3c4; 
   valaddr_reg:x3; val_offset:1006*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1006*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x339d4ac04a3c4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x339d4ac04a3c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd339d4ac04a3c4; op2val:0xbfd339d4ac04a3c4; 
   valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x343b84468445c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x343b84468445c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd343b84468445c; op2val:0xbfd343b84468445c; 
   valaddr_reg:x3; val_offset:1010*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1010*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x343b84468445c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x343b84468445c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd343b84468445c; op2val:0xbfd343b84468445c; 
   valaddr_reg:x3; val_offset:1012*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1012*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x343b84468445c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x343b84468445c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd343b84468445c; op2val:0xbfd343b84468445c; 
   valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x343b84468445c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x343b84468445c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd343b84468445c; op2val:0xbfd343b84468445c; 
   valaddr_reg:x3; val_offset:1016*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1016*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x343b84468445c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x343b84468445c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd343b84468445c; op2val:0xbfd343b84468445c; 
   valaddr_reg:x3; val_offset:1018*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1018*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34bbc73cf7054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x34bbc73cf7054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd34bbc73cf7054; op2val:0xbfd34bbc73cf7054; 
   valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34bbc73cf7054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x34bbc73cf7054 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd34bbc73cf7054; op2val:0xbfd34bbc73cf7054; 
   valaddr_reg:x3; val_offset:1022*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1022*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34bbc73cf7054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x34bbc73cf7054 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd34bbc73cf7054; op2val:0xbfd34bbc73cf7054; 
   valaddr_reg:x3; val_offset:1024*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1024*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34bbc73cf7054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x34bbc73cf7054 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd34bbc73cf7054; op2val:0xbfd34bbc73cf7054; 
   valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34bbc73cf7054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x34bbc73cf7054 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd34bbc73cf7054; op2val:0xbfd34bbc73cf7054; 
   valaddr_reg:x3; val_offset:1028*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1028*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x411b9cca9f1ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x411b9cca9f1ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd411b9cca9f1ae; op2val:0xbfd411b9cca9f1ae; 
   valaddr_reg:x3; val_offset:1030*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1030*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x411b9cca9f1ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x411b9cca9f1ae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd411b9cca9f1ae; op2val:0xbfd411b9cca9f1ae; 
   valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x411b9cca9f1ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x411b9cca9f1ae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd411b9cca9f1ae; op2val:0xbfd411b9cca9f1ae; 
   valaddr_reg:x3; val_offset:1034*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1034*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x411b9cca9f1ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x411b9cca9f1ae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd411b9cca9f1ae; op2val:0xbfd411b9cca9f1ae; 
   valaddr_reg:x3; val_offset:1036*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1036*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x411b9cca9f1ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x411b9cca9f1ae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd411b9cca9f1ae; op2val:0xbfd411b9cca9f1ae; 
   valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x46a8c85ec3276 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x46a8c85ec3276 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd46a8c85ec3276; op2val:0xbfd46a8c85ec3276; 
   valaddr_reg:x3; val_offset:1040*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1040*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x46a8c85ec3276 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x46a8c85ec3276 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd46a8c85ec3276; op2val:0xbfd46a8c85ec3276; 
   valaddr_reg:x3; val_offset:1042*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1042*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x46a8c85ec3276 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x46a8c85ec3276 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd46a8c85ec3276; op2val:0xbfd46a8c85ec3276; 
   valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x46a8c85ec3276 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x46a8c85ec3276 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd46a8c85ec3276; op2val:0xbfd46a8c85ec3276; 
   valaddr_reg:x3; val_offset:1046*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1046*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x46a8c85ec3276 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x46a8c85ec3276 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd46a8c85ec3276; op2val:0xbfd46a8c85ec3276; 
   valaddr_reg:x3; val_offset:1048*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1048*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4713a47687452 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4713a47687452 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4713a47687452; op2val:0xbfd4713a47687452; 
   valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4713a47687452 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4713a47687452 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4713a47687452; op2val:0xbfd4713a47687452; 
   valaddr_reg:x3; val_offset:1052*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1052*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4713a47687452 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4713a47687452 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4713a47687452; op2val:0xbfd4713a47687452; 
   valaddr_reg:x3; val_offset:1054*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1054*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4713a47687452 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4713a47687452 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4713a47687452; op2val:0xbfd4713a47687452; 
   valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4713a47687452 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4713a47687452 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4713a47687452; op2val:0xbfd4713a47687452; 
   valaddr_reg:x3; val_offset:1058*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1058*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4864e86431094 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4864e86431094 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4864e86431094; op2val:0xbfd4864e86431094; 
   valaddr_reg:x3; val_offset:1060*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1060*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4864e86431094 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4864e86431094 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4864e86431094; op2val:0xbfd4864e86431094; 
   valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4864e86431094 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4864e86431094 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4864e86431094; op2val:0xbfd4864e86431094; 
   valaddr_reg:x3; val_offset:1064*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1064*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4864e86431094 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4864e86431094 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4864e86431094; op2val:0xbfd4864e86431094; 
   valaddr_reg:x3; val_offset:1066*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1066*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4864e86431094 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4864e86431094 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4864e86431094; op2val:0xbfd4864e86431094; 
   valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4f374fe5f6820 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f374fe5f6820 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4f374fe5f6820; op2val:0xbfd4f374fe5f6820; 
   valaddr_reg:x3; val_offset:1070*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1070*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4f374fe5f6820 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f374fe5f6820 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4f374fe5f6820; op2val:0xbfd4f374fe5f6820; 
   valaddr_reg:x3; val_offset:1072*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1072*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4f374fe5f6820 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f374fe5f6820 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4f374fe5f6820; op2val:0xbfd4f374fe5f6820; 
   valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4f374fe5f6820 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f374fe5f6820 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4f374fe5f6820; op2val:0xbfd4f374fe5f6820; 
   valaddr_reg:x3; val_offset:1076*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1076*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4f374fe5f6820 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f374fe5f6820 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd4f374fe5f6820; op2val:0xbfd4f374fe5f6820; 
   valaddr_reg:x3; val_offset:1078*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1078*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51d9a79009dd0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x51d9a79009dd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd51d9a79009dd0; op2val:0xbfd51d9a79009dd0; 
   valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51d9a79009dd0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x51d9a79009dd0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd51d9a79009dd0; op2val:0xbfd51d9a79009dd0; 
   valaddr_reg:x3; val_offset:1082*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1082*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51d9a79009dd0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x51d9a79009dd0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd51d9a79009dd0; op2val:0xbfd51d9a79009dd0; 
   valaddr_reg:x3; val_offset:1084*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1084*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51d9a79009dd0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x51d9a79009dd0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd51d9a79009dd0; op2val:0xbfd51d9a79009dd0; 
   valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51d9a79009dd0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x51d9a79009dd0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd51d9a79009dd0; op2val:0xbfd51d9a79009dd0; 
   valaddr_reg:x3; val_offset:1088*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1088*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x59e952253f4a6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59e952253f4a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd59e952253f4a6; op2val:0xbfd59e952253f4a6; 
   valaddr_reg:x3; val_offset:1090*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1090*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x59e952253f4a6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59e952253f4a6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd59e952253f4a6; op2val:0xbfd59e952253f4a6; 
   valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x59e952253f4a6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59e952253f4a6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd59e952253f4a6; op2val:0xbfd59e952253f4a6; 
   valaddr_reg:x3; val_offset:1094*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1094*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x59e952253f4a6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59e952253f4a6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd59e952253f4a6; op2val:0xbfd59e952253f4a6; 
   valaddr_reg:x3; val_offset:1096*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1096*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x59e952253f4a6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59e952253f4a6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd59e952253f4a6; op2val:0xbfd59e952253f4a6; 
   valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60e8d1c0b4b1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x60e8d1c0b4b1a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd60e8d1c0b4b1a; op2val:0xbfd60e8d1c0b4b1a; 
   valaddr_reg:x3; val_offset:1100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1100*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60e8d1c0b4b1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x60e8d1c0b4b1a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd60e8d1c0b4b1a; op2val:0xbfd60e8d1c0b4b1a; 
   valaddr_reg:x3; val_offset:1102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1102*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60e8d1c0b4b1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x60e8d1c0b4b1a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd60e8d1c0b4b1a; op2val:0xbfd60e8d1c0b4b1a; 
   valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60e8d1c0b4b1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x60e8d1c0b4b1a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd60e8d1c0b4b1a; op2val:0xbfd60e8d1c0b4b1a; 
   valaddr_reg:x3; val_offset:1106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1106*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60e8d1c0b4b1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x60e8d1c0b4b1a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd60e8d1c0b4b1a; op2val:0xbfd60e8d1c0b4b1a; 
   valaddr_reg:x3; val_offset:1108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1108*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6599142d7295a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6599142d7295a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6599142d7295a; op2val:0xbfd6599142d7295a; 
   valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6599142d7295a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6599142d7295a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6599142d7295a; op2val:0xbfd6599142d7295a; 
   valaddr_reg:x3; val_offset:1112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1112*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6599142d7295a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6599142d7295a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6599142d7295a; op2val:0xbfd6599142d7295a; 
   valaddr_reg:x3; val_offset:1114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1114*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6599142d7295a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6599142d7295a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6599142d7295a; op2val:0xbfd6599142d7295a; 
   valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6599142d7295a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6599142d7295a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6599142d7295a; op2val:0xbfd6599142d7295a; 
   valaddr_reg:x3; val_offset:1118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1118*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6726f6e697040 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6726f6e697040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6726f6e697040; op2val:0xbfd6726f6e697040; 
   valaddr_reg:x3; val_offset:1120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1120*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6726f6e697040 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6726f6e697040 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6726f6e697040; op2val:0xbfd6726f6e697040; 
   valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6726f6e697040 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6726f6e697040 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6726f6e697040; op2val:0xbfd6726f6e697040; 
   valaddr_reg:x3; val_offset:1124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1124*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6726f6e697040 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6726f6e697040 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6726f6e697040; op2val:0xbfd6726f6e697040; 
   valaddr_reg:x3; val_offset:1126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1126*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6726f6e697040 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6726f6e697040 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd6726f6e697040; op2val:0xbfd6726f6e697040; 
   valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x734d9246a3808 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x734d9246a3808 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd734d9246a3808; op2val:0xbfd734d9246a3808; 
   valaddr_reg:x3; val_offset:1130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1130*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x734d9246a3808 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x734d9246a3808 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd734d9246a3808; op2val:0xbfd734d9246a3808; 
   valaddr_reg:x3; val_offset:1132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1132*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x734d9246a3808 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x734d9246a3808 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd734d9246a3808; op2val:0xbfd734d9246a3808; 
   valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x734d9246a3808 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x734d9246a3808 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd734d9246a3808; op2val:0xbfd734d9246a3808; 
   valaddr_reg:x3; val_offset:1136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1136*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x734d9246a3808 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x734d9246a3808 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd734d9246a3808; op2val:0xbfd734d9246a3808; 
   valaddr_reg:x3; val_offset:1138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1138*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7366b474ed968 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7366b474ed968 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7366b474ed968; op2val:0xbfd7366b474ed968; 
   valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7366b474ed968 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7366b474ed968 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7366b474ed968; op2val:0xbfd7366b474ed968; 
   valaddr_reg:x3; val_offset:1142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1142*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7366b474ed968 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7366b474ed968 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7366b474ed968; op2val:0xbfd7366b474ed968; 
   valaddr_reg:x3; val_offset:1144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1144*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7366b474ed968 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7366b474ed968 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7366b474ed968; op2val:0xbfd7366b474ed968; 
   valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7366b474ed968 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7366b474ed968 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7366b474ed968; op2val:0xbfd7366b474ed968; 
   valaddr_reg:x3; val_offset:1148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1148*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73bf2cd29da4a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73bf2cd29da4a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd73bf2cd29da4a; op2val:0xbfd73bf2cd29da4a; 
   valaddr_reg:x3; val_offset:1150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1150*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73bf2cd29da4a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73bf2cd29da4a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd73bf2cd29da4a; op2val:0xbfd73bf2cd29da4a; 
   valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73bf2cd29da4a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73bf2cd29da4a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd73bf2cd29da4a; op2val:0xbfd73bf2cd29da4a; 
   valaddr_reg:x3; val_offset:1154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1154*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73bf2cd29da4a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73bf2cd29da4a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd73bf2cd29da4a; op2val:0xbfd73bf2cd29da4a; 
   valaddr_reg:x3; val_offset:1156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1156*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73bf2cd29da4a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73bf2cd29da4a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd73bf2cd29da4a; op2val:0xbfd73bf2cd29da4a; 
   valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74d2835625624 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x74d2835625624 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd74d2835625624; op2val:0xbfd74d2835625624; 
   valaddr_reg:x3; val_offset:1160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1160*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74d2835625624 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x74d2835625624 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd74d2835625624; op2val:0xbfd74d2835625624; 
   valaddr_reg:x3; val_offset:1162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1162*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74d2835625624 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x74d2835625624 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd74d2835625624; op2val:0xbfd74d2835625624; 
   valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74d2835625624 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x74d2835625624 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd74d2835625624; op2val:0xbfd74d2835625624; 
   valaddr_reg:x3; val_offset:1166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1166*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74d2835625624 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x74d2835625624 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd74d2835625624; op2val:0xbfd74d2835625624; 
   valaddr_reg:x3; val_offset:1168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1168*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75c29567de8e8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x75c29567de8e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd75c29567de8e8; op2val:0xbfd75c29567de8e8; 
   valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75c29567de8e8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x75c29567de8e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd75c29567de8e8; op2val:0xbfd75c29567de8e8; 
   valaddr_reg:x3; val_offset:1172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1172*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75c29567de8e8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x75c29567de8e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd75c29567de8e8; op2val:0xbfd75c29567de8e8; 
   valaddr_reg:x3; val_offset:1174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1174*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75c29567de8e8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x75c29567de8e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd75c29567de8e8; op2val:0xbfd75c29567de8e8; 
   valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75c29567de8e8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x75c29567de8e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd75c29567de8e8; op2val:0xbfd75c29567de8e8; 
   valaddr_reg:x3; val_offset:1178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1178*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x770acd92b7858 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x770acd92b7858 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd770acd92b7858; op2val:0xbfd770acd92b7858; 
   valaddr_reg:x3; val_offset:1180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1180*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x770acd92b7858 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x770acd92b7858 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd770acd92b7858; op2val:0xbfd770acd92b7858; 
   valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x770acd92b7858 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x770acd92b7858 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd770acd92b7858; op2val:0xbfd770acd92b7858; 
   valaddr_reg:x3; val_offset:1184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1184*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x770acd92b7858 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x770acd92b7858 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd770acd92b7858; op2val:0xbfd770acd92b7858; 
   valaddr_reg:x3; val_offset:1186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1186*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x770acd92b7858 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x770acd92b7858 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd770acd92b7858; op2val:0xbfd770acd92b7858; 
   valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x77b79482be294 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x77b79482be294 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd77b79482be294; op2val:0xbfd77b79482be294; 
   valaddr_reg:x3; val_offset:1190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1190*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x77b79482be294 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x77b79482be294 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd77b79482be294; op2val:0xbfd77b79482be294; 
   valaddr_reg:x3; val_offset:1192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1192*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x77b79482be294 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x77b79482be294 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd77b79482be294; op2val:0xbfd77b79482be294; 
   valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x77b79482be294 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x77b79482be294 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd77b79482be294; op2val:0xbfd77b79482be294; 
   valaddr_reg:x3; val_offset:1196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1196*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x77b79482be294 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x77b79482be294 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd77b79482be294; op2val:0xbfd77b79482be294; 
   valaddr_reg:x3; val_offset:1198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1198*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x788309087574e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x788309087574e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd788309087574e; op2val:0xbfd788309087574e; 
   valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x788309087574e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x788309087574e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd788309087574e; op2val:0xbfd788309087574e; 
   valaddr_reg:x3; val_offset:1202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1202*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x788309087574e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x788309087574e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd788309087574e; op2val:0xbfd788309087574e; 
   valaddr_reg:x3; val_offset:1204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1204*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x788309087574e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x788309087574e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd788309087574e; op2val:0xbfd788309087574e; 
   valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x788309087574e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x788309087574e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd788309087574e; op2val:0xbfd788309087574e; 
   valaddr_reg:x3; val_offset:1208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1208*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7abaa7d515db8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7abaa7d515db8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7abaa7d515db8; op2val:0xbfd7abaa7d515db8; 
   valaddr_reg:x3; val_offset:1210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1210*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7abaa7d515db8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7abaa7d515db8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7abaa7d515db8; op2val:0xbfd7abaa7d515db8; 
   valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7abaa7d515db8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7abaa7d515db8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7abaa7d515db8; op2val:0xbfd7abaa7d515db8; 
   valaddr_reg:x3; val_offset:1214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1214*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7abaa7d515db8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7abaa7d515db8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7abaa7d515db8; op2val:0xbfd7abaa7d515db8; 
   valaddr_reg:x3; val_offset:1216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1216*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7abaa7d515db8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7abaa7d515db8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7abaa7d515db8; op2val:0xbfd7abaa7d515db8; 
   valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7aea1dd68a12a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7aea1dd68a12a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7aea1dd68a12a; op2val:0xbfd7aea1dd68a12a; 
   valaddr_reg:x3; val_offset:1220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1220*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7aea1dd68a12a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7aea1dd68a12a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7aea1dd68a12a; op2val:0xbfd7aea1dd68a12a; 
   valaddr_reg:x3; val_offset:1222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1222*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7aea1dd68a12a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7aea1dd68a12a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7aea1dd68a12a; op2val:0xbfd7aea1dd68a12a; 
   valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7aea1dd68a12a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7aea1dd68a12a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7aea1dd68a12a; op2val:0xbfd7aea1dd68a12a; 
   valaddr_reg:x3; val_offset:1226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1226*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7aea1dd68a12a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7aea1dd68a12a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7aea1dd68a12a; op2val:0xbfd7aea1dd68a12a; 
   valaddr_reg:x3; val_offset:1228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1228*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7e375537bee0a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7e375537bee0a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7e375537bee0a; op2val:0xbfd7e375537bee0a; 
   valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7e375537bee0a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7e375537bee0a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7e375537bee0a; op2val:0xbfd7e375537bee0a; 
   valaddr_reg:x3; val_offset:1232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1232*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7e375537bee0a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7e375537bee0a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7e375537bee0a; op2val:0xbfd7e375537bee0a; 
   valaddr_reg:x3; val_offset:1234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1234*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7e375537bee0a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7e375537bee0a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7e375537bee0a; op2val:0xbfd7e375537bee0a; 
   valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7e375537bee0a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7e375537bee0a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd7e375537bee0a; op2val:0xbfd7e375537bee0a; 
   valaddr_reg:x3; val_offset:1238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1238*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83089dda1002e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x83089dda1002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd83089dda1002e; op2val:0xbfd83089dda1002e; 
   valaddr_reg:x3; val_offset:1240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1240*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83089dda1002e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x83089dda1002e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd83089dda1002e; op2val:0xbfd83089dda1002e; 
   valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83089dda1002e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x83089dda1002e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd83089dda1002e; op2val:0xbfd83089dda1002e; 
   valaddr_reg:x3; val_offset:1244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1244*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83089dda1002e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x83089dda1002e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd83089dda1002e; op2val:0xbfd83089dda1002e; 
   valaddr_reg:x3; val_offset:1246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1246*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83089dda1002e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x83089dda1002e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd83089dda1002e; op2val:0xbfd83089dda1002e; 
   valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8491a87b6f506 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8491a87b6f506 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8491a87b6f506; op2val:0xbfd8491a87b6f506; 
   valaddr_reg:x3; val_offset:1250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1250*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8491a87b6f506 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8491a87b6f506 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8491a87b6f506; op2val:0xbfd8491a87b6f506; 
   valaddr_reg:x3; val_offset:1252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1252*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8491a87b6f506 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8491a87b6f506 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8491a87b6f506; op2val:0xbfd8491a87b6f506; 
   valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8491a87b6f506 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8491a87b6f506 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8491a87b6f506; op2val:0xbfd8491a87b6f506; 
   valaddr_reg:x3; val_offset:1256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1256*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8491a87b6f506 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8491a87b6f506 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8491a87b6f506; op2val:0xbfd8491a87b6f506; 
   valaddr_reg:x3; val_offset:1258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1258*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x86ca4719ad2d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x86ca4719ad2d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd86ca4719ad2d4; op2val:0xbfd86ca4719ad2d4; 
   valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x86ca4719ad2d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x86ca4719ad2d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd86ca4719ad2d4; op2val:0xbfd86ca4719ad2d4; 
   valaddr_reg:x3; val_offset:1262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1262*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x86ca4719ad2d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x86ca4719ad2d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd86ca4719ad2d4; op2val:0xbfd86ca4719ad2d4; 
   valaddr_reg:x3; val_offset:1264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1264*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x86ca4719ad2d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x86ca4719ad2d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd86ca4719ad2d4; op2val:0xbfd86ca4719ad2d4; 
   valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x86ca4719ad2d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x86ca4719ad2d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd86ca4719ad2d4; op2val:0xbfd86ca4719ad2d4; 
   valaddr_reg:x3; val_offset:1268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1268*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c8295f13c384 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c8295f13c384 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8c8295f13c384; op2val:0xbfd8c8295f13c384; 
   valaddr_reg:x3; val_offset:1270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1270*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c8295f13c384 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c8295f13c384 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8c8295f13c384; op2val:0xbfd8c8295f13c384; 
   valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c8295f13c384 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c8295f13c384 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8c8295f13c384; op2val:0xbfd8c8295f13c384; 
   valaddr_reg:x3; val_offset:1274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1274*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c8295f13c384 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c8295f13c384 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8c8295f13c384; op2val:0xbfd8c8295f13c384; 
   valaddr_reg:x3; val_offset:1276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1276*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c8295f13c384 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c8295f13c384 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8c8295f13c384; op2val:0xbfd8c8295f13c384; 
   valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1278*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c85300264c54 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c85300264c54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8c85300264c54; op2val:0xbfd8c85300264c54; 
   valaddr_reg:x3; val_offset:1280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1280*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c85300264c54 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c85300264c54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8c85300264c54; op2val:0xbfd8c85300264c54; 
   valaddr_reg:x3; val_offset:1282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1282*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c85300264c54 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c85300264c54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8c85300264c54; op2val:0xbfd8c85300264c54; 
   valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c85300264c54 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c85300264c54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8c85300264c54; op2val:0xbfd8c85300264c54; 
   valaddr_reg:x3; val_offset:1286*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1286*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c85300264c54 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c85300264c54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8c85300264c54; op2val:0xbfd8c85300264c54; 
   valaddr_reg:x3; val_offset:1288*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1288*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f3cc5264b9d6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f3cc5264b9d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8f3cc5264b9d6; op2val:0xbfd8f3cc5264b9d6; 
   valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f3cc5264b9d6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f3cc5264b9d6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8f3cc5264b9d6; op2val:0xbfd8f3cc5264b9d6; 
   valaddr_reg:x3; val_offset:1292*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1292*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f3cc5264b9d6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f3cc5264b9d6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8f3cc5264b9d6; op2val:0xbfd8f3cc5264b9d6; 
   valaddr_reg:x3; val_offset:1294*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1294*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f3cc5264b9d6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f3cc5264b9d6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8f3cc5264b9d6; op2val:0xbfd8f3cc5264b9d6; 
   valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f3cc5264b9d6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f3cc5264b9d6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8f3cc5264b9d6; op2val:0xbfd8f3cc5264b9d6; 
   valaddr_reg:x3; val_offset:1298*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1298*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f984b08cab90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f984b08cab90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8f984b08cab90; op2val:0xbfd8f984b08cab90; 
   valaddr_reg:x3; val_offset:1300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1300*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f984b08cab90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f984b08cab90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8f984b08cab90; op2val:0xbfd8f984b08cab90; 
   valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f984b08cab90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f984b08cab90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8f984b08cab90; op2val:0xbfd8f984b08cab90; 
   valaddr_reg:x3; val_offset:1304*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1304*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f984b08cab90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f984b08cab90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8f984b08cab90; op2val:0xbfd8f984b08cab90; 
   valaddr_reg:x3; val_offset:1306*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1306*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f984b08cab90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f984b08cab90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd8f984b08cab90; op2val:0xbfd8f984b08cab90; 
   valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d66fa19dd440 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9d66fa19dd440 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9d66fa19dd440; op2val:0xbfd9d66fa19dd440; 
   valaddr_reg:x3; val_offset:1310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1310*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d66fa19dd440 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9d66fa19dd440 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9d66fa19dd440; op2val:0xbfd9d66fa19dd440; 
   valaddr_reg:x3; val_offset:1312*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1312*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d66fa19dd440 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9d66fa19dd440 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9d66fa19dd440; op2val:0xbfd9d66fa19dd440; 
   valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d66fa19dd440 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9d66fa19dd440 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9d66fa19dd440; op2val:0xbfd9d66fa19dd440; 
   valaddr_reg:x3; val_offset:1316*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1316*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d66fa19dd440 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9d66fa19dd440 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fd9d66fa19dd440; op2val:0xbfd9d66fa19dd440; 
   valaddr_reg:x3; val_offset:1318*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1318*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa647b65b2e0c0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa647b65b2e0c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda647b65b2e0c0; op2val:0xbfda647b65b2e0c0; 
   valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa647b65b2e0c0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa647b65b2e0c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda647b65b2e0c0; op2val:0xbfda647b65b2e0c0; 
   valaddr_reg:x3; val_offset:1322*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1322*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa647b65b2e0c0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa647b65b2e0c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda647b65b2e0c0; op2val:0xbfda647b65b2e0c0; 
   valaddr_reg:x3; val_offset:1324*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1324*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa647b65b2e0c0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa647b65b2e0c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda647b65b2e0c0; op2val:0xbfda647b65b2e0c0; 
   valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa647b65b2e0c0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa647b65b2e0c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda647b65b2e0c0; op2val:0xbfda647b65b2e0c0; 
   valaddr_reg:x3; val_offset:1328*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1328*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa789c8e21a57c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa789c8e21a57c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda789c8e21a57c; op2val:0xbfda789c8e21a57c; 
   valaddr_reg:x3; val_offset:1330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1330*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa789c8e21a57c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa789c8e21a57c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda789c8e21a57c; op2val:0xbfda789c8e21a57c; 
   valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa789c8e21a57c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa789c8e21a57c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda789c8e21a57c; op2val:0xbfda789c8e21a57c; 
   valaddr_reg:x3; val_offset:1334*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1334*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa789c8e21a57c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa789c8e21a57c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda789c8e21a57c; op2val:0xbfda789c8e21a57c; 
   valaddr_reg:x3; val_offset:1336*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1336*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa789c8e21a57c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa789c8e21a57c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fda789c8e21a57c; op2val:0xbfda789c8e21a57c; 
   valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad35d1d89b3d2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad35d1d89b3d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdad35d1d89b3d2; op2val:0xbfdad35d1d89b3d2; 
   valaddr_reg:x3; val_offset:1340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1340*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad35d1d89b3d2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad35d1d89b3d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdad35d1d89b3d2; op2val:0xbfdad35d1d89b3d2; 
   valaddr_reg:x3; val_offset:1342*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1342*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad35d1d89b3d2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad35d1d89b3d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdad35d1d89b3d2; op2val:0xbfdad35d1d89b3d2; 
   valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad35d1d89b3d2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad35d1d89b3d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdad35d1d89b3d2; op2val:0xbfdad35d1d89b3d2; 
   valaddr_reg:x3; val_offset:1346*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1346*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad35d1d89b3d2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad35d1d89b3d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdad35d1d89b3d2; op2val:0xbfdad35d1d89b3d2; 
   valaddr_reg:x3; val_offset:1348*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1348*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb23963f0add1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb23963f0add1a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb23963f0add1a; op2val:0xbfdb23963f0add1a; 
   valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb23963f0add1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb23963f0add1a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb23963f0add1a; op2val:0xbfdb23963f0add1a; 
   valaddr_reg:x3; val_offset:1352*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1352*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb23963f0add1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb23963f0add1a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb23963f0add1a; op2val:0xbfdb23963f0add1a; 
   valaddr_reg:x3; val_offset:1354*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1354*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb23963f0add1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb23963f0add1a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb23963f0add1a; op2val:0xbfdb23963f0add1a; 
   valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb23963f0add1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb23963f0add1a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb23963f0add1a; op2val:0xbfdb23963f0add1a; 
   valaddr_reg:x3; val_offset:1358*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1358*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2888a6102a20 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb2888a6102a20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb2888a6102a20; op2val:0xbfdb2888a6102a20; 
   valaddr_reg:x3; val_offset:1360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1360*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2888a6102a20 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb2888a6102a20 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb2888a6102a20; op2val:0xbfdb2888a6102a20; 
   valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2888a6102a20 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb2888a6102a20 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb2888a6102a20; op2val:0xbfdb2888a6102a20; 
   valaddr_reg:x3; val_offset:1364*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1364*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2888a6102a20 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb2888a6102a20 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb2888a6102a20; op2val:0xbfdb2888a6102a20; 
   valaddr_reg:x3; val_offset:1366*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1366*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2888a6102a20 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb2888a6102a20 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb2888a6102a20; op2val:0xbfdb2888a6102a20; 
   valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb45ac5f465aee and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb45ac5f465aee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb45ac5f465aee; op2val:0xbfdb45ac5f465aee; 
   valaddr_reg:x3; val_offset:1370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1370*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb45ac5f465aee and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb45ac5f465aee and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb45ac5f465aee; op2val:0xbfdb45ac5f465aee; 
   valaddr_reg:x3; val_offset:1372*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1372*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb45ac5f465aee and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb45ac5f465aee and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb45ac5f465aee; op2val:0xbfdb45ac5f465aee; 
   valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb45ac5f465aee and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb45ac5f465aee and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb45ac5f465aee; op2val:0xbfdb45ac5f465aee; 
   valaddr_reg:x3; val_offset:1376*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1376*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb45ac5f465aee and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb45ac5f465aee and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb45ac5f465aee; op2val:0xbfdb45ac5f465aee; 
   valaddr_reg:x3; val_offset:1378*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1378*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb67ae48fe340e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb67ae48fe340e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb67ae48fe340e; op2val:0xbfdb67ae48fe340e; 
   valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb67ae48fe340e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb67ae48fe340e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb67ae48fe340e; op2val:0xbfdb67ae48fe340e; 
   valaddr_reg:x3; val_offset:1382*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1382*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb67ae48fe340e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb67ae48fe340e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb67ae48fe340e; op2val:0xbfdb67ae48fe340e; 
   valaddr_reg:x3; val_offset:1384*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1384*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb67ae48fe340e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb67ae48fe340e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb67ae48fe340e; op2val:0xbfdb67ae48fe340e; 
   valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb67ae48fe340e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb67ae48fe340e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb67ae48fe340e; op2val:0xbfdb67ae48fe340e; 
   valaddr_reg:x3; val_offset:1388*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1388*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb93a829006666 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb93a829006666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb93a829006666; op2val:0xbfdb93a829006666; 
   valaddr_reg:x3; val_offset:1390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1390*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb93a829006666 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb93a829006666 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb93a829006666; op2val:0xbfdb93a829006666; 
   valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb93a829006666 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb93a829006666 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb93a829006666; op2val:0xbfdb93a829006666; 
   valaddr_reg:x3; val_offset:1394*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1394*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb93a829006666 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb93a829006666 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb93a829006666; op2val:0xbfdb93a829006666; 
   valaddr_reg:x3; val_offset:1396*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1396*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb93a829006666 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb93a829006666 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdb93a829006666; op2val:0xbfdb93a829006666; 
   valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc1f20427931ec and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc1f20427931ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc1f20427931ec; op2val:0xbfdc1f20427931ec; 
   valaddr_reg:x3; val_offset:1400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1400*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc1f20427931ec and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc1f20427931ec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc1f20427931ec; op2val:0xbfdc1f20427931ec; 
   valaddr_reg:x3; val_offset:1402*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1402*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc1f20427931ec and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc1f20427931ec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc1f20427931ec; op2val:0xbfdc1f20427931ec; 
   valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc1f20427931ec and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc1f20427931ec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc1f20427931ec; op2val:0xbfdc1f20427931ec; 
   valaddr_reg:x3; val_offset:1406*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1406*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc1f20427931ec and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc1f20427931ec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc1f20427931ec; op2val:0xbfdc1f20427931ec; 
   valaddr_reg:x3; val_offset:1408*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1408*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc46c0bb27d794 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc46c0bb27d794 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc46c0bb27d794; op2val:0xbfdc46c0bb27d794; 
   valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc46c0bb27d794 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc46c0bb27d794 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc46c0bb27d794; op2val:0xbfdc46c0bb27d794; 
   valaddr_reg:x3; val_offset:1412*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1412*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc46c0bb27d794 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc46c0bb27d794 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc46c0bb27d794; op2val:0xbfdc46c0bb27d794; 
   valaddr_reg:x3; val_offset:1414*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1414*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc46c0bb27d794 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc46c0bb27d794 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc46c0bb27d794; op2val:0xbfdc46c0bb27d794; 
   valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc46c0bb27d794 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc46c0bb27d794 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdc46c0bb27d794; op2val:0xbfdc46c0bb27d794; 
   valaddr_reg:x3; val_offset:1418*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1418*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcc01114aa7f56 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcc01114aa7f56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdcc01114aa7f56; op2val:0xbfdcc01114aa7f56; 
   valaddr_reg:x3; val_offset:1420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1420*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcc01114aa7f56 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcc01114aa7f56 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdcc01114aa7f56; op2val:0xbfdcc01114aa7f56; 
   valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcc01114aa7f56 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcc01114aa7f56 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdcc01114aa7f56; op2val:0xbfdcc01114aa7f56; 
   valaddr_reg:x3; val_offset:1424*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1424*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcc01114aa7f56 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcc01114aa7f56 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdcc01114aa7f56; op2val:0xbfdcc01114aa7f56; 
   valaddr_reg:x3; val_offset:1426*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1426*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcc01114aa7f56 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcc01114aa7f56 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdcc01114aa7f56; op2val:0xbfdcc01114aa7f56; 
   valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcdad41acedd26 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcdad41acedd26 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdcdad41acedd26; op2val:0xbfdcdad41acedd26; 
   valaddr_reg:x3; val_offset:1430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1430*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcdad41acedd26 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcdad41acedd26 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdcdad41acedd26; op2val:0xbfdcdad41acedd26; 
   valaddr_reg:x3; val_offset:1432*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1432*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcdad41acedd26 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcdad41acedd26 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdcdad41acedd26; op2val:0xbfdcdad41acedd26; 
   valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcdad41acedd26 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcdad41acedd26 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdcdad41acedd26; op2val:0xbfdcdad41acedd26; 
   valaddr_reg:x3; val_offset:1436*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1436*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcdad41acedd26 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcdad41acedd26 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdcdad41acedd26; op2val:0xbfdcdad41acedd26; 
   valaddr_reg:x3; val_offset:1438*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1438*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce21c50ac0b16 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce21c50ac0b16 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdce21c50ac0b16; op2val:0xbfdce21c50ac0b16; 
   valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce21c50ac0b16 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce21c50ac0b16 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdce21c50ac0b16; op2val:0xbfdce21c50ac0b16; 
   valaddr_reg:x3; val_offset:1442*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1442*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce21c50ac0b16 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce21c50ac0b16 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdce21c50ac0b16; op2val:0xbfdce21c50ac0b16; 
   valaddr_reg:x3; val_offset:1444*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1444*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce21c50ac0b16 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce21c50ac0b16 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdce21c50ac0b16; op2val:0xbfdce21c50ac0b16; 
   valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce21c50ac0b16 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce21c50ac0b16 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdce21c50ac0b16; op2val:0xbfdce21c50ac0b16; 
   valaddr_reg:x3; val_offset:1448*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1448*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce5a21ef67ed0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce5a21ef67ed0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdce5a21ef67ed0; op2val:0xbfdce5a21ef67ed0; 
   valaddr_reg:x3; val_offset:1450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1450*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce5a21ef67ed0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce5a21ef67ed0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdce5a21ef67ed0; op2val:0xbfdce5a21ef67ed0; 
   valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce5a21ef67ed0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce5a21ef67ed0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdce5a21ef67ed0; op2val:0xbfdce5a21ef67ed0; 
   valaddr_reg:x3; val_offset:1454*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1454*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce5a21ef67ed0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce5a21ef67ed0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdce5a21ef67ed0; op2val:0xbfdce5a21ef67ed0; 
   valaddr_reg:x3; val_offset:1456*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1456*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce5a21ef67ed0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce5a21ef67ed0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdce5a21ef67ed0; op2val:0xbfdce5a21ef67ed0; 
   valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd66cf92883200 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd66cf92883200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd66cf92883200; op2val:0xbfdd66cf92883200; 
   valaddr_reg:x3; val_offset:1460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1460*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd66cf92883200 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd66cf92883200 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd66cf92883200; op2val:0xbfdd66cf92883200; 
   valaddr_reg:x3; val_offset:1462*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1462*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd66cf92883200 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd66cf92883200 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd66cf92883200; op2val:0xbfdd66cf92883200; 
   valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd66cf92883200 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd66cf92883200 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd66cf92883200; op2val:0xbfdd66cf92883200; 
   valaddr_reg:x3; val_offset:1466*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1466*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd66cf92883200 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd66cf92883200 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdd66cf92883200; op2val:0xbfdd66cf92883200; 
   valaddr_reg:x3; val_offset:1468*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1468*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdbbbd40ca77ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbbbd40ca77ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fddbbbd40ca77ca; op2val:0xbfddbbbd40ca77ca; 
   valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdbbbd40ca77ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbbbd40ca77ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fddbbbd40ca77ca; op2val:0xbfddbbbd40ca77ca; 
   valaddr_reg:x3; val_offset:1472*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1472*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdbbbd40ca77ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbbbd40ca77ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fddbbbd40ca77ca; op2val:0xbfddbbbd40ca77ca; 
   valaddr_reg:x3; val_offset:1474*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1474*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdbbbd40ca77ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbbbd40ca77ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fddbbbd40ca77ca; op2val:0xbfddbbbd40ca77ca; 
   valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdbbbd40ca77ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbbbd40ca77ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fddbbbd40ca77ca; op2val:0xbfddbbbd40ca77ca; 
   valaddr_reg:x3; val_offset:1478*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1478*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe8658522bb3ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8658522bb3ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde8658522bb3ea; op2val:0xbfde8658522bb3ea; 
   valaddr_reg:x3; val_offset:1480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1480*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe8658522bb3ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8658522bb3ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde8658522bb3ea; op2val:0xbfde8658522bb3ea; 
   valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe8658522bb3ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8658522bb3ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde8658522bb3ea; op2val:0xbfde8658522bb3ea; 
   valaddr_reg:x3; val_offset:1484*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1484*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe8658522bb3ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8658522bb3ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde8658522bb3ea; op2val:0xbfde8658522bb3ea; 
   valaddr_reg:x3; val_offset:1486*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1486*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe8658522bb3ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8658522bb3ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fde8658522bb3ea; op2val:0xbfde8658522bb3ea; 
   valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec8a495ae726e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xec8a495ae726e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdec8a495ae726e; op2val:0xbfdec8a495ae726e; 
   valaddr_reg:x3; val_offset:1490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1490*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec8a495ae726e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xec8a495ae726e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdec8a495ae726e; op2val:0xbfdec8a495ae726e; 
   valaddr_reg:x3; val_offset:1492*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1492*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec8a495ae726e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xec8a495ae726e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdec8a495ae726e; op2val:0xbfdec8a495ae726e; 
   valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec8a495ae726e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xec8a495ae726e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdec8a495ae726e; op2val:0xbfdec8a495ae726e; 
   valaddr_reg:x3; val_offset:1496*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1496*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec8a495ae726e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xec8a495ae726e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdec8a495ae726e; op2val:0xbfdec8a495ae726e; 
   valaddr_reg:x3; val_offset:1498*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1498*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4746641cd1f2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4746641cd1f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf4746641cd1f2; op2val:0xbfdf4746641cd1f2; 
   valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4746641cd1f2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4746641cd1f2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf4746641cd1f2; op2val:0xbfdf4746641cd1f2; 
   valaddr_reg:x3; val_offset:1502*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1502*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4746641cd1f2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4746641cd1f2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf4746641cd1f2; op2val:0xbfdf4746641cd1f2; 
   valaddr_reg:x3; val_offset:1504*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1504*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4746641cd1f2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4746641cd1f2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf4746641cd1f2; op2val:0xbfdf4746641cd1f2; 
   valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4746641cd1f2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4746641cd1f2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf4746641cd1f2; op2val:0xbfdf4746641cd1f2; 
   valaddr_reg:x3; val_offset:1508*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1508*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf7de688042774 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf7de688042774 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf7de688042774; op2val:0xbfdf7de688042774; 
   valaddr_reg:x3; val_offset:1510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1510*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf7de688042774 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf7de688042774 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf7de688042774; op2val:0xbfdf7de688042774; 
   valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf7de688042774 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf7de688042774 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf7de688042774; op2val:0xbfdf7de688042774; 
   valaddr_reg:x3; val_offset:1514*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1514*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf7de688042774 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf7de688042774 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf7de688042774; op2val:0xbfdf7de688042774; 
   valaddr_reg:x3; val_offset:1516*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1516*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf7de688042774 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf7de688042774 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf7de688042774; op2val:0xbfdf7de688042774; 
   valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8fa45b70180c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf8fa45b70180c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf8fa45b70180c; op2val:0xbfdf8fa45b70180c; 
   valaddr_reg:x3; val_offset:1520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1520*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8fa45b70180c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf8fa45b70180c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf8fa45b70180c; op2val:0xbfdf8fa45b70180c; 
   valaddr_reg:x3; val_offset:1522*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1522*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8fa45b70180c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf8fa45b70180c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf8fa45b70180c; op2val:0xbfdf8fa45b70180c; 
   valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8fa45b70180c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf8fa45b70180c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf8fa45b70180c; op2val:0xbfdf8fa45b70180c; 
   valaddr_reg:x3; val_offset:1526*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1526*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8fa45b70180c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf8fa45b70180c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdf8fa45b70180c; op2val:0xbfdf8fa45b70180c; 
   valaddr_reg:x3; val_offset:1528*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1528*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfc46b644350b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfc46b644350b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfc46b644350b4; op2val:0xbfdfc46b644350b4; 
   valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfc46b644350b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfc46b644350b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfc46b644350b4; op2val:0xbfdfc46b644350b4; 
   valaddr_reg:x3; val_offset:1532*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1532*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfc46b644350b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfc46b644350b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfc46b644350b4; op2val:0xbfdfc46b644350b4; 
   valaddr_reg:x3; val_offset:1534*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1534*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfc46b644350b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfc46b644350b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfc46b644350b4; op2val:0xbfdfc46b644350b4; 
   valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfc46b644350b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfc46b644350b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fdfc46b644350b4; op2val:0xbfdfc46b644350b4; 
   valaddr_reg:x3; val_offset:1538*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1538*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x00cc5b001dc4e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00cc5b001dc4e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe00cc5b001dc4e; op2val:0xbfe00cc5b001dc4e; 
   valaddr_reg:x3; val_offset:1540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1540*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x00cc5b001dc4e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00cc5b001dc4e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe00cc5b001dc4e; op2val:0xbfe00cc5b001dc4e; 
   valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x00cc5b001dc4e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00cc5b001dc4e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe00cc5b001dc4e; op2val:0xbfe00cc5b001dc4e; 
   valaddr_reg:x3; val_offset:1544*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1544*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x00cc5b001dc4e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00cc5b001dc4e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe00cc5b001dc4e; op2val:0xbfe00cc5b001dc4e; 
   valaddr_reg:x3; val_offset:1546*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1546*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x00cc5b001dc4e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00cc5b001dc4e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe00cc5b001dc4e; op2val:0xbfe00cc5b001dc4e; 
   valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02c60f6b23bc3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c60f6b23bc3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe02c60f6b23bc3; op2val:0xbfe02c60f6b23bc3; 
   valaddr_reg:x3; val_offset:1550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1550*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02c60f6b23bc3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c60f6b23bc3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe02c60f6b23bc3; op2val:0xbfe02c60f6b23bc3; 
   valaddr_reg:x3; val_offset:1552*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1552*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02c60f6b23bc3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c60f6b23bc3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe02c60f6b23bc3; op2val:0xbfe02c60f6b23bc3; 
   valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02c60f6b23bc3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c60f6b23bc3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe02c60f6b23bc3; op2val:0xbfe02c60f6b23bc3; 
   valaddr_reg:x3; val_offset:1556*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1556*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02c60f6b23bc3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c60f6b23bc3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe02c60f6b23bc3; op2val:0xbfe02c60f6b23bc3; 
   valaddr_reg:x3; val_offset:1558*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1558*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x042ebb870adf0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x042ebb870adf0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe042ebb870adf0; op2val:0xbfe042ebb870adf0; 
   valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x042ebb870adf0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x042ebb870adf0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe042ebb870adf0; op2val:0xbfe042ebb870adf0; 
   valaddr_reg:x3; val_offset:1562*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1562*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x042ebb870adf0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x042ebb870adf0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe042ebb870adf0; op2val:0xbfe042ebb870adf0; 
   valaddr_reg:x3; val_offset:1564*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1564*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x042ebb870adf0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x042ebb870adf0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe042ebb870adf0; op2val:0xbfe042ebb870adf0; 
   valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x042ebb870adf0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x042ebb870adf0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe042ebb870adf0; op2val:0xbfe042ebb870adf0; 
   valaddr_reg:x3; val_offset:1568*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1568*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04f4d1b8e56d3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04f4d1b8e56d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe04f4d1b8e56d3; op2val:0xbfe04f4d1b8e56d3; 
   valaddr_reg:x3; val_offset:1570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1570*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04f4d1b8e56d3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04f4d1b8e56d3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe04f4d1b8e56d3; op2val:0xbfe04f4d1b8e56d3; 
   valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04f4d1b8e56d3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04f4d1b8e56d3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe04f4d1b8e56d3; op2val:0xbfe04f4d1b8e56d3; 
   valaddr_reg:x3; val_offset:1574*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1574*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04f4d1b8e56d3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04f4d1b8e56d3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe04f4d1b8e56d3; op2val:0xbfe04f4d1b8e56d3; 
   valaddr_reg:x3; val_offset:1576*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1576*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04f4d1b8e56d3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04f4d1b8e56d3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe04f4d1b8e56d3; op2val:0xbfe04f4d1b8e56d3; 
   valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05d3c18d8cad5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x05d3c18d8cad5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe05d3c18d8cad5; op2val:0xbfe05d3c18d8cad5; 
   valaddr_reg:x3; val_offset:1580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1580*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05d3c18d8cad5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x05d3c18d8cad5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe05d3c18d8cad5; op2val:0xbfe05d3c18d8cad5; 
   valaddr_reg:x3; val_offset:1582*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1582*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05d3c18d8cad5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x05d3c18d8cad5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe05d3c18d8cad5; op2val:0xbfe05d3c18d8cad5; 
   valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05d3c18d8cad5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x05d3c18d8cad5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe05d3c18d8cad5; op2val:0xbfe05d3c18d8cad5; 
   valaddr_reg:x3; val_offset:1586*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1586*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05d3c18d8cad5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x05d3c18d8cad5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe05d3c18d8cad5; op2val:0xbfe05d3c18d8cad5; 
   valaddr_reg:x3; val_offset:1588*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1588*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06851f85e2acd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06851f85e2acd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe06851f85e2acd; op2val:0xbfe06851f85e2acd; 
   valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06851f85e2acd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06851f85e2acd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe06851f85e2acd; op2val:0xbfe06851f85e2acd; 
   valaddr_reg:x3; val_offset:1592*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1592*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06851f85e2acd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06851f85e2acd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe06851f85e2acd; op2val:0xbfe06851f85e2acd; 
   valaddr_reg:x3; val_offset:1594*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1594*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06851f85e2acd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06851f85e2acd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe06851f85e2acd; op2val:0xbfe06851f85e2acd; 
   valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06851f85e2acd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06851f85e2acd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe06851f85e2acd; op2val:0xbfe06851f85e2acd; 
   valaddr_reg:x3; val_offset:1598*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1598*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07155e2fa7c02 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07155e2fa7c02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07155e2fa7c02; op2val:0xbfe07155e2fa7c02; 
   valaddr_reg:x3; val_offset:1600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1600*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07155e2fa7c02 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07155e2fa7c02 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07155e2fa7c02; op2val:0xbfe07155e2fa7c02; 
   valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07155e2fa7c02 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07155e2fa7c02 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07155e2fa7c02; op2val:0xbfe07155e2fa7c02; 
   valaddr_reg:x3; val_offset:1604*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1604*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07155e2fa7c02 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07155e2fa7c02 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07155e2fa7c02; op2val:0xbfe07155e2fa7c02; 
   valaddr_reg:x3; val_offset:1606*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1606*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07155e2fa7c02 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07155e2fa7c02 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe07155e2fa7c02; op2val:0xbfe07155e2fa7c02; 
   valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3b1b913f21d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b3b1b913f21d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0b3b1b913f21d; op2val:0xbfe0b3b1b913f21d; 
   valaddr_reg:x3; val_offset:1610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1610*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3b1b913f21d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b3b1b913f21d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0b3b1b913f21d; op2val:0xbfe0b3b1b913f21d; 
   valaddr_reg:x3; val_offset:1612*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1612*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3b1b913f21d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b3b1b913f21d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0b3b1b913f21d; op2val:0xbfe0b3b1b913f21d; 
   valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3b1b913f21d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b3b1b913f21d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0b3b1b913f21d; op2val:0xbfe0b3b1b913f21d; 
   valaddr_reg:x3; val_offset:1616*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1616*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3b1b913f21d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b3b1b913f21d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0b3b1b913f21d; op2val:0xbfe0b3b1b913f21d; 
   valaddr_reg:x3; val_offset:1618*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1618*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bc55fe3aae98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bc55fe3aae98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bc55fe3aae98; op2val:0xbfe0bc55fe3aae98; 
   valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bc55fe3aae98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bc55fe3aae98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bc55fe3aae98; op2val:0xbfe0bc55fe3aae98; 
   valaddr_reg:x3; val_offset:1622*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1622*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bc55fe3aae98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bc55fe3aae98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bc55fe3aae98; op2val:0xbfe0bc55fe3aae98; 
   valaddr_reg:x3; val_offset:1624*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1624*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bc55fe3aae98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bc55fe3aae98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bc55fe3aae98; op2val:0xbfe0bc55fe3aae98; 
   valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bc55fe3aae98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bc55fe3aae98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bc55fe3aae98; op2val:0xbfe0bc55fe3aae98; 
   valaddr_reg:x3; val_offset:1628*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1628*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bfb7be915b82 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bfb7be915b82 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bfb7be915b82; op2val:0xbfe0bfb7be915b82; 
   valaddr_reg:x3; val_offset:1630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1630*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bfb7be915b82 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bfb7be915b82 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bfb7be915b82; op2val:0xbfe0bfb7be915b82; 
   valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bfb7be915b82 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bfb7be915b82 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bfb7be915b82; op2val:0xbfe0bfb7be915b82; 
   valaddr_reg:x3; val_offset:1634*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1634*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bfb7be915b82 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bfb7be915b82 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bfb7be915b82; op2val:0xbfe0bfb7be915b82; 
   valaddr_reg:x3; val_offset:1636*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1636*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bfb7be915b82 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bfb7be915b82 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0bfb7be915b82; op2val:0xbfe0bfb7be915b82; 
   valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c04213b941b8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c04213b941b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0c04213b941b8; op2val:0xbfe0c04213b941b8; 
   valaddr_reg:x3; val_offset:1640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1640*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c04213b941b8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c04213b941b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0c04213b941b8; op2val:0xbfe0c04213b941b8; 
   valaddr_reg:x3; val_offset:1642*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1642*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c04213b941b8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c04213b941b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0c04213b941b8; op2val:0xbfe0c04213b941b8; 
   valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c04213b941b8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c04213b941b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0c04213b941b8; op2val:0xbfe0c04213b941b8; 
   valaddr_reg:x3; val_offset:1646*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1646*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c04213b941b8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c04213b941b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0c04213b941b8; op2val:0xbfe0c04213b941b8; 
   valaddr_reg:x3; val_offset:1648*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1648*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0da26502807f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0da26502807f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0da26502807f8; op2val:0xbfe0da26502807f8; 
   valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0da26502807f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0da26502807f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0da26502807f8; op2val:0xbfe0da26502807f8; 
   valaddr_reg:x3; val_offset:1652*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1652*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0da26502807f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0da26502807f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0da26502807f8; op2val:0xbfe0da26502807f8; 
   valaddr_reg:x3; val_offset:1654*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1654*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0da26502807f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0da26502807f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0da26502807f8; op2val:0xbfe0da26502807f8; 
   valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0da26502807f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0da26502807f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0da26502807f8; op2val:0xbfe0da26502807f8; 
   valaddr_reg:x3; val_offset:1658*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1658*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e434f5c2c034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e434f5c2c034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0e434f5c2c034; op2val:0xbfe0e434f5c2c034; 
   valaddr_reg:x3; val_offset:1660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1660*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e434f5c2c034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e434f5c2c034 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0e434f5c2c034; op2val:0xbfe0e434f5c2c034; 
   valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e434f5c2c034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e434f5c2c034 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0e434f5c2c034; op2val:0xbfe0e434f5c2c034; 
   valaddr_reg:x3; val_offset:1664*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1664*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e434f5c2c034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e434f5c2c034 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0e434f5c2c034; op2val:0xbfe0e434f5c2c034; 
   valaddr_reg:x3; val_offset:1666*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1666*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e434f5c2c034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e434f5c2c034 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0e434f5c2c034; op2val:0xbfe0e434f5c2c034; 
   valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e871d1465e5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e871d1465e5c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0e871d1465e5c; op2val:0xbfe0e871d1465e5c; 
   valaddr_reg:x3; val_offset:1670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1670*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e871d1465e5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e871d1465e5c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0e871d1465e5c; op2val:0xbfe0e871d1465e5c; 
   valaddr_reg:x3; val_offset:1672*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1672*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e871d1465e5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e871d1465e5c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0e871d1465e5c; op2val:0xbfe0e871d1465e5c; 
   valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e871d1465e5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e871d1465e5c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0e871d1465e5c; op2val:0xbfe0e871d1465e5c; 
   valaddr_reg:x3; val_offset:1676*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1676*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e871d1465e5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e871d1465e5c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0e871d1465e5c; op2val:0xbfe0e871d1465e5c; 
   valaddr_reg:x3; val_offset:1678*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1678*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee79c0e32d14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee79c0e32d14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0ee79c0e32d14; op2val:0xbfe0ee79c0e32d14; 
   valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee79c0e32d14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee79c0e32d14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0ee79c0e32d14; op2val:0xbfe0ee79c0e32d14; 
   valaddr_reg:x3; val_offset:1682*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1682*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee79c0e32d14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee79c0e32d14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0ee79c0e32d14; op2val:0xbfe0ee79c0e32d14; 
   valaddr_reg:x3; val_offset:1684*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1684*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee79c0e32d14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee79c0e32d14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0ee79c0e32d14; op2val:0xbfe0ee79c0e32d14; 
   valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee79c0e32d14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee79c0e32d14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0ee79c0e32d14; op2val:0xbfe0ee79c0e32d14; 
   valaddr_reg:x3; val_offset:1688*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1688*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee7d3fa2c217 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee7d3fa2c217 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0ee7d3fa2c217; op2val:0xbfe0ee7d3fa2c217; 
   valaddr_reg:x3; val_offset:1690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1690*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee7d3fa2c217 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee7d3fa2c217 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0ee7d3fa2c217; op2val:0xbfe0ee7d3fa2c217; 
   valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee7d3fa2c217 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee7d3fa2c217 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0ee7d3fa2c217; op2val:0xbfe0ee7d3fa2c217; 
   valaddr_reg:x3; val_offset:1694*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1694*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee7d3fa2c217 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee7d3fa2c217 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0ee7d3fa2c217; op2val:0xbfe0ee7d3fa2c217; 
   valaddr_reg:x3; val_offset:1696*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1696*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee7d3fa2c217 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee7d3fa2c217 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe0ee7d3fa2c217; op2val:0xbfe0ee7d3fa2c217; 
   valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10f3803ccf24a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x10f3803ccf24a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe10f3803ccf24a; op2val:0xbfe10f3803ccf24a; 
   valaddr_reg:x3; val_offset:1700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1700*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10f3803ccf24a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x10f3803ccf24a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe10f3803ccf24a; op2val:0xbfe10f3803ccf24a; 
   valaddr_reg:x3; val_offset:1702*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1702*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10f3803ccf24a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x10f3803ccf24a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe10f3803ccf24a; op2val:0xbfe10f3803ccf24a; 
   valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10f3803ccf24a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x10f3803ccf24a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe10f3803ccf24a; op2val:0xbfe10f3803ccf24a; 
   valaddr_reg:x3; val_offset:1706*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1706*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10f3803ccf24a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x10f3803ccf24a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe10f3803ccf24a; op2val:0xbfe10f3803ccf24a; 
   valaddr_reg:x3; val_offset:1708*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1708*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17d5ca6a3715b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17d5ca6a3715b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe17d5ca6a3715b; op2val:0xbfe17d5ca6a3715b; 
   valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17d5ca6a3715b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17d5ca6a3715b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe17d5ca6a3715b; op2val:0xbfe17d5ca6a3715b; 
   valaddr_reg:x3; val_offset:1712*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1712*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17d5ca6a3715b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17d5ca6a3715b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe17d5ca6a3715b; op2val:0xbfe17d5ca6a3715b; 
   valaddr_reg:x3; val_offset:1714*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1714*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17d5ca6a3715b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17d5ca6a3715b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe17d5ca6a3715b; op2val:0xbfe17d5ca6a3715b; 
   valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17d5ca6a3715b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17d5ca6a3715b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe17d5ca6a3715b; op2val:0xbfe17d5ca6a3715b; 
   valaddr_reg:x3; val_offset:1718*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1718*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18c656cfd80ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18c656cfd80ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe18c656cfd80ca; op2val:0xbfe18c656cfd80ca; 
   valaddr_reg:x3; val_offset:1720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1720*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18c656cfd80ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18c656cfd80ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe18c656cfd80ca; op2val:0xbfe18c656cfd80ca; 
   valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18c656cfd80ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18c656cfd80ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe18c656cfd80ca; op2val:0xbfe18c656cfd80ca; 
   valaddr_reg:x3; val_offset:1724*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1724*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18c656cfd80ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18c656cfd80ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe18c656cfd80ca; op2val:0xbfe18c656cfd80ca; 
   valaddr_reg:x3; val_offset:1726*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1726*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18c656cfd80ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18c656cfd80ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe18c656cfd80ca; op2val:0xbfe18c656cfd80ca; 
   valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x194fcae078559 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x194fcae078559 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe194fcae078559; op2val:0xbfe194fcae078559; 
   valaddr_reg:x3; val_offset:1730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1730*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x194fcae078559 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x194fcae078559 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe194fcae078559; op2val:0xbfe194fcae078559; 
   valaddr_reg:x3; val_offset:1732*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1732*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x194fcae078559 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x194fcae078559 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe194fcae078559; op2val:0xbfe194fcae078559; 
   valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x194fcae078559 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x194fcae078559 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe194fcae078559; op2val:0xbfe194fcae078559; 
   valaddr_reg:x3; val_offset:1736*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1736*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x194fcae078559 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x194fcae078559 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe194fcae078559; op2val:0xbfe194fcae078559; 
   valaddr_reg:x3; val_offset:1738*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1738*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bfacc3be9497 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1bfacc3be9497 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1bfacc3be9497; op2val:0xbfe1bfacc3be9497; 
   valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bfacc3be9497 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1bfacc3be9497 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1bfacc3be9497; op2val:0xbfe1bfacc3be9497; 
   valaddr_reg:x3; val_offset:1742*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1742*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bfacc3be9497 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1bfacc3be9497 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1bfacc3be9497; op2val:0xbfe1bfacc3be9497; 
   valaddr_reg:x3; val_offset:1744*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1744*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bfacc3be9497 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1bfacc3be9497 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1bfacc3be9497; op2val:0xbfe1bfacc3be9497; 
   valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bfacc3be9497 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1bfacc3be9497 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1bfacc3be9497; op2val:0xbfe1bfacc3be9497; 
   valaddr_reg:x3; val_offset:1748*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1748*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c41b657808c9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c41b657808c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1c41b657808c9; op2val:0xbfe1c41b657808c9; 
   valaddr_reg:x3; val_offset:1750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1750*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c41b657808c9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c41b657808c9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1c41b657808c9; op2val:0xbfe1c41b657808c9; 
   valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c41b657808c9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c41b657808c9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1c41b657808c9; op2val:0xbfe1c41b657808c9; 
   valaddr_reg:x3; val_offset:1754*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1754*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c41b657808c9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c41b657808c9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1c41b657808c9; op2val:0xbfe1c41b657808c9; 
   valaddr_reg:x3; val_offset:1756*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1756*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c41b657808c9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c41b657808c9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1c41b657808c9; op2val:0xbfe1c41b657808c9; 
   valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d8903d566b6e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1d8903d566b6e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1d8903d566b6e; op2val:0xbfe1d8903d566b6e; 
   valaddr_reg:x3; val_offset:1760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1760*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d8903d566b6e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1d8903d566b6e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1d8903d566b6e; op2val:0xbfe1d8903d566b6e; 
   valaddr_reg:x3; val_offset:1762*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1762*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d8903d566b6e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1d8903d566b6e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1d8903d566b6e; op2val:0xbfe1d8903d566b6e; 
   valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d8903d566b6e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1d8903d566b6e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1d8903d566b6e; op2val:0xbfe1d8903d566b6e; 
   valaddr_reg:x3; val_offset:1766*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1766*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d8903d566b6e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1d8903d566b6e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe1d8903d566b6e; op2val:0xbfe1d8903d566b6e; 
   valaddr_reg:x3; val_offset:1768*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1768*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21b43aabc36ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x21b43aabc36ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe21b43aabc36ef; op2val:0xbfe21b43aabc36ef; 
   valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21b43aabc36ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x21b43aabc36ef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe21b43aabc36ef; op2val:0xbfe21b43aabc36ef; 
   valaddr_reg:x3; val_offset:1772*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1772*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21b43aabc36ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x21b43aabc36ef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe21b43aabc36ef; op2val:0xbfe21b43aabc36ef; 
   valaddr_reg:x3; val_offset:1774*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1774*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21b43aabc36ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x21b43aabc36ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe21b43aabc36ef; op2val:0xbfe21b43aabc36ef; 
   valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21b43aabc36ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x21b43aabc36ef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe21b43aabc36ef; op2val:0xbfe21b43aabc36ef; 
   valaddr_reg:x3; val_offset:1778*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1778*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22f60e34d11b1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22f60e34d11b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe22f60e34d11b1; op2val:0xbfe22f60e34d11b1; 
   valaddr_reg:x3; val_offset:1780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1780*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22f60e34d11b1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22f60e34d11b1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe22f60e34d11b1; op2val:0xbfe22f60e34d11b1; 
   valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22f60e34d11b1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22f60e34d11b1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe22f60e34d11b1; op2val:0xbfe22f60e34d11b1; 
   valaddr_reg:x3; val_offset:1784*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1784*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22f60e34d11b1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22f60e34d11b1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe22f60e34d11b1; op2val:0xbfe22f60e34d11b1; 
   valaddr_reg:x3; val_offset:1786*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1786*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22f60e34d11b1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22f60e34d11b1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe22f60e34d11b1; op2val:0xbfe22f60e34d11b1; 
   valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2336ff73b72c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2336ff73b72c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2336ff73b72c5; op2val:0xbfe2336ff73b72c5; 
   valaddr_reg:x3; val_offset:1790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1790*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2336ff73b72c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2336ff73b72c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2336ff73b72c5; op2val:0xbfe2336ff73b72c5; 
   valaddr_reg:x3; val_offset:1792*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1792*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2336ff73b72c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2336ff73b72c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2336ff73b72c5; op2val:0xbfe2336ff73b72c5; 
   valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2336ff73b72c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2336ff73b72c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2336ff73b72c5; op2val:0xbfe2336ff73b72c5; 
   valaddr_reg:x3; val_offset:1796*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1796*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2336ff73b72c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2336ff73b72c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2336ff73b72c5; op2val:0xbfe2336ff73b72c5; 
   valaddr_reg:x3; val_offset:1798*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1798*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25e73a46ec0f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e73a46ec0f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe25e73a46ec0f2; op2val:0xbfe25e73a46ec0f2; 
   valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25e73a46ec0f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e73a46ec0f2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe25e73a46ec0f2; op2val:0xbfe25e73a46ec0f2; 
   valaddr_reg:x3; val_offset:1802*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1802*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25e73a46ec0f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e73a46ec0f2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe25e73a46ec0f2; op2val:0xbfe25e73a46ec0f2; 
   valaddr_reg:x3; val_offset:1804*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1804*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25e73a46ec0f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e73a46ec0f2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe25e73a46ec0f2; op2val:0xbfe25e73a46ec0f2; 
   valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25e73a46ec0f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e73a46ec0f2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe25e73a46ec0f2; op2val:0xbfe25e73a46ec0f2; 
   valaddr_reg:x3; val_offset:1808*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1808*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aad77d68b44 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x28aad77d68b44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe28aad77d68b44; op2val:0xbfe28aad77d68b44; 
   valaddr_reg:x3; val_offset:1810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1810*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aad77d68b44 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x28aad77d68b44 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe28aad77d68b44; op2val:0xbfe28aad77d68b44; 
   valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aad77d68b44 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x28aad77d68b44 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe28aad77d68b44; op2val:0xbfe28aad77d68b44; 
   valaddr_reg:x3; val_offset:1814*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1814*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aad77d68b44 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x28aad77d68b44 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe28aad77d68b44; op2val:0xbfe28aad77d68b44; 
   valaddr_reg:x3; val_offset:1816*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1816*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aad77d68b44 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x28aad77d68b44 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe28aad77d68b44; op2val:0xbfe28aad77d68b44; 
   valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b3113bbf9129 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b3113bbf9129 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2b3113bbf9129; op2val:0xbfe2b3113bbf9129; 
   valaddr_reg:x3; val_offset:1820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1820*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b3113bbf9129 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b3113bbf9129 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2b3113bbf9129; op2val:0xbfe2b3113bbf9129; 
   valaddr_reg:x3; val_offset:1822*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1822*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b3113bbf9129 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b3113bbf9129 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2b3113bbf9129; op2val:0xbfe2b3113bbf9129; 
   valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b3113bbf9129 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b3113bbf9129 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2b3113bbf9129; op2val:0xbfe2b3113bbf9129; 
   valaddr_reg:x3; val_offset:1826*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1826*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b3113bbf9129 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b3113bbf9129 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2b3113bbf9129; op2val:0xbfe2b3113bbf9129; 
   valaddr_reg:x3; val_offset:1828*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1828*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ba99bf90bdaf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ba99bf90bdaf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ba99bf90bdaf; op2val:0xbfe2ba99bf90bdaf; 
   valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ba99bf90bdaf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ba99bf90bdaf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ba99bf90bdaf; op2val:0xbfe2ba99bf90bdaf; 
   valaddr_reg:x3; val_offset:1832*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1832*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ba99bf90bdaf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ba99bf90bdaf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ba99bf90bdaf; op2val:0xbfe2ba99bf90bdaf; 
   valaddr_reg:x3; val_offset:1834*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1834*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ba99bf90bdaf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ba99bf90bdaf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ba99bf90bdaf; op2val:0xbfe2ba99bf90bdaf; 
   valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ba99bf90bdaf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ba99bf90bdaf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ba99bf90bdaf; op2val:0xbfe2ba99bf90bdaf; 
   valaddr_reg:x3; val_offset:1838*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1838*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd167caf341d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd167caf341d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2bd167caf341d; op2val:0xbfe2bd167caf341d; 
   valaddr_reg:x3; val_offset:1840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1840*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd167caf341d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd167caf341d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2bd167caf341d; op2val:0xbfe2bd167caf341d; 
   valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd167caf341d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd167caf341d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2bd167caf341d; op2val:0xbfe2bd167caf341d; 
   valaddr_reg:x3; val_offset:1844*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1844*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd167caf341d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd167caf341d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2bd167caf341d; op2val:0xbfe2bd167caf341d; 
   valaddr_reg:x3; val_offset:1846*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1846*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd167caf341d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd167caf341d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2bd167caf341d; op2val:0xbfe2bd167caf341d; 
   valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd2ecbdfb28b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd2ecbdfb28b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2bd2ecbdfb28b; op2val:0xbfe2bd2ecbdfb28b; 
   valaddr_reg:x3; val_offset:1850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1850*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd2ecbdfb28b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd2ecbdfb28b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2bd2ecbdfb28b; op2val:0xbfe2bd2ecbdfb28b; 
   valaddr_reg:x3; val_offset:1852*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1852*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd2ecbdfb28b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd2ecbdfb28b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2bd2ecbdfb28b; op2val:0xbfe2bd2ecbdfb28b; 
   valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd2ecbdfb28b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd2ecbdfb28b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2bd2ecbdfb28b; op2val:0xbfe2bd2ecbdfb28b; 
   valaddr_reg:x3; val_offset:1856*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1856*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd2ecbdfb28b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd2ecbdfb28b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2bd2ecbdfb28b; op2val:0xbfe2bd2ecbdfb28b; 
   valaddr_reg:x3; val_offset:1858*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1858*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7f083dbf9d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2d7f083dbf9d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2d7f083dbf9d5; op2val:0xbfe2d7f083dbf9d5; 
   valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7f083dbf9d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2d7f083dbf9d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2d7f083dbf9d5; op2val:0xbfe2d7f083dbf9d5; 
   valaddr_reg:x3; val_offset:1862*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1862*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7f083dbf9d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2d7f083dbf9d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2d7f083dbf9d5; op2val:0xbfe2d7f083dbf9d5; 
   valaddr_reg:x3; val_offset:1864*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1864*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7f083dbf9d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2d7f083dbf9d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2d7f083dbf9d5; op2val:0xbfe2d7f083dbf9d5; 
   valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7f083dbf9d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2d7f083dbf9d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2d7f083dbf9d5; op2val:0xbfe2d7f083dbf9d5; 
   valaddr_reg:x3; val_offset:1868*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1868*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ec88b3f75ec1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ec88b3f75ec1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ec88b3f75ec1; op2val:0xbfe2ec88b3f75ec1; 
   valaddr_reg:x3; val_offset:1870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1870*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ec88b3f75ec1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ec88b3f75ec1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ec88b3f75ec1; op2val:0xbfe2ec88b3f75ec1; 
   valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ec88b3f75ec1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ec88b3f75ec1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ec88b3f75ec1; op2val:0xbfe2ec88b3f75ec1; 
   valaddr_reg:x3; val_offset:1874*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1874*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ec88b3f75ec1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ec88b3f75ec1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ec88b3f75ec1; op2val:0xbfe2ec88b3f75ec1; 
   valaddr_reg:x3; val_offset:1876*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1876*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ec88b3f75ec1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ec88b3f75ec1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2ec88b3f75ec1; op2val:0xbfe2ec88b3f75ec1; 
   valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f1108a769ed6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2f1108a769ed6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2f1108a769ed6; op2val:0xbfe2f1108a769ed6; 
   valaddr_reg:x3; val_offset:1880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1880*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f1108a769ed6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2f1108a769ed6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2f1108a769ed6; op2val:0xbfe2f1108a769ed6; 
   valaddr_reg:x3; val_offset:1882*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1882*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f1108a769ed6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2f1108a769ed6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2f1108a769ed6; op2val:0xbfe2f1108a769ed6; 
   valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f1108a769ed6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2f1108a769ed6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2f1108a769ed6; op2val:0xbfe2f1108a769ed6; 
   valaddr_reg:x3; val_offset:1886*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1886*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f1108a769ed6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2f1108a769ed6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe2f1108a769ed6; op2val:0xbfe2f1108a769ed6; 
   valaddr_reg:x3; val_offset:1888*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1888*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302cf917250d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x302cf917250d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe302cf917250d4; op2val:0xbfe302cf917250d4; 
   valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302cf917250d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x302cf917250d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe302cf917250d4; op2val:0xbfe302cf917250d4; 
   valaddr_reg:x3; val_offset:1892*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1892*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302cf917250d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x302cf917250d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe302cf917250d4; op2val:0xbfe302cf917250d4; 
   valaddr_reg:x3; val_offset:1894*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1894*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302cf917250d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x302cf917250d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe302cf917250d4; op2val:0xbfe302cf917250d4; 
   valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302cf917250d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x302cf917250d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe302cf917250d4; op2val:0xbfe302cf917250d4; 
   valaddr_reg:x3; val_offset:1898*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1898*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3193d04a86308 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3193d04a86308 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3193d04a86308; op2val:0xbfe3193d04a86308; 
   valaddr_reg:x3; val_offset:1900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1900*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3193d04a86308 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3193d04a86308 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3193d04a86308; op2val:0xbfe3193d04a86308; 
   valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3193d04a86308 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3193d04a86308 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3193d04a86308; op2val:0xbfe3193d04a86308; 
   valaddr_reg:x3; val_offset:1904*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1904*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3193d04a86308 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3193d04a86308 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3193d04a86308; op2val:0xbfe3193d04a86308; 
   valaddr_reg:x3; val_offset:1906*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1906*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3193d04a86308 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3193d04a86308 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3193d04a86308; op2val:0xbfe3193d04a86308; 
   valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x324510c33a9d0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x324510c33a9d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe324510c33a9d0; op2val:0xbfe324510c33a9d0; 
   valaddr_reg:x3; val_offset:1910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1910*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x324510c33a9d0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x324510c33a9d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe324510c33a9d0; op2val:0xbfe324510c33a9d0; 
   valaddr_reg:x3; val_offset:1912*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1912*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x324510c33a9d0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x324510c33a9d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe324510c33a9d0; op2val:0xbfe324510c33a9d0; 
   valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x324510c33a9d0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x324510c33a9d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe324510c33a9d0; op2val:0xbfe324510c33a9d0; 
   valaddr_reg:x3; val_offset:1916*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1916*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x324510c33a9d0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x324510c33a9d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe324510c33a9d0; op2val:0xbfe324510c33a9d0; 
   valaddr_reg:x3; val_offset:1918*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1918*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33d3837422b91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33d3837422b91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe33d3837422b91; op2val:0xbfe33d3837422b91; 
   valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33d3837422b91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33d3837422b91 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe33d3837422b91; op2val:0xbfe33d3837422b91; 
   valaddr_reg:x3; val_offset:1922*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1922*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33d3837422b91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33d3837422b91 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe33d3837422b91; op2val:0xbfe33d3837422b91; 
   valaddr_reg:x3; val_offset:1924*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1924*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33d3837422b91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33d3837422b91 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe33d3837422b91; op2val:0xbfe33d3837422b91; 
   valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33d3837422b91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33d3837422b91 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe33d3837422b91; op2val:0xbfe33d3837422b91; 
   valaddr_reg:x3; val_offset:1928*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1928*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34e43d17d4c2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x34e43d17d4c2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe34e43d17d4c2d; op2val:0xbfe34e43d17d4c2d; 
   valaddr_reg:x3; val_offset:1930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1930*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34e43d17d4c2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x34e43d17d4c2d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe34e43d17d4c2d; op2val:0xbfe34e43d17d4c2d; 
   valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34e43d17d4c2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x34e43d17d4c2d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe34e43d17d4c2d; op2val:0xbfe34e43d17d4c2d; 
   valaddr_reg:x3; val_offset:1934*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1934*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34e43d17d4c2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x34e43d17d4c2d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe34e43d17d4c2d; op2val:0xbfe34e43d17d4c2d; 
   valaddr_reg:x3; val_offset:1936*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1936*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34e43d17d4c2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x34e43d17d4c2d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe34e43d17d4c2d; op2val:0xbfe34e43d17d4c2d; 
   valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a04af62a1ac0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a04af62a1ac0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3a04af62a1ac0; op2val:0xbfe3a04af62a1ac0; 
   valaddr_reg:x3; val_offset:1940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1940*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a04af62a1ac0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a04af62a1ac0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3a04af62a1ac0; op2val:0xbfe3a04af62a1ac0; 
   valaddr_reg:x3; val_offset:1942*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1942*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a04af62a1ac0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a04af62a1ac0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3a04af62a1ac0; op2val:0xbfe3a04af62a1ac0; 
   valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a04af62a1ac0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a04af62a1ac0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3a04af62a1ac0; op2val:0xbfe3a04af62a1ac0; 
   valaddr_reg:x3; val_offset:1946*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1946*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a04af62a1ac0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a04af62a1ac0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3a04af62a1ac0; op2val:0xbfe3a04af62a1ac0; 
   valaddr_reg:x3; val_offset:1948*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1948*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bb1268ddc7f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3bb1268ddc7f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3bb1268ddc7f2; op2val:0xbfe3bb1268ddc7f2; 
   valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bb1268ddc7f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3bb1268ddc7f2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3bb1268ddc7f2; op2val:0xbfe3bb1268ddc7f2; 
   valaddr_reg:x3; val_offset:1952*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1952*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bb1268ddc7f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3bb1268ddc7f2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3bb1268ddc7f2; op2val:0xbfe3bb1268ddc7f2; 
   valaddr_reg:x3; val_offset:1954*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1954*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bb1268ddc7f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3bb1268ddc7f2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3bb1268ddc7f2; op2val:0xbfe3bb1268ddc7f2; 
   valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bb1268ddc7f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3bb1268ddc7f2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3bb1268ddc7f2; op2val:0xbfe3bb1268ddc7f2; 
   valaddr_reg:x3; val_offset:1958*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1958*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e729828dadb2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e729828dadb2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3e729828dadb2; op2val:0xbfe3e729828dadb2; 
   valaddr_reg:x3; val_offset:1960*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1960*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e729828dadb2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e729828dadb2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3e729828dadb2; op2val:0xbfe3e729828dadb2; 
   valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e729828dadb2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e729828dadb2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3e729828dadb2; op2val:0xbfe3e729828dadb2; 
   valaddr_reg:x3; val_offset:1964*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1964*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e729828dadb2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e729828dadb2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3e729828dadb2; op2val:0xbfe3e729828dadb2; 
   valaddr_reg:x3; val_offset:1966*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1966*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e729828dadb2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e729828dadb2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe3e729828dadb2; op2val:0xbfe3e729828dadb2; 
   valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414e54883ace8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x414e54883ace8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe414e54883ace8; op2val:0xbfe414e54883ace8; 
   valaddr_reg:x3; val_offset:1970*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1970*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414e54883ace8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x414e54883ace8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe414e54883ace8; op2val:0xbfe414e54883ace8; 
   valaddr_reg:x3; val_offset:1972*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1972*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414e54883ace8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x414e54883ace8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe414e54883ace8; op2val:0xbfe414e54883ace8; 
   valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414e54883ace8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x414e54883ace8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe414e54883ace8; op2val:0xbfe414e54883ace8; 
   valaddr_reg:x3; val_offset:1976*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1976*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414e54883ace8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x414e54883ace8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe414e54883ace8; op2val:0xbfe414e54883ace8; 
   valaddr_reg:x3; val_offset:1978*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1978*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x427d048aa24b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x427d048aa24b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe427d048aa24b0; op2val:0xbfe427d048aa24b0; 
   valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x427d048aa24b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x427d048aa24b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe427d048aa24b0; op2val:0xbfe427d048aa24b0; 
   valaddr_reg:x3; val_offset:1982*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1982*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x427d048aa24b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x427d048aa24b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe427d048aa24b0; op2val:0xbfe427d048aa24b0; 
   valaddr_reg:x3; val_offset:1984*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1984*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x427d048aa24b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x427d048aa24b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe427d048aa24b0; op2val:0xbfe427d048aa24b0; 
   valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x427d048aa24b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x427d048aa24b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe427d048aa24b0; op2val:0xbfe427d048aa24b0; 
   valaddr_reg:x3; val_offset:1988*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1988*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x436a0f31e942f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x436a0f31e942f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe436a0f31e942f; op2val:0xbfe436a0f31e942f; 
   valaddr_reg:x3; val_offset:1990*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1990*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x436a0f31e942f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x436a0f31e942f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe436a0f31e942f; op2val:0xbfe436a0f31e942f; 
   valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x436a0f31e942f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x436a0f31e942f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe436a0f31e942f; op2val:0xbfe436a0f31e942f; 
   valaddr_reg:x3; val_offset:1994*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1994*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x436a0f31e942f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x436a0f31e942f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe436a0f31e942f; op2val:0xbfe436a0f31e942f; 
   valaddr_reg:x3; val_offset:1996*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1996*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x436a0f31e942f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x436a0f31e942f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe436a0f31e942f; op2val:0xbfe436a0f31e942f; 
   valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4816c7da38e40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4816c7da38e40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4816c7da38e40; op2val:0xbfe4816c7da38e40; 
   valaddr_reg:x3; val_offset:2000*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4816c7da38e40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4816c7da38e40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4816c7da38e40; op2val:0xbfe4816c7da38e40; 
   valaddr_reg:x3; val_offset:2002*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2002*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4816c7da38e40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4816c7da38e40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4816c7da38e40; op2val:0xbfe4816c7da38e40; 
   valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4816c7da38e40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4816c7da38e40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4816c7da38e40; op2val:0xbfe4816c7da38e40; 
   valaddr_reg:x3; val_offset:2006*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2006*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4816c7da38e40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4816c7da38e40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4816c7da38e40; op2val:0xbfe4816c7da38e40; 
   valaddr_reg:x3; val_offset:2008*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2008*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ba91758f389a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ba91758f389a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4ba91758f389a; op2val:0xbfe4ba91758f389a; 
   valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ba91758f389a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ba91758f389a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4ba91758f389a; op2val:0xbfe4ba91758f389a; 
   valaddr_reg:x3; val_offset:2012*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2012*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ba91758f389a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ba91758f389a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4ba91758f389a; op2val:0xbfe4ba91758f389a; 
   valaddr_reg:x3; val_offset:2014*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2014*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ba91758f389a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ba91758f389a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4ba91758f389a; op2val:0xbfe4ba91758f389a; 
   valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ba91758f389a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ba91758f389a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4ba91758f389a; op2val:0xbfe4ba91758f389a; 
   valaddr_reg:x3; val_offset:2018*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2018*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ca644e417739 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ca644e417739 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4ca644e417739; op2val:0xbfe4ca644e417739; 
   valaddr_reg:x3; val_offset:2020*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2020*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ca644e417739 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ca644e417739 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4ca644e417739; op2val:0xbfe4ca644e417739; 
   valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ca644e417739 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ca644e417739 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4ca644e417739; op2val:0xbfe4ca644e417739; 
   valaddr_reg:x3; val_offset:2024*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2024*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ca644e417739 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ca644e417739 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4ca644e417739; op2val:0xbfe4ca644e417739; 
   valaddr_reg:x3; val_offset:2026*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2026*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ca644e417739 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ca644e417739 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe4ca644e417739; op2val:0xbfe4ca644e417739; 
   valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x500ce5f80b100 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x500ce5f80b100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe500ce5f80b100; op2val:0xbfe500ce5f80b100; 
   valaddr_reg:x3; val_offset:2030*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2030*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x500ce5f80b100 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x500ce5f80b100 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe500ce5f80b100; op2val:0xbfe500ce5f80b100; 
   valaddr_reg:x3; val_offset:2032*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2032*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x500ce5f80b100 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x500ce5f80b100 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe500ce5f80b100; op2val:0xbfe500ce5f80b100; 
   valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x500ce5f80b100 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x500ce5f80b100 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe500ce5f80b100; op2val:0xbfe500ce5f80b100; 
   valaddr_reg:x3; val_offset:2036*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2036*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x500ce5f80b100 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x500ce5f80b100 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe500ce5f80b100; op2val:0xbfe500ce5f80b100; 
   valaddr_reg:x3; val_offset:2038*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2038*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51cea492d78d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51cea492d78d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe51cea492d78d7; op2val:0xbfe51cea492d78d7; 
   valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51cea492d78d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51cea492d78d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe51cea492d78d7; op2val:0xbfe51cea492d78d7; 
   valaddr_reg:x3; val_offset:2042*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2042*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51cea492d78d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51cea492d78d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe51cea492d78d7; op2val:0xbfe51cea492d78d7; 
   valaddr_reg:x3; val_offset:2044*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2044*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51cea492d78d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51cea492d78d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe51cea492d78d7; op2val:0xbfe51cea492d78d7; 
   valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2046*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51cea492d78d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51cea492d78d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe51cea492d78d7; op2val:0xbfe51cea492d78d7; 
   valaddr_reg:x3; val_offset:2048*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2048*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54c94d35c140c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54c94d35c140c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe54c94d35c140c; op2val:0xbfe54c94d35c140c; 
   valaddr_reg:x3; val_offset:2050*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2050*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54c94d35c140c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54c94d35c140c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe54c94d35c140c; op2val:0xbfe54c94d35c140c; 
   valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54c94d35c140c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54c94d35c140c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe54c94d35c140c; op2val:0xbfe54c94d35c140c; 
   valaddr_reg:x3; val_offset:2054*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2054*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54c94d35c140c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54c94d35c140c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe54c94d35c140c; op2val:0xbfe54c94d35c140c; 
   valaddr_reg:x3; val_offset:2056*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2056*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54c94d35c140c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54c94d35c140c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe54c94d35c140c; op2val:0xbfe54c94d35c140c; 
   valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x554b7eea66380 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x554b7eea66380 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe554b7eea66380; op2val:0xbfe554b7eea66380; 
   valaddr_reg:x3; val_offset:2060*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2060*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x554b7eea66380 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x554b7eea66380 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe554b7eea66380; op2val:0xbfe554b7eea66380; 
   valaddr_reg:x3; val_offset:2062*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2062*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x554b7eea66380 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x554b7eea66380 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe554b7eea66380; op2val:0xbfe554b7eea66380; 
   valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x554b7eea66380 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x554b7eea66380 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe554b7eea66380; op2val:0xbfe554b7eea66380; 
   valaddr_reg:x3; val_offset:2066*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2066*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x554b7eea66380 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x554b7eea66380 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe554b7eea66380; op2val:0xbfe554b7eea66380; 
   valaddr_reg:x3; val_offset:2068*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2068*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x56bc55c8d6933 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x56bc55c8d6933 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe56bc55c8d6933; op2val:0xbfe56bc55c8d6933; 
   valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x56bc55c8d6933 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x56bc55c8d6933 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe56bc55c8d6933; op2val:0xbfe56bc55c8d6933; 
   valaddr_reg:x3; val_offset:2072*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2072*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x56bc55c8d6933 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x56bc55c8d6933 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe56bc55c8d6933; op2val:0xbfe56bc55c8d6933; 
   valaddr_reg:x3; val_offset:2074*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2074*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x56bc55c8d6933 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x56bc55c8d6933 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe56bc55c8d6933; op2val:0xbfe56bc55c8d6933; 
   valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x56bc55c8d6933 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x56bc55c8d6933 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe56bc55c8d6933; op2val:0xbfe56bc55c8d6933; 
   valaddr_reg:x3; val_offset:2078*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2078*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x597ed052f7855 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x597ed052f7855 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe597ed052f7855; op2val:0xbfe597ed052f7855; 
   valaddr_reg:x3; val_offset:2080*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2080*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x597ed052f7855 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x597ed052f7855 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe597ed052f7855; op2val:0xbfe597ed052f7855; 
   valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x597ed052f7855 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x597ed052f7855 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe597ed052f7855; op2val:0xbfe597ed052f7855; 
   valaddr_reg:x3; val_offset:2084*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2084*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x597ed052f7855 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x597ed052f7855 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe597ed052f7855; op2val:0xbfe597ed052f7855; 
   valaddr_reg:x3; val_offset:2086*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2086*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x597ed052f7855 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x597ed052f7855 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe597ed052f7855; op2val:0xbfe597ed052f7855; 
   valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e1e07bfc8699 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e1e07bfc8699 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5e1e07bfc8699; op2val:0xbfe5e1e07bfc8699; 
   valaddr_reg:x3; val_offset:2090*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2090*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e1e07bfc8699 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e1e07bfc8699 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5e1e07bfc8699; op2val:0xbfe5e1e07bfc8699; 
   valaddr_reg:x3; val_offset:2092*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2092*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e1e07bfc8699 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e1e07bfc8699 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5e1e07bfc8699; op2val:0xbfe5e1e07bfc8699; 
   valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e1e07bfc8699 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e1e07bfc8699 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5e1e07bfc8699; op2val:0xbfe5e1e07bfc8699; 
   valaddr_reg:x3; val_offset:2096*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2096*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e1e07bfc8699 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e1e07bfc8699 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe5e1e07bfc8699; op2val:0xbfe5e1e07bfc8699; 
   valaddr_reg:x3; val_offset:2098*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2098*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x608a265677dfb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x608a265677dfb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe608a265677dfb; op2val:0xbfe608a265677dfb; 
   valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x608a265677dfb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x608a265677dfb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe608a265677dfb; op2val:0xbfe608a265677dfb; 
   valaddr_reg:x3; val_offset:2102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2102*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x608a265677dfb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x608a265677dfb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe608a265677dfb; op2val:0xbfe608a265677dfb; 
   valaddr_reg:x3; val_offset:2104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2104*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x608a265677dfb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x608a265677dfb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe608a265677dfb; op2val:0xbfe608a265677dfb; 
   valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x608a265677dfb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x608a265677dfb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe608a265677dfb; op2val:0xbfe608a265677dfb; 
   valaddr_reg:x3; val_offset:2108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2108*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61345679addc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x61345679addc9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe61345679addc9; op2val:0xbfe61345679addc9; 
   valaddr_reg:x3; val_offset:2110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2110*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61345679addc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x61345679addc9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe61345679addc9; op2val:0xbfe61345679addc9; 
   valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61345679addc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x61345679addc9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe61345679addc9; op2val:0xbfe61345679addc9; 
   valaddr_reg:x3; val_offset:2114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2114*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61345679addc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x61345679addc9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe61345679addc9; op2val:0xbfe61345679addc9; 
   valaddr_reg:x3; val_offset:2116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2116*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61345679addc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x61345679addc9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe61345679addc9; op2val:0xbfe61345679addc9; 
   valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63ae33037d2a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63ae33037d2a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe63ae33037d2a3; op2val:0xbfe63ae33037d2a3; 
   valaddr_reg:x3; val_offset:2120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2120*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63ae33037d2a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63ae33037d2a3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe63ae33037d2a3; op2val:0xbfe63ae33037d2a3; 
   valaddr_reg:x3; val_offset:2122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2122*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63ae33037d2a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63ae33037d2a3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe63ae33037d2a3; op2val:0xbfe63ae33037d2a3; 
   valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63ae33037d2a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63ae33037d2a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe63ae33037d2a3; op2val:0xbfe63ae33037d2a3; 
   valaddr_reg:x3; val_offset:2126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2126*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63ae33037d2a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63ae33037d2a3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe63ae33037d2a3; op2val:0xbfe63ae33037d2a3; 
   valaddr_reg:x3; val_offset:2128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2128*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x656cf46a8e04a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x656cf46a8e04a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe656cf46a8e04a; op2val:0xbfe656cf46a8e04a; 
   valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x656cf46a8e04a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x656cf46a8e04a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe656cf46a8e04a; op2val:0xbfe656cf46a8e04a; 
   valaddr_reg:x3; val_offset:2132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2132*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x656cf46a8e04a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x656cf46a8e04a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe656cf46a8e04a; op2val:0xbfe656cf46a8e04a; 
   valaddr_reg:x3; val_offset:2134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2134*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x656cf46a8e04a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x656cf46a8e04a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe656cf46a8e04a; op2val:0xbfe656cf46a8e04a; 
   valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x656cf46a8e04a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x656cf46a8e04a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe656cf46a8e04a; op2val:0xbfe656cf46a8e04a; 
   valaddr_reg:x3; val_offset:2138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2138*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6afa3f2829958 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6afa3f2829958 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6afa3f2829958; op2val:0xbfe6afa3f2829958; 
   valaddr_reg:x3; val_offset:2140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2140*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6afa3f2829958 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6afa3f2829958 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6afa3f2829958; op2val:0xbfe6afa3f2829958; 
   valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6afa3f2829958 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6afa3f2829958 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6afa3f2829958; op2val:0xbfe6afa3f2829958; 
   valaddr_reg:x3; val_offset:2144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2144*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6afa3f2829958 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6afa3f2829958 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6afa3f2829958; op2val:0xbfe6afa3f2829958; 
   valaddr_reg:x3; val_offset:2146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2146*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6afa3f2829958 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6afa3f2829958 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6afa3f2829958; op2val:0xbfe6afa3f2829958; 
   valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6bc29ca8e6e80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6bc29ca8e6e80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6bc29ca8e6e80; op2val:0xbfe6bc29ca8e6e80; 
   valaddr_reg:x3; val_offset:2150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2150*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6bc29ca8e6e80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6bc29ca8e6e80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6bc29ca8e6e80; op2val:0xbfe6bc29ca8e6e80; 
   valaddr_reg:x3; val_offset:2152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2152*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6bc29ca8e6e80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6bc29ca8e6e80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6bc29ca8e6e80; op2val:0xbfe6bc29ca8e6e80; 
   valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6bc29ca8e6e80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6bc29ca8e6e80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6bc29ca8e6e80; op2val:0xbfe6bc29ca8e6e80; 
   valaddr_reg:x3; val_offset:2156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2156*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6bc29ca8e6e80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6bc29ca8e6e80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6bc29ca8e6e80; op2val:0xbfe6bc29ca8e6e80; 
   valaddr_reg:x3; val_offset:2158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2158*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fb2f3370e67c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6fb2f3370e67c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6fb2f3370e67c; op2val:0xbfe6fb2f3370e67c; 
   valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fb2f3370e67c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6fb2f3370e67c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6fb2f3370e67c; op2val:0xbfe6fb2f3370e67c; 
   valaddr_reg:x3; val_offset:2162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2162*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fb2f3370e67c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6fb2f3370e67c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6fb2f3370e67c; op2val:0xbfe6fb2f3370e67c; 
   valaddr_reg:x3; val_offset:2164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2164*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fb2f3370e67c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6fb2f3370e67c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6fb2f3370e67c; op2val:0xbfe6fb2f3370e67c; 
   valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fb2f3370e67c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6fb2f3370e67c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe6fb2f3370e67c; op2val:0xbfe6fb2f3370e67c; 
   valaddr_reg:x3; val_offset:2168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2168*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70a61a13eef5f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x70a61a13eef5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe70a61a13eef5f; op2val:0xbfe70a61a13eef5f; 
   valaddr_reg:x3; val_offset:2170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2170*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70a61a13eef5f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x70a61a13eef5f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe70a61a13eef5f; op2val:0xbfe70a61a13eef5f; 
   valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70a61a13eef5f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x70a61a13eef5f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe70a61a13eef5f; op2val:0xbfe70a61a13eef5f; 
   valaddr_reg:x3; val_offset:2174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2174*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70a61a13eef5f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x70a61a13eef5f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe70a61a13eef5f; op2val:0xbfe70a61a13eef5f; 
   valaddr_reg:x3; val_offset:2176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2176*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70a61a13eef5f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x70a61a13eef5f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe70a61a13eef5f; op2val:0xbfe70a61a13eef5f; 
   valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7358b50582f8d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7358b50582f8d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7358b50582f8d; op2val:0xbfe7358b50582f8d; 
   valaddr_reg:x3; val_offset:2180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2180*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7358b50582f8d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7358b50582f8d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7358b50582f8d; op2val:0xbfe7358b50582f8d; 
   valaddr_reg:x3; val_offset:2182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2182*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7358b50582f8d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7358b50582f8d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7358b50582f8d; op2val:0xbfe7358b50582f8d; 
   valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7358b50582f8d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7358b50582f8d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7358b50582f8d; op2val:0xbfe7358b50582f8d; 
   valaddr_reg:x3; val_offset:2186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2186*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7358b50582f8d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7358b50582f8d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7358b50582f8d; op2val:0xbfe7358b50582f8d; 
   valaddr_reg:x3; val_offset:2188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2188*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a6925da8b9ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7a6925da8b9ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7a6925da8b9ff; op2val:0xbfe7a6925da8b9ff; 
   valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a6925da8b9ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7a6925da8b9ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7a6925da8b9ff; op2val:0xbfe7a6925da8b9ff; 
   valaddr_reg:x3; val_offset:2192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2192*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a6925da8b9ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7a6925da8b9ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7a6925da8b9ff; op2val:0xbfe7a6925da8b9ff; 
   valaddr_reg:x3; val_offset:2194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2194*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a6925da8b9ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7a6925da8b9ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7a6925da8b9ff; op2val:0xbfe7a6925da8b9ff; 
   valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a6925da8b9ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7a6925da8b9ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7a6925da8b9ff; op2val:0xbfe7a6925da8b9ff; 
   valaddr_reg:x3; val_offset:2198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2198*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7aa0c07c039c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7aa0c07c039c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7aa0c07c039c8; op2val:0xbfe7aa0c07c039c8; 
   valaddr_reg:x3; val_offset:2200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2200*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7aa0c07c039c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7aa0c07c039c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7aa0c07c039c8; op2val:0xbfe7aa0c07c039c8; 
   valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7aa0c07c039c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7aa0c07c039c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7aa0c07c039c8; op2val:0xbfe7aa0c07c039c8; 
   valaddr_reg:x3; val_offset:2204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2204*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7aa0c07c039c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7aa0c07c039c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7aa0c07c039c8; op2val:0xbfe7aa0c07c039c8; 
   valaddr_reg:x3; val_offset:2206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2206*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7aa0c07c039c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7aa0c07c039c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7aa0c07c039c8; op2val:0xbfe7aa0c07c039c8; 
   valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7c79f9596f383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c79f9596f383 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7c79f9596f383; op2val:0xbfe7c79f9596f383; 
   valaddr_reg:x3; val_offset:2210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2210*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7c79f9596f383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c79f9596f383 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7c79f9596f383; op2val:0xbfe7c79f9596f383; 
   valaddr_reg:x3; val_offset:2212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2212*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7c79f9596f383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c79f9596f383 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7c79f9596f383; op2val:0xbfe7c79f9596f383; 
   valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7c79f9596f383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c79f9596f383 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7c79f9596f383; op2val:0xbfe7c79f9596f383; 
   valaddr_reg:x3; val_offset:2216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2216*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7c79f9596f383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c79f9596f383 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7c79f9596f383; op2val:0xbfe7c79f9596f383; 
   valaddr_reg:x3; val_offset:2218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2218*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa5e8b87f95c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa5e8b87f95c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7fa5e8b87f95c; op2val:0xbfe7fa5e8b87f95c; 
   valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa5e8b87f95c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa5e8b87f95c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7fa5e8b87f95c; op2val:0xbfe7fa5e8b87f95c; 
   valaddr_reg:x3; val_offset:2222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2222*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa5e8b87f95c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa5e8b87f95c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7fa5e8b87f95c; op2val:0xbfe7fa5e8b87f95c; 
   valaddr_reg:x3; val_offset:2224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2224*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa5e8b87f95c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa5e8b87f95c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7fa5e8b87f95c; op2val:0xbfe7fa5e8b87f95c; 
   valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa5e8b87f95c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa5e8b87f95c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe7fa5e8b87f95c; op2val:0xbfe7fa5e8b87f95c; 
   valaddr_reg:x3; val_offset:2228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2228*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8390d5bef66e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8390d5bef66e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8390d5bef66e7; op2val:0xbfe8390d5bef66e7; 
   valaddr_reg:x3; val_offset:2230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2230*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8390d5bef66e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8390d5bef66e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8390d5bef66e7; op2val:0xbfe8390d5bef66e7; 
   valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8390d5bef66e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8390d5bef66e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8390d5bef66e7; op2val:0xbfe8390d5bef66e7; 
   valaddr_reg:x3; val_offset:2234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2234*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8390d5bef66e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8390d5bef66e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8390d5bef66e7; op2val:0xbfe8390d5bef66e7; 
   valaddr_reg:x3; val_offset:2236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2236*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8390d5bef66e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8390d5bef66e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8390d5bef66e7; op2val:0xbfe8390d5bef66e7; 
   valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x83aaa5b0da9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83aaa5b0da9bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe83aaa5b0da9bd; op2val:0xbfe83aaa5b0da9bd; 
   valaddr_reg:x3; val_offset:2240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2240*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x83aaa5b0da9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83aaa5b0da9bd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe83aaa5b0da9bd; op2val:0xbfe83aaa5b0da9bd; 
   valaddr_reg:x3; val_offset:2242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2242*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x83aaa5b0da9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83aaa5b0da9bd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe83aaa5b0da9bd; op2val:0xbfe83aaa5b0da9bd; 
   valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x83aaa5b0da9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83aaa5b0da9bd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe83aaa5b0da9bd; op2val:0xbfe83aaa5b0da9bd; 
   valaddr_reg:x3; val_offset:2246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2246*FLEN/8, x4, x1, x2)

inst_1124:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x83aaa5b0da9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83aaa5b0da9bd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe83aaa5b0da9bd; op2val:0xbfe83aaa5b0da9bd; 
   valaddr_reg:x3; val_offset:2248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2248*FLEN/8, x4, x1, x2)

inst_1125:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x850da08f38a96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x850da08f38a96 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe850da08f38a96; op2val:0xbfe850da08f38a96; 
   valaddr_reg:x3; val_offset:2250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2250*FLEN/8, x4, x1, x2)

inst_1126:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x850da08f38a96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x850da08f38a96 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe850da08f38a96; op2val:0xbfe850da08f38a96; 
   valaddr_reg:x3; val_offset:2252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2252*FLEN/8, x4, x1, x2)

inst_1127:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x850da08f38a96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x850da08f38a96 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe850da08f38a96; op2val:0xbfe850da08f38a96; 
   valaddr_reg:x3; val_offset:2254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2254*FLEN/8, x4, x1, x2)

inst_1128:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x850da08f38a96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x850da08f38a96 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe850da08f38a96; op2val:0xbfe850da08f38a96; 
   valaddr_reg:x3; val_offset:2256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2256*FLEN/8, x4, x1, x2)

inst_1129:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x850da08f38a96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x850da08f38a96 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe850da08f38a96; op2val:0xbfe850da08f38a96; 
   valaddr_reg:x3; val_offset:2258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2258*FLEN/8, x4, x1, x2)

inst_1130:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85d4220c95feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x85d4220c95feb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe85d4220c95feb; op2val:0xbfe85d4220c95feb; 
   valaddr_reg:x3; val_offset:2260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2260*FLEN/8, x4, x1, x2)

inst_1131:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85d4220c95feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x85d4220c95feb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe85d4220c95feb; op2val:0xbfe85d4220c95feb; 
   valaddr_reg:x3; val_offset:2262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2262*FLEN/8, x4, x1, x2)

inst_1132:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85d4220c95feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x85d4220c95feb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe85d4220c95feb; op2val:0xbfe85d4220c95feb; 
   valaddr_reg:x3; val_offset:2264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2264*FLEN/8, x4, x1, x2)

inst_1133:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85d4220c95feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x85d4220c95feb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe85d4220c95feb; op2val:0xbfe85d4220c95feb; 
   valaddr_reg:x3; val_offset:2266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2266*FLEN/8, x4, x1, x2)

inst_1134:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85d4220c95feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x85d4220c95feb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe85d4220c95feb; op2val:0xbfe85d4220c95feb; 
   valaddr_reg:x3; val_offset:2268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2268*FLEN/8, x4, x1, x2)

inst_1135:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cc0eaf7a5fbe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8cc0eaf7a5fbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8cc0eaf7a5fbe; op2val:0xbfe8cc0eaf7a5fbe; 
   valaddr_reg:x3; val_offset:2270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2270*FLEN/8, x4, x1, x2)

inst_1136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cc0eaf7a5fbe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8cc0eaf7a5fbe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8cc0eaf7a5fbe; op2val:0xbfe8cc0eaf7a5fbe; 
   valaddr_reg:x3; val_offset:2272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2272*FLEN/8, x4, x1, x2)

inst_1137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cc0eaf7a5fbe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8cc0eaf7a5fbe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8cc0eaf7a5fbe; op2val:0xbfe8cc0eaf7a5fbe; 
   valaddr_reg:x3; val_offset:2274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2274*FLEN/8, x4, x1, x2)

inst_1138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cc0eaf7a5fbe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8cc0eaf7a5fbe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8cc0eaf7a5fbe; op2val:0xbfe8cc0eaf7a5fbe; 
   valaddr_reg:x3; val_offset:2276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2276*FLEN/8, x4, x1, x2)

inst_1139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cc0eaf7a5fbe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8cc0eaf7a5fbe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8cc0eaf7a5fbe; op2val:0xbfe8cc0eaf7a5fbe; 
   valaddr_reg:x3; val_offset:2278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2278*FLEN/8, x4, x1, x2)

inst_1140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eef773b64d0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8eef773b64d0e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8eef773b64d0e; op2val:0xbfe8eef773b64d0e; 
   valaddr_reg:x3; val_offset:2280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2280*FLEN/8, x4, x1, x2)

inst_1141:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eef773b64d0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8eef773b64d0e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8eef773b64d0e; op2val:0xbfe8eef773b64d0e; 
   valaddr_reg:x3; val_offset:2282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2282*FLEN/8, x4, x1, x2)

inst_1142:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eef773b64d0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8eef773b64d0e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8eef773b64d0e; op2val:0xbfe8eef773b64d0e; 
   valaddr_reg:x3; val_offset:2284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2284*FLEN/8, x4, x1, x2)

inst_1143:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eef773b64d0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8eef773b64d0e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8eef773b64d0e; op2val:0xbfe8eef773b64d0e; 
   valaddr_reg:x3; val_offset:2286*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2286*FLEN/8, x4, x1, x2)

inst_1144:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eef773b64d0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8eef773b64d0e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe8eef773b64d0e; op2val:0xbfe8eef773b64d0e; 
   valaddr_reg:x3; val_offset:2288*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2288*FLEN/8, x4, x1, x2)

inst_1145:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95957527f683e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95957527f683e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe95957527f683e; op2val:0xbfe95957527f683e; 
   valaddr_reg:x3; val_offset:2290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2290*FLEN/8, x4, x1, x2)

inst_1146:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95957527f683e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95957527f683e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe95957527f683e; op2val:0xbfe95957527f683e; 
   valaddr_reg:x3; val_offset:2292*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2292*FLEN/8, x4, x1, x2)

inst_1147:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95957527f683e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95957527f683e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe95957527f683e; op2val:0xbfe95957527f683e; 
   valaddr_reg:x3; val_offset:2294*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2294*FLEN/8, x4, x1, x2)

inst_1148:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95957527f683e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95957527f683e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe95957527f683e; op2val:0xbfe95957527f683e; 
   valaddr_reg:x3; val_offset:2296*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2296*FLEN/8, x4, x1, x2)

inst_1149:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95957527f683e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95957527f683e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe95957527f683e; op2val:0xbfe95957527f683e; 
   valaddr_reg:x3; val_offset:2298*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2298*FLEN/8, x4, x1, x2)

inst_1150:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95e5b0d6f9e6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95e5b0d6f9e6a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe95e5b0d6f9e6a; op2val:0xbfe95e5b0d6f9e6a; 
   valaddr_reg:x3; val_offset:2300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2300*FLEN/8, x4, x1, x2)

inst_1151:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95e5b0d6f9e6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95e5b0d6f9e6a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe95e5b0d6f9e6a; op2val:0xbfe95e5b0d6f9e6a; 
   valaddr_reg:x3; val_offset:2302*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2302*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_10)

inst_1152:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95e5b0d6f9e6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95e5b0d6f9e6a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe95e5b0d6f9e6a; op2val:0xbfe95e5b0d6f9e6a; 
   valaddr_reg:x3; val_offset:2304*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2304*FLEN/8, x4, x1, x2)

inst_1153:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95e5b0d6f9e6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95e5b0d6f9e6a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe95e5b0d6f9e6a; op2val:0xbfe95e5b0d6f9e6a; 
   valaddr_reg:x3; val_offset:2306*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2306*FLEN/8, x4, x1, x2)

inst_1154:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95e5b0d6f9e6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95e5b0d6f9e6a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe95e5b0d6f9e6a; op2val:0xbfe95e5b0d6f9e6a; 
   valaddr_reg:x3; val_offset:2308*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2308*FLEN/8, x4, x1, x2)

inst_1155:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9725a915d2a42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9725a915d2a42 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9725a915d2a42; op2val:0xbfe9725a915d2a42; 
   valaddr_reg:x3; val_offset:2310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2310*FLEN/8, x4, x1, x2)

inst_1156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9725a915d2a42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9725a915d2a42 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9725a915d2a42; op2val:0xbfe9725a915d2a42; 
   valaddr_reg:x3; val_offset:2312*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2312*FLEN/8, x4, x1, x2)

inst_1157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9725a915d2a42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9725a915d2a42 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9725a915d2a42; op2val:0xbfe9725a915d2a42; 
   valaddr_reg:x3; val_offset:2314*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2314*FLEN/8, x4, x1, x2)

inst_1158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9725a915d2a42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9725a915d2a42 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9725a915d2a42; op2val:0xbfe9725a915d2a42; 
   valaddr_reg:x3; val_offset:2316*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2316*FLEN/8, x4, x1, x2)

inst_1159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9725a915d2a42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9725a915d2a42 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9725a915d2a42; op2val:0xbfe9725a915d2a42; 
   valaddr_reg:x3; val_offset:2318*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2318*FLEN/8, x4, x1, x2)

inst_1160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x978e962837c30 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x978e962837c30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe978e962837c30; op2val:0xbfe978e962837c30; 
   valaddr_reg:x3; val_offset:2320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2320*FLEN/8, x4, x1, x2)

inst_1161:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x978e962837c30 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x978e962837c30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe978e962837c30; op2val:0xbfe978e962837c30; 
   valaddr_reg:x3; val_offset:2322*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2322*FLEN/8, x4, x1, x2)

inst_1162:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x978e962837c30 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x978e962837c30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe978e962837c30; op2val:0xbfe978e962837c30; 
   valaddr_reg:x3; val_offset:2324*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2324*FLEN/8, x4, x1, x2)

inst_1163:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x978e962837c30 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x978e962837c30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe978e962837c30; op2val:0xbfe978e962837c30; 
   valaddr_reg:x3; val_offset:2326*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2326*FLEN/8, x4, x1, x2)

inst_1164:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x978e962837c30 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x978e962837c30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe978e962837c30; op2val:0xbfe978e962837c30; 
   valaddr_reg:x3; val_offset:2328*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2328*FLEN/8, x4, x1, x2)

inst_1165:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x97bc82ad232bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x97bc82ad232bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe97bc82ad232bd; op2val:0xbfe97bc82ad232bd; 
   valaddr_reg:x3; val_offset:2330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2330*FLEN/8, x4, x1, x2)

inst_1166:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x97bc82ad232bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x97bc82ad232bd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe97bc82ad232bd; op2val:0xbfe97bc82ad232bd; 
   valaddr_reg:x3; val_offset:2332*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2332*FLEN/8, x4, x1, x2)

inst_1167:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x97bc82ad232bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x97bc82ad232bd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe97bc82ad232bd; op2val:0xbfe97bc82ad232bd; 
   valaddr_reg:x3; val_offset:2334*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2334*FLEN/8, x4, x1, x2)

inst_1168:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x97bc82ad232bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x97bc82ad232bd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe97bc82ad232bd; op2val:0xbfe97bc82ad232bd; 
   valaddr_reg:x3; val_offset:2336*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2336*FLEN/8, x4, x1, x2)

inst_1169:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x97bc82ad232bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x97bc82ad232bd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe97bc82ad232bd; op2val:0xbfe97bc82ad232bd; 
   valaddr_reg:x3; val_offset:2338*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2338*FLEN/8, x4, x1, x2)

inst_1170:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99ee09af59fa1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x99ee09af59fa1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe99ee09af59fa1; op2val:0xbfe99ee09af59fa1; 
   valaddr_reg:x3; val_offset:2340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2340*FLEN/8, x4, x1, x2)

inst_1171:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99ee09af59fa1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x99ee09af59fa1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe99ee09af59fa1; op2val:0xbfe99ee09af59fa1; 
   valaddr_reg:x3; val_offset:2342*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2342*FLEN/8, x4, x1, x2)

inst_1172:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99ee09af59fa1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x99ee09af59fa1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe99ee09af59fa1; op2val:0xbfe99ee09af59fa1; 
   valaddr_reg:x3; val_offset:2344*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2344*FLEN/8, x4, x1, x2)

inst_1173:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99ee09af59fa1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x99ee09af59fa1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe99ee09af59fa1; op2val:0xbfe99ee09af59fa1; 
   valaddr_reg:x3; val_offset:2346*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2346*FLEN/8, x4, x1, x2)

inst_1174:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99ee09af59fa1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x99ee09af59fa1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe99ee09af59fa1; op2val:0xbfe99ee09af59fa1; 
   valaddr_reg:x3; val_offset:2348*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2348*FLEN/8, x4, x1, x2)

inst_1175:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9e2c74454f8fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9e2c74454f8fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9e2c74454f8fb; op2val:0xbfe9e2c74454f8fb; 
   valaddr_reg:x3; val_offset:2350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2350*FLEN/8, x4, x1, x2)

inst_1176:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9e2c74454f8fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9e2c74454f8fb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9e2c74454f8fb; op2val:0xbfe9e2c74454f8fb; 
   valaddr_reg:x3; val_offset:2352*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2352*FLEN/8, x4, x1, x2)

inst_1177:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9e2c74454f8fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9e2c74454f8fb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9e2c74454f8fb; op2val:0xbfe9e2c74454f8fb; 
   valaddr_reg:x3; val_offset:2354*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2354*FLEN/8, x4, x1, x2)

inst_1178:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9e2c74454f8fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9e2c74454f8fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9e2c74454f8fb; op2val:0xbfe9e2c74454f8fb; 
   valaddr_reg:x3; val_offset:2356*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2356*FLEN/8, x4, x1, x2)

inst_1179:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9e2c74454f8fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9e2c74454f8fb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9e2c74454f8fb; op2val:0xbfe9e2c74454f8fb; 
   valaddr_reg:x3; val_offset:2358*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2358*FLEN/8, x4, x1, x2)

inst_1180:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9f08198b6d14d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f08198b6d14d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9f08198b6d14d; op2val:0xbfe9f08198b6d14d; 
   valaddr_reg:x3; val_offset:2360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2360*FLEN/8, x4, x1, x2)

inst_1181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9f08198b6d14d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f08198b6d14d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9f08198b6d14d; op2val:0xbfe9f08198b6d14d; 
   valaddr_reg:x3; val_offset:2362*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2362*FLEN/8, x4, x1, x2)

inst_1182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9f08198b6d14d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f08198b6d14d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9f08198b6d14d; op2val:0xbfe9f08198b6d14d; 
   valaddr_reg:x3; val_offset:2364*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2364*FLEN/8, x4, x1, x2)

inst_1183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9f08198b6d14d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f08198b6d14d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9f08198b6d14d; op2val:0xbfe9f08198b6d14d; 
   valaddr_reg:x3; val_offset:2366*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2366*FLEN/8, x4, x1, x2)

inst_1184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9f08198b6d14d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f08198b6d14d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9f08198b6d14d; op2val:0xbfe9f08198b6d14d; 
   valaddr_reg:x3; val_offset:2368*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2368*FLEN/8, x4, x1, x2)

inst_1185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fbe4b5ce45c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fbe4b5ce45c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9fbe4b5ce45c0; op2val:0xbfe9fbe4b5ce45c0; 
   valaddr_reg:x3; val_offset:2370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2370*FLEN/8, x4, x1, x2)

inst_1186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fbe4b5ce45c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fbe4b5ce45c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9fbe4b5ce45c0; op2val:0xbfe9fbe4b5ce45c0; 
   valaddr_reg:x3; val_offset:2372*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2372*FLEN/8, x4, x1, x2)

inst_1187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fbe4b5ce45c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fbe4b5ce45c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9fbe4b5ce45c0; op2val:0xbfe9fbe4b5ce45c0; 
   valaddr_reg:x3; val_offset:2374*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2374*FLEN/8, x4, x1, x2)

inst_1188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fbe4b5ce45c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fbe4b5ce45c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9fbe4b5ce45c0; op2val:0xbfe9fbe4b5ce45c0; 
   valaddr_reg:x3; val_offset:2376*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2376*FLEN/8, x4, x1, x2)

inst_1189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fbe4b5ce45c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fbe4b5ce45c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fe9fbe4b5ce45c0; op2val:0xbfe9fbe4b5ce45c0; 
   valaddr_reg:x3; val_offset:2378*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2378*FLEN/8, x4, x1, x2)

inst_1190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac1a78766ff7c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xac1a78766ff7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feac1a78766ff7c; op2val:0xbfeac1a78766ff7c; 
   valaddr_reg:x3; val_offset:2380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2380*FLEN/8, x4, x1, x2)

inst_1191:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac1a78766ff7c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xac1a78766ff7c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feac1a78766ff7c; op2val:0xbfeac1a78766ff7c; 
   valaddr_reg:x3; val_offset:2382*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2382*FLEN/8, x4, x1, x2)

inst_1192:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac1a78766ff7c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xac1a78766ff7c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feac1a78766ff7c; op2val:0xbfeac1a78766ff7c; 
   valaddr_reg:x3; val_offset:2384*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2384*FLEN/8, x4, x1, x2)

inst_1193:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac1a78766ff7c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xac1a78766ff7c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feac1a78766ff7c; op2val:0xbfeac1a78766ff7c; 
   valaddr_reg:x3; val_offset:2386*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2386*FLEN/8, x4, x1, x2)

inst_1194:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac1a78766ff7c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xac1a78766ff7c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feac1a78766ff7c; op2val:0xbfeac1a78766ff7c; 
   valaddr_reg:x3; val_offset:2388*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2388*FLEN/8, x4, x1, x2)

inst_1195:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf43b4a36ec2c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf43b4a36ec2c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feaf43b4a36ec2c; op2val:0xbfeaf43b4a36ec2c; 
   valaddr_reg:x3; val_offset:2390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2390*FLEN/8, x4, x1, x2)

inst_1196:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf43b4a36ec2c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf43b4a36ec2c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feaf43b4a36ec2c; op2val:0xbfeaf43b4a36ec2c; 
   valaddr_reg:x3; val_offset:2392*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2392*FLEN/8, x4, x1, x2)

inst_1197:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf43b4a36ec2c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf43b4a36ec2c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feaf43b4a36ec2c; op2val:0xbfeaf43b4a36ec2c; 
   valaddr_reg:x3; val_offset:2394*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2394*FLEN/8, x4, x1, x2)

inst_1198:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf43b4a36ec2c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf43b4a36ec2c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feaf43b4a36ec2c; op2val:0xbfeaf43b4a36ec2c; 
   valaddr_reg:x3; val_offset:2396*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2396*FLEN/8, x4, x1, x2)

inst_1199:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf43b4a36ec2c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf43b4a36ec2c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feaf43b4a36ec2c; op2val:0xbfeaf43b4a36ec2c; 
   valaddr_reg:x3; val_offset:2398*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2398*FLEN/8, x4, x1, x2)

inst_1200:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb27f230c243bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb27f230c243bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb27f230c243bc; op2val:0xbfeb27f230c243bc; 
   valaddr_reg:x3; val_offset:2400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2400*FLEN/8, x4, x1, x2)

inst_1201:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb27f230c243bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb27f230c243bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb27f230c243bc; op2val:0xbfeb27f230c243bc; 
   valaddr_reg:x3; val_offset:2402*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2402*FLEN/8, x4, x1, x2)

inst_1202:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb27f230c243bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb27f230c243bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb27f230c243bc; op2val:0xbfeb27f230c243bc; 
   valaddr_reg:x3; val_offset:2404*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2404*FLEN/8, x4, x1, x2)

inst_1203:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb27f230c243bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb27f230c243bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb27f230c243bc; op2val:0xbfeb27f230c243bc; 
   valaddr_reg:x3; val_offset:2406*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2406*FLEN/8, x4, x1, x2)

inst_1204:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb27f230c243bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb27f230c243bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb27f230c243bc; op2val:0xbfeb27f230c243bc; 
   valaddr_reg:x3; val_offset:2408*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2408*FLEN/8, x4, x1, x2)

inst_1205:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2844d394bd65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb2844d394bd65 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb2844d394bd65; op2val:0xbfeb2844d394bd65; 
   valaddr_reg:x3; val_offset:2410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2410*FLEN/8, x4, x1, x2)

inst_1206:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2844d394bd65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb2844d394bd65 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb2844d394bd65; op2val:0xbfeb2844d394bd65; 
   valaddr_reg:x3; val_offset:2412*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2412*FLEN/8, x4, x1, x2)

inst_1207:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2844d394bd65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb2844d394bd65 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb2844d394bd65; op2val:0xbfeb2844d394bd65; 
   valaddr_reg:x3; val_offset:2414*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2414*FLEN/8, x4, x1, x2)

inst_1208:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2844d394bd65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb2844d394bd65 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb2844d394bd65; op2val:0xbfeb2844d394bd65; 
   valaddr_reg:x3; val_offset:2416*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2416*FLEN/8, x4, x1, x2)

inst_1209:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2844d394bd65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb2844d394bd65 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb2844d394bd65; op2val:0xbfeb2844d394bd65; 
   valaddr_reg:x3; val_offset:2418*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2418*FLEN/8, x4, x1, x2)

inst_1210:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3cdee88674b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb3cdee88674b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb3cdee88674b0; op2val:0xbfeb3cdee88674b0; 
   valaddr_reg:x3; val_offset:2420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2420*FLEN/8, x4, x1, x2)

inst_1211:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3cdee88674b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb3cdee88674b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb3cdee88674b0; op2val:0xbfeb3cdee88674b0; 
   valaddr_reg:x3; val_offset:2422*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2422*FLEN/8, x4, x1, x2)

inst_1212:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3cdee88674b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb3cdee88674b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb3cdee88674b0; op2val:0xbfeb3cdee88674b0; 
   valaddr_reg:x3; val_offset:2424*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2424*FLEN/8, x4, x1, x2)

inst_1213:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3cdee88674b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb3cdee88674b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb3cdee88674b0; op2val:0xbfeb3cdee88674b0; 
   valaddr_reg:x3; val_offset:2426*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2426*FLEN/8, x4, x1, x2)

inst_1214:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3cdee88674b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb3cdee88674b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb3cdee88674b0; op2val:0xbfeb3cdee88674b0; 
   valaddr_reg:x3; val_offset:2428*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2428*FLEN/8, x4, x1, x2)

inst_1215:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51080094264f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51080094264f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb51080094264f; op2val:0xbfeb51080094264f; 
   valaddr_reg:x3; val_offset:2430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2430*FLEN/8, x4, x1, x2)

inst_1216:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51080094264f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51080094264f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb51080094264f; op2val:0xbfeb51080094264f; 
   valaddr_reg:x3; val_offset:2432*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2432*FLEN/8, x4, x1, x2)

inst_1217:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51080094264f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51080094264f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb51080094264f; op2val:0xbfeb51080094264f; 
   valaddr_reg:x3; val_offset:2434*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2434*FLEN/8, x4, x1, x2)

inst_1218:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51080094264f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51080094264f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb51080094264f; op2val:0xbfeb51080094264f; 
   valaddr_reg:x3; val_offset:2436*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2436*FLEN/8, x4, x1, x2)

inst_1219:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51080094264f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51080094264f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb51080094264f; op2val:0xbfeb51080094264f; 
   valaddr_reg:x3; val_offset:2438*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2438*FLEN/8, x4, x1, x2)

inst_1220:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51106394dbf5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51106394dbf5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb51106394dbf5; op2val:0xbfeb51106394dbf5; 
   valaddr_reg:x3; val_offset:2440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2440*FLEN/8, x4, x1, x2)

inst_1221:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51106394dbf5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51106394dbf5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb51106394dbf5; op2val:0xbfeb51106394dbf5; 
   valaddr_reg:x3; val_offset:2442*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2442*FLEN/8, x4, x1, x2)

inst_1222:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51106394dbf5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51106394dbf5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb51106394dbf5; op2val:0xbfeb51106394dbf5; 
   valaddr_reg:x3; val_offset:2444*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2444*FLEN/8, x4, x1, x2)

inst_1223:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51106394dbf5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51106394dbf5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb51106394dbf5; op2val:0xbfeb51106394dbf5; 
   valaddr_reg:x3; val_offset:2446*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2446*FLEN/8, x4, x1, x2)

inst_1224:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51106394dbf5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51106394dbf5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb51106394dbf5; op2val:0xbfeb51106394dbf5; 
   valaddr_reg:x3; val_offset:2448*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2448*FLEN/8, x4, x1, x2)

inst_1225:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb70164e941a8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb70164e941a8f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb70164e941a8f; op2val:0xbfeb70164e941a8f; 
   valaddr_reg:x3; val_offset:2450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2450*FLEN/8, x4, x1, x2)

inst_1226:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb70164e941a8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb70164e941a8f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb70164e941a8f; op2val:0xbfeb70164e941a8f; 
   valaddr_reg:x3; val_offset:2452*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2452*FLEN/8, x4, x1, x2)

inst_1227:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb70164e941a8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb70164e941a8f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb70164e941a8f; op2val:0xbfeb70164e941a8f; 
   valaddr_reg:x3; val_offset:2454*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2454*FLEN/8, x4, x1, x2)

inst_1228:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb70164e941a8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb70164e941a8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb70164e941a8f; op2val:0xbfeb70164e941a8f; 
   valaddr_reg:x3; val_offset:2456*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2456*FLEN/8, x4, x1, x2)

inst_1229:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb70164e941a8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb70164e941a8f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb70164e941a8f; op2val:0xbfeb70164e941a8f; 
   valaddr_reg:x3; val_offset:2458*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2458*FLEN/8, x4, x1, x2)

inst_1230:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7269eda2bcd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb7269eda2bcd7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb7269eda2bcd7; op2val:0xbfeb7269eda2bcd7; 
   valaddr_reg:x3; val_offset:2460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2460*FLEN/8, x4, x1, x2)

inst_1231:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7269eda2bcd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb7269eda2bcd7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb7269eda2bcd7; op2val:0xbfeb7269eda2bcd7; 
   valaddr_reg:x3; val_offset:2462*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2462*FLEN/8, x4, x1, x2)

inst_1232:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7269eda2bcd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb7269eda2bcd7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb7269eda2bcd7; op2val:0xbfeb7269eda2bcd7; 
   valaddr_reg:x3; val_offset:2464*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2464*FLEN/8, x4, x1, x2)

inst_1233:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7269eda2bcd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb7269eda2bcd7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb7269eda2bcd7; op2val:0xbfeb7269eda2bcd7; 
   valaddr_reg:x3; val_offset:2466*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2466*FLEN/8, x4, x1, x2)

inst_1234:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7269eda2bcd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb7269eda2bcd7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feb7269eda2bcd7; op2val:0xbfeb7269eda2bcd7; 
   valaddr_reg:x3; val_offset:2468*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2468*FLEN/8, x4, x1, x2)

inst_1235:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbb04d162bf56 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbbb04d162bf56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febbb04d162bf56; op2val:0xbfebbb04d162bf56; 
   valaddr_reg:x3; val_offset:2470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2470*FLEN/8, x4, x1, x2)

inst_1236:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbb04d162bf56 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbbb04d162bf56 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febbb04d162bf56; op2val:0xbfebbb04d162bf56; 
   valaddr_reg:x3; val_offset:2472*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2472*FLEN/8, x4, x1, x2)

inst_1237:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbb04d162bf56 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbbb04d162bf56 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febbb04d162bf56; op2val:0xbfebbb04d162bf56; 
   valaddr_reg:x3; val_offset:2474*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2474*FLEN/8, x4, x1, x2)

inst_1238:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbb04d162bf56 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbbb04d162bf56 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febbb04d162bf56; op2val:0xbfebbb04d162bf56; 
   valaddr_reg:x3; val_offset:2476*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2476*FLEN/8, x4, x1, x2)

inst_1239:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbb04d162bf56 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbbb04d162bf56 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febbb04d162bf56; op2val:0xbfebbb04d162bf56; 
   valaddr_reg:x3; val_offset:2478*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2478*FLEN/8, x4, x1, x2)

inst_1240:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbecfce70b503f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbecfce70b503f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febecfce70b503f; op2val:0xbfebecfce70b503f; 
   valaddr_reg:x3; val_offset:2480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2480*FLEN/8, x4, x1, x2)

inst_1241:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbecfce70b503f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbecfce70b503f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febecfce70b503f; op2val:0xbfebecfce70b503f; 
   valaddr_reg:x3; val_offset:2482*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2482*FLEN/8, x4, x1, x2)

inst_1242:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbecfce70b503f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbecfce70b503f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febecfce70b503f; op2val:0xbfebecfce70b503f; 
   valaddr_reg:x3; val_offset:2484*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2484*FLEN/8, x4, x1, x2)

inst_1243:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbecfce70b503f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbecfce70b503f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febecfce70b503f; op2val:0xbfebecfce70b503f; 
   valaddr_reg:x3; val_offset:2486*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2486*FLEN/8, x4, x1, x2)

inst_1244:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbecfce70b503f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbecfce70b503f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febecfce70b503f; op2val:0xbfebecfce70b503f; 
   valaddr_reg:x3; val_offset:2488*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2488*FLEN/8, x4, x1, x2)

inst_1245:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbeeb8d82a8716 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbeeb8d82a8716 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febeeb8d82a8716; op2val:0xbfebeeb8d82a8716; 
   valaddr_reg:x3; val_offset:2490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2490*FLEN/8, x4, x1, x2)

inst_1246:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbeeb8d82a8716 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbeeb8d82a8716 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febeeb8d82a8716; op2val:0xbfebeeb8d82a8716; 
   valaddr_reg:x3; val_offset:2492*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2492*FLEN/8, x4, x1, x2)

inst_1247:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbeeb8d82a8716 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbeeb8d82a8716 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febeeb8d82a8716; op2val:0xbfebeeb8d82a8716; 
   valaddr_reg:x3; val_offset:2494*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2494*FLEN/8, x4, x1, x2)

inst_1248:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbeeb8d82a8716 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbeeb8d82a8716 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febeeb8d82a8716; op2val:0xbfebeeb8d82a8716; 
   valaddr_reg:x3; val_offset:2496*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2496*FLEN/8, x4, x1, x2)

inst_1249:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbeeb8d82a8716 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbeeb8d82a8716 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3febeeb8d82a8716; op2val:0xbfebeeb8d82a8716; 
   valaddr_reg:x3; val_offset:2498*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2498*FLEN/8, x4, x1, x2)

inst_1250:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc058a1c1f3f37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc058a1c1f3f37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec058a1c1f3f37; op2val:0xbfec058a1c1f3f37; 
   valaddr_reg:x3; val_offset:2500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2500*FLEN/8, x4, x1, x2)

inst_1251:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc058a1c1f3f37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc058a1c1f3f37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec058a1c1f3f37; op2val:0xbfec058a1c1f3f37; 
   valaddr_reg:x3; val_offset:2502*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2502*FLEN/8, x4, x1, x2)

inst_1252:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc058a1c1f3f37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc058a1c1f3f37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec058a1c1f3f37; op2val:0xbfec058a1c1f3f37; 
   valaddr_reg:x3; val_offset:2504*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2504*FLEN/8, x4, x1, x2)

inst_1253:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc058a1c1f3f37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc058a1c1f3f37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec058a1c1f3f37; op2val:0xbfec058a1c1f3f37; 
   valaddr_reg:x3; val_offset:2506*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2506*FLEN/8, x4, x1, x2)

inst_1254:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc058a1c1f3f37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc058a1c1f3f37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec058a1c1f3f37; op2val:0xbfec058a1c1f3f37; 
   valaddr_reg:x3; val_offset:2508*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2508*FLEN/8, x4, x1, x2)

inst_1255:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc090d021543c6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc090d021543c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec090d021543c6; op2val:0xbfec090d021543c6; 
   valaddr_reg:x3; val_offset:2510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2510*FLEN/8, x4, x1, x2)

inst_1256:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc090d021543c6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc090d021543c6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec090d021543c6; op2val:0xbfec090d021543c6; 
   valaddr_reg:x3; val_offset:2512*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2512*FLEN/8, x4, x1, x2)

inst_1257:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc090d021543c6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc090d021543c6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec090d021543c6; op2val:0xbfec090d021543c6; 
   valaddr_reg:x3; val_offset:2514*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2514*FLEN/8, x4, x1, x2)

inst_1258:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc090d021543c6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc090d021543c6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec090d021543c6; op2val:0xbfec090d021543c6; 
   valaddr_reg:x3; val_offset:2516*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2516*FLEN/8, x4, x1, x2)

inst_1259:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc090d021543c6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc090d021543c6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec090d021543c6; op2val:0xbfec090d021543c6; 
   valaddr_reg:x3; val_offset:2518*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2518*FLEN/8, x4, x1, x2)

inst_1260:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc31e30e02fb81 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc31e30e02fb81 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec31e30e02fb81; op2val:0xbfec31e30e02fb81; 
   valaddr_reg:x3; val_offset:2520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2520*FLEN/8, x4, x1, x2)

inst_1261:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc31e30e02fb81 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc31e30e02fb81 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec31e30e02fb81; op2val:0xbfec31e30e02fb81; 
   valaddr_reg:x3; val_offset:2522*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2522*FLEN/8, x4, x1, x2)

inst_1262:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc31e30e02fb81 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc31e30e02fb81 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec31e30e02fb81; op2val:0xbfec31e30e02fb81; 
   valaddr_reg:x3; val_offset:2524*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2524*FLEN/8, x4, x1, x2)

inst_1263:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc31e30e02fb81 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc31e30e02fb81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec31e30e02fb81; op2val:0xbfec31e30e02fb81; 
   valaddr_reg:x3; val_offset:2526*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2526*FLEN/8, x4, x1, x2)

inst_1264:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc31e30e02fb81 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc31e30e02fb81 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec31e30e02fb81; op2val:0xbfec31e30e02fb81; 
   valaddr_reg:x3; val_offset:2528*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2528*FLEN/8, x4, x1, x2)

inst_1265:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc406f952dbd28 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc406f952dbd28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec406f952dbd28; op2val:0xbfec406f952dbd28; 
   valaddr_reg:x3; val_offset:2530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2530*FLEN/8, x4, x1, x2)

inst_1266:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc406f952dbd28 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc406f952dbd28 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec406f952dbd28; op2val:0xbfec406f952dbd28; 
   valaddr_reg:x3; val_offset:2532*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2532*FLEN/8, x4, x1, x2)

inst_1267:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc406f952dbd28 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc406f952dbd28 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec406f952dbd28; op2val:0xbfec406f952dbd28; 
   valaddr_reg:x3; val_offset:2534*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2534*FLEN/8, x4, x1, x2)

inst_1268:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc406f952dbd28 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc406f952dbd28 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec406f952dbd28; op2val:0xbfec406f952dbd28; 
   valaddr_reg:x3; val_offset:2536*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2536*FLEN/8, x4, x1, x2)

inst_1269:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc406f952dbd28 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc406f952dbd28 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec406f952dbd28; op2val:0xbfec406f952dbd28; 
   valaddr_reg:x3; val_offset:2538*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2538*FLEN/8, x4, x1, x2)

inst_1270:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc674aea17dd8e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc674aea17dd8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec674aea17dd8e; op2val:0xbfec674aea17dd8e; 
   valaddr_reg:x3; val_offset:2540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2540*FLEN/8, x4, x1, x2)

inst_1271:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc674aea17dd8e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc674aea17dd8e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec674aea17dd8e; op2val:0xbfec674aea17dd8e; 
   valaddr_reg:x3; val_offset:2542*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2542*FLEN/8, x4, x1, x2)

inst_1272:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc674aea17dd8e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc674aea17dd8e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec674aea17dd8e; op2val:0xbfec674aea17dd8e; 
   valaddr_reg:x3; val_offset:2544*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2544*FLEN/8, x4, x1, x2)

inst_1273:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc674aea17dd8e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc674aea17dd8e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec674aea17dd8e; op2val:0xbfec674aea17dd8e; 
   valaddr_reg:x3; val_offset:2546*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2546*FLEN/8, x4, x1, x2)

inst_1274:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc674aea17dd8e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc674aea17dd8e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec674aea17dd8e; op2val:0xbfec674aea17dd8e; 
   valaddr_reg:x3; val_offset:2548*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2548*FLEN/8, x4, x1, x2)

inst_1275:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82991ecb5189 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc82991ecb5189 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec82991ecb5189; op2val:0xbfec82991ecb5189; 
   valaddr_reg:x3; val_offset:2550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2550*FLEN/8, x4, x1, x2)

inst_1276:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82991ecb5189 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc82991ecb5189 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec82991ecb5189; op2val:0xbfec82991ecb5189; 
   valaddr_reg:x3; val_offset:2552*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2552*FLEN/8, x4, x1, x2)

inst_1277:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82991ecb5189 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc82991ecb5189 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec82991ecb5189; op2val:0xbfec82991ecb5189; 
   valaddr_reg:x3; val_offset:2554*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2554*FLEN/8, x4, x1, x2)

inst_1278:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82991ecb5189 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc82991ecb5189 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec82991ecb5189; op2val:0xbfec82991ecb5189; 
   valaddr_reg:x3; val_offset:2556*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2556*FLEN/8, x4, x1, x2)

inst_1279:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82991ecb5189 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc82991ecb5189 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fec82991ecb5189; op2val:0xbfec82991ecb5189; 
   valaddr_reg:x3; val_offset:2558*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2558*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_11)

inst_1280:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0829ca80923 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc0829ca80923 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc0829ca80923; op2val:0xbfecc0829ca80923; 
   valaddr_reg:x3; val_offset:2560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2560*FLEN/8, x4, x1, x2)

inst_1281:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0829ca80923 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc0829ca80923 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc0829ca80923; op2val:0xbfecc0829ca80923; 
   valaddr_reg:x3; val_offset:2562*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2562*FLEN/8, x4, x1, x2)

inst_1282:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0829ca80923 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc0829ca80923 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc0829ca80923; op2val:0xbfecc0829ca80923; 
   valaddr_reg:x3; val_offset:2564*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2564*FLEN/8, x4, x1, x2)

inst_1283:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0829ca80923 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc0829ca80923 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc0829ca80923; op2val:0xbfecc0829ca80923; 
   valaddr_reg:x3; val_offset:2566*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2566*FLEN/8, x4, x1, x2)

inst_1284:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0829ca80923 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc0829ca80923 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc0829ca80923; op2val:0xbfecc0829ca80923; 
   valaddr_reg:x3; val_offset:2568*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2568*FLEN/8, x4, x1, x2)

inst_1285:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc540d133e4a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc540d133e4a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc540d133e4a4; op2val:0xbfecc540d133e4a4; 
   valaddr_reg:x3; val_offset:2570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2570*FLEN/8, x4, x1, x2)

inst_1286:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc540d133e4a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc540d133e4a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc540d133e4a4; op2val:0xbfecc540d133e4a4; 
   valaddr_reg:x3; val_offset:2572*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2572*FLEN/8, x4, x1, x2)

inst_1287:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc540d133e4a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc540d133e4a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc540d133e4a4; op2val:0xbfecc540d133e4a4; 
   valaddr_reg:x3; val_offset:2574*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2574*FLEN/8, x4, x1, x2)

inst_1288:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc540d133e4a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc540d133e4a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc540d133e4a4; op2val:0xbfecc540d133e4a4; 
   valaddr_reg:x3; val_offset:2576*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2576*FLEN/8, x4, x1, x2)

inst_1289:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc540d133e4a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc540d133e4a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecc540d133e4a4; op2val:0xbfecc540d133e4a4; 
   valaddr_reg:x3; val_offset:2578*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2578*FLEN/8, x4, x1, x2)

inst_1290:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb51de18fae1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xccb51de18fae1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feccb51de18fae1; op2val:0xbfeccb51de18fae1; 
   valaddr_reg:x3; val_offset:2580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2580*FLEN/8, x4, x1, x2)

inst_1291:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb51de18fae1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xccb51de18fae1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feccb51de18fae1; op2val:0xbfeccb51de18fae1; 
   valaddr_reg:x3; val_offset:2582*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2582*FLEN/8, x4, x1, x2)

inst_1292:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb51de18fae1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xccb51de18fae1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feccb51de18fae1; op2val:0xbfeccb51de18fae1; 
   valaddr_reg:x3; val_offset:2584*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2584*FLEN/8, x4, x1, x2)

inst_1293:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb51de18fae1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xccb51de18fae1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feccb51de18fae1; op2val:0xbfeccb51de18fae1; 
   valaddr_reg:x3; val_offset:2586*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2586*FLEN/8, x4, x1, x2)

inst_1294:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb51de18fae1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xccb51de18fae1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feccb51de18fae1; op2val:0xbfeccb51de18fae1; 
   valaddr_reg:x3; val_offset:2588*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2588*FLEN/8, x4, x1, x2)

inst_1295:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcdef35f3cf813 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcdef35f3cf813 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecdef35f3cf813; op2val:0xbfecdef35f3cf813; 
   valaddr_reg:x3; val_offset:2590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2590*FLEN/8, x4, x1, x2)

inst_1296:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcdef35f3cf813 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcdef35f3cf813 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecdef35f3cf813; op2val:0xbfecdef35f3cf813; 
   valaddr_reg:x3; val_offset:2592*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2592*FLEN/8, x4, x1, x2)

inst_1297:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcdef35f3cf813 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcdef35f3cf813 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecdef35f3cf813; op2val:0xbfecdef35f3cf813; 
   valaddr_reg:x3; val_offset:2594*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2594*FLEN/8, x4, x1, x2)

inst_1298:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcdef35f3cf813 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcdef35f3cf813 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecdef35f3cf813; op2val:0xbfecdef35f3cf813; 
   valaddr_reg:x3; val_offset:2596*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2596*FLEN/8, x4, x1, x2)

inst_1299:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcdef35f3cf813 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcdef35f3cf813 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fecdef35f3cf813; op2val:0xbfecdef35f3cf813; 
   valaddr_reg:x3; val_offset:2598*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2598*FLEN/8, x4, x1, x2)

inst_1300:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd023e28e50670 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd023e28e50670 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed023e28e50670; op2val:0xbfed023e28e50670; 
   valaddr_reg:x3; val_offset:2600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2600*FLEN/8, x4, x1, x2)

inst_1301:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd023e28e50670 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd023e28e50670 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed023e28e50670; op2val:0xbfed023e28e50670; 
   valaddr_reg:x3; val_offset:2602*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2602*FLEN/8, x4, x1, x2)

inst_1302:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd023e28e50670 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd023e28e50670 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed023e28e50670; op2val:0xbfed023e28e50670; 
   valaddr_reg:x3; val_offset:2604*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2604*FLEN/8, x4, x1, x2)

inst_1303:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd023e28e50670 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd023e28e50670 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed023e28e50670; op2val:0xbfed023e28e50670; 
   valaddr_reg:x3; val_offset:2606*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2606*FLEN/8, x4, x1, x2)

inst_1304:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd023e28e50670 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd023e28e50670 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed023e28e50670; op2val:0xbfed023e28e50670; 
   valaddr_reg:x3; val_offset:2608*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2608*FLEN/8, x4, x1, x2)

inst_1305:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6cfce406f0ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd6cfce406f0ee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed6cfce406f0ee; op2val:0xbfed6cfce406f0ee; 
   valaddr_reg:x3; val_offset:2610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2610*FLEN/8, x4, x1, x2)

inst_1306:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6cfce406f0ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd6cfce406f0ee and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed6cfce406f0ee; op2val:0xbfed6cfce406f0ee; 
   valaddr_reg:x3; val_offset:2612*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2612*FLEN/8, x4, x1, x2)

inst_1307:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6cfce406f0ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd6cfce406f0ee and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed6cfce406f0ee; op2val:0xbfed6cfce406f0ee; 
   valaddr_reg:x3; val_offset:2614*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2614*FLEN/8, x4, x1, x2)

inst_1308:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6cfce406f0ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd6cfce406f0ee and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed6cfce406f0ee; op2val:0xbfed6cfce406f0ee; 
   valaddr_reg:x3; val_offset:2616*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2616*FLEN/8, x4, x1, x2)

inst_1309:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6cfce406f0ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd6cfce406f0ee and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fed6cfce406f0ee; op2val:0xbfed6cfce406f0ee; 
   valaddr_reg:x3; val_offset:2618*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2618*FLEN/8, x4, x1, x2)

inst_1310:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8411778cfae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xda8411778cfae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feda8411778cfae; op2val:0xbfeda8411778cfae; 
   valaddr_reg:x3; val_offset:2620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2620*FLEN/8, x4, x1, x2)

inst_1311:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8411778cfae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xda8411778cfae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feda8411778cfae; op2val:0xbfeda8411778cfae; 
   valaddr_reg:x3; val_offset:2622*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2622*FLEN/8, x4, x1, x2)

inst_1312:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8411778cfae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xda8411778cfae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feda8411778cfae; op2val:0xbfeda8411778cfae; 
   valaddr_reg:x3; val_offset:2624*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2624*FLEN/8, x4, x1, x2)

inst_1313:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8411778cfae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xda8411778cfae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feda8411778cfae; op2val:0xbfeda8411778cfae; 
   valaddr_reg:x3; val_offset:2626*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2626*FLEN/8, x4, x1, x2)

inst_1314:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8411778cfae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xda8411778cfae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feda8411778cfae; op2val:0xbfeda8411778cfae; 
   valaddr_reg:x3; val_offset:2628*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2628*FLEN/8, x4, x1, x2)

inst_1315:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbfdc6b83b57d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdbfdc6b83b57d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedbfdc6b83b57d; op2val:0xbfedbfdc6b83b57d; 
   valaddr_reg:x3; val_offset:2630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2630*FLEN/8, x4, x1, x2)

inst_1316:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbfdc6b83b57d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdbfdc6b83b57d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedbfdc6b83b57d; op2val:0xbfedbfdc6b83b57d; 
   valaddr_reg:x3; val_offset:2632*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2632*FLEN/8, x4, x1, x2)

inst_1317:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbfdc6b83b57d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdbfdc6b83b57d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedbfdc6b83b57d; op2val:0xbfedbfdc6b83b57d; 
   valaddr_reg:x3; val_offset:2634*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2634*FLEN/8, x4, x1, x2)

inst_1318:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbfdc6b83b57d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdbfdc6b83b57d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedbfdc6b83b57d; op2val:0xbfedbfdc6b83b57d; 
   valaddr_reg:x3; val_offset:2636*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2636*FLEN/8, x4, x1, x2)

inst_1319:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbfdc6b83b57d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdbfdc6b83b57d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedbfdc6b83b57d; op2val:0xbfedbfdc6b83b57d; 
   valaddr_reg:x3; val_offset:2638*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2638*FLEN/8, x4, x1, x2)

inst_1320:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde062d0ccdb01 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde062d0ccdb01 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede062d0ccdb01; op2val:0xbfede062d0ccdb01; 
   valaddr_reg:x3; val_offset:2640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2640*FLEN/8, x4, x1, x2)

inst_1321:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde062d0ccdb01 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde062d0ccdb01 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede062d0ccdb01; op2val:0xbfede062d0ccdb01; 
   valaddr_reg:x3; val_offset:2642*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2642*FLEN/8, x4, x1, x2)

inst_1322:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde062d0ccdb01 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde062d0ccdb01 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede062d0ccdb01; op2val:0xbfede062d0ccdb01; 
   valaddr_reg:x3; val_offset:2644*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2644*FLEN/8, x4, x1, x2)

inst_1323:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde062d0ccdb01 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde062d0ccdb01 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede062d0ccdb01; op2val:0xbfede062d0ccdb01; 
   valaddr_reg:x3; val_offset:2646*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2646*FLEN/8, x4, x1, x2)

inst_1324:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde062d0ccdb01 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde062d0ccdb01 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede062d0ccdb01; op2val:0xbfede062d0ccdb01; 
   valaddr_reg:x3; val_offset:2648*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2648*FLEN/8, x4, x1, x2)

inst_1325:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde4aeacc4d745 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde4aeacc4d745 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede4aeacc4d745; op2val:0xbfede4aeacc4d745; 
   valaddr_reg:x3; val_offset:2650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2650*FLEN/8, x4, x1, x2)

inst_1326:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde4aeacc4d745 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde4aeacc4d745 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede4aeacc4d745; op2val:0xbfede4aeacc4d745; 
   valaddr_reg:x3; val_offset:2652*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2652*FLEN/8, x4, x1, x2)

inst_1327:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde4aeacc4d745 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde4aeacc4d745 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede4aeacc4d745; op2val:0xbfede4aeacc4d745; 
   valaddr_reg:x3; val_offset:2654*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2654*FLEN/8, x4, x1, x2)

inst_1328:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde4aeacc4d745 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde4aeacc4d745 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede4aeacc4d745; op2val:0xbfede4aeacc4d745; 
   valaddr_reg:x3; val_offset:2656*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2656*FLEN/8, x4, x1, x2)

inst_1329:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde4aeacc4d745 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde4aeacc4d745 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede4aeacc4d745; op2val:0xbfede4aeacc4d745; 
   valaddr_reg:x3; val_offset:2658*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2658*FLEN/8, x4, x1, x2)

inst_1330:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde66f1e06a550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde66f1e06a550 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede66f1e06a550; op2val:0xbfede66f1e06a550; 
   valaddr_reg:x3; val_offset:2660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2660*FLEN/8, x4, x1, x2)

inst_1331:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde66f1e06a550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde66f1e06a550 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede66f1e06a550; op2val:0xbfede66f1e06a550; 
   valaddr_reg:x3; val_offset:2662*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2662*FLEN/8, x4, x1, x2)

inst_1332:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde66f1e06a550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde66f1e06a550 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede66f1e06a550; op2val:0xbfede66f1e06a550; 
   valaddr_reg:x3; val_offset:2664*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2664*FLEN/8, x4, x1, x2)

inst_1333:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde66f1e06a550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde66f1e06a550 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede66f1e06a550; op2val:0xbfede66f1e06a550; 
   valaddr_reg:x3; val_offset:2666*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2666*FLEN/8, x4, x1, x2)

inst_1334:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde66f1e06a550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde66f1e06a550 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fede66f1e06a550; op2val:0xbfede66f1e06a550; 
   valaddr_reg:x3; val_offset:2668*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2668*FLEN/8, x4, x1, x2)

inst_1335:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf4e02cb64ab2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf4e02cb64ab2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedf4e02cb64ab2; op2val:0xbfedf4e02cb64ab2; 
   valaddr_reg:x3; val_offset:2670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2670*FLEN/8, x4, x1, x2)

inst_1336:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf4e02cb64ab2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf4e02cb64ab2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedf4e02cb64ab2; op2val:0xbfedf4e02cb64ab2; 
   valaddr_reg:x3; val_offset:2672*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2672*FLEN/8, x4, x1, x2)

inst_1337:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf4e02cb64ab2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf4e02cb64ab2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedf4e02cb64ab2; op2val:0xbfedf4e02cb64ab2; 
   valaddr_reg:x3; val_offset:2674*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2674*FLEN/8, x4, x1, x2)

inst_1338:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf4e02cb64ab2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf4e02cb64ab2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedf4e02cb64ab2; op2val:0xbfedf4e02cb64ab2; 
   valaddr_reg:x3; val_offset:2676*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2676*FLEN/8, x4, x1, x2)

inst_1339:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf4e02cb64ab2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf4e02cb64ab2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fedf4e02cb64ab2; op2val:0xbfedf4e02cb64ab2; 
   valaddr_reg:x3; val_offset:2678*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2678*FLEN/8, x4, x1, x2)

inst_1340:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe01f9eb584604 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe01f9eb584604 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee01f9eb584604; op2val:0xbfee01f9eb584604; 
   valaddr_reg:x3; val_offset:2680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2680*FLEN/8, x4, x1, x2)

inst_1341:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe01f9eb584604 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe01f9eb584604 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee01f9eb584604; op2val:0xbfee01f9eb584604; 
   valaddr_reg:x3; val_offset:2682*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2682*FLEN/8, x4, x1, x2)

inst_1342:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe01f9eb584604 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe01f9eb584604 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee01f9eb584604; op2val:0xbfee01f9eb584604; 
   valaddr_reg:x3; val_offset:2684*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2684*FLEN/8, x4, x1, x2)

inst_1343:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe01f9eb584604 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe01f9eb584604 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee01f9eb584604; op2val:0xbfee01f9eb584604; 
   valaddr_reg:x3; val_offset:2686*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2686*FLEN/8, x4, x1, x2)

inst_1344:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe01f9eb584604 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe01f9eb584604 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee01f9eb584604; op2val:0xbfee01f9eb584604; 
   valaddr_reg:x3; val_offset:2688*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2688*FLEN/8, x4, x1, x2)

inst_1345:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe247258d86c96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe247258d86c96 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee247258d86c96; op2val:0xbfee247258d86c96; 
   valaddr_reg:x3; val_offset:2690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2690*FLEN/8, x4, x1, x2)

inst_1346:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe247258d86c96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe247258d86c96 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee247258d86c96; op2val:0xbfee247258d86c96; 
   valaddr_reg:x3; val_offset:2692*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2692*FLEN/8, x4, x1, x2)

inst_1347:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe247258d86c96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe247258d86c96 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee247258d86c96; op2val:0xbfee247258d86c96; 
   valaddr_reg:x3; val_offset:2694*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2694*FLEN/8, x4, x1, x2)

inst_1348:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe247258d86c96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe247258d86c96 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee247258d86c96; op2val:0xbfee247258d86c96; 
   valaddr_reg:x3; val_offset:2696*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2696*FLEN/8, x4, x1, x2)

inst_1349:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe247258d86c96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe247258d86c96 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee247258d86c96; op2val:0xbfee247258d86c96; 
   valaddr_reg:x3; val_offset:2698*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2698*FLEN/8, x4, x1, x2)

inst_1350:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe74af12c4bb2b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe74af12c4bb2b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee74af12c4bb2b; op2val:0xbfee74af12c4bb2b; 
   valaddr_reg:x3; val_offset:2700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2700*FLEN/8, x4, x1, x2)

inst_1351:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe74af12c4bb2b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe74af12c4bb2b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee74af12c4bb2b; op2val:0xbfee74af12c4bb2b; 
   valaddr_reg:x3; val_offset:2702*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2702*FLEN/8, x4, x1, x2)

inst_1352:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe74af12c4bb2b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe74af12c4bb2b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee74af12c4bb2b; op2val:0xbfee74af12c4bb2b; 
   valaddr_reg:x3; val_offset:2704*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2704*FLEN/8, x4, x1, x2)

inst_1353:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe74af12c4bb2b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe74af12c4bb2b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee74af12c4bb2b; op2val:0xbfee74af12c4bb2b; 
   valaddr_reg:x3; val_offset:2706*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2706*FLEN/8, x4, x1, x2)

inst_1354:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe74af12c4bb2b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe74af12c4bb2b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee74af12c4bb2b; op2val:0xbfee74af12c4bb2b; 
   valaddr_reg:x3; val_offset:2708*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2708*FLEN/8, x4, x1, x2)

inst_1355:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8512d08e5cad and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8512d08e5cad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee8512d08e5cad; op2val:0xbfee8512d08e5cad; 
   valaddr_reg:x3; val_offset:2710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2710*FLEN/8, x4, x1, x2)

inst_1356:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8512d08e5cad and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8512d08e5cad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee8512d08e5cad; op2val:0xbfee8512d08e5cad; 
   valaddr_reg:x3; val_offset:2712*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2712*FLEN/8, x4, x1, x2)

inst_1357:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8512d08e5cad and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8512d08e5cad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee8512d08e5cad; op2val:0xbfee8512d08e5cad; 
   valaddr_reg:x3; val_offset:2714*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2714*FLEN/8, x4, x1, x2)

inst_1358:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8512d08e5cad and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8512d08e5cad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee8512d08e5cad; op2val:0xbfee8512d08e5cad; 
   valaddr_reg:x3; val_offset:2716*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2716*FLEN/8, x4, x1, x2)

inst_1359:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8512d08e5cad and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8512d08e5cad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee8512d08e5cad; op2val:0xbfee8512d08e5cad; 
   valaddr_reg:x3; val_offset:2718*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2718*FLEN/8, x4, x1, x2)

inst_1360:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe89a781d29de9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe89a781d29de9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee89a781d29de9; op2val:0xbfee89a781d29de9; 
   valaddr_reg:x3; val_offset:2720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2720*FLEN/8, x4, x1, x2)

inst_1361:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe89a781d29de9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe89a781d29de9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee89a781d29de9; op2val:0xbfee89a781d29de9; 
   valaddr_reg:x3; val_offset:2722*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2722*FLEN/8, x4, x1, x2)

inst_1362:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe89a781d29de9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe89a781d29de9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee89a781d29de9; op2val:0xbfee89a781d29de9; 
   valaddr_reg:x3; val_offset:2724*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2724*FLEN/8, x4, x1, x2)

inst_1363:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe89a781d29de9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe89a781d29de9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee89a781d29de9; op2val:0xbfee89a781d29de9; 
   valaddr_reg:x3; val_offset:2726*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2726*FLEN/8, x4, x1, x2)

inst_1364:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe89a781d29de9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe89a781d29de9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee89a781d29de9; op2val:0xbfee89a781d29de9; 
   valaddr_reg:x3; val_offset:2728*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2728*FLEN/8, x4, x1, x2)

inst_1365:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8d7148bb44d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8d7148bb44d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee8d7148bb44d1; op2val:0xbfee8d7148bb44d1; 
   valaddr_reg:x3; val_offset:2730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2730*FLEN/8, x4, x1, x2)

inst_1366:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8d7148bb44d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8d7148bb44d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee8d7148bb44d1; op2val:0xbfee8d7148bb44d1; 
   valaddr_reg:x3; val_offset:2732*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2732*FLEN/8, x4, x1, x2)

inst_1367:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8d7148bb44d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8d7148bb44d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee8d7148bb44d1; op2val:0xbfee8d7148bb44d1; 
   valaddr_reg:x3; val_offset:2734*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2734*FLEN/8, x4, x1, x2)

inst_1368:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8d7148bb44d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8d7148bb44d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee8d7148bb44d1; op2val:0xbfee8d7148bb44d1; 
   valaddr_reg:x3; val_offset:2736*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2736*FLEN/8, x4, x1, x2)

inst_1369:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8d7148bb44d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8d7148bb44d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee8d7148bb44d1; op2val:0xbfee8d7148bb44d1; 
   valaddr_reg:x3; val_offset:2738*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2738*FLEN/8, x4, x1, x2)

inst_1370:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe924d3c646d1d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe924d3c646d1d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee924d3c646d1d; op2val:0xbfee924d3c646d1d; 
   valaddr_reg:x3; val_offset:2740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2740*FLEN/8, x4, x1, x2)

inst_1371:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe924d3c646d1d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe924d3c646d1d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee924d3c646d1d; op2val:0xbfee924d3c646d1d; 
   valaddr_reg:x3; val_offset:2742*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2742*FLEN/8, x4, x1, x2)

inst_1372:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe924d3c646d1d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe924d3c646d1d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee924d3c646d1d; op2val:0xbfee924d3c646d1d; 
   valaddr_reg:x3; val_offset:2744*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2744*FLEN/8, x4, x1, x2)

inst_1373:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe924d3c646d1d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe924d3c646d1d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee924d3c646d1d; op2val:0xbfee924d3c646d1d; 
   valaddr_reg:x3; val_offset:2746*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2746*FLEN/8, x4, x1, x2)

inst_1374:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe924d3c646d1d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe924d3c646d1d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fee924d3c646d1d; op2val:0xbfee924d3c646d1d; 
   valaddr_reg:x3; val_offset:2748*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2748*FLEN/8, x4, x1, x2)

inst_1375:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed5e05d93f6b7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed5e05d93f6b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed5e05d93f6b7; op2val:0xbfeed5e05d93f6b7; 
   valaddr_reg:x3; val_offset:2750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2750*FLEN/8, x4, x1, x2)

inst_1376:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed5e05d93f6b7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed5e05d93f6b7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed5e05d93f6b7; op2val:0xbfeed5e05d93f6b7; 
   valaddr_reg:x3; val_offset:2752*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2752*FLEN/8, x4, x1, x2)

inst_1377:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed5e05d93f6b7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed5e05d93f6b7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed5e05d93f6b7; op2val:0xbfeed5e05d93f6b7; 
   valaddr_reg:x3; val_offset:2754*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2754*FLEN/8, x4, x1, x2)

inst_1378:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed5e05d93f6b7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed5e05d93f6b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed5e05d93f6b7; op2val:0xbfeed5e05d93f6b7; 
   valaddr_reg:x3; val_offset:2756*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2756*FLEN/8, x4, x1, x2)

inst_1379:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed5e05d93f6b7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed5e05d93f6b7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed5e05d93f6b7; op2val:0xbfeed5e05d93f6b7; 
   valaddr_reg:x3; val_offset:2758*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2758*FLEN/8, x4, x1, x2)

inst_1380:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9a14a131e1f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed9a14a131e1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed9a14a131e1f; op2val:0xbfeed9a14a131e1f; 
   valaddr_reg:x3; val_offset:2760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2760*FLEN/8, x4, x1, x2)

inst_1381:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9a14a131e1f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed9a14a131e1f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed9a14a131e1f; op2val:0xbfeed9a14a131e1f; 
   valaddr_reg:x3; val_offset:2762*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2762*FLEN/8, x4, x1, x2)

inst_1382:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9a14a131e1f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed9a14a131e1f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed9a14a131e1f; op2val:0xbfeed9a14a131e1f; 
   valaddr_reg:x3; val_offset:2764*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2764*FLEN/8, x4, x1, x2)

inst_1383:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9a14a131e1f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed9a14a131e1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed9a14a131e1f; op2val:0xbfeed9a14a131e1f; 
   valaddr_reg:x3; val_offset:2766*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2766*FLEN/8, x4, x1, x2)

inst_1384:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9a14a131e1f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed9a14a131e1f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feed9a14a131e1f; op2val:0xbfeed9a14a131e1f; 
   valaddr_reg:x3; val_offset:2768*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2768*FLEN/8, x4, x1, x2)

inst_1385:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xedd71a9e64a40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedd71a9e64a40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feedd71a9e64a40; op2val:0xbfeedd71a9e64a40; 
   valaddr_reg:x3; val_offset:2770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2770*FLEN/8, x4, x1, x2)

inst_1386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xedd71a9e64a40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedd71a9e64a40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feedd71a9e64a40; op2val:0xbfeedd71a9e64a40; 
   valaddr_reg:x3; val_offset:2772*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2772*FLEN/8, x4, x1, x2)

inst_1387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xedd71a9e64a40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedd71a9e64a40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feedd71a9e64a40; op2val:0xbfeedd71a9e64a40; 
   valaddr_reg:x3; val_offset:2774*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2774*FLEN/8, x4, x1, x2)

inst_1388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xedd71a9e64a40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedd71a9e64a40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feedd71a9e64a40; op2val:0xbfeedd71a9e64a40; 
   valaddr_reg:x3; val_offset:2776*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2776*FLEN/8, x4, x1, x2)

inst_1389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xedd71a9e64a40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedd71a9e64a40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feedd71a9e64a40; op2val:0xbfeedd71a9e64a40; 
   valaddr_reg:x3; val_offset:2778*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2778*FLEN/8, x4, x1, x2)

inst_1390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef60afd9b572e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef60afd9b572e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feef60afd9b572e; op2val:0xbfeef60afd9b572e; 
   valaddr_reg:x3; val_offset:2780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2780*FLEN/8, x4, x1, x2)

inst_1391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef60afd9b572e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef60afd9b572e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feef60afd9b572e; op2val:0xbfeef60afd9b572e; 
   valaddr_reg:x3; val_offset:2782*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2782*FLEN/8, x4, x1, x2)

inst_1392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef60afd9b572e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef60afd9b572e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feef60afd9b572e; op2val:0xbfeef60afd9b572e; 
   valaddr_reg:x3; val_offset:2784*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2784*FLEN/8, x4, x1, x2)

inst_1393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef60afd9b572e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef60afd9b572e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feef60afd9b572e; op2val:0xbfeef60afd9b572e; 
   valaddr_reg:x3; val_offset:2786*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2786*FLEN/8, x4, x1, x2)

inst_1394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef60afd9b572e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef60afd9b572e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feef60afd9b572e; op2val:0xbfeef60afd9b572e; 
   valaddr_reg:x3; val_offset:2788*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2788*FLEN/8, x4, x1, x2)

inst_1395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf047fa8d5aa39 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf047fa8d5aa39 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef047fa8d5aa39; op2val:0xbfef047fa8d5aa39; 
   valaddr_reg:x3; val_offset:2790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2790*FLEN/8, x4, x1, x2)

inst_1396:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf047fa8d5aa39 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf047fa8d5aa39 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef047fa8d5aa39; op2val:0xbfef047fa8d5aa39; 
   valaddr_reg:x3; val_offset:2792*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2792*FLEN/8, x4, x1, x2)

inst_1397:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf047fa8d5aa39 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf047fa8d5aa39 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef047fa8d5aa39; op2val:0xbfef047fa8d5aa39; 
   valaddr_reg:x3; val_offset:2794*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2794*FLEN/8, x4, x1, x2)

inst_1398:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf047fa8d5aa39 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf047fa8d5aa39 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef047fa8d5aa39; op2val:0xbfef047fa8d5aa39; 
   valaddr_reg:x3; val_offset:2796*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2796*FLEN/8, x4, x1, x2)

inst_1399:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf047fa8d5aa39 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf047fa8d5aa39 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef047fa8d5aa39; op2val:0xbfef047fa8d5aa39; 
   valaddr_reg:x3; val_offset:2798*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2798*FLEN/8, x4, x1, x2)

inst_1400:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0f56e69e43a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf0f56e69e43a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef0f56e69e43a4; op2val:0xbfef0f56e69e43a4; 
   valaddr_reg:x3; val_offset:2800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2800*FLEN/8, x4, x1, x2)

inst_1401:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0f56e69e43a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf0f56e69e43a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef0f56e69e43a4; op2val:0xbfef0f56e69e43a4; 
   valaddr_reg:x3; val_offset:2802*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2802*FLEN/8, x4, x1, x2)

inst_1402:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0f56e69e43a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf0f56e69e43a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef0f56e69e43a4; op2val:0xbfef0f56e69e43a4; 
   valaddr_reg:x3; val_offset:2804*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2804*FLEN/8, x4, x1, x2)

inst_1403:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0f56e69e43a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf0f56e69e43a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef0f56e69e43a4; op2val:0xbfef0f56e69e43a4; 
   valaddr_reg:x3; val_offset:2806*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2806*FLEN/8, x4, x1, x2)

inst_1404:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0f56e69e43a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf0f56e69e43a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef0f56e69e43a4; op2val:0xbfef0f56e69e43a4; 
   valaddr_reg:x3; val_offset:2808*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2808*FLEN/8, x4, x1, x2)

inst_1405:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf36112c44d337 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf36112c44d337 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef36112c44d337; op2val:0xbfef36112c44d337; 
   valaddr_reg:x3; val_offset:2810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2810*FLEN/8, x4, x1, x2)

inst_1406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf36112c44d337 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf36112c44d337 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef36112c44d337; op2val:0xbfef36112c44d337; 
   valaddr_reg:x3; val_offset:2812*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2812*FLEN/8, x4, x1, x2)

inst_1407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf36112c44d337 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf36112c44d337 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef36112c44d337; op2val:0xbfef36112c44d337; 
   valaddr_reg:x3; val_offset:2814*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2814*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_12)

inst_1408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf36112c44d337 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf36112c44d337 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef36112c44d337; op2val:0xbfef36112c44d337; 
   valaddr_reg:x3; val_offset:2816*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2816*FLEN/8, x4, x1, x2)

inst_1409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf36112c44d337 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf36112c44d337 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef36112c44d337; op2val:0xbfef36112c44d337; 
   valaddr_reg:x3; val_offset:2818*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2818*FLEN/8, x4, x1, x2)

inst_1410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf455d79d2b3f4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf455d79d2b3f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef455d79d2b3f4; op2val:0xbfef455d79d2b3f4; 
   valaddr_reg:x3; val_offset:2820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2820*FLEN/8, x4, x1, x2)

inst_1411:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf455d79d2b3f4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf455d79d2b3f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef455d79d2b3f4; op2val:0xbfef455d79d2b3f4; 
   valaddr_reg:x3; val_offset:2822*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2822*FLEN/8, x4, x1, x2)

inst_1412:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf455d79d2b3f4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf455d79d2b3f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef455d79d2b3f4; op2val:0xbfef455d79d2b3f4; 
   valaddr_reg:x3; val_offset:2824*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2824*FLEN/8, x4, x1, x2)

inst_1413:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf455d79d2b3f4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf455d79d2b3f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef455d79d2b3f4; op2val:0xbfef455d79d2b3f4; 
   valaddr_reg:x3; val_offset:2826*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2826*FLEN/8, x4, x1, x2)

inst_1414:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf455d79d2b3f4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf455d79d2b3f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef455d79d2b3f4; op2val:0xbfef455d79d2b3f4; 
   valaddr_reg:x3; val_offset:2828*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2828*FLEN/8, x4, x1, x2)

inst_1415:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf57a8526cbf63 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf57a8526cbf63 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef57a8526cbf63; op2val:0xbfef57a8526cbf63; 
   valaddr_reg:x3; val_offset:2830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2830*FLEN/8, x4, x1, x2)

inst_1416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf57a8526cbf63 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf57a8526cbf63 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef57a8526cbf63; op2val:0xbfef57a8526cbf63; 
   valaddr_reg:x3; val_offset:2832*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2832*FLEN/8, x4, x1, x2)

inst_1417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf57a8526cbf63 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf57a8526cbf63 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef57a8526cbf63; op2val:0xbfef57a8526cbf63; 
   valaddr_reg:x3; val_offset:2834*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2834*FLEN/8, x4, x1, x2)

inst_1418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf57a8526cbf63 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf57a8526cbf63 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef57a8526cbf63; op2val:0xbfef57a8526cbf63; 
   valaddr_reg:x3; val_offset:2836*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2836*FLEN/8, x4, x1, x2)

inst_1419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf57a8526cbf63 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf57a8526cbf63 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef57a8526cbf63; op2val:0xbfef57a8526cbf63; 
   valaddr_reg:x3; val_offset:2838*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2838*FLEN/8, x4, x1, x2)

inst_1420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf67d6cfd4aff0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf67d6cfd4aff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef67d6cfd4aff0; op2val:0xbfef67d6cfd4aff0; 
   valaddr_reg:x3; val_offset:2840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2840*FLEN/8, x4, x1, x2)

inst_1421:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf67d6cfd4aff0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf67d6cfd4aff0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef67d6cfd4aff0; op2val:0xbfef67d6cfd4aff0; 
   valaddr_reg:x3; val_offset:2842*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2842*FLEN/8, x4, x1, x2)

inst_1422:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf67d6cfd4aff0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf67d6cfd4aff0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef67d6cfd4aff0; op2val:0xbfef67d6cfd4aff0; 
   valaddr_reg:x3; val_offset:2844*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2844*FLEN/8, x4, x1, x2)

inst_1423:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf67d6cfd4aff0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf67d6cfd4aff0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef67d6cfd4aff0; op2val:0xbfef67d6cfd4aff0; 
   valaddr_reg:x3; val_offset:2846*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2846*FLEN/8, x4, x1, x2)

inst_1424:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf67d6cfd4aff0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf67d6cfd4aff0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef67d6cfd4aff0; op2val:0xbfef67d6cfd4aff0; 
   valaddr_reg:x3; val_offset:2848*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2848*FLEN/8, x4, x1, x2)

inst_1425:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf82c8bcf6e341 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf82c8bcf6e341 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef82c8bcf6e341; op2val:0xbfef82c8bcf6e341; 
   valaddr_reg:x3; val_offset:2850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2850*FLEN/8, x4, x1, x2)

inst_1426:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf82c8bcf6e341 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf82c8bcf6e341 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef82c8bcf6e341; op2val:0xbfef82c8bcf6e341; 
   valaddr_reg:x3; val_offset:2852*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2852*FLEN/8, x4, x1, x2)

inst_1427:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf82c8bcf6e341 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf82c8bcf6e341 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef82c8bcf6e341; op2val:0xbfef82c8bcf6e341; 
   valaddr_reg:x3; val_offset:2854*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2854*FLEN/8, x4, x1, x2)

inst_1428:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf82c8bcf6e341 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf82c8bcf6e341 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef82c8bcf6e341; op2val:0xbfef82c8bcf6e341; 
   valaddr_reg:x3; val_offset:2856*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2856*FLEN/8, x4, x1, x2)

inst_1429:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf82c8bcf6e341 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf82c8bcf6e341 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fef82c8bcf6e341; op2val:0xbfef82c8bcf6e341; 
   valaddr_reg:x3; val_offset:2858*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2858*FLEN/8, x4, x1, x2)

inst_1430:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfae5f78adcdb1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfae5f78adcdb1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefae5f78adcdb1; op2val:0xbfefae5f78adcdb1; 
   valaddr_reg:x3; val_offset:2860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2860*FLEN/8, x4, x1, x2)

inst_1431:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfae5f78adcdb1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfae5f78adcdb1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefae5f78adcdb1; op2val:0xbfefae5f78adcdb1; 
   valaddr_reg:x3; val_offset:2862*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2862*FLEN/8, x4, x1, x2)

inst_1432:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfae5f78adcdb1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfae5f78adcdb1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefae5f78adcdb1; op2val:0xbfefae5f78adcdb1; 
   valaddr_reg:x3; val_offset:2864*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2864*FLEN/8, x4, x1, x2)

inst_1433:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfae5f78adcdb1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfae5f78adcdb1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefae5f78adcdb1; op2val:0xbfefae5f78adcdb1; 
   valaddr_reg:x3; val_offset:2866*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2866*FLEN/8, x4, x1, x2)

inst_1434:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfae5f78adcdb1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfae5f78adcdb1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefae5f78adcdb1; op2val:0xbfefae5f78adcdb1; 
   valaddr_reg:x3; val_offset:2868*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2868*FLEN/8, x4, x1, x2)

inst_1435:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb71d77723858 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb71d77723858 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefb71d77723858; op2val:0xbfefb71d77723858; 
   valaddr_reg:x3; val_offset:2870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2870*FLEN/8, x4, x1, x2)

inst_1436:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb71d77723858 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb71d77723858 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefb71d77723858; op2val:0xbfefb71d77723858; 
   valaddr_reg:x3; val_offset:2872*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2872*FLEN/8, x4, x1, x2)

inst_1437:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb71d77723858 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb71d77723858 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefb71d77723858; op2val:0xbfefb71d77723858; 
   valaddr_reg:x3; val_offset:2874*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2874*FLEN/8, x4, x1, x2)

inst_1438:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb71d77723858 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb71d77723858 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefb71d77723858; op2val:0xbfefb71d77723858; 
   valaddr_reg:x3; val_offset:2876*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2876*FLEN/8, x4, x1, x2)

inst_1439:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb71d77723858 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb71d77723858 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefb71d77723858; op2val:0xbfefb71d77723858; 
   valaddr_reg:x3; val_offset:2878*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2878*FLEN/8, x4, x1, x2)

inst_1440:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfbfaf3f9b91d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfbfaf3f9b91d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefbfaf3f9b91d5; op2val:0xbfefbfaf3f9b91d5; 
   valaddr_reg:x3; val_offset:2880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2880*FLEN/8, x4, x1, x2)

inst_1441:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfbfaf3f9b91d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfbfaf3f9b91d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefbfaf3f9b91d5; op2val:0xbfefbfaf3f9b91d5; 
   valaddr_reg:x3; val_offset:2882*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2882*FLEN/8, x4, x1, x2)

inst_1442:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfbfaf3f9b91d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfbfaf3f9b91d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefbfaf3f9b91d5; op2val:0xbfefbfaf3f9b91d5; 
   valaddr_reg:x3; val_offset:2884*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2884*FLEN/8, x4, x1, x2)

inst_1443:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfbfaf3f9b91d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfbfaf3f9b91d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefbfaf3f9b91d5; op2val:0xbfefbfaf3f9b91d5; 
   valaddr_reg:x3; val_offset:2886*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2886*FLEN/8, x4, x1, x2)

inst_1444:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfbfaf3f9b91d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfbfaf3f9b91d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefbfaf3f9b91d5; op2val:0xbfefbfaf3f9b91d5; 
   valaddr_reg:x3; val_offset:2888*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2888*FLEN/8, x4, x1, x2)

inst_1445:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefc04b2f200426; op2val:0xbfefc04b2f200426; 
   valaddr_reg:x3; val_offset:2890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2890*FLEN/8, x4, x1, x2)

inst_1446:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefc04b2f200426; op2val:0xbfefc04b2f200426; 
   valaddr_reg:x3; val_offset:2892*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2892*FLEN/8, x4, x1, x2)

inst_1447:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefc04b2f200426; op2val:0xbfefc04b2f200426; 
   valaddr_reg:x3; val_offset:2894*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2894*FLEN/8, x4, x1, x2)

inst_1448:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefc04b2f200426; op2val:0xbfefc04b2f200426; 
   valaddr_reg:x3; val_offset:2896*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2896*FLEN/8, x4, x1, x2)

inst_1449:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefc04b2f200426; op2val:0xbfefc04b2f200426; 
   valaddr_reg:x3; val_offset:2898*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2898*FLEN/8, x4, x1, x2)

inst_1450:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc524ded3b2e1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc524ded3b2e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefc524ded3b2e1; op2val:0xbfefc524ded3b2e1; 
   valaddr_reg:x3; val_offset:2900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2900*FLEN/8, x4, x1, x2)

inst_1451:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc524ded3b2e1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc524ded3b2e1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefc524ded3b2e1; op2val:0xbfefc524ded3b2e1; 
   valaddr_reg:x3; val_offset:2902*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2902*FLEN/8, x4, x1, x2)

inst_1452:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc524ded3b2e1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc524ded3b2e1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefc524ded3b2e1; op2val:0xbfefc524ded3b2e1; 
   valaddr_reg:x3; val_offset:2904*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2904*FLEN/8, x4, x1, x2)

inst_1453:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc524ded3b2e1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc524ded3b2e1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefc524ded3b2e1; op2val:0xbfefc524ded3b2e1; 
   valaddr_reg:x3; val_offset:2906*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2906*FLEN/8, x4, x1, x2)

inst_1454:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc524ded3b2e1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc524ded3b2e1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3fefc524ded3b2e1; op2val:0xbfefc524ded3b2e1; 
   valaddr_reg:x3; val_offset:2908*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2908*FLEN/8, x4, x1, x2)

inst_1455:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff383799f273a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff383799f273a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feff383799f273a; op2val:0xbfeff383799f273a; 
   valaddr_reg:x3; val_offset:2910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2910*FLEN/8, x4, x1, x2)

inst_1456:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff383799f273a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff383799f273a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feff383799f273a; op2val:0xbfeff383799f273a; 
   valaddr_reg:x3; val_offset:2912*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2912*FLEN/8, x4, x1, x2)

inst_1457:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff383799f273a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff383799f273a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feff383799f273a; op2val:0xbfeff383799f273a; 
   valaddr_reg:x3; val_offset:2914*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2914*FLEN/8, x4, x1, x2)

inst_1458:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff383799f273a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff383799f273a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feff383799f273a; op2val:0xbfeff383799f273a; 
   valaddr_reg:x3; val_offset:2916*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2916*FLEN/8, x4, x1, x2)

inst_1459:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff383799f273a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff383799f273a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feff383799f273a; op2val:0xbfeff383799f273a; 
   valaddr_reg:x3; val_offset:2918*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2918*FLEN/8, x4, x1, x2)

inst_1460:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff6a3558d6ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff6a3558d6ada and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feff6a3558d6ada; op2val:0xbfeff6a3558d6ada; 
   valaddr_reg:x3; val_offset:2920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2920*FLEN/8, x4, x1, x2)

inst_1461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff6a3558d6ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff6a3558d6ada and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feff6a3558d6ada; op2val:0xbfeff6a3558d6ada; 
   valaddr_reg:x3; val_offset:2922*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2922*FLEN/8, x4, x1, x2)

inst_1462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff6a3558d6ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff6a3558d6ada and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feff6a3558d6ada; op2val:0xbfeff6a3558d6ada; 
   valaddr_reg:x3; val_offset:2924*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2924*FLEN/8, x4, x1, x2)

inst_1463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff6a3558d6ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff6a3558d6ada and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feff6a3558d6ada; op2val:0xbfeff6a3558d6ada; 
   valaddr_reg:x3; val_offset:2926*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2926*FLEN/8, x4, x1, x2)

inst_1464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff6a3558d6ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff6a3558d6ada and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feff6a3558d6ada; op2val:0xbfeff6a3558d6ada; 
   valaddr_reg:x3; val_offset:2928*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2928*FLEN/8, x4, x1, x2)

inst_1465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe0739097a0a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffe0739097a0a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feffe0739097a0a; op2val:0xbfeffe0739097a0a; 
   valaddr_reg:x3; val_offset:2930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2930*FLEN/8, x4, x1, x2)

inst_1466:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe0739097a0a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffe0739097a0a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feffe0739097a0a; op2val:0xbfeffe0739097a0a; 
   valaddr_reg:x3; val_offset:2932*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2932*FLEN/8, x4, x1, x2)

inst_1467:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe0739097a0a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffe0739097a0a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feffe0739097a0a; op2val:0xbfeffe0739097a0a; 
   valaddr_reg:x3; val_offset:2934*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2934*FLEN/8, x4, x1, x2)

inst_1468:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe0739097a0a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffe0739097a0a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feffe0739097a0a; op2val:0xbfeffe0739097a0a; 
   valaddr_reg:x3; val_offset:2936*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2936*FLEN/8, x4, x1, x2)

inst_1469:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe0739097a0a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffe0739097a0a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3feffe0739097a0a; op2val:0xbfeffe0739097a0a; 
   valaddr_reg:x3; val_offset:2938*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2938*FLEN/8, x4, x1, x2)

inst_1470:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; 
   valaddr_reg:x3; val_offset:2940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2940*FLEN/8, x4, x1, x2)

inst_1471:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; 
   valaddr_reg:x3; val_offset:2942*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2942*FLEN/8, x4, x1, x2)

inst_1472:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; 
   valaddr_reg:x3; val_offset:2944*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2944*FLEN/8, x4, x1, x2)

inst_1473:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; 
   valaddr_reg:x3; val_offset:2946*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2946*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(13794147294347007232,64,FLEN)
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(13794147294347007232,64,FLEN)
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(13794147294347007232,64,FLEN)
NAN_BOXED(4574776056633897856,64,FLEN)
NAN_BOXED(13798148093488673664,64,FLEN)
NAN_BOXED(4574776056633897856,64,FLEN)
NAN_BOXED(13798148093488673664,64,FLEN)
NAN_BOXED(4574776056633897856,64,FLEN)
NAN_BOXED(13798148093488673664,64,FLEN)
NAN_BOXED(4574776056633897856,64,FLEN)
NAN_BOXED(13798148093488673664,64,FLEN)
NAN_BOXED(4574776056633897856,64,FLEN)
NAN_BOXED(13798148093488673664,64,FLEN)
NAN_BOXED(4576611227806190528,64,FLEN)
NAN_BOXED(13799983264660966336,64,FLEN)
NAN_BOXED(4576611227806190528,64,FLEN)
NAN_BOXED(13799983264660966336,64,FLEN)
NAN_BOXED(4576611227806190528,64,FLEN)
NAN_BOXED(13799983264660966336,64,FLEN)
NAN_BOXED(4576611227806190528,64,FLEN)
NAN_BOXED(13799983264660966336,64,FLEN)
NAN_BOXED(4576611227806190528,64,FLEN)
NAN_BOXED(13799983264660966336,64,FLEN)
NAN_BOXED(4580560247651594848,64,FLEN)
NAN_BOXED(13803932284506370656,64,FLEN)
NAN_BOXED(4580560247651594848,64,FLEN)
NAN_BOXED(13803932284506370656,64,FLEN)
NAN_BOXED(4580560247651594848,64,FLEN)
NAN_BOXED(13803932284506370656,64,FLEN)
NAN_BOXED(4580560247651594848,64,FLEN)
NAN_BOXED(13803932284506370656,64,FLEN)
NAN_BOXED(4580560247651594848,64,FLEN)
NAN_BOXED(13803932284506370656,64,FLEN)
NAN_BOXED(4582989651871435104,64,FLEN)
NAN_BOXED(13806361688726210912,64,FLEN)
NAN_BOXED(4582989651871435104,64,FLEN)
NAN_BOXED(13806361688726210912,64,FLEN)
NAN_BOXED(4582989651871435104,64,FLEN)
NAN_BOXED(13806361688726210912,64,FLEN)
NAN_BOXED(4582989651871435104,64,FLEN)
NAN_BOXED(13806361688726210912,64,FLEN)
NAN_BOXED(4582989651871435104,64,FLEN)
NAN_BOXED(13806361688726210912,64,FLEN)
NAN_BOXED(4584686287016706880,64,FLEN)
NAN_BOXED(13808058323871482688,64,FLEN)
NAN_BOXED(4584686287016706880,64,FLEN)
NAN_BOXED(13808058323871482688,64,FLEN)
NAN_BOXED(4584686287016706880,64,FLEN)
NAN_BOXED(13808058323871482688,64,FLEN)
NAN_BOXED(4584686287016706880,64,FLEN)
NAN_BOXED(13808058323871482688,64,FLEN)
NAN_BOXED(4584686287016706880,64,FLEN)
NAN_BOXED(13808058323871482688,64,FLEN)
NAN_BOXED(4584985904110512368,64,FLEN)
NAN_BOXED(13808357940965288176,64,FLEN)
NAN_BOXED(4584985904110512368,64,FLEN)
NAN_BOXED(13808357940965288176,64,FLEN)
NAN_BOXED(4584985904110512368,64,FLEN)
NAN_BOXED(13808357940965288176,64,FLEN)
NAN_BOXED(4584985904110512368,64,FLEN)
NAN_BOXED(13808357940965288176,64,FLEN)
NAN_BOXED(4584985904110512368,64,FLEN)
NAN_BOXED(13808357940965288176,64,FLEN)
NAN_BOXED(4585372235783876528,64,FLEN)
NAN_BOXED(13808744272638652336,64,FLEN)
NAN_BOXED(4585372235783876528,64,FLEN)
NAN_BOXED(13808744272638652336,64,FLEN)
NAN_BOXED(4585372235783876528,64,FLEN)
NAN_BOXED(13808744272638652336,64,FLEN)
NAN_BOXED(4585372235783876528,64,FLEN)
NAN_BOXED(13808744272638652336,64,FLEN)
NAN_BOXED(4585372235783876528,64,FLEN)
NAN_BOXED(13808744272638652336,64,FLEN)
NAN_BOXED(4585776805413138192,64,FLEN)
NAN_BOXED(13809148842267914000,64,FLEN)
NAN_BOXED(4585776805413138192,64,FLEN)
NAN_BOXED(13809148842267914000,64,FLEN)
NAN_BOXED(4585776805413138192,64,FLEN)
NAN_BOXED(13809148842267914000,64,FLEN)
NAN_BOXED(4585776805413138192,64,FLEN)
NAN_BOXED(13809148842267914000,64,FLEN)
NAN_BOXED(4585776805413138192,64,FLEN)
NAN_BOXED(13809148842267914000,64,FLEN)
NAN_BOXED(4586044825022322608,64,FLEN)
NAN_BOXED(13809416861877098416,64,FLEN)
NAN_BOXED(4586044825022322608,64,FLEN)
NAN_BOXED(13809416861877098416,64,FLEN)
NAN_BOXED(4586044825022322608,64,FLEN)
NAN_BOXED(13809416861877098416,64,FLEN)
NAN_BOXED(4586044825022322608,64,FLEN)
NAN_BOXED(13809416861877098416,64,FLEN)
NAN_BOXED(4586044825022322608,64,FLEN)
NAN_BOXED(13809416861877098416,64,FLEN)
NAN_BOXED(4587400465777961840,64,FLEN)
NAN_BOXED(13810772502632737648,64,FLEN)
NAN_BOXED(4587400465777961840,64,FLEN)
NAN_BOXED(13810772502632737648,64,FLEN)
NAN_BOXED(4587400465777961840,64,FLEN)
NAN_BOXED(13810772502632737648,64,FLEN)
NAN_BOXED(4587400465777961840,64,FLEN)
NAN_BOXED(13810772502632737648,64,FLEN)
NAN_BOXED(4587400465777961840,64,FLEN)
NAN_BOXED(13810772502632737648,64,FLEN)
NAN_BOXED(4587520505701038016,64,FLEN)
NAN_BOXED(13810892542555813824,64,FLEN)
NAN_BOXED(4587520505701038016,64,FLEN)
NAN_BOXED(13810892542555813824,64,FLEN)
NAN_BOXED(4587520505701038016,64,FLEN)
NAN_BOXED(13810892542555813824,64,FLEN)
NAN_BOXED(4587520505701038016,64,FLEN)
NAN_BOXED(13810892542555813824,64,FLEN)
NAN_BOXED(4587520505701038016,64,FLEN)
NAN_BOXED(13810892542555813824,64,FLEN)
NAN_BOXED(4587660380686703280,64,FLEN)
NAN_BOXED(13811032417541479088,64,FLEN)
NAN_BOXED(4587660380686703280,64,FLEN)
NAN_BOXED(13811032417541479088,64,FLEN)
NAN_BOXED(4587660380686703280,64,FLEN)
NAN_BOXED(13811032417541479088,64,FLEN)
NAN_BOXED(4587660380686703280,64,FLEN)
NAN_BOXED(13811032417541479088,64,FLEN)
NAN_BOXED(4587660380686703280,64,FLEN)
NAN_BOXED(13811032417541479088,64,FLEN)
NAN_BOXED(4587870615503163376,64,FLEN)
NAN_BOXED(13811242652357939184,64,FLEN)
NAN_BOXED(4587870615503163376,64,FLEN)
NAN_BOXED(13811242652357939184,64,FLEN)
NAN_BOXED(4587870615503163376,64,FLEN)
NAN_BOXED(13811242652357939184,64,FLEN)
NAN_BOXED(4587870615503163376,64,FLEN)
NAN_BOXED(13811242652357939184,64,FLEN)
NAN_BOXED(4587870615503163376,64,FLEN)
NAN_BOXED(13811242652357939184,64,FLEN)
NAN_BOXED(4588118393075747056,64,FLEN)
NAN_BOXED(13811490429930522864,64,FLEN)
NAN_BOXED(4588118393075747056,64,FLEN)
NAN_BOXED(13811490429930522864,64,FLEN)
NAN_BOXED(4588118393075747056,64,FLEN)
NAN_BOXED(13811490429930522864,64,FLEN)
NAN_BOXED(4588118393075747056,64,FLEN)
NAN_BOXED(13811490429930522864,64,FLEN)
NAN_BOXED(4588118393075747056,64,FLEN)
NAN_BOXED(13811490429930522864,64,FLEN)
NAN_BOXED(4588383021789535728,64,FLEN)
NAN_BOXED(13811755058644311536,64,FLEN)
NAN_BOXED(4588383021789535728,64,FLEN)
NAN_BOXED(13811755058644311536,64,FLEN)
NAN_BOXED(4588383021789535728,64,FLEN)
NAN_BOXED(13811755058644311536,64,FLEN)
NAN_BOXED(4588383021789535728,64,FLEN)
NAN_BOXED(13811755058644311536,64,FLEN)
NAN_BOXED(4588383021789535728,64,FLEN)
NAN_BOXED(13811755058644311536,64,FLEN)
NAN_BOXED(4589058165870925568,64,FLEN)
NAN_BOXED(13812430202725701376,64,FLEN)
NAN_BOXED(4589058165870925568,64,FLEN)
NAN_BOXED(13812430202725701376,64,FLEN)
NAN_BOXED(4589058165870925568,64,FLEN)
NAN_BOXED(13812430202725701376,64,FLEN)
NAN_BOXED(4589058165870925568,64,FLEN)
NAN_BOXED(13812430202725701376,64,FLEN)
NAN_BOXED(4589058165870925568,64,FLEN)
NAN_BOXED(13812430202725701376,64,FLEN)
NAN_BOXED(4589194908998570008,64,FLEN)
NAN_BOXED(13812566945853345816,64,FLEN)
NAN_BOXED(4589194908998570008,64,FLEN)
NAN_BOXED(13812566945853345816,64,FLEN)
NAN_BOXED(4589194908998570008,64,FLEN)
NAN_BOXED(13812566945853345816,64,FLEN)
NAN_BOXED(4589194908998570008,64,FLEN)
NAN_BOXED(13812566945853345816,64,FLEN)
NAN_BOXED(4589194908998570008,64,FLEN)
NAN_BOXED(13812566945853345816,64,FLEN)
NAN_BOXED(4590185400311706312,64,FLEN)
NAN_BOXED(13813557437166482120,64,FLEN)
NAN_BOXED(4590185400311706312,64,FLEN)
NAN_BOXED(13813557437166482120,64,FLEN)
NAN_BOXED(4590185400311706312,64,FLEN)
NAN_BOXED(13813557437166482120,64,FLEN)
NAN_BOXED(4590185400311706312,64,FLEN)
NAN_BOXED(13813557437166482120,64,FLEN)
NAN_BOXED(4590185400311706312,64,FLEN)
NAN_BOXED(13813557437166482120,64,FLEN)
NAN_BOXED(4590221460295883784,64,FLEN)
NAN_BOXED(13813593497150659592,64,FLEN)
NAN_BOXED(4590221460295883784,64,FLEN)
NAN_BOXED(13813593497150659592,64,FLEN)
NAN_BOXED(4590221460295883784,64,FLEN)
NAN_BOXED(13813593497150659592,64,FLEN)
NAN_BOXED(4590221460295883784,64,FLEN)
NAN_BOXED(13813593497150659592,64,FLEN)
NAN_BOXED(4590221460295883784,64,FLEN)
NAN_BOXED(13813593497150659592,64,FLEN)
NAN_BOXED(4590480740073448384,64,FLEN)
NAN_BOXED(13813852776928224192,64,FLEN)
NAN_BOXED(4590480740073448384,64,FLEN)
NAN_BOXED(13813852776928224192,64,FLEN)
NAN_BOXED(4590480740073448384,64,FLEN)
NAN_BOXED(13813852776928224192,64,FLEN)
NAN_BOXED(4590480740073448384,64,FLEN)
NAN_BOXED(13813852776928224192,64,FLEN)
NAN_BOXED(4590480740073448384,64,FLEN)
NAN_BOXED(13813852776928224192,64,FLEN)
NAN_BOXED(4590538407146714312,64,FLEN)
NAN_BOXED(13813910444001490120,64,FLEN)
NAN_BOXED(4590538407146714312,64,FLEN)
NAN_BOXED(13813910444001490120,64,FLEN)
NAN_BOXED(4590538407146714312,64,FLEN)
NAN_BOXED(13813910444001490120,64,FLEN)
NAN_BOXED(4590538407146714312,64,FLEN)
NAN_BOXED(13813910444001490120,64,FLEN)
NAN_BOXED(4590538407146714312,64,FLEN)
NAN_BOXED(13813910444001490120,64,FLEN)
NAN_BOXED(4590641837841533560,64,FLEN)
NAN_BOXED(13814013874696309368,64,FLEN)
NAN_BOXED(4590641837841533560,64,FLEN)
NAN_BOXED(13814013874696309368,64,FLEN)
NAN_BOXED(4590641837841533560,64,FLEN)
NAN_BOXED(13814013874696309368,64,FLEN)
NAN_BOXED(4590641837841533560,64,FLEN)
NAN_BOXED(13814013874696309368,64,FLEN)
NAN_BOXED(4590641837841533560,64,FLEN)
NAN_BOXED(13814013874696309368,64,FLEN)
NAN_BOXED(4590932634874735384,64,FLEN)
NAN_BOXED(13814304671729511192,64,FLEN)
NAN_BOXED(4590932634874735384,64,FLEN)
NAN_BOXED(13814304671729511192,64,FLEN)
NAN_BOXED(4590932634874735384,64,FLEN)
NAN_BOXED(13814304671729511192,64,FLEN)
NAN_BOXED(4590932634874735384,64,FLEN)
NAN_BOXED(13814304671729511192,64,FLEN)
NAN_BOXED(4590932634874735384,64,FLEN)
NAN_BOXED(13814304671729511192,64,FLEN)
NAN_BOXED(4591148450145896400,64,FLEN)
NAN_BOXED(13814520487000672208,64,FLEN)
NAN_BOXED(4591148450145896400,64,FLEN)
NAN_BOXED(13814520487000672208,64,FLEN)
NAN_BOXED(4591148450145896400,64,FLEN)
NAN_BOXED(13814520487000672208,64,FLEN)
NAN_BOXED(4591148450145896400,64,FLEN)
NAN_BOXED(13814520487000672208,64,FLEN)
NAN_BOXED(4591148450145896400,64,FLEN)
NAN_BOXED(13814520487000672208,64,FLEN)
NAN_BOXED(4591160327924705240,64,FLEN)
NAN_BOXED(13814532364779481048,64,FLEN)
NAN_BOXED(4591160327924705240,64,FLEN)
NAN_BOXED(13814532364779481048,64,FLEN)
NAN_BOXED(4591160327924705240,64,FLEN)
NAN_BOXED(13814532364779481048,64,FLEN)
NAN_BOXED(4591160327924705240,64,FLEN)
NAN_BOXED(13814532364779481048,64,FLEN)
NAN_BOXED(4591160327924705240,64,FLEN)
NAN_BOXED(13814532364779481048,64,FLEN)
NAN_BOXED(4591167888311008544,64,FLEN)
NAN_BOXED(13814539925165784352,64,FLEN)
NAN_BOXED(4591167888311008544,64,FLEN)
NAN_BOXED(13814539925165784352,64,FLEN)
NAN_BOXED(4591167888311008544,64,FLEN)
NAN_BOXED(13814539925165784352,64,FLEN)
NAN_BOXED(4591167888311008544,64,FLEN)
NAN_BOXED(13814539925165784352,64,FLEN)
NAN_BOXED(4591167888311008544,64,FLEN)
NAN_BOXED(13814539925165784352,64,FLEN)
NAN_BOXED(4591246337526873232,64,FLEN)
NAN_BOXED(13814618374381649040,64,FLEN)
NAN_BOXED(4591246337526873232,64,FLEN)
NAN_BOXED(13814618374381649040,64,FLEN)
NAN_BOXED(4591246337526873232,64,FLEN)
NAN_BOXED(13814618374381649040,64,FLEN)
NAN_BOXED(4591246337526873232,64,FLEN)
NAN_BOXED(13814618374381649040,64,FLEN)
NAN_BOXED(4591246337526873232,64,FLEN)
NAN_BOXED(13814618374381649040,64,FLEN)
NAN_BOXED(4591285585079075944,64,FLEN)
NAN_BOXED(13814657621933851752,64,FLEN)
NAN_BOXED(4591285585079075944,64,FLEN)
NAN_BOXED(13814657621933851752,64,FLEN)
NAN_BOXED(4591285585079075944,64,FLEN)
NAN_BOXED(13814657621933851752,64,FLEN)
NAN_BOXED(4591285585079075944,64,FLEN)
NAN_BOXED(13814657621933851752,64,FLEN)
NAN_BOXED(4591285585079075944,64,FLEN)
NAN_BOXED(13814657621933851752,64,FLEN)
NAN_BOXED(4591453635050351312,64,FLEN)
NAN_BOXED(13814825671905127120,64,FLEN)
NAN_BOXED(4591453635050351312,64,FLEN)
NAN_BOXED(13814825671905127120,64,FLEN)
NAN_BOXED(4591453635050351312,64,FLEN)
NAN_BOXED(13814825671905127120,64,FLEN)
NAN_BOXED(4591453635050351312,64,FLEN)
NAN_BOXED(13814825671905127120,64,FLEN)
NAN_BOXED(4591453635050351312,64,FLEN)
NAN_BOXED(13814825671905127120,64,FLEN)
NAN_BOXED(4591674893133848352,64,FLEN)
NAN_BOXED(13815046929988624160,64,FLEN)
NAN_BOXED(4591674893133848352,64,FLEN)
NAN_BOXED(13815046929988624160,64,FLEN)
NAN_BOXED(4591674893133848352,64,FLEN)
NAN_BOXED(13815046929988624160,64,FLEN)
NAN_BOXED(4591674893133848352,64,FLEN)
NAN_BOXED(13815046929988624160,64,FLEN)
NAN_BOXED(4591674893133848352,64,FLEN)
NAN_BOXED(13815046929988624160,64,FLEN)
NAN_BOXED(4591791602926342352,64,FLEN)
NAN_BOXED(13815163639781118160,64,FLEN)
NAN_BOXED(4591791602926342352,64,FLEN)
NAN_BOXED(13815163639781118160,64,FLEN)
NAN_BOXED(4591791602926342352,64,FLEN)
NAN_BOXED(13815163639781118160,64,FLEN)
NAN_BOXED(4591791602926342352,64,FLEN)
NAN_BOXED(13815163639781118160,64,FLEN)
NAN_BOXED(4591791602926342352,64,FLEN)
NAN_BOXED(13815163639781118160,64,FLEN)
NAN_BOXED(4591941658459820440,64,FLEN)
NAN_BOXED(13815313695314596248,64,FLEN)
NAN_BOXED(4591941658459820440,64,FLEN)
NAN_BOXED(13815313695314596248,64,FLEN)
NAN_BOXED(4591941658459820440,64,FLEN)
NAN_BOXED(13815313695314596248,64,FLEN)
NAN_BOXED(4591941658459820440,64,FLEN)
NAN_BOXED(13815313695314596248,64,FLEN)
NAN_BOXED(4591941658459820440,64,FLEN)
NAN_BOXED(13815313695314596248,64,FLEN)
NAN_BOXED(4591953890240949024,64,FLEN)
NAN_BOXED(13815325927095724832,64,FLEN)
NAN_BOXED(4591953890240949024,64,FLEN)
NAN_BOXED(13815325927095724832,64,FLEN)
NAN_BOXED(4591953890240949024,64,FLEN)
NAN_BOXED(13815325927095724832,64,FLEN)
NAN_BOXED(4591953890240949024,64,FLEN)
NAN_BOXED(13815325927095724832,64,FLEN)
NAN_BOXED(4591953890240949024,64,FLEN)
NAN_BOXED(13815325927095724832,64,FLEN)
NAN_BOXED(4592001820546508240,64,FLEN)
NAN_BOXED(13815373857401284048,64,FLEN)
NAN_BOXED(4592001820546508240,64,FLEN)
NAN_BOXED(13815373857401284048,64,FLEN)
NAN_BOXED(4592001820546508240,64,FLEN)
NAN_BOXED(13815373857401284048,64,FLEN)
NAN_BOXED(4592001820546508240,64,FLEN)
NAN_BOXED(13815373857401284048,64,FLEN)
NAN_BOXED(4592001820546508240,64,FLEN)
NAN_BOXED(13815373857401284048,64,FLEN)
NAN_BOXED(4592037691336187920,64,FLEN)
NAN_BOXED(13815409728190963728,64,FLEN)
NAN_BOXED(4592037691336187920,64,FLEN)
NAN_BOXED(13815409728190963728,64,FLEN)
NAN_BOXED(4592037691336187920,64,FLEN)
NAN_BOXED(13815409728190963728,64,FLEN)
NAN_BOXED(4592037691336187920,64,FLEN)
NAN_BOXED(13815409728190963728,64,FLEN)
NAN_BOXED(4592037691336187920,64,FLEN)
NAN_BOXED(13815409728190963728,64,FLEN)
NAN_BOXED(4592227660138135296,64,FLEN)
NAN_BOXED(13815599696992911104,64,FLEN)
NAN_BOXED(4592227660138135296,64,FLEN)
NAN_BOXED(13815599696992911104,64,FLEN)
NAN_BOXED(4592227660138135296,64,FLEN)
NAN_BOXED(13815599696992911104,64,FLEN)
NAN_BOXED(4592227660138135296,64,FLEN)
NAN_BOXED(13815599696992911104,64,FLEN)
NAN_BOXED(4592227660138135296,64,FLEN)
NAN_BOXED(13815599696992911104,64,FLEN)
NAN_BOXED(4592273718574894272,64,FLEN)
NAN_BOXED(13815645755429670080,64,FLEN)
NAN_BOXED(4592273718574894272,64,FLEN)
NAN_BOXED(13815645755429670080,64,FLEN)
NAN_BOXED(4592273718574894272,64,FLEN)
NAN_BOXED(13815645755429670080,64,FLEN)
NAN_BOXED(4592273718574894272,64,FLEN)
NAN_BOXED(13815645755429670080,64,FLEN)
NAN_BOXED(4592273718574894272,64,FLEN)
NAN_BOXED(13815645755429670080,64,FLEN)
NAN_BOXED(4592343231553480888,64,FLEN)
NAN_BOXED(13815715268408256696,64,FLEN)
NAN_BOXED(4592343231553480888,64,FLEN)
NAN_BOXED(13815715268408256696,64,FLEN)
NAN_BOXED(4592343231553480888,64,FLEN)
NAN_BOXED(13815715268408256696,64,FLEN)
NAN_BOXED(4592343231553480888,64,FLEN)
NAN_BOXED(13815715268408256696,64,FLEN)
NAN_BOXED(4592343231553480888,64,FLEN)
NAN_BOXED(13815715268408256696,64,FLEN)
NAN_BOXED(4592679237859417256,64,FLEN)
NAN_BOXED(13816051274714193064,64,FLEN)
NAN_BOXED(4592679237859417256,64,FLEN)
NAN_BOXED(13816051274714193064,64,FLEN)
NAN_BOXED(4592679237859417256,64,FLEN)
NAN_BOXED(13816051274714193064,64,FLEN)
NAN_BOXED(4592679237859417256,64,FLEN)
NAN_BOXED(13816051274714193064,64,FLEN)
NAN_BOXED(4592679237859417256,64,FLEN)
NAN_BOXED(13816051274714193064,64,FLEN)
NAN_BOXED(4593480192945690704,64,FLEN)
NAN_BOXED(13816852229800466512,64,FLEN)
NAN_BOXED(4593480192945690704,64,FLEN)
NAN_BOXED(13816852229800466512,64,FLEN)
NAN_BOXED(4593480192945690704,64,FLEN)
NAN_BOXED(13816852229800466512,64,FLEN)
NAN_BOXED(4593480192945690704,64,FLEN)
NAN_BOXED(13816852229800466512,64,FLEN)
NAN_BOXED(4593480192945690704,64,FLEN)
NAN_BOXED(13816852229800466512,64,FLEN)
NAN_BOXED(4593641111329730304,64,FLEN)
NAN_BOXED(13817013148184506112,64,FLEN)
NAN_BOXED(4593641111329730304,64,FLEN)
NAN_BOXED(13817013148184506112,64,FLEN)
NAN_BOXED(4593641111329730304,64,FLEN)
NAN_BOXED(13817013148184506112,64,FLEN)
NAN_BOXED(4593641111329730304,64,FLEN)
NAN_BOXED(13817013148184506112,64,FLEN)
NAN_BOXED(4593641111329730304,64,FLEN)
NAN_BOXED(13817013148184506112,64,FLEN)
NAN_BOXED(4593670443110730504,64,FLEN)
NAN_BOXED(13817042479965506312,64,FLEN)
NAN_BOXED(4593670443110730504,64,FLEN)
NAN_BOXED(13817042479965506312,64,FLEN)
NAN_BOXED(4593670443110730504,64,FLEN)
NAN_BOXED(13817042479965506312,64,FLEN)
NAN_BOXED(4593670443110730504,64,FLEN)
NAN_BOXED(13817042479965506312,64,FLEN)
NAN_BOXED(4593670443110730504,64,FLEN)
NAN_BOXED(13817042479965506312,64,FLEN)
NAN_BOXED(4593760440926724952,64,FLEN)
NAN_BOXED(13817132477781500760,64,FLEN)
NAN_BOXED(4593760440926724952,64,FLEN)
NAN_BOXED(13817132477781500760,64,FLEN)
NAN_BOXED(4593760440926724952,64,FLEN)
NAN_BOXED(13817132477781500760,64,FLEN)
NAN_BOXED(4593760440926724952,64,FLEN)
NAN_BOXED(13817132477781500760,64,FLEN)
NAN_BOXED(4593760440926724952,64,FLEN)
NAN_BOXED(13817132477781500760,64,FLEN)
NAN_BOXED(4593784612144507336,64,FLEN)
NAN_BOXED(13817156648999283144,64,FLEN)
NAN_BOXED(4593784612144507336,64,FLEN)
NAN_BOXED(13817156648999283144,64,FLEN)
NAN_BOXED(4593784612144507336,64,FLEN)
NAN_BOXED(13817156648999283144,64,FLEN)
NAN_BOXED(4593784612144507336,64,FLEN)
NAN_BOXED(13817156648999283144,64,FLEN)
NAN_BOXED(4593784612144507336,64,FLEN)
NAN_BOXED(13817156648999283144,64,FLEN)
NAN_BOXED(4593891564410506680,64,FLEN)
NAN_BOXED(13817263601265282488,64,FLEN)
NAN_BOXED(4593891564410506680,64,FLEN)
NAN_BOXED(13817263601265282488,64,FLEN)
NAN_BOXED(4593891564410506680,64,FLEN)
NAN_BOXED(13817263601265282488,64,FLEN)
NAN_BOXED(4593891564410506680,64,FLEN)
NAN_BOXED(13817263601265282488,64,FLEN)
NAN_BOXED(4593891564410506680,64,FLEN)
NAN_BOXED(13817263601265282488,64,FLEN)
NAN_BOXED(4593938133018180224,64,FLEN)
NAN_BOXED(13817310169872956032,64,FLEN)
NAN_BOXED(4593938133018180224,64,FLEN)
NAN_BOXED(13817310169872956032,64,FLEN)
NAN_BOXED(4593938133018180224,64,FLEN)
NAN_BOXED(13817310169872956032,64,FLEN)
NAN_BOXED(4593938133018180224,64,FLEN)
NAN_BOXED(13817310169872956032,64,FLEN)
NAN_BOXED(4593938133018180224,64,FLEN)
NAN_BOXED(13817310169872956032,64,FLEN)
NAN_BOXED(4594241753702913088,64,FLEN)
NAN_BOXED(13817613790557688896,64,FLEN)
NAN_BOXED(4594241753702913088,64,FLEN)
NAN_BOXED(13817613790557688896,64,FLEN)
NAN_BOXED(4594241753702913088,64,FLEN)
NAN_BOXED(13817613790557688896,64,FLEN)
NAN_BOXED(4594241753702913088,64,FLEN)
NAN_BOXED(13817613790557688896,64,FLEN)
NAN_BOXED(4594241753702913088,64,FLEN)
NAN_BOXED(13817613790557688896,64,FLEN)
NAN_BOXED(4594737186228183772,64,FLEN)
NAN_BOXED(13818109223082959580,64,FLEN)
NAN_BOXED(4594737186228183772,64,FLEN)
NAN_BOXED(13818109223082959580,64,FLEN)
NAN_BOXED(4594737186228183772,64,FLEN)
NAN_BOXED(13818109223082959580,64,FLEN)
NAN_BOXED(4594737186228183772,64,FLEN)
NAN_BOXED(13818109223082959580,64,FLEN)
NAN_BOXED(4594737186228183772,64,FLEN)
NAN_BOXED(13818109223082959580,64,FLEN)
NAN_BOXED(4594773313822525704,64,FLEN)
NAN_BOXED(13818145350677301512,64,FLEN)
NAN_BOXED(4594773313822525704,64,FLEN)
NAN_BOXED(13818145350677301512,64,FLEN)
NAN_BOXED(4594773313822525704,64,FLEN)
NAN_BOXED(13818145350677301512,64,FLEN)
NAN_BOXED(4594773313822525704,64,FLEN)
NAN_BOXED(13818145350677301512,64,FLEN)
NAN_BOXED(4594773313822525704,64,FLEN)
NAN_BOXED(13818145350677301512,64,FLEN)
NAN_BOXED(4594848560845920344,64,FLEN)
NAN_BOXED(13818220597700696152,64,FLEN)
NAN_BOXED(4594848560845920344,64,FLEN)
NAN_BOXED(13818220597700696152,64,FLEN)
NAN_BOXED(4594848560845920344,64,FLEN)
NAN_BOXED(13818220597700696152,64,FLEN)
NAN_BOXED(4594848560845920344,64,FLEN)
NAN_BOXED(13818220597700696152,64,FLEN)
NAN_BOXED(4594848560845920344,64,FLEN)
NAN_BOXED(13818220597700696152,64,FLEN)
NAN_BOXED(4594902063409522716,64,FLEN)
NAN_BOXED(13818274100264298524,64,FLEN)
NAN_BOXED(4594902063409522716,64,FLEN)
NAN_BOXED(13818274100264298524,64,FLEN)
NAN_BOXED(4594902063409522716,64,FLEN)
NAN_BOXED(13818274100264298524,64,FLEN)
NAN_BOXED(4594902063409522716,64,FLEN)
NAN_BOXED(13818274100264298524,64,FLEN)
NAN_BOXED(4594902063409522716,64,FLEN)
NAN_BOXED(13818274100264298524,64,FLEN)
NAN_BOXED(4595016892887492464,64,FLEN)
NAN_BOXED(13818388929742268272,64,FLEN)
NAN_BOXED(4595016892887492464,64,FLEN)
NAN_BOXED(13818388929742268272,64,FLEN)
NAN_BOXED(4595016892887492464,64,FLEN)
NAN_BOXED(13818388929742268272,64,FLEN)
NAN_BOXED(4595016892887492464,64,FLEN)
NAN_BOXED(13818388929742268272,64,FLEN)
NAN_BOXED(4595016892887492464,64,FLEN)
NAN_BOXED(13818388929742268272,64,FLEN)
NAN_BOXED(4595295052773184968,64,FLEN)
NAN_BOXED(13818667089627960776,64,FLEN)
NAN_BOXED(4595295052773184968,64,FLEN)
NAN_BOXED(13818667089627960776,64,FLEN)
NAN_BOXED(4595295052773184968,64,FLEN)
NAN_BOXED(13818667089627960776,64,FLEN)
NAN_BOXED(4595295052773184968,64,FLEN)
NAN_BOXED(13818667089627960776,64,FLEN)
NAN_BOXED(4595295052773184968,64,FLEN)
NAN_BOXED(13818667089627960776,64,FLEN)
NAN_BOXED(4595447961490583804,64,FLEN)
NAN_BOXED(13818819998345359612,64,FLEN)
NAN_BOXED(4595447961490583804,64,FLEN)
NAN_BOXED(13818819998345359612,64,FLEN)
NAN_BOXED(4595447961490583804,64,FLEN)
NAN_BOXED(13818819998345359612,64,FLEN)
NAN_BOXED(4595447961490583804,64,FLEN)
NAN_BOXED(13818819998345359612,64,FLEN)
NAN_BOXED(4595447961490583804,64,FLEN)
NAN_BOXED(13818819998345359612,64,FLEN)
NAN_BOXED(4595478645055713732,64,FLEN)
NAN_BOXED(13818850681910489540,64,FLEN)
NAN_BOXED(4595478645055713732,64,FLEN)
NAN_BOXED(13818850681910489540,64,FLEN)
NAN_BOXED(4595478645055713732,64,FLEN)
NAN_BOXED(13818850681910489540,64,FLEN)
NAN_BOXED(4595478645055713732,64,FLEN)
NAN_BOXED(13818850681910489540,64,FLEN)
NAN_BOXED(4595478645055713732,64,FLEN)
NAN_BOXED(13818850681910489540,64,FLEN)
NAN_BOXED(4595554794318337100,64,FLEN)
NAN_BOXED(13818926831173112908,64,FLEN)
NAN_BOXED(4595554794318337100,64,FLEN)
NAN_BOXED(13818926831173112908,64,FLEN)
NAN_BOXED(4595554794318337100,64,FLEN)
NAN_BOXED(13818926831173112908,64,FLEN)
NAN_BOXED(4595554794318337100,64,FLEN)
NAN_BOXED(13818926831173112908,64,FLEN)
NAN_BOXED(4595554794318337100,64,FLEN)
NAN_BOXED(13818926831173112908,64,FLEN)
NAN_BOXED(4595688991191575632,64,FLEN)
NAN_BOXED(13819061028046351440,64,FLEN)
NAN_BOXED(4595688991191575632,64,FLEN)
NAN_BOXED(13819061028046351440,64,FLEN)
NAN_BOXED(4595688991191575632,64,FLEN)
NAN_BOXED(13819061028046351440,64,FLEN)
NAN_BOXED(4595688991191575632,64,FLEN)
NAN_BOXED(13819061028046351440,64,FLEN)
NAN_BOXED(4595688991191575632,64,FLEN)
NAN_BOXED(13819061028046351440,64,FLEN)
NAN_BOXED(4595800449969373820,64,FLEN)
NAN_BOXED(13819172486824149628,64,FLEN)
NAN_BOXED(4595800449969373820,64,FLEN)
NAN_BOXED(13819172486824149628,64,FLEN)
NAN_BOXED(4595800449969373820,64,FLEN)
NAN_BOXED(13819172486824149628,64,FLEN)
NAN_BOXED(4595800449969373820,64,FLEN)
NAN_BOXED(13819172486824149628,64,FLEN)
NAN_BOXED(4595800449969373820,64,FLEN)
NAN_BOXED(13819172486824149628,64,FLEN)
NAN_BOXED(4595852556013303572,64,FLEN)
NAN_BOXED(13819224592868079380,64,FLEN)
NAN_BOXED(4595852556013303572,64,FLEN)
NAN_BOXED(13819224592868079380,64,FLEN)
NAN_BOXED(4595852556013303572,64,FLEN)
NAN_BOXED(13819224592868079380,64,FLEN)
NAN_BOXED(4595852556013303572,64,FLEN)
NAN_BOXED(13819224592868079380,64,FLEN)
NAN_BOXED(4595852556013303572,64,FLEN)
NAN_BOXED(13819224592868079380,64,FLEN)
NAN_BOXED(4595954811315905164,64,FLEN)
NAN_BOXED(13819326848170680972,64,FLEN)
NAN_BOXED(4595954811315905164,64,FLEN)
NAN_BOXED(13819326848170680972,64,FLEN)
NAN_BOXED(4595954811315905164,64,FLEN)
NAN_BOXED(13819326848170680972,64,FLEN)
NAN_BOXED(4595954811315905164,64,FLEN)
NAN_BOXED(13819326848170680972,64,FLEN)
NAN_BOXED(4595954811315905164,64,FLEN)
NAN_BOXED(13819326848170680972,64,FLEN)
NAN_BOXED(4596004453920677652,64,FLEN)
NAN_BOXED(13819376490775453460,64,FLEN)
NAN_BOXED(4596004453920677652,64,FLEN)
NAN_BOXED(13819376490775453460,64,FLEN)
NAN_BOXED(4596004453920677652,64,FLEN)
NAN_BOXED(13819376490775453460,64,FLEN)
NAN_BOXED(4596004453920677652,64,FLEN)
NAN_BOXED(13819376490775453460,64,FLEN)
NAN_BOXED(4596004453920677652,64,FLEN)
NAN_BOXED(13819376490775453460,64,FLEN)
NAN_BOXED(4596005664972512240,64,FLEN)
NAN_BOXED(13819377701827288048,64,FLEN)
NAN_BOXED(4596005664972512240,64,FLEN)
NAN_BOXED(13819377701827288048,64,FLEN)
NAN_BOXED(4596005664972512240,64,FLEN)
NAN_BOXED(13819377701827288048,64,FLEN)
NAN_BOXED(4596005664972512240,64,FLEN)
NAN_BOXED(13819377701827288048,64,FLEN)
NAN_BOXED(4596005664972512240,64,FLEN)
NAN_BOXED(13819377701827288048,64,FLEN)
NAN_BOXED(4596189672936720220,64,FLEN)
NAN_BOXED(13819561709791496028,64,FLEN)
NAN_BOXED(4596189672936720220,64,FLEN)
NAN_BOXED(13819561709791496028,64,FLEN)
NAN_BOXED(4596189672936720220,64,FLEN)
NAN_BOXED(13819561709791496028,64,FLEN)
NAN_BOXED(4596189672936720220,64,FLEN)
NAN_BOXED(13819561709791496028,64,FLEN)
NAN_BOXED(4596189672936720220,64,FLEN)
NAN_BOXED(13819561709791496028,64,FLEN)
NAN_BOXED(4596215602538829568,64,FLEN)
NAN_BOXED(13819587639393605376,64,FLEN)
NAN_BOXED(4596215602538829568,64,FLEN)
NAN_BOXED(13819587639393605376,64,FLEN)
NAN_BOXED(4596215602538829568,64,FLEN)
NAN_BOXED(13819587639393605376,64,FLEN)
NAN_BOXED(4596215602538829568,64,FLEN)
NAN_BOXED(13819587639393605376,64,FLEN)
NAN_BOXED(4596215602538829568,64,FLEN)
NAN_BOXED(13819587639393605376,64,FLEN)
NAN_BOXED(4596259227241015748,64,FLEN)
NAN_BOXED(13819631264095791556,64,FLEN)
NAN_BOXED(4596259227241015748,64,FLEN)
NAN_BOXED(13819631264095791556,64,FLEN)
NAN_BOXED(4596259227241015748,64,FLEN)
NAN_BOXED(13819631264095791556,64,FLEN)
NAN_BOXED(4596259227241015748,64,FLEN)
NAN_BOXED(13819631264095791556,64,FLEN)
NAN_BOXED(4596259227241015748,64,FLEN)
NAN_BOXED(13819631264095791556,64,FLEN)
NAN_BOXED(4596346880942001116,64,FLEN)
NAN_BOXED(13819718917796776924,64,FLEN)
NAN_BOXED(4596346880942001116,64,FLEN)
NAN_BOXED(13819718917796776924,64,FLEN)
NAN_BOXED(4596346880942001116,64,FLEN)
NAN_BOXED(13819718917796776924,64,FLEN)
NAN_BOXED(4596346880942001116,64,FLEN)
NAN_BOXED(13819718917796776924,64,FLEN)
NAN_BOXED(4596346880942001116,64,FLEN)
NAN_BOXED(13819718917796776924,64,FLEN)
NAN_BOXED(4596397515054290092,64,FLEN)
NAN_BOXED(13819769551909065900,64,FLEN)
NAN_BOXED(4596397515054290092,64,FLEN)
NAN_BOXED(13819769551909065900,64,FLEN)
NAN_BOXED(4596397515054290092,64,FLEN)
NAN_BOXED(13819769551909065900,64,FLEN)
NAN_BOXED(4596397515054290092,64,FLEN)
NAN_BOXED(13819769551909065900,64,FLEN)
NAN_BOXED(4596397515054290092,64,FLEN)
NAN_BOXED(13819769551909065900,64,FLEN)
NAN_BOXED(4596443694616025932,64,FLEN)
NAN_BOXED(13819815731470801740,64,FLEN)
NAN_BOXED(4596443694616025932,64,FLEN)
NAN_BOXED(13819815731470801740,64,FLEN)
NAN_BOXED(4596443694616025932,64,FLEN)
NAN_BOXED(13819815731470801740,64,FLEN)
NAN_BOXED(4596443694616025932,64,FLEN)
NAN_BOXED(13819815731470801740,64,FLEN)
NAN_BOXED(4596443694616025932,64,FLEN)
NAN_BOXED(13819815731470801740,64,FLEN)
NAN_BOXED(4596499267174210724,64,FLEN)
NAN_BOXED(13819871304028986532,64,FLEN)
NAN_BOXED(4596499267174210724,64,FLEN)
NAN_BOXED(13819871304028986532,64,FLEN)
NAN_BOXED(4596499267174210724,64,FLEN)
NAN_BOXED(13819871304028986532,64,FLEN)
NAN_BOXED(4596499267174210724,64,FLEN)
NAN_BOXED(13819871304028986532,64,FLEN)
NAN_BOXED(4596499267174210724,64,FLEN)
NAN_BOXED(13819871304028986532,64,FLEN)
NAN_BOXED(4596530247150741636,64,FLEN)
NAN_BOXED(13819902284005517444,64,FLEN)
NAN_BOXED(4596530247150741636,64,FLEN)
NAN_BOXED(13819902284005517444,64,FLEN)
NAN_BOXED(4596530247150741636,64,FLEN)
NAN_BOXED(13819902284005517444,64,FLEN)
NAN_BOXED(4596530247150741636,64,FLEN)
NAN_BOXED(13819902284005517444,64,FLEN)
NAN_BOXED(4596530247150741636,64,FLEN)
NAN_BOXED(13819902284005517444,64,FLEN)
NAN_BOXED(4596568948707013864,64,FLEN)
NAN_BOXED(13819940985561789672,64,FLEN)
NAN_BOXED(4596568948707013864,64,FLEN)
NAN_BOXED(13819940985561789672,64,FLEN)
NAN_BOXED(4596568948707013864,64,FLEN)
NAN_BOXED(13819940985561789672,64,FLEN)
NAN_BOXED(4596568948707013864,64,FLEN)
NAN_BOXED(13819940985561789672,64,FLEN)
NAN_BOXED(4596568948707013864,64,FLEN)
NAN_BOXED(13819940985561789672,64,FLEN)
NAN_BOXED(4596614268883319032,64,FLEN)
NAN_BOXED(13819986305738094840,64,FLEN)
NAN_BOXED(4596614268883319032,64,FLEN)
NAN_BOXED(13819986305738094840,64,FLEN)
NAN_BOXED(4596614268883319032,64,FLEN)
NAN_BOXED(13819986305738094840,64,FLEN)
NAN_BOXED(4596614268883319032,64,FLEN)
NAN_BOXED(13819986305738094840,64,FLEN)
NAN_BOXED(4596614268883319032,64,FLEN)
NAN_BOXED(13819986305738094840,64,FLEN)
NAN_BOXED(4596649705112716420,64,FLEN)
NAN_BOXED(13820021741967492228,64,FLEN)
NAN_BOXED(4596649705112716420,64,FLEN)
NAN_BOXED(13820021741967492228,64,FLEN)
NAN_BOXED(4596649705112716420,64,FLEN)
NAN_BOXED(13820021741967492228,64,FLEN)
NAN_BOXED(4596649705112716420,64,FLEN)
NAN_BOXED(13820021741967492228,64,FLEN)
NAN_BOXED(4596649705112716420,64,FLEN)
NAN_BOXED(13820021741967492228,64,FLEN)
NAN_BOXED(4596696590087994104,64,FLEN)
NAN_BOXED(13820068626942769912,64,FLEN)
NAN_BOXED(4596696590087994104,64,FLEN)
NAN_BOXED(13820068626942769912,64,FLEN)
NAN_BOXED(4596696590087994104,64,FLEN)
NAN_BOXED(13820068626942769912,64,FLEN)
NAN_BOXED(4596696590087994104,64,FLEN)
NAN_BOXED(13820068626942769912,64,FLEN)
NAN_BOXED(4596696590087994104,64,FLEN)
NAN_BOXED(13820068626942769912,64,FLEN)
NAN_BOXED(4596749966153827816,64,FLEN)
NAN_BOXED(13820122003008603624,64,FLEN)
NAN_BOXED(4596749966153827816,64,FLEN)
NAN_BOXED(13820122003008603624,64,FLEN)
NAN_BOXED(4596749966153827816,64,FLEN)
NAN_BOXED(13820122003008603624,64,FLEN)
NAN_BOXED(4596749966153827816,64,FLEN)
NAN_BOXED(13820122003008603624,64,FLEN)
NAN_BOXED(4596749966153827816,64,FLEN)
NAN_BOXED(13820122003008603624,64,FLEN)
NAN_BOXED(4596896588186585316,64,FLEN)
NAN_BOXED(13820268625041361124,64,FLEN)
NAN_BOXED(4596896588186585316,64,FLEN)
NAN_BOXED(13820268625041361124,64,FLEN)
NAN_BOXED(4596896588186585316,64,FLEN)
NAN_BOXED(13820268625041361124,64,FLEN)
NAN_BOXED(4596896588186585316,64,FLEN)
NAN_BOXED(13820268625041361124,64,FLEN)
NAN_BOXED(4596896588186585316,64,FLEN)
NAN_BOXED(13820268625041361124,64,FLEN)
NAN_BOXED(4596957497041415212,64,FLEN)
NAN_BOXED(13820329533896191020,64,FLEN)
NAN_BOXED(4596957497041415212,64,FLEN)
NAN_BOXED(13820329533896191020,64,FLEN)
NAN_BOXED(4596957497041415212,64,FLEN)
NAN_BOXED(13820329533896191020,64,FLEN)
NAN_BOXED(4596957497041415212,64,FLEN)
NAN_BOXED(13820329533896191020,64,FLEN)
NAN_BOXED(4596957497041415212,64,FLEN)
NAN_BOXED(13820329533896191020,64,FLEN)
NAN_BOXED(4597018186925884044,64,FLEN)
NAN_BOXED(13820390223780659852,64,FLEN)
NAN_BOXED(4597018186925884044,64,FLEN)
NAN_BOXED(13820390223780659852,64,FLEN)
NAN_BOXED(4597018186925884044,64,FLEN)
NAN_BOXED(13820390223780659852,64,FLEN)
NAN_BOXED(4597018186925884044,64,FLEN)
NAN_BOXED(13820390223780659852,64,FLEN)
NAN_BOXED(4597018186925884044,64,FLEN)
NAN_BOXED(13820390223780659852,64,FLEN)
NAN_BOXED(4597317059267813776,64,FLEN)
NAN_BOXED(13820689096122589584,64,FLEN)
NAN_BOXED(4597317059267813776,64,FLEN)
NAN_BOXED(13820689096122589584,64,FLEN)
NAN_BOXED(4597317059267813776,64,FLEN)
NAN_BOXED(13820689096122589584,64,FLEN)
NAN_BOXED(4597317059267813776,64,FLEN)
NAN_BOXED(13820689096122589584,64,FLEN)
NAN_BOXED(4597317059267813776,64,FLEN)
NAN_BOXED(13820689096122589584,64,FLEN)
NAN_BOXED(4597901259384199624,64,FLEN)
NAN_BOXED(13821273296238975432,64,FLEN)
NAN_BOXED(4597901259384199624,64,FLEN)
NAN_BOXED(13821273296238975432,64,FLEN)
NAN_BOXED(4597901259384199624,64,FLEN)
NAN_BOXED(13821273296238975432,64,FLEN)
NAN_BOXED(4597901259384199624,64,FLEN)
NAN_BOXED(13821273296238975432,64,FLEN)
NAN_BOXED(4597901259384199624,64,FLEN)
NAN_BOXED(13821273296238975432,64,FLEN)
NAN_BOXED(4597936845051121104,64,FLEN)
NAN_BOXED(13821308881905896912,64,FLEN)
NAN_BOXED(4597936845051121104,64,FLEN)
NAN_BOXED(13821308881905896912,64,FLEN)
NAN_BOXED(4597936845051121104,64,FLEN)
NAN_BOXED(13821308881905896912,64,FLEN)
NAN_BOXED(4597936845051121104,64,FLEN)
NAN_BOXED(13821308881905896912,64,FLEN)
NAN_BOXED(4597936845051121104,64,FLEN)
NAN_BOXED(13821308881905896912,64,FLEN)
NAN_BOXED(4597977609979017084,64,FLEN)
NAN_BOXED(13821349646833792892,64,FLEN)
NAN_BOXED(4597977609979017084,64,FLEN)
NAN_BOXED(13821349646833792892,64,FLEN)
NAN_BOXED(4597977609979017084,64,FLEN)
NAN_BOXED(13821349646833792892,64,FLEN)
NAN_BOXED(4597977609979017084,64,FLEN)
NAN_BOXED(13821349646833792892,64,FLEN)
NAN_BOXED(4597977609979017084,64,FLEN)
NAN_BOXED(13821349646833792892,64,FLEN)
NAN_BOXED(4598177569131152786,64,FLEN)
NAN_BOXED(13821549605985928594,64,FLEN)
NAN_BOXED(4598177569131152786,64,FLEN)
NAN_BOXED(13821549605985928594,64,FLEN)
NAN_BOXED(4598177569131152786,64,FLEN)
NAN_BOXED(13821549605985928594,64,FLEN)
NAN_BOXED(4598177569131152786,64,FLEN)
NAN_BOXED(13821549605985928594,64,FLEN)
NAN_BOXED(4598177569131152786,64,FLEN)
NAN_BOXED(13821549605985928594,64,FLEN)
NAN_BOXED(4598190805181494490,64,FLEN)
NAN_BOXED(13821562842036270298,64,FLEN)
NAN_BOXED(4598190805181494490,64,FLEN)
NAN_BOXED(13821562842036270298,64,FLEN)
NAN_BOXED(4598190805181494490,64,FLEN)
NAN_BOXED(13821562842036270298,64,FLEN)
NAN_BOXED(4598190805181494490,64,FLEN)
NAN_BOXED(13821562842036270298,64,FLEN)
NAN_BOXED(4598190805181494490,64,FLEN)
NAN_BOXED(13821562842036270298,64,FLEN)
NAN_BOXED(4598327002068291216,64,FLEN)
NAN_BOXED(13821699038923067024,64,FLEN)
NAN_BOXED(4598327002068291216,64,FLEN)
NAN_BOXED(13821699038923067024,64,FLEN)
NAN_BOXED(4598327002068291216,64,FLEN)
NAN_BOXED(13821699038923067024,64,FLEN)
NAN_BOXED(4598327002068291216,64,FLEN)
NAN_BOXED(13821699038923067024,64,FLEN)
NAN_BOXED(4598327002068291216,64,FLEN)
NAN_BOXED(13821699038923067024,64,FLEN)
NAN_BOXED(4598506714990182224,64,FLEN)
NAN_BOXED(13821878751844958032,64,FLEN)
NAN_BOXED(4598506714990182224,64,FLEN)
NAN_BOXED(13821878751844958032,64,FLEN)
NAN_BOXED(4598506714990182224,64,FLEN)
NAN_BOXED(13821878751844958032,64,FLEN)
NAN_BOXED(4598506714990182224,64,FLEN)
NAN_BOXED(13821878751844958032,64,FLEN)
NAN_BOXED(4598506714990182224,64,FLEN)
NAN_BOXED(13821878751844958032,64,FLEN)
NAN_BOXED(4598568284630693626,64,FLEN)
NAN_BOXED(13821940321485469434,64,FLEN)
NAN_BOXED(4598568284630693626,64,FLEN)
NAN_BOXED(13821940321485469434,64,FLEN)
NAN_BOXED(4598568284630693626,64,FLEN)
NAN_BOXED(13821940321485469434,64,FLEN)
NAN_BOXED(4598568284630693626,64,FLEN)
NAN_BOXED(13821940321485469434,64,FLEN)
NAN_BOXED(4598568284630693626,64,FLEN)
NAN_BOXED(13821940321485469434,64,FLEN)
NAN_BOXED(4598615593127817476,64,FLEN)
NAN_BOXED(13821987629982593284,64,FLEN)
NAN_BOXED(4598615593127817476,64,FLEN)
NAN_BOXED(13821987629982593284,64,FLEN)
NAN_BOXED(4598615593127817476,64,FLEN)
NAN_BOXED(13821987629982593284,64,FLEN)
NAN_BOXED(4598615593127817476,64,FLEN)
NAN_BOXED(13821987629982593284,64,FLEN)
NAN_BOXED(4598615593127817476,64,FLEN)
NAN_BOXED(13821987629982593284,64,FLEN)
NAN_BOXED(4598669844990833724,64,FLEN)
NAN_BOXED(13822041881845609532,64,FLEN)
NAN_BOXED(4598669844990833724,64,FLEN)
NAN_BOXED(13822041881845609532,64,FLEN)
NAN_BOXED(4598669844990833724,64,FLEN)
NAN_BOXED(13822041881845609532,64,FLEN)
NAN_BOXED(4598669844990833724,64,FLEN)
NAN_BOXED(13822041881845609532,64,FLEN)
NAN_BOXED(4598669844990833724,64,FLEN)
NAN_BOXED(13822041881845609532,64,FLEN)
NAN_BOXED(4598720971397365314,64,FLEN)
NAN_BOXED(13822093008252141122,64,FLEN)
NAN_BOXED(4598720971397365314,64,FLEN)
NAN_BOXED(13822093008252141122,64,FLEN)
NAN_BOXED(4598720971397365314,64,FLEN)
NAN_BOXED(13822093008252141122,64,FLEN)
NAN_BOXED(4598720971397365314,64,FLEN)
NAN_BOXED(13822093008252141122,64,FLEN)
NAN_BOXED(4598720971397365314,64,FLEN)
NAN_BOXED(13822093008252141122,64,FLEN)
NAN_BOXED(4598742683496748616,64,FLEN)
NAN_BOXED(13822114720351524424,64,FLEN)
NAN_BOXED(4598742683496748616,64,FLEN)
NAN_BOXED(13822114720351524424,64,FLEN)
NAN_BOXED(4598742683496748616,64,FLEN)
NAN_BOXED(13822114720351524424,64,FLEN)
NAN_BOXED(4598742683496748616,64,FLEN)
NAN_BOXED(13822114720351524424,64,FLEN)
NAN_BOXED(4598742683496748616,64,FLEN)
NAN_BOXED(13822114720351524424,64,FLEN)
NAN_BOXED(4598749308670007554,64,FLEN)
NAN_BOXED(13822121345524783362,64,FLEN)
NAN_BOXED(4598749308670007554,64,FLEN)
NAN_BOXED(13822121345524783362,64,FLEN)
NAN_BOXED(4598749308670007554,64,FLEN)
NAN_BOXED(13822121345524783362,64,FLEN)
NAN_BOXED(4598749308670007554,64,FLEN)
NAN_BOXED(13822121345524783362,64,FLEN)
NAN_BOXED(4598749308670007554,64,FLEN)
NAN_BOXED(13822121345524783362,64,FLEN)
NAN_BOXED(4598763855449310114,64,FLEN)
NAN_BOXED(13822135892304085922,64,FLEN)
NAN_BOXED(4598763855449310114,64,FLEN)
NAN_BOXED(13822135892304085922,64,FLEN)
NAN_BOXED(4598763855449310114,64,FLEN)
NAN_BOXED(13822135892304085922,64,FLEN)
NAN_BOXED(4598763855449310114,64,FLEN)
NAN_BOXED(13822135892304085922,64,FLEN)
NAN_BOXED(4598763855449310114,64,FLEN)
NAN_BOXED(13822135892304085922,64,FLEN)
NAN_BOXED(4598766294544209870,64,FLEN)
NAN_BOXED(13822138331398985678,64,FLEN)
NAN_BOXED(4598766294544209870,64,FLEN)
NAN_BOXED(13822138331398985678,64,FLEN)
NAN_BOXED(4598766294544209870,64,FLEN)
NAN_BOXED(13822138331398985678,64,FLEN)
NAN_BOXED(4598766294544209870,64,FLEN)
NAN_BOXED(13822138331398985678,64,FLEN)
NAN_BOXED(4598766294544209870,64,FLEN)
NAN_BOXED(13822138331398985678,64,FLEN)
NAN_BOXED(4598794566269960884,64,FLEN)
NAN_BOXED(13822166603124736692,64,FLEN)
NAN_BOXED(4598794566269960884,64,FLEN)
NAN_BOXED(13822166603124736692,64,FLEN)
NAN_BOXED(4598794566269960884,64,FLEN)
NAN_BOXED(13822166603124736692,64,FLEN)
NAN_BOXED(4598794566269960884,64,FLEN)
NAN_BOXED(13822166603124736692,64,FLEN)
NAN_BOXED(4598794566269960884,64,FLEN)
NAN_BOXED(13822166603124736692,64,FLEN)
NAN_BOXED(4598957739618624318,64,FLEN)
NAN_BOXED(13822329776473400126,64,FLEN)
NAN_BOXED(4598957739618624318,64,FLEN)
NAN_BOXED(13822329776473400126,64,FLEN)
NAN_BOXED(4598957739618624318,64,FLEN)
NAN_BOXED(13822329776473400126,64,FLEN)
NAN_BOXED(4598957739618624318,64,FLEN)
NAN_BOXED(13822329776473400126,64,FLEN)
NAN_BOXED(4598957739618624318,64,FLEN)
NAN_BOXED(13822329776473400126,64,FLEN)
NAN_BOXED(4598980762200288302,64,FLEN)
NAN_BOXED(13822352799055064110,64,FLEN)
NAN_BOXED(4598980762200288302,64,FLEN)
NAN_BOXED(13822352799055064110,64,FLEN)
NAN_BOXED(4598980762200288302,64,FLEN)
NAN_BOXED(13822352799055064110,64,FLEN)
NAN_BOXED(4598980762200288302,64,FLEN)
NAN_BOXED(13822352799055064110,64,FLEN)
NAN_BOXED(4598980762200288302,64,FLEN)
NAN_BOXED(13822352799055064110,64,FLEN)
NAN_BOXED(4599039835918266296,64,FLEN)
NAN_BOXED(13822411872773042104,64,FLEN)
NAN_BOXED(4599039835918266296,64,FLEN)
NAN_BOXED(13822411872773042104,64,FLEN)
NAN_BOXED(4599039835918266296,64,FLEN)
NAN_BOXED(13822411872773042104,64,FLEN)
NAN_BOXED(4599039835918266296,64,FLEN)
NAN_BOXED(13822411872773042104,64,FLEN)
NAN_BOXED(4599039835918266296,64,FLEN)
NAN_BOXED(13822411872773042104,64,FLEN)
NAN_BOXED(4599042979896086800,64,FLEN)
NAN_BOXED(13822415016750862608,64,FLEN)
NAN_BOXED(4599042979896086800,64,FLEN)
NAN_BOXED(13822415016750862608,64,FLEN)
NAN_BOXED(4599042979896086800,64,FLEN)
NAN_BOXED(13822415016750862608,64,FLEN)
NAN_BOXED(4599042979896086800,64,FLEN)
NAN_BOXED(13822415016750862608,64,FLEN)
NAN_BOXED(4599042979896086800,64,FLEN)
NAN_BOXED(13822415016750862608,64,FLEN)
NAN_BOXED(4599083230057243588,64,FLEN)
NAN_BOXED(13822455266912019396,64,FLEN)
NAN_BOXED(4599083230057243588,64,FLEN)
NAN_BOXED(13822455266912019396,64,FLEN)
NAN_BOXED(4599083230057243588,64,FLEN)
NAN_BOXED(13822455266912019396,64,FLEN)
NAN_BOXED(4599083230057243588,64,FLEN)
NAN_BOXED(13822455266912019396,64,FLEN)
NAN_BOXED(4599083230057243588,64,FLEN)
NAN_BOXED(13822455266912019396,64,FLEN)
NAN_BOXED(4599094103176135772,64,FLEN)
NAN_BOXED(13822466140030911580,64,FLEN)
NAN_BOXED(4599094103176135772,64,FLEN)
NAN_BOXED(13822466140030911580,64,FLEN)
NAN_BOXED(4599094103176135772,64,FLEN)
NAN_BOXED(13822466140030911580,64,FLEN)
NAN_BOXED(4599094103176135772,64,FLEN)
NAN_BOXED(13822466140030911580,64,FLEN)
NAN_BOXED(4599094103176135772,64,FLEN)
NAN_BOXED(13822466140030911580,64,FLEN)
NAN_BOXED(4599102917244317780,64,FLEN)
NAN_BOXED(13822474954099093588,64,FLEN)
NAN_BOXED(4599102917244317780,64,FLEN)
NAN_BOXED(13822474954099093588,64,FLEN)
NAN_BOXED(4599102917244317780,64,FLEN)
NAN_BOXED(13822474954099093588,64,FLEN)
NAN_BOXED(4599102917244317780,64,FLEN)
NAN_BOXED(13822474954099093588,64,FLEN)
NAN_BOXED(4599102917244317780,64,FLEN)
NAN_BOXED(13822474954099093588,64,FLEN)
NAN_BOXED(4599320609152430510,64,FLEN)
NAN_BOXED(13822692646007206318,64,FLEN)
NAN_BOXED(4599320609152430510,64,FLEN)
NAN_BOXED(13822692646007206318,64,FLEN)
NAN_BOXED(4599320609152430510,64,FLEN)
NAN_BOXED(13822692646007206318,64,FLEN)
NAN_BOXED(4599320609152430510,64,FLEN)
NAN_BOXED(13822692646007206318,64,FLEN)
NAN_BOXED(4599320609152430510,64,FLEN)
NAN_BOXED(13822692646007206318,64,FLEN)
NAN_BOXED(4599418271226933878,64,FLEN)
NAN_BOXED(13822790308081709686,64,FLEN)
NAN_BOXED(4599418271226933878,64,FLEN)
NAN_BOXED(13822790308081709686,64,FLEN)
NAN_BOXED(4599418271226933878,64,FLEN)
NAN_BOXED(13822790308081709686,64,FLEN)
NAN_BOXED(4599418271226933878,64,FLEN)
NAN_BOXED(13822790308081709686,64,FLEN)
NAN_BOXED(4599418271226933878,64,FLEN)
NAN_BOXED(13822790308081709686,64,FLEN)
NAN_BOXED(4599425614572188754,64,FLEN)
NAN_BOXED(13822797651426964562,64,FLEN)
NAN_BOXED(4599425614572188754,64,FLEN)
NAN_BOXED(13822797651426964562,64,FLEN)
NAN_BOXED(4599425614572188754,64,FLEN)
NAN_BOXED(13822797651426964562,64,FLEN)
NAN_BOXED(4599425614572188754,64,FLEN)
NAN_BOXED(13822797651426964562,64,FLEN)
NAN_BOXED(4599425614572188754,64,FLEN)
NAN_BOXED(13822797651426964562,64,FLEN)
NAN_BOXED(4599448791270232212,64,FLEN)
NAN_BOXED(13822820828125008020,64,FLEN)
NAN_BOXED(4599448791270232212,64,FLEN)
NAN_BOXED(13822820828125008020,64,FLEN)
NAN_BOXED(4599448791270232212,64,FLEN)
NAN_BOXED(13822820828125008020,64,FLEN)
NAN_BOXED(4599448791270232212,64,FLEN)
NAN_BOXED(13822820828125008020,64,FLEN)
NAN_BOXED(4599448791270232212,64,FLEN)
NAN_BOXED(13822820828125008020,64,FLEN)
NAN_BOXED(4599568803261540384,64,FLEN)
NAN_BOXED(13822940840116316192,64,FLEN)
NAN_BOXED(4599568803261540384,64,FLEN)
NAN_BOXED(13822940840116316192,64,FLEN)
NAN_BOXED(4599568803261540384,64,FLEN)
NAN_BOXED(13822940840116316192,64,FLEN)
NAN_BOXED(4599568803261540384,64,FLEN)
NAN_BOXED(13822940840116316192,64,FLEN)
NAN_BOXED(4599568803261540384,64,FLEN)
NAN_BOXED(13822940840116316192,64,FLEN)
NAN_BOXED(4599615143721082320,64,FLEN)
NAN_BOXED(13822987180575858128,64,FLEN)
NAN_BOXED(4599615143721082320,64,FLEN)
NAN_BOXED(13822987180575858128,64,FLEN)
NAN_BOXED(4599615143721082320,64,FLEN)
NAN_BOXED(13822987180575858128,64,FLEN)
NAN_BOXED(4599615143721082320,64,FLEN)
NAN_BOXED(13822987180575858128,64,FLEN)
NAN_BOXED(4599615143721082320,64,FLEN)
NAN_BOXED(13822987180575858128,64,FLEN)
NAN_BOXED(4599756957792072870,64,FLEN)
NAN_BOXED(13823128994646848678,64,FLEN)
NAN_BOXED(4599756957792072870,64,FLEN)
NAN_BOXED(13823128994646848678,64,FLEN)
NAN_BOXED(4599756957792072870,64,FLEN)
NAN_BOXED(13823128994646848678,64,FLEN)
NAN_BOXED(4599756957792072870,64,FLEN)
NAN_BOXED(13823128994646848678,64,FLEN)
NAN_BOXED(4599756957792072870,64,FLEN)
NAN_BOXED(13823128994646848678,64,FLEN)
NAN_BOXED(4599880068629220122,64,FLEN)
NAN_BOXED(13823252105483995930,64,FLEN)
NAN_BOXED(4599880068629220122,64,FLEN)
NAN_BOXED(13823252105483995930,64,FLEN)
NAN_BOXED(4599880068629220122,64,FLEN)
NAN_BOXED(13823252105483995930,64,FLEN)
NAN_BOXED(4599880068629220122,64,FLEN)
NAN_BOXED(13823252105483995930,64,FLEN)
NAN_BOXED(4599880068629220122,64,FLEN)
NAN_BOXED(13823252105483995930,64,FLEN)
NAN_BOXED(4599962549832067418,64,FLEN)
NAN_BOXED(13823334586686843226,64,FLEN)
NAN_BOXED(4599962549832067418,64,FLEN)
NAN_BOXED(13823334586686843226,64,FLEN)
NAN_BOXED(4599962549832067418,64,FLEN)
NAN_BOXED(13823334586686843226,64,FLEN)
NAN_BOXED(4599962549832067418,64,FLEN)
NAN_BOXED(13823334586686843226,64,FLEN)
NAN_BOXED(4599962549832067418,64,FLEN)
NAN_BOXED(13823334586686843226,64,FLEN)
NAN_BOXED(4599989892324880448,64,FLEN)
NAN_BOXED(13823361929179656256,64,FLEN)
NAN_BOXED(4599989892324880448,64,FLEN)
NAN_BOXED(13823361929179656256,64,FLEN)
NAN_BOXED(4599989892324880448,64,FLEN)
NAN_BOXED(13823361929179656256,64,FLEN)
NAN_BOXED(4599989892324880448,64,FLEN)
NAN_BOXED(13823361929179656256,64,FLEN)
NAN_BOXED(4599989892324880448,64,FLEN)
NAN_BOXED(13823361929179656256,64,FLEN)
NAN_BOXED(4600203651605739528,64,FLEN)
NAN_BOXED(13823575688460515336,64,FLEN)
NAN_BOXED(4600203651605739528,64,FLEN)
NAN_BOXED(13823575688460515336,64,FLEN)
NAN_BOXED(4600203651605739528,64,FLEN)
NAN_BOXED(13823575688460515336,64,FLEN)
NAN_BOXED(4600203651605739528,64,FLEN)
NAN_BOXED(13823575688460515336,64,FLEN)
NAN_BOXED(4600203651605739528,64,FLEN)
NAN_BOXED(13823575688460515336,64,FLEN)
NAN_BOXED(4600205378768001384,64,FLEN)
NAN_BOXED(13823577415622777192,64,FLEN)
NAN_BOXED(4600205378768001384,64,FLEN)
NAN_BOXED(13823577415622777192,64,FLEN)
NAN_BOXED(4600205378768001384,64,FLEN)
NAN_BOXED(13823577415622777192,64,FLEN)
NAN_BOXED(4600205378768001384,64,FLEN)
NAN_BOXED(13823577415622777192,64,FLEN)
NAN_BOXED(4600205378768001384,64,FLEN)
NAN_BOXED(13823577415622777192,64,FLEN)
NAN_BOXED(4600211458392447562,64,FLEN)
NAN_BOXED(13823583495247223370,64,FLEN)
NAN_BOXED(4600211458392447562,64,FLEN)
NAN_BOXED(13823583495247223370,64,FLEN)
NAN_BOXED(4600211458392447562,64,FLEN)
NAN_BOXED(13823583495247223370,64,FLEN)
NAN_BOXED(4600211458392447562,64,FLEN)
NAN_BOXED(13823583495247223370,64,FLEN)
NAN_BOXED(4600211458392447562,64,FLEN)
NAN_BOXED(13823583495247223370,64,FLEN)
NAN_BOXED(4600230379471918628,64,FLEN)
NAN_BOXED(13823602416326694436,64,FLEN)
NAN_BOXED(4600230379471918628,64,FLEN)
NAN_BOXED(13823602416326694436,64,FLEN)
NAN_BOXED(4600230379471918628,64,FLEN)
NAN_BOXED(13823602416326694436,64,FLEN)
NAN_BOXED(4600230379471918628,64,FLEN)
NAN_BOXED(13823602416326694436,64,FLEN)
NAN_BOXED(4600230379471918628,64,FLEN)
NAN_BOXED(13823602416326694436,64,FLEN)
NAN_BOXED(4600246876996757736,64,FLEN)
NAN_BOXED(13823618913851533544,64,FLEN)
NAN_BOXED(4600246876996757736,64,FLEN)
NAN_BOXED(13823618913851533544,64,FLEN)
NAN_BOXED(4600246876996757736,64,FLEN)
NAN_BOXED(13823618913851533544,64,FLEN)
NAN_BOXED(4600246876996757736,64,FLEN)
NAN_BOXED(13823618913851533544,64,FLEN)
NAN_BOXED(4600246876996757736,64,FLEN)
NAN_BOXED(13823618913851533544,64,FLEN)
NAN_BOXED(4600269432062441560,64,FLEN)
NAN_BOXED(13823641468917217368,64,FLEN)
NAN_BOXED(4600269432062441560,64,FLEN)
NAN_BOXED(13823641468917217368,64,FLEN)
NAN_BOXED(4600269432062441560,64,FLEN)
NAN_BOXED(13823641468917217368,64,FLEN)
NAN_BOXED(4600269432062441560,64,FLEN)
NAN_BOXED(13823641468917217368,64,FLEN)
NAN_BOXED(4600269432062441560,64,FLEN)
NAN_BOXED(13823641468917217368,64,FLEN)
NAN_BOXED(4600281305214345876,64,FLEN)
NAN_BOXED(13823653342069121684,64,FLEN)
NAN_BOXED(4600281305214345876,64,FLEN)
NAN_BOXED(13823653342069121684,64,FLEN)
NAN_BOXED(4600281305214345876,64,FLEN)
NAN_BOXED(13823653342069121684,64,FLEN)
NAN_BOXED(4600281305214345876,64,FLEN)
NAN_BOXED(13823653342069121684,64,FLEN)
NAN_BOXED(4600281305214345876,64,FLEN)
NAN_BOXED(13823653342069121684,64,FLEN)
NAN_BOXED(4600295286546847566,64,FLEN)
NAN_BOXED(13823667323401623374,64,FLEN)
NAN_BOXED(4600295286546847566,64,FLEN)
NAN_BOXED(13823667323401623374,64,FLEN)
NAN_BOXED(4600295286546847566,64,FLEN)
NAN_BOXED(13823667323401623374,64,FLEN)
NAN_BOXED(4600295286546847566,64,FLEN)
NAN_BOXED(13823667323401623374,64,FLEN)
NAN_BOXED(4600295286546847566,64,FLEN)
NAN_BOXED(13823667323401623374,64,FLEN)
NAN_BOXED(4600334293117525432,64,FLEN)
NAN_BOXED(13823706329972301240,64,FLEN)
NAN_BOXED(4600334293117525432,64,FLEN)
NAN_BOXED(13823706329972301240,64,FLEN)
NAN_BOXED(4600334293117525432,64,FLEN)
NAN_BOXED(13823706329972301240,64,FLEN)
NAN_BOXED(4600334293117525432,64,FLEN)
NAN_BOXED(13823706329972301240,64,FLEN)
NAN_BOXED(4600334293117525432,64,FLEN)
NAN_BOXED(13823706329972301240,64,FLEN)
NAN_BOXED(4600337554609840426,64,FLEN)
NAN_BOXED(13823709591464616234,64,FLEN)
NAN_BOXED(4600337554609840426,64,FLEN)
NAN_BOXED(13823709591464616234,64,FLEN)
NAN_BOXED(4600337554609840426,64,FLEN)
NAN_BOXED(13823709591464616234,64,FLEN)
NAN_BOXED(4600337554609840426,64,FLEN)
NAN_BOXED(13823709591464616234,64,FLEN)
NAN_BOXED(4600337554609840426,64,FLEN)
NAN_BOXED(13823709591464616234,64,FLEN)
NAN_BOXED(4600395637433560586,64,FLEN)
NAN_BOXED(13823767674288336394,64,FLEN)
NAN_BOXED(4600395637433560586,64,FLEN)
NAN_BOXED(13823767674288336394,64,FLEN)
NAN_BOXED(4600395637433560586,64,FLEN)
NAN_BOXED(13823767674288336394,64,FLEN)
NAN_BOXED(4600395637433560586,64,FLEN)
NAN_BOXED(13823767674288336394,64,FLEN)
NAN_BOXED(4600395637433560586,64,FLEN)
NAN_BOXED(13823767674288336394,64,FLEN)
NAN_BOXED(4600480388045930542,64,FLEN)
NAN_BOXED(13823852424900706350,64,FLEN)
NAN_BOXED(4600480388045930542,64,FLEN)
NAN_BOXED(13823852424900706350,64,FLEN)
NAN_BOXED(4600480388045930542,64,FLEN)
NAN_BOXED(13823852424900706350,64,FLEN)
NAN_BOXED(4600480388045930542,64,FLEN)
NAN_BOXED(13823852424900706350,64,FLEN)
NAN_BOXED(4600480388045930542,64,FLEN)
NAN_BOXED(13823852424900706350,64,FLEN)
NAN_BOXED(4600507397653853446,64,FLEN)
NAN_BOXED(13823879434508629254,64,FLEN)
NAN_BOXED(4600507397653853446,64,FLEN)
NAN_BOXED(13823879434508629254,64,FLEN)
NAN_BOXED(4600507397653853446,64,FLEN)
NAN_BOXED(13823879434508629254,64,FLEN)
NAN_BOXED(4600507397653853446,64,FLEN)
NAN_BOXED(13823879434508629254,64,FLEN)
NAN_BOXED(4600507397653853446,64,FLEN)
NAN_BOXED(13823879434508629254,64,FLEN)
NAN_BOXED(4600546472895369940,64,FLEN)
NAN_BOXED(13823918509750145748,64,FLEN)
NAN_BOXED(4600546472895369940,64,FLEN)
NAN_BOXED(13823918509750145748,64,FLEN)
NAN_BOXED(4600546472895369940,64,FLEN)
NAN_BOXED(13823918509750145748,64,FLEN)
NAN_BOXED(4600546472895369940,64,FLEN)
NAN_BOXED(13823918509750145748,64,FLEN)
NAN_BOXED(4600546472895369940,64,FLEN)
NAN_BOXED(13823918509750145748,64,FLEN)
NAN_BOXED(4600647099373306756,64,FLEN)
NAN_BOXED(13824019136228082564,64,FLEN)
NAN_BOXED(4600647099373306756,64,FLEN)
NAN_BOXED(13824019136228082564,64,FLEN)
NAN_BOXED(4600647099373306756,64,FLEN)
NAN_BOXED(13824019136228082564,64,FLEN)
NAN_BOXED(4600647099373306756,64,FLEN)
NAN_BOXED(13824019136228082564,64,FLEN)
NAN_BOXED(4600647099373306756,64,FLEN)
NAN_BOXED(13824019136228082564,64,FLEN)
NAN_BOXED(4600647278169312340,64,FLEN)
NAN_BOXED(13824019315024088148,64,FLEN)
NAN_BOXED(4600647278169312340,64,FLEN)
NAN_BOXED(13824019315024088148,64,FLEN)
NAN_BOXED(4600647278169312340,64,FLEN)
NAN_BOXED(13824019315024088148,64,FLEN)
NAN_BOXED(4600647278169312340,64,FLEN)
NAN_BOXED(13824019315024088148,64,FLEN)
NAN_BOXED(4600647278169312340,64,FLEN)
NAN_BOXED(13824019315024088148,64,FLEN)
NAN_BOXED(4600695078240172502,64,FLEN)
NAN_BOXED(13824067115094948310,64,FLEN)
NAN_BOXED(4600695078240172502,64,FLEN)
NAN_BOXED(13824067115094948310,64,FLEN)
NAN_BOXED(4600695078240172502,64,FLEN)
NAN_BOXED(13824067115094948310,64,FLEN)
NAN_BOXED(4600695078240172502,64,FLEN)
NAN_BOXED(13824067115094948310,64,FLEN)
NAN_BOXED(4600695078240172502,64,FLEN)
NAN_BOXED(13824067115094948310,64,FLEN)
NAN_BOXED(4600701367651969936,64,FLEN)
NAN_BOXED(13824073404506745744,64,FLEN)
NAN_BOXED(4600701367651969936,64,FLEN)
NAN_BOXED(13824073404506745744,64,FLEN)
NAN_BOXED(4600701367651969936,64,FLEN)
NAN_BOXED(13824073404506745744,64,FLEN)
NAN_BOXED(4600701367651969936,64,FLEN)
NAN_BOXED(13824073404506745744,64,FLEN)
NAN_BOXED(4600701367651969936,64,FLEN)
NAN_BOXED(13824073404506745744,64,FLEN)
NAN_BOXED(4600944269276861504,64,FLEN)
NAN_BOXED(13824316306131637312,64,FLEN)
NAN_BOXED(4600944269276861504,64,FLEN)
NAN_BOXED(13824316306131637312,64,FLEN)
NAN_BOXED(4600944269276861504,64,FLEN)
NAN_BOXED(13824316306131637312,64,FLEN)
NAN_BOXED(4600944269276861504,64,FLEN)
NAN_BOXED(13824316306131637312,64,FLEN)
NAN_BOXED(4600944269276861504,64,FLEN)
NAN_BOXED(13824316306131637312,64,FLEN)
NAN_BOXED(4601100450462359744,64,FLEN)
NAN_BOXED(13824472487317135552,64,FLEN)
NAN_BOXED(4601100450462359744,64,FLEN)
NAN_BOXED(13824472487317135552,64,FLEN)
NAN_BOXED(4601100450462359744,64,FLEN)
NAN_BOXED(13824472487317135552,64,FLEN)
NAN_BOXED(4601100450462359744,64,FLEN)
NAN_BOXED(13824472487317135552,64,FLEN)
NAN_BOXED(4601100450462359744,64,FLEN)
NAN_BOXED(13824472487317135552,64,FLEN)
NAN_BOXED(4601122583107183996,64,FLEN)
NAN_BOXED(13824494619961959804,64,FLEN)
NAN_BOXED(4601122583107183996,64,FLEN)
NAN_BOXED(13824494619961959804,64,FLEN)
NAN_BOXED(4601122583107183996,64,FLEN)
NAN_BOXED(13824494619961959804,64,FLEN)
NAN_BOXED(4601122583107183996,64,FLEN)
NAN_BOXED(13824494619961959804,64,FLEN)
NAN_BOXED(4601122583107183996,64,FLEN)
NAN_BOXED(13824494619961959804,64,FLEN)
NAN_BOXED(4601222366193365970,64,FLEN)
NAN_BOXED(13824594403048141778,64,FLEN)
NAN_BOXED(4601222366193365970,64,FLEN)
NAN_BOXED(13824594403048141778,64,FLEN)
NAN_BOXED(4601222366193365970,64,FLEN)
NAN_BOXED(13824594403048141778,64,FLEN)
NAN_BOXED(4601222366193365970,64,FLEN)
NAN_BOXED(13824594403048141778,64,FLEN)
NAN_BOXED(4601222366193365970,64,FLEN)
NAN_BOXED(13824594403048141778,64,FLEN)
NAN_BOXED(4601310572498836762,64,FLEN)
NAN_BOXED(13824682609353612570,64,FLEN)
NAN_BOXED(4601310572498836762,64,FLEN)
NAN_BOXED(13824682609353612570,64,FLEN)
NAN_BOXED(4601310572498836762,64,FLEN)
NAN_BOXED(13824682609353612570,64,FLEN)
NAN_BOXED(4601310572498836762,64,FLEN)
NAN_BOXED(13824682609353612570,64,FLEN)
NAN_BOXED(4601310572498836762,64,FLEN)
NAN_BOXED(13824682609353612570,64,FLEN)
NAN_BOXED(4601316011655834144,64,FLEN)
NAN_BOXED(13824688048510609952,64,FLEN)
NAN_BOXED(4601316011655834144,64,FLEN)
NAN_BOXED(13824688048510609952,64,FLEN)
NAN_BOXED(4601316011655834144,64,FLEN)
NAN_BOXED(13824688048510609952,64,FLEN)
NAN_BOXED(4601316011655834144,64,FLEN)
NAN_BOXED(13824688048510609952,64,FLEN)
NAN_BOXED(4601316011655834144,64,FLEN)
NAN_BOXED(13824688048510609952,64,FLEN)
NAN_BOXED(4601348050924231406,64,FLEN)
NAN_BOXED(13824720087779007214,64,FLEN)
NAN_BOXED(4601348050924231406,64,FLEN)
NAN_BOXED(13824720087779007214,64,FLEN)
NAN_BOXED(4601348050924231406,64,FLEN)
NAN_BOXED(13824720087779007214,64,FLEN)
NAN_BOXED(4601348050924231406,64,FLEN)
NAN_BOXED(13824720087779007214,64,FLEN)
NAN_BOXED(4601348050924231406,64,FLEN)
NAN_BOXED(13824720087779007214,64,FLEN)
NAN_BOXED(4601385442535683086,64,FLEN)
NAN_BOXED(13824757479390458894,64,FLEN)
NAN_BOXED(4601385442535683086,64,FLEN)
NAN_BOXED(13824757479390458894,64,FLEN)
NAN_BOXED(4601385442535683086,64,FLEN)
NAN_BOXED(13824757479390458894,64,FLEN)
NAN_BOXED(4601385442535683086,64,FLEN)
NAN_BOXED(13824757479390458894,64,FLEN)
NAN_BOXED(4601385442535683086,64,FLEN)
NAN_BOXED(13824757479390458894,64,FLEN)
NAN_BOXED(4601433794740774502,64,FLEN)
NAN_BOXED(13824805831595550310,64,FLEN)
NAN_BOXED(4601433794740774502,64,FLEN)
NAN_BOXED(13824805831595550310,64,FLEN)
NAN_BOXED(4601433794740774502,64,FLEN)
NAN_BOXED(13824805831595550310,64,FLEN)
NAN_BOXED(4601433794740774502,64,FLEN)
NAN_BOXED(13824805831595550310,64,FLEN)
NAN_BOXED(4601433794740774502,64,FLEN)
NAN_BOXED(13824805831595550310,64,FLEN)
NAN_BOXED(4601587142680457708,64,FLEN)
NAN_BOXED(13824959179535233516,64,FLEN)
NAN_BOXED(4601587142680457708,64,FLEN)
NAN_BOXED(13824959179535233516,64,FLEN)
NAN_BOXED(4601587142680457708,64,FLEN)
NAN_BOXED(13824959179535233516,64,FLEN)
NAN_BOXED(4601587142680457708,64,FLEN)
NAN_BOXED(13824959179535233516,64,FLEN)
NAN_BOXED(4601587142680457708,64,FLEN)
NAN_BOXED(13824959179535233516,64,FLEN)
NAN_BOXED(4601630712853419924,64,FLEN)
NAN_BOXED(13825002749708195732,64,FLEN)
NAN_BOXED(4601630712853419924,64,FLEN)
NAN_BOXED(13825002749708195732,64,FLEN)
NAN_BOXED(4601630712853419924,64,FLEN)
NAN_BOXED(13825002749708195732,64,FLEN)
NAN_BOXED(4601630712853419924,64,FLEN)
NAN_BOXED(13825002749708195732,64,FLEN)
NAN_BOXED(4601630712853419924,64,FLEN)
NAN_BOXED(13825002749708195732,64,FLEN)
NAN_BOXED(4601764098859499350,64,FLEN)
NAN_BOXED(13825136135714275158,64,FLEN)
NAN_BOXED(4601764098859499350,64,FLEN)
NAN_BOXED(13825136135714275158,64,FLEN)
NAN_BOXED(4601764098859499350,64,FLEN)
NAN_BOXED(13825136135714275158,64,FLEN)
NAN_BOXED(4601764098859499350,64,FLEN)
NAN_BOXED(13825136135714275158,64,FLEN)
NAN_BOXED(4601764098859499350,64,FLEN)
NAN_BOXED(13825136135714275158,64,FLEN)
NAN_BOXED(4601793523783490854,64,FLEN)
NAN_BOXED(13825165560638266662,64,FLEN)
NAN_BOXED(4601793523783490854,64,FLEN)
NAN_BOXED(13825165560638266662,64,FLEN)
NAN_BOXED(4601793523783490854,64,FLEN)
NAN_BOXED(13825165560638266662,64,FLEN)
NAN_BOXED(4601793523783490854,64,FLEN)
NAN_BOXED(13825165560638266662,64,FLEN)
NAN_BOXED(4601793523783490854,64,FLEN)
NAN_BOXED(13825165560638266662,64,FLEN)
NAN_BOXED(4601801530506218262,64,FLEN)
NAN_BOXED(13825173567360994070,64,FLEN)
NAN_BOXED(4601801530506218262,64,FLEN)
NAN_BOXED(13825173567360994070,64,FLEN)
NAN_BOXED(4601801530506218262,64,FLEN)
NAN_BOXED(13825173567360994070,64,FLEN)
NAN_BOXED(4601801530506218262,64,FLEN)
NAN_BOXED(13825173567360994070,64,FLEN)
NAN_BOXED(4601801530506218262,64,FLEN)
NAN_BOXED(13825173567360994070,64,FLEN)
NAN_BOXED(4601805403732737744,64,FLEN)
NAN_BOXED(13825177440587513552,64,FLEN)
NAN_BOXED(4601805403732737744,64,FLEN)
NAN_BOXED(13825177440587513552,64,FLEN)
NAN_BOXED(4601805403732737744,64,FLEN)
NAN_BOXED(13825177440587513552,64,FLEN)
NAN_BOXED(4601805403732737744,64,FLEN)
NAN_BOXED(13825177440587513552,64,FLEN)
NAN_BOXED(4601805403732737744,64,FLEN)
NAN_BOXED(13825177440587513552,64,FLEN)
NAN_BOXED(4601947435945177600,64,FLEN)
NAN_BOXED(13825319472799953408,64,FLEN)
NAN_BOXED(4601947435945177600,64,FLEN)
NAN_BOXED(13825319472799953408,64,FLEN)
NAN_BOXED(4601947435945177600,64,FLEN)
NAN_BOXED(13825319472799953408,64,FLEN)
NAN_BOXED(4601947435945177600,64,FLEN)
NAN_BOXED(13825319472799953408,64,FLEN)
NAN_BOXED(4601947435945177600,64,FLEN)
NAN_BOXED(13825319472799953408,64,FLEN)
NAN_BOXED(4602040815752738762,64,FLEN)
NAN_BOXED(13825412852607514570,64,FLEN)
NAN_BOXED(4602040815752738762,64,FLEN)
NAN_BOXED(13825412852607514570,64,FLEN)
NAN_BOXED(4602040815752738762,64,FLEN)
NAN_BOXED(13825412852607514570,64,FLEN)
NAN_BOXED(4602040815752738762,64,FLEN)
NAN_BOXED(13825412852607514570,64,FLEN)
NAN_BOXED(4602040815752738762,64,FLEN)
NAN_BOXED(13825412852607514570,64,FLEN)
NAN_BOXED(4602263583113065450,64,FLEN)
NAN_BOXED(13825635619967841258,64,FLEN)
NAN_BOXED(4602263583113065450,64,FLEN)
NAN_BOXED(13825635619967841258,64,FLEN)
NAN_BOXED(4602263583113065450,64,FLEN)
NAN_BOXED(13825635619967841258,64,FLEN)
NAN_BOXED(4602263583113065450,64,FLEN)
NAN_BOXED(13825635619967841258,64,FLEN)
NAN_BOXED(4602263583113065450,64,FLEN)
NAN_BOXED(13825635619967841258,64,FLEN)
NAN_BOXED(4602336478430655086,64,FLEN)
NAN_BOXED(13825708515285430894,64,FLEN)
NAN_BOXED(4602336478430655086,64,FLEN)
NAN_BOXED(13825708515285430894,64,FLEN)
NAN_BOXED(4602336478430655086,64,FLEN)
NAN_BOXED(13825708515285430894,64,FLEN)
NAN_BOXED(4602336478430655086,64,FLEN)
NAN_BOXED(13825708515285430894,64,FLEN)
NAN_BOXED(4602336478430655086,64,FLEN)
NAN_BOXED(13825708515285430894,64,FLEN)
NAN_BOXED(4602475711848829426,64,FLEN)
NAN_BOXED(13825847748703605234,64,FLEN)
NAN_BOXED(4602475711848829426,64,FLEN)
NAN_BOXED(13825847748703605234,64,FLEN)
NAN_BOXED(4602475711848829426,64,FLEN)
NAN_BOXED(13825847748703605234,64,FLEN)
NAN_BOXED(4602475711848829426,64,FLEN)
NAN_BOXED(13825847748703605234,64,FLEN)
NAN_BOXED(4602475711848829426,64,FLEN)
NAN_BOXED(13825847748703605234,64,FLEN)
NAN_BOXED(4602535773273859956,64,FLEN)
NAN_BOXED(13825907810128635764,64,FLEN)
NAN_BOXED(4602535773273859956,64,FLEN)
NAN_BOXED(13825907810128635764,64,FLEN)
NAN_BOXED(4602535773273859956,64,FLEN)
NAN_BOXED(13825907810128635764,64,FLEN)
NAN_BOXED(4602535773273859956,64,FLEN)
NAN_BOXED(13825907810128635764,64,FLEN)
NAN_BOXED(4602535773273859956,64,FLEN)
NAN_BOXED(13825907810128635764,64,FLEN)
NAN_BOXED(4602555280267417612,64,FLEN)
NAN_BOXED(13825927317122193420,64,FLEN)
NAN_BOXED(4602555280267417612,64,FLEN)
NAN_BOXED(13825927317122193420,64,FLEN)
NAN_BOXED(4602555280267417612,64,FLEN)
NAN_BOXED(13825927317122193420,64,FLEN)
NAN_BOXED(4602555280267417612,64,FLEN)
NAN_BOXED(13825927317122193420,64,FLEN)
NAN_BOXED(4602555280267417612,64,FLEN)
NAN_BOXED(13825927317122193420,64,FLEN)
NAN_BOXED(4602613309718614196,64,FLEN)
NAN_BOXED(13825985346573390004,64,FLEN)
NAN_BOXED(4602613309718614196,64,FLEN)
NAN_BOXED(13825985346573390004,64,FLEN)
NAN_BOXED(4602613309718614196,64,FLEN)
NAN_BOXED(13825985346573390004,64,FLEN)
NAN_BOXED(4602613309718614196,64,FLEN)
NAN_BOXED(13825985346573390004,64,FLEN)
NAN_BOXED(4602613309718614196,64,FLEN)
NAN_BOXED(13825985346573390004,64,FLEN)
NAN_BOXED(4602692862373649486,64,FLEN)
NAN_BOXED(13826064899228425294,64,FLEN)
NAN_BOXED(4602692862373649486,64,FLEN)
NAN_BOXED(13826064899228425294,64,FLEN)
NAN_BOXED(4602692862373649486,64,FLEN)
NAN_BOXED(13826064899228425294,64,FLEN)
NAN_BOXED(4602692862373649486,64,FLEN)
NAN_BOXED(13826064899228425294,64,FLEN)
NAN_BOXED(4602692862373649486,64,FLEN)
NAN_BOXED(13826064899228425294,64,FLEN)
NAN_BOXED(4602727614140005315,64,FLEN)
NAN_BOXED(13826099650994781123,64,FLEN)
NAN_BOXED(4602727614140005315,64,FLEN)
NAN_BOXED(13826099650994781123,64,FLEN)
NAN_BOXED(4602727614140005315,64,FLEN)
NAN_BOXED(13826099650994781123,64,FLEN)
NAN_BOXED(4602727614140005315,64,FLEN)
NAN_BOXED(13826099650994781123,64,FLEN)
NAN_BOXED(4602727614140005315,64,FLEN)
NAN_BOXED(13826099650994781123,64,FLEN)
NAN_BOXED(4602752399351786992,64,FLEN)
NAN_BOXED(13826124436206562800,64,FLEN)
NAN_BOXED(4602752399351786992,64,FLEN)
NAN_BOXED(13826124436206562800,64,FLEN)
NAN_BOXED(4602752399351786992,64,FLEN)
NAN_BOXED(13826124436206562800,64,FLEN)
NAN_BOXED(4602752399351786992,64,FLEN)
NAN_BOXED(13826124436206562800,64,FLEN)
NAN_BOXED(4602752399351786992,64,FLEN)
NAN_BOXED(13826124436206562800,64,FLEN)
NAN_BOXED(4602766011766036179,64,FLEN)
NAN_BOXED(13826138048620811987,64,FLEN)
NAN_BOXED(4602766011766036179,64,FLEN)
NAN_BOXED(13826138048620811987,64,FLEN)
NAN_BOXED(4602766011766036179,64,FLEN)
NAN_BOXED(13826138048620811987,64,FLEN)
NAN_BOXED(4602766011766036179,64,FLEN)
NAN_BOXED(13826138048620811987,64,FLEN)
NAN_BOXED(4602766011766036179,64,FLEN)
NAN_BOXED(13826138048620811987,64,FLEN)
NAN_BOXED(4602781331868928725,64,FLEN)
NAN_BOXED(13826153368723704533,64,FLEN)
NAN_BOXED(4602781331868928725,64,FLEN)
NAN_BOXED(13826153368723704533,64,FLEN)
NAN_BOXED(4602781331868928725,64,FLEN)
NAN_BOXED(13826153368723704533,64,FLEN)
NAN_BOXED(4602781331868928725,64,FLEN)
NAN_BOXED(13826153368723704533,64,FLEN)
NAN_BOXED(4602781331868928725,64,FLEN)
NAN_BOXED(13826153368723704533,64,FLEN)
NAN_BOXED(4602793520441207501,64,FLEN)
NAN_BOXED(13826165557295983309,64,FLEN)
NAN_BOXED(4602793520441207501,64,FLEN)
NAN_BOXED(13826165557295983309,64,FLEN)
NAN_BOXED(4602793520441207501,64,FLEN)
NAN_BOXED(13826165557295983309,64,FLEN)
NAN_BOXED(4602793520441207501,64,FLEN)
NAN_BOXED(13826165557295983309,64,FLEN)
NAN_BOXED(4602793520441207501,64,FLEN)
NAN_BOXED(13826165557295983309,64,FLEN)
NAN_BOXED(4602803432866872322,64,FLEN)
NAN_BOXED(13826175469721648130,64,FLEN)
NAN_BOXED(4602803432866872322,64,FLEN)
NAN_BOXED(13826175469721648130,64,FLEN)
NAN_BOXED(4602803432866872322,64,FLEN)
NAN_BOXED(13826175469721648130,64,FLEN)
NAN_BOXED(4602803432866872322,64,FLEN)
NAN_BOXED(13826175469721648130,64,FLEN)
NAN_BOXED(4602803432866872322,64,FLEN)
NAN_BOXED(13826175469721648130,64,FLEN)
NAN_BOXED(4602876395068322333,64,FLEN)
NAN_BOXED(13826248431923098141,64,FLEN)
NAN_BOXED(4602876395068322333,64,FLEN)
NAN_BOXED(13826248431923098141,64,FLEN)
NAN_BOXED(4602876395068322333,64,FLEN)
NAN_BOXED(13826248431923098141,64,FLEN)
NAN_BOXED(4602876395068322333,64,FLEN)
NAN_BOXED(13826248431923098141,64,FLEN)
NAN_BOXED(4602876395068322333,64,FLEN)
NAN_BOXED(13826248431923098141,64,FLEN)
NAN_BOXED(4602885896696147608,64,FLEN)
NAN_BOXED(13826257933550923416,64,FLEN)
NAN_BOXED(4602885896696147608,64,FLEN)
NAN_BOXED(13826257933550923416,64,FLEN)
NAN_BOXED(4602885896696147608,64,FLEN)
NAN_BOXED(13826257933550923416,64,FLEN)
NAN_BOXED(4602885896696147608,64,FLEN)
NAN_BOXED(13826257933550923416,64,FLEN)
NAN_BOXED(4602885896696147608,64,FLEN)
NAN_BOXED(13826257933550923416,64,FLEN)
NAN_BOXED(4602889615069764482,64,FLEN)
NAN_BOXED(13826261651924540290,64,FLEN)
NAN_BOXED(4602889615069764482,64,FLEN)
NAN_BOXED(13826261651924540290,64,FLEN)
NAN_BOXED(4602889615069764482,64,FLEN)
NAN_BOXED(13826261651924540290,64,FLEN)
NAN_BOXED(4602889615069764482,64,FLEN)
NAN_BOXED(13826261651924540290,64,FLEN)
NAN_BOXED(4602889615069764482,64,FLEN)
NAN_BOXED(13826261651924540290,64,FLEN)
NAN_BOXED(4602890209203929528,64,FLEN)
NAN_BOXED(13826262246058705336,64,FLEN)
NAN_BOXED(4602890209203929528,64,FLEN)
NAN_BOXED(13826262246058705336,64,FLEN)
NAN_BOXED(4602890209203929528,64,FLEN)
NAN_BOXED(13826262246058705336,64,FLEN)
NAN_BOXED(4602890209203929528,64,FLEN)
NAN_BOXED(13826262246058705336,64,FLEN)
NAN_BOXED(4602890209203929528,64,FLEN)
NAN_BOXED(13826262246058705336,64,FLEN)
NAN_BOXED(4602918677261060088,64,FLEN)
NAN_BOXED(13826290714115835896,64,FLEN)
NAN_BOXED(4602918677261060088,64,FLEN)
NAN_BOXED(13826290714115835896,64,FLEN)
NAN_BOXED(4602918677261060088,64,FLEN)
NAN_BOXED(13826290714115835896,64,FLEN)
NAN_BOXED(4602918677261060088,64,FLEN)
NAN_BOXED(13826290714115835896,64,FLEN)
NAN_BOXED(4602918677261060088,64,FLEN)
NAN_BOXED(13826290714115835896,64,FLEN)
NAN_BOXED(4602929735285260340,64,FLEN)
NAN_BOXED(13826301772140036148,64,FLEN)
NAN_BOXED(4602929735285260340,64,FLEN)
NAN_BOXED(13826301772140036148,64,FLEN)
NAN_BOXED(4602929735285260340,64,FLEN)
NAN_BOXED(13826301772140036148,64,FLEN)
NAN_BOXED(4602929735285260340,64,FLEN)
NAN_BOXED(13826301772140036148,64,FLEN)
NAN_BOXED(4602929735285260340,64,FLEN)
NAN_BOXED(13826301772140036148,64,FLEN)
NAN_BOXED(4602934394712645212,64,FLEN)
NAN_BOXED(13826306431567421020,64,FLEN)
NAN_BOXED(4602934394712645212,64,FLEN)
NAN_BOXED(13826306431567421020,64,FLEN)
NAN_BOXED(4602934394712645212,64,FLEN)
NAN_BOXED(13826306431567421020,64,FLEN)
NAN_BOXED(4602934394712645212,64,FLEN)
NAN_BOXED(13826306431567421020,64,FLEN)
NAN_BOXED(4602934394712645212,64,FLEN)
NAN_BOXED(13826306431567421020,64,FLEN)
NAN_BOXED(4602941025867214100,64,FLEN)
NAN_BOXED(13826313062721989908,64,FLEN)
NAN_BOXED(4602941025867214100,64,FLEN)
NAN_BOXED(13826313062721989908,64,FLEN)
NAN_BOXED(4602941025867214100,64,FLEN)
NAN_BOXED(13826313062721989908,64,FLEN)
NAN_BOXED(4602941025867214100,64,FLEN)
NAN_BOXED(13826313062721989908,64,FLEN)
NAN_BOXED(4602941025867214100,64,FLEN)
NAN_BOXED(13826313062721989908,64,FLEN)
NAN_BOXED(4602941040878600727,64,FLEN)
NAN_BOXED(13826313077733376535,64,FLEN)
NAN_BOXED(4602941040878600727,64,FLEN)
NAN_BOXED(13826313077733376535,64,FLEN)
NAN_BOXED(4602941040878600727,64,FLEN)
NAN_BOXED(13826313077733376535,64,FLEN)
NAN_BOXED(4602941040878600727,64,FLEN)
NAN_BOXED(13826313077733376535,64,FLEN)
NAN_BOXED(4602941040878600727,64,FLEN)
NAN_BOXED(13826313077733376535,64,FLEN)
NAN_BOXED(4602977027405705802,64,FLEN)
NAN_BOXED(13826349064260481610,64,FLEN)
NAN_BOXED(4602977027405705802,64,FLEN)
NAN_BOXED(13826349064260481610,64,FLEN)
NAN_BOXED(4602977027405705802,64,FLEN)
NAN_BOXED(13826349064260481610,64,FLEN)
NAN_BOXED(4602977027405705802,64,FLEN)
NAN_BOXED(13826349064260481610,64,FLEN)
NAN_BOXED(4602977027405705802,64,FLEN)
NAN_BOXED(13826349064260481610,64,FLEN)
NAN_BOXED(4603098131035550043,64,FLEN)
NAN_BOXED(13826470167890325851,64,FLEN)
NAN_BOXED(4603098131035550043,64,FLEN)
NAN_BOXED(13826470167890325851,64,FLEN)
NAN_BOXED(4603098131035550043,64,FLEN)
NAN_BOXED(13826470167890325851,64,FLEN)
NAN_BOXED(4603098131035550043,64,FLEN)
NAN_BOXED(13826470167890325851,64,FLEN)
NAN_BOXED(4603098131035550043,64,FLEN)
NAN_BOXED(13826470167890325851,64,FLEN)
NAN_BOXED(4603114661397496010,64,FLEN)
NAN_BOXED(13826486698252271818,64,FLEN)
NAN_BOXED(4603114661397496010,64,FLEN)
NAN_BOXED(13826486698252271818,64,FLEN)
NAN_BOXED(4603114661397496010,64,FLEN)
NAN_BOXED(13826486698252271818,64,FLEN)
NAN_BOXED(4603114661397496010,64,FLEN)
NAN_BOXED(13826486698252271818,64,FLEN)
NAN_BOXED(4603114661397496010,64,FLEN)
NAN_BOXED(13826486698252271818,64,FLEN)
NAN_BOXED(4603124107121755481,64,FLEN)
NAN_BOXED(13826496143976531289,64,FLEN)
NAN_BOXED(4603124107121755481,64,FLEN)
NAN_BOXED(13826496143976531289,64,FLEN)
NAN_BOXED(4603124107121755481,64,FLEN)
NAN_BOXED(13826496143976531289,64,FLEN)
NAN_BOXED(4603124107121755481,64,FLEN)
NAN_BOXED(13826496143976531289,64,FLEN)
NAN_BOXED(4603124107121755481,64,FLEN)
NAN_BOXED(13826496143976531289,64,FLEN)
NAN_BOXED(4603171042888684695,64,FLEN)
NAN_BOXED(13826543079743460503,64,FLEN)
NAN_BOXED(4603171042888684695,64,FLEN)
NAN_BOXED(13826543079743460503,64,FLEN)
NAN_BOXED(4603171042888684695,64,FLEN)
NAN_BOXED(13826543079743460503,64,FLEN)
NAN_BOXED(4603171042888684695,64,FLEN)
NAN_BOXED(13826543079743460503,64,FLEN)
NAN_BOXED(4603171042888684695,64,FLEN)
NAN_BOXED(13826543079743460503,64,FLEN)
NAN_BOXED(4603175916094884041,64,FLEN)
NAN_BOXED(13826547952949659849,64,FLEN)
NAN_BOXED(4603175916094884041,64,FLEN)
NAN_BOXED(13826547952949659849,64,FLEN)
NAN_BOXED(4603175916094884041,64,FLEN)
NAN_BOXED(13826547952949659849,64,FLEN)
NAN_BOXED(4603175916094884041,64,FLEN)
NAN_BOXED(13826547952949659849,64,FLEN)
NAN_BOXED(4603175916094884041,64,FLEN)
NAN_BOXED(13826547952949659849,64,FLEN)
NAN_BOXED(4603198408165321582,64,FLEN)
NAN_BOXED(13826570445020097390,64,FLEN)
NAN_BOXED(4603198408165321582,64,FLEN)
NAN_BOXED(13826570445020097390,64,FLEN)
NAN_BOXED(4603198408165321582,64,FLEN)
NAN_BOXED(13826570445020097390,64,FLEN)
NAN_BOXED(4603198408165321582,64,FLEN)
NAN_BOXED(13826570445020097390,64,FLEN)
NAN_BOXED(4603198408165321582,64,FLEN)
NAN_BOXED(13826570445020097390,64,FLEN)
NAN_BOXED(4603271746567288559,64,FLEN)
NAN_BOXED(13826643783422064367,64,FLEN)
NAN_BOXED(4603271746567288559,64,FLEN)
NAN_BOXED(13826643783422064367,64,FLEN)
NAN_BOXED(4603271746567288559,64,FLEN)
NAN_BOXED(13826643783422064367,64,FLEN)
NAN_BOXED(4603271746567288559,64,FLEN)
NAN_BOXED(13826643783422064367,64,FLEN)
NAN_BOXED(4603271746567288559,64,FLEN)
NAN_BOXED(13826643783422064367,64,FLEN)
NAN_BOXED(4603293862302912945,64,FLEN)
NAN_BOXED(13826665899157688753,64,FLEN)
NAN_BOXED(4603293862302912945,64,FLEN)
NAN_BOXED(13826665899157688753,64,FLEN)
NAN_BOXED(4603293862302912945,64,FLEN)
NAN_BOXED(13826665899157688753,64,FLEN)
NAN_BOXED(4603293862302912945,64,FLEN)
NAN_BOXED(13826665899157688753,64,FLEN)
NAN_BOXED(4603293862302912945,64,FLEN)
NAN_BOXED(13826665899157688753,64,FLEN)
NAN_BOXED(4603298325108323013,64,FLEN)
NAN_BOXED(13826670361963098821,64,FLEN)
NAN_BOXED(4603298325108323013,64,FLEN)
NAN_BOXED(13826670361963098821,64,FLEN)
NAN_BOXED(4603298325108323013,64,FLEN)
NAN_BOXED(13826670361963098821,64,FLEN)
NAN_BOXED(4603298325108323013,64,FLEN)
NAN_BOXED(13826670361963098821,64,FLEN)
NAN_BOXED(4603298325108323013,64,FLEN)
NAN_BOXED(13826670361963098821,64,FLEN)
NAN_BOXED(4603345619899039986,64,FLEN)
NAN_BOXED(13826717656753815794,64,FLEN)
NAN_BOXED(4603345619899039986,64,FLEN)
NAN_BOXED(13826717656753815794,64,FLEN)
NAN_BOXED(4603345619899039986,64,FLEN)
NAN_BOXED(13826717656753815794,64,FLEN)
NAN_BOXED(4603345619899039986,64,FLEN)
NAN_BOXED(13826717656753815794,64,FLEN)
NAN_BOXED(4603345619899039986,64,FLEN)
NAN_BOXED(13826717656753815794,64,FLEN)
NAN_BOXED(4603394246770592580,64,FLEN)
NAN_BOXED(13826766283625368388,64,FLEN)
NAN_BOXED(4603394246770592580,64,FLEN)
NAN_BOXED(13826766283625368388,64,FLEN)
NAN_BOXED(4603394246770592580,64,FLEN)
NAN_BOXED(13826766283625368388,64,FLEN)
NAN_BOXED(4603394246770592580,64,FLEN)
NAN_BOXED(13826766283625368388,64,FLEN)
NAN_BOXED(4603394246770592580,64,FLEN)
NAN_BOXED(13826766283625368388,64,FLEN)
NAN_BOXED(4603438655724294441,64,FLEN)
NAN_BOXED(13826810692579070249,64,FLEN)
NAN_BOXED(4603438655724294441,64,FLEN)
NAN_BOXED(13826810692579070249,64,FLEN)
NAN_BOXED(4603438655724294441,64,FLEN)
NAN_BOXED(13826810692579070249,64,FLEN)
NAN_BOXED(4603438655724294441,64,FLEN)
NAN_BOXED(13826810692579070249,64,FLEN)
NAN_BOXED(4603438655724294441,64,FLEN)
NAN_BOXED(13826810692579070249,64,FLEN)
NAN_BOXED(4603446938632764847,64,FLEN)
NAN_BOXED(13826818975487540655,64,FLEN)
NAN_BOXED(4603446938632764847,64,FLEN)
NAN_BOXED(13826818975487540655,64,FLEN)
NAN_BOXED(4603446938632764847,64,FLEN)
NAN_BOXED(13826818975487540655,64,FLEN)
NAN_BOXED(4603446938632764847,64,FLEN)
NAN_BOXED(13826818975487540655,64,FLEN)
NAN_BOXED(4603446938632764847,64,FLEN)
NAN_BOXED(13826818975487540655,64,FLEN)
NAN_BOXED(4603449673404855325,64,FLEN)
NAN_BOXED(13826821710259631133,64,FLEN)
NAN_BOXED(4603449673404855325,64,FLEN)
NAN_BOXED(13826821710259631133,64,FLEN)
NAN_BOXED(4603449673404855325,64,FLEN)
NAN_BOXED(13826821710259631133,64,FLEN)
NAN_BOXED(4603449673404855325,64,FLEN)
NAN_BOXED(13826821710259631133,64,FLEN)
NAN_BOXED(4603449673404855325,64,FLEN)
NAN_BOXED(13826821710259631133,64,FLEN)
NAN_BOXED(4603449777812648587,64,FLEN)
NAN_BOXED(13826821814667424395,64,FLEN)
NAN_BOXED(4603449777812648587,64,FLEN)
NAN_BOXED(13826821814667424395,64,FLEN)
NAN_BOXED(4603449777812648587,64,FLEN)
NAN_BOXED(13826821814667424395,64,FLEN)
NAN_BOXED(4603449777812648587,64,FLEN)
NAN_BOXED(13826821814667424395,64,FLEN)
NAN_BOXED(4603449777812648587,64,FLEN)
NAN_BOXED(13826821814667424395,64,FLEN)
NAN_BOXED(4603479197130422741,64,FLEN)
NAN_BOXED(13826851233985198549,64,FLEN)
NAN_BOXED(4603479197130422741,64,FLEN)
NAN_BOXED(13826851233985198549,64,FLEN)
NAN_BOXED(4603479197130422741,64,FLEN)
NAN_BOXED(13826851233985198549,64,FLEN)
NAN_BOXED(4603479197130422741,64,FLEN)
NAN_BOXED(13826851233985198549,64,FLEN)
NAN_BOXED(4603479197130422741,64,FLEN)
NAN_BOXED(13826851233985198549,64,FLEN)
NAN_BOXED(4603501841005108929,64,FLEN)
NAN_BOXED(13826873877859884737,64,FLEN)
NAN_BOXED(4603501841005108929,64,FLEN)
NAN_BOXED(13826873877859884737,64,FLEN)
NAN_BOXED(4603501841005108929,64,FLEN)
NAN_BOXED(13826873877859884737,64,FLEN)
NAN_BOXED(4603501841005108929,64,FLEN)
NAN_BOXED(13826873877859884737,64,FLEN)
NAN_BOXED(4603501841005108929,64,FLEN)
NAN_BOXED(13826873877859884737,64,FLEN)
NAN_BOXED(4603506822470868694,64,FLEN)
NAN_BOXED(13826878859325644502,64,FLEN)
NAN_BOXED(4603506822470868694,64,FLEN)
NAN_BOXED(13826878859325644502,64,FLEN)
NAN_BOXED(4603506822470868694,64,FLEN)
NAN_BOXED(13826878859325644502,64,FLEN)
NAN_BOXED(4603506822470868694,64,FLEN)
NAN_BOXED(13826878859325644502,64,FLEN)
NAN_BOXED(4603506822470868694,64,FLEN)
NAN_BOXED(13826878859325644502,64,FLEN)
NAN_BOXED(4603526334624452820,64,FLEN)
NAN_BOXED(13826898371479228628,64,FLEN)
NAN_BOXED(4603526334624452820,64,FLEN)
NAN_BOXED(13826898371479228628,64,FLEN)
NAN_BOXED(4603526334624452820,64,FLEN)
NAN_BOXED(13826898371479228628,64,FLEN)
NAN_BOXED(4603526334624452820,64,FLEN)
NAN_BOXED(13826898371479228628,64,FLEN)
NAN_BOXED(4603526334624452820,64,FLEN)
NAN_BOXED(13826898371479228628,64,FLEN)
NAN_BOXED(4603550993964622600,64,FLEN)
NAN_BOXED(13826923030819398408,64,FLEN)
NAN_BOXED(4603550993964622600,64,FLEN)
NAN_BOXED(13826923030819398408,64,FLEN)
NAN_BOXED(4603550993964622600,64,FLEN)
NAN_BOXED(13826923030819398408,64,FLEN)
NAN_BOXED(4603550993964622600,64,FLEN)
NAN_BOXED(13826923030819398408,64,FLEN)
NAN_BOXED(4603550993964622600,64,FLEN)
NAN_BOXED(13826923030819398408,64,FLEN)
NAN_BOXED(4603563174618442192,64,FLEN)
NAN_BOXED(13826935211473218000,64,FLEN)
NAN_BOXED(4603563174618442192,64,FLEN)
NAN_BOXED(13826935211473218000,64,FLEN)
NAN_BOXED(4603563174618442192,64,FLEN)
NAN_BOXED(13826935211473218000,64,FLEN)
NAN_BOXED(4603563174618442192,64,FLEN)
NAN_BOXED(13826935211473218000,64,FLEN)
NAN_BOXED(4603563174618442192,64,FLEN)
NAN_BOXED(13826935211473218000,64,FLEN)
NAN_BOXED(4603590555757325201,64,FLEN)
NAN_BOXED(13826962592612101009,64,FLEN)
NAN_BOXED(4603590555757325201,64,FLEN)
NAN_BOXED(13826962592612101009,64,FLEN)
NAN_BOXED(4603590555757325201,64,FLEN)
NAN_BOXED(13826962592612101009,64,FLEN)
NAN_BOXED(4603590555757325201,64,FLEN)
NAN_BOXED(13826962592612101009,64,FLEN)
NAN_BOXED(4603590555757325201,64,FLEN)
NAN_BOXED(13826962592612101009,64,FLEN)
NAN_BOXED(4603609297287203885,64,FLEN)
NAN_BOXED(13826981334141979693,64,FLEN)
NAN_BOXED(4603609297287203885,64,FLEN)
NAN_BOXED(13826981334141979693,64,FLEN)
NAN_BOXED(4603609297287203885,64,FLEN)
NAN_BOXED(13826981334141979693,64,FLEN)
NAN_BOXED(4603609297287203885,64,FLEN)
NAN_BOXED(13826981334141979693,64,FLEN)
NAN_BOXED(4603609297287203885,64,FLEN)
NAN_BOXED(13826981334141979693,64,FLEN)
NAN_BOXED(4603699487920757440,64,FLEN)
NAN_BOXED(13827071524775533248,64,FLEN)
NAN_BOXED(4603699487920757440,64,FLEN)
NAN_BOXED(13827071524775533248,64,FLEN)
NAN_BOXED(4603699487920757440,64,FLEN)
NAN_BOXED(13827071524775533248,64,FLEN)
NAN_BOXED(4603699487920757440,64,FLEN)
NAN_BOXED(13827071524775533248,64,FLEN)
NAN_BOXED(4603699487920757440,64,FLEN)
NAN_BOXED(13827071524775533248,64,FLEN)
NAN_BOXED(4603728931845949426,64,FLEN)
NAN_BOXED(13827100968700725234,64,FLEN)
NAN_BOXED(4603728931845949426,64,FLEN)
NAN_BOXED(13827100968700725234,64,FLEN)
NAN_BOXED(4603728931845949426,64,FLEN)
NAN_BOXED(13827100968700725234,64,FLEN)
NAN_BOXED(4603728931845949426,64,FLEN)
NAN_BOXED(13827100968700725234,64,FLEN)
NAN_BOXED(4603728931845949426,64,FLEN)
NAN_BOXED(13827100968700725234,64,FLEN)
NAN_BOXED(4603777409572777394,64,FLEN)
NAN_BOXED(13827149446427553202,64,FLEN)
NAN_BOXED(4603777409572777394,64,FLEN)
NAN_BOXED(13827149446427553202,64,FLEN)
NAN_BOXED(4603777409572777394,64,FLEN)
NAN_BOXED(13827149446427553202,64,FLEN)
NAN_BOXED(4603777409572777394,64,FLEN)
NAN_BOXED(13827149446427553202,64,FLEN)
NAN_BOXED(4603777409572777394,64,FLEN)
NAN_BOXED(13827149446427553202,64,FLEN)
NAN_BOXED(4603827694076144872,64,FLEN)
NAN_BOXED(13827199730930920680,64,FLEN)
NAN_BOXED(4603827694076144872,64,FLEN)
NAN_BOXED(13827199730930920680,64,FLEN)
NAN_BOXED(4603827694076144872,64,FLEN)
NAN_BOXED(13827199730930920680,64,FLEN)
NAN_BOXED(4603827694076144872,64,FLEN)
NAN_BOXED(13827199730930920680,64,FLEN)
NAN_BOXED(4603827694076144872,64,FLEN)
NAN_BOXED(13827199730930920680,64,FLEN)
NAN_BOXED(4603848494605280432,64,FLEN)
NAN_BOXED(13827220531460056240,64,FLEN)
NAN_BOXED(4603848494605280432,64,FLEN)
NAN_BOXED(13827220531460056240,64,FLEN)
NAN_BOXED(4603848494605280432,64,FLEN)
NAN_BOXED(13827220531460056240,64,FLEN)
NAN_BOXED(4603848494605280432,64,FLEN)
NAN_BOXED(13827220531460056240,64,FLEN)
NAN_BOXED(4603848494605280432,64,FLEN)
NAN_BOXED(13827220531460056240,64,FLEN)
NAN_BOXED(4603864783981024303,64,FLEN)
NAN_BOXED(13827236820835800111,64,FLEN)
NAN_BOXED(4603864783981024303,64,FLEN)
NAN_BOXED(13827236820835800111,64,FLEN)
NAN_BOXED(4603864783981024303,64,FLEN)
NAN_BOXED(13827236820835800111,64,FLEN)
NAN_BOXED(4603864783981024303,64,FLEN)
NAN_BOXED(13827236820835800111,64,FLEN)
NAN_BOXED(4603864783981024303,64,FLEN)
NAN_BOXED(13827236820835800111,64,FLEN)
NAN_BOXED(4603947022043811392,64,FLEN)
NAN_BOXED(13827319058898587200,64,FLEN)
NAN_BOXED(4603947022043811392,64,FLEN)
NAN_BOXED(13827319058898587200,64,FLEN)
NAN_BOXED(4603947022043811392,64,FLEN)
NAN_BOXED(13827319058898587200,64,FLEN)
NAN_BOXED(4603947022043811392,64,FLEN)
NAN_BOXED(13827319058898587200,64,FLEN)
NAN_BOXED(4603947022043811392,64,FLEN)
NAN_BOXED(13827319058898587200,64,FLEN)
NAN_BOXED(4604009852984834202,64,FLEN)
NAN_BOXED(13827381889839610010,64,FLEN)
NAN_BOXED(4604009852984834202,64,FLEN)
NAN_BOXED(13827381889839610010,64,FLEN)
NAN_BOXED(4604009852984834202,64,FLEN)
NAN_BOXED(13827381889839610010,64,FLEN)
NAN_BOXED(4604009852984834202,64,FLEN)
NAN_BOXED(13827381889839610010,64,FLEN)
NAN_BOXED(4604009852984834202,64,FLEN)
NAN_BOXED(13827381889839610010,64,FLEN)
NAN_BOXED(4604027251237943097,64,FLEN)
NAN_BOXED(13827399288092718905,64,FLEN)
NAN_BOXED(4604027251237943097,64,FLEN)
NAN_BOXED(13827399288092718905,64,FLEN)
NAN_BOXED(4604027251237943097,64,FLEN)
NAN_BOXED(13827399288092718905,64,FLEN)
NAN_BOXED(4604027251237943097,64,FLEN)
NAN_BOXED(13827399288092718905,64,FLEN)
NAN_BOXED(4604027251237943097,64,FLEN)
NAN_BOXED(13827399288092718905,64,FLEN)
NAN_BOXED(4604087080421732608,64,FLEN)
NAN_BOXED(13827459117276508416,64,FLEN)
NAN_BOXED(4604087080421732608,64,FLEN)
NAN_BOXED(13827459117276508416,64,FLEN)
NAN_BOXED(4604087080421732608,64,FLEN)
NAN_BOXED(13827459117276508416,64,FLEN)
NAN_BOXED(4604087080421732608,64,FLEN)
NAN_BOXED(13827459117276508416,64,FLEN)
NAN_BOXED(4604087080421732608,64,FLEN)
NAN_BOXED(13827459117276508416,64,FLEN)
NAN_BOXED(4604117986631842007,64,FLEN)
NAN_BOXED(13827490023486617815,64,FLEN)
NAN_BOXED(4604117986631842007,64,FLEN)
NAN_BOXED(13827490023486617815,64,FLEN)
NAN_BOXED(4604117986631842007,64,FLEN)
NAN_BOXED(13827490023486617815,64,FLEN)
NAN_BOXED(4604117986631842007,64,FLEN)
NAN_BOXED(13827490023486617815,64,FLEN)
NAN_BOXED(4604117986631842007,64,FLEN)
NAN_BOXED(13827490023486617815,64,FLEN)
NAN_BOXED(4604170396141097996,64,FLEN)
NAN_BOXED(13827542432995873804,64,FLEN)
NAN_BOXED(4604170396141097996,64,FLEN)
NAN_BOXED(13827542432995873804,64,FLEN)
NAN_BOXED(4604170396141097996,64,FLEN)
NAN_BOXED(13827542432995873804,64,FLEN)
NAN_BOXED(4604170396141097996,64,FLEN)
NAN_BOXED(13827542432995873804,64,FLEN)
NAN_BOXED(4604170396141097996,64,FLEN)
NAN_BOXED(13827542432995873804,64,FLEN)
NAN_BOXED(4604179343015830400,64,FLEN)
NAN_BOXED(13827551379870606208,64,FLEN)
NAN_BOXED(4604179343015830400,64,FLEN)
NAN_BOXED(13827551379870606208,64,FLEN)
NAN_BOXED(4604179343015830400,64,FLEN)
NAN_BOXED(13827551379870606208,64,FLEN)
NAN_BOXED(4604179343015830400,64,FLEN)
NAN_BOXED(13827551379870606208,64,FLEN)
NAN_BOXED(4604179343015830400,64,FLEN)
NAN_BOXED(13827551379870606208,64,FLEN)
NAN_BOXED(4604204689461700915,64,FLEN)
NAN_BOXED(13827576726316476723,64,FLEN)
NAN_BOXED(4604204689461700915,64,FLEN)
NAN_BOXED(13827576726316476723,64,FLEN)
NAN_BOXED(4604204689461700915,64,FLEN)
NAN_BOXED(13827576726316476723,64,FLEN)
NAN_BOXED(4604204689461700915,64,FLEN)
NAN_BOXED(13827576726316476723,64,FLEN)
NAN_BOXED(4604204689461700915,64,FLEN)
NAN_BOXED(13827576726316476723,64,FLEN)
NAN_BOXED(4604253238306240597,64,FLEN)
NAN_BOXED(13827625275161016405,64,FLEN)
NAN_BOXED(4604253238306240597,64,FLEN)
NAN_BOXED(13827625275161016405,64,FLEN)
NAN_BOXED(4604253238306240597,64,FLEN)
NAN_BOXED(13827625275161016405,64,FLEN)
NAN_BOXED(4604253238306240597,64,FLEN)
NAN_BOXED(13827625275161016405,64,FLEN)
NAN_BOXED(4604253238306240597,64,FLEN)
NAN_BOXED(13827625275161016405,64,FLEN)
NAN_BOXED(4604334548325271193,64,FLEN)
NAN_BOXED(13827706585180047001,64,FLEN)
NAN_BOXED(4604334548325271193,64,FLEN)
NAN_BOXED(13827706585180047001,64,FLEN)
NAN_BOXED(4604334548325271193,64,FLEN)
NAN_BOXED(13827706585180047001,64,FLEN)
NAN_BOXED(4604334548325271193,64,FLEN)
NAN_BOXED(13827706585180047001,64,FLEN)
NAN_BOXED(4604334548325271193,64,FLEN)
NAN_BOXED(13827706585180047001,64,FLEN)
NAN_BOXED(4604377162611916283,64,FLEN)
NAN_BOXED(13827749199466692091,64,FLEN)
NAN_BOXED(4604377162611916283,64,FLEN)
NAN_BOXED(13827749199466692091,64,FLEN)
NAN_BOXED(4604377162611916283,64,FLEN)
NAN_BOXED(13827749199466692091,64,FLEN)
NAN_BOXED(4604377162611916283,64,FLEN)
NAN_BOXED(13827749199466692091,64,FLEN)
NAN_BOXED(4604377162611916283,64,FLEN)
NAN_BOXED(13827749199466692091,64,FLEN)
NAN_BOXED(4604388857844784585,64,FLEN)
NAN_BOXED(13827760894699560393,64,FLEN)
NAN_BOXED(4604388857844784585,64,FLEN)
NAN_BOXED(13827760894699560393,64,FLEN)
NAN_BOXED(4604388857844784585,64,FLEN)
NAN_BOXED(13827760894699560393,64,FLEN)
NAN_BOXED(4604388857844784585,64,FLEN)
NAN_BOXED(13827760894699560393,64,FLEN)
NAN_BOXED(4604388857844784585,64,FLEN)
NAN_BOXED(13827760894699560393,64,FLEN)
NAN_BOXED(4604432416473862819,64,FLEN)
NAN_BOXED(13827804453328638627,64,FLEN)
NAN_BOXED(4604432416473862819,64,FLEN)
NAN_BOXED(13827804453328638627,64,FLEN)
NAN_BOXED(4604432416473862819,64,FLEN)
NAN_BOXED(13827804453328638627,64,FLEN)
NAN_BOXED(4604432416473862819,64,FLEN)
NAN_BOXED(13827804453328638627,64,FLEN)
NAN_BOXED(4604432416473862819,64,FLEN)
NAN_BOXED(13827804453328638627,64,FLEN)
NAN_BOXED(4604463117276602442,64,FLEN)
NAN_BOXED(13827835154131378250,64,FLEN)
NAN_BOXED(4604463117276602442,64,FLEN)
NAN_BOXED(13827835154131378250,64,FLEN)
NAN_BOXED(4604463117276602442,64,FLEN)
NAN_BOXED(13827835154131378250,64,FLEN)
NAN_BOXED(4604463117276602442,64,FLEN)
NAN_BOXED(13827835154131378250,64,FLEN)
NAN_BOXED(4604463117276602442,64,FLEN)
NAN_BOXED(13827835154131378250,64,FLEN)
NAN_BOXED(4604560787716086104,64,FLEN)
NAN_BOXED(13827932824570861912,64,FLEN)
NAN_BOXED(4604560787716086104,64,FLEN)
NAN_BOXED(13827932824570861912,64,FLEN)
NAN_BOXED(4604560787716086104,64,FLEN)
NAN_BOXED(13827932824570861912,64,FLEN)
NAN_BOXED(4604560787716086104,64,FLEN)
NAN_BOXED(13827932824570861912,64,FLEN)
NAN_BOXED(4604560787716086104,64,FLEN)
NAN_BOXED(13827932824570861912,64,FLEN)
NAN_BOXED(4604574556710923904,64,FLEN)
NAN_BOXED(13827946593565699712,64,FLEN)
NAN_BOXED(4604574556710923904,64,FLEN)
NAN_BOXED(13827946593565699712,64,FLEN)
NAN_BOXED(4604574556710923904,64,FLEN)
NAN_BOXED(13827946593565699712,64,FLEN)
NAN_BOXED(4604574556710923904,64,FLEN)
NAN_BOXED(13827946593565699712,64,FLEN)
NAN_BOXED(4604574556710923904,64,FLEN)
NAN_BOXED(13827946593565699712,64,FLEN)
NAN_BOXED(4604643849177982588,64,FLEN)
NAN_BOXED(13828015886032758396,64,FLEN)
NAN_BOXED(4604643849177982588,64,FLEN)
NAN_BOXED(13828015886032758396,64,FLEN)
NAN_BOXED(4604643849177982588,64,FLEN)
NAN_BOXED(13828015886032758396,64,FLEN)
NAN_BOXED(4604643849177982588,64,FLEN)
NAN_BOXED(13828015886032758396,64,FLEN)
NAN_BOXED(4604643849177982588,64,FLEN)
NAN_BOXED(13828015886032758396,64,FLEN)
NAN_BOXED(4604660558442983263,64,FLEN)
NAN_BOXED(13828032595297759071,64,FLEN)
NAN_BOXED(4604660558442983263,64,FLEN)
NAN_BOXED(13828032595297759071,64,FLEN)
NAN_BOXED(4604660558442983263,64,FLEN)
NAN_BOXED(13828032595297759071,64,FLEN)
NAN_BOXED(4604660558442983263,64,FLEN)
NAN_BOXED(13828032595297759071,64,FLEN)
NAN_BOXED(4604660558442983263,64,FLEN)
NAN_BOXED(13828032595297759071,64,FLEN)
NAN_BOXED(4604708016474304397,64,FLEN)
NAN_BOXED(13828080053329080205,64,FLEN)
NAN_BOXED(4604708016474304397,64,FLEN)
NAN_BOXED(13828080053329080205,64,FLEN)
NAN_BOXED(4604708016474304397,64,FLEN)
NAN_BOXED(13828080053329080205,64,FLEN)
NAN_BOXED(4604708016474304397,64,FLEN)
NAN_BOXED(13828080053329080205,64,FLEN)
NAN_BOXED(4604708016474304397,64,FLEN)
NAN_BOXED(13828080053329080205,64,FLEN)
NAN_BOXED(4604832291576396287,64,FLEN)
NAN_BOXED(13828204328431172095,64,FLEN)
NAN_BOXED(4604832291576396287,64,FLEN)
NAN_BOXED(13828204328431172095,64,FLEN)
NAN_BOXED(4604832291576396287,64,FLEN)
NAN_BOXED(13828204328431172095,64,FLEN)
NAN_BOXED(4604832291576396287,64,FLEN)
NAN_BOXED(13828204328431172095,64,FLEN)
NAN_BOXED(4604832291576396287,64,FLEN)
NAN_BOXED(13828204328431172095,64,FLEN)
NAN_BOXED(4604836112655989192,64,FLEN)
NAN_BOXED(13828208149510765000,64,FLEN)
NAN_BOXED(4604836112655989192,64,FLEN)
NAN_BOXED(13828208149510765000,64,FLEN)
NAN_BOXED(4604836112655989192,64,FLEN)
NAN_BOXED(13828208149510765000,64,FLEN)
NAN_BOXED(4604836112655989192,64,FLEN)
NAN_BOXED(13828208149510765000,64,FLEN)
NAN_BOXED(4604836112655989192,64,FLEN)
NAN_BOXED(13828208149510765000,64,FLEN)
NAN_BOXED(4604868632233046915,64,FLEN)
NAN_BOXED(13828240669087822723,64,FLEN)
NAN_BOXED(4604868632233046915,64,FLEN)
NAN_BOXED(13828240669087822723,64,FLEN)
NAN_BOXED(4604868632233046915,64,FLEN)
NAN_BOXED(13828240669087822723,64,FLEN)
NAN_BOXED(4604868632233046915,64,FLEN)
NAN_BOXED(13828240669087822723,64,FLEN)
NAN_BOXED(4604868632233046915,64,FLEN)
NAN_BOXED(13828240669087822723,64,FLEN)
NAN_BOXED(4604924427984435548,64,FLEN)
NAN_BOXED(13828296464839211356,64,FLEN)
NAN_BOXED(4604924427984435548,64,FLEN)
NAN_BOXED(13828296464839211356,64,FLEN)
NAN_BOXED(4604924427984435548,64,FLEN)
NAN_BOXED(13828296464839211356,64,FLEN)
NAN_BOXED(4604924427984435548,64,FLEN)
NAN_BOXED(13828296464839211356,64,FLEN)
NAN_BOXED(4604924427984435548,64,FLEN)
NAN_BOXED(13828296464839211356,64,FLEN)
NAN_BOXED(4604993348526106343,64,FLEN)
NAN_BOXED(13828365385380882151,64,FLEN)
NAN_BOXED(4604993348526106343,64,FLEN)
NAN_BOXED(13828365385380882151,64,FLEN)
NAN_BOXED(4604993348526106343,64,FLEN)
NAN_BOXED(13828365385380882151,64,FLEN)
NAN_BOXED(4604993348526106343,64,FLEN)
NAN_BOXED(13828365385380882151,64,FLEN)
NAN_BOXED(4604993348526106343,64,FLEN)
NAN_BOXED(13828365385380882151,64,FLEN)
NAN_BOXED(4604995122332805565,64,FLEN)
NAN_BOXED(13828367159187581373,64,FLEN)
NAN_BOXED(4604995122332805565,64,FLEN)
NAN_BOXED(13828367159187581373,64,FLEN)
NAN_BOXED(4604995122332805565,64,FLEN)
NAN_BOXED(13828367159187581373,64,FLEN)
NAN_BOXED(4604995122332805565,64,FLEN)
NAN_BOXED(13828367159187581373,64,FLEN)
NAN_BOXED(4604995122332805565,64,FLEN)
NAN_BOXED(13828367159187581373,64,FLEN)
NAN_BOXED(4605019516369603222,64,FLEN)
NAN_BOXED(13828391553224379030,64,FLEN)
NAN_BOXED(4605019516369603222,64,FLEN)
NAN_BOXED(13828391553224379030,64,FLEN)
NAN_BOXED(4605019516369603222,64,FLEN)
NAN_BOXED(13828391553224379030,64,FLEN)
NAN_BOXED(4605019516369603222,64,FLEN)
NAN_BOXED(13828391553224379030,64,FLEN)
NAN_BOXED(4605019516369603222,64,FLEN)
NAN_BOXED(13828391553224379030,64,FLEN)
NAN_BOXED(4605033157585625067,64,FLEN)
NAN_BOXED(13828405194440400875,64,FLEN)
NAN_BOXED(4605033157585625067,64,FLEN)
NAN_BOXED(13828405194440400875,64,FLEN)
NAN_BOXED(4605033157585625067,64,FLEN)
NAN_BOXED(13828405194440400875,64,FLEN)
NAN_BOXED(4605033157585625067,64,FLEN)
NAN_BOXED(13828405194440400875,64,FLEN)
NAN_BOXED(4605033157585625067,64,FLEN)
NAN_BOXED(13828405194440400875,64,FLEN)
NAN_BOXED(4605154982431973310,64,FLEN)
NAN_BOXED(13828527019286749118,64,FLEN)
NAN_BOXED(4605154982431973310,64,FLEN)
NAN_BOXED(13828527019286749118,64,FLEN)
NAN_BOXED(4605154982431973310,64,FLEN)
NAN_BOXED(13828527019286749118,64,FLEN)
NAN_BOXED(4605154982431973310,64,FLEN)
NAN_BOXED(13828527019286749118,64,FLEN)
NAN_BOXED(4605154982431973310,64,FLEN)
NAN_BOXED(13828527019286749118,64,FLEN)
NAN_BOXED(4605193365551992078,64,FLEN)
NAN_BOXED(13828565402406767886,64,FLEN)
NAN_BOXED(4605193365551992078,64,FLEN)
NAN_BOXED(13828565402406767886,64,FLEN)
NAN_BOXED(4605193365551992078,64,FLEN)
NAN_BOXED(13828565402406767886,64,FLEN)
NAN_BOXED(4605193365551992078,64,FLEN)
NAN_BOXED(13828565402406767886,64,FLEN)
NAN_BOXED(4605193365551992078,64,FLEN)
NAN_BOXED(13828565402406767886,64,FLEN)
NAN_BOXED(4605310325544151102,64,FLEN)
NAN_BOXED(13828682362398926910,64,FLEN)
NAN_BOXED(4605310325544151102,64,FLEN)
NAN_BOXED(13828682362398926910,64,FLEN)
NAN_BOXED(4605310325544151102,64,FLEN)
NAN_BOXED(13828682362398926910,64,FLEN)
NAN_BOXED(4605310325544151102,64,FLEN)
NAN_BOXED(13828682362398926910,64,FLEN)
NAN_BOXED(4605310325544151102,64,FLEN)
NAN_BOXED(13828682362398926910,64,FLEN)
NAN_BOXED(4605315839123496554,64,FLEN)
NAN_BOXED(13828687875978272362,64,FLEN)
NAN_BOXED(4605315839123496554,64,FLEN)
NAN_BOXED(13828687875978272362,64,FLEN)
NAN_BOXED(4605315839123496554,64,FLEN)
NAN_BOXED(13828687875978272362,64,FLEN)
NAN_BOXED(4605315839123496554,64,FLEN)
NAN_BOXED(13828687875978272362,64,FLEN)
NAN_BOXED(4605315839123496554,64,FLEN)
NAN_BOXED(13828687875978272362,64,FLEN)
NAN_BOXED(4605337827274467906,64,FLEN)
NAN_BOXED(13828709864129243714,64,FLEN)
NAN_BOXED(4605337827274467906,64,FLEN)
NAN_BOXED(13828709864129243714,64,FLEN)
NAN_BOXED(4605337827274467906,64,FLEN)
NAN_BOXED(13828709864129243714,64,FLEN)
NAN_BOXED(4605337827274467906,64,FLEN)
NAN_BOXED(13828709864129243714,64,FLEN)
NAN_BOXED(4605337827274467906,64,FLEN)
NAN_BOXED(13828709864129243714,64,FLEN)
NAN_BOXED(4605345037738540080,64,FLEN)
NAN_BOXED(13828717074593315888,64,FLEN)
NAN_BOXED(4605345037738540080,64,FLEN)
NAN_BOXED(13828717074593315888,64,FLEN)
NAN_BOXED(4605345037738540080,64,FLEN)
NAN_BOXED(13828717074593315888,64,FLEN)
NAN_BOXED(4605345037738540080,64,FLEN)
NAN_BOXED(13828717074593315888,64,FLEN)
NAN_BOXED(4605345037738540080,64,FLEN)
NAN_BOXED(13828717074593315888,64,FLEN)
NAN_BOXED(4605348193605137085,64,FLEN)
NAN_BOXED(13828720230459912893,64,FLEN)
NAN_BOXED(4605348193605137085,64,FLEN)
NAN_BOXED(13828720230459912893,64,FLEN)
NAN_BOXED(4605348193605137085,64,FLEN)
NAN_BOXED(13828720230459912893,64,FLEN)
NAN_BOXED(4605348193605137085,64,FLEN)
NAN_BOXED(13828720230459912893,64,FLEN)
NAN_BOXED(4605348193605137085,64,FLEN)
NAN_BOXED(13828720230459912893,64,FLEN)
NAN_BOXED(4605386781472694177,64,FLEN)
NAN_BOXED(13828758818327469985,64,FLEN)
NAN_BOXED(4605386781472694177,64,FLEN)
NAN_BOXED(13828758818327469985,64,FLEN)
NAN_BOXED(4605386781472694177,64,FLEN)
NAN_BOXED(13828758818327469985,64,FLEN)
NAN_BOXED(4605386781472694177,64,FLEN)
NAN_BOXED(13828758818327469985,64,FLEN)
NAN_BOXED(4605386781472694177,64,FLEN)
NAN_BOXED(13828758818327469985,64,FLEN)
NAN_BOXED(4605461439435831547,64,FLEN)
NAN_BOXED(13828833476290607355,64,FLEN)
NAN_BOXED(4605461439435831547,64,FLEN)
NAN_BOXED(13828833476290607355,64,FLEN)
NAN_BOXED(4605461439435831547,64,FLEN)
NAN_BOXED(13828833476290607355,64,FLEN)
NAN_BOXED(4605461439435831547,64,FLEN)
NAN_BOXED(13828833476290607355,64,FLEN)
NAN_BOXED(4605461439435831547,64,FLEN)
NAN_BOXED(13828833476290607355,64,FLEN)
NAN_BOXED(4605476533366608205,64,FLEN)
NAN_BOXED(13828848570221384013,64,FLEN)
NAN_BOXED(4605476533366608205,64,FLEN)
NAN_BOXED(13828848570221384013,64,FLEN)
NAN_BOXED(4605476533366608205,64,FLEN)
NAN_BOXED(13828848570221384013,64,FLEN)
NAN_BOXED(4605476533366608205,64,FLEN)
NAN_BOXED(13828848570221384013,64,FLEN)
NAN_BOXED(4605476533366608205,64,FLEN)
NAN_BOXED(13828848570221384013,64,FLEN)
NAN_BOXED(4605489053684352448,64,FLEN)
NAN_BOXED(13828861090539128256,64,FLEN)
NAN_BOXED(4605489053684352448,64,FLEN)
NAN_BOXED(13828861090539128256,64,FLEN)
NAN_BOXED(4605489053684352448,64,FLEN)
NAN_BOXED(13828861090539128256,64,FLEN)
NAN_BOXED(4605489053684352448,64,FLEN)
NAN_BOXED(13828861090539128256,64,FLEN)
NAN_BOXED(4605489053684352448,64,FLEN)
NAN_BOXED(13828861090539128256,64,FLEN)
NAN_BOXED(4605706494215126908,64,FLEN)
NAN_BOXED(13829078531069902716,64,FLEN)
NAN_BOXED(4605706494215126908,64,FLEN)
NAN_BOXED(13829078531069902716,64,FLEN)
NAN_BOXED(4605706494215126908,64,FLEN)
NAN_BOXED(13829078531069902716,64,FLEN)
NAN_BOXED(4605706494215126908,64,FLEN)
NAN_BOXED(13829078531069902716,64,FLEN)
NAN_BOXED(4605706494215126908,64,FLEN)
NAN_BOXED(13829078531069902716,64,FLEN)
NAN_BOXED(4605762104425114668,64,FLEN)
NAN_BOXED(13829134141279890476,64,FLEN)
NAN_BOXED(4605762104425114668,64,FLEN)
NAN_BOXED(13829134141279890476,64,FLEN)
NAN_BOXED(4605762104425114668,64,FLEN)
NAN_BOXED(13829134141279890476,64,FLEN)
NAN_BOXED(4605762104425114668,64,FLEN)
NAN_BOXED(13829134141279890476,64,FLEN)
NAN_BOXED(4605762104425114668,64,FLEN)
NAN_BOXED(13829134141279890476,64,FLEN)
NAN_BOXED(4605818965070070716,64,FLEN)
NAN_BOXED(13829191001924846524,64,FLEN)
NAN_BOXED(4605818965070070716,64,FLEN)
NAN_BOXED(13829191001924846524,64,FLEN)
NAN_BOXED(4605818965070070716,64,FLEN)
NAN_BOXED(13829191001924846524,64,FLEN)
NAN_BOXED(4605818965070070716,64,FLEN)
NAN_BOXED(13829191001924846524,64,FLEN)
NAN_BOXED(4605818965070070716,64,FLEN)
NAN_BOXED(13829191001924846524,64,FLEN)
NAN_BOXED(4605819319989091685,64,FLEN)
NAN_BOXED(13829191356843867493,64,FLEN)
NAN_BOXED(4605819319989091685,64,FLEN)
NAN_BOXED(13829191356843867493,64,FLEN)
NAN_BOXED(4605819319989091685,64,FLEN)
NAN_BOXED(13829191356843867493,64,FLEN)
NAN_BOXED(4605819319989091685,64,FLEN)
NAN_BOXED(13829191356843867493,64,FLEN)
NAN_BOXED(4605819319989091685,64,FLEN)
NAN_BOXED(13829191356843867493,64,FLEN)
NAN_BOXED(4605841971997996208,64,FLEN)
NAN_BOXED(13829214008852772016,64,FLEN)
NAN_BOXED(4605841971997996208,64,FLEN)
NAN_BOXED(13829214008852772016,64,FLEN)
NAN_BOXED(4605841971997996208,64,FLEN)
NAN_BOXED(13829214008852772016,64,FLEN)
NAN_BOXED(4605841971997996208,64,FLEN)
NAN_BOXED(13829214008852772016,64,FLEN)
NAN_BOXED(4605841971997996208,64,FLEN)
NAN_BOXED(13829214008852772016,64,FLEN)
NAN_BOXED(4605864138727761487,64,FLEN)
NAN_BOXED(13829236175582537295,64,FLEN)
NAN_BOXED(4605864138727761487,64,FLEN)
NAN_BOXED(13829236175582537295,64,FLEN)
NAN_BOXED(4605864138727761487,64,FLEN)
NAN_BOXED(13829236175582537295,64,FLEN)
NAN_BOXED(4605864138727761487,64,FLEN)
NAN_BOXED(13829236175582537295,64,FLEN)
NAN_BOXED(4605864138727761487,64,FLEN)
NAN_BOXED(13829236175582537295,64,FLEN)
NAN_BOXED(4605864174748490741,64,FLEN)
NAN_BOXED(13829236211603266549,64,FLEN)
NAN_BOXED(4605864174748490741,64,FLEN)
NAN_BOXED(13829236211603266549,64,FLEN)
NAN_BOXED(4605864174748490741,64,FLEN)
NAN_BOXED(13829236211603266549,64,FLEN)
NAN_BOXED(4605864174748490741,64,FLEN)
NAN_BOXED(13829236211603266549,64,FLEN)
NAN_BOXED(4605864174748490741,64,FLEN)
NAN_BOXED(13829236211603266549,64,FLEN)
NAN_BOXED(4605898285026384527,64,FLEN)
NAN_BOXED(13829270321881160335,64,FLEN)
NAN_BOXED(4605898285026384527,64,FLEN)
NAN_BOXED(13829270321881160335,64,FLEN)
NAN_BOXED(4605898285026384527,64,FLEN)
NAN_BOXED(13829270321881160335,64,FLEN)
NAN_BOXED(4605898285026384527,64,FLEN)
NAN_BOXED(13829270321881160335,64,FLEN)
NAN_BOXED(4605898285026384527,64,FLEN)
NAN_BOXED(13829270321881160335,64,FLEN)
NAN_BOXED(4605900843200462039,64,FLEN)
NAN_BOXED(13829272880055237847,64,FLEN)
NAN_BOXED(4605900843200462039,64,FLEN)
NAN_BOXED(13829272880055237847,64,FLEN)
NAN_BOXED(4605900843200462039,64,FLEN)
NAN_BOXED(13829272880055237847,64,FLEN)
NAN_BOXED(4605900843200462039,64,FLEN)
NAN_BOXED(13829272880055237847,64,FLEN)
NAN_BOXED(4605900843200462039,64,FLEN)
NAN_BOXED(13829272880055237847,64,FLEN)
NAN_BOXED(4605980673283637078,64,FLEN)
NAN_BOXED(13829352710138412886,64,FLEN)
NAN_BOXED(4605980673283637078,64,FLEN)
NAN_BOXED(13829352710138412886,64,FLEN)
NAN_BOXED(4605980673283637078,64,FLEN)
NAN_BOXED(13829352710138412886,64,FLEN)
NAN_BOXED(4605980673283637078,64,FLEN)
NAN_BOXED(13829352710138412886,64,FLEN)
NAN_BOXED(4605980673283637078,64,FLEN)
NAN_BOXED(13829352710138412886,64,FLEN)
NAN_BOXED(4606035614868656191,64,FLEN)
NAN_BOXED(13829407651723431999,64,FLEN)
NAN_BOXED(4606035614868656191,64,FLEN)
NAN_BOXED(13829407651723431999,64,FLEN)
NAN_BOXED(4606035614868656191,64,FLEN)
NAN_BOXED(13829407651723431999,64,FLEN)
NAN_BOXED(4606035614868656191,64,FLEN)
NAN_BOXED(13829407651723431999,64,FLEN)
NAN_BOXED(4606035614868656191,64,FLEN)
NAN_BOXED(13829407651723431999,64,FLEN)
NAN_BOXED(4606037521584523030,64,FLEN)
NAN_BOXED(13829409558439298838,64,FLEN)
NAN_BOXED(4606037521584523030,64,FLEN)
NAN_BOXED(13829409558439298838,64,FLEN)
NAN_BOXED(4606037521584523030,64,FLEN)
NAN_BOXED(13829409558439298838,64,FLEN)
NAN_BOXED(4606037521584523030,64,FLEN)
NAN_BOXED(13829409558439298838,64,FLEN)
NAN_BOXED(4606037521584523030,64,FLEN)
NAN_BOXED(13829409558439298838,64,FLEN)
NAN_BOXED(4606062609628610359,64,FLEN)
NAN_BOXED(13829434646483386167,64,FLEN)
NAN_BOXED(4606062609628610359,64,FLEN)
NAN_BOXED(13829434646483386167,64,FLEN)
NAN_BOXED(4606062609628610359,64,FLEN)
NAN_BOXED(13829434646483386167,64,FLEN)
NAN_BOXED(4606062609628610359,64,FLEN)
NAN_BOXED(13829434646483386167,64,FLEN)
NAN_BOXED(4606062609628610359,64,FLEN)
NAN_BOXED(13829434646483386167,64,FLEN)
NAN_BOXED(4606066470367347654,64,FLEN)
NAN_BOXED(13829438507222123462,64,FLEN)
NAN_BOXED(4606066470367347654,64,FLEN)
NAN_BOXED(13829438507222123462,64,FLEN)
NAN_BOXED(4606066470367347654,64,FLEN)
NAN_BOXED(13829438507222123462,64,FLEN)
NAN_BOXED(4606066470367347654,64,FLEN)
NAN_BOXED(13829438507222123462,64,FLEN)
NAN_BOXED(4606066470367347654,64,FLEN)
NAN_BOXED(13829438507222123462,64,FLEN)
NAN_BOXED(4606111370155588481,64,FLEN)
NAN_BOXED(13829483407010364289,64,FLEN)
NAN_BOXED(4606111370155588481,64,FLEN)
NAN_BOXED(13829483407010364289,64,FLEN)
NAN_BOXED(4606111370155588481,64,FLEN)
NAN_BOXED(13829483407010364289,64,FLEN)
NAN_BOXED(4606111370155588481,64,FLEN)
NAN_BOXED(13829483407010364289,64,FLEN)
NAN_BOXED(4606111370155588481,64,FLEN)
NAN_BOXED(13829483407010364289,64,FLEN)
NAN_BOXED(4606127366881525032,64,FLEN)
NAN_BOXED(13829499403736300840,64,FLEN)
NAN_BOXED(4606127366881525032,64,FLEN)
NAN_BOXED(13829499403736300840,64,FLEN)
NAN_BOXED(4606127366881525032,64,FLEN)
NAN_BOXED(13829499403736300840,64,FLEN)
NAN_BOXED(4606127366881525032,64,FLEN)
NAN_BOXED(13829499403736300840,64,FLEN)
NAN_BOXED(4606127366881525032,64,FLEN)
NAN_BOXED(13829499403736300840,64,FLEN)
NAN_BOXED(4606170090345848206,64,FLEN)
NAN_BOXED(13829542127200624014,64,FLEN)
NAN_BOXED(4606170090345848206,64,FLEN)
NAN_BOXED(13829542127200624014,64,FLEN)
NAN_BOXED(4606170090345848206,64,FLEN)
NAN_BOXED(13829542127200624014,64,FLEN)
NAN_BOXED(4606170090345848206,64,FLEN)
NAN_BOXED(13829542127200624014,64,FLEN)
NAN_BOXED(4606170090345848206,64,FLEN)
NAN_BOXED(13829542127200624014,64,FLEN)
NAN_BOXED(4606200113051423113,64,FLEN)
NAN_BOXED(13829572149906198921,64,FLEN)
NAN_BOXED(4606200113051423113,64,FLEN)
NAN_BOXED(13829572149906198921,64,FLEN)
NAN_BOXED(4606200113051423113,64,FLEN)
NAN_BOXED(13829572149906198921,64,FLEN)
NAN_BOXED(4606200113051423113,64,FLEN)
NAN_BOXED(13829572149906198921,64,FLEN)
NAN_BOXED(4606200113051423113,64,FLEN)
NAN_BOXED(13829572149906198921,64,FLEN)
NAN_BOXED(4606268186099714339,64,FLEN)
NAN_BOXED(13829640222954490147,64,FLEN)
NAN_BOXED(4606268186099714339,64,FLEN)
NAN_BOXED(13829640222954490147,64,FLEN)
NAN_BOXED(4606268186099714339,64,FLEN)
NAN_BOXED(13829640222954490147,64,FLEN)
NAN_BOXED(4606268186099714339,64,FLEN)
NAN_BOXED(13829640222954490147,64,FLEN)
NAN_BOXED(4606268186099714339,64,FLEN)
NAN_BOXED(13829640222954490147,64,FLEN)
NAN_BOXED(4606273401071592612,64,FLEN)
NAN_BOXED(13829645437926368420,64,FLEN)
NAN_BOXED(4606273401071592612,64,FLEN)
NAN_BOXED(13829645437926368420,64,FLEN)
NAN_BOXED(4606273401071592612,64,FLEN)
NAN_BOXED(13829645437926368420,64,FLEN)
NAN_BOXED(4606273401071592612,64,FLEN)
NAN_BOXED(13829645437926368420,64,FLEN)
NAN_BOXED(4606273401071592612,64,FLEN)
NAN_BOXED(13829645437926368420,64,FLEN)
NAN_BOXED(4606280071372143329,64,FLEN)
NAN_BOXED(13829652108226919137,64,FLEN)
NAN_BOXED(4606280071372143329,64,FLEN)
NAN_BOXED(13829652108226919137,64,FLEN)
NAN_BOXED(4606280071372143329,64,FLEN)
NAN_BOXED(13829652108226919137,64,FLEN)
NAN_BOXED(4606280071372143329,64,FLEN)
NAN_BOXED(13829652108226919137,64,FLEN)
NAN_BOXED(4606280071372143329,64,FLEN)
NAN_BOXED(13829652108226919137,64,FLEN)
NAN_BOXED(4606301655749425171,64,FLEN)
NAN_BOXED(13829673692604200979,64,FLEN)
NAN_BOXED(4606301655749425171,64,FLEN)
NAN_BOXED(13829673692604200979,64,FLEN)
NAN_BOXED(4606301655749425171,64,FLEN)
NAN_BOXED(13829673692604200979,64,FLEN)
NAN_BOXED(4606301655749425171,64,FLEN)
NAN_BOXED(13829673692604200979,64,FLEN)
NAN_BOXED(4606301655749425171,64,FLEN)
NAN_BOXED(13829673692604200979,64,FLEN)
NAN_BOXED(4606340459867211376,64,FLEN)
NAN_BOXED(13829712496721987184,64,FLEN)
NAN_BOXED(4606340459867211376,64,FLEN)
NAN_BOXED(13829712496721987184,64,FLEN)
NAN_BOXED(4606340459867211376,64,FLEN)
NAN_BOXED(13829712496721987184,64,FLEN)
NAN_BOXED(4606340459867211376,64,FLEN)
NAN_BOXED(13829712496721987184,64,FLEN)
NAN_BOXED(4606340459867211376,64,FLEN)
NAN_BOXED(13829712496721987184,64,FLEN)
NAN_BOXED(4606457827283103982,64,FLEN)
NAN_BOXED(13829829864137879790,64,FLEN)
NAN_BOXED(4606457827283103982,64,FLEN)
NAN_BOXED(13829829864137879790,64,FLEN)
NAN_BOXED(4606457827283103982,64,FLEN)
NAN_BOXED(13829829864137879790,64,FLEN)
NAN_BOXED(4606457827283103982,64,FLEN)
NAN_BOXED(13829829864137879790,64,FLEN)
NAN_BOXED(4606457827283103982,64,FLEN)
NAN_BOXED(13829829864137879790,64,FLEN)
NAN_BOXED(4606522991390019502,64,FLEN)
NAN_BOXED(13829895028244795310,64,FLEN)
NAN_BOXED(4606522991390019502,64,FLEN)
NAN_BOXED(13829895028244795310,64,FLEN)
NAN_BOXED(4606522991390019502,64,FLEN)
NAN_BOXED(13829895028244795310,64,FLEN)
NAN_BOXED(4606522991390019502,64,FLEN)
NAN_BOXED(13829895028244795310,64,FLEN)
NAN_BOXED(4606522991390019502,64,FLEN)
NAN_BOXED(13829895028244795310,64,FLEN)
NAN_BOXED(4606548947287389565,64,FLEN)
NAN_BOXED(13829920984142165373,64,FLEN)
NAN_BOXED(4606548947287389565,64,FLEN)
NAN_BOXED(13829920984142165373,64,FLEN)
NAN_BOXED(4606548947287389565,64,FLEN)
NAN_BOXED(13829920984142165373,64,FLEN)
NAN_BOXED(4606548947287389565,64,FLEN)
NAN_BOXED(13829920984142165373,64,FLEN)
NAN_BOXED(4606548947287389565,64,FLEN)
NAN_BOXED(13829920984142165373,64,FLEN)
NAN_BOXED(4606584708884388609,64,FLEN)
NAN_BOXED(13829956745739164417,64,FLEN)
NAN_BOXED(4606584708884388609,64,FLEN)
NAN_BOXED(13829956745739164417,64,FLEN)
NAN_BOXED(4606584708884388609,64,FLEN)
NAN_BOXED(13829956745739164417,64,FLEN)
NAN_BOXED(4606584708884388609,64,FLEN)
NAN_BOXED(13829956745739164417,64,FLEN)
NAN_BOXED(4606584708884388609,64,FLEN)
NAN_BOXED(13829956745739164417,64,FLEN)
NAN_BOXED(4606589432743909189,64,FLEN)
NAN_BOXED(13829961469598684997,64,FLEN)
NAN_BOXED(4606589432743909189,64,FLEN)
NAN_BOXED(13829961469598684997,64,FLEN)
NAN_BOXED(4606589432743909189,64,FLEN)
NAN_BOXED(13829961469598684997,64,FLEN)
NAN_BOXED(4606589432743909189,64,FLEN)
NAN_BOXED(13829961469598684997,64,FLEN)
NAN_BOXED(4606589432743909189,64,FLEN)
NAN_BOXED(13829961469598684997,64,FLEN)
NAN_BOXED(4606591358789395792,64,FLEN)
NAN_BOXED(13829963395644171600,64,FLEN)
NAN_BOXED(4606591358789395792,64,FLEN)
NAN_BOXED(13829963395644171600,64,FLEN)
NAN_BOXED(4606591358789395792,64,FLEN)
NAN_BOXED(13829963395644171600,64,FLEN)
NAN_BOXED(4606591358789395792,64,FLEN)
NAN_BOXED(13829963395644171600,64,FLEN)
NAN_BOXED(4606591358789395792,64,FLEN)
NAN_BOXED(13829963395644171600,64,FLEN)
NAN_BOXED(4606607237529881266,64,FLEN)
NAN_BOXED(13829979274384657074,64,FLEN)
NAN_BOXED(4606607237529881266,64,FLEN)
NAN_BOXED(13829979274384657074,64,FLEN)
NAN_BOXED(4606607237529881266,64,FLEN)
NAN_BOXED(13829979274384657074,64,FLEN)
NAN_BOXED(4606607237529881266,64,FLEN)
NAN_BOXED(13829979274384657074,64,FLEN)
NAN_BOXED(4606607237529881266,64,FLEN)
NAN_BOXED(13829979274384657074,64,FLEN)
NAN_BOXED(4606621641753511428,64,FLEN)
NAN_BOXED(13829993678608287236,64,FLEN)
NAN_BOXED(4606621641753511428,64,FLEN)
NAN_BOXED(13829993678608287236,64,FLEN)
NAN_BOXED(4606621641753511428,64,FLEN)
NAN_BOXED(13829993678608287236,64,FLEN)
NAN_BOXED(4606621641753511428,64,FLEN)
NAN_BOXED(13829993678608287236,64,FLEN)
NAN_BOXED(4606621641753511428,64,FLEN)
NAN_BOXED(13829993678608287236,64,FLEN)
NAN_BOXED(4606659542382046358,64,FLEN)
NAN_BOXED(13830031579236822166,64,FLEN)
NAN_BOXED(4606659542382046358,64,FLEN)
NAN_BOXED(13830031579236822166,64,FLEN)
NAN_BOXED(4606659542382046358,64,FLEN)
NAN_BOXED(13830031579236822166,64,FLEN)
NAN_BOXED(4606659542382046358,64,FLEN)
NAN_BOXED(13830031579236822166,64,FLEN)
NAN_BOXED(4606659542382046358,64,FLEN)
NAN_BOXED(13830031579236822166,64,FLEN)
NAN_BOXED(4606747764129577771,64,FLEN)
NAN_BOXED(13830119800984353579,64,FLEN)
NAN_BOXED(4606747764129577771,64,FLEN)
NAN_BOXED(13830119800984353579,64,FLEN)
NAN_BOXED(4606747764129577771,64,FLEN)
NAN_BOXED(13830119800984353579,64,FLEN)
NAN_BOXED(4606747764129577771,64,FLEN)
NAN_BOXED(13830119800984353579,64,FLEN)
NAN_BOXED(4606747764129577771,64,FLEN)
NAN_BOXED(13830119800984353579,64,FLEN)
NAN_BOXED(4606765784701492397,64,FLEN)
NAN_BOXED(13830137821556268205,64,FLEN)
NAN_BOXED(4606765784701492397,64,FLEN)
NAN_BOXED(13830137821556268205,64,FLEN)
NAN_BOXED(4606765784701492397,64,FLEN)
NAN_BOXED(13830137821556268205,64,FLEN)
NAN_BOXED(4606765784701492397,64,FLEN)
NAN_BOXED(13830137821556268205,64,FLEN)
NAN_BOXED(4606765784701492397,64,FLEN)
NAN_BOXED(13830137821556268205,64,FLEN)
NAN_BOXED(4606770821377203689,64,FLEN)
NAN_BOXED(13830142858231979497,64,FLEN)
NAN_BOXED(4606770821377203689,64,FLEN)
NAN_BOXED(13830142858231979497,64,FLEN)
NAN_BOXED(4606770821377203689,64,FLEN)
NAN_BOXED(13830142858231979497,64,FLEN)
NAN_BOXED(4606770821377203689,64,FLEN)
NAN_BOXED(13830142858231979497,64,FLEN)
NAN_BOXED(4606770821377203689,64,FLEN)
NAN_BOXED(13830142858231979497,64,FLEN)
NAN_BOXED(4606774986537649361,64,FLEN)
NAN_BOXED(13830147023392425169,64,FLEN)
NAN_BOXED(4606774986537649361,64,FLEN)
NAN_BOXED(13830147023392425169,64,FLEN)
NAN_BOXED(4606774986537649361,64,FLEN)
NAN_BOXED(13830147023392425169,64,FLEN)
NAN_BOXED(4606774986537649361,64,FLEN)
NAN_BOXED(13830147023392425169,64,FLEN)
NAN_BOXED(4606774986537649361,64,FLEN)
NAN_BOXED(13830147023392425169,64,FLEN)
NAN_BOXED(4606780329269947677,64,FLEN)
NAN_BOXED(13830152366124723485,64,FLEN)
NAN_BOXED(4606780329269947677,64,FLEN)
NAN_BOXED(13830152366124723485,64,FLEN)
NAN_BOXED(4606780329269947677,64,FLEN)
NAN_BOXED(13830152366124723485,64,FLEN)
NAN_BOXED(4606780329269947677,64,FLEN)
NAN_BOXED(13830152366124723485,64,FLEN)
NAN_BOXED(4606780329269947677,64,FLEN)
NAN_BOXED(13830152366124723485,64,FLEN)
NAN_BOXED(4606854628465964727,64,FLEN)
NAN_BOXED(13830226665320740535,64,FLEN)
NAN_BOXED(4606854628465964727,64,FLEN)
NAN_BOXED(13830226665320740535,64,FLEN)
NAN_BOXED(4606854628465964727,64,FLEN)
NAN_BOXED(13830226665320740535,64,FLEN)
NAN_BOXED(4606854628465964727,64,FLEN)
NAN_BOXED(13830226665320740535,64,FLEN)
NAN_BOXED(4606854628465964727,64,FLEN)
NAN_BOXED(13830226665320740535,64,FLEN)
NAN_BOXED(4606858755602325023,64,FLEN)
NAN_BOXED(13830230792457100831,64,FLEN)
NAN_BOXED(4606858755602325023,64,FLEN)
NAN_BOXED(13830230792457100831,64,FLEN)
NAN_BOXED(4606858755602325023,64,FLEN)
NAN_BOXED(13830230792457100831,64,FLEN)
NAN_BOXED(4606858755602325023,64,FLEN)
NAN_BOXED(13830230792457100831,64,FLEN)
NAN_BOXED(4606858755602325023,64,FLEN)
NAN_BOXED(13830230792457100831,64,FLEN)
NAN_BOXED(4606862949098080832,64,FLEN)
NAN_BOXED(13830234985952856640,64,FLEN)
NAN_BOXED(4606862949098080832,64,FLEN)
NAN_BOXED(13830234985952856640,64,FLEN)
NAN_BOXED(4606862949098080832,64,FLEN)
NAN_BOXED(13830234985952856640,64,FLEN)
NAN_BOXED(4606862949098080832,64,FLEN)
NAN_BOXED(13830234985952856640,64,FLEN)
NAN_BOXED(4606862949098080832,64,FLEN)
NAN_BOXED(13830234985952856640,64,FLEN)
NAN_BOXED(4606889995911517998,64,FLEN)
NAN_BOXED(13830262032766293806,64,FLEN)
NAN_BOXED(4606889995911517998,64,FLEN)
NAN_BOXED(13830262032766293806,64,FLEN)
NAN_BOXED(4606889995911517998,64,FLEN)
NAN_BOXED(13830262032766293806,64,FLEN)
NAN_BOXED(4606889995911517998,64,FLEN)
NAN_BOXED(13830262032766293806,64,FLEN)
NAN_BOXED(4606889995911517998,64,FLEN)
NAN_BOXED(13830262032766293806,64,FLEN)
NAN_BOXED(4606905890163239481,64,FLEN)
NAN_BOXED(13830277927018015289,64,FLEN)
NAN_BOXED(4606905890163239481,64,FLEN)
NAN_BOXED(13830277927018015289,64,FLEN)
NAN_BOXED(4606905890163239481,64,FLEN)
NAN_BOXED(13830277927018015289,64,FLEN)
NAN_BOXED(4606905890163239481,64,FLEN)
NAN_BOXED(13830277927018015289,64,FLEN)
NAN_BOXED(4606905890163239481,64,FLEN)
NAN_BOXED(13830277927018015289,64,FLEN)
NAN_BOXED(4606917809734042532,64,FLEN)
NAN_BOXED(13830289846588818340,64,FLEN)
NAN_BOXED(4606917809734042532,64,FLEN)
NAN_BOXED(13830289846588818340,64,FLEN)
NAN_BOXED(4606917809734042532,64,FLEN)
NAN_BOXED(13830289846588818340,64,FLEN)
NAN_BOXED(4606917809734042532,64,FLEN)
NAN_BOXED(13830289846588818340,64,FLEN)
NAN_BOXED(4606917809734042532,64,FLEN)
NAN_BOXED(13830289846588818340,64,FLEN)
NAN_BOXED(4606960391208358711,64,FLEN)
NAN_BOXED(13830332428063134519,64,FLEN)
NAN_BOXED(4606960391208358711,64,FLEN)
NAN_BOXED(13830332428063134519,64,FLEN)
NAN_BOXED(4606960391208358711,64,FLEN)
NAN_BOXED(13830332428063134519,64,FLEN)
NAN_BOXED(4606960391208358711,64,FLEN)
NAN_BOXED(13830332428063134519,64,FLEN)
NAN_BOXED(4606960391208358711,64,FLEN)
NAN_BOXED(13830332428063134519,64,FLEN)
NAN_BOXED(4606977211601433588,64,FLEN)
NAN_BOXED(13830349248456209396,64,FLEN)
NAN_BOXED(4606977211601433588,64,FLEN)
NAN_BOXED(13830349248456209396,64,FLEN)
NAN_BOXED(4606977211601433588,64,FLEN)
NAN_BOXED(13830349248456209396,64,FLEN)
NAN_BOXED(4606977211601433588,64,FLEN)
NAN_BOXED(13830349248456209396,64,FLEN)
NAN_BOXED(4606977211601433588,64,FLEN)
NAN_BOXED(13830349248456209396,64,FLEN)
NAN_BOXED(4606997324272287587,64,FLEN)
NAN_BOXED(13830369361127063395,64,FLEN)
NAN_BOXED(4606997324272287587,64,FLEN)
NAN_BOXED(13830369361127063395,64,FLEN)
NAN_BOXED(4606997324272287587,64,FLEN)
NAN_BOXED(13830369361127063395,64,FLEN)
NAN_BOXED(4606997324272287587,64,FLEN)
NAN_BOXED(13830369361127063395,64,FLEN)
NAN_BOXED(4606997324272287587,64,FLEN)
NAN_BOXED(13830369361127063395,64,FLEN)
NAN_BOXED(4607015116130791408,64,FLEN)
NAN_BOXED(13830387152985567216,64,FLEN)
NAN_BOXED(4607015116130791408,64,FLEN)
NAN_BOXED(13830387152985567216,64,FLEN)
NAN_BOXED(4607015116130791408,64,FLEN)
NAN_BOXED(13830387152985567216,64,FLEN)
NAN_BOXED(4607015116130791408,64,FLEN)
NAN_BOXED(13830387152985567216,64,FLEN)
NAN_BOXED(4607015116130791408,64,FLEN)
NAN_BOXED(13830387152985567216,64,FLEN)
NAN_BOXED(4607044742498673473,64,FLEN)
NAN_BOXED(13830416779353449281,64,FLEN)
NAN_BOXED(4607044742498673473,64,FLEN)
NAN_BOXED(13830416779353449281,64,FLEN)
NAN_BOXED(4607044742498673473,64,FLEN)
NAN_BOXED(13830416779353449281,64,FLEN)
NAN_BOXED(4607044742498673473,64,FLEN)
NAN_BOXED(13830416779353449281,64,FLEN)
NAN_BOXED(4607044742498673473,64,FLEN)
NAN_BOXED(13830416779353449281,64,FLEN)
NAN_BOXED(4607092668893089201,64,FLEN)
NAN_BOXED(13830464705747865009,64,FLEN)
NAN_BOXED(4607092668893089201,64,FLEN)
NAN_BOXED(13830464705747865009,64,FLEN)
NAN_BOXED(4607092668893089201,64,FLEN)
NAN_BOXED(13830464705747865009,64,FLEN)
NAN_BOXED(4607092668893089201,64,FLEN)
NAN_BOXED(13830464705747865009,64,FLEN)
NAN_BOXED(4607092668893089201,64,FLEN)
NAN_BOXED(13830464705747865009,64,FLEN)
NAN_BOXED(4607102281009215576,64,FLEN)
NAN_BOXED(13830474317863991384,64,FLEN)
NAN_BOXED(4607102281009215576,64,FLEN)
NAN_BOXED(13830474317863991384,64,FLEN)
NAN_BOXED(4607102281009215576,64,FLEN)
NAN_BOXED(13830474317863991384,64,FLEN)
NAN_BOXED(4607102281009215576,64,FLEN)
NAN_BOXED(13830474317863991384,64,FLEN)
NAN_BOXED(4607102281009215576,64,FLEN)
NAN_BOXED(13830474317863991384,64,FLEN)
NAN_BOXED(4607111703230648789,64,FLEN)
NAN_BOXED(13830483740085424597,64,FLEN)
NAN_BOXED(4607111703230648789,64,FLEN)
NAN_BOXED(13830483740085424597,64,FLEN)
NAN_BOXED(4607111703230648789,64,FLEN)
NAN_BOXED(13830483740085424597,64,FLEN)
NAN_BOXED(4607111703230648789,64,FLEN)
NAN_BOXED(13830483740085424597,64,FLEN)
NAN_BOXED(4607111703230648789,64,FLEN)
NAN_BOXED(13830483740085424597,64,FLEN)
NAN_BOXED(4607112372969014310,64,FLEN)
NAN_BOXED(13830484409823790118,64,FLEN)
NAN_BOXED(4607112372969014310,64,FLEN)
NAN_BOXED(13830484409823790118,64,FLEN)
NAN_BOXED(4607112372969014310,64,FLEN)
NAN_BOXED(13830484409823790118,64,FLEN)
NAN_BOXED(4607112372969014310,64,FLEN)
NAN_BOXED(13830484409823790118,64,FLEN)
NAN_BOXED(4607112372969014310,64,FLEN)
NAN_BOXED(13830484409823790118,64,FLEN)
NAN_BOXED(4607117705971217121,64,FLEN)
NAN_BOXED(13830489742825992929,64,FLEN)
NAN_BOXED(4607117705971217121,64,FLEN)
NAN_BOXED(13830489742825992929,64,FLEN)
NAN_BOXED(4607117705971217121,64,FLEN)
NAN_BOXED(13830489742825992929,64,FLEN)
NAN_BOXED(4607117705971217121,64,FLEN)
NAN_BOXED(13830489742825992929,64,FLEN)
NAN_BOXED(4607117705971217121,64,FLEN)
NAN_BOXED(13830489742825992929,64,FLEN)
NAN_BOXED(4607168689830045498,64,FLEN)
NAN_BOXED(13830540726684821306,64,FLEN)
NAN_BOXED(4607168689830045498,64,FLEN)
NAN_BOXED(13830540726684821306,64,FLEN)
NAN_BOXED(4607168689830045498,64,FLEN)
NAN_BOXED(13830540726684821306,64,FLEN)
NAN_BOXED(4607168689830045498,64,FLEN)
NAN_BOXED(13830540726684821306,64,FLEN)
NAN_BOXED(4607168689830045498,64,FLEN)
NAN_BOXED(13830540726684821306,64,FLEN)
NAN_BOXED(4607172125198740186,64,FLEN)
NAN_BOXED(13830544162053515994,64,FLEN)
NAN_BOXED(4607172125198740186,64,FLEN)
NAN_BOXED(13830544162053515994,64,FLEN)
NAN_BOXED(4607172125198740186,64,FLEN)
NAN_BOXED(13830544162053515994,64,FLEN)
NAN_BOXED(4607172125198740186,64,FLEN)
NAN_BOXED(13830544162053515994,64,FLEN)
NAN_BOXED(4607172125198740186,64,FLEN)
NAN_BOXED(13830544162053515994,64,FLEN)
NAN_BOXED(4607180250798455306,64,FLEN)
NAN_BOXED(13830552287653231114,64,FLEN)
NAN_BOXED(4607180250798455306,64,FLEN)
NAN_BOXED(13830552287653231114,64,FLEN)
NAN_BOXED(4607180250798455306,64,FLEN)
NAN_BOXED(13830552287653231114,64,FLEN)
NAN_BOXED(4607180250798455306,64,FLEN)
NAN_BOXED(13830552287653231114,64,FLEN)
NAN_BOXED(4607180250798455306,64,FLEN)
NAN_BOXED(13830552287653231114,64,FLEN)
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(13794147294347007232,64,FLEN)
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(13794147294347007232,64,FLEN)
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(13794147294347007232,64,FLEN)
NAN_BOXED(4570775257492231424,64,FLEN)
NAN_BOXED(13794147294347007232,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_12:
    .fill 132*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
