
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:04:18 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fadd.d_b10 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fadd.d_b10)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==f24, rs2==f24, rd==f24,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x003 and fm2 == 0x87eac54632b72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f24; op2:f24; dest:f24; op1val:0x7f4bab861e3ffdaf; op2val:0x7f4bab861e3ffdaf; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f24, f24, f24, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs2 == rd != rs1, rs1==f5, rs2==f27, rd==f27,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x006 and fm2 == 0xe9e57697bf64f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f5; op2:f27; dest:f27; op1val:0x7f4bab861e3ffdaf; op2val:0x6e9e57697bf64f; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f27, f5, f27, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==f14, rs2==f14, rd==f8,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x00a and fm2 == 0x322f6a1ed79f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f14; op2:f14; dest:f8; op1val:0x7f4bab861e3ffdaf; op2val:0x7f4bab861e3ffdaf; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f8, f14, f14, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f23, rs2==f30, rd==f25,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x00d and fm2 == 0x7ebb44a68d86e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f23; op2:f30; dest:f25; op1val:0x7f4bab861e3ffdaf; op2val:0xd7ebb44a68d86e; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f25, f23, f30, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2, rs1==f10, rs2==f29, rd==f10,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x010 and fm2 == 0xde6a15d030e89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f10; op2:f29; dest:f10; op1val:0x7f4bab861e3ffdaf; op2val:0x10de6a15d030e89; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f10, f10, f29, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f17, rs2==f4, rd==f14,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x014 and fm2 == 0x2b024da21e916 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f17; op2:f4; dest:f14; op1val:0x7f4bab861e3ffdaf; op2val:0x142b024da21e916; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f14, f17, f4, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f20, rs2==f16, rd==f1,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x017 and fm2 == 0x75c2e10aa635b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f20; op2:f16; dest:f1; op1val:0x7f4bab861e3ffdaf; op2val:0x1775c2e10aa635b; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f1, f20, f16, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f30, rs2==f11, rd==f3,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x01a and fm2 == 0xd333994d4fc32 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f11; dest:f3; op1val:0x7f4bab861e3ffdaf; op2val:0x1ad333994d4fc32; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f3, f30, f11, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f11, rs2==f31, rd==f2,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x01e and fm2 == 0x24003fd051d9f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f11; op2:f31; dest:f2; op1val:0x7f4bab861e3ffdaf; op2val:0x1e24003fd051d9f; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f2, f11, f31, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f18, rs2==f7, rd==f6,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x021 and fm2 == 0x6d004fc466507 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f18; op2:f7; dest:f6; op1val:0x7f4bab861e3ffdaf; op2val:0x216d004fc466507; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f6, f18, f7, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f13, rs2==f15, rd==f19,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x024 and fm2 == 0xc84063b57fe49 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f13; op2:f15; dest:f19; op1val:0x7f4bab861e3ffdaf; op2val:0x24c84063b57fe49; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f19, f13, f15, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f16, rs2==f10, rd==f29,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x028 and fm2 == 0x1d283e516feed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f16; op2:f10; dest:f29; op1val:0x7f4bab861e3ffdaf; op2val:0x281d283e516feed; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f29, f16, f10, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f28, rs2==f2, rd==f13,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x02b and fm2 == 0x64724de5cbea9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f28; op2:f2; dest:f13; op1val:0x7f4bab861e3ffdaf; op2val:0x2b64724de5cbea9; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f13, f28, f2, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f12, rs2==f8, rd==f21,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x02e and fm2 == 0xbd8ee15f3ee53 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f12; op2:f8; dest:f21; op1val:0x7f4bab861e3ffdaf; op2val:0x2ebd8ee15f3ee53; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f21, f12, f8, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f6, rs2==f23, rd==f26,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x032 and fm2 == 0x16794cdb874f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f6; op2:f23; dest:f26; op1val:0x7f4bab861e3ffdaf; op2val:0x3216794cdb874f4; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f26, f6, f23, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f2, rs2==f3, rd==f16,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x035 and fm2 == 0x5c17a01269231 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f2; op2:f3; dest:f16; op1val:0x7f4bab861e3ffdaf; op2val:0x355c17a01269231; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f16, f2, f3, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f1, rs2==f0, rd==f7,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x038 and fm2 == 0xb31d8817036bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f1; op2:f0; dest:f7; op1val:0x7f4bab861e3ffdaf; op2val:0x38b31d8817036bd; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f7, f1, f0, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f26, rs2==f28, rd==f5,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x03c and fm2 == 0x0ff2750e62236 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f26; op2:f28; dest:f5; op1val:0x7f4bab861e3ffdaf; op2val:0x3c0ff2750e62236; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f5, f26, f28, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f8, rs2==f21, rd==f9,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x03f and fm2 == 0x53ef1251faac4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f8; op2:f21; dest:f9; op1val:0x7f4bab861e3ffdaf; op2val:0x3f53ef1251faac4; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f9, f8, f21, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f15, rs2==f17, rd==f4,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x042 and fm2 == 0xa8ead6e679575 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f15; op2:f17; dest:f4; op1val:0x7f4bab861e3ffdaf; op2val:0x42a8ead6e679575; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f4, f15, f17, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f19, rs2==f26, rd==f11,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x046 and fm2 == 0x0992c6500bd69 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f19; op2:f26; dest:f11; op1val:0x7f4bab861e3ffdaf; op2val:0x460992c6500bd69; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f11, f19, f26, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f22, rs2==f19, rd==f0,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x049 and fm2 == 0x4bf777e40ecc3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f22; op2:f19; dest:f0; op1val:0x7f4bab861e3ffdaf; op2val:0x494bf777e40ecc3; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f0, f22, f19, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f29, rs2==f12, rd==f23,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x04c and fm2 == 0x9ef555dd127f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f29; op2:f12; dest:f23; op1val:0x7f4bab861e3ffdaf; op2val:0x4c9ef555dd127f4; 
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f23, f29, f12, dyn, 0, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f4, rs2==f25, rd==f31,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x050 and fm2 == 0x035955aa2b8f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f4; op2:f25; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x50035955aa2b8f8; 
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f4, f25, dyn, 0, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f27, rs2==f22, rd==f18,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x053 and fm2 == 0x442fab14b6736 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f27; op2:f22; dest:f18; op1val:0x7f4bab861e3ffdaf; op2val:0x53442fab14b6736; 
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f18, f27, f22, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f21, rs2==f9, rd==f22,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x056 and fm2 == 0x953b95d9e4104 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f21; op2:f9; dest:f22; op1val:0x7f4bab861e3ffdaf; op2val:0x56953b95d9e4104; 
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f22, f21, f9, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f3, rs2==f1, rd==f20,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x059 and fm2 == 0xfa8a7b505d145 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f3; op2:f1; dest:f20; op1val:0x7f4bab861e3ffdaf; op2val:0x59fa8a7b505d145; 
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f20, f3, f1, dyn, 0, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f0, rs2==f5, rd==f28,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x05d and fm2 == 0x3c968d123a2cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f0; op2:f5; dest:f28; op1val:0x7f4bab861e3ffdaf; op2val:0x5d3c968d123a2cb; 
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f28, f0, f5, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f25, rs2==f13, rd==f12,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x060 and fm2 == 0x8bbc3056c8b7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f25; op2:f13; dest:f12; op1val:0x7f4bab861e3ffdaf; op2val:0x608bbc3056c8b7e; 
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f12, f25, f13, dyn, 0, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f9, rs2==f6, rd==f15,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x063 and fm2 == 0xeeab3c6c7ae5e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f9; op2:f6; dest:f15; op1val:0x7f4bab861e3ffdaf; op2val:0x63eeab3c6c7ae5e; 
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f15, f9, f6, dyn, 0, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f7, rs2==f18, rd==f17,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x067 and fm2 == 0x352b05c3cccfa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f7; op2:f18; dest:f17; op1val:0x7f4bab861e3ffdaf; op2val:0x67352b05c3cccfa; 
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f17, f7, f18, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f31, rs2==f20, rd==f30,fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x06a and fm2 == 0x8275c734c0039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f31; op2:f20; dest:f30; op1val:0x7f4bab861e3ffdaf; op2val:0x6a8275c734c0039; 
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f30, f31, f20, dyn, 0, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x06d and fm2 == 0xe3133901f0047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6de3133901f0047; 
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x071 and fm2 == 0x2dec03a13602d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x712dec03a13602d; 
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x074 and fm2 == 0x7967048983838 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x747967048983838; 
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x077 and fm2 == 0xd7c0c5abe4646 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x77d7c0c5abe4646; 
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x07b and fm2 == 0x26d87b8b6ebec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7b26d87b8b6ebec; 
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x07e and fm2 == 0x708e9a6e4a6e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7e708e9a6e4a6e6; 
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x081 and fm2 == 0xccb24109dd0a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x81ccb24109dd0a0; 
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x085 and fm2 == 0x1fef68a62a264 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x851fef68a62a264; 
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x088 and fm2 == 0x67eb42cfb4afd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x8867eb42cfb4afd; 
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x08b and fm2 == 0xc1e61383a1dbc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x8bc1e61383a1dbc; 
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x08f and fm2 == 0x192fcc3245296 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x8f192fcc3245296; 
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x092 and fm2 == 0x5f7bbf3ed673b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x925f7bbf3ed673b; 
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x095 and fm2 == 0xb75aaf0e8c10a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x95b75aaf0e8c10a; 
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x099 and fm2 == 0x1298ad69178a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x991298ad69178a6; 
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x09c and fm2 == 0x573ed8c35d6d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x9c573ed8c35d6d0; 
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x09f and fm2 == 0xad0e8ef434c84 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x9fad0e8ef434c84; 
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0a3 and fm2 == 0x0c291958a0fd2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xa30c291958a0fd2; 
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0a6 and fm2 == 0x4f335faec93c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xa64f335faec93c7; 
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0a9 and fm2 == 0xa300379a7b8b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xa9a300379a7b8b9; 
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0ad and fm2 == 0x05e022c08d373 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xad05e022c08d373; 
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0b0 and fm2 == 0x47582b70b0850 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xb047582b70b0850; 
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0b3 and fm2 == 0x992e364cdca64 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xb3992e364cdca64; 
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0b6 and fm2 == 0xff79c3e013cfd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xb6ff79c3e013cfd; 
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0ba and fm2 == 0x3fac1a6c0c61e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xba3fac1a6c0c61e; 
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0bd and fm2 == 0x8f9721070f7a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xbd8f9721070f7a6; 
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0c0 and fm2 == 0xf37ce948d358f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xc0f37ce948d358f; 
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0c4 and fm2 == 0x382e11cd8417a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xc4382e11cd8417a; 
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0c7 and fm2 == 0x86399640e51d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xc786399640e51d8; 
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0ca and fm2 == 0xe7c7fbd11e64e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xcae7c7fbd11e64e; 
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0ce and fm2 == 0x30dcfd62b2ff1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xce30dcfd62b2ff1; 
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0d1 and fm2 == 0x7d143cbb5fbed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xd17d143cbb5fbed; 
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0d4 and fm2 == 0xdc594bea37ae8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xd4dc594bea37ae8; 
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0d8 and fm2 == 0x29b7cf7262cd1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xd829b7cf7262cd1; 
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0db and fm2 == 0x7425c34efb805 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xdb7425c34efb805; 
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0de and fm2 == 0xd12f3422ba607 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xded12f3422ba607; 
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0e2 and fm2 == 0x22bd8095b47c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xe222bd8095b47c4; 
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0e5 and fm2 == 0x6b6ce0bb219b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xe56b6ce0bb219b5; 
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0e8 and fm2 == 0xc64818e9ea023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xe8c64818e9ea023; 
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0ec and fm2 == 0x1bed0f9232416 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xec1bed0f9232416; 
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0ef and fm2 == 0x62e85376bed1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xef62e85376bed1b; 
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0f2 and fm2 == 0xbba268546e862 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xf2bba268546e862; 
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0f6 and fm2 == 0x15458134c513d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xf615458134c513d; 
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0f9 and fm2 == 0x5a96e181f658c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xf95a96e181f658c; 
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x0fc and fm2 == 0xb13c99e273eef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xfcb13c99e273eef; 
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x100 and fm2 == 0x0ec5e02d88756 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1000ec5e02d88756; 
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x103 and fm2 == 0x52775838ea92b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x10352775838ea92b; 
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x106 and fm2 == 0xa7152e4725376 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x106a7152e4725376; 
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x10a and fm2 == 0x086d3cec7742a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x10a086d3cec7742a; 
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x10d and fm2 == 0x4a888c2795134 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x10d4a888c2795134; 
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x110 and fm2 == 0x9d2aaf317a581 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1109d2aaf317a581; 
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x114 and fm2 == 0x023aad7eec771 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x114023aad7eec771; 
   valaddr_reg:x3; val_offset:164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x117 and fm2 == 0x42c958dea794d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x11742c958dea794d; 
   valaddr_reg:x3; val_offset:166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x11a and fm2 == 0x937baf16517a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x11a937baf16517a0; 
   valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x11d and fm2 == 0xf85a9adbe5d88 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x11df85a9adbe5d88; 
   valaddr_reg:x3; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x121 and fm2 == 0x3b38a0c96fa75 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1213b38a0c96fa75; 
   valaddr_reg:x3; val_offset:172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x124 and fm2 == 0x8a06c8fbcb912 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1248a06c8fbcb912; 
   valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x127 and fm2 == 0xec887b3abe757 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x127ec887b3abe757; 
   valaddr_reg:x3; val_offset:176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x12b and fm2 == 0x33d54d04b7096 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x12b33d54d04b7096; 
   valaddr_reg:x3; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x12e and fm2 == 0x80caa045e4cbc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x12e80caa045e4cbc; 
   valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x131 and fm2 == 0xe0fd48575dfeb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x131e0fd48575dfeb; 
   valaddr_reg:x3; val_offset:182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x135 and fm2 == 0x2c9e4d369abf3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1352c9e4d369abf3; 
   valaddr_reg:x3; val_offset:184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x138 and fm2 == 0x77c5e084416ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x13877c5e084416ef; 
   valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x13b and fm2 == 0xd5b758a551cab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x13bd5b758a551cab; 
   valaddr_reg:x3; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x13f and fm2 == 0x25929767531eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x13f25929767531eb; 
   valaddr_reg:x3; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x142 and fm2 == 0x6ef73d4127e66 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1426ef73d4127e66; 
   valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x145 and fm2 == 0xcab50c9171dff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x145cab50c9171dff; 
   valaddr_reg:x3; val_offset:194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 194*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x149 and fm2 == 0x1eb127dae72c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1491eb127dae72c0; 
   valaddr_reg:x3; val_offset:196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 196*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x14c and fm2 == 0x665d71d1a0f6f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x14c665d71d1a0f6f; 
   valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x14f and fm2 == 0xbff4ce460934b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x14fbff4ce460934b; 
   valaddr_reg:x3; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 200*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x153 and fm2 == 0x17f900ebc5c0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x15317f900ebc5c0f; 
   valaddr_reg:x3; val_offset:202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 202*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x156 and fm2 == 0x5df74126b7313 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1565df74126b7313; 
   valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x159 and fm2 == 0xb575117064fd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x159b575117064fd8; 
   valaddr_reg:x3; val_offset:206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 206*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x15d and fm2 == 0x11692ae63f1e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x15d11692ae63f1e7; 
   valaddr_reg:x3; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 208*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x160 and fm2 == 0x55c3759fcee60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x16055c3759fcee60; 
   valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x163 and fm2 == 0xab345307c29f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x163ab345307c29f9; 
   valaddr_reg:x3; val_offset:212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 212*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x167 and fm2 == 0x0b00b3e4d9a3b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1670b00b3e4d9a3b; 
   valaddr_reg:x3; val_offset:214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 214*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x16a and fm2 == 0x4dc0e0de100ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x16a4dc0e0de100ca; 
   valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x16d and fm2 == 0xa1311915940fd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x16da1311915940fd; 
   valaddr_reg:x3; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 218*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x171 and fm2 == 0x04beafad7c89e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x17104beafad7c89e; 
   valaddr_reg:x3; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 220*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x174 and fm2 == 0x45ee5b98dbac5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x17445ee5b98dbac5; 
   valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x177 and fm2 == 0x9769f27f12977 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1779769f27f12977; 
   valaddr_reg:x3; val_offset:224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 224*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x17a and fm2 == 0xfd446f1ed73d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x17afd446f1ed73d4; 
   valaddr_reg:x3; val_offset:226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 226*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x17e and fm2 == 0x3e4ac57346865 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x17e3e4ac57346865; 
   valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x181 and fm2 == 0x8ddd76d01827e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1818ddd76d01827e; 
   valaddr_reg:x3; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 230*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x184 and fm2 == 0xf154d4841e31d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x184f154d4841e31d; 
   valaddr_reg:x3; val_offset:232*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 232*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x188 and fm2 == 0x36d504d292df2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x18836d504d292df2; 
   valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x18b and fm2 == 0x848a46073796f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x18b848a46073796f; 
   valaddr_reg:x3; val_offset:236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 236*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x18e and fm2 == 0xe5acd789057cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x18ee5acd789057cb; 
   valaddr_reg:x3; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 238*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x192 and fm2 == 0x2f8c06b5a36df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1922f8c06b5a36df; 
   valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x195 and fm2 == 0x7b6f08630c496 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1957b6f08630c496; 
   valaddr_reg:x3; val_offset:242*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 242*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x198 and fm2 == 0xda4aca7bcf5bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x198da4aca7bcf5bc; 
   valaddr_reg:x3; val_offset:244*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 244*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x19c and fm2 == 0x286ebe8d61996 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x19c286ebe8d61996; 
   valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x19f and fm2 == 0x728a6e30b9ffb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x19f728a6e30b9ffb; 
   valaddr_reg:x3; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 248*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1a2 and fm2 == 0xcf2d09bce87fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1a2cf2d09bce87fa; 
   valaddr_reg:x3; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 250*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1a6 and fm2 == 0x217c2616114fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1a6217c2616114fc; 
   valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1a9 and fm2 == 0x69db2f9b95a3b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1a969db2f9b95a3b; 
   valaddr_reg:x3; val_offset:254*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 254*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1ac and fm2 == 0xc451fb827b0ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1acc451fb827b0ca; 
   valaddr_reg:x3; val_offset:256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 256*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1b0 and fm2 == 0x1ab33d318ce7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1b01ab33d318ce7e; 
   valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1b3 and fm2 == 0x61600c7df021e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1b361600c7df021e; 
   valaddr_reg:x3; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 260*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1b6 and fm2 == 0xb9b80f9d6c2a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1b6b9b80f9d6c2a5; 
   valaddr_reg:x3; val_offset:262*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 262*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1ba and fm2 == 0x141309c2639a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1ba141309c2639a7; 
   valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1bd and fm2 == 0x5917cc32fc811 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1bd5917cc32fc811; 
   valaddr_reg:x3; val_offset:266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 266*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1c0 and fm2 == 0xaf5dbf3fbba15 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1c0af5dbf3fbba15; 
   valaddr_reg:x3; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 268*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1c4 and fm2 == 0x0d9a9787d544d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1c40d9a9787d544d; 
   valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1c7 and fm2 == 0x51013d69ca961 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1c751013d69ca961; 
   valaddr_reg:x3; val_offset:272*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 272*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1ca and fm2 == 0xa5418cc43d3b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1caa5418cc43d3b9; 
   valaddr_reg:x3; val_offset:274*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 274*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1ce and fm2 == 0x0748f7faa6453 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1ce0748f7faa6453; 
   valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1d1 and fm2 == 0x491b35f94fd68 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1d1491b35f94fd68; 
   valaddr_reg:x3; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 278*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1d4 and fm2 == 0x9b620377a3cc2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1d49b620377a3cc2; 
   valaddr_reg:x3; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 280*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1d8 and fm2 == 0x011d422ac65f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1d8011d422ac65f9; 
   valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1db and fm2 == 0x416492b577f78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1db416492b577f78; 
   valaddr_reg:x3; val_offset:284*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 284*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1de and fm2 == 0x91bdb762d5f56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1de91bdb762d5f56; 
   valaddr_reg:x3; val_offset:286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 286*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1e1 and fm2 == 0xf62d253b8b72b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1e1f62d253b8b72b; 
   valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1e5 and fm2 == 0x39dc37453727b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1e539dc37453727b; 
   valaddr_reg:x3; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 290*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1e8 and fm2 == 0x8853451684f1a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1e88853451684f1a; 
   valaddr_reg:x3; val_offset:292*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 292*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1eb and fm2 == 0xea68165c262e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1ebea68165c262e0; 
   valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1ef and fm2 == 0x32810df997dcc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1ef32810df997dcc; 
   valaddr_reg:x3; val_offset:296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 296*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1f2 and fm2 == 0x7f215177fdd3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1f27f215177fdd3f; 
   valaddr_reg:x3; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 298*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1f5 and fm2 == 0xdee9a5d5fd48f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1f5dee9a5d5fd48f; 
   valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1f9 and fm2 == 0x2b5207a5be4d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1f92b5207a5be4d9; 
   valaddr_reg:x3; val_offset:302*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 302*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1fc and fm2 == 0x7626898f2de10 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1fc7626898f2de10; 
   valaddr_reg:x3; val_offset:304*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 304*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x1ff and fm2 == 0xd3b02bf2f9594 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x1ffd3b02bf2f9594; 
   valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x203 and fm2 == 0x244e1b77dbd7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x203244e1b77dbd7c; 
   valaddr_reg:x3; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 308*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x206 and fm2 == 0x6d61a255d2cdb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2066d61a255d2cdb; 
   valaddr_reg:x3; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 310*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x209 and fm2 == 0xc8ba0aeb47812 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x209c8ba0aeb47812; 
   valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x20d and fm2 == 0x1d7446d30cb0b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x20d1d7446d30cb0b; 
   valaddr_reg:x3; val_offset:314*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 314*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x210 and fm2 == 0x64d15887cfdce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x21064d15887cfdce; 
   valaddr_reg:x3; val_offset:316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 316*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x213 and fm2 == 0xbe05aea9c3d42 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x213be05aea9c3d42; 
   valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x217 and fm2 == 0x16c38d2a1a649 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x21716c38d2a1a649; 
   valaddr_reg:x3; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 320*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x21a and fm2 == 0x5c747074a0fdb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x21a5c747074a0fdb; 
   valaddr_reg:x3; val_offset:322*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 322*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x21d and fm2 == 0xb3918c91c93d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x21db3918c91c93d2; 
   valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x221 and fm2 == 0x103af7db1dc63 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x221103af7db1dc63; 
   valaddr_reg:x3; val_offset:326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 326*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x224 and fm2 == 0x5449b5d1e537c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2245449b5d1e537c; 
   valaddr_reg:x3; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 328*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x227 and fm2 == 0xa95c23465e85b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x227a95c23465e85b; 
   valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x22b and fm2 == 0x09d9960bfb139 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x22b09d9960bfb139; 
   valaddr_reg:x3; val_offset:332*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 332*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x22e and fm2 == 0x4c4ffb8ef9d87 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x22e4c4ffb8ef9d87; 
   valaddr_reg:x3; val_offset:334*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 334*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x231 and fm2 == 0x9f63fa72b84e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2319f63fa72b84e9; 
   valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x235 and fm2 == 0x039e7c87b3312 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x235039e7c87b3312; 
   valaddr_reg:x3; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 338*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x238 and fm2 == 0x44861ba99ffd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x23844861ba99ffd6; 
   valaddr_reg:x3; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 340*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x23b and fm2 == 0x95a7a29407fcc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x23b95a7a29407fcc; 
   valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x23e and fm2 == 0xfb118b3909fbf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x23efb118b3909fbf; 
   valaddr_reg:x3; val_offset:344*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 344*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x242 and fm2 == 0x3ceaf703a63d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2423ceaf703a63d7; 
   valaddr_reg:x3; val_offset:346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 346*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x245 and fm2 == 0x8c25b4c48fccd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2458c25b4c48fccd; 
   valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x248 and fm2 == 0xef2f21f5b3c00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x248ef2f21f5b3c00; 
   valaddr_reg:x3; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 350*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x24c and fm2 == 0x357d753990580 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x24c357d753990580; 
   valaddr_reg:x3; val_offset:352*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 352*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x24f and fm2 == 0x82dcd287f46e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x24f82dcd287f46e0; 
   valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x252 and fm2 == 0xe3940729f1898 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x252e3940729f1898; 
   valaddr_reg:x3; val_offset:356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 356*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x256 and fm2 == 0x2e3c847a36f5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2562e3c847a36f5f; 
   valaddr_reg:x3; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 358*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x259 and fm2 == 0x79cba598c4b37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x25979cba598c4b37; 
   valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x25c and fm2 == 0xd83e8efef5e05 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x25cd83e8efef5e05; 
   valaddr_reg:x3; val_offset:362*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 362*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x260 and fm2 == 0x2727195f59ac3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2602727195f59ac3; 
   valaddr_reg:x3; val_offset:364*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 364*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x263 and fm2 == 0x70f0dfb730174 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x26370f0dfb730174; 
   valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x266 and fm2 == 0xcd2d17a4fc1d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x266cd2d17a4fc1d0; 
   valaddr_reg:x3; val_offset:368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 368*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x26a and fm2 == 0x203c2ec71d922 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x26a203c2ec71d922; 
   valaddr_reg:x3; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 370*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x26d and fm2 == 0x684b3a78e4f6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x26d684b3a78e4f6b; 
   valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x270 and fm2 == 0xc25e09171e346 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x270c25e09171e346; 
   valaddr_reg:x3; val_offset:374*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 374*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x274 and fm2 == 0x197ac5ae72e0b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x274197ac5ae72e0b; 
   valaddr_reg:x3; val_offset:376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 376*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x277 and fm2 == 0x5fd9771a0f98e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2775fd9771a0f98e; 
   valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x27a and fm2 == 0xb7cfd4e0937f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x27ab7cfd4e0937f2; 
   valaddr_reg:x3; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 380*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x27e and fm2 == 0x12e1e50c5c2f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x27e12e1e50c5c2f7; 
   valaddr_reg:x3; val_offset:382*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 382*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x281 and fm2 == 0x579a5e4f733b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x281579a5e4f733b5; 
   valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x284 and fm2 == 0xad80f5e3500a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x284ad80f5e3500a2; 
   valaddr_reg:x3; val_offset:386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 386*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x288 and fm2 == 0x0c7099ae12065 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2880c7099ae12065; 
   valaddr_reg:x3; val_offset:388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 388*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x28b and fm2 == 0x4f8cc0199687f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x28b4f8cc0199687f; 
   valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x28e and fm2 == 0xa36ff01ffc29e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x28ea36ff01ffc29e; 
   valaddr_reg:x3; val_offset:392*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 392*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x292 and fm2 == 0x0625f613fd9a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2920625f613fd9a3; 
   valaddr_reg:x3; val_offset:394*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 394*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x295 and fm2 == 0x47af7398fd00c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x29547af7398fd00c; 
   valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x298 and fm2 == 0x999b507f3c40f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x298999b507f3c40f; 
   valaddr_reg:x3; val_offset:398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 398*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x29c and fm2 == 0x0001124f85a89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x29c0001124f85a89; 
   valaddr_reg:x3; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 400*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x29f and fm2 == 0x400156e36712c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x29f400156e36712c; 
   valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2a2 and fm2 == 0x9001ac9c40d76 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2a29001ac9c40d76; 
   valaddr_reg:x3; val_offset:404*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 404*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2a5 and fm2 == 0xf40217c3510d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2a5f40217c3510d4; 
   valaddr_reg:x3; val_offset:406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 406*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2a9 and fm2 == 0x38814eda12a84 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2a938814eda12a84; 
   valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2ac and fm2 == 0x86a1a29097526 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2ac86a1a29097526; 
   valaddr_reg:x3; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 410*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2af and fm2 == 0xe84a0b34bd26f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2afe84a0b34bd26f; 
   valaddr_reg:x3; val_offset:412*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 412*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2b3 and fm2 == 0x312e4700f6385 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2b3312e4700f6385; 
   valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2b6 and fm2 == 0x7d79d8c133c67 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2b67d79d8c133c67; 
   valaddr_reg:x3; val_offset:416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 416*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2b9 and fm2 == 0xdcd84ef180b80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2b9dcd84ef180b80; 
   valaddr_reg:x3; val_offset:418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 418*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2bd and fm2 == 0x2a073156f0730 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2bd2a073156f0730; 
   valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2c0 and fm2 == 0x7488fdacac8fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2c07488fdacac8fc; 
   valaddr_reg:x3; val_offset:422*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 422*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2c3 and fm2 == 0xd1ab3d17d7b3b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2c3d1ab3d17d7b3b; 
   valaddr_reg:x3; val_offset:424*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 424*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2c7 and fm2 == 0x230b062ee6d05 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2c7230b062ee6d05; 
   valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2ca and fm2 == 0x6bcdc7baa0846 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2ca6bcdc7baa0846; 
   valaddr_reg:x3; val_offset:428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 428*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2cd and fm2 == 0xc6c139a948a58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2cdc6c139a948a58; 
   valaddr_reg:x3; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 430*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2d1 and fm2 == 0x1c38c409cd677 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2d11c38c409cd677; 
   valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2d4 and fm2 == 0x6346f50c40c15 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2d46346f50c40c15; 
   valaddr_reg:x3; val_offset:434*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 434*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2d7 and fm2 == 0xbc18b24f50f1a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2d7bc18b24f50f1a; 
   valaddr_reg:x3; val_offset:436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 436*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2db and fm2 == 0x158f6f7192970 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2db158f6f7192970; 
   valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2de and fm2 == 0x5af34b4df73cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2de5af34b4df73cc; 
   valaddr_reg:x3; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 440*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2e1 and fm2 == 0xb1b01e21750bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2e1b1b01e21750bf; 
   valaddr_reg:x3; val_offset:442*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 442*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2e5 and fm2 == 0x0f0e12d4e9278 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2e50f0e12d4e9278; 
   valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2e8 and fm2 == 0x52d1978a23715 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2e852d1978a23715; 
   valaddr_reg:x3; val_offset:446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 446*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2eb and fm2 == 0xa785fd6cac4db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2eba785fd6cac4db; 
   valaddr_reg:x3; val_offset:448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 448*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2ef and fm2 == 0x08b3be63ebb09 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2ef08b3be63ebb09; 
   valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2f2 and fm2 == 0x4ae0adfce69cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2f24ae0adfce69cb; 
   valaddr_reg:x3; val_offset:452*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 452*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2f5 and fm2 == 0x9d98d97c2043e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2f59d98d97c2043e; 
   valaddr_reg:x3; val_offset:454*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 454*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2f9 and fm2 == 0x027f87ed942a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2f9027f87ed942a7; 
   valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2fc and fm2 == 0x431f69e8f9350 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2fc431f69e8f9350; 
   valaddr_reg:x3; val_offset:458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 458*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x2ff and fm2 == 0x93e7446337824 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x2ff93e7446337824; 
   valaddr_reg:x3; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 460*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x302 and fm2 == 0xf8e1157c0562d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x302f8e1157c0562d; 
   valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x306 and fm2 == 0x3b8cad6d835dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3063b8cad6d835dc; 
   valaddr_reg:x3; val_offset:464*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 464*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x309 and fm2 == 0x8a6fd8c8e4353 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3098a6fd8c8e4353; 
   valaddr_reg:x3; val_offset:466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 466*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x30c and fm2 == 0xed0bcefb1d428 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x30ced0bcefb1d428; 
   valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x310 and fm2 == 0x3427615cf2499 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3103427615cf2499; 
   valaddr_reg:x3; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 470*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x313 and fm2 == 0x813139b42edbf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x313813139b42edbf; 
   valaddr_reg:x3; val_offset:472*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 472*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x316 and fm2 == 0xe17d88213a92f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x316e17d88213a92f; 
   valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x31a and fm2 == 0x2cee7514c49be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x31a2cee7514c49be; 
   valaddr_reg:x3; val_offset:476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 476*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x31d and fm2 == 0x782a1259f5c2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x31d782a1259f5c2d; 
   valaddr_reg:x3; val_offset:478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 478*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x320 and fm2 == 0xd63496f073338 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x320d63496f073338; 
   valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x324 and fm2 == 0x25e0de5648003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x32425e0de5648003; 
   valaddr_reg:x3; val_offset:482*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 482*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x327 and fm2 == 0x6f5915ebda004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3276f5915ebda004; 
   valaddr_reg:x3; val_offset:484*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 484*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x32a and fm2 == 0xcb2f5b66d0805 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x32acb2f5b66d0805; 
   valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x32e and fm2 == 0x1efd992042503 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x32e1efd992042503; 
   valaddr_reg:x3; val_offset:488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 488*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x331 and fm2 == 0x66bcff6852e44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x33166bcff6852e44; 
   valaddr_reg:x3; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 490*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x334 and fm2 == 0xc06c3f42679d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x334c06c3f42679d5; 
   valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x338 and fm2 == 0x1843a78980c25 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3381843a78980c25; 
   valaddr_reg:x3; val_offset:494*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 494*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x33b and fm2 == 0x5e54916be0f2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x33b5e54916be0f2e; 
   valaddr_reg:x3; val_offset:496*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 496*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x33e and fm2 == 0xb5e9b5c6d92fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x33eb5e9b5c6d92fa; 
   valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x342 and fm2 == 0x11b2119c47bdc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x34211b2119c47bdc; 
   valaddr_reg:x3; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 500*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x345 and fm2 == 0x561e960359ad3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x345561e960359ad3; 
   valaddr_reg:x3; val_offset:502*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 502*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x348 and fm2 == 0xaba63b8430188 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x348aba63b8430188; 
   valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x34c and fm2 == 0x0b47e5329e0f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x34c0b47e5329e0f5; 
   valaddr_reg:x3; val_offset:506*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 506*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x34f and fm2 == 0x4e19de7f45932 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x34f4e19de7f45932; 
   valaddr_reg:x3; val_offset:508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 508*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x352 and fm2 == 0xa1a0561f16f7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x352a1a0561f16f7f; 
   valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x356 and fm2 == 0x050435d36e5af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x356050435d36e5af; 
   valaddr_reg:x3; val_offset:512*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 512*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x359 and fm2 == 0x4645434849f1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3594645434849f1b; 
   valaddr_reg:x3; val_offset:514*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 514*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x35c and fm2 == 0x97d6941a5c6e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x35c97d6941a5c6e2; 
   valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x35f and fm2 == 0xfdcc3920f389a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x35ffdcc3920f389a; 
   valaddr_reg:x3; val_offset:518*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 518*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x363 and fm2 == 0x3e9fa3b498360 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3633e9fa3b498360; 
   valaddr_reg:x3; val_offset:520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 520*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x366 and fm2 == 0x8e478ca1be439 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3668e478ca1be439; 
   valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x369 and fm2 == 0xf1d96fca2dd47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x369f1d96fca2dd47; 
   valaddr_reg:x3; val_offset:524*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 524*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x36d and fm2 == 0x3727e5de5ca4c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x36d3727e5de5ca4c; 
   valaddr_reg:x3; val_offset:526*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 526*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x370 and fm2 == 0x84f1df55f3cdf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x37084f1df55f3cdf; 
   valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x373 and fm2 == 0xe62e572b70c17 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x373e62e572b70c17; 
   valaddr_reg:x3; val_offset:530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 530*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x377 and fm2 == 0x2fdcf67b2678e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3772fdcf67b2678e; 
   valaddr_reg:x3; val_offset:532*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 532*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x37a and fm2 == 0x7bd43419f0172 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x37a7bd43419f0172; 
   valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x37d and fm2 == 0xdac941206c1ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x37ddac941206c1ce; 
   valaddr_reg:x3; val_offset:536*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 536*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x381 and fm2 == 0x28bdc8b443921 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x38128bdc8b443921; 
   valaddr_reg:x3; val_offset:538*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 538*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x384 and fm2 == 0x72ed3ae154769 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x38472ed3ae154769; 
   valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x387 and fm2 == 0xcfa88999a9944 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x387cfa88999a9944; 
   valaddr_reg:x3; val_offset:542*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 542*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x38b and fm2 == 0x21c9560009fca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x38b21c9560009fca; 
   valaddr_reg:x3; val_offset:544*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 544*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x38e and fm2 == 0x6a3bab800c7bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x38e6a3bab800c7bd; 
   valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x391 and fm2 == 0xc4ca96600f9ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x391c4ca96600f9ac; 
   valaddr_reg:x3; val_offset:548*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 548*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x395 and fm2 == 0x1afe9dfc09c0c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3951afe9dfc09c0c; 
   valaddr_reg:x3; val_offset:550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 550*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x398 and fm2 == 0x61be457b0c30e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x39861be457b0c30e; 
   valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x39b and fm2 == 0xba2dd6d9cf3d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x39bba2dd6d9cf3d2; 
   valaddr_reg:x3; val_offset:554*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 554*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x39f and fm2 == 0x145ca64821863 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x39f145ca64821863; 
   valaddr_reg:x3; val_offset:556*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 556*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3a2 and fm2 == 0x5973cfda29e7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3a25973cfda29e7c; 
   valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3a5 and fm2 == 0xafd0c3d0b461b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3a5afd0c3d0b461b; 
   valaddr_reg:x3; val_offset:560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 560*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3a9 and fm2 == 0x0de27a6270bd1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3a90de27a6270bd1; 
   valaddr_reg:x3; val_offset:562*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 562*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3ac and fm2 == 0x515b18fb0cec5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3ac515b18fb0cec5; 
   valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3af and fm2 == 0xa5b1df39d0276 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3afa5b1df39d0276; 
   valaddr_reg:x3; val_offset:566*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 566*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3b3 and fm2 == 0x078f2b842218a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3b3078f2b842218a; 
   valaddr_reg:x3; val_offset:568*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 568*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3b6 and fm2 == 0x4972f6652a9ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3b64972f6652a9ed; 
   valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3b9 and fm2 == 0x9bcfb3fe75468 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3b99bcfb3fe75468; 
   valaddr_reg:x3; val_offset:572*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 572*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3bd and fm2 == 0x0161d07f094c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3bd0161d07f094c1; 
   valaddr_reg:x3; val_offset:574*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 574*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3c0 and fm2 == 0x41ba449ecb9f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3c041ba449ecb9f1; 
   valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3c3 and fm2 == 0x9228d5c67e86d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3c39228d5c67e86d; 
   valaddr_reg:x3; val_offset:578*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 578*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3c6 and fm2 == 0xf6b30b381e289 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3c6f6b30b381e289; 
   valaddr_reg:x3; val_offset:580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 580*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3ca and fm2 == 0x3a2fe70312d95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3ca3a2fe70312d95; 
   valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3cd and fm2 == 0x88bbe0c3d78fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3cd88bbe0c3d78fb; 
   valaddr_reg:x3; val_offset:584*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 584*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3d0 and fm2 == 0xeaead8f4cd739 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3d0eaead8f4cd739; 
   valaddr_reg:x3; val_offset:586*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 586*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3d4 and fm2 == 0x32d2c79900684 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3d432d2c79900684; 
   valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3d7 and fm2 == 0x7f87797f40825 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3d77f87797f40825; 
   valaddr_reg:x3; val_offset:590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 590*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3da and fm2 == 0xdf6957df10a2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3dadf6957df10a2e; 
   valaddr_reg:x3; val_offset:592*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 592*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3de and fm2 == 0x2ba1d6eb6a65d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3de2ba1d6eb6a65d; 
   valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3e1 and fm2 == 0x768a4ca644ff4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3e1768a4ca644ff4; 
   valaddr_reg:x3; val_offset:596*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 596*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3e4 and fm2 == 0xd42cdfcfd63f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3e4d42cdfcfd63f1; 
   valaddr_reg:x3; val_offset:598*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 598*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3e8 and fm2 == 0x249c0be1e5e77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3e8249c0be1e5e77; 
   valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3eb and fm2 == 0x6dc30eda5f614 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3eb6dc30eda5f614; 
   valaddr_reg:x3; val_offset:602*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 602*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3ee and fm2 == 0xc933d290f7399 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3eec933d290f7399; 
   valaddr_reg:x3; val_offset:604*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 604*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3f2 and fm2 == 0x1dc0639a9a840 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3f21dc0639a9a840; 
   valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3f5 and fm2 == 0x65307c8141250 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3f565307c8141250; 
   valaddr_reg:x3; val_offset:608*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 608*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xbe7c9ba1916e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3f8be7c9ba1916e4; 
   valaddr_reg:x3; val_offset:610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 610*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x170de144fae4e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3fc170de144fae4e; 
   valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5cd15996399e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x3ff5cd15996399e2; 
   valaddr_reg:x3; val_offset:614*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 614*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x402 and fm2 == 0xb405affbc805a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x402b405affbc805a; 
   valaddr_reg:x3; val_offset:616*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 616*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x406 and fm2 == 0x10838dfd5d038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x40610838dfd5d038; 
   valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x409 and fm2 == 0x54a4717cb4447 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x40954a4717cb4447; 
   valaddr_reg:x3; val_offset:620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 620*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x40c and fm2 == 0xa9cd8ddbe1558 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x40ca9cd8ddbe1558; 
   valaddr_reg:x3; val_offset:622*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 622*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x410 and fm2 == 0x0a2078a96cd57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4100a2078a96cd57; 
   valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x413 and fm2 == 0x4ca896d3c80ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4134ca896d3c80ad; 
   valaddr_reg:x3; val_offset:626*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 626*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x416 and fm2 == 0x9fd2bc88ba0d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4169fd2bc88ba0d8; 
   valaddr_reg:x3; val_offset:628*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 628*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x41a and fm2 == 0x03e3b5d574487 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x41a03e3b5d574487; 
   valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x41d and fm2 == 0x44dca34ad15a9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x41d44dca34ad15a9; 
   valaddr_reg:x3; val_offset:632*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 632*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x420 and fm2 == 0x9613cc1d85b13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4209613cc1d85b13; 
   valaddr_reg:x3; val_offset:634*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 634*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x423 and fm2 == 0xfb98bf24e71d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x423fb98bf24e71d8; 
   valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x427 and fm2 == 0x3d3f777710727 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4273d3f777710727; 
   valaddr_reg:x3; val_offset:638*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 638*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x42a and fm2 == 0x8c8f5554d48f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x42a8c8f5554d48f1; 
   valaddr_reg:x3; val_offset:640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 640*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x42d and fm2 == 0xefb32aaa09b2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x42defb32aaa09b2d; 
   valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x431 and fm2 == 0x35cffaaa460fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x43135cffaaa460fc; 
   valaddr_reg:x3; val_offset:644*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 644*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x434 and fm2 == 0x8343f954d793b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4348343f954d793b; 
   valaddr_reg:x3; val_offset:646*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 646*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x437 and fm2 == 0xe414f7aa0d78a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x437e414f7aa0d78a; 
   valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x43b and fm2 == 0x2e8d1aca486b6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x43b2e8d1aca486b6; 
   valaddr_reg:x3; val_offset:650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 650*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x43e and fm2 == 0x7a30617cda864 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x43e7a30617cda864; 
   valaddr_reg:x3; val_offset:652*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 652*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x441 and fm2 == 0xd8bc79dc1127d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x441d8bc79dc1127d; 
   valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x445 and fm2 == 0x2775cc298ab8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4452775cc298ab8e; 
   valaddr_reg:x3; val_offset:656*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 656*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x448 and fm2 == 0x71533f33ed671 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x44871533f33ed671; 
   valaddr_reg:x3; val_offset:658*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 658*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x44b and fm2 == 0xcda80f00e8c0e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x44bcda80f00e8c0e; 
   valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x44f and fm2 == 0x2089096091789 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x44f2089096091789; 
   valaddr_reg:x3; val_offset:662*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 662*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x452 and fm2 == 0x68ab4bb8b5d6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x45268ab4bb8b5d6b; 
   valaddr_reg:x3; val_offset:664*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 664*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x455 and fm2 == 0xc2d61ea6e34c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x455c2d61ea6e34c5; 
   valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x459 and fm2 == 0x19c5d3284e0fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x45919c5d3284e0fb; 
   valaddr_reg:x3; val_offset:668*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 668*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x45c and fm2 == 0x603747f26193a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x45c603747f26193a; 
   valaddr_reg:x3; val_offset:670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 670*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x45f and fm2 == 0xb84519eef9f89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x45fb84519eef9f89; 
   valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x463 and fm2 == 0x132b30355c3b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x463132b30355c3b5; 
   valaddr_reg:x3; val_offset:674*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 674*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x466 and fm2 == 0x57f5fc42b34a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x46657f5fc42b34a3; 
   valaddr_reg:x3; val_offset:676*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 676*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x469 and fm2 == 0xadf37b53601cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x469adf37b53601cb; 
   valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x46d and fm2 == 0x0cb82d141c11f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x46d0cb82d141c11f; 
   valaddr_reg:x3; val_offset:680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 680*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x470 and fm2 == 0x4fe6385923167 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4704fe6385923167; 
   valaddr_reg:x3; val_offset:682*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 682*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x473 and fm2 == 0xa3dfc66f6bdc1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x473a3dfc66f6bdc1; 
   valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x477 and fm2 == 0x066bdc05a3698 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x477066bdc05a3698; 
   valaddr_reg:x3; val_offset:686*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 686*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x47a and fm2 == 0x4806d3070c43f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x47a4806d3070c43f; 
   valaddr_reg:x3; val_offset:688*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 688*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x47d and fm2 == 0x9a0887c8cf54e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x47d9a0887c8cf54e; 
   valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x481 and fm2 == 0x004554dd81951 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x481004554dd81951; 
   valaddr_reg:x3; val_offset:692*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 692*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x484 and fm2 == 0x4056aa14e1fa5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4844056aa14e1fa5; 
   valaddr_reg:x3; val_offset:694*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 694*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x487 and fm2 == 0x906c549a1a78e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x487906c549a1a78e; 
   valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x48a and fm2 == 0xf48769c0a1172 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x48af48769c0a1172; 
   valaddr_reg:x3; val_offset:698*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 698*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x48e and fm2 == 0x38d4a21864ae7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x48e38d4a21864ae7; 
   valaddr_reg:x3; val_offset:700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 700*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x491 and fm2 == 0x8709ca9e7dda1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4918709ca9e7dda1; 
   valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x494 and fm2 == 0xe8cc3d461d509 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x494e8cc3d461d509; 
   valaddr_reg:x3; val_offset:704*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 704*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x498 and fm2 == 0x317fa64bd2526 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x498317fa64bd2526; 
   valaddr_reg:x3; val_offset:706*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 706*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x49b and fm2 == 0x7ddf8fdec6e6f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x49b7ddf8fdec6e6f; 
   valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x49e and fm2 == 0xdd5773d678a0b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x49edd5773d678a0b; 
   valaddr_reg:x3; val_offset:710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 710*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4a2 and fm2 == 0x2a56a8660b647 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4a22a56a8660b647; 
   valaddr_reg:x3; val_offset:712*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 712*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4a5 and fm2 == 0x74ec527f8e3d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4a574ec527f8e3d9; 
   valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4a8 and fm2 == 0xd227671f71ccf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4a8d227671f71ccf; 
   valaddr_reg:x3; val_offset:716*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 716*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4ac and fm2 == 0x2358a073a7201 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4ac2358a073a7201; 
   valaddr_reg:x3; val_offset:718*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 718*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4af and fm2 == 0x6c2ec89090e82 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4af6c2ec89090e82; 
   valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4b2 and fm2 == 0xc73a7ab4b5222 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4b2c73a7ab4b5222; 
   valaddr_reg:x3; val_offset:722*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 722*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4b6 and fm2 == 0x1c848cb0f1355 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4b61c848cb0f1355; 
   valaddr_reg:x3; val_offset:724*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 724*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4b9 and fm2 == 0x63a5afdd2d82b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4b963a5afdd2d82b; 
   valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4bc and fm2 == 0xbc8f1bd478e35 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4bcbc8f1bd478e35; 
   valaddr_reg:x3; val_offset:728*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 728*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4c0 and fm2 == 0x15d97164cb8e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4c015d97164cb8e1; 
   valaddr_reg:x3; val_offset:730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 730*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4c3 and fm2 == 0x5b4fcdbdfe71a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4c35b4fcdbdfe71a; 
   valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4c6 and fm2 == 0xb223c12d7e0e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4c6b223c12d7e0e0; 
   valaddr_reg:x3; val_offset:734*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 734*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4ca and fm2 == 0x0f5658bc6ec8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4ca0f5658bc6ec8c; 
   valaddr_reg:x3; val_offset:736*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 736*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4cd and fm2 == 0x532beeeb8a7af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4cd532beeeb8a7af; 
   valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4d0 and fm2 == 0xa7f6eaa66d19b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4d0a7f6eaa66d19b; 
   valaddr_reg:x3; val_offset:740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 740*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4d4 and fm2 == 0x08fa52a804301 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4d408fa52a804301; 
   valaddr_reg:x3; val_offset:742*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 742*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4d7 and fm2 == 0x4b38e752053c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4d74b38e752053c1; 
   valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4da and fm2 == 0x9e072126868b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4da9e072126868b1; 
   valaddr_reg:x3; val_offset:746*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 746*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4de and fm2 == 0x02c474b81416f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4de02c474b81416f; 
   valaddr_reg:x3; val_offset:748*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 748*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4e1 and fm2 == 0x437591e6191ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4e1437591e6191ca; 
   valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4e4 and fm2 == 0x9452f65f9f63d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4e49452f65f9f63d; 
   valaddr_reg:x3; val_offset:752*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 752*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4e7 and fm2 == 0xf967b3f7873cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4e7f967b3f7873cc; 
   valaddr_reg:x3; val_offset:754*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 754*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4eb and fm2 == 0x3be0d07ab4860 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4eb3be0d07ab4860; 
   valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4ee and fm2 == 0x8ad9049961a77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4ee8ad9049961a77; 
   valaddr_reg:x3; val_offset:758*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 758*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4f1 and fm2 == 0xed8f45bfba115 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4f1ed8f45bfba115; 
   valaddr_reg:x3; val_offset:760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 760*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4f5 and fm2 == 0x34798b97d44ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4f534798b97d44ad; 
   valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4f8 and fm2 == 0x8197ee7dc95d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4f88197ee7dc95d9; 
   valaddr_reg:x3; val_offset:764*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 764*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4fb and fm2 == 0xe1fdea1d3bb4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4fbe1fdea1d3bb4f; 
   valaddr_reg:x3; val_offset:766*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 766*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x4ff and fm2 == 0x2d3eb25245511 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x4ff2d3eb25245511; 
   valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x502 and fm2 == 0x788e5ee6d6a56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x502788e5ee6d6a56; 
   valaddr_reg:x3; val_offset:770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 770*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x505 and fm2 == 0xd6b1f6a08c4eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x505d6b1f6a08c4eb; 
   valaddr_reg:x3; val_offset:772*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 772*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x509 and fm2 == 0x262f3a2457b13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x509262f3a2457b13; 
   valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x50c and fm2 == 0x6fbb08ad6d9d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x50c6fbb08ad6d9d8; 
   valaddr_reg:x3; val_offset:776*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 776*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x50f and fm2 == 0xcba9cad8c904d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x50fcba9cad8c904d; 
   valaddr_reg:x3; val_offset:778*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 778*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x513 and fm2 == 0x1f4a1ec77da30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5131f4a1ec77da30; 
   valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x516 and fm2 == 0x671ca6795d0bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x516671ca6795d0bd; 
   valaddr_reg:x3; val_offset:782*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 782*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x519 and fm2 == 0xc0e3d017b44ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x519c0e3d017b44ec; 
   valaddr_reg:x3; val_offset:784*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 784*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x51d and fm2 == 0x188e620ed0b13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x51d188e620ed0b13; 
   valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x520 and fm2 == 0x5eb1fa9284dd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5205eb1fa9284dd8; 
   valaddr_reg:x3; val_offset:788*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 788*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x523 and fm2 == 0xb65e79372614e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x523b65e79372614e; 
   valaddr_reg:x3; val_offset:790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 790*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x527 and fm2 == 0x11fb0bc277cd1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x52711fb0bc277cd1; 
   valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x52a and fm2 == 0x5679ceb315c05 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x52a5679ceb315c05; 
   valaddr_reg:x3; val_offset:794*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 794*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x52d and fm2 == 0xac18425fdb306 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x52dac18425fdb306; 
   valaddr_reg:x3; val_offset:796*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 796*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x531 and fm2 == 0x0b8f297be8fe4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5310b8f297be8fe4; 
   valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x534 and fm2 == 0x4e72f3dae33dd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5344e72f3dae33dd; 
   valaddr_reg:x3; val_offset:800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 800*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x537 and fm2 == 0xa20fb0d19c0d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x537a20fb0d19c0d4; 
   valaddr_reg:x3; val_offset:802*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 802*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x53b and fm2 == 0x0549ce8301885 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x53b0549ce8301885; 
   valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x53e and fm2 == 0x469c4223c1ea6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x53e469c4223c1ea6; 
   valaddr_reg:x3; val_offset:806*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 806*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x541 and fm2 == 0x984352acb264f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x541984352acb264f; 
   valaddr_reg:x3; val_offset:808*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 808*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x544 and fm2 == 0xfe542757defe3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x544fe542757defe3; 
   valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x548 and fm2 == 0x3ef49896eb5ee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5483ef49896eb5ee; 
   valaddr_reg:x3; val_offset:812*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 812*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x54b and fm2 == 0x8eb1bebca6369 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x54b8eb1bebca6369; 
   valaddr_reg:x3; val_offset:814*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 814*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x54e and fm2 == 0xf25e2e6bcfc44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x54ef25e2e6bcfc44; 
   valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x552 and fm2 == 0x377add0361daa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x552377add0361daa; 
   valaddr_reg:x3; val_offset:818*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 818*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x555 and fm2 == 0x855994443a515 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x555855994443a515; 
   valaddr_reg:x3; val_offset:820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 820*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x558 and fm2 == 0xe6aff95548e5a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x558e6aff95548e5a; 
   valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x55c and fm2 == 0x302dfbd54d8f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x55c302dfbd54d8f8; 
   valaddr_reg:x3; val_offset:824*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 824*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x55f and fm2 == 0x7c397acaa0f36 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x55f7c397acaa0f36; 
   valaddr_reg:x3; val_offset:826*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 826*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x562 and fm2 == 0xdb47d97d49304 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x562db47d97d49304; 
   valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x566 and fm2 == 0x290ce7ee4dbe2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x566290ce7ee4dbe2; 
   valaddr_reg:x3; val_offset:830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 830*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x569 and fm2 == 0x735021e9e12db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x569735021e9e12db; 
   valaddr_reg:x3; val_offset:832*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 832*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x56c and fm2 == 0xd0242a6459792 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x56cd0242a6459792; 
   valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x570 and fm2 == 0x22169a7eb7ebb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x57022169a7eb7ebb; 
   valaddr_reg:x3; val_offset:836*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 836*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x573 and fm2 == 0x6a9c411e65e6a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5736a9c411e65e6a; 
   valaddr_reg:x3; val_offset:838*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 838*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x576 and fm2 == 0xc5435165ff604 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x576c5435165ff604; 
   valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x57a and fm2 == 0x1b4a12dfbf9c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x57a1b4a12dfbf9c3; 
   valaddr_reg:x3; val_offset:842*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 842*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x57d and fm2 == 0x621c9797af833 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x57d621c9797af833; 
   valaddr_reg:x3; val_offset:844*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 844*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x580 and fm2 == 0xbaa3bd7d9b640 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x580baa3bd7d9b640; 
   valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x584 and fm2 == 0x14a6566e811e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x58414a6566e811e8; 
   valaddr_reg:x3; val_offset:848*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 848*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x587 and fm2 == 0x59cfec0a21662 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x58759cfec0a21662; 
   valaddr_reg:x3; val_offset:850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 850*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x58a and fm2 == 0xb043e70ca9bfb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x58ab043e70ca9bfb; 
   valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x58e and fm2 == 0x0e2a7067ea17d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x58e0e2a7067ea17d; 
   valaddr_reg:x3; val_offset:854*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 854*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x591 and fm2 == 0x51b50c81e49dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x59151b50c81e49dc; 
   valaddr_reg:x3; val_offset:856*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 856*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x594 and fm2 == 0xa6224fa25dc53 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x594a6224fa25dc53; 
   valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x598 and fm2 == 0x07d571c57a9b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x59807d571c57a9b4; 
   valaddr_reg:x3; val_offset:860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 860*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x59b and fm2 == 0x49cace36d9421 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x59b49cace36d9421; 
   valaddr_reg:x3; val_offset:862*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 862*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x59e and fm2 == 0x9c3d81c48f929 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x59e9c3d81c48f929; 
   valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5a2 and fm2 == 0x01a6711ad9bba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5a201a6711ad9bba; 
   valaddr_reg:x3; val_offset:866*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 866*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5a5 and fm2 == 0x42100d61902a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5a542100d61902a8; 
   valaddr_reg:x3; val_offset:868*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 868*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5a8 and fm2 == 0x929410b9f4352 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5a8929410b9f4352; 
   valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5ab and fm2 == 0xf73914e871427 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5abf73914e871427; 
   valaddr_reg:x3; val_offset:872*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 872*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5af and fm2 == 0x3a83ad1146c98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5af3a83ad1146c98; 
   valaddr_reg:x3; val_offset:874*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 874*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5b2 and fm2 == 0x89249855987be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5b289249855987be; 
   valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5b5 and fm2 == 0xeb6dbe6afe9ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5b5eb6dbe6afe9ae; 
   valaddr_reg:x3; val_offset:878*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 878*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5b9 and fm2 == 0x33249702df20d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5b933249702df20d; 
   valaddr_reg:x3; val_offset:880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 880*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5bc and fm2 == 0x7fedbcc396e90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5bc7fedbcc396e90; 
   valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5bf and fm2 == 0xdfe92bf47ca34 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5bfdfe92bf47ca34; 
   valaddr_reg:x3; val_offset:884*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 884*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5c3 and fm2 == 0x2bf1bb78cde60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5c32bf1bb78cde60; 
   valaddr_reg:x3; val_offset:886*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 886*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5c6 and fm2 == 0x76ee2a57015f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5c676ee2a57015f8; 
   valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5c9 and fm2 == 0xd4a9b4ecc1b76 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5c9d4a9b4ecc1b76; 
   valaddr_reg:x3; val_offset:890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 890*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5cd and fm2 == 0x24ea1113f912a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5cd24ea1113f912a; 
   valaddr_reg:x3; val_offset:892*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 892*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5d0 and fm2 == 0x6e249558f7574 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5d06e249558f7574; 
   valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5d3 and fm2 == 0xc9adbaaf352d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5d3c9adbaaf352d2; 
   valaddr_reg:x3; val_offset:896*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 896*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5d7 and fm2 == 0x1e0c94ad813c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5d71e0c94ad813c3; 
   valaddr_reg:x3; val_offset:898*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 898*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5da and fm2 == 0x658fb9d8e18b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5da658fb9d8e18b4; 
   valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5dd and fm2 == 0xbef3a84f19ee1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5ddbef3a84f19ee1; 
   valaddr_reg:x3; val_offset:902*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 902*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5e1 and fm2 == 0x175849317034c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5e1175849317034c; 
   valaddr_reg:x3; val_offset:904*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 904*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5e4 and fm2 == 0x5d2e5b7dcc420 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5e45d2e5b7dcc420; 
   valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5e7 and fm2 == 0xb479f25d3f527 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5e7b479f25d3f527; 
   valaddr_reg:x3; val_offset:908*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 908*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5eb and fm2 == 0x10cc377a47939 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5eb10cc377a47939; 
   valaddr_reg:x3; val_offset:910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 910*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5ee and fm2 == 0x54ff4558d9787 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5ee54ff4558d9787; 
   valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5f1 and fm2 == 0xaa3f16af0fd68 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5f1aa3f16af0fd68; 
   valaddr_reg:x3; val_offset:914*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 914*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0x0a676e2d69e61 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5f50a676e2d69e61; 
   valaddr_reg:x3; val_offset:916*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 916*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x4d0149b8c45fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5f84d0149b8c45fa; 
   valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5fb and fm2 == 0xa0419c26f5778 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5fba0419c26f5778; 
   valaddr_reg:x3; val_offset:920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 920*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x5ff and fm2 == 0x04290198596ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x5ff04290198596ab; 
   valaddr_reg:x3; val_offset:922*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 922*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x602 and fm2 == 0x453341fe6fc56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x602453341fe6fc56; 
   valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x605 and fm2 == 0x9680127e0bb6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6059680127e0bb6b; 
   valaddr_reg:x3; val_offset:926*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 926*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x608 and fm2 == 0xfc20171d8ea46 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x608fc20171d8ea46; 
   valaddr_reg:x3; val_offset:928*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 928*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x60c and fm2 == 0x3d940e727926c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x60c3d940e727926c; 
   valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x60f and fm2 == 0x8cf9120f17707 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x60f8cf9120f17707; 
   valaddr_reg:x3; val_offset:932*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 932*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x612 and fm2 == 0xf0375692dd4c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x612f0375692dd4c8; 
   valaddr_reg:x3; val_offset:934*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 934*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x616 and fm2 == 0x3622961bca4fd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6163622961bca4fd; 
   valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x619 and fm2 == 0x83ab3ba2bce3d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x61983ab3ba2bce3d; 
   valaddr_reg:x3; val_offset:938*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 938*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x61c and fm2 == 0xe4960a8b6c1cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x61ce4960a8b6c1cc; 
   valaddr_reg:x3; val_offset:940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 940*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x620 and fm2 == 0x2eddc6972391f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6202eddc6972391f; 
   valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x623 and fm2 == 0x7a95383cec767 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6237a95383cec767; 
   valaddr_reg:x3; val_offset:944*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 944*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x626 and fm2 == 0xd93a864c27941 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x626d93a864c27941; 
   valaddr_reg:x3; val_offset:946*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 946*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x62a and fm2 == 0x27c493ef98bc9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x62a27c493ef98bc9; 
   valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x62d and fm2 == 0x71b5b8eb7eebb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x62d71b5b8eb7eebb; 
   valaddr_reg:x3; val_offset:950*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 950*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x630 and fm2 == 0xce2327265ea69 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x630ce2327265ea69; 
   valaddr_reg:x3; val_offset:952*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 952*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x634 and fm2 == 0x20d5f877fb282 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x63420d5f877fb282; 
   valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x637 and fm2 == 0x690b7695f9f22 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x637690b7695f9f22; 
   valaddr_reg:x3; val_offset:956*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 956*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x63a and fm2 == 0xc34e543b786eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x63ac34e543b786eb; 
   valaddr_reg:x3; val_offset:958*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 958*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x63e and fm2 == 0x1a10f4a52b453 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x63e1a10f4a52b453; 
   valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x641 and fm2 == 0x609531ce76168 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x641609531ce76168; 
   valaddr_reg:x3; val_offset:962*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 962*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x644 and fm2 == 0xb8ba7e42139c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x644b8ba7e42139c1; 
   valaddr_reg:x3; val_offset:964*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 964*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x648 and fm2 == 0x13748ee94c419 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x64813748ee94c419; 
   valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x64b and fm2 == 0x5851b2a39f51f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x64b5851b2a39f51f; 
   valaddr_reg:x3; val_offset:968*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 968*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x64e and fm2 == 0xae661f4c87267 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x64eae661f4c87267; 
   valaddr_reg:x3; val_offset:970*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 970*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x652 and fm2 == 0x0cffd38fd4780 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6520cffd38fd4780; 
   valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x655 and fm2 == 0x503fc873c9960 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x655503fc873c9960; 
   valaddr_reg:x3; val_offset:974*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 974*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x658 and fm2 == 0xa44fba90bbfb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x658a44fba90bbfb8; 
   valaddr_reg:x3; val_offset:976*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 976*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x65c and fm2 == 0x06b1d49a757d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x65c06b1d49a757d3; 
   valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x65f and fm2 == 0x485e49c112dc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x65f485e49c112dc8; 
   valaddr_reg:x3; val_offset:980*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 980*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x662 and fm2 == 0x9a75dc315793a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6629a75dc315793a; 
   valaddr_reg:x3; val_offset:982*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 982*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x666 and fm2 == 0x0089a99ed6bc4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6660089a99ed6bc4; 
   valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x669 and fm2 == 0x40ac14068c6b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x66940ac14068c6b5; 
   valaddr_reg:x3; val_offset:986*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 986*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x66c and fm2 == 0x90d719082f863 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x66c90d719082f863; 
   valaddr_reg:x3; val_offset:988*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 988*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x66f and fm2 == 0xf50cdf4a3b67b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x66ff50cdf4a3b67b; 
   valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x673 and fm2 == 0x39280b8e6520d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x67339280b8e6520d; 
   valaddr_reg:x3; val_offset:992*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 992*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x676 and fm2 == 0x87720e71fe690 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x67687720e71fe690; 
   valaddr_reg:x3; val_offset:994*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 994*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x679 and fm2 == 0xe94e920e7e035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x679e94e920e7e035; 
   valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x67d and fm2 == 0x31d11b490ec21 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x67d31d11b490ec21; 
   valaddr_reg:x3; val_offset:998*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 998*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x680 and fm2 == 0x7e45621b52729 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6807e45621b52729; 
   valaddr_reg:x3; val_offset:1000*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1000*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x683 and fm2 == 0xddd6baa2270f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x683ddd6baa2270f3; 
   valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x687 and fm2 == 0x2aa634a558698 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6872aa634a558698; 
   valaddr_reg:x3; val_offset:1004*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1004*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x68a and fm2 == 0x754fc1ceae83e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x68a754fc1ceae83e; 
   valaddr_reg:x3; val_offset:1006*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1006*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x68d and fm2 == 0xd2a3b2425a24e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x68dd2a3b2425a24e; 
   valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x691 and fm2 == 0x23a64f6978571 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x69123a64f6978571; 
   valaddr_reg:x3; val_offset:1010*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1010*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x694 and fm2 == 0x6c8fe343d66cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6946c8fe343d66cd; 
   valaddr_reg:x3; val_offset:1012*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1012*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x697 and fm2 == 0xc7b3dc14cc080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x697c7b3dc14cc080; 
   valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x69b and fm2 == 0x1cd0698cff850 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x69b1cd0698cff850; 
   valaddr_reg:x3; val_offset:1016*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1016*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x69e and fm2 == 0x640483f03f664 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x69e640483f03f664; 
   valaddr_reg:x3; val_offset:1018*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1018*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6a1 and fm2 == 0xbd05a4ec4f3fd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6a1bd05a4ec4f3fd; 
   valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6a5 and fm2 == 0x16238713b187e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6a516238713b187e; 
   valaddr_reg:x3; val_offset:1022*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1022*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6a8 and fm2 == 0x5bac68d89de9e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6a85bac68d89de9e; 
   valaddr_reg:x3; val_offset:1024*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1024*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6ab and fm2 == 0xb297830ec5645 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6abb297830ec5645; 
   valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6af and fm2 == 0x0f9eb1e93b5eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6af0f9eb1e93b5eb; 
   valaddr_reg:x3; val_offset:1028*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1028*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6b2 and fm2 == 0x53865e638a366 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6b253865e638a366; 
   valaddr_reg:x3; val_offset:1030*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1030*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6b5 and fm2 == 0xa867f5fc6cc3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6b5a867f5fc6cc3f; 
   valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6b9 and fm2 == 0x0940f9bdc3fa8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6b90940f9bdc3fa8; 
   valaddr_reg:x3; val_offset:1034*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1034*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6bc and fm2 == 0x4b91382d34f91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6bc4b91382d34f91; 
   valaddr_reg:x3; val_offset:1036*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1036*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6bf and fm2 == 0x9e75863882376 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6bf9e75863882376; 
   valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6c3 and fm2 == 0x030973e35162a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6c3030973e35162a; 
   valaddr_reg:x3; val_offset:1040*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1040*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6c6 and fm2 == 0x43cbd0dc25bb4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6c643cbd0dc25bb4; 
   valaddr_reg:x3; val_offset:1042*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1042*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6c9 and fm2 == 0x94bec5132f2a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6c994bec5132f2a1; 
   valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6cc and fm2 == 0xf9ee7657faf49 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6ccf9ee7657faf49; 
   valaddr_reg:x3; val_offset:1046*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1046*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6d0 and fm2 == 0x3c3509f6fcd8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6d03c3509f6fcd8e; 
   valaddr_reg:x3; val_offset:1048*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1048*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6d3 and fm2 == 0x8b424c74bc0f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6d38b424c74bc0f1; 
   valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6d6 and fm2 == 0xee12df91eb12e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6d6ee12df91eb12e; 
   valaddr_reg:x3; val_offset:1052*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1052*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6da and fm2 == 0x34cbcbbb32ebc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6da34cbcbbb32ebc; 
   valaddr_reg:x3; val_offset:1054*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1054*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6dd and fm2 == 0x81febea9ffa6c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6dd81febea9ffa6c; 
   valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6e0 and fm2 == 0xe27e6e547f907 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6e0e27e6e547f907; 
   valaddr_reg:x3; val_offset:1058*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1058*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6e4 and fm2 == 0x2d8f04f4cfba4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6e42d8f04f4cfba4; 
   valaddr_reg:x3; val_offset:1060*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1060*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6e7 and fm2 == 0x78f2c63203a8d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6e778f2c63203a8d; 
   valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6ea and fm2 == 0xd72f77be84930 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6ead72f77be84930; 
   valaddr_reg:x3; val_offset:1064*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1064*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6ee and fm2 == 0x267daad712dbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6ee267daad712dbe; 
   valaddr_reg:x3; val_offset:1066*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1066*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6f1 and fm2 == 0x701d158cd792e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6f1701d158cd792e; 
   valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6f4 and fm2 == 0xcc245af00d779 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6f4cc245af00d779; 
   valaddr_reg:x3; val_offset:1070*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1070*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6f8 and fm2 == 0x1f96b8d6086ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6f81f96b8d6086ac; 
   valaddr_reg:x3; val_offset:1072*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1072*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6fb and fm2 == 0x677c670b8a857 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6fb677c670b8a857; 
   valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x6fe and fm2 == 0xc15b80ce6d26c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6fec15b80ce6d26c; 
   valaddr_reg:x3; val_offset:1076*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1076*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x702 and fm2 == 0x18d9308104384 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x70218d9308104384; 
   valaddr_reg:x3; val_offset:1078*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1078*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x705 and fm2 == 0x5f0f7ca145465 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7055f0f7ca145465; 
   valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x708 and fm2 == 0xb6d35bc99697e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x708b6d35bc99697e; 
   valaddr_reg:x3; val_offset:1082*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1082*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x70c and fm2 == 0x1244195dfe1ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x70c1244195dfe1ef; 
   valaddr_reg:x3; val_offset:1084*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1084*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x70f and fm2 == 0x56d51fb57da6a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x70f56d51fb57da6a; 
   valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x712 and fm2 == 0xac8a67a2dd105 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x712ac8a67a2dd105; 
   valaddr_reg:x3; val_offset:1088*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1088*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x716 and fm2 == 0x0bd680c5ca2a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7160bd680c5ca2a3; 
   valaddr_reg:x3; val_offset:1090*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1090*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x719 and fm2 == 0x4ecc20f73cb4c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7194ecc20f73cb4c; 
   valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x71c and fm2 == 0xa27f29350be1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x71ca27f29350be1f; 
   valaddr_reg:x3; val_offset:1094*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1094*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x720 and fm2 == 0x058f79c1276d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x720058f79c1276d3; 
   valaddr_reg:x3; val_offset:1096*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1096*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x723 and fm2 == 0x46f3583171488 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x72346f3583171488; 
   valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x726 and fm2 == 0x98b02e3dcd9aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x72698b02e3dcd9aa; 
   valaddr_reg:x3; val_offset:1100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1100*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x729 and fm2 == 0xfedc39cd41015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x729fedc39cd41015; 
   valaddr_reg:x3; val_offset:1102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1102*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x72d and fm2 == 0x3f49a42048a0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x72d3f49a42048a0d; 
   valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x730 and fm2 == 0x8f1c0d285ac90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7308f1c0d285ac90; 
   valaddr_reg:x3; val_offset:1106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1106*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x733 and fm2 == 0xf2e31072717b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x733f2e31072717b4; 
   valaddr_reg:x3; val_offset:1108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1108*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x737 and fm2 == 0x37cdea4786ed1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x73737cdea4786ed1; 
   valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x73a and fm2 == 0x85c164d968a85 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x73a85c164d968a85; 
   valaddr_reg:x3; val_offset:1112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1112*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x73d and fm2 == 0xe731be0fc2d26 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x73de731be0fc2d26; 
   valaddr_reg:x3; val_offset:1114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1114*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x741 and fm2 == 0x307f16c9d9c38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x741307f16c9d9c38; 
   valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x744 and fm2 == 0x7c9edc7c50346 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7447c9edc7c50346; 
   valaddr_reg:x3; val_offset:1118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1118*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x747 and fm2 == 0xdbc6939b64417 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x747dbc6939b64417; 
   valaddr_reg:x3; val_offset:1120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1120*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x74b and fm2 == 0x295c1c411ea8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x74b295c1c411ea8e; 
   valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x74e and fm2 == 0x73b3235166532 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x74e73b3235166532; 
   valaddr_reg:x3; val_offset:1124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1124*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x751 and fm2 == 0xd09fec25bfe7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x751d09fec25bfe7e; 
   valaddr_reg:x3; val_offset:1126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1126*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x755 and fm2 == 0x2263f39797f0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7552263f39797f0f; 
   valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x758 and fm2 == 0x6afcf07d7ded3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7586afcf07d7ded3; 
   valaddr_reg:x3; val_offset:1130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1130*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x75b and fm2 == 0xc5bc2c9cdd687 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x75bc5bc2c9cdd687; 
   valaddr_reg:x3; val_offset:1132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1132*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x75f and fm2 == 0x1b959be20a615 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x75f1b959be20a615; 
   valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x762 and fm2 == 0x627b02da8cf9a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x762627b02da8cf9a; 
   valaddr_reg:x3; val_offset:1136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1136*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x765 and fm2 == 0xbb19c39130380 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x765bb19c39130380; 
   valaddr_reg:x3; val_offset:1138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1138*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x769 and fm2 == 0x14f01a3abe230 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x76914f01a3abe230; 
   valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x76c and fm2 == 0x5a2c20c96dabc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x76c5a2c20c96dabc; 
   valaddr_reg:x3; val_offset:1142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1142*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x76f and fm2 == 0xb0b728fbc916b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x76fb0b728fbc916b; 
   valaddr_reg:x3; val_offset:1144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1144*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x773 and fm2 == 0x0e72799d5dae3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7730e72799d5dae3; 
   valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x776 and fm2 == 0x520f1804b519c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x776520f1804b519c; 
   valaddr_reg:x3; val_offset:1148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1148*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x779 and fm2 == 0xa692de05e2603 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x779a692de05e2603; 
   valaddr_reg:x3; val_offset:1150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1150*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x77d and fm2 == 0x081bcac3ad7c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x77d081bcac3ad7c2; 
   valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x780 and fm2 == 0x4a22bd7498db2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7804a22bd7498db2; 
   valaddr_reg:x3; val_offset:1154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1154*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x783 and fm2 == 0x9cab6cd1bf11f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7839cab6cd1bf11f; 
   valaddr_reg:x3; val_offset:1156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1156*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x787 and fm2 == 0x01eb2403176b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x78701eb2403176b3; 
   valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x78a and fm2 == 0x4265ed03dd460 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x78a4265ed03dd460; 
   valaddr_reg:x3; val_offset:1160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1160*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x78d and fm2 == 0x92ff6844d4978 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x78d92ff6844d4978; 
   valaddr_reg:x3; val_offset:1162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1162*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x790 and fm2 == 0xf7bf425609bd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x790f7bf425609bd6; 
   valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x794 and fm2 == 0x3ad78975c6166 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7943ad78975c6166; 
   valaddr_reg:x3; val_offset:1166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1166*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x797 and fm2 == 0x898d6bd3379bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x797898d6bd3379bf; 
   valaddr_reg:x3; val_offset:1168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1168*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x79a and fm2 == 0xebf0c6c80582f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x79aebf0c6c80582f; 
   valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x79e and fm2 == 0x33767c3d0371d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x79e33767c3d0371d; 
   valaddr_reg:x3; val_offset:1172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1172*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7a1 and fm2 == 0x80541b4c444e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7a180541b4c444e5; 
   valaddr_reg:x3; val_offset:1174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1174*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7a4 and fm2 == 0xe069221f5561e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7a4e069221f5561e; 
   valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7a8 and fm2 == 0x2c41b553955d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7a82c41b553955d3; 
   valaddr_reg:x3; val_offset:1178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1178*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7ab and fm2 == 0x775222a87ab47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7ab775222a87ab47; 
   valaddr_reg:x3; val_offset:1180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1180*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7ae and fm2 == 0xd526ab5299619 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7aed526ab5299619; 
   valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7b2 and fm2 == 0x25382b139fdd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7b225382b139fdd0; 
   valaddr_reg:x3; val_offset:1184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1184*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7b5 and fm2 == 0x6e8635d887d44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7b56e8635d887d44; 
   valaddr_reg:x3; val_offset:1186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1186*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7b8 and fm2 == 0xca27c34ea9c95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7b8ca27c34ea9c95; 
   valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7bc and fm2 == 0x1e58da112a1dd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7bc1e58da112a1dd; 
   valaddr_reg:x3; val_offset:1190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1190*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7bf and fm2 == 0x65ef109574a54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7bf65ef109574a54; 
   valaddr_reg:x3; val_offset:1192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1192*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7c2 and fm2 == 0xbf6ad4bad1ce9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7c2bf6ad4bad1ce9; 
   valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7c6 and fm2 == 0x17a2c4f4c3212 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7c617a2c4f4c3212; 
   valaddr_reg:x3; val_offset:1196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1196*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7c9 and fm2 == 0x5d8b7631f3e96 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7c95d8b7631f3e96; 
   valaddr_reg:x3; val_offset:1198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1198*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7cc and fm2 == 0xb4ee53be70e3c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7ccb4ee53be70e3c; 
   valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7d0 and fm2 == 0x1114f457068e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7d01114f457068e5; 
   valaddr_reg:x3; val_offset:1202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1202*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7d3 and fm2 == 0x555a316cc831f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7d3555a316cc831f; 
   valaddr_reg:x3; val_offset:1204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1204*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7d6 and fm2 == 0xaab0bdc7fa3e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7d6aab0bdc7fa3e6; 
   valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7da and fm2 == 0x0aae769cfc670 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7da0aae769cfc670; 
   valaddr_reg:x3; val_offset:1208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1208*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7dd and fm2 == 0x4d5a14443b80c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7dd4d5a14443b80c; 
   valaddr_reg:x3; val_offset:1210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1210*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7e0 and fm2 == 0xa0b099554a60f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7e0a0b099554a60f; 
   valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7e4 and fm2 == 0x046e5fd54e7c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7e4046e5fd54e7c9; 
   valaddr_reg:x3; val_offset:1214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1214*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7e7 and fm2 == 0x4589f7caa21bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7e74589f7caa21bc; 
   valaddr_reg:x3; val_offset:1216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1216*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7ea and fm2 == 0x96ec75bd4aa2b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7ea96ec75bd4aa2b; 
   valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7ed and fm2 == 0xfca7932c9d4b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7edfca7932c9d4b5; 
   valaddr_reg:x3; val_offset:1220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1220*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7f1 and fm2 == 0x3de8bbfbe24f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7f13de8bbfbe24f1; 
   valaddr_reg:x3; val_offset:1222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1222*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7f4 and fm2 == 0x8d62eafadae2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7f48d62eafadae2e; 
   valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x7f7 and fm2 == 0xf0bba5b9919b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x7f7f0bba5b9919b9; 
   valaddr_reg:x3; val_offset:1226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1226*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x003 and fm2 == 0x87eac54632b72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x387eac54632b72; 
   valaddr_reg:x3; val_offset:1228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1228*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x006 and fm2 == 0xe9e57697bf64f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x6e9e57697bf64f; 
   valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x00a and fm2 == 0x322f6a1ed79f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0xa322f6a1ed79f1; 
   valaddr_reg:x3; val_offset:1232*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1232*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x7f4 and fm1 == 0xbab861e3ffdaf and fs2 == 0 and fe2 == 0x010 and fm2 == 0xde6a15d030e89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f4bab861e3ffdaf; op2val:0x10de6a15d030e89; 
   valaddr_reg:x3; val_offset:1234*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1234*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(31136345707247183,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(60776279567816814,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(75970349459771017,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(90828614825797910,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(105654469184349019,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(120809087412010034,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(135741324648586655,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(150536357394408711,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(165652448606158409,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(180656923997568749,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(195421857512210089,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(210500324684983891,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(225575345149474036,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(240310884883665457,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(255352609830876861,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(270496521968296502,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(285203356838767300,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(300209200706327925,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(315420389868092777,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(330099192645086403,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(345069996395800564,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(360346885776652536,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(374998313462359862,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(389934898348966148,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(405227929736696133,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(419900642298143435,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(434803810325269374,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(450055070638648926,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(464806103964503290,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(479676638339792953,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(494887106588377159,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(509714625035722797,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(524553290610391096,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(539723922858198598,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(554626133807000556,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(569433677506062054,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(584565407409361056,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(599540560254116452,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(614317711496530685,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(629411450829020604,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(644457835994043030,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(659205307103012667,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(674261946268696842,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(689377894246480038,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(704096380850132688,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(719116789384170628,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(734300669796290514,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(748990851218969543,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(763975878276790457,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(779226098956817267,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(793888638601201744,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(808839113436154468,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(824149507259317501,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(838789665254327838,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(853706397684135846,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(868974613500867983,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(883693855257936250,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(898577636120220120,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(913804662477547086,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(928601134471000049,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(943452736068123629,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(958639538344000232,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(973511430490172625,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(988331607023663109,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1003479127969998343,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1018424672609060804,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1033214160603847093,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1048323320876802083,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1063340791778452502,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1078100310497160475,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1093172009175017570,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1108259720567476541,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1122989972415014284,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1138025087503908591,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1153181393125672790,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1167883064044333355,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1182882452972131190,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1198105745145951274,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1212779505001255220,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1227744005099857281,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1243032713828419441,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1257679216785914189,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1272609645762254752,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1287894982262152584,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1302582122738285173,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1317479279134292242,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1332723024908773207,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1347488147995062422,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1362352811636837564,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1377555941468528619,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1392397219447548915,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1407230151884019439,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1422393617709079723,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1437309265700532715,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1452111210631822950,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1467235942075407871,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1482224217032127168,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1496995900727889775,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1512082805627065163,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1527142005354552335,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1541884137062494995,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1556934101976895448,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1572062564175835623,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1586775836520672864,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1601789727231191545,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1616985828562410043,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1631670917935464650,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1646649579931255037,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1661911735102589086,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1676569302042262213,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1691513560996325751,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1706816184968377300,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1721470911434221669,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1736381573667848830,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1751642201739354909,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1766375670518722034,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1781253523455048047,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1796473139904927691,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1811283505474844383,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1826129318081774742,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1841308884119909820,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1856194344211847574,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1871008867434602491,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1886149321742518266,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1901108116328617212,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1915892083512138299,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1930994342771011786,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1946024753074065022,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1960778880375521822,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1975843839781814949,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(1990944187308456359,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2005669174100084753,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2020697707869092373,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2035866353465644109,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2050562882728143201,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2065555844585739193,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2080791187516187731,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2095459926222896488,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2110418149885754562,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2125718626931336697,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2140360226423406456,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2155284526067965782,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2170562200903137067,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2185263707000631931,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2200154877721071386,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2215391141401092832,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2230170293414493644,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2245029111669972287,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2260224934768792719,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2275079912871945433,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2289907136923360784,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2305063467267102100,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2319992494286028156,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2334788864622537947,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2349906627822647314,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2364907968235883275,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2379674207991430606,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2394754307965336898,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2409826266927703625,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2424563082287779803,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2439606401767347154,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2454747324156599395,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2469455404755473276,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2484462805783537755,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2499671075269357881,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2514351094577995143,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2529323418993263849,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2544597457128076050,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2559250072832966614,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2574188142743551948,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2589483030411255743,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2604152262447752151,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2619056880693607629,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2634309953780399104,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2649057588156106112,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2663929538760623840,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2679141777295743128,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2693965976455835487,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2708806025066859319,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2723978386110111237,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2738877355567454915,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2753686249887957364,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2768819668068057552,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2783791655393810722,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2798570125602475883,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2813665513642779462,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2828708807480651275,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2843457566642600334,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2858515815874508786,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2873628744978121463,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2888348489446011829,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2903370470310346914,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2918551402603159653,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2933242812408883327,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2948229374945510046,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2963476716602775971,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2978140455839977484,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(2993092430165951503,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3008404624718191241,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3023041341915820332,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3037959538692328822,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3053229584942436564,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3067945394636925572,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3082830605525284134,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3098059419415204463,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3112852539785044869,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3127705537892007015,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3142894085805181824,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3157762704881420080,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3172584245194049788,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3187733470864309051,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3202675819146013957,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3217466638956365894,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3232577463998777944,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3247591813457696375,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3262352632777542677,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3277425957206822682,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3292510620315363696,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3307242142281200588,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3322278845017968831,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3337432173799969400,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3352135085068531477,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3367136024433706203,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3382356409537444617,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3397031380671949259,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3411997394869552190,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3427283264662487719,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3441930950509826896,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3456862858098472996,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3472150042863752749,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3486833717842294236,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3501732318195630931,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3516977868916773928,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3531739607728071833,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3546605681484426687,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3561810573959342383,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3576648546982316478,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3591482856483806253,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3606648043640140600,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3621560464135454723,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3636363753856802820,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3651490166287960069,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3666475289392981251,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3681248286360284740,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3696336832848886229,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3711392954596199461,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3726136368795881262,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3741187936824955642,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3756313393183882204,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3771027917962058451,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3786043374214250888,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3801236540154831093,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3815922852607318322,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3830903043452399487,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3846162332031313327,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3860821093384494875,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3875766845355443938,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3891071335598602394,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3905722562806121312,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3920634683064050745,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3935897133665934663,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3950627185200843340,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3965506461989027039,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3980727858253728791,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(3995534886670854030,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4010382089758114162,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4025563393896661454,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4040445595050326305,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4055261476164028265,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4070403627835627844,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4085359239864819658,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4100144533113718717,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4115248449954314668,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4130275752291638284,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4145031174578815758,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4160097752717259730,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4175195065121118307,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4189921316547239548,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4204951431109363227,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4220117112718822353,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4234814876975943365,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4249809382576816758,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4265041830988620170,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4279711775744764397,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4294671506969416808,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4309969157336634561,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4324611934611356145,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4339537706484230253,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4354817221604795017,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4369515277167177109,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4384407885610580219,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4399645946444306233,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4414421728794510980,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4429281951076321317,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4444479529208056366,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4459331216624494173,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4474159811795374068,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4489317856038446065,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4504243669496127095,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4519041378816488980,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4534160815746413465,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4549159017916246080,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4563926565273211472,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4579008299748890340,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4594077194020433486,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4608815286335019490,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4623860202007724122,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4638998131534843960,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4653707459159606343,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4668716418970031448,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4683921765738925399,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4698603002846281901,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4713576849509949656,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4728848033429013639,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4743501838390465961,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4758441394871753491,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4773738140752835032,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4788403888639248167,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4803309958614305009,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4818564846362598189,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4833309078247989500,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4848182446556805435,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4863396457222297482,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4878217333637940918,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4893058766725818468,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4908232858365137533,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4923128582954855310,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4937938829303535217,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4953073937518857230,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4968042756028569481,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4982822546577251691,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(4997919585042576581,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5012959784333533435,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5027709832890030394,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5042769693865123721,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5057879600950264757,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5072600604592518307,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5087624159424807371,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5102802140527706399,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5117494779995894119,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5132482879610600897,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5147727339246466712,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5162392279325918271,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5177345754704704846,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5192655134782921041,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5207293024678059941,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5222212687326455694,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5237484565916422514,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5252196939973675751,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5267083582377549217,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5282314185661863177,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5297103950917215526,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5311958346988547695,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5327148642357185035,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5342013984954431047,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5356836890466640857,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5371987822636375247,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5386926971231564289,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5401719124244631170,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5416831615790436898,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5431842840555492181,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5446604961831114795,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5461679913705115189,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5476761525354805473,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5491494318761830170,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5506532610800083168,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5521682959641799820,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5536387112552146863,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5551389603969552795,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5566607078975357697,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5581283262650667969,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5596250792524277937,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5611533820424700271,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5626182690393919946,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5641116078134916669,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5656405113090634700,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5671085318962104416,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5685985364776721015,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5701232722324463893,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5715991073335887021,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5730858558675523033,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5746065215629540175,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5760899880254199057,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5775735568254986838,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5790902478535443691,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5805811668173028115,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5820616304085096920,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5835744399254655053,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5850726367225174576,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5865500678831853757,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5880590868619674860,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5895643909180951315,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5910388607208148440,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5925441780021616974,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5940564227409804497,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5955280005925788677,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5970297029350241030,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(5985487256842833892,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6000174793648649181,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6015156514935390420,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6030412933936191621,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6045072890946920102,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6060020137489802831,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6075326495947878371,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6089974220252427758,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6104887800053261161,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6120152075083775044,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6134878705815002538,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6149759407938053397,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6164982585871339098,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6179786273659869432,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6194634868675710774,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6209817912724984580,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6224696851546037218,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6239514091964994267,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6254657942768162706,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6269610368925662907,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6284396989621100138,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6299502565769868804,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6314526756904368579,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6329283475526055987,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6344351674082637376,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6359445948202488296,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6374173465580279394,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6389205162581990395,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6404367877117223293,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6419066877655271900,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6434062928607304787,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6449292479485684148,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6463963631547421729,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6478924871904065833,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6494219692648799162,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6508863648932889256,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6523790894567474002,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6539072251890177063,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6553766853323549848,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6568660900987373502,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6583900760846625198,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6598673170023969293,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6613534797794471568,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6628734132787071540,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6643582526089387616,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6658412493807818232,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6673572253735328630,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6688494850284687658,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6703293899983517044,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6718415012386525906,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6733410073044325315,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6748178929364637876,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6763262300044500705,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6778328126433198924,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6793067497032303648,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6808114010560656679,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6823248944108435769,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6837959520057923463,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6852970040274255208,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6868172461282074209,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6882854917456545274,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6897830287954106232,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6913098614684620459,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6927753610141301846,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6942694654741625707,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6957993260771502662,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6972655520878924396,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(6987563044095227655,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7002819748395078856,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7017560574246298877,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7032435361736019517,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7047651146377642444,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7062468696588040479,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7077311515594770279,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7092487339632654657,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7107379815975062473,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7122191415760121531,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7137328215770917481,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7152293862164116098,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7167074974428012322,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7182173665037354731,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7197210766558278739,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7211962105852289384,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7227023580249274817,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7242130462168368153,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7256852726296474911,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7271877856736080487,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7287052883575261056,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7301746753986664800,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7316736392280391608,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7331977966893094867,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7346644109065530824,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7361599087060547898,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7376905649733331908,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7391544713547400885,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7406465843594459235,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7421739556432754299,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7436448491274392077,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7451336566684771984,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7466568961227218997,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7481355367873571873,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7496211163365320489,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7511403208009478387,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7526265270715123352,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7541089542848833598,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7556242183295443534,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7571178128871490929,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7585971616475866829,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7601085776260808832,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7616093873077483600,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7630857297664931428,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7645933878678713341,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7661012435691313278,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7675746501863792286,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7690786384858863173,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7705933750656546283,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7720639146501907302,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7735643191588080703,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7750857753464946600,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7765535150943981457,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7780504198072247158,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7795784381120189994,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7810434436444609460,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7825369305879605921,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7840660192952823625,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7855336926103981454,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7870238418885394673,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7885487585141633326,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7900242544824626876,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7915111443217775212,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7930319866488682759,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7945151219269172132,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7959988287205030541,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7975156922404325680,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(7990062877819088318,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8004868861323999534,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8019998640984610681,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8034977450534405804,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8049753078149720151,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8064844912948335212,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8079894869114372996,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8094640852306252901,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8109695631575574910,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8124815066859037167,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8139532100418656874,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8154550692647653637,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8169737978631725731,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8184426741066091340,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8199409994388520479,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8214663540822406867,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8229324694736016520,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8244273437407500714,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8259581666026328085,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8274225883779467789,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8289140924643388560,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8304407026002761652,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8319130232367378129,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8334012361309850245,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8349237322767412518,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8364037666447924280,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8378887654842106694,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8394072440614306839,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8408948113704872590,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8423766714844865842,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8438912266549329534,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8453861503516901135,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8468649453041475283,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8483756690226665095,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8498777766917875221,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8513535783224266650,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8528605603886728064,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8543696836558053936,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8558425621206063804,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8573458902295548267,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8588618646666205923,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8603318884772827548,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8618316482685576707,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8633543133012613058,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8648215493637410226,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8663178244697878815,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8678470232872941235,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8693115369394394208,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8708044090325682552,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8723327291769265110,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8738018435475988838,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8752913923859249599,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8768155584617797679,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8782924617108961053,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8797787651832038629,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8812988745515357726,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8827833841272575443,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8842665182968130375,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8857826660367046169,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8872746036657520080,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8887546428130884932,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8902669217752063125,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8917661133625795037,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8932431300272802388,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8947516308861033705,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8962579064171541010,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8977319714386558614,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(8992367827434802748,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9007499761882786021,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9022211587457188639,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9037223669704664038,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9052423161904088688,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9067106838415390732,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9082083734333990415,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9097349200900057033,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9112005388091924924,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9126947922361231915,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9142248390477337781,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9156907159173080305,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9171816137144249902,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(9187074659887684025,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(15901877311056754,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(31136345707247183,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(45918863877831153,64,FLEN)
NAN_BOXED(9172613658591624623,64,FLEN)
NAN_BOXED(75970349459771017,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 212*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
