
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:04:18 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fadd.d_b3 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fadd.d_b3)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==f1, rs2==f1, rd==f1,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xf8c6f685f5fff and fs2 == 1 and fe2 == 0x7f2 and fm2 == 0xf8c6f685f5fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f1; op2:f1; dest:f1; op1val:0x7f2f8c6f685f5fff; op2val:0x7f2f8c6f685f5fff; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f1, f1, f1, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs2 == rd != rs1, rs1==f12, rs2==f18, rd==f18,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xf8c6f685f5fff and fs2 == 1 and fe2 == 0x7f2 and fm2 == 0xf8c6f685f5fff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f12; op2:f18; dest:f18; op1val:0x7f2f8c6f685f5fff; op2val:0xff2f8c6f685f5fff; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f18, f12, f18, dyn, 32, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==f2, rs2==f2, rd==f29,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xf8c6f685f5fff and fs2 == 1 and fe2 == 0x7f2 and fm2 == 0xf8c6f685f5fff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f2; op2:f2; dest:f29; op1val:0x7f2f8c6f685f5fff; op2val:0x7f2f8c6f685f5fff; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f29, f2, f2, dyn, 64, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f9, rs2==f25, rd==f23,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xf8c6f685f5fff and fs2 == 1 and fe2 == 0x7f2 and fm2 == 0xf8c6f685f5fff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f9; op2:f25; dest:f23; op1val:0x7f2f8c6f685f5fff; op2val:0xff2f8c6f685f5fff; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f23, f9, f25, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2, rs1==f19, rs2==f0, rd==f19,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xf8c6f685f5fff and fs2 == 1 and fe2 == 0x7f2 and fm2 == 0xf8c6f685f5fff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f19; op2:f0; dest:f19; op1val:0x7f2f8c6f685f5fff; op2val:0xff2f8c6f685f5fff; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f19, f19, f0, dyn, 128, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f6, rs2==f4, rd==f27,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x2b954e52a4bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x2b954e52a4bff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f6; op2:f4; dest:f27; op1val:0x7f52b954e52a4bff; op2val:0xff52b954e52a4bff; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f27, f6, f4, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f27, rs2==f20, rd==f3,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x2b954e52a4bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x2b954e52a4bff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f27; op2:f20; dest:f3; op1val:0x7f52b954e52a4bff; op2val:0xff52b954e52a4bff; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f3, f27, f20, dyn, 32, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f26, rs2==f21, rd==f8,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x2b954e52a4bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x2b954e52a4bff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f26; op2:f21; dest:f8; op1val:0x7f52b954e52a4bff; op2val:0xff52b954e52a4bff; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f8, f26, f21, dyn, 64, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f21, rs2==f11, rd==f20,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x2b954e52a4bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x2b954e52a4bff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f21; op2:f11; dest:f20; op1val:0x7f52b954e52a4bff; op2val:0xff52b954e52a4bff; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f20, f21, f11, dyn, 96, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f7, rs2==f5, rd==f12,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x2b954e52a4bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x2b954e52a4bff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f7; op2:f5; dest:f12; op1val:0x7f52b954e52a4bff; op2val:0xff52b954e52a4bff; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f12, f7, f5, dyn, 128, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f22, rs2==f6, rd==f30,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x8f90cc1b18bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x8f90cc1b18bff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f22; op2:f6; dest:f30; op1val:0x7f58f90cc1b18bff; op2val:0xff58f90cc1b18bff; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f30, f22, f6, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f20, rs2==f3, rd==f28,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x8f90cc1b18bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x8f90cc1b18bff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f20; op2:f3; dest:f28; op1val:0x7f58f90cc1b18bff; op2val:0xff58f90cc1b18bff; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f28, f20, f3, dyn, 32, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f28, rs2==f13, rd==f26,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x8f90cc1b18bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x8f90cc1b18bff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f28; op2:f13; dest:f26; op1val:0x7f58f90cc1b18bff; op2val:0xff58f90cc1b18bff; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f26, f28, f13, dyn, 64, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f29, rs2==f16, rd==f0,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x8f90cc1b18bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x8f90cc1b18bff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f29; op2:f16; dest:f0; op1val:0x7f58f90cc1b18bff; op2val:0xff58f90cc1b18bff; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f0, f29, f16, dyn, 96, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f30, rs2==f19, rd==f9,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x8f90cc1b18bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x8f90cc1b18bff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f19; dest:f9; op1val:0x7f58f90cc1b18bff; op2val:0xff58f90cc1b18bff; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f9, f30, f19, dyn, 128, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f15, rs2==f30, rd==f21,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x01430191b8abf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x01430191b8abf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f15; op2:f30; dest:f21; op1val:0x7f801430191b8abf; op2val:0xff801430191b8abf; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f21, f15, f30, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f23, rs2==f14, rd==f10,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x01430191b8abf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x01430191b8abf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f23; op2:f14; dest:f10; op1val:0x7f801430191b8abf; op2val:0xff801430191b8abf; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f10, f23, f14, dyn, 32, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f5, rs2==f15, rd==f31,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x01430191b8abf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x01430191b8abf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f5; op2:f15; dest:f31; op1val:0x7f801430191b8abf; op2val:0xff801430191b8abf; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f5, f15, dyn, 64, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f14, rs2==f31, rd==f15,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x01430191b8abf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x01430191b8abf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f14; op2:f31; dest:f15; op1val:0x7f801430191b8abf; op2val:0xff801430191b8abf; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f15, f14, f31, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f8, rs2==f29, rd==f22,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x01430191b8abf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x01430191b8abf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f8; op2:f29; dest:f22; op1val:0x7f801430191b8abf; op2val:0xff801430191b8abf; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f22, f8, f29, dyn, 128, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f10, rs2==f24, rd==f6,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x238a22371e9ff and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x238a22371e9ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f10; op2:f24; dest:f6; op1val:0x7f8238a22371e9ff; op2val:0xff8238a22371e9ff; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f6, f10, f24, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f18, rs2==f26, rd==f5,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x238a22371e9ff and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x238a22371e9ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f18; op2:f26; dest:f5; op1val:0x7f8238a22371e9ff; op2val:0xff8238a22371e9ff; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f5, f18, f26, dyn, 32, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f4, rs2==f10, rd==f2,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x238a22371e9ff and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x238a22371e9ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f4; op2:f10; dest:f2; op1val:0x7f8238a22371e9ff; op2val:0xff8238a22371e9ff; 
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f2, f4, f10, dyn, 64, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f17, rs2==f23, rd==f13,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x238a22371e9ff and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x238a22371e9ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f17; op2:f23; dest:f13; op1val:0x7f8238a22371e9ff; op2val:0xff8238a22371e9ff; 
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f13, f17, f23, dyn, 96, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f0, rs2==f27, rd==f11,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x238a22371e9ff and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x238a22371e9ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f0; op2:f27; dest:f11; op1val:0x7f8238a22371e9ff; op2val:0xff8238a22371e9ff; 
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f11, f0, f27, dyn, 128, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f24, rs2==f9, rd==f17,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xf4dd0c2472fbf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xf4dd0c2472fbf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f24; op2:f9; dest:f17; op1val:0x7f8f4dd0c2472fbf; op2val:0xff8f4dd0c2472fbf; 
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f17, f24, f9, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f11, rs2==f7, rd==f4,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xf4dd0c2472fbf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xf4dd0c2472fbf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f11; op2:f7; dest:f4; op1val:0x7f8f4dd0c2472fbf; op2val:0xff8f4dd0c2472fbf; 
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f4, f11, f7, dyn, 32, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f3, rs2==f12, rd==f25,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xf4dd0c2472fbf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xf4dd0c2472fbf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f3; op2:f12; dest:f25; op1val:0x7f8f4dd0c2472fbf; op2val:0xff8f4dd0c2472fbf; 
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f25, f3, f12, dyn, 64, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f31, rs2==f28, rd==f24,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xf4dd0c2472fbf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xf4dd0c2472fbf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f31; op2:f28; dest:f24; op1val:0x7f8f4dd0c2472fbf; op2val:0xff8f4dd0c2472fbf; 
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f24, f31, f28, dyn, 96, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f16, rs2==f8, rd==f14,fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xf4dd0c2472fbf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xf4dd0c2472fbf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f16; op2:f8; dest:f14; op1val:0x7f8f4dd0c2472fbf; op2val:0xff8f4dd0c2472fbf; 
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f14, f16, f8, dyn, 128, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f25, rs2==f17, rd==f16,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x30526056a01ff and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x30526056a01ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f25; op2:f17; dest:f16; op1val:0x7f930526056a01ff; op2val:0xff930526056a01ff; 
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f16, f25, f17, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f13, rs2==f22, rd==f7,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x30526056a01ff and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x30526056a01ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f13; op2:f22; dest:f7; op1val:0x7f930526056a01ff; op2val:0xff930526056a01ff; 
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f7, f13, f22, dyn, 32, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x30526056a01ff and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x30526056a01ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f930526056a01ff; op2val:0xff930526056a01ff; 
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x30526056a01ff and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x30526056a01ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f930526056a01ff; op2val:0xff930526056a01ff; 
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x30526056a01ff and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x30526056a01ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f930526056a01ff; op2val:0xff930526056a01ff; 
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x75450c5a9817f and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x75450c5a9817f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f975450c5a9817f; op2val:0xff975450c5a9817f; 
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x75450c5a9817f and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x75450c5a9817f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f975450c5a9817f; op2val:0xff975450c5a9817f; 
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x75450c5a9817f and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x75450c5a9817f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f975450c5a9817f; op2val:0xff975450c5a9817f; 
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x75450c5a9817f and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x75450c5a9817f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f975450c5a9817f; op2val:0xff975450c5a9817f; 
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x75450c5a9817f and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x75450c5a9817f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f975450c5a9817f; op2val:0xff975450c5a9817f; 
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x09f50264a8d1f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x09f50264a8d1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa09f50264a8d1f; op2val:0xffa09f50264a8d1f; 
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x09f50264a8d1f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x09f50264a8d1f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa09f50264a8d1f; op2val:0xffa09f50264a8d1f; 
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x09f50264a8d1f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x09f50264a8d1f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa09f50264a8d1f; op2val:0xffa09f50264a8d1f; 
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x09f50264a8d1f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x09f50264a8d1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa09f50264a8d1f; op2val:0xffa09f50264a8d1f; 
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x09f50264a8d1f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x09f50264a8d1f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa09f50264a8d1f; op2val:0xffa09f50264a8d1f; 
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x228e5619b5bff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa228e5619b5bff; op2val:0xffa228e5619b5bff; 
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x228e5619b5bff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa228e5619b5bff; op2val:0xffa228e5619b5bff; 
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x228e5619b5bff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa228e5619b5bff; op2val:0xffa228e5619b5bff; 
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x228e5619b5bff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa228e5619b5bff; op2val:0xffa228e5619b5bff; 
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x228e5619b5bff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa228e5619b5bff; op2val:0xffa228e5619b5bff; 
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x265eb5ece1e0f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x265eb5ece1e0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa265eb5ece1e0f; op2val:0xffa265eb5ece1e0f; 
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x265eb5ece1e0f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x265eb5ece1e0f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa265eb5ece1e0f; op2val:0xffa265eb5ece1e0f; 
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x265eb5ece1e0f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x265eb5ece1e0f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa265eb5ece1e0f; op2val:0xffa265eb5ece1e0f; 
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x265eb5ece1e0f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x265eb5ece1e0f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa265eb5ece1e0f; op2val:0xffa265eb5ece1e0f; 
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x265eb5ece1e0f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x265eb5ece1e0f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa265eb5ece1e0f; op2val:0xffa265eb5ece1e0f; 
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a1fa26c0948f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x2a1fa26c0948f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa2a1fa26c0948f; op2val:0xffa2a1fa26c0948f; 
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a1fa26c0948f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x2a1fa26c0948f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa2a1fa26c0948f; op2val:0xffa2a1fa26c0948f; 
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a1fa26c0948f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x2a1fa26c0948f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa2a1fa26c0948f; op2val:0xffa2a1fa26c0948f; 
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a1fa26c0948f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x2a1fa26c0948f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa2a1fa26c0948f; op2val:0xffa2a1fa26c0948f; 
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a1fa26c0948f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x2a1fa26c0948f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa2a1fa26c0948f; op2val:0xffa2a1fa26c0948f; 
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x728eb744bb2ef and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x728eb744bb2ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa728eb744bb2ef; op2val:0xffa728eb744bb2ef; 
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x728eb744bb2ef and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x728eb744bb2ef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa728eb744bb2ef; op2val:0xffa728eb744bb2ef; 
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x728eb744bb2ef and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x728eb744bb2ef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa728eb744bb2ef; op2val:0xffa728eb744bb2ef; 
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x728eb744bb2ef and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x728eb744bb2ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa728eb744bb2ef; op2val:0xffa728eb744bb2ef; 
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x728eb744bb2ef and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x728eb744bb2ef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa728eb744bb2ef; op2val:0xffa728eb744bb2ef; 
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x76587e2d6216f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x76587e2d6216f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa76587e2d6216f; op2val:0xffa76587e2d6216f; 
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x76587e2d6216f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x76587e2d6216f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa76587e2d6216f; op2val:0xffa76587e2d6216f; 
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x76587e2d6216f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x76587e2d6216f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa76587e2d6216f; op2val:0xffa76587e2d6216f; 
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x76587e2d6216f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x76587e2d6216f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa76587e2d6216f; op2val:0xffa76587e2d6216f; 
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x76587e2d6216f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x76587e2d6216f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa76587e2d6216f; op2val:0xffa76587e2d6216f; 
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x8b50ed3b44d4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa8b50ed3b44d4f; op2val:0xffa8b50ed3b44d4f; 
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x8b50ed3b44d4f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa8b50ed3b44d4f; op2val:0xffa8b50ed3b44d4f; 
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x8b50ed3b44d4f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa8b50ed3b44d4f; op2val:0xffa8b50ed3b44d4f; 
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x8b50ed3b44d4f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa8b50ed3b44d4f; op2val:0xffa8b50ed3b44d4f; 
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x8b50ed3b44d4f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fa8b50ed3b44d4f; op2val:0xffa8b50ed3b44d4f; 
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb8da7279369f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xdb8da7279369f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fadb8da7279369f; op2val:0xffadb8da7279369f; 
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb8da7279369f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xdb8da7279369f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fadb8da7279369f; op2val:0xffadb8da7279369f; 
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb8da7279369f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xdb8da7279369f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fadb8da7279369f; op2val:0xffadb8da7279369f; 
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb8da7279369f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xdb8da7279369f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fadb8da7279369f; op2val:0xffadb8da7279369f; 
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb8da7279369f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xdb8da7279369f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fadb8da7279369f; op2val:0xffadb8da7279369f; 
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfe0614a7b9fbf and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xfe0614a7b9fbf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fafe0614a7b9fbf; op2val:0xffafe0614a7b9fbf; 
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfe0614a7b9fbf and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xfe0614a7b9fbf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fafe0614a7b9fbf; op2val:0xffafe0614a7b9fbf; 
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfe0614a7b9fbf and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xfe0614a7b9fbf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fafe0614a7b9fbf; op2val:0xffafe0614a7b9fbf; 
   valaddr_reg:x3; val_offset:164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfe0614a7b9fbf and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xfe0614a7b9fbf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fafe0614a7b9fbf; op2val:0xffafe0614a7b9fbf; 
   valaddr_reg:x3; val_offset:166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfe0614a7b9fbf and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xfe0614a7b9fbf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fafe0614a7b9fbf; op2val:0xffafe0614a7b9fbf; 
   valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x058fe9a4daa6f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb058fe9a4daa6f; op2val:0xffb058fe9a4daa6f; 
   valaddr_reg:x3; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x058fe9a4daa6f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb058fe9a4daa6f; op2val:0xffb058fe9a4daa6f; 
   valaddr_reg:x3; val_offset:172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x058fe9a4daa6f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb058fe9a4daa6f; op2val:0xffb058fe9a4daa6f; 
   valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x058fe9a4daa6f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb058fe9a4daa6f; op2val:0xffb058fe9a4daa6f; 
   valaddr_reg:x3; val_offset:176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x058fe9a4daa6f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb058fe9a4daa6f; op2val:0xffb058fe9a4daa6f; 
   valaddr_reg:x3; val_offset:178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0cc870fcad57f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0cc870fcad57f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0cc870fcad57f; op2val:0xffb0cc870fcad57f; 
   valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0cc870fcad57f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0cc870fcad57f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0cc870fcad57f; op2val:0xffb0cc870fcad57f; 
   valaddr_reg:x3; val_offset:182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0cc870fcad57f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0cc870fcad57f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0cc870fcad57f; op2val:0xffb0cc870fcad57f; 
   valaddr_reg:x3; val_offset:184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0cc870fcad57f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0cc870fcad57f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0cc870fcad57f; op2val:0xffb0cc870fcad57f; 
   valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0cc870fcad57f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0cc870fcad57f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0cc870fcad57f; op2val:0xffb0cc870fcad57f; 
   valaddr_reg:x3; val_offset:188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0da8a99d945d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0da8a99d945d7; op2val:0xffb0da8a99d945d7; 
   valaddr_reg:x3; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0da8a99d945d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0da8a99d945d7; op2val:0xffb0da8a99d945d7; 
   valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0da8a99d945d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0da8a99d945d7; op2val:0xffb0da8a99d945d7; 
   valaddr_reg:x3; val_offset:194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 194*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0da8a99d945d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0da8a99d945d7; op2val:0xffb0da8a99d945d7; 
   valaddr_reg:x3; val_offset:196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 196*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0da8a99d945d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0da8a99d945d7; op2val:0xffb0da8a99d945d7; 
   valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0fce9799927f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0fce9799927f7; op2val:0xffb0fce9799927f7; 
   valaddr_reg:x3; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 200*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0fce9799927f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0fce9799927f7; op2val:0xffb0fce9799927f7; 
   valaddr_reg:x3; val_offset:202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 202*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0fce9799927f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0fce9799927f7; op2val:0xffb0fce9799927f7; 
   valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0fce9799927f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0fce9799927f7; op2val:0xffb0fce9799927f7; 
   valaddr_reg:x3; val_offset:206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 206*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0fce9799927f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb0fce9799927f7; op2val:0xffb0fce9799927f7; 
   valaddr_reg:x3; val_offset:208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 208*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x49818dfc8788f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x49818dfc8788f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb49818dfc8788f; op2val:0xffb49818dfc8788f; 
   valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x49818dfc8788f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x49818dfc8788f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb49818dfc8788f; op2val:0xffb49818dfc8788f; 
   valaddr_reg:x3; val_offset:212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 212*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x49818dfc8788f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x49818dfc8788f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb49818dfc8788f; op2val:0xffb49818dfc8788f; 
   valaddr_reg:x3; val_offset:214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 214*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x49818dfc8788f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x49818dfc8788f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb49818dfc8788f; op2val:0xffb49818dfc8788f; 
   valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x49818dfc8788f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x49818dfc8788f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb49818dfc8788f; op2val:0xffb49818dfc8788f; 
   valaddr_reg:x3; val_offset:218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 218*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9086506183f67 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9086506183f67 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9086506183f67; op2val:0xffb9086506183f67; 
   valaddr_reg:x3; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 220*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9086506183f67 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9086506183f67 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9086506183f67; op2val:0xffb9086506183f67; 
   valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9086506183f67 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9086506183f67 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9086506183f67; op2val:0xffb9086506183f67; 
   valaddr_reg:x3; val_offset:224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 224*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9086506183f67 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9086506183f67 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9086506183f67; op2val:0xffb9086506183f67; 
   valaddr_reg:x3; val_offset:226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 226*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9086506183f67 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9086506183f67 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9086506183f67; op2val:0xffb9086506183f67; 
   valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a5710f3828f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9a5710f3828f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9a5710f3828f7; op2val:0xffb9a5710f3828f7; 
   valaddr_reg:x3; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 230*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a5710f3828f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9a5710f3828f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9a5710f3828f7; op2val:0xffb9a5710f3828f7; 
   valaddr_reg:x3; val_offset:232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 232*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a5710f3828f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9a5710f3828f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9a5710f3828f7; op2val:0xffb9a5710f3828f7; 
   valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a5710f3828f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9a5710f3828f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9a5710f3828f7; op2val:0xffb9a5710f3828f7; 
   valaddr_reg:x3; val_offset:236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 236*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a5710f3828f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9a5710f3828f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9a5710f3828f7; op2val:0xffb9a5710f3828f7; 
   valaddr_reg:x3; val_offset:238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 238*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9d5f97660dadf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9d5f97660dadf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9d5f97660dadf; op2val:0xffb9d5f97660dadf; 
   valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9d5f97660dadf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9d5f97660dadf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9d5f97660dadf; op2val:0xffb9d5f97660dadf; 
   valaddr_reg:x3; val_offset:242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 242*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9d5f97660dadf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9d5f97660dadf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9d5f97660dadf; op2val:0xffb9d5f97660dadf; 
   valaddr_reg:x3; val_offset:244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 244*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9d5f97660dadf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9d5f97660dadf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9d5f97660dadf; op2val:0xffb9d5f97660dadf; 
   valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9d5f97660dadf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9d5f97660dadf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9d5f97660dadf; op2val:0xffb9d5f97660dadf; 
   valaddr_reg:x3; val_offset:248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 248*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9fbeb1abfb6e7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9fbeb1abfb6e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9fbeb1abfb6e7; op2val:0xffb9fbeb1abfb6e7; 
   valaddr_reg:x3; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 250*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9fbeb1abfb6e7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9fbeb1abfb6e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9fbeb1abfb6e7; op2val:0xffb9fbeb1abfb6e7; 
   valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9fbeb1abfb6e7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9fbeb1abfb6e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9fbeb1abfb6e7; op2val:0xffb9fbeb1abfb6e7; 
   valaddr_reg:x3; val_offset:254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 254*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9fbeb1abfb6e7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9fbeb1abfb6e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9fbeb1abfb6e7; op2val:0xffb9fbeb1abfb6e7; 
   valaddr_reg:x3; val_offset:256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 256*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9fbeb1abfb6e7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9fbeb1abfb6e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fb9fbeb1abfb6e7; op2val:0xffb9fbeb1abfb6e7; 
   valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbeb3709a573b7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xbeb3709a573b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbbeb3709a573b7; op2val:0xffbbeb3709a573b7; 
   valaddr_reg:x3; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 260*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbeb3709a573b7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xbeb3709a573b7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbbeb3709a573b7; op2val:0xffbbeb3709a573b7; 
   valaddr_reg:x3; val_offset:262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 262*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbeb3709a573b7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xbeb3709a573b7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbbeb3709a573b7; op2val:0xffbbeb3709a573b7; 
   valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbeb3709a573b7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xbeb3709a573b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbbeb3709a573b7; op2val:0xffbbeb3709a573b7; 
   valaddr_reg:x3; val_offset:266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 266*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbeb3709a573b7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xbeb3709a573b7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbbeb3709a573b7; op2val:0xffbbeb3709a573b7; 
   valaddr_reg:x3; val_offset:268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 268*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfc83569216bf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xdfc83569216bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbdfc83569216bf; op2val:0xffbdfc83569216bf; 
   valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfc83569216bf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xdfc83569216bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbdfc83569216bf; op2val:0xffbdfc83569216bf; 
   valaddr_reg:x3; val_offset:272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 272*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfc83569216bf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xdfc83569216bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbdfc83569216bf; op2val:0xffbdfc83569216bf; 
   valaddr_reg:x3; val_offset:274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 274*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfc83569216bf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xdfc83569216bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbdfc83569216bf; op2val:0xffbdfc83569216bf; 
   valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfc83569216bf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xdfc83569216bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbdfc83569216bf; op2val:0xffbdfc83569216bf; 
   valaddr_reg:x3; val_offset:278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 278*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe70e78fe823f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xe70e78fe823f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbe70e78fe823f7; op2val:0xffbe70e78fe823f7; 
   valaddr_reg:x3; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 280*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe70e78fe823f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xe70e78fe823f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbe70e78fe823f7; op2val:0xffbe70e78fe823f7; 
   valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe70e78fe823f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xe70e78fe823f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbe70e78fe823f7; op2val:0xffbe70e78fe823f7; 
   valaddr_reg:x3; val_offset:284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 284*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe70e78fe823f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xe70e78fe823f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbe70e78fe823f7; op2val:0xffbe70e78fe823f7; 
   valaddr_reg:x3; val_offset:286*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 286*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe70e78fe823f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xe70e78fe823f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbe70e78fe823f7; op2val:0xffbe70e78fe823f7; 
   valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb797ef55e1cf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfb797ef55e1cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbfb797ef55e1cf; op2val:0xffbfb797ef55e1cf; 
   valaddr_reg:x3; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 290*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb797ef55e1cf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfb797ef55e1cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbfb797ef55e1cf; op2val:0xffbfb797ef55e1cf; 
   valaddr_reg:x3; val_offset:292*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 292*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb797ef55e1cf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfb797ef55e1cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbfb797ef55e1cf; op2val:0xffbfb797ef55e1cf; 
   valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb797ef55e1cf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfb797ef55e1cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbfb797ef55e1cf; op2val:0xffbfb797ef55e1cf; 
   valaddr_reg:x3; val_offset:296*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 296*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb797ef55e1cf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfb797ef55e1cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbfb797ef55e1cf; op2val:0xffbfb797ef55e1cf; 
   valaddr_reg:x3; val_offset:298*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 298*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfd3af1f060647 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfd3af1f060647 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbfd3af1f060647; op2val:0xffbfd3af1f060647; 
   valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfd3af1f060647 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfd3af1f060647 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbfd3af1f060647; op2val:0xffbfd3af1f060647; 
   valaddr_reg:x3; val_offset:302*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 302*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfd3af1f060647 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfd3af1f060647 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbfd3af1f060647; op2val:0xffbfd3af1f060647; 
   valaddr_reg:x3; val_offset:304*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 304*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfd3af1f060647 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfd3af1f060647 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbfd3af1f060647; op2val:0xffbfd3af1f060647; 
   valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfd3af1f060647 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfd3af1f060647 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fbfd3af1f060647; op2val:0xffbfd3af1f060647; 
   valaddr_reg:x3; val_offset:308*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 308*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x04c0c63d2bf03 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x04c0c63d2bf03 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc04c0c63d2bf03; op2val:0xffc04c0c63d2bf03; 
   valaddr_reg:x3; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 310*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x04c0c63d2bf03 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x04c0c63d2bf03 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc04c0c63d2bf03; op2val:0xffc04c0c63d2bf03; 
   valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x04c0c63d2bf03 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x04c0c63d2bf03 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc04c0c63d2bf03; op2val:0xffc04c0c63d2bf03; 
   valaddr_reg:x3; val_offset:314*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 314*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x04c0c63d2bf03 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x04c0c63d2bf03 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc04c0c63d2bf03; op2val:0xffc04c0c63d2bf03; 
   valaddr_reg:x3; val_offset:316*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 316*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x04c0c63d2bf03 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x04c0c63d2bf03 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc04c0c63d2bf03; op2val:0xffc04c0c63d2bf03; 
   valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x113ecba7502a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x113ecba7502a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc113ecba7502a7; op2val:0xffc113ecba7502a7; 
   valaddr_reg:x3; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 320*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x113ecba7502a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x113ecba7502a7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc113ecba7502a7; op2val:0xffc113ecba7502a7; 
   valaddr_reg:x3; val_offset:322*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 322*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x113ecba7502a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x113ecba7502a7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc113ecba7502a7; op2val:0xffc113ecba7502a7; 
   valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x113ecba7502a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x113ecba7502a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc113ecba7502a7; op2val:0xffc113ecba7502a7; 
   valaddr_reg:x3; val_offset:326*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 326*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x113ecba7502a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x113ecba7502a7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc113ecba7502a7; op2val:0xffc113ecba7502a7; 
   valaddr_reg:x3; val_offset:328*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 328*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbbe71ac902b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbbe71ac902b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc2bbbe71ac902b; op2val:0xffc2bbbe71ac902b; 
   valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbbe71ac902b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbbe71ac902b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc2bbbe71ac902b; op2val:0xffc2bbbe71ac902b; 
   valaddr_reg:x3; val_offset:332*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 332*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbbe71ac902b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbbe71ac902b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc2bbbe71ac902b; op2val:0xffc2bbbe71ac902b; 
   valaddr_reg:x3; val_offset:334*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 334*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbbe71ac902b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbbe71ac902b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc2bbbe71ac902b; op2val:0xffc2bbbe71ac902b; 
   valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbbe71ac902b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbbe71ac902b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc2bbbe71ac902b; op2val:0xffc2bbbe71ac902b; 
   valaddr_reg:x3; val_offset:338*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 338*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbdffdaf66c3 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbdffdaf66c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc2bbdffdaf66c3; op2val:0xffc2bbdffdaf66c3; 
   valaddr_reg:x3; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 340*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbdffdaf66c3 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbdffdaf66c3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc2bbdffdaf66c3; op2val:0xffc2bbdffdaf66c3; 
   valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbdffdaf66c3 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbdffdaf66c3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc2bbdffdaf66c3; op2val:0xffc2bbdffdaf66c3; 
   valaddr_reg:x3; val_offset:344*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 344*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbdffdaf66c3 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbdffdaf66c3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc2bbdffdaf66c3; op2val:0xffc2bbdffdaf66c3; 
   valaddr_reg:x3; val_offset:346*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 346*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbdffdaf66c3 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbdffdaf66c3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc2bbdffdaf66c3; op2val:0xffc2bbdffdaf66c3; 
   valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x30c845de62d3f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x30c845de62d3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc30c845de62d3f; op2val:0xffc30c845de62d3f; 
   valaddr_reg:x3; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 350*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x30c845de62d3f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x30c845de62d3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc30c845de62d3f; op2val:0xffc30c845de62d3f; 
   valaddr_reg:x3; val_offset:352*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 352*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x30c845de62d3f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x30c845de62d3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc30c845de62d3f; op2val:0xffc30c845de62d3f; 
   valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x30c845de62d3f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x30c845de62d3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc30c845de62d3f; op2val:0xffc30c845de62d3f; 
   valaddr_reg:x3; val_offset:356*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 356*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x30c845de62d3f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x30c845de62d3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc30c845de62d3f; op2val:0xffc30c845de62d3f; 
   valaddr_reg:x3; val_offset:358*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 358*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35eecb1ad0a6b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x35eecb1ad0a6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc35eecb1ad0a6b; op2val:0xffc35eecb1ad0a6b; 
   valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35eecb1ad0a6b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x35eecb1ad0a6b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc35eecb1ad0a6b; op2val:0xffc35eecb1ad0a6b; 
   valaddr_reg:x3; val_offset:362*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 362*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35eecb1ad0a6b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x35eecb1ad0a6b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc35eecb1ad0a6b; op2val:0xffc35eecb1ad0a6b; 
   valaddr_reg:x3; val_offset:364*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 364*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35eecb1ad0a6b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x35eecb1ad0a6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc35eecb1ad0a6b; op2val:0xffc35eecb1ad0a6b; 
   valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35eecb1ad0a6b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x35eecb1ad0a6b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc35eecb1ad0a6b; op2val:0xffc35eecb1ad0a6b; 
   valaddr_reg:x3; val_offset:368*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 368*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x360373cf6f10f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x360373cf6f10f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc360373cf6f10f; op2val:0xffc360373cf6f10f; 
   valaddr_reg:x3; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 370*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x360373cf6f10f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x360373cf6f10f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc360373cf6f10f; op2val:0xffc360373cf6f10f; 
   valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x360373cf6f10f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x360373cf6f10f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc360373cf6f10f; op2val:0xffc360373cf6f10f; 
   valaddr_reg:x3; val_offset:374*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 374*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x360373cf6f10f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x360373cf6f10f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc360373cf6f10f; op2val:0xffc360373cf6f10f; 
   valaddr_reg:x3; val_offset:376*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 376*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x360373cf6f10f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x360373cf6f10f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc360373cf6f10f; op2val:0xffc360373cf6f10f; 
   valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42f12d7244f4f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x42f12d7244f4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc42f12d7244f4f; op2val:0xffc42f12d7244f4f; 
   valaddr_reg:x3; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 380*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42f12d7244f4f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x42f12d7244f4f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc42f12d7244f4f; op2val:0xffc42f12d7244f4f; 
   valaddr_reg:x3; val_offset:382*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 382*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42f12d7244f4f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x42f12d7244f4f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc42f12d7244f4f; op2val:0xffc42f12d7244f4f; 
   valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42f12d7244f4f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x42f12d7244f4f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc42f12d7244f4f; op2val:0xffc42f12d7244f4f; 
   valaddr_reg:x3; val_offset:386*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 386*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42f12d7244f4f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x42f12d7244f4f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc42f12d7244f4f; op2val:0xffc42f12d7244f4f; 
   valaddr_reg:x3; val_offset:388*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 388*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4f961e264020f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4f961e264020f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc4f961e264020f; op2val:0xffc4f961e264020f; 
   valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4f961e264020f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4f961e264020f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc4f961e264020f; op2val:0xffc4f961e264020f; 
   valaddr_reg:x3; val_offset:392*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 392*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4f961e264020f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4f961e264020f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc4f961e264020f; op2val:0xffc4f961e264020f; 
   valaddr_reg:x3; val_offset:394*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 394*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4f961e264020f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4f961e264020f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc4f961e264020f; op2val:0xffc4f961e264020f; 
   valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4f961e264020f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4f961e264020f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc4f961e264020f; op2val:0xffc4f961e264020f; 
   valaddr_reg:x3; val_offset:398*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 398*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8106d28c6e8ff and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x8106d28c6e8ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc8106d28c6e8ff; op2val:0xffc8106d28c6e8ff; 
   valaddr_reg:x3; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 400*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8106d28c6e8ff and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x8106d28c6e8ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc8106d28c6e8ff; op2val:0xffc8106d28c6e8ff; 
   valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8106d28c6e8ff and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x8106d28c6e8ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc8106d28c6e8ff; op2val:0xffc8106d28c6e8ff; 
   valaddr_reg:x3; val_offset:404*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 404*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8106d28c6e8ff and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x8106d28c6e8ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc8106d28c6e8ff; op2val:0xffc8106d28c6e8ff; 
   valaddr_reg:x3; val_offset:406*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 406*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8106d28c6e8ff and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x8106d28c6e8ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc8106d28c6e8ff; op2val:0xffc8106d28c6e8ff; 
   valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x83df99d24bacb and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x83df99d24bacb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc83df99d24bacb; op2val:0xffc83df99d24bacb; 
   valaddr_reg:x3; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 410*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x83df99d24bacb and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x83df99d24bacb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc83df99d24bacb; op2val:0xffc83df99d24bacb; 
   valaddr_reg:x3; val_offset:412*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 412*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x83df99d24bacb and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x83df99d24bacb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc83df99d24bacb; op2val:0xffc83df99d24bacb; 
   valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x83df99d24bacb and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x83df99d24bacb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc83df99d24bacb; op2val:0xffc83df99d24bacb; 
   valaddr_reg:x3; val_offset:416*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 416*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x83df99d24bacb and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x83df99d24bacb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc83df99d24bacb; op2val:0xffc83df99d24bacb; 
   valaddr_reg:x3; val_offset:418*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 418*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x874e2eeac1c13 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x874e2eeac1c13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc874e2eeac1c13; op2val:0xffc874e2eeac1c13; 
   valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x874e2eeac1c13 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x874e2eeac1c13 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc874e2eeac1c13; op2val:0xffc874e2eeac1c13; 
   valaddr_reg:x3; val_offset:422*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 422*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x874e2eeac1c13 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x874e2eeac1c13 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc874e2eeac1c13; op2val:0xffc874e2eeac1c13; 
   valaddr_reg:x3; val_offset:424*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 424*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x874e2eeac1c13 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x874e2eeac1c13 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc874e2eeac1c13; op2val:0xffc874e2eeac1c13; 
   valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x874e2eeac1c13 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x874e2eeac1c13 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc874e2eeac1c13; op2val:0xffc874e2eeac1c13; 
   valaddr_reg:x3; val_offset:428*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 428*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9847d9429817b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x9847d9429817b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc9847d9429817b; op2val:0xffc9847d9429817b; 
   valaddr_reg:x3; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 430*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9847d9429817b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x9847d9429817b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc9847d9429817b; op2val:0xffc9847d9429817b; 
   valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9847d9429817b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x9847d9429817b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc9847d9429817b; op2val:0xffc9847d9429817b; 
   valaddr_reg:x3; val_offset:434*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 434*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9847d9429817b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x9847d9429817b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc9847d9429817b; op2val:0xffc9847d9429817b; 
   valaddr_reg:x3; val_offset:436*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 436*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9847d9429817b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x9847d9429817b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fc9847d9429817b; op2val:0xffc9847d9429817b; 
   valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa8693ca418657 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa8693ca418657 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fca8693ca418657; op2val:0xffca8693ca418657; 
   valaddr_reg:x3; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 440*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa8693ca418657 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa8693ca418657 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fca8693ca418657; op2val:0xffca8693ca418657; 
   valaddr_reg:x3; val_offset:442*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 442*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa8693ca418657 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa8693ca418657 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fca8693ca418657; op2val:0xffca8693ca418657; 
   valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa8693ca418657 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa8693ca418657 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fca8693ca418657; op2val:0xffca8693ca418657; 
   valaddr_reg:x3; val_offset:446*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 446*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa8693ca418657 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa8693ca418657 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fca8693ca418657; op2val:0xffca8693ca418657; 
   valaddr_reg:x3; val_offset:448*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 448*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa9aa2b6025f07 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa9aa2b6025f07 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fca9aa2b6025f07; op2val:0xffca9aa2b6025f07; 
   valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa9aa2b6025f07 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa9aa2b6025f07 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fca9aa2b6025f07; op2val:0xffca9aa2b6025f07; 
   valaddr_reg:x3; val_offset:452*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 452*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa9aa2b6025f07 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa9aa2b6025f07 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fca9aa2b6025f07; op2val:0xffca9aa2b6025f07; 
   valaddr_reg:x3; val_offset:454*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 454*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa9aa2b6025f07 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa9aa2b6025f07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fca9aa2b6025f07; op2val:0xffca9aa2b6025f07; 
   valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa9aa2b6025f07 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa9aa2b6025f07 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fca9aa2b6025f07; op2val:0xffca9aa2b6025f07; 
   valaddr_reg:x3; val_offset:458*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 458*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc44223126cbc7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xc44223126cbc7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcc44223126cbc7; op2val:0xffcc44223126cbc7; 
   valaddr_reg:x3; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 460*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc44223126cbc7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xc44223126cbc7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcc44223126cbc7; op2val:0xffcc44223126cbc7; 
   valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc44223126cbc7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xc44223126cbc7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcc44223126cbc7; op2val:0xffcc44223126cbc7; 
   valaddr_reg:x3; val_offset:464*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 464*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc44223126cbc7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xc44223126cbc7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcc44223126cbc7; op2val:0xffcc44223126cbc7; 
   valaddr_reg:x3; val_offset:466*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 466*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc44223126cbc7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xc44223126cbc7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcc44223126cbc7; op2val:0xffcc44223126cbc7; 
   valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xccfc542168107 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcccfc542168107; op2val:0xffcccfc542168107; 
   valaddr_reg:x3; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 470*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xccfc542168107 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcccfc542168107; op2val:0xffcccfc542168107; 
   valaddr_reg:x3; val_offset:472*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 472*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xccfc542168107 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcccfc542168107; op2val:0xffcccfc542168107; 
   valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xccfc542168107 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcccfc542168107; op2val:0xffcccfc542168107; 
   valaddr_reg:x3; val_offset:476*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 476*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xccfc542168107 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcccfc542168107; op2val:0xffcccfc542168107; 
   valaddr_reg:x3; val_offset:478*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 478*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe8af77cda8053 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xe8af77cda8053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fce8af77cda8053; op2val:0xffce8af77cda8053; 
   valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe8af77cda8053 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xe8af77cda8053 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fce8af77cda8053; op2val:0xffce8af77cda8053; 
   valaddr_reg:x3; val_offset:482*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 482*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe8af77cda8053 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xe8af77cda8053 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fce8af77cda8053; op2val:0xffce8af77cda8053; 
   valaddr_reg:x3; val_offset:484*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 484*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe8af77cda8053 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xe8af77cda8053 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fce8af77cda8053; op2val:0xffce8af77cda8053; 
   valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe8af77cda8053 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xe8af77cda8053 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fce8af77cda8053; op2val:0xffce8af77cda8053; 
   valaddr_reg:x3; val_offset:488*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 488*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xebc97dc31d5a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xebc97dc31d5a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcebc97dc31d5a7; op2val:0xffcebc97dc31d5a7; 
   valaddr_reg:x3; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 490*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xebc97dc31d5a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xebc97dc31d5a7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcebc97dc31d5a7; op2val:0xffcebc97dc31d5a7; 
   valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xebc97dc31d5a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xebc97dc31d5a7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcebc97dc31d5a7; op2val:0xffcebc97dc31d5a7; 
   valaddr_reg:x3; val_offset:494*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 494*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xebc97dc31d5a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xebc97dc31d5a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcebc97dc31d5a7; op2val:0xffcebc97dc31d5a7; 
   valaddr_reg:x3; val_offset:496*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 496*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xebc97dc31d5a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xebc97dc31d5a7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcebc97dc31d5a7; op2val:0xffcebc97dc31d5a7; 
   valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf1bca90426463 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xf1bca90426463 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcf1bca90426463; op2val:0xffcf1bca90426463; 
   valaddr_reg:x3; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 500*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf1bca90426463 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xf1bca90426463 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcf1bca90426463; op2val:0xffcf1bca90426463; 
   valaddr_reg:x3; val_offset:502*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 502*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf1bca90426463 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xf1bca90426463 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcf1bca90426463; op2val:0xffcf1bca90426463; 
   valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf1bca90426463 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xf1bca90426463 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcf1bca90426463; op2val:0xffcf1bca90426463; 
   valaddr_reg:x3; val_offset:506*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 506*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf1bca90426463 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xf1bca90426463 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fcf1bca90426463; op2val:0xffcf1bca90426463; 
   valaddr_reg:x3; val_offset:508*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 508*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b42e8f00d47 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x00b42e8f00d47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd00b42e8f00d47; op2val:0xffd00b42e8f00d47; 
   valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b42e8f00d47 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x00b42e8f00d47 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd00b42e8f00d47; op2val:0xffd00b42e8f00d47; 
   valaddr_reg:x3; val_offset:512*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 512*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b42e8f00d47 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x00b42e8f00d47 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd00b42e8f00d47; op2val:0xffd00b42e8f00d47; 
   valaddr_reg:x3; val_offset:514*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 514*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b42e8f00d47 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x00b42e8f00d47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd00b42e8f00d47; op2val:0xffd00b42e8f00d47; 
   valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b42e8f00d47 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x00b42e8f00d47 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd00b42e8f00d47; op2val:0xffd00b42e8f00d47; 
   valaddr_reg:x3; val_offset:518*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 518*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x070c0d4d218f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd070c0d4d218f9; op2val:0xffd070c0d4d218f9; 
   valaddr_reg:x3; val_offset:520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 520*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x070c0d4d218f9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd070c0d4d218f9; op2val:0xffd070c0d4d218f9; 
   valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x070c0d4d218f9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd070c0d4d218f9; op2val:0xffd070c0d4d218f9; 
   valaddr_reg:x3; val_offset:524*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 524*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x070c0d4d218f9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd070c0d4d218f9; op2val:0xffd070c0d4d218f9; 
   valaddr_reg:x3; val_offset:526*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 526*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x070c0d4d218f9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd070c0d4d218f9; op2val:0xffd070c0d4d218f9; 
   valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0abe7f07f8c6f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0abe7f07f8c6f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd0abe7f07f8c6f; op2val:0xffd0abe7f07f8c6f; 
   valaddr_reg:x3; val_offset:530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 530*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0abe7f07f8c6f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0abe7f07f8c6f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd0abe7f07f8c6f; op2val:0xffd0abe7f07f8c6f; 
   valaddr_reg:x3; val_offset:532*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 532*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0abe7f07f8c6f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0abe7f07f8c6f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd0abe7f07f8c6f; op2val:0xffd0abe7f07f8c6f; 
   valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0abe7f07f8c6f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0abe7f07f8c6f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd0abe7f07f8c6f; op2val:0xffd0abe7f07f8c6f; 
   valaddr_reg:x3; val_offset:536*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 536*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0abe7f07f8c6f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0abe7f07f8c6f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd0abe7f07f8c6f; op2val:0xffd0abe7f07f8c6f; 
   valaddr_reg:x3; val_offset:538*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 538*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0b2db44ae8c01 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd0b2db44ae8c01; op2val:0xffd0b2db44ae8c01; 
   valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0b2db44ae8c01 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd0b2db44ae8c01; op2val:0xffd0b2db44ae8c01; 
   valaddr_reg:x3; val_offset:542*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 542*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0b2db44ae8c01 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd0b2db44ae8c01; op2val:0xffd0b2db44ae8c01; 
   valaddr_reg:x3; val_offset:544*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 544*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0b2db44ae8c01 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd0b2db44ae8c01; op2val:0xffd0b2db44ae8c01; 
   valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0b2db44ae8c01 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd0b2db44ae8c01; op2val:0xffd0b2db44ae8c01; 
   valaddr_reg:x3; val_offset:548*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 548*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x194e95f4fa0e5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x194e95f4fa0e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd194e95f4fa0e5; op2val:0xffd194e95f4fa0e5; 
   valaddr_reg:x3; val_offset:550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 550*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x194e95f4fa0e5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x194e95f4fa0e5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd194e95f4fa0e5; op2val:0xffd194e95f4fa0e5; 
   valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x194e95f4fa0e5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x194e95f4fa0e5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd194e95f4fa0e5; op2val:0xffd194e95f4fa0e5; 
   valaddr_reg:x3; val_offset:554*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 554*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x194e95f4fa0e5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x194e95f4fa0e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd194e95f4fa0e5; op2val:0xffd194e95f4fa0e5; 
   valaddr_reg:x3; val_offset:556*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 556*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x194e95f4fa0e5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x194e95f4fa0e5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd194e95f4fa0e5; op2val:0xffd194e95f4fa0e5; 
   valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1eb3cbd822141 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x1eb3cbd822141 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd1eb3cbd822141; op2val:0xffd1eb3cbd822141; 
   valaddr_reg:x3; val_offset:560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 560*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1eb3cbd822141 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x1eb3cbd822141 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd1eb3cbd822141; op2val:0xffd1eb3cbd822141; 
   valaddr_reg:x3; val_offset:562*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 562*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1eb3cbd822141 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x1eb3cbd822141 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd1eb3cbd822141; op2val:0xffd1eb3cbd822141; 
   valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1eb3cbd822141 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x1eb3cbd822141 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd1eb3cbd822141; op2val:0xffd1eb3cbd822141; 
   valaddr_reg:x3; val_offset:566*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 566*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1eb3cbd822141 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x1eb3cbd822141 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd1eb3cbd822141; op2val:0xffd1eb3cbd822141; 
   valaddr_reg:x3; val_offset:568*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 568*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x209a1991e3307 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x209a1991e3307 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd209a1991e3307; op2val:0xffd209a1991e3307; 
   valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x209a1991e3307 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x209a1991e3307 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd209a1991e3307; op2val:0xffd209a1991e3307; 
   valaddr_reg:x3; val_offset:572*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 572*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x209a1991e3307 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x209a1991e3307 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd209a1991e3307; op2val:0xffd209a1991e3307; 
   valaddr_reg:x3; val_offset:574*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 574*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x209a1991e3307 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x209a1991e3307 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd209a1991e3307; op2val:0xffd209a1991e3307; 
   valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x209a1991e3307 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x209a1991e3307 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd209a1991e3307; op2val:0xffd209a1991e3307; 
   valaddr_reg:x3; val_offset:578*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 578*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x287ac6ae322ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x287ac6ae322ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd287ac6ae322ff; op2val:0xffd287ac6ae322ff; 
   valaddr_reg:x3; val_offset:580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 580*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x287ac6ae322ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x287ac6ae322ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd287ac6ae322ff; op2val:0xffd287ac6ae322ff; 
   valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x287ac6ae322ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x287ac6ae322ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd287ac6ae322ff; op2val:0xffd287ac6ae322ff; 
   valaddr_reg:x3; val_offset:584*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 584*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x287ac6ae322ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x287ac6ae322ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd287ac6ae322ff; op2val:0xffd287ac6ae322ff; 
   valaddr_reg:x3; val_offset:586*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 586*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x287ac6ae322ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x287ac6ae322ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd287ac6ae322ff; op2val:0xffd287ac6ae322ff; 
   valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3526172ae3f6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3526172ae3f6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3526172ae3f6b; op2val:0xffd3526172ae3f6b; 
   valaddr_reg:x3; val_offset:590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 590*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3526172ae3f6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3526172ae3f6b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3526172ae3f6b; op2val:0xffd3526172ae3f6b; 
   valaddr_reg:x3; val_offset:592*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 592*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3526172ae3f6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3526172ae3f6b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3526172ae3f6b; op2val:0xffd3526172ae3f6b; 
   valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3526172ae3f6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3526172ae3f6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3526172ae3f6b; op2val:0xffd3526172ae3f6b; 
   valaddr_reg:x3; val_offset:596*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 596*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3526172ae3f6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3526172ae3f6b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3526172ae3f6b; op2val:0xffd3526172ae3f6b; 
   valaddr_reg:x3; val_offset:598*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 598*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3d97530ca446d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3d97530ca446d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3d97530ca446d; op2val:0xffd3d97530ca446d; 
   valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3d97530ca446d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3d97530ca446d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3d97530ca446d; op2val:0xffd3d97530ca446d; 
   valaddr_reg:x3; val_offset:602*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 602*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3d97530ca446d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3d97530ca446d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3d97530ca446d; op2val:0xffd3d97530ca446d; 
   valaddr_reg:x3; val_offset:604*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 604*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3d97530ca446d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3d97530ca446d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3d97530ca446d; op2val:0xffd3d97530ca446d; 
   valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3d97530ca446d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3d97530ca446d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3d97530ca446d; op2val:0xffd3d97530ca446d; 
   valaddr_reg:x3; val_offset:608*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 608*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3eebb35310409 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3eebb35310409 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3eebb35310409; op2val:0xffd3eebb35310409; 
   valaddr_reg:x3; val_offset:610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 610*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3eebb35310409 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3eebb35310409 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3eebb35310409; op2val:0xffd3eebb35310409; 
   valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3eebb35310409 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3eebb35310409 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3eebb35310409; op2val:0xffd3eebb35310409; 
   valaddr_reg:x3; val_offset:614*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 614*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3eebb35310409 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3eebb35310409 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3eebb35310409; op2val:0xffd3eebb35310409; 
   valaddr_reg:x3; val_offset:616*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 616*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3eebb35310409 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3eebb35310409 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd3eebb35310409; op2val:0xffd3eebb35310409; 
   valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x43c3f0806f2cd and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x43c3f0806f2cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd43c3f0806f2cd; op2val:0xffd43c3f0806f2cd; 
   valaddr_reg:x3; val_offset:620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 620*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x43c3f0806f2cd and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x43c3f0806f2cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd43c3f0806f2cd; op2val:0xffd43c3f0806f2cd; 
   valaddr_reg:x3; val_offset:622*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 622*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x43c3f0806f2cd and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x43c3f0806f2cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd43c3f0806f2cd; op2val:0xffd43c3f0806f2cd; 
   valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x43c3f0806f2cd and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x43c3f0806f2cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd43c3f0806f2cd; op2val:0xffd43c3f0806f2cd; 
   valaddr_reg:x3; val_offset:626*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 626*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x43c3f0806f2cd and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x43c3f0806f2cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd43c3f0806f2cd; op2val:0xffd43c3f0806f2cd; 
   valaddr_reg:x3; val_offset:628*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 628*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4d025f5a10f55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x4d025f5a10f55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd4d025f5a10f55; op2val:0xffd4d025f5a10f55; 
   valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4d025f5a10f55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x4d025f5a10f55 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd4d025f5a10f55; op2val:0xffd4d025f5a10f55; 
   valaddr_reg:x3; val_offset:632*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 632*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4d025f5a10f55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x4d025f5a10f55 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd4d025f5a10f55; op2val:0xffd4d025f5a10f55; 
   valaddr_reg:x3; val_offset:634*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 634*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4d025f5a10f55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x4d025f5a10f55 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd4d025f5a10f55; op2val:0xffd4d025f5a10f55; 
   valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4d025f5a10f55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x4d025f5a10f55 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd4d025f5a10f55; op2val:0xffd4d025f5a10f55; 
   valaddr_reg:x3; val_offset:638*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 638*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5287546e52d99 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5287546e52d99 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5287546e52d99; op2val:0xffd5287546e52d99; 
   valaddr_reg:x3; val_offset:640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 640*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5287546e52d99 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5287546e52d99 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5287546e52d99; op2val:0xffd5287546e52d99; 
   valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5287546e52d99 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5287546e52d99 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5287546e52d99; op2val:0xffd5287546e52d99; 
   valaddr_reg:x3; val_offset:644*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 644*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5287546e52d99 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5287546e52d99 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5287546e52d99; op2val:0xffd5287546e52d99; 
   valaddr_reg:x3; val_offset:646*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 646*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5287546e52d99 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5287546e52d99 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5287546e52d99; op2val:0xffd5287546e52d99; 
   valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5569022b338ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5569022b338ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5569022b338ff; op2val:0xffd5569022b338ff; 
   valaddr_reg:x3; val_offset:650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 650*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5569022b338ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5569022b338ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5569022b338ff; op2val:0xffd5569022b338ff; 
   valaddr_reg:x3; val_offset:652*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 652*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5569022b338ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5569022b338ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5569022b338ff; op2val:0xffd5569022b338ff; 
   valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5569022b338ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5569022b338ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5569022b338ff; op2val:0xffd5569022b338ff; 
   valaddr_reg:x3; val_offset:656*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 656*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5569022b338ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5569022b338ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5569022b338ff; op2val:0xffd5569022b338ff; 
   valaddr_reg:x3; val_offset:658*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 658*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x566d65947d7e7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x566d65947d7e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd566d65947d7e7; op2val:0xffd566d65947d7e7; 
   valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x566d65947d7e7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x566d65947d7e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd566d65947d7e7; op2val:0xffd566d65947d7e7; 
   valaddr_reg:x3; val_offset:662*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 662*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x566d65947d7e7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x566d65947d7e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd566d65947d7e7; op2val:0xffd566d65947d7e7; 
   valaddr_reg:x3; val_offset:664*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 664*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x566d65947d7e7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x566d65947d7e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd566d65947d7e7; op2val:0xffd566d65947d7e7; 
   valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x566d65947d7e7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x566d65947d7e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd566d65947d7e7; op2val:0xffd566d65947d7e7; 
   valaddr_reg:x3; val_offset:668*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 668*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c62b6da50e51 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5c62b6da50e51 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5c62b6da50e51; op2val:0xffd5c62b6da50e51; 
   valaddr_reg:x3; val_offset:670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 670*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c62b6da50e51 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5c62b6da50e51 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5c62b6da50e51; op2val:0xffd5c62b6da50e51; 
   valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c62b6da50e51 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5c62b6da50e51 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5c62b6da50e51; op2val:0xffd5c62b6da50e51; 
   valaddr_reg:x3; val_offset:674*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 674*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c62b6da50e51 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5c62b6da50e51 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5c62b6da50e51; op2val:0xffd5c62b6da50e51; 
   valaddr_reg:x3; val_offset:676*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 676*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c62b6da50e51 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5c62b6da50e51 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5c62b6da50e51; op2val:0xffd5c62b6da50e51; 
   valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fe6340fe9dff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5fe6340fe9dff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5fe6340fe9dff; op2val:0xffd5fe6340fe9dff; 
   valaddr_reg:x3; val_offset:680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 680*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fe6340fe9dff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5fe6340fe9dff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5fe6340fe9dff; op2val:0xffd5fe6340fe9dff; 
   valaddr_reg:x3; val_offset:682*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 682*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fe6340fe9dff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5fe6340fe9dff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5fe6340fe9dff; op2val:0xffd5fe6340fe9dff; 
   valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fe6340fe9dff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5fe6340fe9dff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5fe6340fe9dff; op2val:0xffd5fe6340fe9dff; 
   valaddr_reg:x3; val_offset:686*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 686*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fe6340fe9dff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5fe6340fe9dff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd5fe6340fe9dff; op2val:0xffd5fe6340fe9dff; 
   valaddr_reg:x3; val_offset:688*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 688*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66b37637d118d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x66b37637d118d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd66b37637d118d; op2val:0xffd66b37637d118d; 
   valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66b37637d118d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x66b37637d118d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd66b37637d118d; op2val:0xffd66b37637d118d; 
   valaddr_reg:x3; val_offset:692*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 692*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66b37637d118d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x66b37637d118d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd66b37637d118d; op2val:0xffd66b37637d118d; 
   valaddr_reg:x3; val_offset:694*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 694*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66b37637d118d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x66b37637d118d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd66b37637d118d; op2val:0xffd66b37637d118d; 
   valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66b37637d118d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x66b37637d118d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd66b37637d118d; op2val:0xffd66b37637d118d; 
   valaddr_reg:x3; val_offset:698*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 698*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x68add14e18ecb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x68add14e18ecb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd68add14e18ecb; op2val:0xffd68add14e18ecb; 
   valaddr_reg:x3; val_offset:700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 700*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x68add14e18ecb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x68add14e18ecb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd68add14e18ecb; op2val:0xffd68add14e18ecb; 
   valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x68add14e18ecb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x68add14e18ecb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd68add14e18ecb; op2val:0xffd68add14e18ecb; 
   valaddr_reg:x3; val_offset:704*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 704*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x68add14e18ecb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x68add14e18ecb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd68add14e18ecb; op2val:0xffd68add14e18ecb; 
   valaddr_reg:x3; val_offset:706*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 706*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x68add14e18ecb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x68add14e18ecb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd68add14e18ecb; op2val:0xffd68add14e18ecb; 
   valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6fd2704b8e37f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6fd2704b8e37f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd6fd2704b8e37f; op2val:0xffd6fd2704b8e37f; 
   valaddr_reg:x3; val_offset:710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 710*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6fd2704b8e37f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6fd2704b8e37f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd6fd2704b8e37f; op2val:0xffd6fd2704b8e37f; 
   valaddr_reg:x3; val_offset:712*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 712*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6fd2704b8e37f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6fd2704b8e37f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd6fd2704b8e37f; op2val:0xffd6fd2704b8e37f; 
   valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6fd2704b8e37f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6fd2704b8e37f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd6fd2704b8e37f; op2val:0xffd6fd2704b8e37f; 
   valaddr_reg:x3; val_offset:716*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 716*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6fd2704b8e37f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6fd2704b8e37f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd6fd2704b8e37f; op2val:0xffd6fd2704b8e37f; 
   valaddr_reg:x3; val_offset:718*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 718*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x792be19c2d7a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x792be19c2d7a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd792be19c2d7a1; op2val:0xffd792be19c2d7a1; 
   valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x792be19c2d7a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x792be19c2d7a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd792be19c2d7a1; op2val:0xffd792be19c2d7a1; 
   valaddr_reg:x3; val_offset:722*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 722*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x792be19c2d7a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x792be19c2d7a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd792be19c2d7a1; op2val:0xffd792be19c2d7a1; 
   valaddr_reg:x3; val_offset:724*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 724*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x792be19c2d7a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x792be19c2d7a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd792be19c2d7a1; op2val:0xffd792be19c2d7a1; 
   valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x792be19c2d7a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x792be19c2d7a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd792be19c2d7a1; op2val:0xffd792be19c2d7a1; 
   valaddr_reg:x3; val_offset:728*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 728*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b05f6eabb69f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7b05f6eabb69f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7b05f6eabb69f; op2val:0xffd7b05f6eabb69f; 
   valaddr_reg:x3; val_offset:730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 730*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b05f6eabb69f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7b05f6eabb69f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7b05f6eabb69f; op2val:0xffd7b05f6eabb69f; 
   valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b05f6eabb69f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7b05f6eabb69f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7b05f6eabb69f; op2val:0xffd7b05f6eabb69f; 
   valaddr_reg:x3; val_offset:734*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 734*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b05f6eabb69f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7b05f6eabb69f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7b05f6eabb69f; op2val:0xffd7b05f6eabb69f; 
   valaddr_reg:x3; val_offset:736*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 736*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b05f6eabb69f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7b05f6eabb69f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7b05f6eabb69f; op2val:0xffd7b05f6eabb69f; 
   valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7d6356ef8a62f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7d6356ef8a62f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7d6356ef8a62f; op2val:0xffd7d6356ef8a62f; 
   valaddr_reg:x3; val_offset:740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 740*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7d6356ef8a62f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7d6356ef8a62f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7d6356ef8a62f; op2val:0xffd7d6356ef8a62f; 
   valaddr_reg:x3; val_offset:742*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 742*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7d6356ef8a62f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7d6356ef8a62f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7d6356ef8a62f; op2val:0xffd7d6356ef8a62f; 
   valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7d6356ef8a62f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7d6356ef8a62f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7d6356ef8a62f; op2val:0xffd7d6356ef8a62f; 
   valaddr_reg:x3; val_offset:746*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 746*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7d6356ef8a62f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7d6356ef8a62f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd7d6356ef8a62f; op2val:0xffd7d6356ef8a62f; 
   valaddr_reg:x3; val_offset:748*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 748*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x831acfae4a49b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd831acfae4a49b; op2val:0xffd831acfae4a49b; 
   valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x831acfae4a49b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd831acfae4a49b; op2val:0xffd831acfae4a49b; 
   valaddr_reg:x3; val_offset:752*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 752*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x831acfae4a49b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd831acfae4a49b; op2val:0xffd831acfae4a49b; 
   valaddr_reg:x3; val_offset:754*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 754*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x831acfae4a49b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd831acfae4a49b; op2val:0xffd831acfae4a49b; 
   valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x831acfae4a49b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd831acfae4a49b; op2val:0xffd831acfae4a49b; 
   valaddr_reg:x3; val_offset:758*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 758*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x889db2e44701b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x889db2e44701b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd889db2e44701b; op2val:0xffd889db2e44701b; 
   valaddr_reg:x3; val_offset:760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 760*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x889db2e44701b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x889db2e44701b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd889db2e44701b; op2val:0xffd889db2e44701b; 
   valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x889db2e44701b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x889db2e44701b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd889db2e44701b; op2val:0xffd889db2e44701b; 
   valaddr_reg:x3; val_offset:764*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 764*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x889db2e44701b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x889db2e44701b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd889db2e44701b; op2val:0xffd889db2e44701b; 
   valaddr_reg:x3; val_offset:766*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 766*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x889db2e44701b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x889db2e44701b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd889db2e44701b; op2val:0xffd889db2e44701b; 
   valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8bf6a13abca7f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x8bf6a13abca7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd8bf6a13abca7f; op2val:0xffd8bf6a13abca7f; 
   valaddr_reg:x3; val_offset:770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 770*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8bf6a13abca7f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x8bf6a13abca7f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd8bf6a13abca7f; op2val:0xffd8bf6a13abca7f; 
   valaddr_reg:x3; val_offset:772*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 772*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8bf6a13abca7f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x8bf6a13abca7f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd8bf6a13abca7f; op2val:0xffd8bf6a13abca7f; 
   valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8bf6a13abca7f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x8bf6a13abca7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd8bf6a13abca7f; op2val:0xffd8bf6a13abca7f; 
   valaddr_reg:x3; val_offset:776*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 776*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8bf6a13abca7f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x8bf6a13abca7f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd8bf6a13abca7f; op2val:0xffd8bf6a13abca7f; 
   valaddr_reg:x3; val_offset:778*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 778*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x963785d0567a5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x963785d0567a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd963785d0567a5; op2val:0xffd963785d0567a5; 
   valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x963785d0567a5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x963785d0567a5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd963785d0567a5; op2val:0xffd963785d0567a5; 
   valaddr_reg:x3; val_offset:782*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 782*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x963785d0567a5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x963785d0567a5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd963785d0567a5; op2val:0xffd963785d0567a5; 
   valaddr_reg:x3; val_offset:784*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 784*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x963785d0567a5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x963785d0567a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd963785d0567a5; op2val:0xffd963785d0567a5; 
   valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x963785d0567a5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x963785d0567a5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd963785d0567a5; op2val:0xffd963785d0567a5; 
   valaddr_reg:x3; val_offset:788*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 788*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b75de798ac5f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9b75de798ac5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9b75de798ac5f; op2val:0xffd9b75de798ac5f; 
   valaddr_reg:x3; val_offset:790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 790*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b75de798ac5f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9b75de798ac5f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9b75de798ac5f; op2val:0xffd9b75de798ac5f; 
   valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b75de798ac5f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9b75de798ac5f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9b75de798ac5f; op2val:0xffd9b75de798ac5f; 
   valaddr_reg:x3; val_offset:794*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 794*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b75de798ac5f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9b75de798ac5f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9b75de798ac5f; op2val:0xffd9b75de798ac5f; 
   valaddr_reg:x3; val_offset:796*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 796*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b75de798ac5f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9b75de798ac5f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9b75de798ac5f; op2val:0xffd9b75de798ac5f; 
   valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9cd85f6af39ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9cd85f6af39ef; op2val:0xffd9cd85f6af39ef; 
   valaddr_reg:x3; val_offset:800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 800*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9cd85f6af39ef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9cd85f6af39ef; op2val:0xffd9cd85f6af39ef; 
   valaddr_reg:x3; val_offset:802*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 802*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9cd85f6af39ef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9cd85f6af39ef; op2val:0xffd9cd85f6af39ef; 
   valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9cd85f6af39ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9cd85f6af39ef; op2val:0xffd9cd85f6af39ef; 
   valaddr_reg:x3; val_offset:806*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 806*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9cd85f6af39ef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9cd85f6af39ef; op2val:0xffd9cd85f6af39ef; 
   valaddr_reg:x3; val_offset:808*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 808*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa60dd1b5e57 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9fa60dd1b5e57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9fa60dd1b5e57; op2val:0xffd9fa60dd1b5e57; 
   valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa60dd1b5e57 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9fa60dd1b5e57 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9fa60dd1b5e57; op2val:0xffd9fa60dd1b5e57; 
   valaddr_reg:x3; val_offset:812*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 812*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa60dd1b5e57 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9fa60dd1b5e57 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9fa60dd1b5e57; op2val:0xffd9fa60dd1b5e57; 
   valaddr_reg:x3; val_offset:814*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 814*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa60dd1b5e57 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9fa60dd1b5e57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9fa60dd1b5e57; op2val:0xffd9fa60dd1b5e57; 
   valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa60dd1b5e57 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9fa60dd1b5e57 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fd9fa60dd1b5e57; op2val:0xffd9fa60dd1b5e57; 
   valaddr_reg:x3; val_offset:818*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 818*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa1ddeeb12c253 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa1ddeeb12c253 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda1ddeeb12c253; op2val:0xffda1ddeeb12c253; 
   valaddr_reg:x3; val_offset:820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 820*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa1ddeeb12c253 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa1ddeeb12c253 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda1ddeeb12c253; op2val:0xffda1ddeeb12c253; 
   valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa1ddeeb12c253 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa1ddeeb12c253 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda1ddeeb12c253; op2val:0xffda1ddeeb12c253; 
   valaddr_reg:x3; val_offset:824*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 824*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa1ddeeb12c253 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa1ddeeb12c253 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda1ddeeb12c253; op2val:0xffda1ddeeb12c253; 
   valaddr_reg:x3; val_offset:826*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 826*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa1ddeeb12c253 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa1ddeeb12c253 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda1ddeeb12c253; op2val:0xffda1ddeeb12c253; 
   valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa501ef8480c55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa501ef8480c55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda501ef8480c55; op2val:0xffda501ef8480c55; 
   valaddr_reg:x3; val_offset:830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 830*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa501ef8480c55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa501ef8480c55 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda501ef8480c55; op2val:0xffda501ef8480c55; 
   valaddr_reg:x3; val_offset:832*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 832*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa501ef8480c55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa501ef8480c55 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda501ef8480c55; op2val:0xffda501ef8480c55; 
   valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa501ef8480c55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa501ef8480c55 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda501ef8480c55; op2val:0xffda501ef8480c55; 
   valaddr_reg:x3; val_offset:836*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 836*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa501ef8480c55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa501ef8480c55 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda501ef8480c55; op2val:0xffda501ef8480c55; 
   valaddr_reg:x3; val_offset:838*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 838*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85a268409ae9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85a268409ae9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda85a268409ae9; op2val:0xffda85a268409ae9; 
   valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85a268409ae9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85a268409ae9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda85a268409ae9; op2val:0xffda85a268409ae9; 
   valaddr_reg:x3; val_offset:842*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 842*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85a268409ae9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85a268409ae9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda85a268409ae9; op2val:0xffda85a268409ae9; 
   valaddr_reg:x3; val_offset:844*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 844*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85a268409ae9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85a268409ae9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda85a268409ae9; op2val:0xffda85a268409ae9; 
   valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85a268409ae9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85a268409ae9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda85a268409ae9; op2val:0xffda85a268409ae9; 
   valaddr_reg:x3; val_offset:848*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 848*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85d306a197c5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85d306a197c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda85d306a197c5; op2val:0xffda85d306a197c5; 
   valaddr_reg:x3; val_offset:850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 850*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85d306a197c5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85d306a197c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda85d306a197c5; op2val:0xffda85d306a197c5; 
   valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85d306a197c5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85d306a197c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda85d306a197c5; op2val:0xffda85d306a197c5; 
   valaddr_reg:x3; val_offset:854*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 854*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85d306a197c5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85d306a197c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda85d306a197c5; op2val:0xffda85d306a197c5; 
   valaddr_reg:x3; val_offset:856*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 856*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85d306a197c5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85d306a197c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda85d306a197c5; op2val:0xffda85d306a197c5; 
   valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa8acc80de84a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa8acc80de84a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda8acc80de84a1; op2val:0xffda8acc80de84a1; 
   valaddr_reg:x3; val_offset:860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 860*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa8acc80de84a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa8acc80de84a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda8acc80de84a1; op2val:0xffda8acc80de84a1; 
   valaddr_reg:x3; val_offset:862*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 862*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa8acc80de84a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa8acc80de84a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda8acc80de84a1; op2val:0xffda8acc80de84a1; 
   valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa8acc80de84a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa8acc80de84a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda8acc80de84a1; op2val:0xffda8acc80de84a1; 
   valaddr_reg:x3; val_offset:866*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 866*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa8acc80de84a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa8acc80de84a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fda8acc80de84a1; op2val:0xffda8acc80de84a1; 
   valaddr_reg:x3; val_offset:868*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 868*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeaa51052e977 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xaeaa51052e977 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdaeaa51052e977; op2val:0xffdaeaa51052e977; 
   valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeaa51052e977 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xaeaa51052e977 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdaeaa51052e977; op2val:0xffdaeaa51052e977; 
   valaddr_reg:x3; val_offset:872*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 872*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeaa51052e977 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xaeaa51052e977 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdaeaa51052e977; op2val:0xffdaeaa51052e977; 
   valaddr_reg:x3; val_offset:874*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 874*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeaa51052e977 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xaeaa51052e977 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdaeaa51052e977; op2val:0xffdaeaa51052e977; 
   valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeaa51052e977 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xaeaa51052e977 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdaeaa51052e977; op2val:0xffdaeaa51052e977; 
   valaddr_reg:x3; val_offset:878*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 878*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb992011891a75 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xb992011891a75 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdb992011891a75; op2val:0xffdb992011891a75; 
   valaddr_reg:x3; val_offset:880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 880*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb992011891a75 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xb992011891a75 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdb992011891a75; op2val:0xffdb992011891a75; 
   valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb992011891a75 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xb992011891a75 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdb992011891a75; op2val:0xffdb992011891a75; 
   valaddr_reg:x3; val_offset:884*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 884*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb992011891a75 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xb992011891a75 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdb992011891a75; op2val:0xffdb992011891a75; 
   valaddr_reg:x3; val_offset:886*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 886*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb992011891a75 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xb992011891a75 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdb992011891a75; op2val:0xffdb992011891a75; 
   valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc978aa879221 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xbc978aa879221 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdbc978aa879221; op2val:0xffdbc978aa879221; 
   valaddr_reg:x3; val_offset:890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 890*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc978aa879221 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xbc978aa879221 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdbc978aa879221; op2val:0xffdbc978aa879221; 
   valaddr_reg:x3; val_offset:892*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 892*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc978aa879221 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xbc978aa879221 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdbc978aa879221; op2val:0xffdbc978aa879221; 
   valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc978aa879221 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xbc978aa879221 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdbc978aa879221; op2val:0xffdbc978aa879221; 
   valaddr_reg:x3; val_offset:896*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 896*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc978aa879221 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xbc978aa879221 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdbc978aa879221; op2val:0xffdbc978aa879221; 
   valaddr_reg:x3; val_offset:898*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 898*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc4edf85532923 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc4edf85532923 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc4edf85532923; op2val:0xffdc4edf85532923; 
   valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc4edf85532923 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc4edf85532923 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc4edf85532923; op2val:0xffdc4edf85532923; 
   valaddr_reg:x3; val_offset:902*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 902*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc4edf85532923 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc4edf85532923 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc4edf85532923; op2val:0xffdc4edf85532923; 
   valaddr_reg:x3; val_offset:904*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 904*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc4edf85532923 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc4edf85532923 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc4edf85532923; op2val:0xffdc4edf85532923; 
   valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc4edf85532923 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc4edf85532923 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc4edf85532923; op2val:0xffdc4edf85532923; 
   valaddr_reg:x3; val_offset:908*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 908*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc80a67882d6d1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc80a67882d6d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc80a67882d6d1; op2val:0xffdc80a67882d6d1; 
   valaddr_reg:x3; val_offset:910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 910*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc80a67882d6d1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc80a67882d6d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc80a67882d6d1; op2val:0xffdc80a67882d6d1; 
   valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc80a67882d6d1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc80a67882d6d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc80a67882d6d1; op2val:0xffdc80a67882d6d1; 
   valaddr_reg:x3; val_offset:914*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 914*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc80a67882d6d1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc80a67882d6d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc80a67882d6d1; op2val:0xffdc80a67882d6d1; 
   valaddr_reg:x3; val_offset:916*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 916*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc80a67882d6d1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc80a67882d6d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdc80a67882d6d1; op2val:0xffdc80a67882d6d1; 
   valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcd606a3f0f54d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xcd606a3f0f54d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdcd606a3f0f54d; op2val:0xffdcd606a3f0f54d; 
   valaddr_reg:x3; val_offset:920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 920*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcd606a3f0f54d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xcd606a3f0f54d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdcd606a3f0f54d; op2val:0xffdcd606a3f0f54d; 
   valaddr_reg:x3; val_offset:922*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 922*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcd606a3f0f54d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xcd606a3f0f54d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdcd606a3f0f54d; op2val:0xffdcd606a3f0f54d; 
   valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcd606a3f0f54d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xcd606a3f0f54d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdcd606a3f0f54d; op2val:0xffdcd606a3f0f54d; 
   valaddr_reg:x3; val_offset:926*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 926*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcd606a3f0f54d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xcd606a3f0f54d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdcd606a3f0f54d; op2val:0xffdcd606a3f0f54d; 
   valaddr_reg:x3; val_offset:928*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 928*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce7352604fe6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xce7352604fe6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdce7352604fe6b; op2val:0xffdce7352604fe6b; 
   valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce7352604fe6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xce7352604fe6b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdce7352604fe6b; op2val:0xffdce7352604fe6b; 
   valaddr_reg:x3; val_offset:932*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 932*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce7352604fe6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xce7352604fe6b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdce7352604fe6b; op2val:0xffdce7352604fe6b; 
   valaddr_reg:x3; val_offset:934*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 934*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce7352604fe6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xce7352604fe6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdce7352604fe6b; op2val:0xffdce7352604fe6b; 
   valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce7352604fe6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xce7352604fe6b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdce7352604fe6b; op2val:0xffdce7352604fe6b; 
   valaddr_reg:x3; val_offset:938*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 938*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xde18ff8661b6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xde18ff8661b6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdde18ff8661b6b; op2val:0xffdde18ff8661b6b; 
   valaddr_reg:x3; val_offset:940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 940*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xde18ff8661b6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xde18ff8661b6b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdde18ff8661b6b; op2val:0xffdde18ff8661b6b; 
   valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xde18ff8661b6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xde18ff8661b6b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdde18ff8661b6b; op2val:0xffdde18ff8661b6b; 
   valaddr_reg:x3; val_offset:944*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 944*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xde18ff8661b6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xde18ff8661b6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdde18ff8661b6b; op2val:0xffdde18ff8661b6b; 
   valaddr_reg:x3; val_offset:946*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 946*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xde18ff8661b6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xde18ff8661b6b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdde18ff8661b6b; op2val:0xffdde18ff8661b6b; 
   valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe230c7e39a5d7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe230c7e39a5d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde230c7e39a5d7; op2val:0xffde230c7e39a5d7; 
   valaddr_reg:x3; val_offset:950*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 950*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe230c7e39a5d7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe230c7e39a5d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde230c7e39a5d7; op2val:0xffde230c7e39a5d7; 
   valaddr_reg:x3; val_offset:952*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 952*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe230c7e39a5d7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe230c7e39a5d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde230c7e39a5d7; op2val:0xffde230c7e39a5d7; 
   valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe230c7e39a5d7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe230c7e39a5d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde230c7e39a5d7; op2val:0xffde230c7e39a5d7; 
   valaddr_reg:x3; val_offset:956*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 956*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe230c7e39a5d7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe230c7e39a5d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde230c7e39a5d7; op2val:0xffde230c7e39a5d7; 
   valaddr_reg:x3; val_offset:958*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 958*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2f1c5d734347 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe2f1c5d734347 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde2f1c5d734347; op2val:0xffde2f1c5d734347; 
   valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2f1c5d734347 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe2f1c5d734347 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde2f1c5d734347; op2val:0xffde2f1c5d734347; 
   valaddr_reg:x3; val_offset:962*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 962*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2f1c5d734347 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe2f1c5d734347 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde2f1c5d734347; op2val:0xffde2f1c5d734347; 
   valaddr_reg:x3; val_offset:964*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 964*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2f1c5d734347 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe2f1c5d734347 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde2f1c5d734347; op2val:0xffde2f1c5d734347; 
   valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2f1c5d734347 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe2f1c5d734347 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde2f1c5d734347; op2val:0xffde2f1c5d734347; 
   valaddr_reg:x3; val_offset:968*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 968*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe3796147a7f97 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe3796147a7f97 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde3796147a7f97; op2val:0xffde3796147a7f97; 
   valaddr_reg:x3; val_offset:970*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 970*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe3796147a7f97 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe3796147a7f97 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde3796147a7f97; op2val:0xffde3796147a7f97; 
   valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe3796147a7f97 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe3796147a7f97 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde3796147a7f97; op2val:0xffde3796147a7f97; 
   valaddr_reg:x3; val_offset:974*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 974*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe3796147a7f97 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe3796147a7f97 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde3796147a7f97; op2val:0xffde3796147a7f97; 
   valaddr_reg:x3; val_offset:976*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 976*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe3796147a7f97 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe3796147a7f97 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde3796147a7f97; op2val:0xffde3796147a7f97; 
   valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe7f7bd88d7c8f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe7f7bd88d7c8f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde7f7bd88d7c8f; op2val:0xffde7f7bd88d7c8f; 
   valaddr_reg:x3; val_offset:980*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 980*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe7f7bd88d7c8f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe7f7bd88d7c8f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde7f7bd88d7c8f; op2val:0xffde7f7bd88d7c8f; 
   valaddr_reg:x3; val_offset:982*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 982*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe7f7bd88d7c8f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe7f7bd88d7c8f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde7f7bd88d7c8f; op2val:0xffde7f7bd88d7c8f; 
   valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe7f7bd88d7c8f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe7f7bd88d7c8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde7f7bd88d7c8f; op2val:0xffde7f7bd88d7c8f; 
   valaddr_reg:x3; val_offset:986*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 986*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe7f7bd88d7c8f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe7f7bd88d7c8f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde7f7bd88d7c8f; op2val:0xffde7f7bd88d7c8f; 
   valaddr_reg:x3; val_offset:988*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 988*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe809082dd48fb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe809082dd48fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde809082dd48fb; op2val:0xffde809082dd48fb; 
   valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe809082dd48fb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe809082dd48fb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde809082dd48fb; op2val:0xffde809082dd48fb; 
   valaddr_reg:x3; val_offset:992*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 992*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe809082dd48fb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe809082dd48fb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde809082dd48fb; op2val:0xffde809082dd48fb; 
   valaddr_reg:x3; val_offset:994*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 994*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe809082dd48fb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe809082dd48fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde809082dd48fb; op2val:0xffde809082dd48fb; 
   valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe809082dd48fb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe809082dd48fb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde809082dd48fb; op2val:0xffde809082dd48fb; 
   valaddr_reg:x3; val_offset:998*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 998*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe8754038aa2cf and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe8754038aa2cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde8754038aa2cf; op2val:0xffde8754038aa2cf; 
   valaddr_reg:x3; val_offset:1000*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1000*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe8754038aa2cf and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe8754038aa2cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde8754038aa2cf; op2val:0xffde8754038aa2cf; 
   valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe8754038aa2cf and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe8754038aa2cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde8754038aa2cf; op2val:0xffde8754038aa2cf; 
   valaddr_reg:x3; val_offset:1004*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1004*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe8754038aa2cf and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe8754038aa2cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde8754038aa2cf; op2val:0xffde8754038aa2cf; 
   valaddr_reg:x3; val_offset:1006*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1006*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe8754038aa2cf and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe8754038aa2cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde8754038aa2cf; op2val:0xffde8754038aa2cf; 
   valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe989c8dd81bc5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe989c8dd81bc5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde989c8dd81bc5; op2val:0xffde989c8dd81bc5; 
   valaddr_reg:x3; val_offset:1010*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1010*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe989c8dd81bc5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe989c8dd81bc5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde989c8dd81bc5; op2val:0xffde989c8dd81bc5; 
   valaddr_reg:x3; val_offset:1012*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1012*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe989c8dd81bc5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe989c8dd81bc5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde989c8dd81bc5; op2val:0xffde989c8dd81bc5; 
   valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe989c8dd81bc5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe989c8dd81bc5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde989c8dd81bc5; op2val:0xffde989c8dd81bc5; 
   valaddr_reg:x3; val_offset:1016*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1016*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe989c8dd81bc5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe989c8dd81bc5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fde989c8dd81bc5; op2val:0xffde989c8dd81bc5; 
   valaddr_reg:x3; val_offset:1018*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1018*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf2f5c0f43aa65 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf2f5c0f43aa65 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf2f5c0f43aa65; op2val:0xffdf2f5c0f43aa65; 
   valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf2f5c0f43aa65 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf2f5c0f43aa65 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf2f5c0f43aa65; op2val:0xffdf2f5c0f43aa65; 
   valaddr_reg:x3; val_offset:1022*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1022*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf2f5c0f43aa65 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf2f5c0f43aa65 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf2f5c0f43aa65; op2val:0xffdf2f5c0f43aa65; 
   valaddr_reg:x3; val_offset:1024*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1024*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf2f5c0f43aa65 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf2f5c0f43aa65 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf2f5c0f43aa65; op2val:0xffdf2f5c0f43aa65; 
   valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf2f5c0f43aa65 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf2f5c0f43aa65 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf2f5c0f43aa65; op2val:0xffdf2f5c0f43aa65; 
   valaddr_reg:x3; val_offset:1028*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1028*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf4587ce4e6a55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf4587ce4e6a55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf4587ce4e6a55; op2val:0xffdf4587ce4e6a55; 
   valaddr_reg:x3; val_offset:1030*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1030*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf4587ce4e6a55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf4587ce4e6a55 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf4587ce4e6a55; op2val:0xffdf4587ce4e6a55; 
   valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf4587ce4e6a55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf4587ce4e6a55 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf4587ce4e6a55; op2val:0xffdf4587ce4e6a55; 
   valaddr_reg:x3; val_offset:1034*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1034*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf4587ce4e6a55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf4587ce4e6a55 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf4587ce4e6a55; op2val:0xffdf4587ce4e6a55; 
   valaddr_reg:x3; val_offset:1036*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1036*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf4587ce4e6a55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf4587ce4e6a55 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf4587ce4e6a55; op2val:0xffdf4587ce4e6a55; 
   valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf6165c8e35259 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf6165c8e35259 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf6165c8e35259; op2val:0xffdf6165c8e35259; 
   valaddr_reg:x3; val_offset:1040*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1040*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf6165c8e35259 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf6165c8e35259 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf6165c8e35259; op2val:0xffdf6165c8e35259; 
   valaddr_reg:x3; val_offset:1042*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1042*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf6165c8e35259 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf6165c8e35259 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf6165c8e35259; op2val:0xffdf6165c8e35259; 
   valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf6165c8e35259 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf6165c8e35259 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf6165c8e35259; op2val:0xffdf6165c8e35259; 
   valaddr_reg:x3; val_offset:1046*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1046*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf6165c8e35259 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf6165c8e35259 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf6165c8e35259; op2val:0xffdf6165c8e35259; 
   valaddr_reg:x3; val_offset:1048*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1048*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf7a288f1ea41f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf7a288f1ea41f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf7a288f1ea41f; op2val:0xffdf7a288f1ea41f; 
   valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf7a288f1ea41f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf7a288f1ea41f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf7a288f1ea41f; op2val:0xffdf7a288f1ea41f; 
   valaddr_reg:x3; val_offset:1052*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1052*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf7a288f1ea41f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf7a288f1ea41f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf7a288f1ea41f; op2val:0xffdf7a288f1ea41f; 
   valaddr_reg:x3; val_offset:1054*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1054*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf7a288f1ea41f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf7a288f1ea41f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf7a288f1ea41f; op2val:0xffdf7a288f1ea41f; 
   valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf7a288f1ea41f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf7a288f1ea41f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdf7a288f1ea41f; op2val:0xffdf7a288f1ea41f; 
   valaddr_reg:x3; val_offset:1058*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1058*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa73e129b8879 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfa73e129b8879 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdfa73e129b8879; op2val:0xffdfa73e129b8879; 
   valaddr_reg:x3; val_offset:1060*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1060*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa73e129b8879 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfa73e129b8879 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdfa73e129b8879; op2val:0xffdfa73e129b8879; 
   valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa73e129b8879 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfa73e129b8879 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdfa73e129b8879; op2val:0xffdfa73e129b8879; 
   valaddr_reg:x3; val_offset:1064*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1064*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa73e129b8879 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfa73e129b8879 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdfa73e129b8879; op2val:0xffdfa73e129b8879; 
   valaddr_reg:x3; val_offset:1066*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1066*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa73e129b8879 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfa73e129b8879 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdfa73e129b8879; op2val:0xffdfa73e129b8879; 
   valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfe6749ffc4763 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfe6749ffc4763 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdfe6749ffc4763; op2val:0xffdfe6749ffc4763; 
   valaddr_reg:x3; val_offset:1070*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1070*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfe6749ffc4763 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfe6749ffc4763 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdfe6749ffc4763; op2val:0xffdfe6749ffc4763; 
   valaddr_reg:x3; val_offset:1072*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1072*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfe6749ffc4763 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfe6749ffc4763 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdfe6749ffc4763; op2val:0xffdfe6749ffc4763; 
   valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfe6749ffc4763 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfe6749ffc4763 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdfe6749ffc4763; op2val:0xffdfe6749ffc4763; 
   valaddr_reg:x3; val_offset:1076*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1076*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfe6749ffc4763 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfe6749ffc4763 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fdfe6749ffc4763; op2val:0xffdfe6749ffc4763; 
   valaddr_reg:x3; val_offset:1078*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1078*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x01dca4dde57a5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x01dca4dde57a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe01dca4dde57a5; op2val:0xffe01dca4dde57a5; 
   valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x01dca4dde57a5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x01dca4dde57a5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe01dca4dde57a5; op2val:0xffe01dca4dde57a5; 
   valaddr_reg:x3; val_offset:1082*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1082*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x01dca4dde57a5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x01dca4dde57a5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe01dca4dde57a5; op2val:0xffe01dca4dde57a5; 
   valaddr_reg:x3; val_offset:1084*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1084*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x01dca4dde57a5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x01dca4dde57a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe01dca4dde57a5; op2val:0xffe01dca4dde57a5; 
   valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x01dca4dde57a5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x01dca4dde57a5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe01dca4dde57a5; op2val:0xffe01dca4dde57a5; 
   valaddr_reg:x3; val_offset:1088*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1088*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0382dd247f3f9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0382dd247f3f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0382dd247f3f9; op2val:0xffe0382dd247f3f9; 
   valaddr_reg:x3; val_offset:1090*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1090*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0382dd247f3f9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0382dd247f3f9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0382dd247f3f9; op2val:0xffe0382dd247f3f9; 
   valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0382dd247f3f9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0382dd247f3f9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0382dd247f3f9; op2val:0xffe0382dd247f3f9; 
   valaddr_reg:x3; val_offset:1094*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1094*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0382dd247f3f9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0382dd247f3f9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0382dd247f3f9; op2val:0xffe0382dd247f3f9; 
   valaddr_reg:x3; val_offset:1096*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1096*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0382dd247f3f9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0382dd247f3f9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0382dd247f3f9; op2val:0xffe0382dd247f3f9; 
   valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0410cbbfdec45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0410cbbfdec45 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0410cbbfdec45; op2val:0xffe0410cbbfdec45; 
   valaddr_reg:x3; val_offset:1100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1100*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0410cbbfdec45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0410cbbfdec45 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0410cbbfdec45; op2val:0xffe0410cbbfdec45; 
   valaddr_reg:x3; val_offset:1102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1102*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0410cbbfdec45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0410cbbfdec45 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0410cbbfdec45; op2val:0xffe0410cbbfdec45; 
   valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0410cbbfdec45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0410cbbfdec45 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0410cbbfdec45; op2val:0xffe0410cbbfdec45; 
   valaddr_reg:x3; val_offset:1106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1106*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0410cbbfdec45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0410cbbfdec45 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0410cbbfdec45; op2val:0xffe0410cbbfdec45; 
   valaddr_reg:x3; val_offset:1108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1108*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x05c5ccdf19706 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x05c5ccdf19706 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe05c5ccdf19706; op2val:0xffe05c5ccdf19706; 
   valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x05c5ccdf19706 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x05c5ccdf19706 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe05c5ccdf19706; op2val:0xffe05c5ccdf19706; 
   valaddr_reg:x3; val_offset:1112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1112*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x05c5ccdf19706 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x05c5ccdf19706 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe05c5ccdf19706; op2val:0xffe05c5ccdf19706; 
   valaddr_reg:x3; val_offset:1114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1114*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x05c5ccdf19706 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x05c5ccdf19706 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe05c5ccdf19706; op2val:0xffe05c5ccdf19706; 
   valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x05c5ccdf19706 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x05c5ccdf19706 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe05c5ccdf19706; op2val:0xffe05c5ccdf19706; 
   valaddr_reg:x3; val_offset:1118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1118*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x09badb528c6c8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x09badb528c6c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe09badb528c6c8; op2val:0xffe09badb528c6c8; 
   valaddr_reg:x3; val_offset:1120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1120*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x09badb528c6c8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x09badb528c6c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe09badb528c6c8; op2val:0xffe09badb528c6c8; 
   valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x09badb528c6c8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x09badb528c6c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe09badb528c6c8; op2val:0xffe09badb528c6c8; 
   valaddr_reg:x3; val_offset:1124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1124*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x09badb528c6c8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x09badb528c6c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe09badb528c6c8; op2val:0xffe09badb528c6c8; 
   valaddr_reg:x3; val_offset:1126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1126*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x09badb528c6c8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x09badb528c6c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe09badb528c6c8; op2val:0xffe09badb528c6c8; 
   valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0bcd3d6ea260a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0bcd3d6ea260a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0bcd3d6ea260a; op2val:0xffe0bcd3d6ea260a; 
   valaddr_reg:x3; val_offset:1130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1130*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0bcd3d6ea260a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0bcd3d6ea260a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0bcd3d6ea260a; op2val:0xffe0bcd3d6ea260a; 
   valaddr_reg:x3; val_offset:1132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1132*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0bcd3d6ea260a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0bcd3d6ea260a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0bcd3d6ea260a; op2val:0xffe0bcd3d6ea260a; 
   valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0bcd3d6ea260a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0bcd3d6ea260a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0bcd3d6ea260a; op2val:0xffe0bcd3d6ea260a; 
   valaddr_reg:x3; val_offset:1136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1136*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0bcd3d6ea260a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0bcd3d6ea260a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe0bcd3d6ea260a; op2val:0xffe0bcd3d6ea260a; 
   valaddr_reg:x3; val_offset:1138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1138*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x122215f9ac41a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x122215f9ac41a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe122215f9ac41a; op2val:0xffe122215f9ac41a; 
   valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x122215f9ac41a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x122215f9ac41a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe122215f9ac41a; op2val:0xffe122215f9ac41a; 
   valaddr_reg:x3; val_offset:1142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1142*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x122215f9ac41a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x122215f9ac41a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe122215f9ac41a; op2val:0xffe122215f9ac41a; 
   valaddr_reg:x3; val_offset:1144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1144*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x122215f9ac41a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x122215f9ac41a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe122215f9ac41a; op2val:0xffe122215f9ac41a; 
   valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x122215f9ac41a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x122215f9ac41a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe122215f9ac41a; op2val:0xffe122215f9ac41a; 
   valaddr_reg:x3; val_offset:1148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1148*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x14c9836bbe6ff and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x14c9836bbe6ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe14c9836bbe6ff; op2val:0xffe14c9836bbe6ff; 
   valaddr_reg:x3; val_offset:1150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1150*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x14c9836bbe6ff and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x14c9836bbe6ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe14c9836bbe6ff; op2val:0xffe14c9836bbe6ff; 
   valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x14c9836bbe6ff and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x14c9836bbe6ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe14c9836bbe6ff; op2val:0xffe14c9836bbe6ff; 
   valaddr_reg:x3; val_offset:1154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1154*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x14c9836bbe6ff and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x14c9836bbe6ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe14c9836bbe6ff; op2val:0xffe14c9836bbe6ff; 
   valaddr_reg:x3; val_offset:1156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1156*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x14c9836bbe6ff and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x14c9836bbe6ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe14c9836bbe6ff; op2val:0xffe14c9836bbe6ff; 
   valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18d2ef084c097 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18d2ef084c097 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe18d2ef084c097; op2val:0xffe18d2ef084c097; 
   valaddr_reg:x3; val_offset:1160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1160*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18d2ef084c097 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18d2ef084c097 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe18d2ef084c097; op2val:0xffe18d2ef084c097; 
   valaddr_reg:x3; val_offset:1162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1162*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18d2ef084c097 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18d2ef084c097 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe18d2ef084c097; op2val:0xffe18d2ef084c097; 
   valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18d2ef084c097 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18d2ef084c097 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe18d2ef084c097; op2val:0xffe18d2ef084c097; 
   valaddr_reg:x3; val_offset:1166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1166*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18d2ef084c097 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18d2ef084c097 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe18d2ef084c097; op2val:0xffe18d2ef084c097; 
   valaddr_reg:x3; val_offset:1168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1168*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18ef1d7a9fa74 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18ef1d7a9fa74 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe18ef1d7a9fa74; op2val:0xffe18ef1d7a9fa74; 
   valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18ef1d7a9fa74 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18ef1d7a9fa74 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe18ef1d7a9fa74; op2val:0xffe18ef1d7a9fa74; 
   valaddr_reg:x3; val_offset:1172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1172*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18ef1d7a9fa74 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18ef1d7a9fa74 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe18ef1d7a9fa74; op2val:0xffe18ef1d7a9fa74; 
   valaddr_reg:x3; val_offset:1174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1174*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18ef1d7a9fa74 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18ef1d7a9fa74 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe18ef1d7a9fa74; op2val:0xffe18ef1d7a9fa74; 
   valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18ef1d7a9fa74 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18ef1d7a9fa74 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe18ef1d7a9fa74; op2val:0xffe18ef1d7a9fa74; 
   valaddr_reg:x3; val_offset:1178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1178*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19295f298916c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x19295f298916c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe19295f298916c; op2val:0xffe19295f298916c; 
   valaddr_reg:x3; val_offset:1180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1180*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19295f298916c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x19295f298916c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe19295f298916c; op2val:0xffe19295f298916c; 
   valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19295f298916c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x19295f298916c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe19295f298916c; op2val:0xffe19295f298916c; 
   valaddr_reg:x3; val_offset:1184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1184*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19295f298916c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x19295f298916c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe19295f298916c; op2val:0xffe19295f298916c; 
   valaddr_reg:x3; val_offset:1186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1186*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19295f298916c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x19295f298916c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe19295f298916c; op2val:0xffe19295f298916c; 
   valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f06fdec36709 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1f06fdec36709 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe1f06fdec36709; op2val:0xffe1f06fdec36709; 
   valaddr_reg:x3; val_offset:1190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1190*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f06fdec36709 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1f06fdec36709 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe1f06fdec36709; op2val:0xffe1f06fdec36709; 
   valaddr_reg:x3; val_offset:1192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1192*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f06fdec36709 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1f06fdec36709 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe1f06fdec36709; op2val:0xffe1f06fdec36709; 
   valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f06fdec36709 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1f06fdec36709 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe1f06fdec36709; op2val:0xffe1f06fdec36709; 
   valaddr_reg:x3; val_offset:1196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1196*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f06fdec36709 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1f06fdec36709 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe1f06fdec36709; op2val:0xffe1f06fdec36709; 
   valaddr_reg:x3; val_offset:1198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1198*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2362beb7fcccc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2362beb7fcccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2362beb7fcccc; op2val:0xffe2362beb7fcccc; 
   valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2362beb7fcccc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2362beb7fcccc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2362beb7fcccc; op2val:0xffe2362beb7fcccc; 
   valaddr_reg:x3; val_offset:1202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1202*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2362beb7fcccc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2362beb7fcccc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2362beb7fcccc; op2val:0xffe2362beb7fcccc; 
   valaddr_reg:x3; val_offset:1204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1204*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2362beb7fcccc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2362beb7fcccc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2362beb7fcccc; op2val:0xffe2362beb7fcccc; 
   valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2362beb7fcccc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2362beb7fcccc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2362beb7fcccc; op2val:0xffe2362beb7fcccc; 
   valaddr_reg:x3; val_offset:1208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1208*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x25d29d05cd288 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x25d29d05cd288 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe25d29d05cd288; op2val:0xffe25d29d05cd288; 
   valaddr_reg:x3; val_offset:1210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1210*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x25d29d05cd288 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x25d29d05cd288 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe25d29d05cd288; op2val:0xffe25d29d05cd288; 
   valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x25d29d05cd288 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x25d29d05cd288 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe25d29d05cd288; op2val:0xffe25d29d05cd288; 
   valaddr_reg:x3; val_offset:1214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1214*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x25d29d05cd288 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x25d29d05cd288 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe25d29d05cd288; op2val:0xffe25d29d05cd288; 
   valaddr_reg:x3; val_offset:1216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1216*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x25d29d05cd288 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x25d29d05cd288 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe25d29d05cd288; op2val:0xffe25d29d05cd288; 
   valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26bbbacf7eaef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26bbbacf7eaef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe26bbbacf7eaef; op2val:0xffe26bbbacf7eaef; 
   valaddr_reg:x3; val_offset:1220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1220*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26bbbacf7eaef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26bbbacf7eaef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe26bbbacf7eaef; op2val:0xffe26bbbacf7eaef; 
   valaddr_reg:x3; val_offset:1222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1222*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26bbbacf7eaef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26bbbacf7eaef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe26bbbacf7eaef; op2val:0xffe26bbbacf7eaef; 
   valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26bbbacf7eaef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26bbbacf7eaef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe26bbbacf7eaef; op2val:0xffe26bbbacf7eaef; 
   valaddr_reg:x3; val_offset:1226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1226*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26bbbacf7eaef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26bbbacf7eaef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe26bbbacf7eaef; op2val:0xffe26bbbacf7eaef; 
   valaddr_reg:x3; val_offset:1228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1228*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26e34e07a9172 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26e34e07a9172 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe26e34e07a9172; op2val:0xffe26e34e07a9172; 
   valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26e34e07a9172 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26e34e07a9172 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe26e34e07a9172; op2val:0xffe26e34e07a9172; 
   valaddr_reg:x3; val_offset:1232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1232*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26e34e07a9172 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26e34e07a9172 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe26e34e07a9172; op2val:0xffe26e34e07a9172; 
   valaddr_reg:x3; val_offset:1234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1234*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26e34e07a9172 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26e34e07a9172 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe26e34e07a9172; op2val:0xffe26e34e07a9172; 
   valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26e34e07a9172 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26e34e07a9172 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe26e34e07a9172; op2val:0xffe26e34e07a9172; 
   valaddr_reg:x3; val_offset:1238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1238*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2c3b1b8ef2d41 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2c3b1b8ef2d41 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2c3b1b8ef2d41; op2val:0xffe2c3b1b8ef2d41; 
   valaddr_reg:x3; val_offset:1240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1240*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2c3b1b8ef2d41 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2c3b1b8ef2d41 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2c3b1b8ef2d41; op2val:0xffe2c3b1b8ef2d41; 
   valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2c3b1b8ef2d41 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2c3b1b8ef2d41 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2c3b1b8ef2d41; op2val:0xffe2c3b1b8ef2d41; 
   valaddr_reg:x3; val_offset:1244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1244*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2c3b1b8ef2d41 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2c3b1b8ef2d41 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2c3b1b8ef2d41; op2val:0xffe2c3b1b8ef2d41; 
   valaddr_reg:x3; val_offset:1246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1246*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2c3b1b8ef2d41 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2c3b1b8ef2d41 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2c3b1b8ef2d41; op2val:0xffe2c3b1b8ef2d41; 
   valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2cdc24d268f9f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2cdc24d268f9f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2cdc24d268f9f; op2val:0xffe2cdc24d268f9f; 
   valaddr_reg:x3; val_offset:1250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1250*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2cdc24d268f9f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2cdc24d268f9f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2cdc24d268f9f; op2val:0xffe2cdc24d268f9f; 
   valaddr_reg:x3; val_offset:1252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1252*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2cdc24d268f9f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2cdc24d268f9f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2cdc24d268f9f; op2val:0xffe2cdc24d268f9f; 
   valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2cdc24d268f9f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2cdc24d268f9f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2cdc24d268f9f; op2val:0xffe2cdc24d268f9f; 
   valaddr_reg:x3; val_offset:1256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1256*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2cdc24d268f9f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2cdc24d268f9f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe2cdc24d268f9f; op2val:0xffe2cdc24d268f9f; 
   valaddr_reg:x3; val_offset:1258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1258*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x314c82f3115df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x314c82f3115df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe314c82f3115df; op2val:0xffe314c82f3115df; 
   valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x314c82f3115df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x314c82f3115df and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe314c82f3115df; op2val:0xffe314c82f3115df; 
   valaddr_reg:x3; val_offset:1262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1262*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x314c82f3115df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x314c82f3115df and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe314c82f3115df; op2val:0xffe314c82f3115df; 
   valaddr_reg:x3; val_offset:1264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1264*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x314c82f3115df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x314c82f3115df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe314c82f3115df; op2val:0xffe314c82f3115df; 
   valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x314c82f3115df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x314c82f3115df and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe314c82f3115df; op2val:0xffe314c82f3115df; 
   valaddr_reg:x3; val_offset:1268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1268*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3833da7b9aa37 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3833da7b9aa37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3833da7b9aa37; op2val:0xffe3833da7b9aa37; 
   valaddr_reg:x3; val_offset:1270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1270*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3833da7b9aa37 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3833da7b9aa37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3833da7b9aa37; op2val:0xffe3833da7b9aa37; 
   valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3833da7b9aa37 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3833da7b9aa37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3833da7b9aa37; op2val:0xffe3833da7b9aa37; 
   valaddr_reg:x3; val_offset:1274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1274*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3833da7b9aa37 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3833da7b9aa37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3833da7b9aa37; op2val:0xffe3833da7b9aa37; 
   valaddr_reg:x3; val_offset:1276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1276*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3833da7b9aa37 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3833da7b9aa37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3833da7b9aa37; op2val:0xffe3833da7b9aa37; 
   valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1278*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x38619d6cda314 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x38619d6cda314 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe38619d6cda314; op2val:0xffe38619d6cda314; 
   valaddr_reg:x3; val_offset:1280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1280*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x38619d6cda314 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x38619d6cda314 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe38619d6cda314; op2val:0xffe38619d6cda314; 
   valaddr_reg:x3; val_offset:1282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1282*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x38619d6cda314 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x38619d6cda314 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe38619d6cda314; op2val:0xffe38619d6cda314; 
   valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x38619d6cda314 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x38619d6cda314 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe38619d6cda314; op2val:0xffe38619d6cda314; 
   valaddr_reg:x3; val_offset:1286*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1286*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x38619d6cda314 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x38619d6cda314 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe38619d6cda314; op2val:0xffe38619d6cda314; 
   valaddr_reg:x3; val_offset:1288*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1288*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39bd67fecd9d5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39bd67fecd9d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe39bd67fecd9d5; op2val:0xffe39bd67fecd9d5; 
   valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39bd67fecd9d5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39bd67fecd9d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe39bd67fecd9d5; op2val:0xffe39bd67fecd9d5; 
   valaddr_reg:x3; val_offset:1292*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1292*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39bd67fecd9d5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39bd67fecd9d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe39bd67fecd9d5; op2val:0xffe39bd67fecd9d5; 
   valaddr_reg:x3; val_offset:1294*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1294*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39bd67fecd9d5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39bd67fecd9d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe39bd67fecd9d5; op2val:0xffe39bd67fecd9d5; 
   valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39bd67fecd9d5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39bd67fecd9d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe39bd67fecd9d5; op2val:0xffe39bd67fecd9d5; 
   valaddr_reg:x3; val_offset:1298*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1298*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39beb50761e3d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39beb50761e3d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe39beb50761e3d; op2val:0xffe39beb50761e3d; 
   valaddr_reg:x3; val_offset:1300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1300*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39beb50761e3d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39beb50761e3d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe39beb50761e3d; op2val:0xffe39beb50761e3d; 
   valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39beb50761e3d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39beb50761e3d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe39beb50761e3d; op2val:0xffe39beb50761e3d; 
   valaddr_reg:x3; val_offset:1304*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1304*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39beb50761e3d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39beb50761e3d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe39beb50761e3d; op2val:0xffe39beb50761e3d; 
   valaddr_reg:x3; val_offset:1306*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1306*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39beb50761e3d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39beb50761e3d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe39beb50761e3d; op2val:0xffe39beb50761e3d; 
   valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c9adc7329695 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3c9adc7329695 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3c9adc7329695; op2val:0xffe3c9adc7329695; 
   valaddr_reg:x3; val_offset:1310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1310*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c9adc7329695 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3c9adc7329695 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3c9adc7329695; op2val:0xffe3c9adc7329695; 
   valaddr_reg:x3; val_offset:1312*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1312*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c9adc7329695 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3c9adc7329695 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3c9adc7329695; op2val:0xffe3c9adc7329695; 
   valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c9adc7329695 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3c9adc7329695 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3c9adc7329695; op2val:0xffe3c9adc7329695; 
   valaddr_reg:x3; val_offset:1316*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1316*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c9adc7329695 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3c9adc7329695 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3c9adc7329695; op2val:0xffe3c9adc7329695; 
   valaddr_reg:x3; val_offset:1318*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1318*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3db72bc24857c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3db72bc24857c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3db72bc24857c; op2val:0xffe3db72bc24857c; 
   valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3db72bc24857c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3db72bc24857c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3db72bc24857c; op2val:0xffe3db72bc24857c; 
   valaddr_reg:x3; val_offset:1322*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1322*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3db72bc24857c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3db72bc24857c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3db72bc24857c; op2val:0xffe3db72bc24857c; 
   valaddr_reg:x3; val_offset:1324*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1324*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3db72bc24857c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3db72bc24857c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3db72bc24857c; op2val:0xffe3db72bc24857c; 
   valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3db72bc24857c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3db72bc24857c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe3db72bc24857c; op2val:0xffe3db72bc24857c; 
   valaddr_reg:x3; val_offset:1328*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1328*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x40e45564208fa and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x40e45564208fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe40e45564208fa; op2val:0xffe40e45564208fa; 
   valaddr_reg:x3; val_offset:1330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1330*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x40e45564208fa and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x40e45564208fa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe40e45564208fa; op2val:0xffe40e45564208fa; 
   valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x40e45564208fa and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x40e45564208fa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe40e45564208fa; op2val:0xffe40e45564208fa; 
   valaddr_reg:x3; val_offset:1334*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1334*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x40e45564208fa and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x40e45564208fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe40e45564208fa; op2val:0xffe40e45564208fa; 
   valaddr_reg:x3; val_offset:1336*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1336*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x40e45564208fa and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x40e45564208fa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe40e45564208fa; op2val:0xffe40e45564208fa; 
   valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x428af114baf6a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x428af114baf6a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe428af114baf6a; op2val:0xffe428af114baf6a; 
   valaddr_reg:x3; val_offset:1340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1340*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x428af114baf6a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x428af114baf6a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe428af114baf6a; op2val:0xffe428af114baf6a; 
   valaddr_reg:x3; val_offset:1342*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1342*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x428af114baf6a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x428af114baf6a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe428af114baf6a; op2val:0xffe428af114baf6a; 
   valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x428af114baf6a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x428af114baf6a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe428af114baf6a; op2val:0xffe428af114baf6a; 
   valaddr_reg:x3; val_offset:1346*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1346*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x428af114baf6a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x428af114baf6a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe428af114baf6a; op2val:0xffe428af114baf6a; 
   valaddr_reg:x3; val_offset:1348*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1348*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42a2ac1575123 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x42a2ac1575123 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe42a2ac1575123; op2val:0xffe42a2ac1575123; 
   valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42a2ac1575123 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x42a2ac1575123 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe42a2ac1575123; op2val:0xffe42a2ac1575123; 
   valaddr_reg:x3; val_offset:1352*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1352*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42a2ac1575123 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x42a2ac1575123 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe42a2ac1575123; op2val:0xffe42a2ac1575123; 
   valaddr_reg:x3; val_offset:1354*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1354*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42a2ac1575123 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x42a2ac1575123 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe42a2ac1575123; op2val:0xffe42a2ac1575123; 
   valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42a2ac1575123 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x42a2ac1575123 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe42a2ac1575123; op2val:0xffe42a2ac1575123; 
   valaddr_reg:x3; val_offset:1358*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1358*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x43be7b7bc5458 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x43be7b7bc5458 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe43be7b7bc5458; op2val:0xffe43be7b7bc5458; 
   valaddr_reg:x3; val_offset:1360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1360*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x43be7b7bc5458 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x43be7b7bc5458 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe43be7b7bc5458; op2val:0xffe43be7b7bc5458; 
   valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x43be7b7bc5458 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x43be7b7bc5458 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe43be7b7bc5458; op2val:0xffe43be7b7bc5458; 
   valaddr_reg:x3; val_offset:1364*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1364*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x43be7b7bc5458 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x43be7b7bc5458 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe43be7b7bc5458; op2val:0xffe43be7b7bc5458; 
   valaddr_reg:x3; val_offset:1366*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1366*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x43be7b7bc5458 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x43be7b7bc5458 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe43be7b7bc5458; op2val:0xffe43be7b7bc5458; 
   valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x442435bea0eb5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x442435bea0eb5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe442435bea0eb5; op2val:0xffe442435bea0eb5; 
   valaddr_reg:x3; val_offset:1370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1370*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x442435bea0eb5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x442435bea0eb5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe442435bea0eb5; op2val:0xffe442435bea0eb5; 
   valaddr_reg:x3; val_offset:1372*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1372*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x442435bea0eb5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x442435bea0eb5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe442435bea0eb5; op2val:0xffe442435bea0eb5; 
   valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x442435bea0eb5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x442435bea0eb5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe442435bea0eb5; op2val:0xffe442435bea0eb5; 
   valaddr_reg:x3; val_offset:1376*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1376*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x442435bea0eb5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x442435bea0eb5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe442435bea0eb5; op2val:0xffe442435bea0eb5; 
   valaddr_reg:x3; val_offset:1378*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1378*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x447a9936a43d3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x447a9936a43d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe447a9936a43d3; op2val:0xffe447a9936a43d3; 
   valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x447a9936a43d3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x447a9936a43d3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe447a9936a43d3; op2val:0xffe447a9936a43d3; 
   valaddr_reg:x3; val_offset:1382*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1382*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x447a9936a43d3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x447a9936a43d3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe447a9936a43d3; op2val:0xffe447a9936a43d3; 
   valaddr_reg:x3; val_offset:1384*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1384*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x447a9936a43d3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x447a9936a43d3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe447a9936a43d3; op2val:0xffe447a9936a43d3; 
   valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x447a9936a43d3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x447a9936a43d3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe447a9936a43d3; op2val:0xffe447a9936a43d3; 
   valaddr_reg:x3; val_offset:1388*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1388*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x451eb54c10b8b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x451eb54c10b8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe451eb54c10b8b; op2val:0xffe451eb54c10b8b; 
   valaddr_reg:x3; val_offset:1390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1390*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x451eb54c10b8b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x451eb54c10b8b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe451eb54c10b8b; op2val:0xffe451eb54c10b8b; 
   valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x451eb54c10b8b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x451eb54c10b8b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe451eb54c10b8b; op2val:0xffe451eb54c10b8b; 
   valaddr_reg:x3; val_offset:1394*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1394*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x451eb54c10b8b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x451eb54c10b8b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe451eb54c10b8b; op2val:0xffe451eb54c10b8b; 
   valaddr_reg:x3; val_offset:1396*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1396*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x451eb54c10b8b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x451eb54c10b8b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe451eb54c10b8b; op2val:0xffe451eb54c10b8b; 
   valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x465936dcae3fb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x465936dcae3fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe465936dcae3fb; op2val:0xffe465936dcae3fb; 
   valaddr_reg:x3; val_offset:1400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1400*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x465936dcae3fb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x465936dcae3fb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe465936dcae3fb; op2val:0xffe465936dcae3fb; 
   valaddr_reg:x3; val_offset:1402*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1402*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x465936dcae3fb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x465936dcae3fb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe465936dcae3fb; op2val:0xffe465936dcae3fb; 
   valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x465936dcae3fb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x465936dcae3fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe465936dcae3fb; op2val:0xffe465936dcae3fb; 
   valaddr_reg:x3; val_offset:1406*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1406*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x465936dcae3fb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x465936dcae3fb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe465936dcae3fb; op2val:0xffe465936dcae3fb; 
   valaddr_reg:x3; val_offset:1408*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1408*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c6c848cb47df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4c6c848cb47df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4c6c848cb47df; op2val:0xffe4c6c848cb47df; 
   valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c6c848cb47df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4c6c848cb47df and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4c6c848cb47df; op2val:0xffe4c6c848cb47df; 
   valaddr_reg:x3; val_offset:1412*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1412*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c6c848cb47df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4c6c848cb47df and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4c6c848cb47df; op2val:0xffe4c6c848cb47df; 
   valaddr_reg:x3; val_offset:1414*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1414*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c6c848cb47df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4c6c848cb47df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4c6c848cb47df; op2val:0xffe4c6c848cb47df; 
   valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c6c848cb47df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4c6c848cb47df and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4c6c848cb47df; op2val:0xffe4c6c848cb47df; 
   valaddr_reg:x3; val_offset:1418*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1418*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d3375e946b52 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4d3375e946b52 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4d3375e946b52; op2val:0xffe4d3375e946b52; 
   valaddr_reg:x3; val_offset:1420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1420*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d3375e946b52 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4d3375e946b52 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4d3375e946b52; op2val:0xffe4d3375e946b52; 
   valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d3375e946b52 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4d3375e946b52 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4d3375e946b52; op2val:0xffe4d3375e946b52; 
   valaddr_reg:x3; val_offset:1424*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1424*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d3375e946b52 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4d3375e946b52 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4d3375e946b52; op2val:0xffe4d3375e946b52; 
   valaddr_reg:x3; val_offset:1426*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1426*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d3375e946b52 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4d3375e946b52 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4d3375e946b52; op2val:0xffe4d3375e946b52; 
   valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4f8b971fa5a72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4f8b971fa5a72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4f8b971fa5a72; op2val:0xffe4f8b971fa5a72; 
   valaddr_reg:x3; val_offset:1430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1430*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4f8b971fa5a72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4f8b971fa5a72 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4f8b971fa5a72; op2val:0xffe4f8b971fa5a72; 
   valaddr_reg:x3; val_offset:1432*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1432*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4f8b971fa5a72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4f8b971fa5a72 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4f8b971fa5a72; op2val:0xffe4f8b971fa5a72; 
   valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4f8b971fa5a72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4f8b971fa5a72 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4f8b971fa5a72; op2val:0xffe4f8b971fa5a72; 
   valaddr_reg:x3; val_offset:1436*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1436*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4f8b971fa5a72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4f8b971fa5a72 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe4f8b971fa5a72; op2val:0xffe4f8b971fa5a72; 
   valaddr_reg:x3; val_offset:1438*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1438*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x530b56ed605ac and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x530b56ed605ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe530b56ed605ac; op2val:0xffe530b56ed605ac; 
   valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x530b56ed605ac and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x530b56ed605ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe530b56ed605ac; op2val:0xffe530b56ed605ac; 
   valaddr_reg:x3; val_offset:1442*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1442*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x530b56ed605ac and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x530b56ed605ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe530b56ed605ac; op2val:0xffe530b56ed605ac; 
   valaddr_reg:x3; val_offset:1444*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1444*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x530b56ed605ac and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x530b56ed605ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe530b56ed605ac; op2val:0xffe530b56ed605ac; 
   valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x530b56ed605ac and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x530b56ed605ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe530b56ed605ac; op2val:0xffe530b56ed605ac; 
   valaddr_reg:x3; val_offset:1448*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1448*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x57132c37fb117 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe57132c37fb117; op2val:0xffe57132c37fb117; 
   valaddr_reg:x3; val_offset:1450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1450*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x57132c37fb117 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe57132c37fb117; op2val:0xffe57132c37fb117; 
   valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x57132c37fb117 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe57132c37fb117; op2val:0xffe57132c37fb117; 
   valaddr_reg:x3; val_offset:1454*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1454*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x57132c37fb117 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe57132c37fb117; op2val:0xffe57132c37fb117; 
   valaddr_reg:x3; val_offset:1456*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1456*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x57132c37fb117 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe57132c37fb117; op2val:0xffe57132c37fb117; 
   valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5864580d04bef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5864580d04bef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5864580d04bef; op2val:0xffe5864580d04bef; 
   valaddr_reg:x3; val_offset:1460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1460*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5864580d04bef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5864580d04bef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5864580d04bef; op2val:0xffe5864580d04bef; 
   valaddr_reg:x3; val_offset:1462*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1462*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5864580d04bef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5864580d04bef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5864580d04bef; op2val:0xffe5864580d04bef; 
   valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5864580d04bef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5864580d04bef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5864580d04bef; op2val:0xffe5864580d04bef; 
   valaddr_reg:x3; val_offset:1466*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1466*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5864580d04bef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5864580d04bef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5864580d04bef; op2val:0xffe5864580d04bef; 
   valaddr_reg:x3; val_offset:1468*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1468*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5bcd8bcde77b5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5bcd8bcde77b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5bcd8bcde77b5; op2val:0xffe5bcd8bcde77b5; 
   valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5bcd8bcde77b5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5bcd8bcde77b5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5bcd8bcde77b5; op2val:0xffe5bcd8bcde77b5; 
   valaddr_reg:x3; val_offset:1472*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1472*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5bcd8bcde77b5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5bcd8bcde77b5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5bcd8bcde77b5; op2val:0xffe5bcd8bcde77b5; 
   valaddr_reg:x3; val_offset:1474*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1474*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5bcd8bcde77b5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5bcd8bcde77b5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5bcd8bcde77b5; op2val:0xffe5bcd8bcde77b5; 
   valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5bcd8bcde77b5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5bcd8bcde77b5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5bcd8bcde77b5; op2val:0xffe5bcd8bcde77b5; 
   valaddr_reg:x3; val_offset:1478*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1478*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c762dc4bc5d6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5c762dc4bc5d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5c762dc4bc5d6; op2val:0xffe5c762dc4bc5d6; 
   valaddr_reg:x3; val_offset:1480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1480*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c762dc4bc5d6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5c762dc4bc5d6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5c762dc4bc5d6; op2val:0xffe5c762dc4bc5d6; 
   valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c762dc4bc5d6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5c762dc4bc5d6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5c762dc4bc5d6; op2val:0xffe5c762dc4bc5d6; 
   valaddr_reg:x3; val_offset:1484*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1484*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c762dc4bc5d6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5c762dc4bc5d6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5c762dc4bc5d6; op2val:0xffe5c762dc4bc5d6; 
   valaddr_reg:x3; val_offset:1486*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1486*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c762dc4bc5d6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5c762dc4bc5d6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5c762dc4bc5d6; op2val:0xffe5c762dc4bc5d6; 
   valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5cab9bd09e6c4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5cab9bd09e6c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5cab9bd09e6c4; op2val:0xffe5cab9bd09e6c4; 
   valaddr_reg:x3; val_offset:1490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1490*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5cab9bd09e6c4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5cab9bd09e6c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5cab9bd09e6c4; op2val:0xffe5cab9bd09e6c4; 
   valaddr_reg:x3; val_offset:1492*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1492*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5cab9bd09e6c4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5cab9bd09e6c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5cab9bd09e6c4; op2val:0xffe5cab9bd09e6c4; 
   valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5cab9bd09e6c4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5cab9bd09e6c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5cab9bd09e6c4; op2val:0xffe5cab9bd09e6c4; 
   valaddr_reg:x3; val_offset:1496*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1496*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5cab9bd09e6c4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5cab9bd09e6c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe5cab9bd09e6c4; op2val:0xffe5cab9bd09e6c4; 
   valaddr_reg:x3; val_offset:1498*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1498*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x66315a9fdae1d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x66315a9fdae1d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe66315a9fdae1d; op2val:0xffe66315a9fdae1d; 
   valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x66315a9fdae1d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x66315a9fdae1d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe66315a9fdae1d; op2val:0xffe66315a9fdae1d; 
   valaddr_reg:x3; val_offset:1502*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1502*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x66315a9fdae1d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x66315a9fdae1d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe66315a9fdae1d; op2val:0xffe66315a9fdae1d; 
   valaddr_reg:x3; val_offset:1504*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1504*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x66315a9fdae1d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x66315a9fdae1d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe66315a9fdae1d; op2val:0xffe66315a9fdae1d; 
   valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x66315a9fdae1d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x66315a9fdae1d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe66315a9fdae1d; op2val:0xffe66315a9fdae1d; 
   valaddr_reg:x3; val_offset:1508*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1508*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6756366451777 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6756366451777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6756366451777; op2val:0xffe6756366451777; 
   valaddr_reg:x3; val_offset:1510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1510*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6756366451777 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6756366451777 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6756366451777; op2val:0xffe6756366451777; 
   valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6756366451777 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6756366451777 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6756366451777; op2val:0xffe6756366451777; 
   valaddr_reg:x3; val_offset:1514*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1514*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6756366451777 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6756366451777 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6756366451777; op2val:0xffe6756366451777; 
   valaddr_reg:x3; val_offset:1516*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1516*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6756366451777 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6756366451777 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6756366451777; op2val:0xffe6756366451777; 
   valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x676d1681c4823 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x676d1681c4823 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe676d1681c4823; op2val:0xffe676d1681c4823; 
   valaddr_reg:x3; val_offset:1520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1520*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x676d1681c4823 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x676d1681c4823 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe676d1681c4823; op2val:0xffe676d1681c4823; 
   valaddr_reg:x3; val_offset:1522*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1522*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x676d1681c4823 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x676d1681c4823 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe676d1681c4823; op2val:0xffe676d1681c4823; 
   valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x676d1681c4823 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x676d1681c4823 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe676d1681c4823; op2val:0xffe676d1681c4823; 
   valaddr_reg:x3; val_offset:1526*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1526*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x676d1681c4823 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x676d1681c4823 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe676d1681c4823; op2val:0xffe676d1681c4823; 
   valaddr_reg:x3; val_offset:1528*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1528*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x691ae7e1929e8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x691ae7e1929e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe691ae7e1929e8; op2val:0xffe691ae7e1929e8; 
   valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x691ae7e1929e8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x691ae7e1929e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe691ae7e1929e8; op2val:0xffe691ae7e1929e8; 
   valaddr_reg:x3; val_offset:1532*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1532*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x691ae7e1929e8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x691ae7e1929e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe691ae7e1929e8; op2val:0xffe691ae7e1929e8; 
   valaddr_reg:x3; val_offset:1534*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1534*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x691ae7e1929e8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x691ae7e1929e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe691ae7e1929e8; op2val:0xffe691ae7e1929e8; 
   valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x691ae7e1929e8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x691ae7e1929e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe691ae7e1929e8; op2val:0xffe691ae7e1929e8; 
   valaddr_reg:x3; val_offset:1538*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1538*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69c26ac7fce60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x69c26ac7fce60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe69c26ac7fce60; op2val:0xffe69c26ac7fce60; 
   valaddr_reg:x3; val_offset:1540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1540*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69c26ac7fce60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x69c26ac7fce60 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe69c26ac7fce60; op2val:0xffe69c26ac7fce60; 
   valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69c26ac7fce60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x69c26ac7fce60 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe69c26ac7fce60; op2val:0xffe69c26ac7fce60; 
   valaddr_reg:x3; val_offset:1544*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1544*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69c26ac7fce60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x69c26ac7fce60 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe69c26ac7fce60; op2val:0xffe69c26ac7fce60; 
   valaddr_reg:x3; val_offset:1546*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1546*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69c26ac7fce60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x69c26ac7fce60 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe69c26ac7fce60; op2val:0xffe69c26ac7fce60; 
   valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e65a8d3dbea5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6e65a8d3dbea5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6e65a8d3dbea5; op2val:0xffe6e65a8d3dbea5; 
   valaddr_reg:x3; val_offset:1550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1550*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e65a8d3dbea5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6e65a8d3dbea5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6e65a8d3dbea5; op2val:0xffe6e65a8d3dbea5; 
   valaddr_reg:x3; val_offset:1552*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1552*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e65a8d3dbea5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6e65a8d3dbea5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6e65a8d3dbea5; op2val:0xffe6e65a8d3dbea5; 
   valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e65a8d3dbea5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6e65a8d3dbea5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6e65a8d3dbea5; op2val:0xffe6e65a8d3dbea5; 
   valaddr_reg:x3; val_offset:1556*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1556*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e65a8d3dbea5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6e65a8d3dbea5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6e65a8d3dbea5; op2val:0xffe6e65a8d3dbea5; 
   valaddr_reg:x3; val_offset:1558*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1558*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f335d0539418 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f335d0539418 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6f335d0539418; op2val:0xffe6f335d0539418; 
   valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f335d0539418 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f335d0539418 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6f335d0539418; op2val:0xffe6f335d0539418; 
   valaddr_reg:x3; val_offset:1562*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1562*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f335d0539418 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f335d0539418 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6f335d0539418; op2val:0xffe6f335d0539418; 
   valaddr_reg:x3; val_offset:1564*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1564*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f335d0539418 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f335d0539418 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6f335d0539418; op2val:0xffe6f335d0539418; 
   valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f335d0539418 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f335d0539418 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6f335d0539418; op2val:0xffe6f335d0539418; 
   valaddr_reg:x3; val_offset:1568*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1568*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f451c304de2e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f451c304de2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6f451c304de2e; op2val:0xffe6f451c304de2e; 
   valaddr_reg:x3; val_offset:1570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1570*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f451c304de2e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f451c304de2e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6f451c304de2e; op2val:0xffe6f451c304de2e; 
   valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f451c304de2e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f451c304de2e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6f451c304de2e; op2val:0xffe6f451c304de2e; 
   valaddr_reg:x3; val_offset:1574*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1574*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f451c304de2e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f451c304de2e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6f451c304de2e; op2val:0xffe6f451c304de2e; 
   valaddr_reg:x3; val_offset:1576*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1576*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f451c304de2e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f451c304de2e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6f451c304de2e; op2val:0xffe6f451c304de2e; 
   valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6faef3ad3537e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6faef3ad3537e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6faef3ad3537e; op2val:0xffe6faef3ad3537e; 
   valaddr_reg:x3; val_offset:1580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1580*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6faef3ad3537e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6faef3ad3537e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6faef3ad3537e; op2val:0xffe6faef3ad3537e; 
   valaddr_reg:x3; val_offset:1582*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1582*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6faef3ad3537e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6faef3ad3537e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6faef3ad3537e; op2val:0xffe6faef3ad3537e; 
   valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6faef3ad3537e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6faef3ad3537e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6faef3ad3537e; op2val:0xffe6faef3ad3537e; 
   valaddr_reg:x3; val_offset:1586*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1586*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6faef3ad3537e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6faef3ad3537e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6faef3ad3537e; op2val:0xffe6faef3ad3537e; 
   valaddr_reg:x3; val_offset:1588*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1588*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fdf2805ff4db and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6fdf2805ff4db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6fdf2805ff4db; op2val:0xffe6fdf2805ff4db; 
   valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fdf2805ff4db and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6fdf2805ff4db and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6fdf2805ff4db; op2val:0xffe6fdf2805ff4db; 
   valaddr_reg:x3; val_offset:1592*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1592*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fdf2805ff4db and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6fdf2805ff4db and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6fdf2805ff4db; op2val:0xffe6fdf2805ff4db; 
   valaddr_reg:x3; val_offset:1594*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1594*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fdf2805ff4db and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6fdf2805ff4db and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6fdf2805ff4db; op2val:0xffe6fdf2805ff4db; 
   valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fdf2805ff4db and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6fdf2805ff4db and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe6fdf2805ff4db; op2val:0xffe6fdf2805ff4db; 
   valaddr_reg:x3; val_offset:1598*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1598*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x707d21f5c40de and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x707d21f5c40de and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe707d21f5c40de; op2val:0xffe707d21f5c40de; 
   valaddr_reg:x3; val_offset:1600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1600*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x707d21f5c40de and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x707d21f5c40de and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe707d21f5c40de; op2val:0xffe707d21f5c40de; 
   valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x707d21f5c40de and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x707d21f5c40de and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe707d21f5c40de; op2val:0xffe707d21f5c40de; 
   valaddr_reg:x3; val_offset:1604*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1604*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x707d21f5c40de and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x707d21f5c40de and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe707d21f5c40de; op2val:0xffe707d21f5c40de; 
   valaddr_reg:x3; val_offset:1606*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1606*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x707d21f5c40de and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x707d21f5c40de and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe707d21f5c40de; op2val:0xffe707d21f5c40de; 
   valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x737bdc485a77d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x737bdc485a77d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe737bdc485a77d; op2val:0xffe737bdc485a77d; 
   valaddr_reg:x3; val_offset:1610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1610*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x737bdc485a77d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x737bdc485a77d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe737bdc485a77d; op2val:0xffe737bdc485a77d; 
   valaddr_reg:x3; val_offset:1612*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1612*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x737bdc485a77d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x737bdc485a77d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe737bdc485a77d; op2val:0xffe737bdc485a77d; 
   valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x737bdc485a77d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x737bdc485a77d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe737bdc485a77d; op2val:0xffe737bdc485a77d; 
   valaddr_reg:x3; val_offset:1616*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1616*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x737bdc485a77d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x737bdc485a77d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe737bdc485a77d; op2val:0xffe737bdc485a77d; 
   valaddr_reg:x3; val_offset:1618*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1618*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x76940d9e18057 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x76940d9e18057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe76940d9e18057; op2val:0xffe76940d9e18057; 
   valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x76940d9e18057 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x76940d9e18057 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe76940d9e18057; op2val:0xffe76940d9e18057; 
   valaddr_reg:x3; val_offset:1622*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1622*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x76940d9e18057 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x76940d9e18057 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe76940d9e18057; op2val:0xffe76940d9e18057; 
   valaddr_reg:x3; val_offset:1624*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1624*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x76940d9e18057 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x76940d9e18057 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe76940d9e18057; op2val:0xffe76940d9e18057; 
   valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x76940d9e18057 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x76940d9e18057 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe76940d9e18057; op2val:0xffe76940d9e18057; 
   valaddr_reg:x3; val_offset:1628*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1628*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7bafa3050f8b7 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7bafa3050f8b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7bafa3050f8b7; op2val:0xffe7bafa3050f8b7; 
   valaddr_reg:x3; val_offset:1630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1630*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7bafa3050f8b7 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7bafa3050f8b7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7bafa3050f8b7; op2val:0xffe7bafa3050f8b7; 
   valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7bafa3050f8b7 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7bafa3050f8b7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7bafa3050f8b7; op2val:0xffe7bafa3050f8b7; 
   valaddr_reg:x3; val_offset:1634*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1634*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7bafa3050f8b7 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7bafa3050f8b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7bafa3050f8b7; op2val:0xffe7bafa3050f8b7; 
   valaddr_reg:x3; val_offset:1636*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1636*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7bafa3050f8b7 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7bafa3050f8b7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7bafa3050f8b7; op2val:0xffe7bafa3050f8b7; 
   valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7f8e997d84592 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7f8e997d84592 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7f8e997d84592; op2val:0xffe7f8e997d84592; 
   valaddr_reg:x3; val_offset:1640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1640*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7f8e997d84592 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7f8e997d84592 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7f8e997d84592; op2val:0xffe7f8e997d84592; 
   valaddr_reg:x3; val_offset:1642*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1642*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7f8e997d84592 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7f8e997d84592 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7f8e997d84592; op2val:0xffe7f8e997d84592; 
   valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7f8e997d84592 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7f8e997d84592 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7f8e997d84592; op2val:0xffe7f8e997d84592; 
   valaddr_reg:x3; val_offset:1646*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1646*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7f8e997d84592 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7f8e997d84592 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7f8e997d84592; op2val:0xffe7f8e997d84592; 
   valaddr_reg:x3; val_offset:1648*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1648*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7feee78e25d36 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7feee78e25d36 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7feee78e25d36; op2val:0xffe7feee78e25d36; 
   valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7feee78e25d36 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7feee78e25d36 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7feee78e25d36; op2val:0xffe7feee78e25d36; 
   valaddr_reg:x3; val_offset:1652*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1652*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7feee78e25d36 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7feee78e25d36 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7feee78e25d36; op2val:0xffe7feee78e25d36; 
   valaddr_reg:x3; val_offset:1654*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1654*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7feee78e25d36 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7feee78e25d36 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7feee78e25d36; op2val:0xffe7feee78e25d36; 
   valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7feee78e25d36 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7feee78e25d36 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe7feee78e25d36; op2val:0xffe7feee78e25d36; 
   valaddr_reg:x3; val_offset:1658*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1658*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x82cee64001220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x82cee64001220 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe82cee64001220; op2val:0xffe82cee64001220; 
   valaddr_reg:x3; val_offset:1660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1660*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x82cee64001220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x82cee64001220 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe82cee64001220; op2val:0xffe82cee64001220; 
   valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x82cee64001220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x82cee64001220 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe82cee64001220; op2val:0xffe82cee64001220; 
   valaddr_reg:x3; val_offset:1664*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1664*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x82cee64001220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x82cee64001220 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe82cee64001220; op2val:0xffe82cee64001220; 
   valaddr_reg:x3; val_offset:1666*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1666*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x82cee64001220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x82cee64001220 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe82cee64001220; op2val:0xffe82cee64001220; 
   valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x83e4a9485598d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x83e4a9485598d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe83e4a9485598d; op2val:0xffe83e4a9485598d; 
   valaddr_reg:x3; val_offset:1670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1670*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x83e4a9485598d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x83e4a9485598d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe83e4a9485598d; op2val:0xffe83e4a9485598d; 
   valaddr_reg:x3; val_offset:1672*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1672*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x83e4a9485598d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x83e4a9485598d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe83e4a9485598d; op2val:0xffe83e4a9485598d; 
   valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x83e4a9485598d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x83e4a9485598d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe83e4a9485598d; op2val:0xffe83e4a9485598d; 
   valaddr_reg:x3; val_offset:1676*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1676*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x83e4a9485598d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x83e4a9485598d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe83e4a9485598d; op2val:0xffe83e4a9485598d; 
   valaddr_reg:x3; val_offset:1678*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1678*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x914e0c751c4f4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x914e0c751c4f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe914e0c751c4f4; op2val:0xffe914e0c751c4f4; 
   valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x914e0c751c4f4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x914e0c751c4f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe914e0c751c4f4; op2val:0xffe914e0c751c4f4; 
   valaddr_reg:x3; val_offset:1682*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1682*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x914e0c751c4f4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x914e0c751c4f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe914e0c751c4f4; op2val:0xffe914e0c751c4f4; 
   valaddr_reg:x3; val_offset:1684*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1684*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x914e0c751c4f4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x914e0c751c4f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe914e0c751c4f4; op2val:0xffe914e0c751c4f4; 
   valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x914e0c751c4f4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x914e0c751c4f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe914e0c751c4f4; op2val:0xffe914e0c751c4f4; 
   valaddr_reg:x3; val_offset:1688*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1688*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x950338fe39141 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe950338fe39141; op2val:0xffe950338fe39141; 
   valaddr_reg:x3; val_offset:1690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1690*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x950338fe39141 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe950338fe39141; op2val:0xffe950338fe39141; 
   valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x950338fe39141 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe950338fe39141; op2val:0xffe950338fe39141; 
   valaddr_reg:x3; val_offset:1694*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1694*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x950338fe39141 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe950338fe39141; op2val:0xffe950338fe39141; 
   valaddr_reg:x3; val_offset:1696*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1696*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x950338fe39141 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe950338fe39141; op2val:0xffe950338fe39141; 
   valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x95adca0768ede and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x95adca0768ede and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe95adca0768ede; op2val:0xffe95adca0768ede; 
   valaddr_reg:x3; val_offset:1700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1700*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x95adca0768ede and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x95adca0768ede and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe95adca0768ede; op2val:0xffe95adca0768ede; 
   valaddr_reg:x3; val_offset:1702*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1702*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x95adca0768ede and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x95adca0768ede and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe95adca0768ede; op2val:0xffe95adca0768ede; 
   valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x95adca0768ede and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x95adca0768ede and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe95adca0768ede; op2val:0xffe95adca0768ede; 
   valaddr_reg:x3; val_offset:1706*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1706*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x95adca0768ede and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x95adca0768ede and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe95adca0768ede; op2val:0xffe95adca0768ede; 
   valaddr_reg:x3; val_offset:1708*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1708*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x962eb496df1c1 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x962eb496df1c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe962eb496df1c1; op2val:0xffe962eb496df1c1; 
   valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x962eb496df1c1 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x962eb496df1c1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe962eb496df1c1; op2val:0xffe962eb496df1c1; 
   valaddr_reg:x3; val_offset:1712*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1712*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x962eb496df1c1 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x962eb496df1c1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe962eb496df1c1; op2val:0xffe962eb496df1c1; 
   valaddr_reg:x3; val_offset:1714*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1714*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x962eb496df1c1 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x962eb496df1c1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe962eb496df1c1; op2val:0xffe962eb496df1c1; 
   valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x962eb496df1c1 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x962eb496df1c1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe962eb496df1c1; op2val:0xffe962eb496df1c1; 
   valaddr_reg:x3; val_offset:1718*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1718*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96d3944ae92c5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x96d3944ae92c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe96d3944ae92c5; op2val:0xffe96d3944ae92c5; 
   valaddr_reg:x3; val_offset:1720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1720*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96d3944ae92c5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x96d3944ae92c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe96d3944ae92c5; op2val:0xffe96d3944ae92c5; 
   valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96d3944ae92c5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x96d3944ae92c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe96d3944ae92c5; op2val:0xffe96d3944ae92c5; 
   valaddr_reg:x3; val_offset:1724*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1724*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96d3944ae92c5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x96d3944ae92c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe96d3944ae92c5; op2val:0xffe96d3944ae92c5; 
   valaddr_reg:x3; val_offset:1726*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1726*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96d3944ae92c5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x96d3944ae92c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe96d3944ae92c5; op2val:0xffe96d3944ae92c5; 
   valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x989b40414f92c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe989b40414f92c; op2val:0xffe989b40414f92c; 
   valaddr_reg:x3; val_offset:1730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1730*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x989b40414f92c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe989b40414f92c; op2val:0xffe989b40414f92c; 
   valaddr_reg:x3; val_offset:1732*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1732*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x989b40414f92c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe989b40414f92c; op2val:0xffe989b40414f92c; 
   valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x989b40414f92c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe989b40414f92c; op2val:0xffe989b40414f92c; 
   valaddr_reg:x3; val_offset:1736*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1736*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x989b40414f92c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe989b40414f92c; op2val:0xffe989b40414f92c; 
   valaddr_reg:x3; val_offset:1738*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1738*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x99fb7503e8d08 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x99fb7503e8d08 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe99fb7503e8d08; op2val:0xffe99fb7503e8d08; 
   valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x99fb7503e8d08 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x99fb7503e8d08 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe99fb7503e8d08; op2val:0xffe99fb7503e8d08; 
   valaddr_reg:x3; val_offset:1742*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1742*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x99fb7503e8d08 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x99fb7503e8d08 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe99fb7503e8d08; op2val:0xffe99fb7503e8d08; 
   valaddr_reg:x3; val_offset:1744*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1744*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x99fb7503e8d08 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x99fb7503e8d08 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe99fb7503e8d08; op2val:0xffe99fb7503e8d08; 
   valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x99fb7503e8d08 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x99fb7503e8d08 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe99fb7503e8d08; op2val:0xffe99fb7503e8d08; 
   valaddr_reg:x3; val_offset:1748*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1748*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b3a56e2c058e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9b3a56e2c058e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9b3a56e2c058e; op2val:0xffe9b3a56e2c058e; 
   valaddr_reg:x3; val_offset:1750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1750*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b3a56e2c058e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9b3a56e2c058e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9b3a56e2c058e; op2val:0xffe9b3a56e2c058e; 
   valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b3a56e2c058e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9b3a56e2c058e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9b3a56e2c058e; op2val:0xffe9b3a56e2c058e; 
   valaddr_reg:x3; val_offset:1754*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1754*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b3a56e2c058e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9b3a56e2c058e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9b3a56e2c058e; op2val:0xffe9b3a56e2c058e; 
   valaddr_reg:x3; val_offset:1756*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1756*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b3a56e2c058e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9b3a56e2c058e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9b3a56e2c058e; op2val:0xffe9b3a56e2c058e; 
   valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9c37606126e28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9c37606126e28; op2val:0xffe9c37606126e28; 
   valaddr_reg:x3; val_offset:1760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1760*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9c37606126e28 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9c37606126e28; op2val:0xffe9c37606126e28; 
   valaddr_reg:x3; val_offset:1762*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1762*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9c37606126e28 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9c37606126e28; op2val:0xffe9c37606126e28; 
   valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9c37606126e28 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9c37606126e28; op2val:0xffe9c37606126e28; 
   valaddr_reg:x3; val_offset:1766*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1766*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9c37606126e28 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9c37606126e28; op2val:0xffe9c37606126e28; 
   valaddr_reg:x3; val_offset:1768*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1768*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9ed4cb2685903 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9ed4cb2685903 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9ed4cb2685903; op2val:0xffe9ed4cb2685903; 
   valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9ed4cb2685903 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9ed4cb2685903 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9ed4cb2685903; op2val:0xffe9ed4cb2685903; 
   valaddr_reg:x3; val_offset:1772*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1772*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9ed4cb2685903 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9ed4cb2685903 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9ed4cb2685903; op2val:0xffe9ed4cb2685903; 
   valaddr_reg:x3; val_offset:1774*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1774*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9ed4cb2685903 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9ed4cb2685903 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9ed4cb2685903; op2val:0xffe9ed4cb2685903; 
   valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9ed4cb2685903 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9ed4cb2685903 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9ed4cb2685903; op2val:0xffe9ed4cb2685903; 
   valaddr_reg:x3; val_offset:1778*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1778*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f8dcc4f1275c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9f8dcc4f1275c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9f8dcc4f1275c; op2val:0xffe9f8dcc4f1275c; 
   valaddr_reg:x3; val_offset:1780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1780*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f8dcc4f1275c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9f8dcc4f1275c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9f8dcc4f1275c; op2val:0xffe9f8dcc4f1275c; 
   valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f8dcc4f1275c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9f8dcc4f1275c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9f8dcc4f1275c; op2val:0xffe9f8dcc4f1275c; 
   valaddr_reg:x3; val_offset:1784*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1784*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f8dcc4f1275c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9f8dcc4f1275c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9f8dcc4f1275c; op2val:0xffe9f8dcc4f1275c; 
   valaddr_reg:x3; val_offset:1786*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1786*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f8dcc4f1275c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9f8dcc4f1275c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fe9f8dcc4f1275c; op2val:0xffe9f8dcc4f1275c; 
   valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa101ccfb0623a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa101ccfb0623a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea101ccfb0623a; op2val:0xffea101ccfb0623a; 
   valaddr_reg:x3; val_offset:1790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1790*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa101ccfb0623a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa101ccfb0623a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea101ccfb0623a; op2val:0xffea101ccfb0623a; 
   valaddr_reg:x3; val_offset:1792*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1792*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa101ccfb0623a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa101ccfb0623a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea101ccfb0623a; op2val:0xffea101ccfb0623a; 
   valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa101ccfb0623a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa101ccfb0623a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea101ccfb0623a; op2val:0xffea101ccfb0623a; 
   valaddr_reg:x3; val_offset:1796*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1796*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa101ccfb0623a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa101ccfb0623a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea101ccfb0623a; op2val:0xffea101ccfb0623a; 
   valaddr_reg:x3; val_offset:1798*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1798*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa1bf5c83faf60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa1bf5c83faf60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea1bf5c83faf60; op2val:0xffea1bf5c83faf60; 
   valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa1bf5c83faf60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa1bf5c83faf60 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea1bf5c83faf60; op2val:0xffea1bf5c83faf60; 
   valaddr_reg:x3; val_offset:1802*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1802*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa1bf5c83faf60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa1bf5c83faf60 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea1bf5c83faf60; op2val:0xffea1bf5c83faf60; 
   valaddr_reg:x3; val_offset:1804*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1804*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa1bf5c83faf60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa1bf5c83faf60 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea1bf5c83faf60; op2val:0xffea1bf5c83faf60; 
   valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa1bf5c83faf60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa1bf5c83faf60 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea1bf5c83faf60; op2val:0xffea1bf5c83faf60; 
   valaddr_reg:x3; val_offset:1808*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1808*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa53d0d2b3faec and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa53d0d2b3faec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea53d0d2b3faec; op2val:0xffea53d0d2b3faec; 
   valaddr_reg:x3; val_offset:1810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1810*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa53d0d2b3faec and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa53d0d2b3faec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea53d0d2b3faec; op2val:0xffea53d0d2b3faec; 
   valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa53d0d2b3faec and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa53d0d2b3faec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea53d0d2b3faec; op2val:0xffea53d0d2b3faec; 
   valaddr_reg:x3; val_offset:1814*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1814*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa53d0d2b3faec and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa53d0d2b3faec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea53d0d2b3faec; op2val:0xffea53d0d2b3faec; 
   valaddr_reg:x3; val_offset:1816*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1816*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa53d0d2b3faec and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa53d0d2b3faec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea53d0d2b3faec; op2val:0xffea53d0d2b3faec; 
   valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa65214b23e38e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa65214b23e38e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea65214b23e38e; op2val:0xffea65214b23e38e; 
   valaddr_reg:x3; val_offset:1820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1820*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa65214b23e38e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa65214b23e38e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea65214b23e38e; op2val:0xffea65214b23e38e; 
   valaddr_reg:x3; val_offset:1822*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1822*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa65214b23e38e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa65214b23e38e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea65214b23e38e; op2val:0xffea65214b23e38e; 
   valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa65214b23e38e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa65214b23e38e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea65214b23e38e; op2val:0xffea65214b23e38e; 
   valaddr_reg:x3; val_offset:1826*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1826*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa65214b23e38e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa65214b23e38e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea65214b23e38e; op2val:0xffea65214b23e38e; 
   valaddr_reg:x3; val_offset:1828*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1828*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6c1b4fe3e3c0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa6c1b4fe3e3c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea6c1b4fe3e3c0; op2val:0xffea6c1b4fe3e3c0; 
   valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6c1b4fe3e3c0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa6c1b4fe3e3c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea6c1b4fe3e3c0; op2val:0xffea6c1b4fe3e3c0; 
   valaddr_reg:x3; val_offset:1832*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1832*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6c1b4fe3e3c0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa6c1b4fe3e3c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea6c1b4fe3e3c0; op2val:0xffea6c1b4fe3e3c0; 
   valaddr_reg:x3; val_offset:1834*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1834*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6c1b4fe3e3c0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa6c1b4fe3e3c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea6c1b4fe3e3c0; op2val:0xffea6c1b4fe3e3c0; 
   valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6c1b4fe3e3c0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa6c1b4fe3e3c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea6c1b4fe3e3c0; op2val:0xffea6c1b4fe3e3c0; 
   valaddr_reg:x3; val_offset:1838*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1838*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8edfc5560a8d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa8edfc5560a8d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea8edfc5560a8d; op2val:0xffea8edfc5560a8d; 
   valaddr_reg:x3; val_offset:1840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1840*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8edfc5560a8d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa8edfc5560a8d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea8edfc5560a8d; op2val:0xffea8edfc5560a8d; 
   valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8edfc5560a8d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa8edfc5560a8d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea8edfc5560a8d; op2val:0xffea8edfc5560a8d; 
   valaddr_reg:x3; val_offset:1844*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1844*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8edfc5560a8d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa8edfc5560a8d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea8edfc5560a8d; op2val:0xffea8edfc5560a8d; 
   valaddr_reg:x3; val_offset:1846*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1846*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8edfc5560a8d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa8edfc5560a8d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fea8edfc5560a8d; op2val:0xffea8edfc5560a8d; 
   valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xace1ecea16623 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xace1ecea16623 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feace1ecea16623; op2val:0xffeace1ecea16623; 
   valaddr_reg:x3; val_offset:1850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1850*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xace1ecea16623 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xace1ecea16623 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feace1ecea16623; op2val:0xffeace1ecea16623; 
   valaddr_reg:x3; val_offset:1852*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1852*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xace1ecea16623 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xace1ecea16623 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feace1ecea16623; op2val:0xffeace1ecea16623; 
   valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xace1ecea16623 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xace1ecea16623 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feace1ecea16623; op2val:0xffeace1ecea16623; 
   valaddr_reg:x3; val_offset:1856*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1856*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xace1ecea16623 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xace1ecea16623 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feace1ecea16623; op2val:0xffeace1ecea16623; 
   valaddr_reg:x3; val_offset:1858*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1858*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae83ac33105f8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xae83ac33105f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feae83ac33105f8; op2val:0xffeae83ac33105f8; 
   valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae83ac33105f8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xae83ac33105f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feae83ac33105f8; op2val:0xffeae83ac33105f8; 
   valaddr_reg:x3; val_offset:1862*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1862*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae83ac33105f8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xae83ac33105f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feae83ac33105f8; op2val:0xffeae83ac33105f8; 
   valaddr_reg:x3; val_offset:1864*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1864*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae83ac33105f8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xae83ac33105f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feae83ac33105f8; op2val:0xffeae83ac33105f8; 
   valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae83ac33105f8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xae83ac33105f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feae83ac33105f8; op2val:0xffeae83ac33105f8; 
   valaddr_reg:x3; val_offset:1868*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1868*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf465058419e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xaf465058419e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feaf465058419e9; op2val:0xffeaf465058419e9; 
   valaddr_reg:x3; val_offset:1870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1870*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf465058419e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xaf465058419e9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feaf465058419e9; op2val:0xffeaf465058419e9; 
   valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf465058419e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xaf465058419e9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feaf465058419e9; op2val:0xffeaf465058419e9; 
   valaddr_reg:x3; val_offset:1874*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1874*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf465058419e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xaf465058419e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feaf465058419e9; op2val:0xffeaf465058419e9; 
   valaddr_reg:x3; val_offset:1876*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1876*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf465058419e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xaf465058419e9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feaf465058419e9; op2val:0xffeaf465058419e9; 
   valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0580f98a7dbd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feb0580f98a7dbd; op2val:0xffeb0580f98a7dbd; 
   valaddr_reg:x3; val_offset:1880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1880*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0580f98a7dbd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feb0580f98a7dbd; op2val:0xffeb0580f98a7dbd; 
   valaddr_reg:x3; val_offset:1882*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1882*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0580f98a7dbd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feb0580f98a7dbd; op2val:0xffeb0580f98a7dbd; 
   valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0580f98a7dbd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feb0580f98a7dbd; op2val:0xffeb0580f98a7dbd; 
   valaddr_reg:x3; val_offset:1886*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1886*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0580f98a7dbd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feb0580f98a7dbd; op2val:0xffeb0580f98a7dbd; 
   valaddr_reg:x3; val_offset:1888*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1888*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0db7e0a5d748 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0db7e0a5d748 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feb0db7e0a5d748; op2val:0xffeb0db7e0a5d748; 
   valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0db7e0a5d748 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0db7e0a5d748 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feb0db7e0a5d748; op2val:0xffeb0db7e0a5d748; 
   valaddr_reg:x3; val_offset:1892*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1892*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0db7e0a5d748 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0db7e0a5d748 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feb0db7e0a5d748; op2val:0xffeb0db7e0a5d748; 
   valaddr_reg:x3; val_offset:1894*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1894*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0db7e0a5d748 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0db7e0a5d748 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feb0db7e0a5d748; op2val:0xffeb0db7e0a5d748; 
   valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0db7e0a5d748 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0db7e0a5d748 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feb0db7e0a5d748; op2val:0xffeb0db7e0a5d748; 
   valaddr_reg:x3; val_offset:1898*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1898*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbc366e555215f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbc366e555215f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febc366e555215f; op2val:0xffebc366e555215f; 
   valaddr_reg:x3; val_offset:1900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1900*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbc366e555215f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbc366e555215f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febc366e555215f; op2val:0xffebc366e555215f; 
   valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbc366e555215f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbc366e555215f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febc366e555215f; op2val:0xffebc366e555215f; 
   valaddr_reg:x3; val_offset:1904*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1904*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbc366e555215f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbc366e555215f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febc366e555215f; op2val:0xffebc366e555215f; 
   valaddr_reg:x3; val_offset:1906*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1906*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbc366e555215f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbc366e555215f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febc366e555215f; op2val:0xffebc366e555215f; 
   valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbcdfd8ba97c91 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbcdfd8ba97c91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febcdfd8ba97c91; op2val:0xffebcdfd8ba97c91; 
   valaddr_reg:x3; val_offset:1910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1910*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbcdfd8ba97c91 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbcdfd8ba97c91 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febcdfd8ba97c91; op2val:0xffebcdfd8ba97c91; 
   valaddr_reg:x3; val_offset:1912*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1912*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbcdfd8ba97c91 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbcdfd8ba97c91 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febcdfd8ba97c91; op2val:0xffebcdfd8ba97c91; 
   valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbcdfd8ba97c91 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbcdfd8ba97c91 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febcdfd8ba97c91; op2val:0xffebcdfd8ba97c91; 
   valaddr_reg:x3; val_offset:1916*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1916*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbcdfd8ba97c91 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbcdfd8ba97c91 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febcdfd8ba97c91; op2val:0xffebcdfd8ba97c91; 
   valaddr_reg:x3; val_offset:1918*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1918*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbe64efc9e258d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbe64efc9e258d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febe64efc9e258d; op2val:0xffebe64efc9e258d; 
   valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbe64efc9e258d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbe64efc9e258d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febe64efc9e258d; op2val:0xffebe64efc9e258d; 
   valaddr_reg:x3; val_offset:1922*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1922*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbe64efc9e258d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbe64efc9e258d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febe64efc9e258d; op2val:0xffebe64efc9e258d; 
   valaddr_reg:x3; val_offset:1924*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1924*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbe64efc9e258d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbe64efc9e258d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febe64efc9e258d; op2val:0xffebe64efc9e258d; 
   valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbe64efc9e258d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbe64efc9e258d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7febe64efc9e258d; op2val:0xffebe64efc9e258d; 
   valaddr_reg:x3; val_offset:1928*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1928*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc00223fe58e9e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc00223fe58e9e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec00223fe58e9e; op2val:0xffec00223fe58e9e; 
   valaddr_reg:x3; val_offset:1930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1930*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc00223fe58e9e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc00223fe58e9e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec00223fe58e9e; op2val:0xffec00223fe58e9e; 
   valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc00223fe58e9e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc00223fe58e9e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec00223fe58e9e; op2val:0xffec00223fe58e9e; 
   valaddr_reg:x3; val_offset:1934*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1934*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc00223fe58e9e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc00223fe58e9e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec00223fe58e9e; op2val:0xffec00223fe58e9e; 
   valaddr_reg:x3; val_offset:1936*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1936*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc00223fe58e9e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc00223fe58e9e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec00223fe58e9e; op2val:0xffec00223fe58e9e; 
   valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0377eab1f21f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc0377eab1f21f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec0377eab1f21f; op2val:0xffec0377eab1f21f; 
   valaddr_reg:x3; val_offset:1940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1940*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0377eab1f21f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc0377eab1f21f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec0377eab1f21f; op2val:0xffec0377eab1f21f; 
   valaddr_reg:x3; val_offset:1942*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1942*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0377eab1f21f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc0377eab1f21f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec0377eab1f21f; op2val:0xffec0377eab1f21f; 
   valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0377eab1f21f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc0377eab1f21f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec0377eab1f21f; op2val:0xffec0377eab1f21f; 
   valaddr_reg:x3; val_offset:1946*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1946*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0377eab1f21f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc0377eab1f21f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec0377eab1f21f; op2val:0xffec0377eab1f21f; 
   valaddr_reg:x3; val_offset:1948*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1948*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc15c34215bcf5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc15c34215bcf5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec15c34215bcf5; op2val:0xffec15c34215bcf5; 
   valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc15c34215bcf5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc15c34215bcf5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec15c34215bcf5; op2val:0xffec15c34215bcf5; 
   valaddr_reg:x3; val_offset:1952*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1952*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc15c34215bcf5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc15c34215bcf5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec15c34215bcf5; op2val:0xffec15c34215bcf5; 
   valaddr_reg:x3; val_offset:1954*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1954*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc15c34215bcf5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc15c34215bcf5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec15c34215bcf5; op2val:0xffec15c34215bcf5; 
   valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc15c34215bcf5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc15c34215bcf5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec15c34215bcf5; op2val:0xffec15c34215bcf5; 
   valaddr_reg:x3; val_offset:1958*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1958*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc9eec489f6667 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc9eec489f6667 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec9eec489f6667; op2val:0xffec9eec489f6667; 
   valaddr_reg:x3; val_offset:1960*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1960*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc9eec489f6667 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc9eec489f6667 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec9eec489f6667; op2val:0xffec9eec489f6667; 
   valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc9eec489f6667 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc9eec489f6667 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec9eec489f6667; op2val:0xffec9eec489f6667; 
   valaddr_reg:x3; val_offset:1964*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1964*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc9eec489f6667 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc9eec489f6667 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec9eec489f6667; op2val:0xffec9eec489f6667; 
   valaddr_reg:x3; val_offset:1966*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1966*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc9eec489f6667 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc9eec489f6667 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fec9eec489f6667; op2val:0xffec9eec489f6667; 
   valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xca428c2b7c81f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xca428c2b7c81f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feca428c2b7c81f; op2val:0xffeca428c2b7c81f; 
   valaddr_reg:x3; val_offset:1970*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1970*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xca428c2b7c81f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xca428c2b7c81f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feca428c2b7c81f; op2val:0xffeca428c2b7c81f; 
   valaddr_reg:x3; val_offset:1972*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1972*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xca428c2b7c81f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xca428c2b7c81f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feca428c2b7c81f; op2val:0xffeca428c2b7c81f; 
   valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xca428c2b7c81f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xca428c2b7c81f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feca428c2b7c81f; op2val:0xffeca428c2b7c81f; 
   valaddr_reg:x3; val_offset:1976*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1976*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xca428c2b7c81f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xca428c2b7c81f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feca428c2b7c81f; op2val:0xffeca428c2b7c81f; 
   valaddr_reg:x3; val_offset:1978*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1978*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcbdd58ecc1b45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcbdd58ecc1b45 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecbdd58ecc1b45; op2val:0xffecbdd58ecc1b45; 
   valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcbdd58ecc1b45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcbdd58ecc1b45 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecbdd58ecc1b45; op2val:0xffecbdd58ecc1b45; 
   valaddr_reg:x3; val_offset:1982*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1982*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcbdd58ecc1b45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcbdd58ecc1b45 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecbdd58ecc1b45; op2val:0xffecbdd58ecc1b45; 
   valaddr_reg:x3; val_offset:1984*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1984*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcbdd58ecc1b45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcbdd58ecc1b45 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecbdd58ecc1b45; op2val:0xffecbdd58ecc1b45; 
   valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcbdd58ecc1b45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcbdd58ecc1b45 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecbdd58ecc1b45; op2val:0xffecbdd58ecc1b45; 
   valaddr_reg:x3; val_offset:1988*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1988*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc3488366e29b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc3488366e29b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecc3488366e29b; op2val:0xffecc3488366e29b; 
   valaddr_reg:x3; val_offset:1990*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 1990*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc3488366e29b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc3488366e29b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecc3488366e29b; op2val:0xffecc3488366e29b; 
   valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc3488366e29b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc3488366e29b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecc3488366e29b; op2val:0xffecc3488366e29b; 
   valaddr_reg:x3; val_offset:1994*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 1994*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc3488366e29b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc3488366e29b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecc3488366e29b; op2val:0xffecc3488366e29b; 
   valaddr_reg:x3; val_offset:1996*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 1996*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc3488366e29b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc3488366e29b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecc3488366e29b; op2val:0xffecc3488366e29b; 
   valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc4ac8145e5cc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc4ac8145e5cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecc4ac8145e5cc; op2val:0xffecc4ac8145e5cc; 
   valaddr_reg:x3; val_offset:2000*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc4ac8145e5cc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc4ac8145e5cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecc4ac8145e5cc; op2val:0xffecc4ac8145e5cc; 
   valaddr_reg:x3; val_offset:2002*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2002*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc4ac8145e5cc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc4ac8145e5cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecc4ac8145e5cc; op2val:0xffecc4ac8145e5cc; 
   valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc4ac8145e5cc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc4ac8145e5cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecc4ac8145e5cc; op2val:0xffecc4ac8145e5cc; 
   valaddr_reg:x3; val_offset:2006*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2006*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc4ac8145e5cc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc4ac8145e5cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecc4ac8145e5cc; op2val:0xffecc4ac8145e5cc; 
   valaddr_reg:x3; val_offset:2008*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2008*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd5bbb21e85e5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcd5bbb21e85e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecd5bbb21e85e5; op2val:0xffecd5bbb21e85e5; 
   valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd5bbb21e85e5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcd5bbb21e85e5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecd5bbb21e85e5; op2val:0xffecd5bbb21e85e5; 
   valaddr_reg:x3; val_offset:2012*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2012*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd5bbb21e85e5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcd5bbb21e85e5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecd5bbb21e85e5; op2val:0xffecd5bbb21e85e5; 
   valaddr_reg:x3; val_offset:2014*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2014*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd5bbb21e85e5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcd5bbb21e85e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecd5bbb21e85e5; op2val:0xffecd5bbb21e85e5; 
   valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd5bbb21e85e5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcd5bbb21e85e5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecd5bbb21e85e5; op2val:0xffecd5bbb21e85e5; 
   valaddr_reg:x3; val_offset:2018*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2018*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xce30065d5ac1b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xce30065d5ac1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fece30065d5ac1b; op2val:0xffece30065d5ac1b; 
   valaddr_reg:x3; val_offset:2020*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2020*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xce30065d5ac1b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xce30065d5ac1b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fece30065d5ac1b; op2val:0xffece30065d5ac1b; 
   valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xce30065d5ac1b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xce30065d5ac1b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fece30065d5ac1b; op2val:0xffece30065d5ac1b; 
   valaddr_reg:x3; val_offset:2024*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2024*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xce30065d5ac1b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xce30065d5ac1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fece30065d5ac1b; op2val:0xffece30065d5ac1b; 
   valaddr_reg:x3; val_offset:2026*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2026*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xce30065d5ac1b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xce30065d5ac1b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fece30065d5ac1b; op2val:0xffece30065d5ac1b; 
   valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcfc27db04baa5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcfc27db04baa5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecfc27db04baa5; op2val:0xffecfc27db04baa5; 
   valaddr_reg:x3; val_offset:2030*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2030*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcfc27db04baa5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcfc27db04baa5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecfc27db04baa5; op2val:0xffecfc27db04baa5; 
   valaddr_reg:x3; val_offset:2032*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2032*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcfc27db04baa5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcfc27db04baa5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecfc27db04baa5; op2val:0xffecfc27db04baa5; 
   valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcfc27db04baa5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcfc27db04baa5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecfc27db04baa5; op2val:0xffecfc27db04baa5; 
   valaddr_reg:x3; val_offset:2036*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2036*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcfc27db04baa5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcfc27db04baa5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fecfc27db04baa5; op2val:0xffecfc27db04baa5; 
   valaddr_reg:x3; val_offset:2038*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2038*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd0f42c0dfaf72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd0f42c0dfaf72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed0f42c0dfaf72; op2val:0xffed0f42c0dfaf72; 
   valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd0f42c0dfaf72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd0f42c0dfaf72 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed0f42c0dfaf72; op2val:0xffed0f42c0dfaf72; 
   valaddr_reg:x3; val_offset:2042*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2042*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd0f42c0dfaf72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd0f42c0dfaf72 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed0f42c0dfaf72; op2val:0xffed0f42c0dfaf72; 
   valaddr_reg:x3; val_offset:2044*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2044*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd0f42c0dfaf72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd0f42c0dfaf72 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed0f42c0dfaf72; op2val:0xffed0f42c0dfaf72; 
   valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2046*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd0f42c0dfaf72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd0f42c0dfaf72 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed0f42c0dfaf72; op2val:0xffed0f42c0dfaf72; 
   valaddr_reg:x3; val_offset:2048*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2048*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd13b901ecb86d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd13b901ecb86d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed13b901ecb86d; op2val:0xffed13b901ecb86d; 
   valaddr_reg:x3; val_offset:2050*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2050*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd13b901ecb86d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd13b901ecb86d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed13b901ecb86d; op2val:0xffed13b901ecb86d; 
   valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd13b901ecb86d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd13b901ecb86d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed13b901ecb86d; op2val:0xffed13b901ecb86d; 
   valaddr_reg:x3; val_offset:2054*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2054*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd13b901ecb86d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd13b901ecb86d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed13b901ecb86d; op2val:0xffed13b901ecb86d; 
   valaddr_reg:x3; val_offset:2056*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2056*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd13b901ecb86d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd13b901ecb86d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed13b901ecb86d; op2val:0xffed13b901ecb86d; 
   valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ca42e21585b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ca42e21585b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1ca42e21585b; op2val:0xffed1ca42e21585b; 
   valaddr_reg:x3; val_offset:2060*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2060*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ca42e21585b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ca42e21585b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1ca42e21585b; op2val:0xffed1ca42e21585b; 
   valaddr_reg:x3; val_offset:2062*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2062*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ca42e21585b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ca42e21585b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1ca42e21585b; op2val:0xffed1ca42e21585b; 
   valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ca42e21585b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ca42e21585b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1ca42e21585b; op2val:0xffed1ca42e21585b; 
   valaddr_reg:x3; val_offset:2066*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2066*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ca42e21585b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ca42e21585b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1ca42e21585b; op2val:0xffed1ca42e21585b; 
   valaddr_reg:x3; val_offset:2068*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2068*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1d803765d304 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1d803765d304 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1d803765d304; op2val:0xffed1d803765d304; 
   valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1d803765d304 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1d803765d304 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1d803765d304; op2val:0xffed1d803765d304; 
   valaddr_reg:x3; val_offset:2072*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2072*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1d803765d304 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1d803765d304 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1d803765d304; op2val:0xffed1d803765d304; 
   valaddr_reg:x3; val_offset:2074*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2074*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1d803765d304 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1d803765d304 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1d803765d304; op2val:0xffed1d803765d304; 
   valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1d803765d304 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1d803765d304 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1d803765d304; op2val:0xffed1d803765d304; 
   valaddr_reg:x3; val_offset:2078*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2078*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ed9e7beff05 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ed9e7beff05 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1ed9e7beff05; op2val:0xffed1ed9e7beff05; 
   valaddr_reg:x3; val_offset:2080*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2080*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ed9e7beff05 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ed9e7beff05 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1ed9e7beff05; op2val:0xffed1ed9e7beff05; 
   valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ed9e7beff05 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ed9e7beff05 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1ed9e7beff05; op2val:0xffed1ed9e7beff05; 
   valaddr_reg:x3; val_offset:2084*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2084*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ed9e7beff05 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ed9e7beff05 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1ed9e7beff05; op2val:0xffed1ed9e7beff05; 
   valaddr_reg:x3; val_offset:2086*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2086*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ed9e7beff05 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ed9e7beff05 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed1ed9e7beff05; op2val:0xffed1ed9e7beff05; 
   valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd3762f4d1629c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd3762f4d1629c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed3762f4d1629c; op2val:0xffed3762f4d1629c; 
   valaddr_reg:x3; val_offset:2090*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2090*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd3762f4d1629c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd3762f4d1629c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed3762f4d1629c; op2val:0xffed3762f4d1629c; 
   valaddr_reg:x3; val_offset:2092*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2092*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd3762f4d1629c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd3762f4d1629c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed3762f4d1629c; op2val:0xffed3762f4d1629c; 
   valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd3762f4d1629c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd3762f4d1629c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed3762f4d1629c; op2val:0xffed3762f4d1629c; 
   valaddr_reg:x3; val_offset:2096*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2096*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd3762f4d1629c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd3762f4d1629c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed3762f4d1629c; op2val:0xffed3762f4d1629c; 
   valaddr_reg:x3; val_offset:2098*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2098*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd5872438d16b0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd5872438d16b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed5872438d16b0; op2val:0xffed5872438d16b0; 
   valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd5872438d16b0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd5872438d16b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed5872438d16b0; op2val:0xffed5872438d16b0; 
   valaddr_reg:x3; val_offset:2102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2102*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd5872438d16b0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd5872438d16b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed5872438d16b0; op2val:0xffed5872438d16b0; 
   valaddr_reg:x3; val_offset:2104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2104*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd5872438d16b0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd5872438d16b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed5872438d16b0; op2val:0xffed5872438d16b0; 
   valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd5872438d16b0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd5872438d16b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed5872438d16b0; op2val:0xffed5872438d16b0; 
   valaddr_reg:x3; val_offset:2108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2108*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd64347e477166 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd64347e477166 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed64347e477166; op2val:0xffed64347e477166; 
   valaddr_reg:x3; val_offset:2110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2110*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd64347e477166 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd64347e477166 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed64347e477166; op2val:0xffed64347e477166; 
   valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd64347e477166 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd64347e477166 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed64347e477166; op2val:0xffed64347e477166; 
   valaddr_reg:x3; val_offset:2114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2114*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd64347e477166 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd64347e477166 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed64347e477166; op2val:0xffed64347e477166; 
   valaddr_reg:x3; val_offset:2116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2116*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd64347e477166 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd64347e477166 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed64347e477166; op2val:0xffed64347e477166; 
   valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd8c56582791a6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd8c56582791a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed8c56582791a6; op2val:0xffed8c56582791a6; 
   valaddr_reg:x3; val_offset:2120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2120*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd8c56582791a6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd8c56582791a6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed8c56582791a6; op2val:0xffed8c56582791a6; 
   valaddr_reg:x3; val_offset:2122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2122*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd8c56582791a6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd8c56582791a6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed8c56582791a6; op2val:0xffed8c56582791a6; 
   valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd8c56582791a6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd8c56582791a6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed8c56582791a6; op2val:0xffed8c56582791a6; 
   valaddr_reg:x3; val_offset:2126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2126*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd8c56582791a6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd8c56582791a6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fed8c56582791a6; op2val:0xffed8c56582791a6; 
   valaddr_reg:x3; val_offset:2128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2128*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2c9f3b4cd220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe2c9f3b4cd220 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee2c9f3b4cd220; op2val:0xffee2c9f3b4cd220; 
   valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2c9f3b4cd220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe2c9f3b4cd220 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee2c9f3b4cd220; op2val:0xffee2c9f3b4cd220; 
   valaddr_reg:x3; val_offset:2132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2132*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2c9f3b4cd220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe2c9f3b4cd220 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee2c9f3b4cd220; op2val:0xffee2c9f3b4cd220; 
   valaddr_reg:x3; val_offset:2134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2134*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2c9f3b4cd220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe2c9f3b4cd220 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee2c9f3b4cd220; op2val:0xffee2c9f3b4cd220; 
   valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2c9f3b4cd220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe2c9f3b4cd220 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee2c9f3b4cd220; op2val:0xffee2c9f3b4cd220; 
   valaddr_reg:x3; val_offset:2138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2138*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe49bfb977b300 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe49bfb977b300 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee49bfb977b300; op2val:0xffee49bfb977b300; 
   valaddr_reg:x3; val_offset:2140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2140*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe49bfb977b300 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe49bfb977b300 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee49bfb977b300; op2val:0xffee49bfb977b300; 
   valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe49bfb977b300 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe49bfb977b300 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee49bfb977b300; op2val:0xffee49bfb977b300; 
   valaddr_reg:x3; val_offset:2144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2144*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe49bfb977b300 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe49bfb977b300 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee49bfb977b300; op2val:0xffee49bfb977b300; 
   valaddr_reg:x3; val_offset:2146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2146*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe49bfb977b300 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe49bfb977b300 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee49bfb977b300; op2val:0xffee49bfb977b300; 
   valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe55b30b309254 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe55b30b309254 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee55b30b309254; op2val:0xffee55b30b309254; 
   valaddr_reg:x3; val_offset:2150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2150*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe55b30b309254 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe55b30b309254 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee55b30b309254; op2val:0xffee55b30b309254; 
   valaddr_reg:x3; val_offset:2152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2152*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe55b30b309254 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe55b30b309254 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee55b30b309254; op2val:0xffee55b30b309254; 
   valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe55b30b309254 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe55b30b309254 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee55b30b309254; op2val:0xffee55b30b309254; 
   valaddr_reg:x3; val_offset:2156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2156*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe55b30b309254 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe55b30b309254 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee55b30b309254; op2val:0xffee55b30b309254; 
   valaddr_reg:x3; val_offset:2158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2158*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64794dad7d48 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe64794dad7d48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee64794dad7d48; op2val:0xffee64794dad7d48; 
   valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64794dad7d48 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe64794dad7d48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee64794dad7d48; op2val:0xffee64794dad7d48; 
   valaddr_reg:x3; val_offset:2162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2162*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64794dad7d48 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe64794dad7d48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee64794dad7d48; op2val:0xffee64794dad7d48; 
   valaddr_reg:x3; val_offset:2164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2164*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64794dad7d48 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe64794dad7d48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee64794dad7d48; op2val:0xffee64794dad7d48; 
   valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64794dad7d48 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe64794dad7d48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fee64794dad7d48; op2val:0xffee64794dad7d48; 
   valaddr_reg:x3; val_offset:2168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2168*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec0c4abe1fd0e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xec0c4abe1fd0e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feec0c4abe1fd0e; op2val:0xffeec0c4abe1fd0e; 
   valaddr_reg:x3; val_offset:2170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2170*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec0c4abe1fd0e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xec0c4abe1fd0e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feec0c4abe1fd0e; op2val:0xffeec0c4abe1fd0e; 
   valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec0c4abe1fd0e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xec0c4abe1fd0e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feec0c4abe1fd0e; op2val:0xffeec0c4abe1fd0e; 
   valaddr_reg:x3; val_offset:2174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2174*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec0c4abe1fd0e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xec0c4abe1fd0e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feec0c4abe1fd0e; op2val:0xffeec0c4abe1fd0e; 
   valaddr_reg:x3; val_offset:2176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2176*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec0c4abe1fd0e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xec0c4abe1fd0e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feec0c4abe1fd0e; op2val:0xffeec0c4abe1fd0e; 
   valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xed7c3ef329d04 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xed7c3ef329d04 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feed7c3ef329d04; op2val:0xffeed7c3ef329d04; 
   valaddr_reg:x3; val_offset:2180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2180*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xed7c3ef329d04 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xed7c3ef329d04 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feed7c3ef329d04; op2val:0xffeed7c3ef329d04; 
   valaddr_reg:x3; val_offset:2182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2182*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xed7c3ef329d04 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xed7c3ef329d04 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feed7c3ef329d04; op2val:0xffeed7c3ef329d04; 
   valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xed7c3ef329d04 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xed7c3ef329d04 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feed7c3ef329d04; op2val:0xffeed7c3ef329d04; 
   valaddr_reg:x3; val_offset:2186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2186*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xed7c3ef329d04 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xed7c3ef329d04 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feed7c3ef329d04; op2val:0xffeed7c3ef329d04; 
   valaddr_reg:x3; val_offset:2188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2188*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xefec1cd7c3bcb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xefec1cd7c3bcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feefec1cd7c3bcb; op2val:0xffeefec1cd7c3bcb; 
   valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xefec1cd7c3bcb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xefec1cd7c3bcb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feefec1cd7c3bcb; op2val:0xffeefec1cd7c3bcb; 
   valaddr_reg:x3; val_offset:2192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2192*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xefec1cd7c3bcb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xefec1cd7c3bcb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feefec1cd7c3bcb; op2val:0xffeefec1cd7c3bcb; 
   valaddr_reg:x3; val_offset:2194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2194*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xefec1cd7c3bcb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xefec1cd7c3bcb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feefec1cd7c3bcb; op2val:0xffeefec1cd7c3bcb; 
   valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xefec1cd7c3bcb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xefec1cd7c3bcb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7feefec1cd7c3bcb; op2val:0xffeefec1cd7c3bcb; 
   valaddr_reg:x3; val_offset:2198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2198*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf2f998bf74bb4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f998bf74bb4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fef2f998bf74bb4; op2val:0xffef2f998bf74bb4; 
   valaddr_reg:x3; val_offset:2200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2200*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf2f998bf74bb4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f998bf74bb4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fef2f998bf74bb4; op2val:0xffef2f998bf74bb4; 
   valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf2f998bf74bb4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f998bf74bb4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fef2f998bf74bb4; op2val:0xffef2f998bf74bb4; 
   valaddr_reg:x3; val_offset:2204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2204*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf2f998bf74bb4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f998bf74bb4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fef2f998bf74bb4; op2val:0xffef2f998bf74bb4; 
   valaddr_reg:x3; val_offset:2206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2206*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf2f998bf74bb4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f998bf74bb4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fef2f998bf74bb4; op2val:0xffef2f998bf74bb4; 
   valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf74a5c9f39c6c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fef74a5c9f39c6c; op2val:0xffef74a5c9f39c6c; 
   valaddr_reg:x3; val_offset:2210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2210*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf74a5c9f39c6c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fef74a5c9f39c6c; op2val:0xffef74a5c9f39c6c; 
   valaddr_reg:x3; val_offset:2212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2212*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf74a5c9f39c6c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fef74a5c9f39c6c; op2val:0xffef74a5c9f39c6c; 
   valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf74a5c9f39c6c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fef74a5c9f39c6c; op2val:0xffef74a5c9f39c6c; 
   valaddr_reg:x3; val_offset:2216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2216*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf74a5c9f39c6c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fef74a5c9f39c6c; op2val:0xffef74a5c9f39c6c; 
   valaddr_reg:x3; val_offset:2218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2218*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfb271584e30d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefb271584e30d0; op2val:0xffefb271584e30d0; 
   valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfb271584e30d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefb271584e30d0; op2val:0xffefb271584e30d0; 
   valaddr_reg:x3; val_offset:2222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2222*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfb271584e30d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefb271584e30d0; op2val:0xffefb271584e30d0; 
   valaddr_reg:x3; val_offset:2224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2224*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfb271584e30d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefb271584e30d0; op2val:0xffefb271584e30d0; 
   valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfb271584e30d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefb271584e30d0; op2val:0xffefb271584e30d0; 
   valaddr_reg:x3; val_offset:2228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2228*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfe1581ecd07ea and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfe1581ecd07ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefe1581ecd07ea; op2val:0xffefe1581ecd07ea; 
   valaddr_reg:x3; val_offset:2230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2230*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfe1581ecd07ea and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfe1581ecd07ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefe1581ecd07ea; op2val:0xffefe1581ecd07ea; 
   valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfe1581ecd07ea and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfe1581ecd07ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefe1581ecd07ea; op2val:0xffefe1581ecd07ea; 
   valaddr_reg:x3; val_offset:2234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2234*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfe1581ecd07ea and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfe1581ecd07ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefe1581ecd07ea; op2val:0xffefe1581ecd07ea; 
   valaddr_reg:x3; val_offset:2236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 96, 0, x3, 2236*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfe1581ecd07ea and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfe1581ecd07ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7fefe1581ecd07ea; op2val:0xffefe1581ecd07ea; 
   valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xf8c6f685f5fff and fs2 == 1 and fe2 == 0x7f2 and fm2 == 0xf8c6f685f5fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f2f8c6f685f5fff; op2val:0xff2f8c6f685f5fff; 
   valaddr_reg:x3; val_offset:2240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 0, 0, x3, 2240*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xf8c6f685f5fff and fs2 == 1 and fe2 == 0x7f2 and fm2 == 0xf8c6f685f5fff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f2f8c6f685f5fff; op2val:0xff2f8c6f685f5fff; 
   valaddr_reg:x3; val_offset:2242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 32, 0, x3, 2242*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xf8c6f685f5fff and fs2 == 1 and fe2 == 0x7f2 and fm2 == 0xf8c6f685f5fff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f2f8c6f685f5fff; op2val:0xff2f8c6f685f5fff; 
   valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 64, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xf8c6f685f5fff and fs2 == 1 and fe2 == 0x7f2 and fm2 == 0xf8c6f685f5fff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f2f8c6f685f5fff; op2val:0xff2f8c6f685f5fff; 
   valaddr_reg:x3; val_offset:2246*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.d, f31, f30, f29, dyn, 128, 0, x3, 2246*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(18388070213697363967,64,FLEN)
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(18388070213697363967,64,FLEN)
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(18388070213697363967,64,FLEN)
NAN_BOXED(9174599165180267519,64,FLEN)
NAN_BOXED(18397971202035043327,64,FLEN)
NAN_BOXED(9174599165180267519,64,FLEN)
NAN_BOXED(18397971202035043327,64,FLEN)
NAN_BOXED(9174599165180267519,64,FLEN)
NAN_BOXED(18397971202035043327,64,FLEN)
NAN_BOXED(9174599165180267519,64,FLEN)
NAN_BOXED(18397971202035043327,64,FLEN)
NAN_BOXED(9174599165180267519,64,FLEN)
NAN_BOXED(18397971202035043327,64,FLEN)
NAN_BOXED(9176358073951947775,64,FLEN)
NAN_BOXED(18399730110806723583,64,FLEN)
NAN_BOXED(9176358073951947775,64,FLEN)
NAN_BOXED(18399730110806723583,64,FLEN)
NAN_BOXED(9176358073951947775,64,FLEN)
NAN_BOXED(18399730110806723583,64,FLEN)
NAN_BOXED(9176358073951947775,64,FLEN)
NAN_BOXED(18399730110806723583,64,FLEN)
NAN_BOXED(9176358073951947775,64,FLEN)
NAN_BOXED(18399730110806723583,64,FLEN)
NAN_BOXED(9187365436648032959,64,FLEN)
NAN_BOXED(18410737473502808767,64,FLEN)
NAN_BOXED(9187365436648032959,64,FLEN)
NAN_BOXED(18410737473502808767,64,FLEN)
NAN_BOXED(9187365436648032959,64,FLEN)
NAN_BOXED(18410737473502808767,64,FLEN)
NAN_BOXED(9187365436648032959,64,FLEN)
NAN_BOXED(18410737473502808767,64,FLEN)
NAN_BOXED(9187365436648032959,64,FLEN)
NAN_BOXED(18410737473502808767,64,FLEN)
NAN_BOXED(9187968458819758591,64,FLEN)
NAN_BOXED(18411340495674534399,64,FLEN)
NAN_BOXED(9187968458819758591,64,FLEN)
NAN_BOXED(18411340495674534399,64,FLEN)
NAN_BOXED(9187968458819758591,64,FLEN)
NAN_BOXED(18411340495674534399,64,FLEN)
NAN_BOXED(9187968458819758591,64,FLEN)
NAN_BOXED(18411340495674534399,64,FLEN)
NAN_BOXED(9187968458819758591,64,FLEN)
NAN_BOXED(18411340495674534399,64,FLEN)
NAN_BOXED(9191650923494453183,64,FLEN)
NAN_BOXED(18415022960349228991,64,FLEN)
NAN_BOXED(9191650923494453183,64,FLEN)
NAN_BOXED(18415022960349228991,64,FLEN)
NAN_BOXED(9191650923494453183,64,FLEN)
NAN_BOXED(18415022960349228991,64,FLEN)
NAN_BOXED(9191650923494453183,64,FLEN)
NAN_BOXED(18415022960349228991,64,FLEN)
NAN_BOXED(9191650923494453183,64,FLEN)
NAN_BOXED(18415022960349228991,64,FLEN)
NAN_BOXED(9192696925251043839,64,FLEN)
NAN_BOXED(18416068962105819647,64,FLEN)
NAN_BOXED(9192696925251043839,64,FLEN)
NAN_BOXED(18416068962105819647,64,FLEN)
NAN_BOXED(9192696925251043839,64,FLEN)
NAN_BOXED(18416068962105819647,64,FLEN)
NAN_BOXED(9192696925251043839,64,FLEN)
NAN_BOXED(18416068962105819647,64,FLEN)
NAN_BOXED(9192696925251043839,64,FLEN)
NAN_BOXED(18416068962105819647,64,FLEN)
NAN_BOXED(9193909870190494079,64,FLEN)
NAN_BOXED(18417281907045269887,64,FLEN)
NAN_BOXED(9193909870190494079,64,FLEN)
NAN_BOXED(18417281907045269887,64,FLEN)
NAN_BOXED(9193909870190494079,64,FLEN)
NAN_BOXED(18417281907045269887,64,FLEN)
NAN_BOXED(9193909870190494079,64,FLEN)
NAN_BOXED(18417281907045269887,64,FLEN)
NAN_BOXED(9193909870190494079,64,FLEN)
NAN_BOXED(18417281907045269887,64,FLEN)
NAN_BOXED(9196525605679172895,64,FLEN)
NAN_BOXED(18419897642533948703,64,FLEN)
NAN_BOXED(9196525605679172895,64,FLEN)
NAN_BOXED(18419897642533948703,64,FLEN)
NAN_BOXED(9196525605679172895,64,FLEN)
NAN_BOXED(18419897642533948703,64,FLEN)
NAN_BOXED(9196525605679172895,64,FLEN)
NAN_BOXED(18419897642533948703,64,FLEN)
NAN_BOXED(9196525605679172895,64,FLEN)
NAN_BOXED(18419897642533948703,64,FLEN)
NAN_BOXED(9196958354694167551,64,FLEN)
NAN_BOXED(18420330391548943359,64,FLEN)
NAN_BOXED(9196958354694167551,64,FLEN)
NAN_BOXED(18420330391548943359,64,FLEN)
NAN_BOXED(9196958354694167551,64,FLEN)
NAN_BOXED(18420330391548943359,64,FLEN)
NAN_BOXED(9196958354694167551,64,FLEN)
NAN_BOXED(18420330391548943359,64,FLEN)
NAN_BOXED(9196958354694167551,64,FLEN)
NAN_BOXED(18420330391548943359,64,FLEN)
NAN_BOXED(9197025450626260495,64,FLEN)
NAN_BOXED(18420397487481036303,64,FLEN)
NAN_BOXED(9197025450626260495,64,FLEN)
NAN_BOXED(18420397487481036303,64,FLEN)
NAN_BOXED(9197025450626260495,64,FLEN)
NAN_BOXED(18420397487481036303,64,FLEN)
NAN_BOXED(9197025450626260495,64,FLEN)
NAN_BOXED(18420397487481036303,64,FLEN)
NAN_BOXED(9197025450626260495,64,FLEN)
NAN_BOXED(18420397487481036303,64,FLEN)
NAN_BOXED(9197091484808025231,64,FLEN)
NAN_BOXED(18420463521662801039,64,FLEN)
NAN_BOXED(9197091484808025231,64,FLEN)
NAN_BOXED(18420463521662801039,64,FLEN)
NAN_BOXED(9197091484808025231,64,FLEN)
NAN_BOXED(18420463521662801039,64,FLEN)
NAN_BOXED(9197091484808025231,64,FLEN)
NAN_BOXED(18420463521662801039,64,FLEN)
NAN_BOXED(9197091484808025231,64,FLEN)
NAN_BOXED(18420463521662801039,64,FLEN)
NAN_BOXED(9198365755661071087,64,FLEN)
NAN_BOXED(18421737792515846895,64,FLEN)
NAN_BOXED(9198365755661071087,64,FLEN)
NAN_BOXED(18421737792515846895,64,FLEN)
NAN_BOXED(9198365755661071087,64,FLEN)
NAN_BOXED(18421737792515846895,64,FLEN)
NAN_BOXED(9198365755661071087,64,FLEN)
NAN_BOXED(18421737792515846895,64,FLEN)
NAN_BOXED(9198365755661071087,64,FLEN)
NAN_BOXED(18421737792515846895,64,FLEN)
NAN_BOXED(9198432398228201839,64,FLEN)
NAN_BOXED(18421804435082977647,64,FLEN)
NAN_BOXED(9198432398228201839,64,FLEN)
NAN_BOXED(18421804435082977647,64,FLEN)
NAN_BOXED(9198432398228201839,64,FLEN)
NAN_BOXED(18421804435082977647,64,FLEN)
NAN_BOXED(9198432398228201839,64,FLEN)
NAN_BOXED(18421804435082977647,64,FLEN)
NAN_BOXED(9198432398228201839,64,FLEN)
NAN_BOXED(18421804435082977647,64,FLEN)
NAN_BOXED(9198801314190216527,64,FLEN)
NAN_BOXED(18422173351044992335,64,FLEN)
NAN_BOXED(9198801314190216527,64,FLEN)
NAN_BOXED(18422173351044992335,64,FLEN)
NAN_BOXED(9198801314190216527,64,FLEN)
NAN_BOXED(18422173351044992335,64,FLEN)
NAN_BOXED(9198801314190216527,64,FLEN)
NAN_BOXED(18422173351044992335,64,FLEN)
NAN_BOXED(9198801314190216527,64,FLEN)
NAN_BOXED(18422173351044992335,64,FLEN)
NAN_BOXED(9200212862150719135,64,FLEN)
NAN_BOXED(18423584899005494943,64,FLEN)
NAN_BOXED(9200212862150719135,64,FLEN)
NAN_BOXED(18423584899005494943,64,FLEN)
NAN_BOXED(9200212862150719135,64,FLEN)
NAN_BOXED(18423584899005494943,64,FLEN)
NAN_BOXED(9200212862150719135,64,FLEN)
NAN_BOXED(18423584899005494943,64,FLEN)
NAN_BOXED(9200212862150719135,64,FLEN)
NAN_BOXED(18423584899005494943,64,FLEN)
NAN_BOXED(9200819272207278015,64,FLEN)
NAN_BOXED(18424191309062053823,64,FLEN)
NAN_BOXED(9200819272207278015,64,FLEN)
NAN_BOXED(18424191309062053823,64,FLEN)
NAN_BOXED(9200819272207278015,64,FLEN)
NAN_BOXED(18424191309062053823,64,FLEN)
NAN_BOXED(9200819272207278015,64,FLEN)
NAN_BOXED(18424191309062053823,64,FLEN)
NAN_BOXED(9200819272207278015,64,FLEN)
NAN_BOXED(18424191309062053823,64,FLEN)
NAN_BOXED(9200951889251641967,64,FLEN)
NAN_BOXED(18424323926106417775,64,FLEN)
NAN_BOXED(9200951889251641967,64,FLEN)
NAN_BOXED(18424323926106417775,64,FLEN)
NAN_BOXED(9200951889251641967,64,FLEN)
NAN_BOXED(18424323926106417775,64,FLEN)
NAN_BOXED(9200951889251641967,64,FLEN)
NAN_BOXED(18424323926106417775,64,FLEN)
NAN_BOXED(9200951889251641967,64,FLEN)
NAN_BOXED(18424323926106417775,64,FLEN)
NAN_BOXED(9201078919175525759,64,FLEN)
NAN_BOXED(18424450956030301567,64,FLEN)
NAN_BOXED(9201078919175525759,64,FLEN)
NAN_BOXED(18424450956030301567,64,FLEN)
NAN_BOXED(9201078919175525759,64,FLEN)
NAN_BOXED(18424450956030301567,64,FLEN)
NAN_BOXED(9201078919175525759,64,FLEN)
NAN_BOXED(18424450956030301567,64,FLEN)
NAN_BOXED(9201078919175525759,64,FLEN)
NAN_BOXED(18424450956030301567,64,FLEN)
NAN_BOXED(9201094327539418583,64,FLEN)
NAN_BOXED(18424466364394194391,64,FLEN)
NAN_BOXED(9201094327539418583,64,FLEN)
NAN_BOXED(18424466364394194391,64,FLEN)
NAN_BOXED(9201094327539418583,64,FLEN)
NAN_BOXED(18424466364394194391,64,FLEN)
NAN_BOXED(9201094327539418583,64,FLEN)
NAN_BOXED(18424466364394194391,64,FLEN)
NAN_BOXED(9201094327539418583,64,FLEN)
NAN_BOXED(18424466364394194391,64,FLEN)
NAN_BOXED(9201132118415583223,64,FLEN)
NAN_BOXED(18424504155270359031,64,FLEN)
NAN_BOXED(9201132118415583223,64,FLEN)
NAN_BOXED(18424504155270359031,64,FLEN)
NAN_BOXED(9201132118415583223,64,FLEN)
NAN_BOXED(18424504155270359031,64,FLEN)
NAN_BOXED(9201132118415583223,64,FLEN)
NAN_BOXED(18424504155270359031,64,FLEN)
NAN_BOXED(9201132118415583223,64,FLEN)
NAN_BOXED(18424504155270359031,64,FLEN)
NAN_BOXED(9202147171225860239,64,FLEN)
NAN_BOXED(18425519208080636047,64,FLEN)
NAN_BOXED(9202147171225860239,64,FLEN)
NAN_BOXED(18425519208080636047,64,FLEN)
NAN_BOXED(9202147171225860239,64,FLEN)
NAN_BOXED(18425519208080636047,64,FLEN)
NAN_BOXED(9202147171225860239,64,FLEN)
NAN_BOXED(18425519208080636047,64,FLEN)
NAN_BOXED(9202147171225860239,64,FLEN)
NAN_BOXED(18425519208080636047,64,FLEN)
NAN_BOXED(9203396543495290727,64,FLEN)
NAN_BOXED(18426768580350066535,64,FLEN)
NAN_BOXED(9203396543495290727,64,FLEN)
NAN_BOXED(18426768580350066535,64,FLEN)
NAN_BOXED(9203396543495290727,64,FLEN)
NAN_BOXED(18426768580350066535,64,FLEN)
NAN_BOXED(9203396543495290727,64,FLEN)
NAN_BOXED(18426768580350066535,64,FLEN)
NAN_BOXED(9203396543495290727,64,FLEN)
NAN_BOXED(18426768580350066535,64,FLEN)
NAN_BOXED(9203569218513545463,64,FLEN)
NAN_BOXED(18426941255368321271,64,FLEN)
NAN_BOXED(9203569218513545463,64,FLEN)
NAN_BOXED(18426941255368321271,64,FLEN)
NAN_BOXED(9203569218513545463,64,FLEN)
NAN_BOXED(18426941255368321271,64,FLEN)
NAN_BOXED(9203569218513545463,64,FLEN)
NAN_BOXED(18426941255368321271,64,FLEN)
NAN_BOXED(9203569218513545463,64,FLEN)
NAN_BOXED(18426941255368321271,64,FLEN)
NAN_BOXED(9203622580917951199,64,FLEN)
NAN_BOXED(18426994617772727007,64,FLEN)
NAN_BOXED(9203622580917951199,64,FLEN)
NAN_BOXED(18426994617772727007,64,FLEN)
NAN_BOXED(9203622580917951199,64,FLEN)
NAN_BOXED(18426994617772727007,64,FLEN)
NAN_BOXED(9203622580917951199,64,FLEN)
NAN_BOXED(18426994617772727007,64,FLEN)
NAN_BOXED(9203622580917951199,64,FLEN)
NAN_BOXED(18426994617772727007,64,FLEN)
NAN_BOXED(9203664300692977383,64,FLEN)
NAN_BOXED(18427036337547753191,64,FLEN)
NAN_BOXED(9203664300692977383,64,FLEN)
NAN_BOXED(18427036337547753191,64,FLEN)
NAN_BOXED(9203664300692977383,64,FLEN)
NAN_BOXED(18427036337547753191,64,FLEN)
NAN_BOXED(9203664300692977383,64,FLEN)
NAN_BOXED(18427036337547753191,64,FLEN)
NAN_BOXED(9203664300692977383,64,FLEN)
NAN_BOXED(18427036337547753191,64,FLEN)
NAN_BOXED(9204208885079307191,64,FLEN)
NAN_BOXED(18427580921934082999,64,FLEN)
NAN_BOXED(9204208885079307191,64,FLEN)
NAN_BOXED(18427580921934082999,64,FLEN)
NAN_BOXED(9204208885079307191,64,FLEN)
NAN_BOXED(18427580921934082999,64,FLEN)
NAN_BOXED(9204208885079307191,64,FLEN)
NAN_BOXED(18427580921934082999,64,FLEN)
NAN_BOXED(9204208885079307191,64,FLEN)
NAN_BOXED(18427580921934082999,64,FLEN)
NAN_BOXED(9204790854438491839,64,FLEN)
NAN_BOXED(18428162891293267647,64,FLEN)
NAN_BOXED(9204790854438491839,64,FLEN)
NAN_BOXED(18428162891293267647,64,FLEN)
NAN_BOXED(9204790854438491839,64,FLEN)
NAN_BOXED(18428162891293267647,64,FLEN)
NAN_BOXED(9204790854438491839,64,FLEN)
NAN_BOXED(18428162891293267647,64,FLEN)
NAN_BOXED(9204790854438491839,64,FLEN)
NAN_BOXED(18428162891293267647,64,FLEN)
NAN_BOXED(9204918828245984247,64,FLEN)
NAN_BOXED(18428290865100760055,64,FLEN)
NAN_BOXED(9204918828245984247,64,FLEN)
NAN_BOXED(18428290865100760055,64,FLEN)
NAN_BOXED(9204918828245984247,64,FLEN)
NAN_BOXED(18428290865100760055,64,FLEN)
NAN_BOXED(9204918828245984247,64,FLEN)
NAN_BOXED(18428290865100760055,64,FLEN)
NAN_BOXED(9204918828245984247,64,FLEN)
NAN_BOXED(18428290865100760055,64,FLEN)
NAN_BOXED(9205278026551910863,64,FLEN)
NAN_BOXED(18428650063406686671,64,FLEN)
NAN_BOXED(9205278026551910863,64,FLEN)
NAN_BOXED(18428650063406686671,64,FLEN)
NAN_BOXED(9205278026551910863,64,FLEN)
NAN_BOXED(18428650063406686671,64,FLEN)
NAN_BOXED(9205278026551910863,64,FLEN)
NAN_BOXED(18428650063406686671,64,FLEN)
NAN_BOXED(9205278026551910863,64,FLEN)
NAN_BOXED(18428650063406686671,64,FLEN)
NAN_BOXED(9205308912461809223,64,FLEN)
NAN_BOXED(18428680949316585031,64,FLEN)
NAN_BOXED(9205308912461809223,64,FLEN)
NAN_BOXED(18428680949316585031,64,FLEN)
NAN_BOXED(9205308912461809223,64,FLEN)
NAN_BOXED(18428680949316585031,64,FLEN)
NAN_BOXED(9205308912461809223,64,FLEN)
NAN_BOXED(18428680949316585031,64,FLEN)
NAN_BOXED(9205308912461809223,64,FLEN)
NAN_BOXED(18428680949316585031,64,FLEN)
NAN_BOXED(9205441254443368195,64,FLEN)
NAN_BOXED(18428813291298144003,64,FLEN)
NAN_BOXED(9205441254443368195,64,FLEN)
NAN_BOXED(18428813291298144003,64,FLEN)
NAN_BOXED(9205441254443368195,64,FLEN)
NAN_BOXED(18428813291298144003,64,FLEN)
NAN_BOXED(9205441254443368195,64,FLEN)
NAN_BOXED(18428813291298144003,64,FLEN)
NAN_BOXED(9205441254443368195,64,FLEN)
NAN_BOXED(18428813291298144003,64,FLEN)
NAN_BOXED(9205661020783444647,64,FLEN)
NAN_BOXED(18429033057638220455,64,FLEN)
NAN_BOXED(9205661020783444647,64,FLEN)
NAN_BOXED(18429033057638220455,64,FLEN)
NAN_BOXED(9205661020783444647,64,FLEN)
NAN_BOXED(18429033057638220455,64,FLEN)
NAN_BOXED(9205661020783444647,64,FLEN)
NAN_BOXED(18429033057638220455,64,FLEN)
NAN_BOXED(9205661020783444647,64,FLEN)
NAN_BOXED(18429033057638220455,64,FLEN)
NAN_BOXED(9206127014924029995,64,FLEN)
NAN_BOXED(18429499051778805803,64,FLEN)
NAN_BOXED(9206127014924029995,64,FLEN)
NAN_BOXED(18429499051778805803,64,FLEN)
NAN_BOXED(9206127014924029995,64,FLEN)
NAN_BOXED(18429499051778805803,64,FLEN)
NAN_BOXED(9206127014924029995,64,FLEN)
NAN_BOXED(18429499051778805803,64,FLEN)
NAN_BOXED(9206127014924029995,64,FLEN)
NAN_BOXED(18429499051778805803,64,FLEN)
NAN_BOXED(9206127159006947011,64,FLEN)
NAN_BOXED(18429499195861722819,64,FLEN)
NAN_BOXED(9206127159006947011,64,FLEN)
NAN_BOXED(18429499195861722819,64,FLEN)
NAN_BOXED(9206127159006947011,64,FLEN)
NAN_BOXED(18429499195861722819,64,FLEN)
NAN_BOXED(9206127159006947011,64,FLEN)
NAN_BOXED(18429499195861722819,64,FLEN)
NAN_BOXED(9206127159006947011,64,FLEN)
NAN_BOXED(18429499195861722819,64,FLEN)
NAN_BOXED(9206215825926008127,64,FLEN)
NAN_BOXED(18429587862780783935,64,FLEN)
NAN_BOXED(9206215825926008127,64,FLEN)
NAN_BOXED(18429587862780783935,64,FLEN)
NAN_BOXED(9206215825926008127,64,FLEN)
NAN_BOXED(18429587862780783935,64,FLEN)
NAN_BOXED(9206215825926008127,64,FLEN)
NAN_BOXED(18429587862780783935,64,FLEN)
NAN_BOXED(9206215825926008127,64,FLEN)
NAN_BOXED(18429587862780783935,64,FLEN)
NAN_BOXED(9206306433961626219,64,FLEN)
NAN_BOXED(18429678470816402027,64,FLEN)
NAN_BOXED(9206306433961626219,64,FLEN)
NAN_BOXED(18429678470816402027,64,FLEN)
NAN_BOXED(9206306433961626219,64,FLEN)
NAN_BOXED(18429678470816402027,64,FLEN)
NAN_BOXED(9206306433961626219,64,FLEN)
NAN_BOXED(18429678470816402027,64,FLEN)
NAN_BOXED(9206306433961626219,64,FLEN)
NAN_BOXED(18429678470816402027,64,FLEN)
NAN_BOXED(9206307853637710095,64,FLEN)
NAN_BOXED(18429679890492485903,64,FLEN)
NAN_BOXED(9206307853637710095,64,FLEN)
NAN_BOXED(18429679890492485903,64,FLEN)
NAN_BOXED(9206307853637710095,64,FLEN)
NAN_BOXED(18429679890492485903,64,FLEN)
NAN_BOXED(9206307853637710095,64,FLEN)
NAN_BOXED(18429679890492485903,64,FLEN)
NAN_BOXED(9206307853637710095,64,FLEN)
NAN_BOXED(18429679890492485903,64,FLEN)
NAN_BOXED(9206535296217534287,64,FLEN)
NAN_BOXED(18429907333072310095,64,FLEN)
NAN_BOXED(9206535296217534287,64,FLEN)
NAN_BOXED(18429907333072310095,64,FLEN)
NAN_BOXED(9206535296217534287,64,FLEN)
NAN_BOXED(18429907333072310095,64,FLEN)
NAN_BOXED(9206535296217534287,64,FLEN)
NAN_BOXED(18429907333072310095,64,FLEN)
NAN_BOXED(9206535296217534287,64,FLEN)
NAN_BOXED(18429907333072310095,64,FLEN)
NAN_BOXED(9206757737057485327,64,FLEN)
NAN_BOXED(18430129773912261135,64,FLEN)
NAN_BOXED(9206757737057485327,64,FLEN)
NAN_BOXED(18430129773912261135,64,FLEN)
NAN_BOXED(9206757737057485327,64,FLEN)
NAN_BOXED(18430129773912261135,64,FLEN)
NAN_BOXED(9206757737057485327,64,FLEN)
NAN_BOXED(18430129773912261135,64,FLEN)
NAN_BOXED(9206757737057485327,64,FLEN)
NAN_BOXED(18430129773912261135,64,FLEN)
NAN_BOXED(9207627499180583167,64,FLEN)
NAN_BOXED(18430999536035358975,64,FLEN)
NAN_BOXED(9207627499180583167,64,FLEN)
NAN_BOXED(18430999536035358975,64,FLEN)
NAN_BOXED(9207627499180583167,64,FLEN)
NAN_BOXED(18430999536035358975,64,FLEN)
NAN_BOXED(9207627499180583167,64,FLEN)
NAN_BOXED(18430999536035358975,64,FLEN)
NAN_BOXED(9207627499180583167,64,FLEN)
NAN_BOXED(18430999536035358975,64,FLEN)
NAN_BOXED(9207677580451560139,64,FLEN)
NAN_BOXED(18431049617306335947,64,FLEN)
NAN_BOXED(9207677580451560139,64,FLEN)
NAN_BOXED(18431049617306335947,64,FLEN)
NAN_BOXED(9207677580451560139,64,FLEN)
NAN_BOXED(18431049617306335947,64,FLEN)
NAN_BOXED(9207677580451560139,64,FLEN)
NAN_BOXED(18431049617306335947,64,FLEN)
NAN_BOXED(9207677580451560139,64,FLEN)
NAN_BOXED(18431049617306335947,64,FLEN)
NAN_BOXED(9207737956174666771,64,FLEN)
NAN_BOXED(18431109993029442579,64,FLEN)
NAN_BOXED(9207737956174666771,64,FLEN)
NAN_BOXED(18431109993029442579,64,FLEN)
NAN_BOXED(9207737956174666771,64,FLEN)
NAN_BOXED(18431109993029442579,64,FLEN)
NAN_BOXED(9207737956174666771,64,FLEN)
NAN_BOXED(18431109993029442579,64,FLEN)
NAN_BOXED(9207737956174666771,64,FLEN)
NAN_BOXED(18431109993029442579,64,FLEN)
NAN_BOXED(9208036588027216251,64,FLEN)
NAN_BOXED(18431408624881992059,64,FLEN)
NAN_BOXED(9208036588027216251,64,FLEN)
NAN_BOXED(18431408624881992059,64,FLEN)
NAN_BOXED(9208036588027216251,64,FLEN)
NAN_BOXED(18431408624881992059,64,FLEN)
NAN_BOXED(9208036588027216251,64,FLEN)
NAN_BOXED(18431408624881992059,64,FLEN)
NAN_BOXED(9208036588027216251,64,FLEN)
NAN_BOXED(18431408624881992059,64,FLEN)
NAN_BOXED(9208320357424006743,64,FLEN)
NAN_BOXED(18431692394278782551,64,FLEN)
NAN_BOXED(9208320357424006743,64,FLEN)
NAN_BOXED(18431692394278782551,64,FLEN)
NAN_BOXED(9208320357424006743,64,FLEN)
NAN_BOXED(18431692394278782551,64,FLEN)
NAN_BOXED(9208320357424006743,64,FLEN)
NAN_BOXED(18431692394278782551,64,FLEN)
NAN_BOXED(9208320357424006743,64,FLEN)
NAN_BOXED(18431692394278782551,64,FLEN)
NAN_BOXED(9208342411741388551,64,FLEN)
NAN_BOXED(18431714448596164359,64,FLEN)
NAN_BOXED(9208342411741388551,64,FLEN)
NAN_BOXED(18431714448596164359,64,FLEN)
NAN_BOXED(9208342411741388551,64,FLEN)
NAN_BOXED(18431714448596164359,64,FLEN)
NAN_BOXED(9208342411741388551,64,FLEN)
NAN_BOXED(18431714448596164359,64,FLEN)
NAN_BOXED(9208342411741388551,64,FLEN)
NAN_BOXED(18431714448596164359,64,FLEN)
NAN_BOXED(9208810251710024647,64,FLEN)
NAN_BOXED(18432182288564800455,64,FLEN)
NAN_BOXED(9208810251710024647,64,FLEN)
NAN_BOXED(18432182288564800455,64,FLEN)
NAN_BOXED(9208810251710024647,64,FLEN)
NAN_BOXED(18432182288564800455,64,FLEN)
NAN_BOXED(9208810251710024647,64,FLEN)
NAN_BOXED(18432182288564800455,64,FLEN)
NAN_BOXED(9208810251710024647,64,FLEN)
NAN_BOXED(18432182288564800455,64,FLEN)
NAN_BOXED(9208963784190099719,64,FLEN)
NAN_BOXED(18432335821044875527,64,FLEN)
NAN_BOXED(9208963784190099719,64,FLEN)
NAN_BOXED(18432335821044875527,64,FLEN)
NAN_BOXED(9208963784190099719,64,FLEN)
NAN_BOXED(18432335821044875527,64,FLEN)
NAN_BOXED(9208963784190099719,64,FLEN)
NAN_BOXED(18432335821044875527,64,FLEN)
NAN_BOXED(9208963784190099719,64,FLEN)
NAN_BOXED(18432335821044875527,64,FLEN)
NAN_BOXED(9209451083575492691,64,FLEN)
NAN_BOXED(18432823120430268499,64,FLEN)
NAN_BOXED(9209451083575492691,64,FLEN)
NAN_BOXED(18432823120430268499,64,FLEN)
NAN_BOXED(9209451083575492691,64,FLEN)
NAN_BOXED(18432823120430268499,64,FLEN)
NAN_BOXED(9209451083575492691,64,FLEN)
NAN_BOXED(18432823120430268499,64,FLEN)
NAN_BOXED(9209451083575492691,64,FLEN)
NAN_BOXED(18432823120430268499,64,FLEN)
NAN_BOXED(9209505648439580071,64,FLEN)
NAN_BOXED(18432877685294355879,64,FLEN)
NAN_BOXED(9209505648439580071,64,FLEN)
NAN_BOXED(18432877685294355879,64,FLEN)
NAN_BOXED(9209505648439580071,64,FLEN)
NAN_BOXED(18432877685294355879,64,FLEN)
NAN_BOXED(9209505648439580071,64,FLEN)
NAN_BOXED(18432877685294355879,64,FLEN)
NAN_BOXED(9209505648439580071,64,FLEN)
NAN_BOXED(18432877685294355879,64,FLEN)
NAN_BOXED(9209610319813567587,64,FLEN)
NAN_BOXED(18432982356668343395,64,FLEN)
NAN_BOXED(9209610319813567587,64,FLEN)
NAN_BOXED(18432982356668343395,64,FLEN)
NAN_BOXED(9209610319813567587,64,FLEN)
NAN_BOXED(18432982356668343395,64,FLEN)
NAN_BOXED(9209610319813567587,64,FLEN)
NAN_BOXED(18432982356668343395,64,FLEN)
NAN_BOXED(9209610319813567587,64,FLEN)
NAN_BOXED(18432982356668343395,64,FLEN)
NAN_BOXED(9209873619976457543,64,FLEN)
NAN_BOXED(18433245656831233351,64,FLEN)
NAN_BOXED(9209873619976457543,64,FLEN)
NAN_BOXED(18433245656831233351,64,FLEN)
NAN_BOXED(9209873619976457543,64,FLEN)
NAN_BOXED(18433245656831233351,64,FLEN)
NAN_BOXED(9209873619976457543,64,FLEN)
NAN_BOXED(18433245656831233351,64,FLEN)
NAN_BOXED(9209873619976457543,64,FLEN)
NAN_BOXED(18433245656831233351,64,FLEN)
NAN_BOXED(9209985211479234809,64,FLEN)
NAN_BOXED(18433357248334010617,64,FLEN)
NAN_BOXED(9209985211479234809,64,FLEN)
NAN_BOXED(18433357248334010617,64,FLEN)
NAN_BOXED(9209985211479234809,64,FLEN)
NAN_BOXED(18433357248334010617,64,FLEN)
NAN_BOXED(9209985211479234809,64,FLEN)
NAN_BOXED(18433357248334010617,64,FLEN)
NAN_BOXED(9209985211479234809,64,FLEN)
NAN_BOXED(18433357248334010617,64,FLEN)
NAN_BOXED(9210050250633350255,64,FLEN)
NAN_BOXED(18433422287488126063,64,FLEN)
NAN_BOXED(9210050250633350255,64,FLEN)
NAN_BOXED(18433422287488126063,64,FLEN)
NAN_BOXED(9210050250633350255,64,FLEN)
NAN_BOXED(18433422287488126063,64,FLEN)
NAN_BOXED(9210050250633350255,64,FLEN)
NAN_BOXED(18433422287488126063,64,FLEN)
NAN_BOXED(9210050250633350255,64,FLEN)
NAN_BOXED(18433422287488126063,64,FLEN)
NAN_BOXED(9210057892792536065,64,FLEN)
NAN_BOXED(18433429929647311873,64,FLEN)
NAN_BOXED(9210057892792536065,64,FLEN)
NAN_BOXED(18433429929647311873,64,FLEN)
NAN_BOXED(9210057892792536065,64,FLEN)
NAN_BOXED(18433429929647311873,64,FLEN)
NAN_BOXED(9210057892792536065,64,FLEN)
NAN_BOXED(18433429929647311873,64,FLEN)
NAN_BOXED(9210057892792536065,64,FLEN)
NAN_BOXED(18433429929647311873,64,FLEN)
NAN_BOXED(9210306442996719845,64,FLEN)
NAN_BOXED(18433678479851495653,64,FLEN)
NAN_BOXED(9210306442996719845,64,FLEN)
NAN_BOXED(18433678479851495653,64,FLEN)
NAN_BOXED(9210306442996719845,64,FLEN)
NAN_BOXED(18433678479851495653,64,FLEN)
NAN_BOXED(9210306442996719845,64,FLEN)
NAN_BOXED(18433678479851495653,64,FLEN)
NAN_BOXED(9210306442996719845,64,FLEN)
NAN_BOXED(18433678479851495653,64,FLEN)
NAN_BOXED(9210401359059362113,64,FLEN)
NAN_BOXED(18433773395914137921,64,FLEN)
NAN_BOXED(9210401359059362113,64,FLEN)
NAN_BOXED(18433773395914137921,64,FLEN)
NAN_BOXED(9210401359059362113,64,FLEN)
NAN_BOXED(18433773395914137921,64,FLEN)
NAN_BOXED(9210401359059362113,64,FLEN)
NAN_BOXED(18433773395914137921,64,FLEN)
NAN_BOXED(9210401359059362113,64,FLEN)
NAN_BOXED(18433773395914137921,64,FLEN)
NAN_BOXED(9210434777589363463,64,FLEN)
NAN_BOXED(18433806814444139271,64,FLEN)
NAN_BOXED(9210434777589363463,64,FLEN)
NAN_BOXED(18433806814444139271,64,FLEN)
NAN_BOXED(9210434777589363463,64,FLEN)
NAN_BOXED(18433806814444139271,64,FLEN)
NAN_BOXED(9210434777589363463,64,FLEN)
NAN_BOXED(18433806814444139271,64,FLEN)
NAN_BOXED(9210434777589363463,64,FLEN)
NAN_BOXED(18433806814444139271,64,FLEN)
NAN_BOXED(9210573362523480831,64,FLEN)
NAN_BOXED(18433945399378256639,64,FLEN)
NAN_BOXED(9210573362523480831,64,FLEN)
NAN_BOXED(18433945399378256639,64,FLEN)
NAN_BOXED(9210573362523480831,64,FLEN)
NAN_BOXED(18433945399378256639,64,FLEN)
NAN_BOXED(9210573362523480831,64,FLEN)
NAN_BOXED(18433945399378256639,64,FLEN)
NAN_BOXED(9210573362523480831,64,FLEN)
NAN_BOXED(18433945399378256639,64,FLEN)
NAN_BOXED(9210796241392123755,64,FLEN)
NAN_BOXED(18434168278246899563,64,FLEN)
NAN_BOXED(9210796241392123755,64,FLEN)
NAN_BOXED(18434168278246899563,64,FLEN)
NAN_BOXED(9210796241392123755,64,FLEN)
NAN_BOXED(18434168278246899563,64,FLEN)
NAN_BOXED(9210796241392123755,64,FLEN)
NAN_BOXED(18434168278246899563,64,FLEN)
NAN_BOXED(9210796241392123755,64,FLEN)
NAN_BOXED(18434168278246899563,64,FLEN)
NAN_BOXED(9210944760255759469,64,FLEN)
NAN_BOXED(18434316797110535277,64,FLEN)
NAN_BOXED(9210944760255759469,64,FLEN)
NAN_BOXED(18434316797110535277,64,FLEN)
NAN_BOXED(9210944760255759469,64,FLEN)
NAN_BOXED(18434316797110535277,64,FLEN)
NAN_BOXED(9210944760255759469,64,FLEN)
NAN_BOXED(18434316797110535277,64,FLEN)
NAN_BOXED(9210944760255759469,64,FLEN)
NAN_BOXED(18434316797110535277,64,FLEN)
NAN_BOXED(9210968150721496073,64,FLEN)
NAN_BOXED(18434340187576271881,64,FLEN)
NAN_BOXED(9210968150721496073,64,FLEN)
NAN_BOXED(18434340187576271881,64,FLEN)
NAN_BOXED(9210968150721496073,64,FLEN)
NAN_BOXED(18434340187576271881,64,FLEN)
NAN_BOXED(9210968150721496073,64,FLEN)
NAN_BOXED(18434340187576271881,64,FLEN)
NAN_BOXED(9210968150721496073,64,FLEN)
NAN_BOXED(18434340187576271881,64,FLEN)
NAN_BOXED(9211053379294786253,64,FLEN)
NAN_BOXED(18434425416149562061,64,FLEN)
NAN_BOXED(9211053379294786253,64,FLEN)
NAN_BOXED(18434425416149562061,64,FLEN)
NAN_BOXED(9211053379294786253,64,FLEN)
NAN_BOXED(18434425416149562061,64,FLEN)
NAN_BOXED(9211053379294786253,64,FLEN)
NAN_BOXED(18434425416149562061,64,FLEN)
NAN_BOXED(9211053379294786253,64,FLEN)
NAN_BOXED(18434425416149562061,64,FLEN)
NAN_BOXED(9211215999332847445,64,FLEN)
NAN_BOXED(18434588036187623253,64,FLEN)
NAN_BOXED(9211215999332847445,64,FLEN)
NAN_BOXED(18434588036187623253,64,FLEN)
NAN_BOXED(9211215999332847445,64,FLEN)
NAN_BOXED(18434588036187623253,64,FLEN)
NAN_BOXED(9211215999332847445,64,FLEN)
NAN_BOXED(18434588036187623253,64,FLEN)
NAN_BOXED(9211215999332847445,64,FLEN)
NAN_BOXED(18434588036187623253,64,FLEN)
NAN_BOXED(9211313097021926809,64,FLEN)
NAN_BOXED(18434685133876702617,64,FLEN)
NAN_BOXED(9211313097021926809,64,FLEN)
NAN_BOXED(18434685133876702617,64,FLEN)
NAN_BOXED(9211313097021926809,64,FLEN)
NAN_BOXED(18434685133876702617,64,FLEN)
NAN_BOXED(9211313097021926809,64,FLEN)
NAN_BOXED(18434685133876702617,64,FLEN)
NAN_BOXED(9211313097021926809,64,FLEN)
NAN_BOXED(18434685133876702617,64,FLEN)
NAN_BOXED(9211363789913667839,64,FLEN)
NAN_BOXED(18434735826768443647,64,FLEN)
NAN_BOXED(9211363789913667839,64,FLEN)
NAN_BOXED(18434735826768443647,64,FLEN)
NAN_BOXED(9211363789913667839,64,FLEN)
NAN_BOXED(18434735826768443647,64,FLEN)
NAN_BOXED(9211363789913667839,64,FLEN)
NAN_BOXED(18434735826768443647,64,FLEN)
NAN_BOXED(9211363789913667839,64,FLEN)
NAN_BOXED(18434735826768443647,64,FLEN)
NAN_BOXED(9211381683663132647,64,FLEN)
NAN_BOXED(18434753720517908455,64,FLEN)
NAN_BOXED(9211381683663132647,64,FLEN)
NAN_BOXED(18434753720517908455,64,FLEN)
NAN_BOXED(9211381683663132647,64,FLEN)
NAN_BOXED(18434753720517908455,64,FLEN)
NAN_BOXED(9211381683663132647,64,FLEN)
NAN_BOXED(18434753720517908455,64,FLEN)
NAN_BOXED(9211381683663132647,64,FLEN)
NAN_BOXED(18434753720517908455,64,FLEN)
NAN_BOXED(9211486502681644625,64,FLEN)
NAN_BOXED(18434858539536420433,64,FLEN)
NAN_BOXED(9211486502681644625,64,FLEN)
NAN_BOXED(18434858539536420433,64,FLEN)
NAN_BOXED(9211486502681644625,64,FLEN)
NAN_BOXED(18434858539536420433,64,FLEN)
NAN_BOXED(9211486502681644625,64,FLEN)
NAN_BOXED(18434858539536420433,64,FLEN)
NAN_BOXED(9211486502681644625,64,FLEN)
NAN_BOXED(18434858539536420433,64,FLEN)
NAN_BOXED(9211548315101863423,64,FLEN)
NAN_BOXED(18434920351956639231,64,FLEN)
NAN_BOXED(9211548315101863423,64,FLEN)
NAN_BOXED(18434920351956639231,64,FLEN)
NAN_BOXED(9211548315101863423,64,FLEN)
NAN_BOXED(18434920351956639231,64,FLEN)
NAN_BOXED(9211548315101863423,64,FLEN)
NAN_BOXED(18434920351956639231,64,FLEN)
NAN_BOXED(9211548315101863423,64,FLEN)
NAN_BOXED(18434920351956639231,64,FLEN)
NAN_BOXED(9211667973469442445,64,FLEN)
NAN_BOXED(18435040010324218253,64,FLEN)
NAN_BOXED(9211667973469442445,64,FLEN)
NAN_BOXED(18435040010324218253,64,FLEN)
NAN_BOXED(9211667973469442445,64,FLEN)
NAN_BOXED(18435040010324218253,64,FLEN)
NAN_BOXED(9211667973469442445,64,FLEN)
NAN_BOXED(18435040010324218253,64,FLEN)
NAN_BOXED(9211667973469442445,64,FLEN)
NAN_BOXED(18435040010324218253,64,FLEN)
NAN_BOXED(9211702769975660235,64,FLEN)
NAN_BOXED(18435074806830436043,64,FLEN)
NAN_BOXED(9211702769975660235,64,FLEN)
NAN_BOXED(18435074806830436043,64,FLEN)
NAN_BOXED(9211702769975660235,64,FLEN)
NAN_BOXED(18435074806830436043,64,FLEN)
NAN_BOXED(9211702769975660235,64,FLEN)
NAN_BOXED(18435074806830436043,64,FLEN)
NAN_BOXED(9211702769975660235,64,FLEN)
NAN_BOXED(18435074806830436043,64,FLEN)
NAN_BOXED(9211828431857705855,64,FLEN)
NAN_BOXED(18435200468712481663,64,FLEN)
NAN_BOXED(9211828431857705855,64,FLEN)
NAN_BOXED(18435200468712481663,64,FLEN)
NAN_BOXED(9211828431857705855,64,FLEN)
NAN_BOXED(18435200468712481663,64,FLEN)
NAN_BOXED(9211828431857705855,64,FLEN)
NAN_BOXED(18435200468712481663,64,FLEN)
NAN_BOXED(9211828431857705855,64,FLEN)
NAN_BOXED(18435200468712481663,64,FLEN)
NAN_BOXED(9211992907983280033,64,FLEN)
NAN_BOXED(18435364944838055841,64,FLEN)
NAN_BOXED(9211992907983280033,64,FLEN)
NAN_BOXED(18435364944838055841,64,FLEN)
NAN_BOXED(9211992907983280033,64,FLEN)
NAN_BOXED(18435364944838055841,64,FLEN)
NAN_BOXED(9211992907983280033,64,FLEN)
NAN_BOXED(18435364944838055841,64,FLEN)
NAN_BOXED(9211992907983280033,64,FLEN)
NAN_BOXED(18435364944838055841,64,FLEN)
NAN_BOXED(9212025486734767775,64,FLEN)
NAN_BOXED(18435397523589543583,64,FLEN)
NAN_BOXED(9212025486734767775,64,FLEN)
NAN_BOXED(18435397523589543583,64,FLEN)
NAN_BOXED(9212025486734767775,64,FLEN)
NAN_BOXED(18435397523589543583,64,FLEN)
NAN_BOXED(9212025486734767775,64,FLEN)
NAN_BOXED(18435397523589543583,64,FLEN)
NAN_BOXED(9212025486734767775,64,FLEN)
NAN_BOXED(18435397523589543583,64,FLEN)
NAN_BOXED(9212067087793038895,64,FLEN)
NAN_BOXED(18435439124647814703,64,FLEN)
NAN_BOXED(9212067087793038895,64,FLEN)
NAN_BOXED(18435439124647814703,64,FLEN)
NAN_BOXED(9212067087793038895,64,FLEN)
NAN_BOXED(18435439124647814703,64,FLEN)
NAN_BOXED(9212067087793038895,64,FLEN)
NAN_BOXED(18435439124647814703,64,FLEN)
NAN_BOXED(9212067087793038895,64,FLEN)
NAN_BOXED(18435439124647814703,64,FLEN)
NAN_BOXED(9212167656799773851,64,FLEN)
NAN_BOXED(18435539693654549659,64,FLEN)
NAN_BOXED(9212167656799773851,64,FLEN)
NAN_BOXED(18435539693654549659,64,FLEN)
NAN_BOXED(9212167656799773851,64,FLEN)
NAN_BOXED(18435539693654549659,64,FLEN)
NAN_BOXED(9212167656799773851,64,FLEN)
NAN_BOXED(18435539693654549659,64,FLEN)
NAN_BOXED(9212167656799773851,64,FLEN)
NAN_BOXED(18435539693654549659,64,FLEN)
NAN_BOXED(9212264612253429787,64,FLEN)
NAN_BOXED(18435636649108205595,64,FLEN)
NAN_BOXED(9212264612253429787,64,FLEN)
NAN_BOXED(18435636649108205595,64,FLEN)
NAN_BOXED(9212264612253429787,64,FLEN)
NAN_BOXED(18435636649108205595,64,FLEN)
NAN_BOXED(9212264612253429787,64,FLEN)
NAN_BOXED(18435636649108205595,64,FLEN)
NAN_BOXED(9212264612253429787,64,FLEN)
NAN_BOXED(18435636649108205595,64,FLEN)
NAN_BOXED(9212323500103813759,64,FLEN)
NAN_BOXED(18435695536958589567,64,FLEN)
NAN_BOXED(9212323500103813759,64,FLEN)
NAN_BOXED(18435695536958589567,64,FLEN)
NAN_BOXED(9212323500103813759,64,FLEN)
NAN_BOXED(18435695536958589567,64,FLEN)
NAN_BOXED(9212323500103813759,64,FLEN)
NAN_BOXED(18435695536958589567,64,FLEN)
NAN_BOXED(9212323500103813759,64,FLEN)
NAN_BOXED(18435695536958589567,64,FLEN)
NAN_BOXED(9212503881370920869,64,FLEN)
NAN_BOXED(18435875918225696677,64,FLEN)
NAN_BOXED(9212503881370920869,64,FLEN)
NAN_BOXED(18435875918225696677,64,FLEN)
NAN_BOXED(9212503881370920869,64,FLEN)
NAN_BOXED(18435875918225696677,64,FLEN)
NAN_BOXED(9212503881370920869,64,FLEN)
NAN_BOXED(18435875918225696677,64,FLEN)
NAN_BOXED(9212503881370920869,64,FLEN)
NAN_BOXED(18435875918225696677,64,FLEN)
NAN_BOXED(9212596126708444255,64,FLEN)
NAN_BOXED(18435968163563220063,64,FLEN)
NAN_BOXED(9212596126708444255,64,FLEN)
NAN_BOXED(18435968163563220063,64,FLEN)
NAN_BOXED(9212596126708444255,64,FLEN)
NAN_BOXED(18435968163563220063,64,FLEN)
NAN_BOXED(9212596126708444255,64,FLEN)
NAN_BOXED(18435968163563220063,64,FLEN)
NAN_BOXED(9212596126708444255,64,FLEN)
NAN_BOXED(18435968163563220063,64,FLEN)
NAN_BOXED(9212620488016083439,64,FLEN)
NAN_BOXED(18435992524870859247,64,FLEN)
NAN_BOXED(9212620488016083439,64,FLEN)
NAN_BOXED(18435992524870859247,64,FLEN)
NAN_BOXED(9212620488016083439,64,FLEN)
NAN_BOXED(18435992524870859247,64,FLEN)
NAN_BOXED(9212620488016083439,64,FLEN)
NAN_BOXED(18435992524870859247,64,FLEN)
NAN_BOXED(9212620488016083439,64,FLEN)
NAN_BOXED(18435992524870859247,64,FLEN)
NAN_BOXED(9212669806696422999,64,FLEN)
NAN_BOXED(18436041843551198807,64,FLEN)
NAN_BOXED(9212669806696422999,64,FLEN)
NAN_BOXED(18436041843551198807,64,FLEN)
NAN_BOXED(9212669806696422999,64,FLEN)
NAN_BOXED(18436041843551198807,64,FLEN)
NAN_BOXED(9212669806696422999,64,FLEN)
NAN_BOXED(18436041843551198807,64,FLEN)
NAN_BOXED(9212669806696422999,64,FLEN)
NAN_BOXED(18436041843551198807,64,FLEN)
NAN_BOXED(9212708831003591251,64,FLEN)
NAN_BOXED(18436080867858367059,64,FLEN)
NAN_BOXED(9212708831003591251,64,FLEN)
NAN_BOXED(18436080867858367059,64,FLEN)
NAN_BOXED(9212708831003591251,64,FLEN)
NAN_BOXED(18436080867858367059,64,FLEN)
NAN_BOXED(9212708831003591251,64,FLEN)
NAN_BOXED(18436080867858367059,64,FLEN)
NAN_BOXED(9212708831003591251,64,FLEN)
NAN_BOXED(18436080867858367059,64,FLEN)
NAN_BOXED(9212764081684483157,64,FLEN)
NAN_BOXED(18436136118539258965,64,FLEN)
NAN_BOXED(9212764081684483157,64,FLEN)
NAN_BOXED(18436136118539258965,64,FLEN)
NAN_BOXED(9212764081684483157,64,FLEN)
NAN_BOXED(18436136118539258965,64,FLEN)
NAN_BOXED(9212764081684483157,64,FLEN)
NAN_BOXED(18436136118539258965,64,FLEN)
NAN_BOXED(9212764081684483157,64,FLEN)
NAN_BOXED(18436136118539258965,64,FLEN)
NAN_BOXED(9212822920320031465,64,FLEN)
NAN_BOXED(18436194957174807273,64,FLEN)
NAN_BOXED(9212822920320031465,64,FLEN)
NAN_BOXED(18436194957174807273,64,FLEN)
NAN_BOXED(9212822920320031465,64,FLEN)
NAN_BOXED(18436194957174807273,64,FLEN)
NAN_BOXED(9212822920320031465,64,FLEN)
NAN_BOXED(18436194957174807273,64,FLEN)
NAN_BOXED(9212822920320031465,64,FLEN)
NAN_BOXED(18436194957174807273,64,FLEN)
NAN_BOXED(9212823129135617989,64,FLEN)
NAN_BOXED(18436195165990393797,64,FLEN)
NAN_BOXED(9212823129135617989,64,FLEN)
NAN_BOXED(18436195165990393797,64,FLEN)
NAN_BOXED(9212823129135617989,64,FLEN)
NAN_BOXED(18436195165990393797,64,FLEN)
NAN_BOXED(9212823129135617989,64,FLEN)
NAN_BOXED(18436195165990393797,64,FLEN)
NAN_BOXED(9212823129135617989,64,FLEN)
NAN_BOXED(18436195165990393797,64,FLEN)
NAN_BOXED(9212828598679798945,64,FLEN)
NAN_BOXED(18436200635534574753,64,FLEN)
NAN_BOXED(9212828598679798945,64,FLEN)
NAN_BOXED(18436200635534574753,64,FLEN)
NAN_BOXED(9212828598679798945,64,FLEN)
NAN_BOXED(18436200635534574753,64,FLEN)
NAN_BOXED(9212828598679798945,64,FLEN)
NAN_BOXED(18436200635534574753,64,FLEN)
NAN_BOXED(9212828598679798945,64,FLEN)
NAN_BOXED(18436200635534574753,64,FLEN)
NAN_BOXED(9212933982404143479,64,FLEN)
NAN_BOXED(18436306019258919287,64,FLEN)
NAN_BOXED(9212933982404143479,64,FLEN)
NAN_BOXED(18436306019258919287,64,FLEN)
NAN_BOXED(9212933982404143479,64,FLEN)
NAN_BOXED(18436306019258919287,64,FLEN)
NAN_BOXED(9212933982404143479,64,FLEN)
NAN_BOXED(18436306019258919287,64,FLEN)
NAN_BOXED(9212933982404143479,64,FLEN)
NAN_BOXED(18436306019258919287,64,FLEN)
NAN_BOXED(9213125825728682613,64,FLEN)
NAN_BOXED(18436497862583458421,64,FLEN)
NAN_BOXED(9213125825728682613,64,FLEN)
NAN_BOXED(18436497862583458421,64,FLEN)
NAN_BOXED(9213125825728682613,64,FLEN)
NAN_BOXED(18436497862583458421,64,FLEN)
NAN_BOXED(9213125825728682613,64,FLEN)
NAN_BOXED(18436497862583458421,64,FLEN)
NAN_BOXED(9213125825728682613,64,FLEN)
NAN_BOXED(18436497862583458421,64,FLEN)
NAN_BOXED(9213178982810751521,64,FLEN)
NAN_BOXED(18436551019665527329,64,FLEN)
NAN_BOXED(9213178982810751521,64,FLEN)
NAN_BOXED(18436551019665527329,64,FLEN)
NAN_BOXED(9213178982810751521,64,FLEN)
NAN_BOXED(18436551019665527329,64,FLEN)
NAN_BOXED(9213178982810751521,64,FLEN)
NAN_BOXED(18436551019665527329,64,FLEN)
NAN_BOXED(9213178982810751521,64,FLEN)
NAN_BOXED(18436551019665527329,64,FLEN)
NAN_BOXED(9213325659614685475,64,FLEN)
NAN_BOXED(18436697696469461283,64,FLEN)
NAN_BOXED(9213325659614685475,64,FLEN)
NAN_BOXED(18436697696469461283,64,FLEN)
NAN_BOXED(9213325659614685475,64,FLEN)
NAN_BOXED(18436697696469461283,64,FLEN)
NAN_BOXED(9213325659614685475,64,FLEN)
NAN_BOXED(18436697696469461283,64,FLEN)
NAN_BOXED(9213325659614685475,64,FLEN)
NAN_BOXED(18436697696469461283,64,FLEN)
NAN_BOXED(9213380390167959249,64,FLEN)
NAN_BOXED(18436752427022735057,64,FLEN)
NAN_BOXED(9213380390167959249,64,FLEN)
NAN_BOXED(18436752427022735057,64,FLEN)
NAN_BOXED(9213380390167959249,64,FLEN)
NAN_BOXED(18436752427022735057,64,FLEN)
NAN_BOXED(9213380390167959249,64,FLEN)
NAN_BOXED(18436752427022735057,64,FLEN)
NAN_BOXED(9213380390167959249,64,FLEN)
NAN_BOXED(18436752427022735057,64,FLEN)
NAN_BOXED(9213474261701817677,64,FLEN)
NAN_BOXED(18436846298556593485,64,FLEN)
NAN_BOXED(9213474261701817677,64,FLEN)
NAN_BOXED(18436846298556593485,64,FLEN)
NAN_BOXED(9213474261701817677,64,FLEN)
NAN_BOXED(18436846298556593485,64,FLEN)
NAN_BOXED(9213474261701817677,64,FLEN)
NAN_BOXED(18436846298556593485,64,FLEN)
NAN_BOXED(9213474261701817677,64,FLEN)
NAN_BOXED(18436846298556593485,64,FLEN)
NAN_BOXED(9213493153150336619,64,FLEN)
NAN_BOXED(18436865190005112427,64,FLEN)
NAN_BOXED(9213493153150336619,64,FLEN)
NAN_BOXED(18436865190005112427,64,FLEN)
NAN_BOXED(9213493153150336619,64,FLEN)
NAN_BOXED(18436865190005112427,64,FLEN)
NAN_BOXED(9213493153150336619,64,FLEN)
NAN_BOXED(18436865190005112427,64,FLEN)
NAN_BOXED(9213493153150336619,64,FLEN)
NAN_BOXED(18436865190005112427,64,FLEN)
NAN_BOXED(9213768421133917035,64,FLEN)
NAN_BOXED(18437140457988692843,64,FLEN)
NAN_BOXED(9213768421133917035,64,FLEN)
NAN_BOXED(18437140457988692843,64,FLEN)
NAN_BOXED(9213768421133917035,64,FLEN)
NAN_BOXED(18437140457988692843,64,FLEN)
NAN_BOXED(9213768421133917035,64,FLEN)
NAN_BOXED(18437140457988692843,64,FLEN)
NAN_BOXED(9213768421133917035,64,FLEN)
NAN_BOXED(18437140457988692843,64,FLEN)
NAN_BOXED(9213840424210900439,64,FLEN)
NAN_BOXED(18437212461065676247,64,FLEN)
NAN_BOXED(9213840424210900439,64,FLEN)
NAN_BOXED(18437212461065676247,64,FLEN)
NAN_BOXED(9213840424210900439,64,FLEN)
NAN_BOXED(18437212461065676247,64,FLEN)
NAN_BOXED(9213840424210900439,64,FLEN)
NAN_BOXED(18437212461065676247,64,FLEN)
NAN_BOXED(9213840424210900439,64,FLEN)
NAN_BOXED(18437212461065676247,64,FLEN)
NAN_BOXED(9213853686520038215,64,FLEN)
NAN_BOXED(18437225723374814023,64,FLEN)
NAN_BOXED(9213853686520038215,64,FLEN)
NAN_BOXED(18437225723374814023,64,FLEN)
NAN_BOXED(9213853686520038215,64,FLEN)
NAN_BOXED(18437225723374814023,64,FLEN)
NAN_BOXED(9213853686520038215,64,FLEN)
NAN_BOXED(18437225723374814023,64,FLEN)
NAN_BOXED(9213853686520038215,64,FLEN)
NAN_BOXED(18437225723374814023,64,FLEN)
NAN_BOXED(9213863005374807959,64,FLEN)
NAN_BOXED(18437235042229583767,64,FLEN)
NAN_BOXED(9213863005374807959,64,FLEN)
NAN_BOXED(18437235042229583767,64,FLEN)
NAN_BOXED(9213863005374807959,64,FLEN)
NAN_BOXED(18437235042229583767,64,FLEN)
NAN_BOXED(9213863005374807959,64,FLEN)
NAN_BOXED(18437235042229583767,64,FLEN)
NAN_BOXED(9213863005374807959,64,FLEN)
NAN_BOXED(18437235042229583767,64,FLEN)
NAN_BOXED(9213942057537469583,64,FLEN)
NAN_BOXED(18437314094392245391,64,FLEN)
NAN_BOXED(9213942057537469583,64,FLEN)
NAN_BOXED(18437314094392245391,64,FLEN)
NAN_BOXED(9213942057537469583,64,FLEN)
NAN_BOXED(18437314094392245391,64,FLEN)
NAN_BOXED(9213942057537469583,64,FLEN)
NAN_BOXED(18437314094392245391,64,FLEN)
NAN_BOXED(9213942057537469583,64,FLEN)
NAN_BOXED(18437314094392245391,64,FLEN)
NAN_BOXED(9213943245805799675,64,FLEN)
NAN_BOXED(18437315282660575483,64,FLEN)
NAN_BOXED(9213943245805799675,64,FLEN)
NAN_BOXED(18437315282660575483,64,FLEN)
NAN_BOXED(9213943245805799675,64,FLEN)
NAN_BOXED(18437315282660575483,64,FLEN)
NAN_BOXED(9213943245805799675,64,FLEN)
NAN_BOXED(18437315282660575483,64,FLEN)
NAN_BOXED(9213943245805799675,64,FLEN)
NAN_BOXED(18437315282660575483,64,FLEN)
NAN_BOXED(9213950682553033423,64,FLEN)
NAN_BOXED(18437322719407809231,64,FLEN)
NAN_BOXED(9213950682553033423,64,FLEN)
NAN_BOXED(18437322719407809231,64,FLEN)
NAN_BOXED(9213950682553033423,64,FLEN)
NAN_BOXED(18437322719407809231,64,FLEN)
NAN_BOXED(9213950682553033423,64,FLEN)
NAN_BOXED(18437322719407809231,64,FLEN)
NAN_BOXED(9213950682553033423,64,FLEN)
NAN_BOXED(18437322719407809231,64,FLEN)
NAN_BOXED(9213969685808683973,64,FLEN)
NAN_BOXED(18437341722663459781,64,FLEN)
NAN_BOXED(9213969685808683973,64,FLEN)
NAN_BOXED(18437341722663459781,64,FLEN)
NAN_BOXED(9213969685808683973,64,FLEN)
NAN_BOXED(18437341722663459781,64,FLEN)
NAN_BOXED(9213969685808683973,64,FLEN)
NAN_BOXED(18437341722663459781,64,FLEN)
NAN_BOXED(9213969685808683973,64,FLEN)
NAN_BOXED(18437341722663459781,64,FLEN)
NAN_BOXED(9214135435062913637,64,FLEN)
NAN_BOXED(18437507471917689445,64,FLEN)
NAN_BOXED(9214135435062913637,64,FLEN)
NAN_BOXED(18437507471917689445,64,FLEN)
NAN_BOXED(9214135435062913637,64,FLEN)
NAN_BOXED(18437507471917689445,64,FLEN)
NAN_BOXED(9214135435062913637,64,FLEN)
NAN_BOXED(18437507471917689445,64,FLEN)
NAN_BOXED(9214135435062913637,64,FLEN)
NAN_BOXED(18437507471917689445,64,FLEN)
NAN_BOXED(9214159812207471189,64,FLEN)
NAN_BOXED(18437531849062246997,64,FLEN)
NAN_BOXED(9214159812207471189,64,FLEN)
NAN_BOXED(18437531849062246997,64,FLEN)
NAN_BOXED(9214159812207471189,64,FLEN)
NAN_BOXED(18437531849062246997,64,FLEN)
NAN_BOXED(9214159812207471189,64,FLEN)
NAN_BOXED(18437531849062246997,64,FLEN)
NAN_BOXED(9214159812207471189,64,FLEN)
NAN_BOXED(18437531849062246997,64,FLEN)
NAN_BOXED(9214190452413256281,64,FLEN)
NAN_BOXED(18437562489268032089,64,FLEN)
NAN_BOXED(9214190452413256281,64,FLEN)
NAN_BOXED(18437562489268032089,64,FLEN)
NAN_BOXED(9214190452413256281,64,FLEN)
NAN_BOXED(18437562489268032089,64,FLEN)
NAN_BOXED(9214190452413256281,64,FLEN)
NAN_BOXED(18437562489268032089,64,FLEN)
NAN_BOXED(9214190452413256281,64,FLEN)
NAN_BOXED(18437562489268032089,64,FLEN)
NAN_BOXED(9214217677241754655,64,FLEN)
NAN_BOXED(18437589714096530463,64,FLEN)
NAN_BOXED(9214217677241754655,64,FLEN)
NAN_BOXED(18437589714096530463,64,FLEN)
NAN_BOXED(9214217677241754655,64,FLEN)
NAN_BOXED(18437589714096530463,64,FLEN)
NAN_BOXED(9214217677241754655,64,FLEN)
NAN_BOXED(18437589714096530463,64,FLEN)
NAN_BOXED(9214217677241754655,64,FLEN)
NAN_BOXED(18437589714096530463,64,FLEN)
NAN_BOXED(9214267247665318009,64,FLEN)
NAN_BOXED(18437639284520093817,64,FLEN)
NAN_BOXED(9214267247665318009,64,FLEN)
NAN_BOXED(18437639284520093817,64,FLEN)
NAN_BOXED(9214267247665318009,64,FLEN)
NAN_BOXED(18437639284520093817,64,FLEN)
NAN_BOXED(9214267247665318009,64,FLEN)
NAN_BOXED(18437639284520093817,64,FLEN)
NAN_BOXED(9214267247665318009,64,FLEN)
NAN_BOXED(18437639284520093817,64,FLEN)
NAN_BOXED(9214336751198029667,64,FLEN)
NAN_BOXED(18437708788052805475,64,FLEN)
NAN_BOXED(9214336751198029667,64,FLEN)
NAN_BOXED(18437708788052805475,64,FLEN)
NAN_BOXED(9214336751198029667,64,FLEN)
NAN_BOXED(18437708788052805475,64,FLEN)
NAN_BOXED(9214336751198029667,64,FLEN)
NAN_BOXED(18437708788052805475,64,FLEN)
NAN_BOXED(9214336751198029667,64,FLEN)
NAN_BOXED(18437708788052805475,64,FLEN)
NAN_BOXED(9214397592327051173,64,FLEN)
NAN_BOXED(18437769629181826981,64,FLEN)
NAN_BOXED(9214397592327051173,64,FLEN)
NAN_BOXED(18437769629181826981,64,FLEN)
NAN_BOXED(9214397592327051173,64,FLEN)
NAN_BOXED(18437769629181826981,64,FLEN)
NAN_BOXED(9214397592327051173,64,FLEN)
NAN_BOXED(18437769629181826981,64,FLEN)
NAN_BOXED(9214397592327051173,64,FLEN)
NAN_BOXED(18437769629181826981,64,FLEN)
NAN_BOXED(9214426607052649465,64,FLEN)
NAN_BOXED(18437798643907425273,64,FLEN)
NAN_BOXED(9214426607052649465,64,FLEN)
NAN_BOXED(18437798643907425273,64,FLEN)
NAN_BOXED(9214426607052649465,64,FLEN)
NAN_BOXED(18437798643907425273,64,FLEN)
NAN_BOXED(9214426607052649465,64,FLEN)
NAN_BOXED(18437798643907425273,64,FLEN)
NAN_BOXED(9214426607052649465,64,FLEN)
NAN_BOXED(18437798643907425273,64,FLEN)
NAN_BOXED(9214436360549428293,64,FLEN)
NAN_BOXED(18437808397404204101,64,FLEN)
NAN_BOXED(9214436360549428293,64,FLEN)
NAN_BOXED(18437808397404204101,64,FLEN)
NAN_BOXED(9214436360549428293,64,FLEN)
NAN_BOXED(18437808397404204101,64,FLEN)
NAN_BOXED(9214436360549428293,64,FLEN)
NAN_BOXED(18437808397404204101,64,FLEN)
NAN_BOXED(9214436360549428293,64,FLEN)
NAN_BOXED(18437808397404204101,64,FLEN)
NAN_BOXED(9214466391261943558,64,FLEN)
NAN_BOXED(18437838428116719366,64,FLEN)
NAN_BOXED(9214466391261943558,64,FLEN)
NAN_BOXED(18437838428116719366,64,FLEN)
NAN_BOXED(9214466391261943558,64,FLEN)
NAN_BOXED(18437838428116719366,64,FLEN)
NAN_BOXED(9214466391261943558,64,FLEN)
NAN_BOXED(18437838428116719366,64,FLEN)
NAN_BOXED(9214466391261943558,64,FLEN)
NAN_BOXED(18437838428116719366,64,FLEN)
NAN_BOXED(9214536007971030728,64,FLEN)
NAN_BOXED(18437908044825806536,64,FLEN)
NAN_BOXED(9214536007971030728,64,FLEN)
NAN_BOXED(18437908044825806536,64,FLEN)
NAN_BOXED(9214536007971030728,64,FLEN)
NAN_BOXED(18437908044825806536,64,FLEN)
NAN_BOXED(9214536007971030728,64,FLEN)
NAN_BOXED(18437908044825806536,64,FLEN)
NAN_BOXED(9214536007971030728,64,FLEN)
NAN_BOXED(18437908044825806536,64,FLEN)
NAN_BOXED(9214572455629825546,64,FLEN)
NAN_BOXED(18437944492484601354,64,FLEN)
NAN_BOXED(9214572455629825546,64,FLEN)
NAN_BOXED(18437944492484601354,64,FLEN)
NAN_BOXED(9214572455629825546,64,FLEN)
NAN_BOXED(18437944492484601354,64,FLEN)
NAN_BOXED(9214572455629825546,64,FLEN)
NAN_BOXED(18437944492484601354,64,FLEN)
NAN_BOXED(9214572455629825546,64,FLEN)
NAN_BOXED(18437944492484601354,64,FLEN)
NAN_BOXED(9214683839309988890,64,FLEN)
NAN_BOXED(18438055876164764698,64,FLEN)
NAN_BOXED(9214683839309988890,64,FLEN)
NAN_BOXED(18438055876164764698,64,FLEN)
NAN_BOXED(9214683839309988890,64,FLEN)
NAN_BOXED(18438055876164764698,64,FLEN)
NAN_BOXED(9214683839309988890,64,FLEN)
NAN_BOXED(18438055876164764698,64,FLEN)
NAN_BOXED(9214683839309988890,64,FLEN)
NAN_BOXED(18438055876164764698,64,FLEN)
NAN_BOXED(9214730529213769471,64,FLEN)
NAN_BOXED(18438102566068545279,64,FLEN)
NAN_BOXED(9214730529213769471,64,FLEN)
NAN_BOXED(18438102566068545279,64,FLEN)
NAN_BOXED(9214730529213769471,64,FLEN)
NAN_BOXED(18438102566068545279,64,FLEN)
NAN_BOXED(9214730529213769471,64,FLEN)
NAN_BOXED(18438102566068545279,64,FLEN)
NAN_BOXED(9214730529213769471,64,FLEN)
NAN_BOXED(18438102566068545279,64,FLEN)
NAN_BOXED(9214801545319989399,64,FLEN)
NAN_BOXED(18438173582174765207,64,FLEN)
NAN_BOXED(9214801545319989399,64,FLEN)
NAN_BOXED(18438173582174765207,64,FLEN)
NAN_BOXED(9214801545319989399,64,FLEN)
NAN_BOXED(18438173582174765207,64,FLEN)
NAN_BOXED(9214801545319989399,64,FLEN)
NAN_BOXED(18438173582174765207,64,FLEN)
NAN_BOXED(9214801545319989399,64,FLEN)
NAN_BOXED(18438173582174765207,64,FLEN)
NAN_BOXED(9214803481933249140,64,FLEN)
NAN_BOXED(18438175518788024948,64,FLEN)
NAN_BOXED(9214803481933249140,64,FLEN)
NAN_BOXED(18438175518788024948,64,FLEN)
NAN_BOXED(9214803481933249140,64,FLEN)
NAN_BOXED(18438175518788024948,64,FLEN)
NAN_BOXED(9214803481933249140,64,FLEN)
NAN_BOXED(18438175518788024948,64,FLEN)
NAN_BOXED(9214803481933249140,64,FLEN)
NAN_BOXED(18438175518788024948,64,FLEN)
NAN_BOXED(9214807485294612844,64,FLEN)
NAN_BOXED(18438179522149388652,64,FLEN)
NAN_BOXED(9214807485294612844,64,FLEN)
NAN_BOXED(18438179522149388652,64,FLEN)
NAN_BOXED(9214807485294612844,64,FLEN)
NAN_BOXED(18438179522149388652,64,FLEN)
NAN_BOXED(9214807485294612844,64,FLEN)
NAN_BOXED(18438179522149388652,64,FLEN)
NAN_BOXED(9214807485294612844,64,FLEN)
NAN_BOXED(18438179522149388652,64,FLEN)
NAN_BOXED(9214910675846129417,64,FLEN)
NAN_BOXED(18438282712700905225,64,FLEN)
NAN_BOXED(9214910675846129417,64,FLEN)
NAN_BOXED(18438282712700905225,64,FLEN)
NAN_BOXED(9214910675846129417,64,FLEN)
NAN_BOXED(18438282712700905225,64,FLEN)
NAN_BOXED(9214910675846129417,64,FLEN)
NAN_BOXED(18438282712700905225,64,FLEN)
NAN_BOXED(9214910675846129417,64,FLEN)
NAN_BOXED(18438282712700905225,64,FLEN)
NAN_BOXED(9214987349815971020,64,FLEN)
NAN_BOXED(18438359386670746828,64,FLEN)
NAN_BOXED(9214987349815971020,64,FLEN)
NAN_BOXED(18438359386670746828,64,FLEN)
NAN_BOXED(9214987349815971020,64,FLEN)
NAN_BOXED(18438359386670746828,64,FLEN)
NAN_BOXED(9214987349815971020,64,FLEN)
NAN_BOXED(18438359386670746828,64,FLEN)
NAN_BOXED(9214987349815971020,64,FLEN)
NAN_BOXED(18438359386670746828,64,FLEN)
NAN_BOXED(9215030221724242568,64,FLEN)
NAN_BOXED(18438402258579018376,64,FLEN)
NAN_BOXED(9215030221724242568,64,FLEN)
NAN_BOXED(18438402258579018376,64,FLEN)
NAN_BOXED(9215030221724242568,64,FLEN)
NAN_BOXED(18438402258579018376,64,FLEN)
NAN_BOXED(9215030221724242568,64,FLEN)
NAN_BOXED(18438402258579018376,64,FLEN)
NAN_BOXED(9215030221724242568,64,FLEN)
NAN_BOXED(18438402258579018376,64,FLEN)
NAN_BOXED(9215046241358441199,64,FLEN)
NAN_BOXED(18438418278213217007,64,FLEN)
NAN_BOXED(9215046241358441199,64,FLEN)
NAN_BOXED(18438418278213217007,64,FLEN)
NAN_BOXED(9215046241358441199,64,FLEN)
NAN_BOXED(18438418278213217007,64,FLEN)
NAN_BOXED(9215046241358441199,64,FLEN)
NAN_BOXED(18438418278213217007,64,FLEN)
NAN_BOXED(9215046241358441199,64,FLEN)
NAN_BOXED(18438418278213217007,64,FLEN)
NAN_BOXED(9215048960936939890,64,FLEN)
NAN_BOXED(18438420997791715698,64,FLEN)
NAN_BOXED(9215048960936939890,64,FLEN)
NAN_BOXED(18438420997791715698,64,FLEN)
NAN_BOXED(9215048960936939890,64,FLEN)
NAN_BOXED(18438420997791715698,64,FLEN)
NAN_BOXED(9215048960936939890,64,FLEN)
NAN_BOXED(18438420997791715698,64,FLEN)
NAN_BOXED(9215048960936939890,64,FLEN)
NAN_BOXED(18438420997791715698,64,FLEN)
NAN_BOXED(9215142955632766273,64,FLEN)
NAN_BOXED(18438514992487542081,64,FLEN)
NAN_BOXED(9215142955632766273,64,FLEN)
NAN_BOXED(18438514992487542081,64,FLEN)
NAN_BOXED(9215142955632766273,64,FLEN)
NAN_BOXED(18438514992487542081,64,FLEN)
NAN_BOXED(9215142955632766273,64,FLEN)
NAN_BOXED(18438514992487542081,64,FLEN)
NAN_BOXED(9215142955632766273,64,FLEN)
NAN_BOXED(18438514992487542081,64,FLEN)
NAN_BOXED(9215154021955178399,64,FLEN)
NAN_BOXED(18438526058809954207,64,FLEN)
NAN_BOXED(9215154021955178399,64,FLEN)
NAN_BOXED(18438526058809954207,64,FLEN)
NAN_BOXED(9215154021955178399,64,FLEN)
NAN_BOXED(18438526058809954207,64,FLEN)
NAN_BOXED(9215154021955178399,64,FLEN)
NAN_BOXED(18438526058809954207,64,FLEN)
NAN_BOXED(9215154021955178399,64,FLEN)
NAN_BOXED(18438526058809954207,64,FLEN)
NAN_BOXED(9215232112547927519,64,FLEN)
NAN_BOXED(18438604149402703327,64,FLEN)
NAN_BOXED(9215232112547927519,64,FLEN)
NAN_BOXED(18438604149402703327,64,FLEN)
NAN_BOXED(9215232112547927519,64,FLEN)
NAN_BOXED(18438604149402703327,64,FLEN)
NAN_BOXED(9215232112547927519,64,FLEN)
NAN_BOXED(18438604149402703327,64,FLEN)
NAN_BOXED(9215232112547927519,64,FLEN)
NAN_BOXED(18438604149402703327,64,FLEN)
NAN_BOXED(9215353563360373303,64,FLEN)
NAN_BOXED(18438725600215149111,64,FLEN)
NAN_BOXED(9215353563360373303,64,FLEN)
NAN_BOXED(18438725600215149111,64,FLEN)
NAN_BOXED(9215353563360373303,64,FLEN)
NAN_BOXED(18438725600215149111,64,FLEN)
NAN_BOXED(9215353563360373303,64,FLEN)
NAN_BOXED(18438725600215149111,64,FLEN)
NAN_BOXED(9215353563360373303,64,FLEN)
NAN_BOXED(18438725600215149111,64,FLEN)
NAN_BOXED(9215356708066272020,64,FLEN)
NAN_BOXED(18438728744921047828,64,FLEN)
NAN_BOXED(9215356708066272020,64,FLEN)
NAN_BOXED(18438728744921047828,64,FLEN)
NAN_BOXED(9215356708066272020,64,FLEN)
NAN_BOXED(18438728744921047828,64,FLEN)
NAN_BOXED(9215356708066272020,64,FLEN)
NAN_BOXED(18438728744921047828,64,FLEN)
NAN_BOXED(9215356708066272020,64,FLEN)
NAN_BOXED(18438728744921047828,64,FLEN)
NAN_BOXED(9215380608101702101,64,FLEN)
NAN_BOXED(18438752644956477909,64,FLEN)
NAN_BOXED(9215380608101702101,64,FLEN)
NAN_BOXED(18438752644956477909,64,FLEN)
NAN_BOXED(9215380608101702101,64,FLEN)
NAN_BOXED(18438752644956477909,64,FLEN)
NAN_BOXED(9215380608101702101,64,FLEN)
NAN_BOXED(18438752644956477909,64,FLEN)
NAN_BOXED(9215380608101702101,64,FLEN)
NAN_BOXED(18438752644956477909,64,FLEN)
NAN_BOXED(9215380697499704893,64,FLEN)
NAN_BOXED(18438752734354480701,64,FLEN)
NAN_BOXED(9215380697499704893,64,FLEN)
NAN_BOXED(18438752734354480701,64,FLEN)
NAN_BOXED(9215380697499704893,64,FLEN)
NAN_BOXED(18438752734354480701,64,FLEN)
NAN_BOXED(9215380697499704893,64,FLEN)
NAN_BOXED(18438752734354480701,64,FLEN)
NAN_BOXED(9215380697499704893,64,FLEN)
NAN_BOXED(18438752734354480701,64,FLEN)
NAN_BOXED(9215431010738673301,64,FLEN)
NAN_BOXED(18438803047593449109,64,FLEN)
NAN_BOXED(9215431010738673301,64,FLEN)
NAN_BOXED(18438803047593449109,64,FLEN)
NAN_BOXED(9215431010738673301,64,FLEN)
NAN_BOXED(18438803047593449109,64,FLEN)
NAN_BOXED(9215431010738673301,64,FLEN)
NAN_BOXED(18438803047593449109,64,FLEN)
NAN_BOXED(9215431010738673301,64,FLEN)
NAN_BOXED(18438803047593449109,64,FLEN)
NAN_BOXED(9215450548359431548,64,FLEN)
NAN_BOXED(18438822585214207356,64,FLEN)
NAN_BOXED(9215450548359431548,64,FLEN)
NAN_BOXED(18438822585214207356,64,FLEN)
NAN_BOXED(9215450548359431548,64,FLEN)
NAN_BOXED(18438822585214207356,64,FLEN)
NAN_BOXED(9215450548359431548,64,FLEN)
NAN_BOXED(18438822585214207356,64,FLEN)
NAN_BOXED(9215450548359431548,64,FLEN)
NAN_BOXED(18438822585214207356,64,FLEN)
NAN_BOXED(9215506428469577978,64,FLEN)
NAN_BOXED(18438878465324353786,64,FLEN)
NAN_BOXED(9215506428469577978,64,FLEN)
NAN_BOXED(18438878465324353786,64,FLEN)
NAN_BOXED(9215506428469577978,64,FLEN)
NAN_BOXED(18438878465324353786,64,FLEN)
NAN_BOXED(9215506428469577978,64,FLEN)
NAN_BOXED(18438878465324353786,64,FLEN)
NAN_BOXED(9215506428469577978,64,FLEN)
NAN_BOXED(18438878465324353786,64,FLEN)
NAN_BOXED(9215535469881438058,64,FLEN)
NAN_BOXED(18438907506736213866,64,FLEN)
NAN_BOXED(9215535469881438058,64,FLEN)
NAN_BOXED(18438907506736213866,64,FLEN)
NAN_BOXED(9215535469881438058,64,FLEN)
NAN_BOXED(18438907506736213866,64,FLEN)
NAN_BOXED(9215535469881438058,64,FLEN)
NAN_BOXED(18438907506736213866,64,FLEN)
NAN_BOXED(9215535469881438058,64,FLEN)
NAN_BOXED(18438907506736213866,64,FLEN)
NAN_BOXED(9215537100627595555,64,FLEN)
NAN_BOXED(18438909137482371363,64,FLEN)
NAN_BOXED(9215537100627595555,64,FLEN)
NAN_BOXED(18438909137482371363,64,FLEN)
NAN_BOXED(9215537100627595555,64,FLEN)
NAN_BOXED(18438909137482371363,64,FLEN)
NAN_BOXED(9215537100627595555,64,FLEN)
NAN_BOXED(18438909137482371363,64,FLEN)
NAN_BOXED(9215537100627595555,64,FLEN)
NAN_BOXED(18438909137482371363,64,FLEN)
NAN_BOXED(9215556603912934488,64,FLEN)
NAN_BOXED(18438928640767710296,64,FLEN)
NAN_BOXED(9215556603912934488,64,FLEN)
NAN_BOXED(18438928640767710296,64,FLEN)
NAN_BOXED(9215556603912934488,64,FLEN)
NAN_BOXED(18438928640767710296,64,FLEN)
NAN_BOXED(9215556603912934488,64,FLEN)
NAN_BOXED(18438928640767710296,64,FLEN)
NAN_BOXED(9215556603912934488,64,FLEN)
NAN_BOXED(18438928640767710296,64,FLEN)
NAN_BOXED(9215563594579185333,64,FLEN)
NAN_BOXED(18438935631433961141,64,FLEN)
NAN_BOXED(9215563594579185333,64,FLEN)
NAN_BOXED(18438935631433961141,64,FLEN)
NAN_BOXED(9215563594579185333,64,FLEN)
NAN_BOXED(18438935631433961141,64,FLEN)
NAN_BOXED(9215563594579185333,64,FLEN)
NAN_BOXED(18438935631433961141,64,FLEN)
NAN_BOXED(9215563594579185333,64,FLEN)
NAN_BOXED(18438935631433961141,64,FLEN)
NAN_BOXED(9215569531155137491,64,FLEN)
NAN_BOXED(18438941568009913299,64,FLEN)
NAN_BOXED(9215569531155137491,64,FLEN)
NAN_BOXED(18438941568009913299,64,FLEN)
NAN_BOXED(9215569531155137491,64,FLEN)
NAN_BOXED(18438941568009913299,64,FLEN)
NAN_BOXED(9215569531155137491,64,FLEN)
NAN_BOXED(18438941568009913299,64,FLEN)
NAN_BOXED(9215569531155137491,64,FLEN)
NAN_BOXED(18438941568009913299,64,FLEN)
NAN_BOXED(9215580808687979403,64,FLEN)
NAN_BOXED(18438952845542755211,64,FLEN)
NAN_BOXED(9215580808687979403,64,FLEN)
NAN_BOXED(18438952845542755211,64,FLEN)
NAN_BOXED(9215580808687979403,64,FLEN)
NAN_BOXED(18438952845542755211,64,FLEN)
NAN_BOXED(9215580808687979403,64,FLEN)
NAN_BOXED(18438952845542755211,64,FLEN)
NAN_BOXED(9215580808687979403,64,FLEN)
NAN_BOXED(18438952845542755211,64,FLEN)
NAN_BOXED(9215602421383488507,64,FLEN)
NAN_BOXED(18438974458238264315,64,FLEN)
NAN_BOXED(9215602421383488507,64,FLEN)
NAN_BOXED(18438974458238264315,64,FLEN)
NAN_BOXED(9215602421383488507,64,FLEN)
NAN_BOXED(18438974458238264315,64,FLEN)
NAN_BOXED(9215602421383488507,64,FLEN)
NAN_BOXED(18438974458238264315,64,FLEN)
NAN_BOXED(9215602421383488507,64,FLEN)
NAN_BOXED(18438974458238264315,64,FLEN)
NAN_BOXED(9215709301023918047,64,FLEN)
NAN_BOXED(18439081337878693855,64,FLEN)
NAN_BOXED(9215709301023918047,64,FLEN)
NAN_BOXED(18439081337878693855,64,FLEN)
NAN_BOXED(9215709301023918047,64,FLEN)
NAN_BOXED(18439081337878693855,64,FLEN)
NAN_BOXED(9215709301023918047,64,FLEN)
NAN_BOXED(18439081337878693855,64,FLEN)
NAN_BOXED(9215709301023918047,64,FLEN)
NAN_BOXED(18439081337878693855,64,FLEN)
NAN_BOXED(9215722972270324562,64,FLEN)
NAN_BOXED(18439095009125100370,64,FLEN)
NAN_BOXED(9215722972270324562,64,FLEN)
NAN_BOXED(18439095009125100370,64,FLEN)
NAN_BOXED(9215722972270324562,64,FLEN)
NAN_BOXED(18439095009125100370,64,FLEN)
NAN_BOXED(9215722972270324562,64,FLEN)
NAN_BOXED(18439095009125100370,64,FLEN)
NAN_BOXED(9215722972270324562,64,FLEN)
NAN_BOXED(18439095009125100370,64,FLEN)
NAN_BOXED(9215764212871748210,64,FLEN)
NAN_BOXED(18439136249726524018,64,FLEN)
NAN_BOXED(9215764212871748210,64,FLEN)
NAN_BOXED(18439136249726524018,64,FLEN)
NAN_BOXED(9215764212871748210,64,FLEN)
NAN_BOXED(18439136249726524018,64,FLEN)
NAN_BOXED(9215764212871748210,64,FLEN)
NAN_BOXED(18439136249726524018,64,FLEN)
NAN_BOXED(9215764212871748210,64,FLEN)
NAN_BOXED(18439136249726524018,64,FLEN)
NAN_BOXED(9215825768290321836,64,FLEN)
NAN_BOXED(18439197805145097644,64,FLEN)
NAN_BOXED(9215825768290321836,64,FLEN)
NAN_BOXED(18439197805145097644,64,FLEN)
NAN_BOXED(9215825768290321836,64,FLEN)
NAN_BOXED(18439197805145097644,64,FLEN)
NAN_BOXED(9215825768290321836,64,FLEN)
NAN_BOXED(18439197805145097644,64,FLEN)
NAN_BOXED(9215825768290321836,64,FLEN)
NAN_BOXED(18439197805145097644,64,FLEN)
NAN_BOXED(9215896675325817111,64,FLEN)
NAN_BOXED(18439268712180592919,64,FLEN)
NAN_BOXED(9215896675325817111,64,FLEN)
NAN_BOXED(18439268712180592919,64,FLEN)
NAN_BOXED(9215896675325817111,64,FLEN)
NAN_BOXED(18439268712180592919,64,FLEN)
NAN_BOXED(9215896675325817111,64,FLEN)
NAN_BOXED(18439268712180592919,64,FLEN)
NAN_BOXED(9215896675325817111,64,FLEN)
NAN_BOXED(18439268712180592919,64,FLEN)
NAN_BOXED(9215919845555588079,64,FLEN)
NAN_BOXED(18439291882410363887,64,FLEN)
NAN_BOXED(9215919845555588079,64,FLEN)
NAN_BOXED(18439291882410363887,64,FLEN)
NAN_BOXED(9215919845555588079,64,FLEN)
NAN_BOXED(18439291882410363887,64,FLEN)
NAN_BOXED(9215919845555588079,64,FLEN)
NAN_BOXED(18439291882410363887,64,FLEN)
NAN_BOXED(9215919845555588079,64,FLEN)
NAN_BOXED(18439291882410363887,64,FLEN)
NAN_BOXED(9215979851551242165,64,FLEN)
NAN_BOXED(18439351888406017973,64,FLEN)
NAN_BOXED(9215979851551242165,64,FLEN)
NAN_BOXED(18439351888406017973,64,FLEN)
NAN_BOXED(9215979851551242165,64,FLEN)
NAN_BOXED(18439351888406017973,64,FLEN)
NAN_BOXED(9215979851551242165,64,FLEN)
NAN_BOXED(18439351888406017973,64,FLEN)
NAN_BOXED(9215979851551242165,64,FLEN)
NAN_BOXED(18439351888406017973,64,FLEN)
NAN_BOXED(9215991439900263894,64,FLEN)
NAN_BOXED(18439363476755039702,64,FLEN)
NAN_BOXED(9215991439900263894,64,FLEN)
NAN_BOXED(18439363476755039702,64,FLEN)
NAN_BOXED(9215991439900263894,64,FLEN)
NAN_BOXED(18439363476755039702,64,FLEN)
NAN_BOXED(9215991439900263894,64,FLEN)
NAN_BOXED(18439363476755039702,64,FLEN)
NAN_BOXED(9215991439900263894,64,FLEN)
NAN_BOXED(18439363476755039702,64,FLEN)
NAN_BOXED(9215995111572891332,64,FLEN)
NAN_BOXED(18439367148427667140,64,FLEN)
NAN_BOXED(9215995111572891332,64,FLEN)
NAN_BOXED(18439367148427667140,64,FLEN)
NAN_BOXED(9215995111572891332,64,FLEN)
NAN_BOXED(18439367148427667140,64,FLEN)
NAN_BOXED(9215995111572891332,64,FLEN)
NAN_BOXED(18439367148427667140,64,FLEN)
NAN_BOXED(9215995111572891332,64,FLEN)
NAN_BOXED(18439367148427667140,64,FLEN)
NAN_BOXED(9216162632157736477,64,FLEN)
NAN_BOXED(18439534669012512285,64,FLEN)
NAN_BOXED(9216162632157736477,64,FLEN)
NAN_BOXED(18439534669012512285,64,FLEN)
NAN_BOXED(9216162632157736477,64,FLEN)
NAN_BOXED(18439534669012512285,64,FLEN)
NAN_BOXED(9216162632157736477,64,FLEN)
NAN_BOXED(18439534669012512285,64,FLEN)
NAN_BOXED(9216162632157736477,64,FLEN)
NAN_BOXED(18439534669012512285,64,FLEN)
NAN_BOXED(9216182757238314871,64,FLEN)
NAN_BOXED(18439554794093090679,64,FLEN)
NAN_BOXED(9216182757238314871,64,FLEN)
NAN_BOXED(18439554794093090679,64,FLEN)
NAN_BOXED(9216182757238314871,64,FLEN)
NAN_BOXED(18439554794093090679,64,FLEN)
NAN_BOXED(9216182757238314871,64,FLEN)
NAN_BOXED(18439554794093090679,64,FLEN)
NAN_BOXED(9216182757238314871,64,FLEN)
NAN_BOXED(18439554794093090679,64,FLEN)
NAN_BOXED(9216184329227225123,64,FLEN)
NAN_BOXED(18439556366082000931,64,FLEN)
NAN_BOXED(9216184329227225123,64,FLEN)
NAN_BOXED(18439556366082000931,64,FLEN)
NAN_BOXED(9216184329227225123,64,FLEN)
NAN_BOXED(18439556366082000931,64,FLEN)
NAN_BOXED(9216184329227225123,64,FLEN)
NAN_BOXED(18439556366082000931,64,FLEN)
NAN_BOXED(9216184329227225123,64,FLEN)
NAN_BOXED(18439556366082000931,64,FLEN)
NAN_BOXED(9216213866086214120,64,FLEN)
NAN_BOXED(18439585902940989928,64,FLEN)
NAN_BOXED(9216213866086214120,64,FLEN)
NAN_BOXED(18439585902940989928,64,FLEN)
NAN_BOXED(9216213866086214120,64,FLEN)
NAN_BOXED(18439585902940989928,64,FLEN)
NAN_BOXED(9216213866086214120,64,FLEN)
NAN_BOXED(18439585902940989928,64,FLEN)
NAN_BOXED(9216213866086214120,64,FLEN)
NAN_BOXED(18439585902940989928,64,FLEN)
NAN_BOXED(9216225377377046112,64,FLEN)
NAN_BOXED(18439597414231821920,64,FLEN)
NAN_BOXED(9216225377377046112,64,FLEN)
NAN_BOXED(18439597414231821920,64,FLEN)
NAN_BOXED(9216225377377046112,64,FLEN)
NAN_BOXED(18439597414231821920,64,FLEN)
NAN_BOXED(9216225377377046112,64,FLEN)
NAN_BOXED(18439597414231821920,64,FLEN)
NAN_BOXED(9216225377377046112,64,FLEN)
NAN_BOXED(18439597414231821920,64,FLEN)
NAN_BOXED(9216306964051377829,64,FLEN)
NAN_BOXED(18439679000906153637,64,FLEN)
NAN_BOXED(9216306964051377829,64,FLEN)
NAN_BOXED(18439679000906153637,64,FLEN)
NAN_BOXED(9216306964051377829,64,FLEN)
NAN_BOXED(18439679000906153637,64,FLEN)
NAN_BOXED(9216306964051377829,64,FLEN)
NAN_BOXED(18439679000906153637,64,FLEN)
NAN_BOXED(9216306964051377829,64,FLEN)
NAN_BOXED(18439679000906153637,64,FLEN)
NAN_BOXED(9216321099914253336,64,FLEN)
NAN_BOXED(18439693136769029144,64,FLEN)
NAN_BOXED(9216321099914253336,64,FLEN)
NAN_BOXED(18439693136769029144,64,FLEN)
NAN_BOXED(9216321099914253336,64,FLEN)
NAN_BOXED(18439693136769029144,64,FLEN)
NAN_BOXED(9216321099914253336,64,FLEN)
NAN_BOXED(18439693136769029144,64,FLEN)
NAN_BOXED(9216321099914253336,64,FLEN)
NAN_BOXED(18439693136769029144,64,FLEN)
NAN_BOXED(9216322319461703214,64,FLEN)
NAN_BOXED(18439694356316479022,64,FLEN)
NAN_BOXED(9216322319461703214,64,FLEN)
NAN_BOXED(18439694356316479022,64,FLEN)
NAN_BOXED(9216322319461703214,64,FLEN)
NAN_BOXED(18439694356316479022,64,FLEN)
NAN_BOXED(9216322319461703214,64,FLEN)
NAN_BOXED(18439694356316479022,64,FLEN)
NAN_BOXED(9216322319461703214,64,FLEN)
NAN_BOXED(18439694356316479022,64,FLEN)
NAN_BOXED(9216329592851354494,64,FLEN)
NAN_BOXED(18439701629706130302,64,FLEN)
NAN_BOXED(9216329592851354494,64,FLEN)
NAN_BOXED(18439701629706130302,64,FLEN)
NAN_BOXED(9216329592851354494,64,FLEN)
NAN_BOXED(18439701629706130302,64,FLEN)
NAN_BOXED(9216329592851354494,64,FLEN)
NAN_BOXED(18439701629706130302,64,FLEN)
NAN_BOXED(9216329592851354494,64,FLEN)
NAN_BOXED(18439701629706130302,64,FLEN)
NAN_BOXED(9216332905437983963,64,FLEN)
NAN_BOXED(18439704942292759771,64,FLEN)
NAN_BOXED(9216332905437983963,64,FLEN)
NAN_BOXED(18439704942292759771,64,FLEN)
NAN_BOXED(9216332905437983963,64,FLEN)
NAN_BOXED(18439704942292759771,64,FLEN)
NAN_BOXED(9216332905437983963,64,FLEN)
NAN_BOXED(18439704942292759771,64,FLEN)
NAN_BOXED(9216332905437983963,64,FLEN)
NAN_BOXED(18439704942292759771,64,FLEN)
NAN_BOXED(9216343761487675614,64,FLEN)
NAN_BOXED(18439715798342451422,64,FLEN)
NAN_BOXED(9216343761487675614,64,FLEN)
NAN_BOXED(18439715798342451422,64,FLEN)
NAN_BOXED(9216343761487675614,64,FLEN)
NAN_BOXED(18439715798342451422,64,FLEN)
NAN_BOXED(9216343761487675614,64,FLEN)
NAN_BOXED(18439715798342451422,64,FLEN)
NAN_BOXED(9216343761487675614,64,FLEN)
NAN_BOXED(18439715798342451422,64,FLEN)
NAN_BOXED(9216396450622449533,64,FLEN)
NAN_BOXED(18439768487477225341,64,FLEN)
NAN_BOXED(9216396450622449533,64,FLEN)
NAN_BOXED(18439768487477225341,64,FLEN)
NAN_BOXED(9216396450622449533,64,FLEN)
NAN_BOXED(18439768487477225341,64,FLEN)
NAN_BOXED(9216396450622449533,64,FLEN)
NAN_BOXED(18439768487477225341,64,FLEN)
NAN_BOXED(9216396450622449533,64,FLEN)
NAN_BOXED(18439768487477225341,64,FLEN)
NAN_BOXED(9216450889691267159,64,FLEN)
NAN_BOXED(18439822926546042967,64,FLEN)
NAN_BOXED(9216450889691267159,64,FLEN)
NAN_BOXED(18439822926546042967,64,FLEN)
NAN_BOXED(9216450889691267159,64,FLEN)
NAN_BOXED(18439822926546042967,64,FLEN)
NAN_BOXED(9216450889691267159,64,FLEN)
NAN_BOXED(18439822926546042967,64,FLEN)
NAN_BOXED(9216450889691267159,64,FLEN)
NAN_BOXED(18439822926546042967,64,FLEN)
NAN_BOXED(9216540746152212663,64,FLEN)
NAN_BOXED(18439912783006988471,64,FLEN)
NAN_BOXED(9216540746152212663,64,FLEN)
NAN_BOXED(18439912783006988471,64,FLEN)
NAN_BOXED(9216540746152212663,64,FLEN)
NAN_BOXED(18439912783006988471,64,FLEN)
NAN_BOXED(9216540746152212663,64,FLEN)
NAN_BOXED(18439912783006988471,64,FLEN)
NAN_BOXED(9216540746152212663,64,FLEN)
NAN_BOXED(18439912783006988471,64,FLEN)
NAN_BOXED(9216608844595611026,64,FLEN)
NAN_BOXED(18439980881450386834,64,FLEN)
NAN_BOXED(9216608844595611026,64,FLEN)
NAN_BOXED(18439980881450386834,64,FLEN)
NAN_BOXED(9216608844595611026,64,FLEN)
NAN_BOXED(18439980881450386834,64,FLEN)
NAN_BOXED(9216608844595611026,64,FLEN)
NAN_BOXED(18439980881450386834,64,FLEN)
NAN_BOXED(9216608844595611026,64,FLEN)
NAN_BOXED(18439980881450386834,64,FLEN)
NAN_BOXED(9216615462620781878,64,FLEN)
NAN_BOXED(18439987499475557686,64,FLEN)
NAN_BOXED(9216615462620781878,64,FLEN)
NAN_BOXED(18439987499475557686,64,FLEN)
NAN_BOXED(9216615462620781878,64,FLEN)
NAN_BOXED(18439987499475557686,64,FLEN)
NAN_BOXED(9216615462620781878,64,FLEN)
NAN_BOXED(18439987499475557686,64,FLEN)
NAN_BOXED(9216615462620781878,64,FLEN)
NAN_BOXED(18439987499475557686,64,FLEN)
NAN_BOXED(9216666039805284896,64,FLEN)
NAN_BOXED(18440038076660060704,64,FLEN)
NAN_BOXED(9216666039805284896,64,FLEN)
NAN_BOXED(18440038076660060704,64,FLEN)
NAN_BOXED(9216666039805284896,64,FLEN)
NAN_BOXED(18440038076660060704,64,FLEN)
NAN_BOXED(9216666039805284896,64,FLEN)
NAN_BOXED(18440038076660060704,64,FLEN)
NAN_BOXED(9216666039805284896,64,FLEN)
NAN_BOXED(18440038076660060704,64,FLEN)
NAN_BOXED(9216685127453989261,64,FLEN)
NAN_BOXED(18440057164308765069,64,FLEN)
NAN_BOXED(9216685127453989261,64,FLEN)
NAN_BOXED(18440057164308765069,64,FLEN)
NAN_BOXED(9216685127453989261,64,FLEN)
NAN_BOXED(18440057164308765069,64,FLEN)
NAN_BOXED(9216685127453989261,64,FLEN)
NAN_BOXED(18440057164308765069,64,FLEN)
NAN_BOXED(9216685127453989261,64,FLEN)
NAN_BOXED(18440057164308765069,64,FLEN)
NAN_BOXED(9216921068039685364,64,FLEN)
NAN_BOXED(18440293104894461172,64,FLEN)
NAN_BOXED(9216921068039685364,64,FLEN)
NAN_BOXED(18440293104894461172,64,FLEN)
NAN_BOXED(9216921068039685364,64,FLEN)
NAN_BOXED(18440293104894461172,64,FLEN)
NAN_BOXED(9216921068039685364,64,FLEN)
NAN_BOXED(18440293104894461172,64,FLEN)
NAN_BOXED(9216921068039685364,64,FLEN)
NAN_BOXED(18440293104894461172,64,FLEN)
NAN_BOXED(9216986294778040641,64,FLEN)
NAN_BOXED(18440358331632816449,64,FLEN)
NAN_BOXED(9216986294778040641,64,FLEN)
NAN_BOXED(18440358331632816449,64,FLEN)
NAN_BOXED(9216986294778040641,64,FLEN)
NAN_BOXED(18440358331632816449,64,FLEN)
NAN_BOXED(9216986294778040641,64,FLEN)
NAN_BOXED(18440358331632816449,64,FLEN)
NAN_BOXED(9216986294778040641,64,FLEN)
NAN_BOXED(18440358331632816449,64,FLEN)
NAN_BOXED(9216998016021860062,64,FLEN)
NAN_BOXED(18440370052876635870,64,FLEN)
NAN_BOXED(9216998016021860062,64,FLEN)
NAN_BOXED(18440370052876635870,64,FLEN)
NAN_BOXED(9216998016021860062,64,FLEN)
NAN_BOXED(18440370052876635870,64,FLEN)
NAN_BOXED(9216998016021860062,64,FLEN)
NAN_BOXED(18440370052876635870,64,FLEN)
NAN_BOXED(9216998016021860062,64,FLEN)
NAN_BOXED(18440370052876635870,64,FLEN)
NAN_BOXED(9217006875079209409,64,FLEN)
NAN_BOXED(18440378911933985217,64,FLEN)
NAN_BOXED(9217006875079209409,64,FLEN)
NAN_BOXED(18440378911933985217,64,FLEN)
NAN_BOXED(9217006875079209409,64,FLEN)
NAN_BOXED(18440378911933985217,64,FLEN)
NAN_BOXED(9217006875079209409,64,FLEN)
NAN_BOXED(18440378911933985217,64,FLEN)
NAN_BOXED(9217006875079209409,64,FLEN)
NAN_BOXED(18440378911933985217,64,FLEN)
NAN_BOXED(9217018205123285701,64,FLEN)
NAN_BOXED(18440390241978061509,64,FLEN)
NAN_BOXED(9217018205123285701,64,FLEN)
NAN_BOXED(18440390241978061509,64,FLEN)
NAN_BOXED(9217018205123285701,64,FLEN)
NAN_BOXED(18440390241978061509,64,FLEN)
NAN_BOXED(9217018205123285701,64,FLEN)
NAN_BOXED(18440390241978061509,64,FLEN)
NAN_BOXED(9217018205123285701,64,FLEN)
NAN_BOXED(18440390241978061509,64,FLEN)
NAN_BOXED(9217049518646032684,64,FLEN)
NAN_BOXED(18440421555500808492,64,FLEN)
NAN_BOXED(9217049518646032684,64,FLEN)
NAN_BOXED(18440421555500808492,64,FLEN)
NAN_BOXED(9217049518646032684,64,FLEN)
NAN_BOXED(18440421555500808492,64,FLEN)
NAN_BOXED(9217049518646032684,64,FLEN)
NAN_BOXED(18440421555500808492,64,FLEN)
NAN_BOXED(9217049518646032684,64,FLEN)
NAN_BOXED(18440421555500808492,64,FLEN)
NAN_BOXED(9217073722064538888,64,FLEN)
NAN_BOXED(18440445758919314696,64,FLEN)
NAN_BOXED(9217073722064538888,64,FLEN)
NAN_BOXED(18440445758919314696,64,FLEN)
NAN_BOXED(9217073722064538888,64,FLEN)
NAN_BOXED(18440445758919314696,64,FLEN)
NAN_BOXED(9217073722064538888,64,FLEN)
NAN_BOXED(18440445758919314696,64,FLEN)
NAN_BOXED(9217073722064538888,64,FLEN)
NAN_BOXED(18440445758919314696,64,FLEN)
NAN_BOXED(9217095635489785230,64,FLEN)
NAN_BOXED(18440467672344561038,64,FLEN)
NAN_BOXED(9217095635489785230,64,FLEN)
NAN_BOXED(18440467672344561038,64,FLEN)
NAN_BOXED(9217095635489785230,64,FLEN)
NAN_BOXED(18440467672344561038,64,FLEN)
NAN_BOXED(9217095635489785230,64,FLEN)
NAN_BOXED(18440467672344561038,64,FLEN)
NAN_BOXED(9217095635489785230,64,FLEN)
NAN_BOXED(18440467672344561038,64,FLEN)
NAN_BOXED(9217113024065859112,64,FLEN)
NAN_BOXED(18440485060920634920,64,FLEN)
NAN_BOXED(9217113024065859112,64,FLEN)
NAN_BOXED(18440485060920634920,64,FLEN)
NAN_BOXED(9217113024065859112,64,FLEN)
NAN_BOXED(18440485060920634920,64,FLEN)
NAN_BOXED(9217113024065859112,64,FLEN)
NAN_BOXED(18440485060920634920,64,FLEN)
NAN_BOXED(9217113024065859112,64,FLEN)
NAN_BOXED(18440485060920634920,64,FLEN)
NAN_BOXED(9217159026056911107,64,FLEN)
NAN_BOXED(18440531062911686915,64,FLEN)
NAN_BOXED(9217159026056911107,64,FLEN)
NAN_BOXED(18440531062911686915,64,FLEN)
NAN_BOXED(9217159026056911107,64,FLEN)
NAN_BOXED(18440531062911686915,64,FLEN)
NAN_BOXED(9217159026056911107,64,FLEN)
NAN_BOXED(18440531062911686915,64,FLEN)
NAN_BOXED(9217159026056911107,64,FLEN)
NAN_BOXED(18440531062911686915,64,FLEN)
NAN_BOXED(9217171739471062876,64,FLEN)
NAN_BOXED(18440543776325838684,64,FLEN)
NAN_BOXED(9217171739471062876,64,FLEN)
NAN_BOXED(18440543776325838684,64,FLEN)
NAN_BOXED(9217171739471062876,64,FLEN)
NAN_BOXED(18440543776325838684,64,FLEN)
NAN_BOXED(9217171739471062876,64,FLEN)
NAN_BOXED(18440543776325838684,64,FLEN)
NAN_BOXED(9217171739471062876,64,FLEN)
NAN_BOXED(18440543776325838684,64,FLEN)
NAN_BOXED(9217197303296713274,64,FLEN)
NAN_BOXED(18440569340151489082,64,FLEN)
NAN_BOXED(9217197303296713274,64,FLEN)
NAN_BOXED(18440569340151489082,64,FLEN)
NAN_BOXED(9217197303296713274,64,FLEN)
NAN_BOXED(18440569340151489082,64,FLEN)
NAN_BOXED(9217197303296713274,64,FLEN)
NAN_BOXED(18440569340151489082,64,FLEN)
NAN_BOXED(9217197303296713274,64,FLEN)
NAN_BOXED(18440569340151489082,64,FLEN)
NAN_BOXED(9217210329807695712,64,FLEN)
NAN_BOXED(18440582366662471520,64,FLEN)
NAN_BOXED(9217210329807695712,64,FLEN)
NAN_BOXED(18440582366662471520,64,FLEN)
NAN_BOXED(9217210329807695712,64,FLEN)
NAN_BOXED(18440582366662471520,64,FLEN)
NAN_BOXED(9217210329807695712,64,FLEN)
NAN_BOXED(18440582366662471520,64,FLEN)
NAN_BOXED(9217210329807695712,64,FLEN)
NAN_BOXED(18440582366662471520,64,FLEN)
NAN_BOXED(9217271743720454892,64,FLEN)
NAN_BOXED(18440643780575230700,64,FLEN)
NAN_BOXED(9217271743720454892,64,FLEN)
NAN_BOXED(18440643780575230700,64,FLEN)
NAN_BOXED(9217271743720454892,64,FLEN)
NAN_BOXED(18440643780575230700,64,FLEN)
NAN_BOXED(9217271743720454892,64,FLEN)
NAN_BOXED(18440643780575230700,64,FLEN)
NAN_BOXED(9217271743720454892,64,FLEN)
NAN_BOXED(18440643780575230700,64,FLEN)
NAN_BOXED(9217290781036110734,64,FLEN)
NAN_BOXED(18440662817890886542,64,FLEN)
NAN_BOXED(9217290781036110734,64,FLEN)
NAN_BOXED(18440662817890886542,64,FLEN)
NAN_BOXED(9217290781036110734,64,FLEN)
NAN_BOXED(18440662817890886542,64,FLEN)
NAN_BOXED(9217290781036110734,64,FLEN)
NAN_BOXED(18440662817890886542,64,FLEN)
NAN_BOXED(9217290781036110734,64,FLEN)
NAN_BOXED(18440662817890886542,64,FLEN)
NAN_BOXED(9217298451927393216,64,FLEN)
NAN_BOXED(18440670488782169024,64,FLEN)
NAN_BOXED(9217298451927393216,64,FLEN)
NAN_BOXED(18440670488782169024,64,FLEN)
NAN_BOXED(9217298451927393216,64,FLEN)
NAN_BOXED(18440670488782169024,64,FLEN)
NAN_BOXED(9217298451927393216,64,FLEN)
NAN_BOXED(18440670488782169024,64,FLEN)
NAN_BOXED(9217298451927393216,64,FLEN)
NAN_BOXED(18440670488782169024,64,FLEN)
NAN_BOXED(9217336679106742925,64,FLEN)
NAN_BOXED(18440708715961518733,64,FLEN)
NAN_BOXED(9217336679106742925,64,FLEN)
NAN_BOXED(18440708715961518733,64,FLEN)
NAN_BOXED(9217336679106742925,64,FLEN)
NAN_BOXED(18440708715961518733,64,FLEN)
NAN_BOXED(9217336679106742925,64,FLEN)
NAN_BOXED(18440708715961518733,64,FLEN)
NAN_BOXED(9217336679106742925,64,FLEN)
NAN_BOXED(18440708715961518733,64,FLEN)
NAN_BOXED(9217406219078166051,64,FLEN)
NAN_BOXED(18440778255932941859,64,FLEN)
NAN_BOXED(9217406219078166051,64,FLEN)
NAN_BOXED(18440778255932941859,64,FLEN)
NAN_BOXED(9217406219078166051,64,FLEN)
NAN_BOXED(18440778255932941859,64,FLEN)
NAN_BOXED(9217406219078166051,64,FLEN)
NAN_BOXED(18440778255932941859,64,FLEN)
NAN_BOXED(9217406219078166051,64,FLEN)
NAN_BOXED(18440778255932941859,64,FLEN)
NAN_BOXED(9217434926447658488,64,FLEN)
NAN_BOXED(18440806963302434296,64,FLEN)
NAN_BOXED(9217434926447658488,64,FLEN)
NAN_BOXED(18440806963302434296,64,FLEN)
NAN_BOXED(9217434926447658488,64,FLEN)
NAN_BOXED(18440806963302434296,64,FLEN)
NAN_BOXED(9217434926447658488,64,FLEN)
NAN_BOXED(18440806963302434296,64,FLEN)
NAN_BOXED(9217434926447658488,64,FLEN)
NAN_BOXED(18440806963302434296,64,FLEN)
NAN_BOXED(9217448302088559081,64,FLEN)
NAN_BOXED(18440820338943334889,64,FLEN)
NAN_BOXED(9217448302088559081,64,FLEN)
NAN_BOXED(18440820338943334889,64,FLEN)
NAN_BOXED(9217448302088559081,64,FLEN)
NAN_BOXED(18440820338943334889,64,FLEN)
NAN_BOXED(9217448302088559081,64,FLEN)
NAN_BOXED(18440820338943334889,64,FLEN)
NAN_BOXED(9217448302088559081,64,FLEN)
NAN_BOXED(18440820338943334889,64,FLEN)
NAN_BOXED(9217467113844407741,64,FLEN)
NAN_BOXED(18440839150699183549,64,FLEN)
NAN_BOXED(9217467113844407741,64,FLEN)
NAN_BOXED(18440839150699183549,64,FLEN)
NAN_BOXED(9217467113844407741,64,FLEN)
NAN_BOXED(18440839150699183549,64,FLEN)
NAN_BOXED(9217467113844407741,64,FLEN)
NAN_BOXED(18440839150699183549,64,FLEN)
NAN_BOXED(9217467113844407741,64,FLEN)
NAN_BOXED(18440839150699183549,64,FLEN)
NAN_BOXED(9217476145742993224,64,FLEN)
NAN_BOXED(18440848182597769032,64,FLEN)
NAN_BOXED(9217476145742993224,64,FLEN)
NAN_BOXED(18440848182597769032,64,FLEN)
NAN_BOXED(9217476145742993224,64,FLEN)
NAN_BOXED(18440848182597769032,64,FLEN)
NAN_BOXED(9217476145742993224,64,FLEN)
NAN_BOXED(18440848182597769032,64,FLEN)
NAN_BOXED(9217476145742993224,64,FLEN)
NAN_BOXED(18440848182597769032,64,FLEN)
NAN_BOXED(9217675909045494111,64,FLEN)
NAN_BOXED(18441047945900269919,64,FLEN)
NAN_BOXED(9217675909045494111,64,FLEN)
NAN_BOXED(18441047945900269919,64,FLEN)
NAN_BOXED(9217675909045494111,64,FLEN)
NAN_BOXED(18441047945900269919,64,FLEN)
NAN_BOXED(9217675909045494111,64,FLEN)
NAN_BOXED(18441047945900269919,64,FLEN)
NAN_BOXED(9217675909045494111,64,FLEN)
NAN_BOXED(18441047945900269919,64,FLEN)
NAN_BOXED(9217687551197412497,64,FLEN)
NAN_BOXED(18441059588052188305,64,FLEN)
NAN_BOXED(9217687551197412497,64,FLEN)
NAN_BOXED(18441059588052188305,64,FLEN)
NAN_BOXED(9217687551197412497,64,FLEN)
NAN_BOXED(18441059588052188305,64,FLEN)
NAN_BOXED(9217687551197412497,64,FLEN)
NAN_BOXED(18441059588052188305,64,FLEN)
NAN_BOXED(9217687551197412497,64,FLEN)
NAN_BOXED(18441059588052188305,64,FLEN)
NAN_BOXED(9217714289263912333,64,FLEN)
NAN_BOXED(18441086326118688141,64,FLEN)
NAN_BOXED(9217714289263912333,64,FLEN)
NAN_BOXED(18441086326118688141,64,FLEN)
NAN_BOXED(9217714289263912333,64,FLEN)
NAN_BOXED(18441086326118688141,64,FLEN)
NAN_BOXED(9217714289263912333,64,FLEN)
NAN_BOXED(18441086326118688141,64,FLEN)
NAN_BOXED(9217714289263912333,64,FLEN)
NAN_BOXED(18441086326118688141,64,FLEN)
NAN_BOXED(9217742684421459614,64,FLEN)
NAN_BOXED(18441114721276235422,64,FLEN)
NAN_BOXED(9217742684421459614,64,FLEN)
NAN_BOXED(18441114721276235422,64,FLEN)
NAN_BOXED(9217742684421459614,64,FLEN)
NAN_BOXED(18441114721276235422,64,FLEN)
NAN_BOXED(9217742684421459614,64,FLEN)
NAN_BOXED(18441114721276235422,64,FLEN)
NAN_BOXED(9217742684421459614,64,FLEN)
NAN_BOXED(18441114721276235422,64,FLEN)
NAN_BOXED(9217746350894084639,64,FLEN)
NAN_BOXED(18441118387748860447,64,FLEN)
NAN_BOXED(9217746350894084639,64,FLEN)
NAN_BOXED(18441118387748860447,64,FLEN)
NAN_BOXED(9217746350894084639,64,FLEN)
NAN_BOXED(18441118387748860447,64,FLEN)
NAN_BOXED(9217746350894084639,64,FLEN)
NAN_BOXED(18441118387748860447,64,FLEN)
NAN_BOXED(9217746350894084639,64,FLEN)
NAN_BOXED(18441118387748860447,64,FLEN)
NAN_BOXED(9217766465692089589,64,FLEN)
NAN_BOXED(18441138502546865397,64,FLEN)
NAN_BOXED(9217766465692089589,64,FLEN)
NAN_BOXED(18441138502546865397,64,FLEN)
NAN_BOXED(9217766465692089589,64,FLEN)
NAN_BOXED(18441138502546865397,64,FLEN)
NAN_BOXED(9217766465692089589,64,FLEN)
NAN_BOXED(18441138502546865397,64,FLEN)
NAN_BOXED(9217766465692089589,64,FLEN)
NAN_BOXED(18441138502546865397,64,FLEN)
NAN_BOXED(9217917274988439143,64,FLEN)
NAN_BOXED(18441289311843214951,64,FLEN)
NAN_BOXED(9217917274988439143,64,FLEN)
NAN_BOXED(18441289311843214951,64,FLEN)
NAN_BOXED(9217917274988439143,64,FLEN)
NAN_BOXED(18441289311843214951,64,FLEN)
NAN_BOXED(9217917274988439143,64,FLEN)
NAN_BOXED(18441289311843214951,64,FLEN)
NAN_BOXED(9217917274988439143,64,FLEN)
NAN_BOXED(18441289311843214951,64,FLEN)
NAN_BOXED(9217923032293034015,64,FLEN)
NAN_BOXED(18441295069147809823,64,FLEN)
NAN_BOXED(9217923032293034015,64,FLEN)
NAN_BOXED(18441295069147809823,64,FLEN)
NAN_BOXED(9217923032293034015,64,FLEN)
NAN_BOXED(18441295069147809823,64,FLEN)
NAN_BOXED(9217923032293034015,64,FLEN)
NAN_BOXED(18441295069147809823,64,FLEN)
NAN_BOXED(9217923032293034015,64,FLEN)
NAN_BOXED(18441295069147809823,64,FLEN)
NAN_BOXED(9217951262241987397,64,FLEN)
NAN_BOXED(18441323299096763205,64,FLEN)
NAN_BOXED(9217951262241987397,64,FLEN)
NAN_BOXED(18441323299096763205,64,FLEN)
NAN_BOXED(9217951262241987397,64,FLEN)
NAN_BOXED(18441323299096763205,64,FLEN)
NAN_BOXED(9217951262241987397,64,FLEN)
NAN_BOXED(18441323299096763205,64,FLEN)
NAN_BOXED(9217951262241987397,64,FLEN)
NAN_BOXED(18441323299096763205,64,FLEN)
NAN_BOXED(9217957253530182299,64,FLEN)
NAN_BOXED(18441329290384958107,64,FLEN)
NAN_BOXED(9217957253530182299,64,FLEN)
NAN_BOXED(18441329290384958107,64,FLEN)
NAN_BOXED(9217957253530182299,64,FLEN)
NAN_BOXED(18441329290384958107,64,FLEN)
NAN_BOXED(9217957253530182299,64,FLEN)
NAN_BOXED(18441329290384958107,64,FLEN)
NAN_BOXED(9217957253530182299,64,FLEN)
NAN_BOXED(18441329290384958107,64,FLEN)
NAN_BOXED(9217958782502823372,64,FLEN)
NAN_BOXED(18441330819357599180,64,FLEN)
NAN_BOXED(9217958782502823372,64,FLEN)
NAN_BOXED(18441330819357599180,64,FLEN)
NAN_BOXED(9217958782502823372,64,FLEN)
NAN_BOXED(18441330819357599180,64,FLEN)
NAN_BOXED(9217958782502823372,64,FLEN)
NAN_BOXED(18441330819357599180,64,FLEN)
NAN_BOXED(9217958782502823372,64,FLEN)
NAN_BOXED(18441330819357599180,64,FLEN)
NAN_BOXED(9217977539444508133,64,FLEN)
NAN_BOXED(18441349576299283941,64,FLEN)
NAN_BOXED(9217977539444508133,64,FLEN)
NAN_BOXED(18441349576299283941,64,FLEN)
NAN_BOXED(9217977539444508133,64,FLEN)
NAN_BOXED(18441349576299283941,64,FLEN)
NAN_BOXED(9217977539444508133,64,FLEN)
NAN_BOXED(18441349576299283941,64,FLEN)
NAN_BOXED(9217977539444508133,64,FLEN)
NAN_BOXED(18441349576299283941,64,FLEN)
NAN_BOXED(9217992128168569883,64,FLEN)
NAN_BOXED(18441364165023345691,64,FLEN)
NAN_BOXED(9217992128168569883,64,FLEN)
NAN_BOXED(18441364165023345691,64,FLEN)
NAN_BOXED(9217992128168569883,64,FLEN)
NAN_BOXED(18441364165023345691,64,FLEN)
NAN_BOXED(9217992128168569883,64,FLEN)
NAN_BOXED(18441364165023345691,64,FLEN)
NAN_BOXED(9217992128168569883,64,FLEN)
NAN_BOXED(18441364165023345691,64,FLEN)
NAN_BOXED(9218019785429007013,64,FLEN)
NAN_BOXED(18441391822283782821,64,FLEN)
NAN_BOXED(9218019785429007013,64,FLEN)
NAN_BOXED(18441391822283782821,64,FLEN)
NAN_BOXED(9218019785429007013,64,FLEN)
NAN_BOXED(18441391822283782821,64,FLEN)
NAN_BOXED(9218019785429007013,64,FLEN)
NAN_BOXED(18441391822283782821,64,FLEN)
NAN_BOXED(9218019785429007013,64,FLEN)
NAN_BOXED(18441391822283782821,64,FLEN)
NAN_BOXED(9218040791675416434,64,FLEN)
NAN_BOXED(18441412828530192242,64,FLEN)
NAN_BOXED(9218040791675416434,64,FLEN)
NAN_BOXED(18441412828530192242,64,FLEN)
NAN_BOXED(9218040791675416434,64,FLEN)
NAN_BOXED(18441412828530192242,64,FLEN)
NAN_BOXED(9218040791675416434,64,FLEN)
NAN_BOXED(18441412828530192242,64,FLEN)
NAN_BOXED(9218040791675416434,64,FLEN)
NAN_BOXED(18441412828530192242,64,FLEN)
NAN_BOXED(9218045697619441773,64,FLEN)
NAN_BOXED(18441417734474217581,64,FLEN)
NAN_BOXED(9218045697619441773,64,FLEN)
NAN_BOXED(18441417734474217581,64,FLEN)
NAN_BOXED(9218045697619441773,64,FLEN)
NAN_BOXED(18441417734474217581,64,FLEN)
NAN_BOXED(9218045697619441773,64,FLEN)
NAN_BOXED(18441417734474217581,64,FLEN)
NAN_BOXED(9218045697619441773,64,FLEN)
NAN_BOXED(18441417734474217581,64,FLEN)
NAN_BOXED(9218055503771424859,64,FLEN)
NAN_BOXED(18441427540626200667,64,FLEN)
NAN_BOXED(9218055503771424859,64,FLEN)
NAN_BOXED(18441427540626200667,64,FLEN)
NAN_BOXED(9218055503771424859,64,FLEN)
NAN_BOXED(18441427540626200667,64,FLEN)
NAN_BOXED(9218055503771424859,64,FLEN)
NAN_BOXED(18441427540626200667,64,FLEN)
NAN_BOXED(9218055503771424859,64,FLEN)
NAN_BOXED(18441427540626200667,64,FLEN)
NAN_BOXED(9218056448819712772,64,FLEN)
NAN_BOXED(18441428485674488580,64,FLEN)
NAN_BOXED(9218056448819712772,64,FLEN)
NAN_BOXED(18441428485674488580,64,FLEN)
NAN_BOXED(9218056448819712772,64,FLEN)
NAN_BOXED(18441428485674488580,64,FLEN)
NAN_BOXED(9218056448819712772,64,FLEN)
NAN_BOXED(18441428485674488580,64,FLEN)
NAN_BOXED(9218056448819712772,64,FLEN)
NAN_BOXED(18441428485674488580,64,FLEN)
NAN_BOXED(9218057933542063877,64,FLEN)
NAN_BOXED(18441429970396839685,64,FLEN)
NAN_BOXED(9218057933542063877,64,FLEN)
NAN_BOXED(18441429970396839685,64,FLEN)
NAN_BOXED(9218057933542063877,64,FLEN)
NAN_BOXED(18441429970396839685,64,FLEN)
NAN_BOXED(9218057933542063877,64,FLEN)
NAN_BOXED(18441429970396839685,64,FLEN)
NAN_BOXED(9218057933542063877,64,FLEN)
NAN_BOXED(18441429970396839685,64,FLEN)
NAN_BOXED(9218084910450959004,64,FLEN)
NAN_BOXED(18441456947305734812,64,FLEN)
NAN_BOXED(9218084910450959004,64,FLEN)
NAN_BOXED(18441456947305734812,64,FLEN)
NAN_BOXED(9218084910450959004,64,FLEN)
NAN_BOXED(18441456947305734812,64,FLEN)
NAN_BOXED(9218084910450959004,64,FLEN)
NAN_BOXED(18441456947305734812,64,FLEN)
NAN_BOXED(9218084910450959004,64,FLEN)
NAN_BOXED(18441456947305734812,64,FLEN)
NAN_BOXED(9218121260080109232,64,FLEN)
NAN_BOXED(18441493296934885040,64,FLEN)
NAN_BOXED(9218121260080109232,64,FLEN)
NAN_BOXED(18441493296934885040,64,FLEN)
NAN_BOXED(9218121260080109232,64,FLEN)
NAN_BOXED(18441493296934885040,64,FLEN)
NAN_BOXED(9218121260080109232,64,FLEN)
NAN_BOXED(18441493296934885040,64,FLEN)
NAN_BOXED(9218121260080109232,64,FLEN)
NAN_BOXED(18441493296934885040,64,FLEN)
NAN_BOXED(9218134188916961638,64,FLEN)
NAN_BOXED(18441506225771737446,64,FLEN)
NAN_BOXED(9218134188916961638,64,FLEN)
NAN_BOXED(18441506225771737446,64,FLEN)
NAN_BOXED(9218134188916961638,64,FLEN)
NAN_BOXED(18441506225771737446,64,FLEN)
NAN_BOXED(9218134188916961638,64,FLEN)
NAN_BOXED(18441506225771737446,64,FLEN)
NAN_BOXED(9218134188916961638,64,FLEN)
NAN_BOXED(18441506225771737446,64,FLEN)
NAN_BOXED(9218178314771337638,64,FLEN)
NAN_BOXED(18441550351626113446,64,FLEN)
NAN_BOXED(9218178314771337638,64,FLEN)
NAN_BOXED(18441550351626113446,64,FLEN)
NAN_BOXED(9218178314771337638,64,FLEN)
NAN_BOXED(18441550351626113446,64,FLEN)
NAN_BOXED(9218178314771337638,64,FLEN)
NAN_BOXED(18441550351626113446,64,FLEN)
NAN_BOXED(9218178314771337638,64,FLEN)
NAN_BOXED(18441550351626113446,64,FLEN)
NAN_BOXED(9218354549680296480,64,FLEN)
NAN_BOXED(18441726586535072288,64,FLEN)
NAN_BOXED(9218354549680296480,64,FLEN)
NAN_BOXED(18441726586535072288,64,FLEN)
NAN_BOXED(9218354549680296480,64,FLEN)
NAN_BOXED(18441726586535072288,64,FLEN)
NAN_BOXED(9218354549680296480,64,FLEN)
NAN_BOXED(18441726586535072288,64,FLEN)
NAN_BOXED(9218354549680296480,64,FLEN)
NAN_BOXED(18441726586535072288,64,FLEN)
NAN_BOXED(9218386575073194752,64,FLEN)
NAN_BOXED(18441758611927970560,64,FLEN)
NAN_BOXED(9218386575073194752,64,FLEN)
NAN_BOXED(18441758611927970560,64,FLEN)
NAN_BOXED(9218386575073194752,64,FLEN)
NAN_BOXED(18441758611927970560,64,FLEN)
NAN_BOXED(9218386575073194752,64,FLEN)
NAN_BOXED(18441758611927970560,64,FLEN)
NAN_BOXED(9218386575073194752,64,FLEN)
NAN_BOXED(18441758611927970560,64,FLEN)
NAN_BOXED(9218399714749223508,64,FLEN)
NAN_BOXED(18441771751603999316,64,FLEN)
NAN_BOXED(9218399714749223508,64,FLEN)
NAN_BOXED(18441771751603999316,64,FLEN)
NAN_BOXED(9218399714749223508,64,FLEN)
NAN_BOXED(18441771751603999316,64,FLEN)
NAN_BOXED(9218399714749223508,64,FLEN)
NAN_BOXED(18441771751603999316,64,FLEN)
NAN_BOXED(9218399714749223508,64,FLEN)
NAN_BOXED(18441771751603999316,64,FLEN)
NAN_BOXED(9218415959431019848,64,FLEN)
NAN_BOXED(18441787996285795656,64,FLEN)
NAN_BOXED(9218415959431019848,64,FLEN)
NAN_BOXED(18441787996285795656,64,FLEN)
NAN_BOXED(9218415959431019848,64,FLEN)
NAN_BOXED(18441787996285795656,64,FLEN)
NAN_BOXED(9218415959431019848,64,FLEN)
NAN_BOXED(18441787996285795656,64,FLEN)
NAN_BOXED(9218415959431019848,64,FLEN)
NAN_BOXED(18441787996285795656,64,FLEN)
NAN_BOXED(9218517438203821326,64,FLEN)
NAN_BOXED(18441889475058597134,64,FLEN)
NAN_BOXED(9218517438203821326,64,FLEN)
NAN_BOXED(18441889475058597134,64,FLEN)
NAN_BOXED(9218517438203821326,64,FLEN)
NAN_BOXED(18441889475058597134,64,FLEN)
NAN_BOXED(9218517438203821326,64,FLEN)
NAN_BOXED(18441889475058597134,64,FLEN)
NAN_BOXED(9218517438203821326,64,FLEN)
NAN_BOXED(18441889475058597134,64,FLEN)
NAN_BOXED(9218542723805650180,64,FLEN)
NAN_BOXED(18441914760660425988,64,FLEN)
NAN_BOXED(9218542723805650180,64,FLEN)
NAN_BOXED(18441914760660425988,64,FLEN)
NAN_BOXED(9218542723805650180,64,FLEN)
NAN_BOXED(18441914760660425988,64,FLEN)
NAN_BOXED(9218542723805650180,64,FLEN)
NAN_BOXED(18441914760660425988,64,FLEN)
NAN_BOXED(9218542723805650180,64,FLEN)
NAN_BOXED(18441914760660425988,64,FLEN)
NAN_BOXED(9218585595603598283,64,FLEN)
NAN_BOXED(18441957632458374091,64,FLEN)
NAN_BOXED(9218585595603598283,64,FLEN)
NAN_BOXED(18441957632458374091,64,FLEN)
NAN_BOXED(9218585595603598283,64,FLEN)
NAN_BOXED(18441957632458374091,64,FLEN)
NAN_BOXED(9218585595603598283,64,FLEN)
NAN_BOXED(18441957632458374091,64,FLEN)
NAN_BOXED(9218585595603598283,64,FLEN)
NAN_BOXED(18441957632458374091,64,FLEN)
NAN_BOXED(9218639298775436212,64,FLEN)
NAN_BOXED(18442011335630212020,64,FLEN)
NAN_BOXED(9218639298775436212,64,FLEN)
NAN_BOXED(18442011335630212020,64,FLEN)
NAN_BOXED(9218639298775436212,64,FLEN)
NAN_BOXED(18442011335630212020,64,FLEN)
NAN_BOXED(9218639298775436212,64,FLEN)
NAN_BOXED(18442011335630212020,64,FLEN)
NAN_BOXED(9218639298775436212,64,FLEN)
NAN_BOXED(18442011335630212020,64,FLEN)
NAN_BOXED(9218715217657306220,64,FLEN)
NAN_BOXED(18442087254512082028,64,FLEN)
NAN_BOXED(9218715217657306220,64,FLEN)
NAN_BOXED(18442087254512082028,64,FLEN)
NAN_BOXED(9218715217657306220,64,FLEN)
NAN_BOXED(18442087254512082028,64,FLEN)
NAN_BOXED(9218715217657306220,64,FLEN)
NAN_BOXED(18442087254512082028,64,FLEN)
NAN_BOXED(9218715217657306220,64,FLEN)
NAN_BOXED(18442087254512082028,64,FLEN)
NAN_BOXED(9218783162133262544,64,FLEN)
NAN_BOXED(18442155198988038352,64,FLEN)
NAN_BOXED(9218783162133262544,64,FLEN)
NAN_BOXED(18442155198988038352,64,FLEN)
NAN_BOXED(9218783162133262544,64,FLEN)
NAN_BOXED(18442155198988038352,64,FLEN)
NAN_BOXED(9218783162133262544,64,FLEN)
NAN_BOXED(18442155198988038352,64,FLEN)
NAN_BOXED(9218783162133262544,64,FLEN)
NAN_BOXED(18442155198988038352,64,FLEN)
NAN_BOXED(9218834730840819690,64,FLEN)
NAN_BOXED(18442206767695595498,64,FLEN)
NAN_BOXED(9218834730840819690,64,FLEN)
NAN_BOXED(18442206767695595498,64,FLEN)
NAN_BOXED(9218834730840819690,64,FLEN)
NAN_BOXED(18442206767695595498,64,FLEN)
NAN_BOXED(9218834730840819690,64,FLEN)
NAN_BOXED(18442206767695595498,64,FLEN)
NAN_BOXED(9218834730840819690,64,FLEN)
NAN_BOXED(18442206767695595498,64,FLEN)
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(18388070213697363967,64,FLEN)
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(18388070213697363967,64,FLEN)
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(18388070213697363967,64,FLEN)
NAN_BOXED(9164698176842588159,64,FLEN)
NAN_BOXED(18388070213697363967,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 200*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
