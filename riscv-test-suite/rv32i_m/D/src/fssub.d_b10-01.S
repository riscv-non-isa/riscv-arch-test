
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:04:24 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fssub.d_b10 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fssub.d_b10)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rd, rs1==f3, rs2==f3, rd==f11,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x00a and fm2 == 0x5654de2f4c9df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f3; op2:f3; dest:f11; op1val:0x7f219c84118490e9; op2val:0x7f219c84118490e9;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f11, f3, f3, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f18, rs2==f0, rd==f9,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x00d and fm2 == 0xabea15bb1fc57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f18; op2:f0; dest:f9; op1val:0x7f219c84118490e9; op2val:0xdabea15bb1fc57;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f9, f18, f0, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd, rs1==f26, rs2==f26, rd==f26,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x011 and fm2 == 0x0b724d94f3db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f26; op2:f26; dest:f26; op1val:0x7f219c84118490e9; op2val:0x7f219c84118490e9;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f26, f26, f26, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs2 == rd != rs1, rs1==f27, rs2==f21, rd==f21,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x014 and fm2 == 0x4e4ee0fa30d24 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f27; op2:f21; dest:f21; op1val:0x7f219c84118490e9; op2val:0x144e4ee0fa30d24;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f21, f27, f21, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2, rs1==f8, rs2==f12, rd==f8,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x017 and fm2 == 0xa1e29938bd06d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f8; op2:f12; dest:f8; op1val:0x7f219c84118490e9; op2val:0x17a1e29938bd06d;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f8, f8, f12, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f29, rs2==f25, rd==f14,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x01b and fm2 == 0x052d9fc376244 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f29; op2:f25; dest:f14; op1val:0x7f219c84118490e9; op2val:0x1b052d9fc376244;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f14, f29, f25, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f1, rs2==f31, rd==f24,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x01e and fm2 == 0x467907b453ad5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f1; op2:f31; dest:f24; op1val:0x7f219c84118490e9; op2val:0x1e467907b453ad5;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f24, f1, f31, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f17, rs2==f16, rd==f15,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x021 and fm2 == 0x981749a16898a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f17; op2:f16; dest:f15; op1val:0x7f219c84118490e9; op2val:0x21981749a16898a;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f15, f17, f16, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f16, rs2==f24, rd==f5,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x024 and fm2 == 0xfe1d1c09c2bed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f16; op2:f24; dest:f5; op1val:0x7f219c84118490e9; op2val:0x24fe1d1c09c2bed;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f5, f16, f24, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f24, rs2==f9, rd==f2,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x028 and fm2 == 0x3ed2318619b74 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f24; op2:f9; dest:f2; op1val:0x7f219c84118490e9; op2val:0x283ed2318619b74;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f2, f24, f9, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f9, rs2==f15, rd==f12,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x02b and fm2 == 0x8e86bde7a0251 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f9; op2:f15; dest:f12; op1val:0x7f219c84118490e9; op2val:0x2b8e86bde7a0251;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f12, f9, f15, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f10, rs2==f19, rd==f27,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x02e and fm2 == 0xf2286d61882e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f10; op2:f19; dest:f27; op1val:0x7f219c84118490e9; op2val:0x2ef2286d61882e5;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f27, f10, f19, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f6, rs2==f17, rd==f10,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x032 and fm2 == 0x3759445cf51cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f6; op2:f17; dest:f10; op1val:0x7f219c84118490e9; op2val:0x323759445cf51cf;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f10, f6, f17, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f23, rs2==f18, rd==f17,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x035 and fm2 == 0x852f957432643 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f23; op2:f18; dest:f17; op1val:0x7f219c84118490e9; op2val:0x35852f957432643;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f17, f23, f18, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f4, rs2==f11, rd==f29,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x038 and fm2 == 0xe67b7ad13efd4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f4; op2:f11; dest:f29; op1val:0x7f219c84118490e9; op2val:0x38e67b7ad13efd4;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f29, f4, f11, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f11, rs2==f13, rd==f16,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x03c and fm2 == 0x300d2cc2c75e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f11; op2:f13; dest:f16; op1val:0x7f219c84118490e9; op2val:0x3c300d2cc2c75e5;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f16, f11, f13, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f15, rs2==f23, rd==f13,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x03f and fm2 == 0x7c1077f37935e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f15; op2:f23; dest:f13; op1val:0x7f219c84118490e9; op2val:0x3f7c1077f37935e;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f13, f15, f23, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f22, rs2==f2, rd==f31,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x042 and fm2 == 0xdb1495f057835 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f22; op2:f2; dest:f31; op1val:0x7f219c84118490e9; op2val:0x42db1495f057835;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f22, f2, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f31, rs2==f29, rd==f4,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x046 and fm2 == 0x28ecddb636b21 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f31; op2:f29; dest:f4; op1val:0x7f219c84118490e9; op2val:0x4628ecddb636b21;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f4, f31, f29, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f12, rs2==f7, rd==f25,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x049 and fm2 == 0x73281523c45e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f12; op2:f7; dest:f25; op1val:0x7f219c84118490e9; op2val:0x4973281523c45e9;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f25, f12, f7, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f14, rs2==f8, rd==f30,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x04c and fm2 == 0xcff21a6cb5764 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f14; op2:f8; dest:f30; op1val:0x7f219c84118490e9; op2val:0x4ccff21a6cb5764;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f30, f14, f8, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f20, rs2==f30, rd==f18,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x050 and fm2 == 0x21f75083f169e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f20; op2:f30; dest:f18; op1val:0x7f219c84118490e9; op2val:0x5021f75083f169e;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f18, f20, f30, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f19, rs2==f4, rd==f0,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x053 and fm2 == 0x6a7524a4edc46 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f19; op2:f4; dest:f0; op1val:0x7f219c84118490e9; op2val:0x536a7524a4edc46;
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f0, f19, f4, dyn, 0, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f13, rs2==f22, rd==f1,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x056 and fm2 == 0xc5126dce29357 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f13; op2:f22; dest:f1; op1val:0x7f219c84118490e9; op2val:0x56c5126dce29357;
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f1, f13, f22, dyn, 0, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f0, rs2==f14, rd==f22,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x05a and fm2 == 0x1b2b84a0d9c17 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f0; op2:f14; dest:f22; op1val:0x7f219c84118490e9; op2val:0x5a1b2b84a0d9c17;
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f22, f0, f14, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f7, rs2==f6, rd==f28,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x05d and fm2 == 0x61f665c91031c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f7; op2:f6; dest:f28; op1val:0x7f219c84118490e9; op2val:0x5d61f665c91031c;
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f28, f7, f6, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f25, rs2==f28, rd==f19,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x060 and fm2 == 0xba73ff3b543e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f25; op2:f28; dest:f19; op1val:0x7f219c84118490e9; op2val:0x60ba73ff3b543e3;
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f19, f25, f28, dyn, 0, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f21, rs2==f27, rd==f23,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x064 and fm2 == 0x14887f8514a6e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f21; op2:f27; dest:f23; op1val:0x7f219c84118490e9; op2val:0x6414887f8514a6e;
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f23, f21, f27, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f28, rs2==f10, rd==f6,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x067 and fm2 == 0x59aa9f6659d0a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f28; op2:f10; dest:f6; op1val:0x7f219c84118490e9; op2val:0x6759aa9f6659d0a;
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f6, f28, f10, dyn, 0, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f2, rs2==f1, rd==f20,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x06a and fm2 == 0xb015473ff044c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f2; op2:f1; dest:f20; op1val:0x7f219c84118490e9; op2val:0x6ab015473ff044c;
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f20, f2, f1, dyn, 0, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f30, rs2==f20, rd==f3,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x06e and fm2 == 0x0e0d4c87f62b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f20; dest:f3; op1val:0x7f219c84118490e9; op2val:0x6e0e0d4c87f62b0;
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f3, f30, f20, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f5,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x071 and fm2 == 0x51909fa9f3b5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f5; op2:f18; dest:f4; op1val:0x7f219c84118490e9; op2val:0x7151909fa9f3b5b;
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f4, f5, f18, dyn, 0, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// rs2==f5,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x074 and fm2 == 0xa5f4c79470a32 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f14; op2:f5; dest:f31; op1val:0x7f219c84118490e9; op2val:0x74a5f4c79470a32;
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f14, f5, dyn, 0, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// rd==f7,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x078 and fm2 == 0x07b8fcbcc665f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f25; op2:f20; dest:f7; op1val:0x7f219c84118490e9; op2val:0x7807b8fcbcc665f;
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f7, f25, f20, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x07b and fm2 == 0x49a73bebf7ff7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7b49a73bebf7ff7;
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x07e and fm2 == 0x9c110ae6f5ff5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7e9c110ae6f5ff5;
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x082 and fm2 == 0x018aa6d059bf9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x82018aa6d059bf9;
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x085 and fm2 == 0x41ed5084702f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x8541ed5084702f8;
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x088 and fm2 == 0x9268a4a58c3b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x889268a4a58c3b5;
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x08b and fm2 == 0xf702cdceef4a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x8bf702cdceef4a3;
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x08f and fm2 == 0x3a61c0a1558e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x8f3a61c0a1558e6;
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x092 and fm2 == 0x88fa30c9aaf1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x9288fa30c9aaf1f;
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x095 and fm2 == 0xeb38bcfc15ae7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x95eb38bcfc15ae7;
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x099 and fm2 == 0x3303761d8d8d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x993303761d8d8d0;
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x09c and fm2 == 0x7fc453a4f0f04 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x9c7fc453a4f0f04;
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x09f and fm2 == 0xdfb5688e2d2c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x9fdfb5688e2d2c6;
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0a3 and fm2 == 0x2bd16158dc3bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xa32bd16158dc3bb;
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0a6 and fm2 == 0x76c5b9af134aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xa676c5b9af134aa;
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0a9 and fm2 == 0xd477281ad81d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xa9d477281ad81d5;
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0ad and fm2 == 0x24ca7910c7125 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xad24ca7910c7125;
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0b0 and fm2 == 0x6dfd1754f8d6e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xb06dfd1754f8d6e;
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0b3 and fm2 == 0xc97c5d2a370ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xb3c97c5d2a370ca;
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0b7 and fm2 == 0x1dedba3a6267e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xb71dedba3a6267e;
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0ba and fm2 == 0x656928c8fb01e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xba656928c8fb01e;
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0bd and fm2 == 0xbec372fb39c25 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xbdbec372fb39c25;
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0c1 and fm2 == 0x173a27dd04197 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xc1173a27dd04197;
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0c4 and fm2 == 0x5d08b1d4451fd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xc45d08b1d4451fd;
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0c7 and fm2 == 0xb44ade495667c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xc7b44ade495667c;
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0cb and fm2 == 0x10aecaedd600e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xcb10aecaedd600e;
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0ce and fm2 == 0x54da7da94b811 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xce54da7da94b811;
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0d1 and fm2 == 0xaa111d139e615 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xd1aa111d139e615;
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0d5 and fm2 == 0x0a4ab22c42fcd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xd50a4ab22c42fcd;
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0d8 and fm2 == 0x4cdd5eb753bc1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xd84cdd5eb753bc1;
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0db and fm2 == 0xa014b66528ab1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xdba014b66528ab1;
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0df and fm2 == 0x040cf1ff396af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xdf040cf1ff396af;
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0e2 and fm2 == 0x45102e7f07c5a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xe245102e7f07c5a;
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0e5 and fm2 == 0x96543a1ec9b71 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xe596543a1ec9b71;
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0e8 and fm2 == 0xfbe948a67c24d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xe8fbe948a67c24d;
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0ec and fm2 == 0x3d71cd680d970 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xec3d71cd680d970;
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0ef and fm2 == 0x8cce40c210fcc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xef8cce40c210fcc;
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0f2 and fm2 == 0xf001d0f2953bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xf2f001d0f2953bf;
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0f6 and fm2 == 0x360122979d457 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xf6360122979d457;
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0f9 and fm2 == 0x83816b3d8496d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xf983816b3d8496d;
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x0fc and fm2 == 0xe461c60ce5bc9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xfce461c60ce5bc9;
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x100 and fm2 == 0x2ebd1bc80f95d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1002ebd1bc80f95d;
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x103 and fm2 == 0x7a6c62ba137b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1037a6c62ba137b5;
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x106 and fm2 == 0xd9077b68985a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x106d9077b68985a2;
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x10a and fm2 == 0x27a4ad215f385 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x10a27a4ad215f385;
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x10d and fm2 == 0x718dd869b7067 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x10d718dd869b7067;
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x110 and fm2 == 0xcdf14e8424c80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x110cdf14e8424c80;
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x114 and fm2 == 0x20b6d11296fd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x11420b6d11296fd0;
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x117 and fm2 == 0x68e485573cbc4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x11768e485573cbc4;
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x11a and fm2 == 0xc31da6ad0beb5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x11ac31da6ad0beb5;
   valaddr_reg:x3; val_offset:164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x11e and fm2 == 0x19f2882c27731 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x11e19f2882c27731;
   valaddr_reg:x3; val_offset:166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x121 and fm2 == 0x606f2a37314fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x121606f2a37314fe;
   valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x124 and fm2 == 0xb88af4c4fda3d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x124b88af4c4fda3d;
   valaddr_reg:x3; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x128 and fm2 == 0x1356d8fb1e866 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1281356d8fb1e866;
   valaddr_reg:x3; val_offset:172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x12b and fm2 == 0x582c8f39e6280 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x12b582c8f39e6280;
   valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x12e and fm2 == 0xae37b3085fb1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x12eae37b3085fb1f;
   valaddr_reg:x3; val_offset:176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x132 and fm2 == 0x0ce2cfe53bcf4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1320ce2cfe53bcf4;
   valaddr_reg:x3; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x135 and fm2 == 0x501b83de8ac31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x135501b83de8ac31;
   valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x138 and fm2 == 0xa42264d62d73d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x138a42264d62d73d;
   valaddr_reg:x3; val_offset:182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x13c and fm2 == 0x06957f05dc686 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x13c06957f05dc686;
   valaddr_reg:x3; val_offset:184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x13f and fm2 == 0x483adec753827 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x13f483adec753827;
   valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x142 and fm2 == 0x9a49967928631 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1429a49967928631;
   valaddr_reg:x3; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x146 and fm2 == 0x006dfe0bb93df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x146006dfe0bb93df;
   valaddr_reg:x3; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x149 and fm2 == 0x40897d8ea78d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x14940897d8ea78d7;
   valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x14c and fm2 == 0x90abdcf25170c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x14c90abdcf25170c;
   valaddr_reg:x3; val_offset:194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 194*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x14f and fm2 == 0xf4d6d42ee5ccf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x14ff4d6d42ee5ccf;
   valaddr_reg:x3; val_offset:196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 196*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x153 and fm2 == 0x3906449d4fa01 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1533906449d4fa01;
   valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x156 and fm2 == 0x8747d5c4a3882 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1568747d5c4a3882;
   valaddr_reg:x3; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 200*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x159 and fm2 == 0xe919cb35cc6a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x159e919cb35cc6a2;
   valaddr_reg:x3; val_offset:202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 202*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x15d and fm2 == 0x31b01f019fc25 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x15d31b01f019fc25;
   valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x160 and fm2 == 0x7e1c26c207b2f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1607e1c26c207b2f;
   valaddr_reg:x3; val_offset:206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 206*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x163 and fm2 == 0xdda33072899fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x163dda33072899fb;
   valaddr_reg:x3; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 208*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x167 and fm2 == 0x2a85fe479603d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1672a85fe479603d;
   valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x16a and fm2 == 0x75277dd97b84c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x16a75277dd97b84c;
   valaddr_reg:x3; val_offset:212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 212*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x16d and fm2 == 0xd2715d4fda65f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x16dd2715d4fda65f;
   valaddr_reg:x3; val_offset:214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 214*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x171 and fm2 == 0x2386da51e87fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1712386da51e87fb;
   valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x174 and fm2 == 0x6c6890e6629fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1746c6890e6629fa;
   valaddr_reg:x3; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 218*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x177 and fm2 == 0xc782b51ffb478 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x177c782b51ffb478;
   valaddr_reg:x3; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 220*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x17b and fm2 == 0x1cb1b133fd0cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x17b1cb1b133fd0cb;
   valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x17e and fm2 == 0x63de1d80fc4fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x17e63de1d80fc4fe;
   valaddr_reg:x3; val_offset:224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 224*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x181 and fm2 == 0xbcd5a4e13b63e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x181bcd5a4e13b63e;
   valaddr_reg:x3; val_offset:226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 226*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x185 and fm2 == 0x1605870cc51e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1851605870cc51e7;
   valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x188 and fm2 == 0x5b86e8cff6660 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1885b86e8cff6660;
   valaddr_reg:x3; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 230*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x18b and fm2 == 0xb268a303f3ff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x18bb268a303f3ff8;
   valaddr_reg:x3; val_offset:232*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 232*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x18f and fm2 == 0x0f8165e2787fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x18f0f8165e2787fb;
   valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x192 and fm2 == 0x5361bf5b169fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1925361bf5b169fa;
   valaddr_reg:x3; val_offset:236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 236*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x195 and fm2 == 0xa83a2f31dc478 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x195a83a2f31dc478;
   valaddr_reg:x3; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 238*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x199 and fm2 == 0x09245d7f29acb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x19909245d7f29acb;
   valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x19c and fm2 == 0x4b6d74def417e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x19c4b6d74def417e;
   valaddr_reg:x3; val_offset:242*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 242*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x19f and fm2 == 0x9e48d216b11de and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x19f9e48d216b11de;
   valaddr_reg:x3; val_offset:244*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 244*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1a3 and fm2 == 0x02ed834e2eb2a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1a302ed834e2eb2a;
   valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1a6 and fm2 == 0x43a8e421ba5f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1a643a8e421ba5f5;
   valaddr_reg:x3; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 248*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1a9 and fm2 == 0x94931d2a28f72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1a994931d2a28f72;
   valaddr_reg:x3; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 250*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1ac and fm2 == 0xf9b7e474b334f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1acf9b7e474b334f;
   valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1b0 and fm2 == 0x3c12eec8f0011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1b03c12eec8f0011;
   valaddr_reg:x3; val_offset:254*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 254*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1b3 and fm2 == 0x8b17aa7b2c016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1b38b17aa7b2c016;
   valaddr_reg:x3; val_offset:256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 256*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1b6 and fm2 == 0xeddd9519f701b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1b6eddd9519f701b;
   valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1ba and fm2 == 0x34aa7d303a611 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1ba34aa7d303a611;
   valaddr_reg:x3; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 260*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1bd and fm2 == 0x81d51c7c48f95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1bd81d51c7c48f95;
   valaddr_reg:x3; val_offset:262*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 262*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1c0 and fm2 == 0xe24a639b5b37a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1c0e24a639b5b37a;
   valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1c4 and fm2 == 0x2d6e7e411902d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1c42d6e7e411902d;
   valaddr_reg:x3; val_offset:266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 266*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1c7 and fm2 == 0x78ca1dd15f438 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1c778ca1dd15f438;
   valaddr_reg:x3; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 268*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1ca and fm2 == 0xd6fca545b7146 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1cad6fca545b7146;
   valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1ce and fm2 == 0x265de74b926cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1ce265de74b926cb;
   valaddr_reg:x3; val_offset:272*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 272*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1d1 and fm2 == 0x6ff5611e7707e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1d16ff5611e7707e;
   valaddr_reg:x3; val_offset:274*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 274*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1d4 and fm2 == 0xcbf2b96614c9e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1d4cbf2b96614c9e;
   valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1d8 and fm2 == 0x1f77b3dfccfe3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1d81f77b3dfccfe3;
   valaddr_reg:x3; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 278*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1db and fm2 == 0x6755a0d7c03db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1db6755a0d7c03db;
   valaddr_reg:x3; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 280*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1de and fm2 == 0xc12b090db04d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1dec12b090db04d2;
   valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1e2 and fm2 == 0x18bae5a88e303 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1e218bae5a88e303;
   valaddr_reg:x3; val_offset:284*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 284*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1e5 and fm2 == 0x5ee99f12b1bc4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1e55ee99f12b1bc4;
   valaddr_reg:x3; val_offset:286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 286*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1e8 and fm2 == 0xb6a406d75e2b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1e8b6a406d75e2b5;
   valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1ec and fm2 == 0x122684469adb1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1ec122684469adb1;
   valaddr_reg:x3; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 290*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1ef and fm2 == 0x56b025584191e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1ef56b025584191e;
   valaddr_reg:x3; val_offset:292*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 292*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1f2 and fm2 == 0xac5c2eae51f65 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1f2ac5c2eae51f65;
   valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1f6 and fm2 == 0x0bb99d2cf339f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1f60bb99d2cf339f;
   valaddr_reg:x3; val_offset:296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 296*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1f9 and fm2 == 0x4ea8047830087 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1f94ea8047830087;
   valaddr_reg:x3; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 298*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x1fc and fm2 == 0xa25205963c0a9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x1fca25205963c0a9;
   valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x200 and fm2 == 0x0573437de5869 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2000573437de5869;
   valaddr_reg:x3; val_offset:302*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 302*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x46d0145d5ee84 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x20346d0145d5ee84;
   valaddr_reg:x3; val_offset:304*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 304*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x206 and fm2 == 0x98841974b6a25 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x20698841974b6a25;
   valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x209 and fm2 == 0xfea51fd1e44ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x209fea51fd1e44ae;
   valaddr_reg:x3; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 308*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x20d and fm2 == 0x3f2733e32eaed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x20d3f2733e32eaed;
   valaddr_reg:x3; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 310*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x210 and fm2 == 0x8ef100dbfa5a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2108ef100dbfa5a8;
   valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x213 and fm2 == 0xf2ad4112f8f12 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x213f2ad4112f8f12;
   valaddr_reg:x3; val_offset:314*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 314*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x217 and fm2 == 0x37ac48abdb96b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x21737ac48abdb96b;
   valaddr_reg:x3; val_offset:316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 316*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x21a and fm2 == 0x85975ad6d27c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x21a85975ad6d27c6;
   valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x21d and fm2 == 0xe6fd318c871b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x21de6fd318c871b7;
   valaddr_reg:x3; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 320*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x221 and fm2 == 0x305e3ef7d4713 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x221305e3ef7d4713;
   valaddr_reg:x3; val_offset:322*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 322*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x224 and fm2 == 0x7c75ceb5c98d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2247c75ceb5c98d7;
   valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x227 and fm2 == 0xdb9342633bf0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x227db9342633bf0d;
   valaddr_reg:x3; val_offset:326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 326*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x22b and fm2 == 0x293c097e05768 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x22b293c097e05768;
   valaddr_reg:x3; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 328*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x22e and fm2 == 0x738b0bdd86d42 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x22e738b0bdd86d42;
   valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x231 and fm2 == 0xd06dced4e8893 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x231d06dced4e8893;
   valaddr_reg:x3; val_offset:332*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 332*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x235 and fm2 == 0x2244a1451155c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2352244a1451155c;
   valaddr_reg:x3; val_offset:334*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 334*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x238 and fm2 == 0x6ad5c99655ab3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2386ad5c99655ab3;
   valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x23b and fm2 == 0xc58b3bfbeb15f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x23bc58b3bfbeb15f;
   valaddr_reg:x3; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 338*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x23f and fm2 == 0x1b77057d72edc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x23f1b77057d72edc;
   valaddr_reg:x3; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 340*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x242 and fm2 == 0x6254c6dccfa93 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2426254c6dccfa93;
   valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x245 and fm2 == 0xbae9f89403937 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x245bae9f89403937;
   valaddr_reg:x3; val_offset:344*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 344*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x249 and fm2 == 0x14d23b5c823c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x24914d23b5c823c2;
   valaddr_reg:x3; val_offset:346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 346*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x24c and fm2 == 0x5a06ca33a2cb3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x24c5a06ca33a2cb3;
   valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x24f and fm2 == 0xb0887cc08b7e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x24fb0887cc08b7e0;
   valaddr_reg:x3; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 350*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x253 and fm2 == 0x0e554df8572ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2530e554df8572ec;
   valaddr_reg:x3; val_offset:352*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 352*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x256 and fm2 == 0x51eaa1766cfa7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x25651eaa1766cfa7;
   valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x259 and fm2 == 0xa66549d408391 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x259a66549d408391;
   valaddr_reg:x3; val_offset:356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 356*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x25d and fm2 == 0x07ff4e248523a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x25d07ff4e248523a;
   valaddr_reg:x3; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 358*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x260 and fm2 == 0x49ff21ada66c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x26049ff21ada66c9;
   valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x263 and fm2 == 0x9c7eea191007b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2639c7eea191007b;
   valaddr_reg:x3; val_offset:362*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 362*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x267 and fm2 == 0x01cf524faa04d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x26701cf524faa04d;
   valaddr_reg:x3; val_offset:364*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 364*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x26a and fm2 == 0x424326e394860 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x26a424326e394860;
   valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x26d and fm2 == 0x92d3f09c79a78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x26d92d3f09c79a78;
   valaddr_reg:x3; val_offset:368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 368*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x270 and fm2 == 0xf788ecc398116 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x270f788ecc398116;
   valaddr_reg:x3; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 370*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x274 and fm2 == 0x3ab593fa3f0ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2743ab593fa3f0ae;
   valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x277 and fm2 == 0x8962f8f8cecda and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2778962f8f8cecda;
   valaddr_reg:x3; val_offset:374*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 374*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x27a and fm2 == 0xebbbb73702810 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x27aebbbb73702810;
   valaddr_reg:x3; val_offset:376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 376*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x27e and fm2 == 0x335552826190a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x27e335552826190a;
   valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x281 and fm2 == 0x802aa722f9f4c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x281802aa722f9f4c;
   valaddr_reg:x3; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 380*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x284 and fm2 == 0xe03550ebb8720 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x284e03550ebb8720;
   valaddr_reg:x3; val_offset:382*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 382*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x288 and fm2 == 0x2c21529353474 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2882c21529353474;
   valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x28b and fm2 == 0x7729a73828191 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x28b7729a73828191;
   valaddr_reg:x3; val_offset:386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 386*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x28e and fm2 == 0xd4f41106321f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x28ed4f41106321f5;
   valaddr_reg:x3; val_offset:388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 388*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x292 and fm2 == 0x25188aa3df539 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x29225188aa3df539;
   valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x295 and fm2 == 0x6e5ead4cd7287 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2956e5ead4cd7287;
   valaddr_reg:x3; val_offset:392*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 392*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x298 and fm2 == 0xc9f658a00cf29 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x298c9f658a00cf29;
   valaddr_reg:x3; val_offset:394*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 394*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x29c and fm2 == 0x1e39f7640817a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x29c1e39f7640817a;
   valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x29f and fm2 == 0x65c8753d0a1d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x29f65c8753d0a1d8;
   valaddr_reg:x3; val_offset:398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 398*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2a2 and fm2 == 0xbf3a928c4ca4e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2a2bf3a928c4ca4e;
   valaddr_reg:x3; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 400*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2a6 and fm2 == 0x17849b97afe71 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2a617849b97afe71;
   valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2a9 and fm2 == 0x5d65c27d9be0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2a95d65c27d9be0d;
   valaddr_reg:x3; val_offset:404*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 404*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2ac and fm2 == 0xb4bf331d02d90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2acb4bf331d02d90;
   valaddr_reg:x3; val_offset:406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 406*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2b0 and fm2 == 0x10f77ff221c7a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2b010f77ff221c7a;
   valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2b3 and fm2 == 0x55355feeaa399 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2b355355feeaa399;
   valaddr_reg:x3; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 410*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2b6 and fm2 == 0xaa82b7ea54c7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2b6aa82b7ea54c7f;
   valaddr_reg:x3; val_offset:412*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 412*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2ba and fm2 == 0x0a91b2f274fcf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2ba0a91b2f274fcf;
   valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2bd and fm2 == 0x4d361faf123c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2bd4d361faf123c3;
   valaddr_reg:x3; val_offset:416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 416*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2c0 and fm2 == 0xa083a79ad6cb4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2c0a083a79ad6cb4;
   valaddr_reg:x3; val_offset:418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 418*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2c4 and fm2 == 0x045248c0c63f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2c4045248c0c63f0;
   valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2c7 and fm2 == 0x4566daf0f7ced and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2c74566daf0f7ced;
   valaddr_reg:x3; val_offset:422*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 422*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2ca and fm2 == 0x96c091ad35c28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2ca96c091ad35c28;
   valaddr_reg:x3; val_offset:424*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 424*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2cd and fm2 == 0xfc70b61883332 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2cdfc70b61883332;
   valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2d1 and fm2 == 0x3dc671cf51fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2d13dc671cf51fff;
   valaddr_reg:x3; val_offset:428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 428*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2d4 and fm2 == 0x8d380e43267ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2d48d380e43267ff;
   valaddr_reg:x3; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 430*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2d7 and fm2 == 0xf08611d3f01fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2d7f08611d3f01fe;
   valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2db and fm2 == 0x3653cb247613f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2db3653cb247613f;
   valaddr_reg:x3; val_offset:434*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 434*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2de and fm2 == 0x83e8bded9398f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2de83e8bded9398f;
   valaddr_reg:x3; val_offset:436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 436*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2e1 and fm2 == 0xe4e2ed68f87f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2e1e4e2ed68f87f2;
   valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2e5 and fm2 == 0x2f0dd4619b4f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2e52f0dd4619b4f8;
   valaddr_reg:x3; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 440*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2e8 and fm2 == 0x7ad1497a02235 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2e87ad1497a02235;
   valaddr_reg:x3; val_offset:442*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 442*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2eb and fm2 == 0xd9859bd882ac3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2ebd9859bd882ac3;
   valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2ef and fm2 == 0x27f3816751aba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2ef27f3816751aba;
   valaddr_reg:x3; val_offset:446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 446*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2f2 and fm2 == 0x71f061c126168 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2f271f061c126168;
   valaddr_reg:x3; val_offset:448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 448*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2f5 and fm2 == 0xce6c7a316f9c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2f5ce6c7a316f9c2;
   valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2f9 and fm2 == 0x2103cc5ee5c19 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2f92103cc5ee5c19;
   valaddr_reg:x3; val_offset:452*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 452*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2fc and fm2 == 0x6944bf769f320 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2fc6944bf769f320;
   valaddr_reg:x3; val_offset:454*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 454*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x2ff and fm2 == 0xc395ef5446fe8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x2ffc395ef5446fe8;
   valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x303 and fm2 == 0x1a3db594ac5f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3031a3db594ac5f1;
   valaddr_reg:x3; val_offset:458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 458*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x306 and fm2 == 0x60cd22f9d776d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x30660cd22f9d776d;
   valaddr_reg:x3; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 460*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x309 and fm2 == 0xb9006bb84d548 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x309b9006bb84d548;
   valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x30d and fm2 == 0x13a043533054d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x30d13a043533054d;
   valaddr_reg:x3; val_offset:464*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 464*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x310 and fm2 == 0x58885427fc6a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x31058885427fc6a0;
   valaddr_reg:x3; val_offset:466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 466*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x313 and fm2 == 0xaeaa6931fb849 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x313aeaa6931fb849;
   valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x317 and fm2 == 0x0d2a81bf3d32d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3170d2a81bf3d32d;
   valaddr_reg:x3; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 470*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x31a and fm2 == 0x5075222f0c7f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x31a5075222f0c7f9;
   valaddr_reg:x3; val_offset:472*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 472*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x31d and fm2 == 0xa4926abacf9f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x31da4926abacf9f7;
   valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x321 and fm2 == 0x06db82b4c1c3a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x32106db82b4c1c3a;
   valaddr_reg:x3; val_offset:476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 476*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x324 and fm2 == 0x48926361f2349 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x32448926361f2349;
   valaddr_reg:x3; val_offset:478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 478*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x327 and fm2 == 0x9ab6fc3a6ec1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3279ab6fc3a6ec1b;
   valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x32b and fm2 == 0x00b25da485391 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x32b00b25da485391;
   valaddr_reg:x3; val_offset:482*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 482*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x32e and fm2 == 0x40def50da6875 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x32e40def50da6875;
   valaddr_reg:x3; val_offset:484*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 484*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x331 and fm2 == 0x9116b25110292 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3319116b25110292;
   valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x334 and fm2 == 0xf55c5ee554337 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x334f55c5ee554337;
   valaddr_reg:x3; val_offset:488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 488*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x338 and fm2 == 0x3959bb4f54a02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3383959bb4f54a02;
   valaddr_reg:x3; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 490*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x33b and fm2 == 0x87b02a2329c83 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x33b87b02a2329c83;
   valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x33e and fm2 == 0xe99c34abf43a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x33ee99c34abf43a4;
   valaddr_reg:x3; val_offset:494*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 494*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x342 and fm2 == 0x3201a0eb78a46 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3423201a0eb78a46;
   valaddr_reg:x3; val_offset:496*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 496*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x345 and fm2 == 0x7e82092656cd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3457e82092656cd8;
   valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x348 and fm2 == 0xde228b6fec80e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x348de228b6fec80e;
   valaddr_reg:x3; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 500*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x34c and fm2 == 0x2ad59725f3d09 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x34c2ad59725f3d09;
   valaddr_reg:x3; val_offset:502*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 502*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x34f and fm2 == 0x758afcef70c4b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x34f758afcef70c4b;
   valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x352 and fm2 == 0xd2edbc2b4cf5e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x352d2edbc2b4cf5e;
   valaddr_reg:x3; val_offset:506*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 506*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x356 and fm2 == 0x23d4959b1019a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x35623d4959b1019a;
   valaddr_reg:x3; val_offset:508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 508*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x359 and fm2 == 0x6cc9bb01d4201 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3596cc9bb01d4201;
   valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x35c and fm2 == 0xc7fc29c249281 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x35cc7fc29c249281;
   valaddr_reg:x3; val_offset:512*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 512*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x360 and fm2 == 0x1cfd9a196db91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3601cfd9a196db91;
   valaddr_reg:x3; val_offset:514*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 514*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x363 and fm2 == 0x643d009fc9275 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x363643d009fc9275;
   valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x366 and fm2 == 0xbd4c40c7bb712 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x366bd4c40c7bb712;
   valaddr_reg:x3; val_offset:518*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 518*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x36a and fm2 == 0x164fa87cd526b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x36a164fa87cd526b;
   valaddr_reg:x3; val_offset:520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 520*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x36d and fm2 == 0x5be3929c0a706 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x36d5be3929c0a706;
   valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x370 and fm2 == 0xb2dc77430d0c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x370b2dc77430d0c8;
   valaddr_reg:x3; val_offset:524*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 524*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x374 and fm2 == 0x0fc9ca89e827d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3740fc9ca89e827d;
   valaddr_reg:x3; val_offset:526*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 526*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x377 and fm2 == 0x53bc3d2c6231c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x37753bc3d2c6231c;
   valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x37a and fm2 == 0xa8ab4c777abe3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x37aa8ab4c777abe3;
   valaddr_reg:x3; val_offset:530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 530*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x37e and fm2 == 0x096b0fcaacb6e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x37e096b0fcaacb6e;
   valaddr_reg:x3; val_offset:532*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 532*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x381 and fm2 == 0x4bc5d3bd57e4a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3814bc5d3bd57e4a;
   valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x384 and fm2 == 0x9eb748acadddc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3849eb748acadddc;
   valaddr_reg:x3; val_offset:536*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 536*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x388 and fm2 == 0x03328d6becaa9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x38803328d6becaa9;
   valaddr_reg:x3; val_offset:538*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 538*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x38b and fm2 == 0x43ff30c6e7d54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x38b43ff30c6e7d54;
   valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x38e and fm2 == 0x94fefcf8a1ca9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x38e94fefcf8a1ca9;
   valaddr_reg:x3; val_offset:542*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 542*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x391 and fm2 == 0xfa3ebc36ca3d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x391fa3ebc36ca3d3;
   valaddr_reg:x3; val_offset:544*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 544*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x395 and fm2 == 0x3c6735a23e664 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3953c6735a23e664;
   valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x398 and fm2 == 0x8b81030acdffd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3988b81030acdffd;
   valaddr_reg:x3; val_offset:548*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 548*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x39b and fm2 == 0xee6143cd817fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x39bee6143cd817fc;
   valaddr_reg:x3; val_offset:550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 550*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x39f and fm2 == 0x34fcca6070efd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x39f34fcca6070efd;
   valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3a2 and fm2 == 0x823bfcf88d2bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3a2823bfcf88d2bd;
   valaddr_reg:x3; val_offset:554*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 554*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3a5 and fm2 == 0xe2cafc36b076c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3a5e2cafc36b076c;
   valaddr_reg:x3; val_offset:556*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 556*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3a9 and fm2 == 0x2dbedda22e4a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3a92dbedda22e4a4;
   valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3ac and fm2 == 0x792e950ab9dcc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3ac792e950ab9dcc;
   valaddr_reg:x3; val_offset:560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 560*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3af and fm2 == 0xd77a3a4d68540 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3afd77a3a4d68540;
   valaddr_reg:x3; val_offset:562*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 562*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3b3 and fm2 == 0x26ac647061348 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3b326ac647061348;
   valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3b6 and fm2 == 0x70577d8c7981a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3b670577d8c7981a;
   valaddr_reg:x3; val_offset:566*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 566*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3b9 and fm2 == 0xcc6d5cef97e20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3b9cc6d5cef97e20;
   valaddr_reg:x3; val_offset:568*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 568*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3bd and fm2 == 0x1fc45a15beed4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3bd1fc45a15beed4;
   valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3c0 and fm2 == 0x67b5709b2ea89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3c067b5709b2ea89;
   valaddr_reg:x3; val_offset:572*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 572*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3c3 and fm2 == 0xc1a2ccc1fa52b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3c3c1a2ccc1fa52b;
   valaddr_reg:x3; val_offset:574*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 574*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3c7 and fm2 == 0x1905bff93c73b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3c71905bff93c73b;
   valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3ca and fm2 == 0x5f472ff78b90a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3ca5f472ff78b90a;
   valaddr_reg:x3; val_offset:578*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 578*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3cd and fm2 == 0xb718fbf56e74c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3cdb718fbf56e74c;
   valaddr_reg:x3; val_offset:580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 580*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0x126f9d7965090 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3d1126f9d7965090;
   valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3d4 and fm2 == 0x570b84d7be4b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3d4570b84d7be4b4;
   valaddr_reg:x3; val_offset:584*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 584*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3d7 and fm2 == 0xacce660dadde1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3d7acce660dadde1;
   valaddr_reg:x3; val_offset:586*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 586*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3db and fm2 == 0x0c00ffc88caac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3db0c00ffc88caac;
   valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3de and fm2 == 0x4f013fbaafd57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3de4f013fbaafd57;
   valaddr_reg:x3; val_offset:590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 590*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3e1 and fm2 == 0xa2c18fa95bcad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3e1a2c18fa95bcad;
   valaddr_reg:x3; val_offset:592*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 592*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3e5 and fm2 == 0x05b8f9c9d95ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3e505b8f9c9d95ec;
   valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3e8 and fm2 == 0x4727383c4fb67 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3e84727383c4fb67;
   valaddr_reg:x3; val_offset:596*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 596*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3eb and fm2 == 0x98f1064b63a41 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3eb98f1064b63a41;
   valaddr_reg:x3; val_offset:598*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 598*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3ee and fm2 == 0xff2d47de3c8d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3eeff2d47de3c8d1;
   valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3f2 and fm2 == 0x3f7c4ceae5d83 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3f23f7c4ceae5d83;
   valaddr_reg:x3; val_offset:602*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 602*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3f5 and fm2 == 0x8f5b60259f4e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3f58f5b60259f4e4;
   valaddr_reg:x3; val_offset:604*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 604*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xf332382f0721d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3f8f332382f0721d;
   valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x37ff631d64752 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3fc37ff631d64752;
   valaddr_reg:x3; val_offset:608*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 608*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x85ff3be4bd926 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x3ff85ff3be4bd926;
   valaddr_reg:x3; val_offset:610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 610*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xe77f0addecf70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x402e77f0addecf70;
   valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x406 and fm2 == 0x30af66cab41a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x40630af66cab41a6;
   valaddr_reg:x3; val_offset:614*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 614*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x409 and fm2 == 0x7cdb407d6120f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4097cdb407d6120f;
   valaddr_reg:x3; val_offset:616*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 616*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x40c and fm2 == 0xdc12109cb9693 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x40cdc12109cb9693;
   valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x410 and fm2 == 0x298b4a61f3e1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x410298b4a61f3e1c;
   valaddr_reg:x3; val_offset:620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 620*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x413 and fm2 == 0x73ee1cfa70da3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x41373ee1cfa70da3;
   valaddr_reg:x3; val_offset:622*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 622*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x416 and fm2 == 0xd0e9a4390d10c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x416d0e9a4390d10c;
   valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x41a and fm2 == 0x229206a3a82a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x41a229206a3a82a7;
   valaddr_reg:x3; val_offset:626*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 626*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x41d and fm2 == 0x6b36884c92351 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x41d6b36884c92351;
   valaddr_reg:x3; val_offset:628*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 628*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x420 and fm2 == 0xc6042a5fb6c26 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x420c6042a5fb6c26;
   valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x424 and fm2 == 0x1bc29a7bd2397 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4241bc29a7bd2397;
   valaddr_reg:x3; val_offset:632*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 632*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x427 and fm2 == 0x62b3411ac6c7d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x42762b3411ac6c7d;
   valaddr_reg:x3; val_offset:634*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 634*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x42a and fm2 == 0xbb6011617879d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x42abb6011617879d;
   valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x151c0adceb4c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x42e151c0adceb4c2;
   valaddr_reg:x3; val_offset:638*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 638*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x431 and fm2 == 0x5a630d94261f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4315a630d94261f2;
   valaddr_reg:x3; val_offset:640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 640*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x434 and fm2 == 0xb0fbd0f92fa6f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x434b0fbd0f92fa6f;
   valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x438 and fm2 == 0x0e9d629bbdc85 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4380e9d629bbdc85;
   valaddr_reg:x3; val_offset:644*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 644*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x43b and fm2 == 0x5244bb42ad3a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x43b5244bb42ad3a7;
   valaddr_reg:x3; val_offset:646*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 646*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x43e and fm2 == 0xa6d5ea1358890 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x43ea6d5ea1358890;
   valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x442 and fm2 == 0x0845b24c1755a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4420845b24c1755a;
   valaddr_reg:x3; val_offset:650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 650*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x445 and fm2 == 0x4a571edf1d2b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4454a571edf1d2b1;
   valaddr_reg:x3; val_offset:652*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 652*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x448 and fm2 == 0x9cece696e475d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4489cece696e475d;
   valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x44c and fm2 == 0x0214101e4ec9a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x44c0214101e4ec9a;
   valaddr_reg:x3; val_offset:656*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 656*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x44f and fm2 == 0x42991425e27c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x44f42991425e27c1;
   valaddr_reg:x3; val_offset:658*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 658*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x452 and fm2 == 0x933f592f5b1b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x452933f592f5b1b1;
   valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x455 and fm2 == 0xf80f2f7b31e1d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x455f80f2f7b31e1d;
   valaddr_reg:x3; val_offset:662*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 662*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x459 and fm2 == 0x3b097dacff2d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4593b097dacff2d2;
   valaddr_reg:x3; val_offset:664*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 664*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x45c and fm2 == 0x89cbdd183ef87 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x45c89cbdd183ef87;
   valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x45f and fm2 == 0xec3ed45e4eb68 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x45fec3ed45e4eb68;
   valaddr_reg:x3; val_offset:668*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 668*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x463 and fm2 == 0x33a744baf1321 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x46333a744baf1321;
   valaddr_reg:x3; val_offset:670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 670*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x466 and fm2 == 0x809115e9ad7ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x466809115e9ad7ea;
   valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x469 and fm2 == 0xe0b55b6418de4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x469e0b55b6418de4;
   valaddr_reg:x3; val_offset:674*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 674*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x46d and fm2 == 0x2c71591e8f8ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x46d2c71591e8f8ae;
   valaddr_reg:x3; val_offset:676*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 676*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x470 and fm2 == 0x778daf66336da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x470778daf66336da;
   valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x473 and fm2 == 0xd5711b3fc0491 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x473d5711b3fc0491;
   valaddr_reg:x3; val_offset:680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 680*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x477 and fm2 == 0x2566b107d82da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4772566b107d82da;
   valaddr_reg:x3; val_offset:682*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 682*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x47a and fm2 == 0x6ec05d49ce391 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x47a6ec05d49ce391;
   valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x47d and fm2 == 0xca70749c41c75 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x47dca70749c41c75;
   valaddr_reg:x3; val_offset:686*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 686*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x481 and fm2 == 0x1e8648e1a91c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4811e8648e1a91c9;
   valaddr_reg:x3; val_offset:688*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 688*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x484 and fm2 == 0x6627db1a1363c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4846627db1a1363c;
   valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x487 and fm2 == 0xbfb1d1e0983ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x487bfb1d1e0983ca;
   valaddr_reg:x3; val_offset:692*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 692*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x48b and fm2 == 0x17cf232c5f25f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x48b17cf232c5f25f;
   valaddr_reg:x3; val_offset:694*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 694*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x48e and fm2 == 0x5dc2ebf776ef6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x48e5dc2ebf776ef6;
   valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x491 and fm2 == 0xb533a6f554ab4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x491b533a6f554ab4;
   valaddr_reg:x3; val_offset:698*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 698*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x495 and fm2 == 0x1140485954eb0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4951140485954eb0;
   valaddr_reg:x3; val_offset:700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 700*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x498 and fm2 == 0x55905a6faa25c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x49855905a6faa25c;
   valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x49b and fm2 == 0xaaf4710b94af3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x49baaf4710b94af3;
   valaddr_reg:x3; val_offset:704*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 704*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x49f and fm2 == 0x0ad8c6a73ced8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x49f0ad8c6a73ced8;
   valaddr_reg:x3; val_offset:706*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 706*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4a2 and fm2 == 0x4d8ef8510c28e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4a24d8ef8510c28e;
   valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4a5 and fm2 == 0xa0f2b6654f332 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4a5a0f2b6654f332;
   valaddr_reg:x3; val_offset:710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 710*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4a9 and fm2 == 0x0497b1ff517ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4a90497b1ff517ff;
   valaddr_reg:x3; val_offset:712*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 712*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4ac and fm2 == 0x45bd9e7f25dff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4ac45bd9e7f25dff;
   valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4af and fm2 == 0x972d061eef57f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4af972d061eef57f;
   valaddr_reg:x3; val_offset:716*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 716*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4b2 and fm2 == 0xfcf847a6ab2de and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4b2fcf847a6ab2de;
   valaddr_reg:x3; val_offset:718*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 718*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4b6 and fm2 == 0x3e1b2cc82afcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4b63e1b2cc82afcb;
   valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4b9 and fm2 == 0x8da1f7fa35bbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4b98da1f7fa35bbe;
   valaddr_reg:x3; val_offset:722*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 722*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4bc and fm2 == 0xf10a75f8c32ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4bcf10a75f8c32ad;
   valaddr_reg:x3; val_offset:724*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 724*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4c0 and fm2 == 0x36a689bb79fac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4c036a689bb79fac;
   valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4c3 and fm2 == 0x84502c2a58797 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4c384502c2a58797;
   valaddr_reg:x3; val_offset:728*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 728*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4c6 and fm2 == 0xe5643734ee97d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4c6e5643734ee97d;
   valaddr_reg:x3; val_offset:730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 730*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4ca and fm2 == 0x2f5ea281151ee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4ca2f5ea281151ee;
   valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4cd and fm2 == 0x7b364b215a66a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4cd7b364b215a66a;
   valaddr_reg:x3; val_offset:734*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 734*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4d0 and fm2 == 0xda03dde9b1004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4d0da03dde9b1004;
   valaddr_reg:x3; val_offset:736*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 736*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4d4 and fm2 == 0x28426ab20ea03 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4d428426ab20ea03;
   valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4d7 and fm2 == 0x7253055e92483 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4d77253055e92483;
   valaddr_reg:x3; val_offset:740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 740*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4da and fm2 == 0xcee7c6b636da4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4dacee7c6b636da4;
   valaddr_reg:x3; val_offset:742*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 742*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4de and fm2 == 0x2150dc31e2486 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4de2150dc31e2486;
   valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4e1 and fm2 == 0x69a5133e5ada8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4e169a5133e5ada8;
   valaddr_reg:x3; val_offset:746*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 746*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4e4 and fm2 == 0xc40e580df1912 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4e4c40e580df1912;
   valaddr_reg:x3; val_offset:748*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 748*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4e8 and fm2 == 0x1a88f708b6fab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4e81a88f708b6fab;
   valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4eb and fm2 == 0x612b34cae4b96 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4eb612b34cae4b96;
   valaddr_reg:x3; val_offset:752*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 752*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4ee and fm2 == 0xb97601fd9de7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4eeb97601fd9de7c;
   valaddr_reg:x3; val_offset:754*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 754*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4f2 and fm2 == 0x13e9c13e82b0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4f213e9c13e82b0d;
   valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4f5 and fm2 == 0x58e4318e235d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4f558e4318e235d1;
   valaddr_reg:x3; val_offset:758*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 758*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4f8 and fm2 == 0xaf1d3df1ac345 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4f8af1d3df1ac345;
   valaddr_reg:x3; val_offset:760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 760*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4fc and fm2 == 0x0d7246b70ba0b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4fc0d7246b70ba0b;
   valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x4ff and fm2 == 0x50ced864ce88e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x4ff50ced864ce88e;
   valaddr_reg:x3; val_offset:764*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 764*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x502 and fm2 == 0xa5028e7e022b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x502a5028e7e022b1;
   valaddr_reg:x3; val_offset:766*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 766*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x506 and fm2 == 0x0721990ec15af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5060721990ec15af;
   valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x509 and fm2 == 0x48e9ff5271b1a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x50948e9ff5271b1a;
   valaddr_reg:x3; val_offset:770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 770*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x50c and fm2 == 0x9b247f270e1e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x50c9b247f270e1e1;
   valaddr_reg:x3; val_offset:772*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 772*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x510 and fm2 == 0x00f6cf7868d2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x51000f6cf7868d2d;
   valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x513 and fm2 == 0x4134835683078 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5134134835683078;
   valaddr_reg:x3; val_offset:776*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 776*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x516 and fm2 == 0x9181a42c23c96 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5169181a42c23c96;
   valaddr_reg:x3; val_offset:778*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 778*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x519 and fm2 == 0xf5e20d372cbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x519f5e20d372cbbb;
   valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x51d and fm2 == 0x39ad48427bf55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x51d39ad48427bf55;
   valaddr_reg:x3; val_offset:782*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 782*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x520 and fm2 == 0x88189a531af2a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x52088189a531af2a;
   valaddr_reg:x3; val_offset:784*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 784*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x523 and fm2 == 0xea1ec0e7e1af5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x523ea1ec0e7e1af5;
   valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x527 and fm2 == 0x32533890ed0d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x52732533890ed0d9;
   valaddr_reg:x3; val_offset:788*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 788*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x52a and fm2 == 0x7ee806b52850f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x52a7ee806b52850f;
   valaddr_reg:x3; val_offset:790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 790*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x52d and fm2 == 0xdea2086272653 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x52ddea2086272653;
   valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x531 and fm2 == 0x2b25453d877f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5312b25453d877f4;
   valaddr_reg:x3; val_offset:794*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 794*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x534 and fm2 == 0x75ee968ce95f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x53475ee968ce95f1;
   valaddr_reg:x3; val_offset:796*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 796*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x537 and fm2 == 0xd36a3c3023b6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x537d36a3c3023b6d;
   valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x53b and fm2 == 0x2422659e16524 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x53b2422659e16524;
   valaddr_reg:x3; val_offset:800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 800*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x53e and fm2 == 0x6d2aff059be6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x53e6d2aff059be6d;
   valaddr_reg:x3; val_offset:802*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 802*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x541 and fm2 == 0xc875bec702e09 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x541c875bec702e09;
   valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x545 and fm2 == 0x1d49973c61cc5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5451d49973c61cc5;
   valaddr_reg:x3; val_offset:806*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 806*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x548 and fm2 == 0x649bfd0b7a3f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x548649bfd0b7a3f7;
   valaddr_reg:x3; val_offset:808*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 808*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x54b and fm2 == 0xbdc2fc4e58cf4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x54bbdc2fc4e58cf4;
   valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x54f and fm2 == 0x1699ddb0f7819 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x54f1699ddb0f7819;
   valaddr_reg:x3; val_offset:812*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 812*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x552 and fm2 == 0x5c40551d3561f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5525c40551d3561f;
   valaddr_reg:x3; val_offset:814*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 814*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x555 and fm2 == 0xb3506a6482ba7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x555b3506a6482ba7;
   valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x559 and fm2 == 0x1012427ed1b48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5591012427ed1b48;
   valaddr_reg:x3; val_offset:818*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 818*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x55c and fm2 == 0x5416d31e8621a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x55c5416d31e8621a;
   valaddr_reg:x3; val_offset:820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 820*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x55f and fm2 == 0xa91c87e627aa1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x55fa91c87e627aa1;
   valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x563 and fm2 == 0x09b1d4efd8ca4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x56309b1d4efd8ca4;
   valaddr_reg:x3; val_offset:824*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 824*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x566 and fm2 == 0x4c1e4a2bcefce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5664c1e4a2bcefce;
   valaddr_reg:x3; val_offset:826*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 826*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x569 and fm2 == 0x9f25dcb6c2bc1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5699f25dcb6c2bc1;
   valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x56d and fm2 == 0x0377a9f239b59 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x56d0377a9f239b59;
   valaddr_reg:x3; val_offset:830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 830*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x570 and fm2 == 0x4455946ec822f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5704455946ec822f;
   valaddr_reg:x3; val_offset:832*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 832*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x573 and fm2 == 0x956af98a7a2ba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x573956af98a7a2ba;
   valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x576 and fm2 == 0xfac5b7ed18b69 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x576fac5b7ed18b69;
   valaddr_reg:x3; val_offset:836*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 836*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x57a and fm2 == 0x3cbb92f42f722 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x57a3cbb92f42f722;
   valaddr_reg:x3; val_offset:838*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 838*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x57d and fm2 == 0x8bea77b13b4ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x57d8bea77b13b4ea;
   valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x580 and fm2 == 0xeee5159d8a225 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x580eee5159d8a225;
   valaddr_reg:x3; val_offset:842*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 842*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x584 and fm2 == 0x354f2d8276557 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x584354f2d8276557;
   valaddr_reg:x3; val_offset:844*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 844*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x587 and fm2 == 0x82a2f8e313ead and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x58782a2f8e313ead;
   valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x58a and fm2 == 0xe34bb71bd8e58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x58ae34bb71bd8e58;
   valaddr_reg:x3; val_offset:848*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 848*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x58e and fm2 == 0x2e0f5271678f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x58e2e0f5271678f7;
   valaddr_reg:x3; val_offset:850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 850*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x591 and fm2 == 0x7993270dc1735 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5917993270dc1735;
   valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x594 and fm2 == 0xd7f7f0d131d02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x594d7f7f0d131d02;
   valaddr_reg:x3; val_offset:854*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 854*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x598 and fm2 == 0x26faf682bf221 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x59826faf682bf221;
   valaddr_reg:x3; val_offset:856*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 856*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x59b and fm2 == 0x70b9b4236eea9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x59b70b9b4236eea9;
   valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x59e and fm2 == 0xcce8212c4aa54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x59ecce8212c4aa54;
   valaddr_reg:x3; val_offset:860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 860*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5a2 and fm2 == 0x201114bbaea74 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5a2201114bbaea74;
   valaddr_reg:x3; val_offset:862*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 862*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5a5 and fm2 == 0x681559ea9a511 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5a5681559ea9a511;
   valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5a8 and fm2 == 0xc21ab06540e56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5a8c21ab06540e56;
   valaddr_reg:x3; val_offset:866*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 866*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5ac and fm2 == 0x1950ae3f488f6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5ac1950ae3f488f6;
   valaddr_reg:x3; val_offset:868*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 868*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5af and fm2 == 0x5fa4d9cf1ab33 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5af5fa4d9cf1ab33;
   valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5b2 and fm2 == 0xb78e1042e1600 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5b2b78e1042e1600;
   valaddr_reg:x3; val_offset:872*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 872*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5b6 and fm2 == 0x12b8ca29ccdc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5b612b8ca29ccdc0;
   valaddr_reg:x3; val_offset:874*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 874*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5b9 and fm2 == 0x5766fcb440130 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5b95766fcb440130;
   valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5bc and fm2 == 0xad40bbe15017c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5bcad40bbe15017c;
   valaddr_reg:x3; val_offset:878*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 878*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5c0 and fm2 == 0x0c48756cd20ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5c00c48756cd20ed;
   valaddr_reg:x3; val_offset:880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 880*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5c3 and fm2 == 0x4f5a92c806929 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5c34f5a92c806929;
   valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5c6 and fm2 == 0xa331377a08373 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5c6a331377a08373;
   valaddr_reg:x3; val_offset:884*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 884*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5ca and fm2 == 0x05fec2ac45228 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5ca05fec2ac45228;
   valaddr_reg:x3; val_offset:886*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 886*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5cd and fm2 == 0x477e7357566b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5cd477e7357566b2;
   valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5d0 and fm2 == 0x995e102d2c05e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5d0995e102d2c05e;
   valaddr_reg:x3; val_offset:890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 890*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5d3 and fm2 == 0xffb5943877076 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5d3ffb5943877076;
   valaddr_reg:x3; val_offset:892*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 892*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5d7 and fm2 == 0x3fd17ca34a64a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5d73fd17ca34a64a;
   valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5da and fm2 == 0x8fc5dbcc1cfdc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5da8fc5dbcc1cfdc;
   valaddr_reg:x3; val_offset:896*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 896*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5dd and fm2 == 0xf3b752bf243d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5ddf3b752bf243d3;
   valaddr_reg:x3; val_offset:898*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 898*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5e1 and fm2 == 0x385293b776a64 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5e1385293b776a64;
   valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5e4 and fm2 == 0x866738a5544fd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5e4866738a5544fd;
   valaddr_reg:x3; val_offset:902*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 902*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5e7 and fm2 == 0xe80106cea963c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5e7e80106cea963c;
   valaddr_reg:x3; val_offset:904*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 904*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5eb and fm2 == 0x3100a44129de5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5eb3100a44129de5;
   valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5ee and fm2 == 0x7d40cd517455f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5ee7d40cd517455f;
   valaddr_reg:x3; val_offset:908*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 908*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5f1 and fm2 == 0xdc9100a5d16b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5f1dc9100a5d16b7;
   valaddr_reg:x3; val_offset:910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 910*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0x29daa067a2e32 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5f529daa067a2e32;
   valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x745148818b9bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5f8745148818b9bf;
   valaddr_reg:x3; val_offset:914*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 914*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5fb and fm2 == 0xd1659aa1ee82e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5fbd1659aa1ee82e;
   valaddr_reg:x3; val_offset:916*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 916*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x5ff and fm2 == 0x22df80a53511d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x5ff22df80a53511d;
   valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x602 and fm2 == 0x6b9760ce82564 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6026b9760ce82564;
   valaddr_reg:x3; val_offset:920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 920*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x605 and fm2 == 0xc67d390222ebd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x605c67d390222ebd;
   valaddr_reg:x3; val_offset:922*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 922*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x609 and fm2 == 0x1c0e43a155d36 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6091c0e43a155d36;
   valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x60c and fm2 == 0x6311d489ab484 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x60c6311d489ab484;
   valaddr_reg:x3; val_offset:926*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 926*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x60f and fm2 == 0xbbd649ac161a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x60fbbd649ac161a5;
   valaddr_reg:x3; val_offset:928*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 928*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x613 and fm2 == 0x1565ee0b8dd07 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6131565ee0b8dd07;
   valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x616 and fm2 == 0x5abf698e71449 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6165abf698e71449;
   valaddr_reg:x3; val_offset:932*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 932*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x619 and fm2 == 0xb16f43f20d95b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x619b16f43f20d95b;
   valaddr_reg:x3; val_offset:934*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 934*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x61d and fm2 == 0x0ee58a77487d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x61d0ee58a77487d9;
   valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x620 and fm2 == 0x529eed151a9cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x620529eed151a9cf;
   valaddr_reg:x3; val_offset:938*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 938*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x623 and fm2 == 0xa746a85a61443 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x623a746a85a61443;
   valaddr_reg:x3; val_offset:940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 940*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x627 and fm2 == 0x088c29387ccaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x627088c29387ccaa;
   valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x62a and fm2 == 0x4aaf33869bfd4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x62a4aaf33869bfd4;
   valaddr_reg:x3; val_offset:944*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 944*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x62d and fm2 == 0x9d5b006842fc9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x62d9d5b006842fc9;
   valaddr_reg:x3; val_offset:946*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 946*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x631 and fm2 == 0x0258e04129dde and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6310258e04129dde;
   valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x634 and fm2 == 0x42ef185174555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x63442ef185174555;
   valaddr_reg:x3; val_offset:950*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 950*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x637 and fm2 == 0x93aade65d16aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x63793aade65d16aa;
   valaddr_reg:x3; val_offset:952*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 952*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x63a and fm2 == 0xf89595ff45c55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x63af89595ff45c55;
   valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x63e and fm2 == 0x3b5d7dbf8b9b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x63e3b5d7dbf8b9b5;
   valaddr_reg:x3; val_offset:956*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 956*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x641 and fm2 == 0x8a34dd2f6e822 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6418a34dd2f6e822;
   valaddr_reg:x3; val_offset:958*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 958*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x644 and fm2 == 0xecc2147b4a22b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x644ecc2147b4a22b;
   valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x648 and fm2 == 0x33f94ccd0e55b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x64833f94ccd0e55b;
   valaddr_reg:x3; val_offset:962*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 962*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x64b and fm2 == 0x80f7a00051eb2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x64b80f7a00051eb2;
   valaddr_reg:x3; val_offset:964*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 964*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x64e and fm2 == 0xe13588006665e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x64ee13588006665e;
   valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x652 and fm2 == 0x2cc175003fffb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6522cc175003fffb;
   valaddr_reg:x3; val_offset:968*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 968*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x655 and fm2 == 0x77f1d2404fff9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x65577f1d2404fff9;
   valaddr_reg:x3; val_offset:970*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 970*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x658 and fm2 == 0xd5ee46d063ff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x658d5ee46d063ff8;
   valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x65c and fm2 == 0x25b4ec423e7fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x65c25b4ec423e7fb;
   valaddr_reg:x3; val_offset:974*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 974*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x65f and fm2 == 0x6f222752ce1fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x65f6f222752ce1fa;
   valaddr_reg:x3; val_offset:976*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 976*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x662 and fm2 == 0xcaeab12781a78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x662caeab12781a78;
   valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x666 and fm2 == 0x1ed2aeb8b108b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6661ed2aeb8b108b;
   valaddr_reg:x3; val_offset:980*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 980*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x669 and fm2 == 0x66875a66dd4ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x66966875a66dd4ae;
   valaddr_reg:x3; val_offset:982*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 982*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x66c and fm2 == 0xc0293100949d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x66cc0293100949d9;
   valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x670 and fm2 == 0x1819bea05ce28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6701819bea05ce28;
   valaddr_reg:x3; val_offset:986*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 986*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x673 and fm2 == 0x5e202e48741b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6735e202e48741b2;
   valaddr_reg:x3; val_offset:988*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 988*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x676 and fm2 == 0xb5a839da9121e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x676b5a839da9121e;
   valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x67a and fm2 == 0x118924289ab53 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x67a118924289ab53;
   valaddr_reg:x3; val_offset:992*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 992*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x67d and fm2 == 0x55eb6d32c1628 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x67d55eb6d32c1628;
   valaddr_reg:x3; val_offset:994*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 994*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x680 and fm2 == 0xab66487f71bb1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x680ab66487f71bb1;
   valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x684 and fm2 == 0x0b1fed4fa714f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6840b1fed4fa714f;
   valaddr_reg:x3; val_offset:998*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 998*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x687 and fm2 == 0x4de7e8a390da3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6874de7e8a390da3;
   valaddr_reg:x3; val_offset:1000*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1000*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x68a and fm2 == 0xa161e2cc7510b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x68aa161e2cc7510b;
   valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x68e and fm2 == 0x04dd2dbfc92a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x68e04dd2dbfc92a7;
   valaddr_reg:x3; val_offset:1004*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1004*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x691 and fm2 == 0x4614792fbb751 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6914614792fbb751;
   valaddr_reg:x3; val_offset:1006*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1006*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x694 and fm2 == 0x9799977baa525 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6949799977baa525;
   valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x697 and fm2 == 0xfd7ffd5a94e6e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x697fd7ffd5a94e6e;
   valaddr_reg:x3; val_offset:1010*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1010*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x69b and fm2 == 0x3e6ffe589d105 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x69b3e6ffe589d105;
   valaddr_reg:x3; val_offset:1012*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1012*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x69e and fm2 == 0x8e0bfdeec4546 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x69e8e0bfdeec4546;
   valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6a1 and fm2 == 0xf18efd6a75698 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6a1f18efd6a75698;
   valaddr_reg:x3; val_offset:1016*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1016*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6a5 and fm2 == 0x36f95e628961f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6a536f95e628961f;
   valaddr_reg:x3; val_offset:1018*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1018*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6a8 and fm2 == 0x84b7b5fb2bba7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6a884b7b5fb2bba7;
   valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6ab and fm2 == 0xe5e5a379f6a90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6abe5e5a379f6a90;
   valaddr_reg:x3; val_offset:1022*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1022*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6af and fm2 == 0x2faf862c3a29a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6af2faf862c3a29a;
   valaddr_reg:x3; val_offset:1024*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1024*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6b2 and fm2 == 0x7b9b67b748b41 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6b27b9b67b748b41;
   valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6b5 and fm2 == 0xda8241a51ae11 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6b5da8241a51ae11;
   valaddr_reg:x3; val_offset:1028*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1028*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6b9 and fm2 == 0x2891690730cca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6b92891690730cca;
   valaddr_reg:x3; val_offset:1030*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1030*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6bc and fm2 == 0x72b5c348fcffd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6bc72b5c348fcffd;
   valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6bf and fm2 == 0xcf63341b3c3fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6bfcf63341b3c3fc;
   valaddr_reg:x3; val_offset:1034*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1034*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6c3 and fm2 == 0x219e009105a7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6c3219e009105a7e;
   valaddr_reg:x3; val_offset:1036*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1036*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6c6 and fm2 == 0x6a0580b54711d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6c66a0580b54711d;
   valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6c9 and fm2 == 0xc486e0e298d64 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6c9c486e0e298d64;
   valaddr_reg:x3; val_offset:1040*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1040*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6cd and fm2 == 0x1ad44c8d9f85f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6cd1ad44c8d9f85f;
   valaddr_reg:x3; val_offset:1042*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1042*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6d0 and fm2 == 0x61895fb107676 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6d061895fb107676;
   valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6d3 and fm2 == 0xb9ebb79d49414 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6d3b9ebb79d49414;
   valaddr_reg:x3; val_offset:1046*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1046*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6d7 and fm2 == 0x143352c24dc8d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6d7143352c24dc8d;
   valaddr_reg:x3; val_offset:1048*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1048*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6da and fm2 == 0x59402772e13b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6da59402772e13b0;
   valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6dd and fm2 == 0xaf90314f9989c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6ddaf90314f9989c;
   valaddr_reg:x3; val_offset:1052*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1052*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6e1 and fm2 == 0x0dba1ed1bff61 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6e10dba1ed1bff61;
   valaddr_reg:x3; val_offset:1054*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1054*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6e4 and fm2 == 0x5128a6862ff3a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6e45128a6862ff3a;
   valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6e7 and fm2 == 0xa572d027bbf08 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6e7a572d027bbf08;
   valaddr_reg:x3; val_offset:1058*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1058*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6eb and fm2 == 0x0767c218d5765 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6eb0767c218d5765;
   valaddr_reg:x3; val_offset:1060*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1060*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6ee and fm2 == 0x4941b29f0ad3e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6ee4941b29f0ad3e;
   valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6f1 and fm2 == 0x9b921f46cd88e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6f19b921f46cd88e;
   valaddr_reg:x3; val_offset:1064*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1064*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6f5 and fm2 == 0x013b538c40759 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6f5013b538c40759;
   valaddr_reg:x3; val_offset:1066*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1066*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6f8 and fm2 == 0x418a286f5092f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6f8418a286f5092f;
   valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6fb and fm2 == 0x91ecb28b24b7a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6fb91ecb28b24b7a;
   valaddr_reg:x3; val_offset:1070*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1070*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x6fe and fm2 == 0xf667df2dede59 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x6fef667df2dede59;
   valaddr_reg:x3; val_offset:1072*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1072*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x702 and fm2 == 0x3a00eb7cb4af8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7023a00eb7cb4af8;
   valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x705 and fm2 == 0x8881265be1db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7058881265be1db6;
   valaddr_reg:x3; val_offset:1076*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1076*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x708 and fm2 == 0xeaa16ff2da523 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x708eaa16ff2da523;
   valaddr_reg:x3; val_offset:1078*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1078*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x70c and fm2 == 0x32a4e5f7c8736 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x70c32a4e5f7c8736;
   valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x70f and fm2 == 0x7f4e1f75ba903 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x70f7f4e1f75ba903;
   valaddr_reg:x3; val_offset:1082*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1082*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x712 and fm2 == 0xdf21a75329344 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x712df21a75329344;
   valaddr_reg:x3; val_offset:1084*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1084*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x716 and fm2 == 0x2b750893f9c0b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7162b750893f9c0b;
   valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x719 and fm2 == 0x76524ab8f830d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x71976524ab8f830d;
   valaddr_reg:x3; val_offset:1088*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1088*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x71c and fm2 == 0xd3e6dd67363d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x71cd3e6dd67363d1;
   valaddr_reg:x3; val_offset:1090*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1090*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x720 and fm2 == 0x24704a6081e62 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x72024704a6081e62;
   valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x723 and fm2 == 0x6d8c5cf8a25fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7236d8c5cf8a25fb;
   valaddr_reg:x3; val_offset:1094*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1094*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x726 and fm2 == 0xc8ef7436caf7a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x726c8ef7436caf7a;
   valaddr_reg:x3; val_offset:1096*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1096*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x72a and fm2 == 0x1d95a8a23edac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x72a1d95a8a23edac;
   valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x72d and fm2 == 0x64fb12cace917 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x72d64fb12cace917;
   valaddr_reg:x3; val_offset:1100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1100*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x730 and fm2 == 0xbe39d77d8235d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x730be39d77d8235d;
   valaddr_reg:x3; val_offset:1102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1102*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x734 and fm2 == 0x16e426ae7161a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x73416e426ae7161a;
   valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x737 and fm2 == 0x5c9d305a0dba1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7375c9d305a0dba1;
   valaddr_reg:x3; val_offset:1106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1106*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x73a and fm2 == 0xb3c47c7091289 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x73ab3c47c7091289;
   valaddr_reg:x3; val_offset:1108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1108*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x73e and fm2 == 0x105acdc65ab95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x73e105acdc65ab95;
   valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x741 and fm2 == 0x54718137f167b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x74154718137f167b;
   valaddr_reg:x3; val_offset:1112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1112*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x744 and fm2 == 0xa98de185edc19 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x744a98de185edc19;
   valaddr_reg:x3; val_offset:1114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1114*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x748 and fm2 == 0x09f8acf3b4990 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x74809f8acf3b4990;
   valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x74b and fm2 == 0x4c76d830a1bf4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x74b4c76d830a1bf4;
   valaddr_reg:x3; val_offset:1118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1118*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x74e and fm2 == 0x9f948e3cca2f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x74e9f948e3cca2f1;
   valaddr_reg:x3; val_offset:1120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1120*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x752 and fm2 == 0x03bcd8e5fe5d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x75203bcd8e5fe5d7;
   valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x755 and fm2 == 0x44ac0f1f7df4c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x75544ac0f1f7df4c;
   valaddr_reg:x3; val_offset:1124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1124*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x758 and fm2 == 0x95d712e75d71f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x75895d712e75d71f;
   valaddr_reg:x3; val_offset:1126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1126*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x75b and fm2 == 0xfb4cd7a134ce7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x75bfb4cd7a134ce7;
   valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x75f and fm2 == 0x3d1006c4c1010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x75f3d1006c4c1010;
   valaddr_reg:x3; val_offset:1130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1130*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x762 and fm2 == 0x8c540875f1414 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7628c540875f1414;
   valaddr_reg:x3; val_offset:1132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1132*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x765 and fm2 == 0xef690a936d91a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x765ef690a936d91a;
   valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x769 and fm2 == 0x35a1a69c247b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x76935a1a69c247b0;
   valaddr_reg:x3; val_offset:1136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1136*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x76c and fm2 == 0x830a10432d99c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x76c830a10432d99c;
   valaddr_reg:x3; val_offset:1138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1138*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x76f and fm2 == 0xe3cc9453f9003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x76fe3cc9453f9003;
   valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x773 and fm2 == 0x2e5fdcb47ba02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7732e5fdcb47ba02;
   valaddr_reg:x3; val_offset:1142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1142*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x776 and fm2 == 0x79f7d3e19a882 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x77679f7d3e19a882;
   valaddr_reg:x3; val_offset:1144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1144*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x779 and fm2 == 0xd875c8da012a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x779d875c8da012a3;
   valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x77d and fm2 == 0x27499d8840ba6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x77d27499d8840ba6;
   valaddr_reg:x3; val_offset:1148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1148*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x780 and fm2 == 0x711c04ea50e8f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x780711c04ea50e8f;
   valaddr_reg:x3; val_offset:1150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1150*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x783 and fm2 == 0xcd630624e5233 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x783cd630624e5233;
   valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x787 and fm2 == 0x205de3d70f360 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x787205de3d70f360;
   valaddr_reg:x3; val_offset:1154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1154*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x78a and fm2 == 0x68755cccd3038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x78a68755cccd3038;
   valaddr_reg:x3; val_offset:1156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1156*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x78d and fm2 == 0xc292b40007c46 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x78dc292b40007c46;
   valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x791 and fm2 == 0x199bb08004dac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x791199bb08004dac;
   valaddr_reg:x3; val_offset:1160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1160*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x794 and fm2 == 0x60029ca006117 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x79460029ca006117;
   valaddr_reg:x3; val_offset:1162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1162*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x797 and fm2 == 0xb80343c80795c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x797b80343c80795c;
   valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x79b and fm2 == 0x13020a5d04bda and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x79b13020a5d04bda;
   valaddr_reg:x3; val_offset:1166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1166*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x79e and fm2 == 0x57c28cf445ed0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x79e57c28cf445ed0;
   valaddr_reg:x3; val_offset:1168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1168*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7a1 and fm2 == 0xadb3303157684 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7a1adb3303157684;
   valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7a5 and fm2 == 0x0c8ffe1ed6a13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7a50c8ffe1ed6a13;
   valaddr_reg:x3; val_offset:1172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1172*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7a8 and fm2 == 0x4fb3fda68c497 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7a84fb3fda68c497;
   valaddr_reg:x3; val_offset:1174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1174*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7ab and fm2 == 0xa3a0fd102f5bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7aba3a0fd102f5bd;
   valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7af and fm2 == 0x06449e2a1d996 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7af06449e2a1d996;
   valaddr_reg:x3; val_offset:1178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1178*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7b2 and fm2 == 0x47d5c5b4a4ffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7b247d5c5b4a4ffc;
   valaddr_reg:x3; val_offset:1180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1180*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7b5 and fm2 == 0x99cb3721ce3fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7b599cb3721ce3fb;
   valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7b9 and fm2 == 0x001f027520e7d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7b9001f027520e7d;
   valaddr_reg:x3; val_offset:1184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1184*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7bc and fm2 == 0x4026c3126921c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7bc4026c3126921c;
   valaddr_reg:x3; val_offset:1186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1186*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7bf and fm2 == 0x903073d7036a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7bf903073d7036a3;
   valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7c2 and fm2 == 0xf43c90ccc444b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7c2f43c90ccc444b;
   valaddr_reg:x3; val_offset:1190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1190*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7c6 and fm2 == 0x38a5da7ffaaaf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7c638a5da7ffaaaf;
   valaddr_reg:x3; val_offset:1192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1192*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7c9 and fm2 == 0x86cf511ff955b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7c986cf511ff955b;
   valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7cc and fm2 == 0xe8832567f7ab2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7cce8832567f7ab2;
   valaddr_reg:x3; val_offset:1196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1196*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7d0 and fm2 == 0x3151f760facaf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7d03151f760facaf;
   valaddr_reg:x3; val_offset:1198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1198*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7d3 and fm2 == 0x7da67539397db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7d37da67539397db;
   valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7d6 and fm2 == 0xdd10128787dd1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7d6dd10128787dd1;
   valaddr_reg:x3; val_offset:1202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1202*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7da and fm2 == 0x2a2a0b94b4ea3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7da2a2a0b94b4ea3;
   valaddr_reg:x3; val_offset:1204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1204*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7dd and fm2 == 0x74b48e79e224c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7dd74b48e79e224c;
   valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7e0 and fm2 == 0xd1e1b2185aadf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7e0d1e1b2185aadf;
   valaddr_reg:x3; val_offset:1208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1208*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7e4 and fm2 == 0x232d0f4f38acb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7e4232d0f4f38acb;
   valaddr_reg:x3; val_offset:1210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1210*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7e7 and fm2 == 0x6bf8532306d7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7e76bf8532306d7e;
   valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7ea and fm2 == 0xc6f667ebc88dd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7eac6f667ebc88dd;
   valaddr_reg:x3; val_offset:1214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1214*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7ee and fm2 == 0x1c5a00f35d58a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7ee1c5a00f35d58a;
   valaddr_reg:x3; val_offset:1216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1216*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7f1 and fm2 == 0x6370813034aed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7f16370813034aed;
   valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x7f8 and fm2 == 0x15afe4eda9289 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x7f815afe4eda9289;
   valaddr_reg:x3; val_offset:1220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1220*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x00a and fm2 == 0x5654de2f4c9df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0xa5654de2f4c9df;
   valaddr_reg:x3; val_offset:1222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1222*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x011 and fm2 == 0x0b724d94f3db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x110b724d94f3db6;
   valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x014 and fm2 == 0x4e4ee0fa30d24 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x144e4ee0fa30d24;
   valaddr_reg:x3; val_offset:1226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1226*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0x19c84118490e9 and fs2 == 0 and fe2 == 0x017 and fm2 == 0xa1e29938bd06d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.d ; op1:f30; op2:f29; dest:f31; op1val:0x7f219c84118490e9; op2val:0x17a1e29938bd06d;
   valaddr_reg:x3; val_offset:1228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.d, f31, f30, f29, dyn, 0, 0, x3, 1228*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(61571145160326231,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(91449603569945892,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(106430705114533997,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(121688286131872324,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(136347758969043669,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(151294400294979978,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(166600002231872493,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(181249145013640052,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(196162133782299217,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(211425670022595301,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(226153685985481167,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(241033810928674371,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(256256267387138004,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(271061307940959717,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(285909339304596318,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(301091678788614197,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(315971938669521697,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(330788628646872553,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(345931791398033252,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(360885507653047966,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(375671590807854150,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(390776495030834007,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(405801946026187799,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(420558139705852700,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(435625682084905955,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(450721186537622126,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(465448191276719370,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(480479247480063052,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(495643163512234672,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(510341663426558811,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(525337088598936114,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(540567812814169695,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(555238475985551351,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(570199105229250549,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(585495071810755577,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(600138550662857464,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(615065199507456949,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(630345810842678435,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(645041811002579174,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(659935275863682847,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(675174407219534567,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(689948182340753616,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(704809240967974660,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(720007864531473094,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(734857591763354555,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(749687003677799594,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(764846068850328021,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(779769968065278245,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(794568474986777966,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(809688908918124746,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(824685241710290558,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(839453567974617118,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(854536276084497445,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(869603344791912855,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(884342197758218749,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(899388064245573244,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(914524210995224590,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(929234281443932177,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(944244169784288789,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(959447775559561165,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(974129738080926657,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(989104491512105649,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1004373975242086063,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1019028488615656538,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1033968930612091761,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1049266783387107917,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1063930455847393648,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1078837390583336908,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1094093359282738111,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1108835564384801879,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1123709777186670957,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1138924843468479433,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1153743740603529565,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1168585998391654325,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1183761120906282402,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1198654912604795781,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1213465964324810855,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1228602079254301824,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1243569010174947280,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1258349587219073988,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1273447608803704501,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1288485964745963313,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1303236781364417790,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1318297602416958013,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1333405709356886118,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1348127463059645056,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1363151955467565855,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1378328178616155380,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1393021550565305393,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1408010565781215037,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1423253308664825478,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1437918964057716775,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1452873333578303025,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1468181037140644831,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1482819625584064727,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1497740161417811724,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1513013131489467599,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1527723459018553857,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1542610954142496898,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1557842623326897826,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1572630390019587109,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1587485618825362223,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1602676955112053243,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1617540345987948605,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1632364064717387852,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1647516013408659039,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1662453256025966587,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1677246203196484090,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1692359687439103096,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1707369050897633483,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1722131947717641470,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1737207869022123582,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1752287662989660647,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1767021213764249184,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1782060452511956984,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1797209026273445883,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1811913918800554490,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1826917334738912376,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1842133076267932363,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1856809982225236350,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1871778414951338462,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1887059750003338026,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1901709325326067189,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1916643594758950770,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1931933731829527375,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1946611871235637265,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1961512778077487126,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1976761211909271579,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(1991517544888116753,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2006385871074660245,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2021593579087311738,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2036426272977031213,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2051262782117377080,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2066430718822281542,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2081337983914026699,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2096143421720195198,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2111272519257377950,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2126252607788601315,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2141027702494987227,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2156118871157441746,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2171170076328780547,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2185915539101785028,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2200969667847512757,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2216090322862714289,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2230806848200775966,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2245824805152825189,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2261013282281173919,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2275701548405424263,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2290684181340209321,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2305938891000928361,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2320599560236691076,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2335547697060866597,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2350855168370558126,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2365500806078327533,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2380415255294485928,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2395680617094156050,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2410405210133215595,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2425286761294669766,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2440511000525959607,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2455312698380732179,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2470162122535639255,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2485346203008745229,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2500223198535112552,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2515041248660188482,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2530186111596005523,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2545136640004789596,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2559924051428858547,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2575030615988416863,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2590052953852686044,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2604810444670302867,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2619879608471796023,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2634972072757437378,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2649700344232815795,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2664732983856510944,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2679893930975523564,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2694593667936997287,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2709590639418311569,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2724818464304288314,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2739490335529526985,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2754452474840547451,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2769745610045825101,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2784390268638021728,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2799318392157739640,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2814600846836859158,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2829293390726951086,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2844188295700475098,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2859429227196852240,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2874199627054586122,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2889062092041592652,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2904262473554822944,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2919108904630957172,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2933939689943630225,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2949100471863943669,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2964021152176796985,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2978821000307503751,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(2993943110750359337,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3008936300083446138,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3023705936122388952,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3038790281450539598,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3053854280373698161,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3068594412416777741,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3083641877750099344,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3098775026663562362,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3113486346210681753,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3128497795924053119,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3143698474124922831,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3158381656468956099,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3173357934678469812,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3188624559449072624,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3203280264055717101,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3218222195093494824,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3233521909170189106,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3248182091689828351,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3263090480567707647,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3278348266944528894,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3293087063901430079,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3307962696763783567,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3323179538121197554,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3337995106989487352,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3352838751555428917,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3368015607542328003,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3382906148980333242,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3397718554975560040,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3412856362749065666,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3427820119587183641,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3442602019165696800,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3457701693918310376,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3472736950170600945,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3487489058326542189,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3502551493800940872,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3517656573699884365,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3532379588669720224,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3547405657661487177,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3562578924715365165,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3577273528370644985,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3592264083219216887,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3607503939291585594,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3622170797522494281,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3637126670590602267,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3652431555001340817,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3667071318091262069,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3681993322233135762,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3697268127689950007,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3711975013871864322,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3726863942890462339,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3742097404443181988,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3756881810445273670,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3771738439538797784,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3786931526185175054,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3801791635136658697,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3816616721334602827,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3831770379361505118,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3846704416974504346,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3861498699563483649,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3876613853079179905,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3891620086650690449,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3906384287590290037,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3921461839044261650,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3936538576481505899,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3951273400810383110,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3966314231500951752,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3981459820369576573,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(3996165956602045212,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4011170927172103139,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4026383753766685550,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4041061874280005194,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4056031825201126876,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4071310313637464745,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4085961075050052948,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4100896827095260329,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4116188817431241683,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4130863481964717668,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4145765836670164989,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4161016080331446268,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4175769019879984893,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4190638759995822781,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4205848235420092268,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4220677615413028004,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4235515505343700428,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4250685168036513088,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4265589196900930376,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4280395983135152154,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4295526766207401504,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4310503694360374996,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4325280105891031689,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4340372920583824683,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4355421039448278843,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4370167788182485258,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4385223524379715404,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4400341165423349904,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4415058946582897844,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4430078473311804897,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4445264007108545196,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4459953499620965719,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4474937665540963501,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4490189500854408684,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4504851367734868839,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4519801001614916161,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4535110344244447441,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4549752473227517315,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4564668384412300516,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4579935573672751645,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4594656740222846802,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4609539719088036134,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4624765742948994928,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4639564094623138214,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4654414913019974159,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4669600736295491219,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4684474464067337756,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4699293875756797347,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4714440440648093964,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4729387777890353831,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4744176518967141201,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4759284745592597542,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4774303967083307927,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4789062756389907581,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4804133543302629277,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4819222964254717122,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4833952503785742834,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4848986728478997103,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4864144703592586373,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4878845678889653159,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4893844198290458768,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4909069120827389274,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4923742201364730545,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4938705852315879261,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4953996153195916442,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4968641992756963265,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4983571592487743921,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(4998855892430691869,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5013544976451105490,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5028441323036995463,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5043684056548830056,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5058451077627581217,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5073314950439163882,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5088517091733114340,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5103360223220398254,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5118192383361758938,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5133354883817931921,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5148272341876048602,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5163073532612895633,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5178197321313426549,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5193187363913372105,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5207958311091123772,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5223044295342785482,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5238105221284360799,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5252846633736433398,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5267895699580996276,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5283025847535881904,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5297738417482408540,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5312751430195038963,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5327949177772297944,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5342633581209502350,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5357611385785479986,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5372875148618962943,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5387532045699407359,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5402475467329435007,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5417777044646441694,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5432433733590495179,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5447343578124868542,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5462603184072307373,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5477338569334300588,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5492215623736199063,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5507434242018044285,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5522246479153025518,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5537091511941178986,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5552270103205842948,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5567157390998039043,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5581971152679019651,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5597110655059717540,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5612071234509350022,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5626854457999732136,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5641955787642181906,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5656987940976029611,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5671741342014655382,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5686805393592409724,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5701907443297561357,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5716631720848143825,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5731659368065844037,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5746829675946097163,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5761525512590387342,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5776517608675222193,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5791754574929597871,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5806422637251336986,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5821380015432983009,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5836682077755837741,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5851323016715710584,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5866246490695023766,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5881523133448637371,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5896226574699052885,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5911116939105775402,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5926352194893650677,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5941133236704825561,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5955991267544565007,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5971186106373711443,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(5986042929982502900,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6000869385073235441,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6016024754216123245,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6030955583486649636,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6045751202884992621,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6060868027412393481,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6075871127836957893,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6090636634254451703,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6105715817555791092,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6120789495279220761,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6135525594488854047,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6150568018780367783,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6165710619647220552,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6180418000880427546,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6195424527701408417,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6210634436325510308,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6225313772659863502,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6240285243357277121,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6255560882213067609,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6270212830950883887,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6285150067152626362,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6300443912684276585,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6315115098725873442,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6330018902802937066,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6345270958178738725,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6360020500762551639,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6374891656280358573,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6390102900957089368,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6404928963601660151,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6419768235760817973,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6434939626239237378,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6449840415505642017,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6464648551572369065,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6479781021935250004,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6494754786418289268,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6509532516144751889,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6524626978582302294,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6539672007925336310,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6554420043960134451,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6569477389283104256,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6584592013215976896,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6599311051505008944,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6614332149645771132,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6629514737045283053,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6644205457223215401,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6659191157725102963,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6674440115697504808,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6689103181470066354,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6704054313965240414,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6719365529863680118,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6734004146467546698,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6748921521143664604,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6764190539768284115,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6778908276260563556,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6793792684316509437,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6809020494665913916,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6823815496674221541,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6838667710765155679,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6853855278658295479,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6868725735272099378,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6883546509944076735,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6898694778563520558,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6913638921315504413,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6928428993429906788,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6943538883852381885,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6958554985723682102,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6973315074871702660,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(6988387486586200485,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7003473861034958087,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7018204669942371401,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7033240481356110171,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7048395481368791001,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7063097696291236303,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7078097765223765059,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7093319782388714666,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7107994073497714644,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7122959237663436745,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7138246701266148830,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7152893723026081109,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7167824800505468586,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7183110947634175061,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7197796568181291445,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7212694357881055266,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7227938895285232171,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7242702534065841499,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7257567816168316594,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7272771719075882590,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7287611547537637371,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7302445083939635193,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7317609304721604600,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7332523537168852987,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7347326071910228474,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7362451540616419960,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7377438433205751947,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7392210692887925934,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7407298317770115545,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7422356167529451048,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7437098861724123570,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7452149529746936350,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7467276673617603411,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7481990495265887784,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7497005072605715377,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7512199886506979663,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7526885512309181859,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7541864844841406731,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7557125742756926119,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7571783833553188689,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7586728747327989029,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7602032189825961582,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7616685381555704069,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7631596683262707014,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7646858110675932824,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7661590080689575455,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7676468558111620007,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7691688955168647824,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7706497857100161690,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7721344279556426561,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7736524607906229777,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7751408638663789770,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7766223757442535421,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7781364956195439612,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7796322354947185278,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7811106903728353565,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7826209889984286052,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7841238937167853663,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7855993632435762806,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7871059301800121364,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7886158318155390093,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7900883859601757104,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7915913086689187996,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7931080432313696097,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7945777503231213370,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7960771142157582088,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7976005215584081765,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(7990674483250769214,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8005633368113600654,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8020932605409232729,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8035574721463781679,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8050499666811439994,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8065778148775485017,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8080478141506341624,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8095369942796213686,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8110606994688025891,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8125384668804319030,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8140244102850259203,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8155440695687156548,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8170294230531415051,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8185122055940702989,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8200279137981785041,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8215206755568197218,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8230003713168254459,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8245122210447798138,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8260122174462094764,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8274888987717200151,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8289969804565554013,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8305040419388331546,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8319777794806569889,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8334821814358839945,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8349961424111774613,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8364670051642447483,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8379678136335260697,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8394885123949676944,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8409565677371399156,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8424538669428024049,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8439811455735293399,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8454464593034993484,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8469403314939090719,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8484699017598684391,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8499366721525387280,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8514271976483656724,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8529525845460965658,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8544271987541952432,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8559144559935936924,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8574357575707889667,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8589180317548919298,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8604020973376219266,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8619194093439816355,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8634091639734012838,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8648901127039159951,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8664035286450065971,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8679005883968058208,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8693784933263290424,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8708881045161802822,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8723922981765533100,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8738672306441707799,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8753731262566398300,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8768842866246044634,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8783563162973920976,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8798585834163238532,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8813765472096709139,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8828457421218825367,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8843444657900942781,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8858690735535413654,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8873355001448779772,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8888307634119959547,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8903618594274938493,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8918255825804759580,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8933174665496508067,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8948445515390665803,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8963159818252561071,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8978045656987833691,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(8993275255686396594,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9008066904540032175,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9022920515778746331,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9038109830106611153,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9052977012155305635,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9067799151229411916,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9082949125351516895,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9097890070286011083,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9112681474824367486,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9127793030776785117,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9142806009779443082,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9157567400122731245,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(9187724763103662729,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(46554756351838687,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(76762562557853110,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(91449603569945892,64,FLEN)
NAN_BOXED(9160775208091816169,64,FLEN)
NAN_BOXED(106430705114533997,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 206*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
