
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f8, rs2==f30, rs3==f28, rd==f8,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x412 and fm2 == 0xffffe00000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f8; op2:f30; op3:f28; dest:f8; op1val:0x1; op2val:0x412ffffe00000000;
op3val:0x1; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f8, f8, f30, f28, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f12, rs2==f0, rs3==f4, rd==f26,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x2800000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f12; op2:f0; op3:f4; dest:f26; op1val:0x3; op2val:0xc042800000000000;
op3val:0x2f; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f26, f12, f0, f4, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f31, rs2==f31, rs3==f13, rd==f31,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x412 and fm2 == 0x5559555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f31; op2:f31; op3:f13; dest:f31; op1val:0x3; op2val:0x3;
op3val:0x60; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f31, f31, f13, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rs3 == rd, rs1==f9, rs2==f9, rs3==f9, rd==f9,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 0 and fe2 == 0x430 and fm2 == 0xfffffffffff4a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f9; op2:f9; op3:f9; dest:f9; op1val:0x4; op2val:0x4;
op3val:0x4; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f9, f9, f9, f9, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f19, rs2==f19, rs3==f21, rd==f20,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x6000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f19; op2:f19; op3:f21; dest:f20; op1val:0x4; op2val:0x4;
op3val:0x3c; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f20, f19, f19, f21, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f27, rs2==f24, rs3==f25, rd==f24,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x430 and fm2 == 0x99999998ccc75 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f27; op2:f24; op3:f25; dest:f24; op1val:0x5; op2val:0x43099999998ccc75;
op3val:0x36; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f24, f27, f24, f25, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f0, rs2==f6, rs3==f6, rd==f18,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x430 and fm2 == 0x999999999993d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f0; op2:f6; op3:f6; dest:f18; op1val:0x5; op2val:0xc30999999999993d;
op3val:0xc30999999999993d; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f18, f0, f6, f6, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f3, rs2==f22, rs3==f3, rd==f29,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000006 and fs2 == 0 and fe2 == 0x430 and fm2 == 0x5555555552a58 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f3; op2:f22; op3:f3; dest:f29; op1val:0x6; op2val:0x4305555555552a58;
op3val:0x6; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f29, f3, f22, f3, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f28, rs2==f13, rs3==f10, rd==f10,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8924924924925 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f28; op2:f13; op3:f10; dest:f10; op1val:0x7; op2val:0x4018924924924925;
op3val:0x15; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f10, f28, f13, f10, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rd == rs2 == rs3 != rs1, rs1==f22, rs2==f23, rs3==f23, rd==f23,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 0 and fe2 == 0x430 and fm2 == 0x2492492489233 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f22; op2:f23; op3:f23; dest:f23; op1val:0x7; op2val:0x4302492492489233;
op3val:0x4302492492489233; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f23, f22, f23, f23, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f1, rs2==f27, rs3==f1, rd==f1,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x410 and fm2 == 0x0002100000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f1; op2:f27; op3:f1; dest:f1; op1val:0x8; op2val:0xc100002100000000;
op3val:0x8; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f1, f1, f27, f1, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 == rs3 != rd, rs1==f20, rs2==f20, rs3==f20, rd==f16,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x40a and fm2 == 0xc67c71c71c71c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f20; op2:f20; op3:f20; dest:f16; op1val:0x9; op2val:0x9;
op3val:0x9; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f16, f20, f20, f20, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f29, rs2==f7, rs3==f27, rd==f0,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 1 and fe2 == 0x404 and fm2 == 0xed55555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f29; op2:f7; op3:f27; dest:f0; op1val:0x9; op2val:0xc04ed55555555555;
op3val:0x2b; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f0, f29, f7, f27, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f23, rs2==f8, rs3==f2, rd==f5,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 1 and fe2 == 0x409 and fm2 == 0xc838e38e38e39 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f23; op2:f8; op3:f2; dest:f5; op1val:0x9; op2val:0xc09c838e38e38e39;
op3val:0x28; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f5, f23, f8, f2, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f16, rs2==f4, rs3==f29, rd==f2,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x42f and fm2 == 0x3b13b13b138cb and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f16; op2:f4; op3:f29; dest:f2; op1val:0xd; op2val:0xc2f3b13b13b138cb;
op3val:0x26; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f2, f16, f4, f29, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f25, rs2==f5, rs3==f7, rd==f28,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000e and fs2 == 0 and fe2 == 0x405 and fm2 == 0x0f6db6db6db6e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f25; op2:f5; op3:f7; dest:f28; op1val:0xe; op2val:0x4050f6db6db6db6e;
op3val:0x4a; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f28, f25, f5, f7, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f15, rs2==f2, rs3==f17, rd==f22,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5555555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f15; op2:f2; op3:f17; dest:f22; op1val:0xf; op2val:0x4015555555555555;
op3val:0x30; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f22, f15, f2, f17, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f13, rs2==f21, rs3==f15, rd==f30,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 0 and fe2 == 0x42f and fm2 == 0x11111110fffd3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f13; op2:f21; op3:f15; dest:f30; op1val:0xf; op2val:0x42f11111110fffd3;
op3val:0x29; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f30, f13, f21, f15, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f26, rs2==f3, rs3==f12, rd==f21,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x42f and fm2 == 0x111111111114d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f26; op2:f3; op3:f12; dest:f21; op1val:0xf; op2val:0xc2f111111111114d;
op3val:0x59; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f21, f26, f3, f12, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f7, rs2==f14, rs3==f11, rd==f25,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000011 and fs2 == 0 and fe2 == 0x40d and fm2 == 0xe1dde1e1e1e1e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f7; op2:f14; op3:f11; dest:f25; op1val:0x11; op2val:0x40de1dde1e1e1e1e;
op3val:0x11; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f25, f7, f14, f11, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f11, rs2==f26, rs3==f22, rd==f3,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000011 and fs2 == 1 and fe2 == 0x42e and fm2 == 0xe1e1e1e1de246 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f11; op2:f26; op3:f22; dest:f3; op1val:0x11; op2val:0xc2ee1e1e1e1de246;
op3val:0x36; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f3, f11, f26, f22, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f2, rs2==f11, rs3==f8, rd==f15,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 0 and fe2 == 0x40b and fm2 == 0xc6d5555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f2; op2:f11; op3:f8; dest:f15; op1val:0x12; op2val:0x40bc6d5555555555;
op3val:0x50; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f15, f2, f11, f8, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f30, rs2==f10, rs3==f18, rd==f7,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000013 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f10; op3:f18; dest:f7; op1val:0x13; op2val:0x4018000000000000;
op3val:0xf; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f7, f30, f10, f18, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f5, rs2==f1, rs3==f26, rd==f17,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000013 and fs2 == 1 and fe2 == 0x402 and fm2 == 0xe86bca1af286c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f5; op2:f1; op3:f26; dest:f17; op1val:0x13; op2val:0xc02e86bca1af286c;
op3val:0x22; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f17, f5, f1, f26, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f14, rs2==f12, rs3==f16, rd==f6,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000013 and fs2 == 1 and fe2 == 0x42e and fm2 == 0xaf286bc9e50f9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f14; op2:f12; op3:f16; dest:f6; op1val:0x13; op2val:0xc2eaf286bc9e50f9;
op3val:0x15; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f6, f14, f12, f16, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f17, rs2==f28, rs3==f19, rd==f12,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000015 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x86186186184e0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f17; op2:f28; op3:f19; dest:f12; op1val:0x15; op2val:0x42e86186186184e0;
op3val:0x4c; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f12, f17, f28, f19, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f10, rs2==f16, rs3==f0, rd==f11,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000016 and fs2 == 0 and fe2 == 0x410 and fm2 == 0x745c9745d1746 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f10; op2:f16; op3:f0; dest:f11; op1val:0x16; op2val:0x410745c9745d1746;
op3val:0x16; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f11, f10, f16, f0, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f4, rs2==f18, rs3==f30, rd==f13,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000016 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x745d1745d16d0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f4; op2:f18; op3:f30; dest:f13; op1val:0x16; op2val:0x42e745d1745d16d0;
op3val:0x4f; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f13, f4, f18, f30, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f18, rs2==f29, rs3==f24, rd==f27,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x745d1745d1746 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f18; op2:f29; op3:f24; dest:f27; op1val:0x16; op2val:0xc00745d1745d1746;
op3val:0x43; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f27, f18, f29, f24, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f24, rs2==f17, rs3==f5, rd==f14,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000017 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x2c8590b21642d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f24; op2:f17; op3:f5; dest:f14; op1val:0x17; op2val:0x4032c8590b21642d;
op3val:0x51; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f14, f24, f17, f5, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f6, rs2==f25, rs3==f31, rd==f4,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000018 and fs2 == 0 and fe2 == 0x405 and fm2 == 0x5380000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f6; op2:f25; op3:f31; dest:f4; op1val:0x18; op2val:0x4055380000000000;
op3val:0xc; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f4, f6, f25, f31, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f21, rs2==f15, rs3==f14, rd==f19,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000018 and fs2 == 0 and fe2 == 0x408 and fm2 == 0x5345555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f21; op2:f15; op3:f14; dest:f19; op1val:0x18; op2val:0x4085345555555555;
op3val:0x63; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f19, f21, f15, f14, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000018 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x555555552aa57 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x18; op2val:0x42e555555552aa57;
op3val:0x3e; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x47ae147a8f566 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x19; op2val:0x42e47ae147a8f566;
op3val:0x47; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6276276276276 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1a; op2val:0xc006276276276276;
op3val:0x46; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 1 and fe2 == 0x40c and fm2 == 0x3b22762762762 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1a; op2val:0xc0c3b22762762762;
op3val:0x2f; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 1 and fe2 == 0x42e and fm2 == 0x3b13b139d89ee and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1a; op2val:0xc2e3b13b139d89ee;
op3val:0x12; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 0 and fe2 == 0x40f and fm2 == 0x2f67425ed097b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1b; op2val:0x40f2f67425ed097b;
op3val:0x1c; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2f684bda12f68 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1b; op2val:0xbff2f684bda12f68;
op3val:0x18; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x42e and fm2 == 0x1a7b9611a34de and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1d; op2val:0x42e1a7b9611a34de;
op3val:0x16; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x42e and fm2 == 0x1a7b9611a76bf and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1d; op2val:0x42e1a7b9611a76bf;
op3val:0x62; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001f and fs2 == 1 and fe2 == 0x42e and fm2 == 0x08421084210e0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1f; op2val:0xc2e08421084210e0;
op3val:0x5c; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xff80000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x20; op2val:0x404ff80000000000;
op3val:0x2; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x20; op2val:0xbffa000000000000;
op3val:0x54; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000021 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x22e8ba2e8ba2f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x21; op2val:0xc0022e8ba2e8ba2f;
op3val:0x2a; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 0 and fe2 == 0x40f and fm2 == 0xe1df000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x22; op2val:0x40fe1df000000000;
op3val:0x63; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000023 and fs2 == 0 and fe2 == 0x42d and fm2 == 0xd41d41d41d337 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x23; op2val:0x42dd41d41d41d337;
op3val:0x5d; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 0 and fe2 == 0x40e and fm2 == 0xc719000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x24; op2val:0x40ec719000000000;
op3val:0x3f; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x1c71c71c71c72 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x24; op2val:0xbfc1c71c71c71c72;
op3val:0x26; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xc71c71c71c75c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x24; op2val:0xc2dc71c71c71c75c;
op3val:0x35; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1af286bca1af3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x26; op2val:0xbff1af286bca1af3;
op3val:0x29; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3ca1af286bca2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x26; op2val:0xbff3ca1af286bca2;
op3val:0x2c; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xaf286bca19482 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x26; op2val:0xc2daf286bca19482;
op3val:0x2e; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000027 and fs2 == 0 and fe2 == 0x42d and fm2 == 0xa41a41a41a388 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x27; op2val:0x42da41a41a41a388;
op3val:0x50; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000027 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc41a41a41a41a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x27; op2val:0xc03c41a41a41a41a;
op3val:0x4e; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x18f9c18f9c190 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x29; op2val:0xbff18f9c18f9c190;
op3val:0x3e; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x40a and fm2 == 0x8faed44aed44b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x29; op2val:0xc0a8faed44aed44b;
op3val:0x18; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002c and fs2 == 1 and fe2 == 0x42d and fm2 == 0x745d1745d0c0f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2c; op2val:0xc2d745d1745d0c0f;
op3val:0x4b; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002d and fs2 == 1 and fe2 == 0x403 and fm2 == 0x793e93e93e93f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2d; op2val:0xc03793e93e93e93f;
op3val:0x24; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002d and fs2 == 1 and fe2 == 0x406 and fm2 == 0x6d27d27d27d28 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2d; op2val:0xc066d27d27d27d28;
op3val:0x17; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002d and fs2 == 1 and fe2 == 0x42d and fm2 == 0x6c16c166666de and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2d; op2val:0xc2d6c16c166666de;
op3val:0x55; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002d and fs2 == 1 and fe2 == 0x42d and fm2 == 0x6c16c16c16c54 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2d; op2val:0xc2d6c16c16c16c54;
op3val:0x34; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 1 and fe2 == 0x408 and fm2 == 0x649bd37a6f4df and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2e; op2val:0xc08649bd37a6f4df;
op3val:0x28; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 1 and fe2 == 0x40f and fm2 == 0x642da6f4de9bd and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2e; op2val:0xc0f642da6f4de9bd;
op3val:0x34; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x40c and fm2 == 0x5c8c6cefa8d9e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2f; op2val:0x40c5c8c6cefa8d9e;
op3val:0x48; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 1 and fe2 == 0x408 and fm2 == 0x5d10572620ae5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2f; op2val:0xc085d10572620ae5;
op3val:0x2b; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x555555554004f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x30; op2val:0xc2d555555554004f;
op3val:0x3c; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x5555555555550 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x30; op2val:0xc2d5555555555550;
op3val:0x1; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000031 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xeb1a1f58d0fac and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x31; op2val:0x400eb1a1f58d0fac;
op3val:0x45; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000031 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x20a72f0539783 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x31; op2val:0x40220a72f0539783;
op3val:0x46; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000031 and fs2 == 0 and fe2 == 0x42d and fm2 == 0x4e5e0a7053908 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x31; op2val:0x42d4e5e0a7053908;
op3val:0x55; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000032 and fs2 == 0 and fe2 == 0x408 and fm2 == 0x477851eb851ec and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x32; op2val:0x408477851eb851ec;
op3val:0x15; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000032 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6b851eb851eb8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x32; op2val:0xbff6b851eb851eb8;
op3val:0x27; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000035 and fs2 == 0 and fe2 == 0x406 and fm2 == 0x33c609a90e7d9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x35; op2val:0x40633c609a90e7d9;
op3val:0x24; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000035 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x3521cfb2b2bd0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x35; op2val:0xc2d3521cfb2b2bd0;
op3val:0x49; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000036 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x638e38e38e38e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x36; op2val:0xc00638e38e38e38e;
op3val:0x16; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000039 and fs2 == 0 and fe2 == 0x42d and fm2 == 0x1f7047dc11df6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39; op2val:0x42d1f7047dc11df6;
op3val:0x50; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf75270d0456c8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3b; op2val:0xbfef75270d0456c8;
op3val:0x3f; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x5b1e5f75270d0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3b; op2val:0xbff5b1e5f75270d0;
op3val:0x50; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003c and fs2 == 0 and fe2 == 0x42d and fm2 == 0x1111110ffffcf and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3c; op2val:0x42d1111110ffffcf;
op3val:0x2d; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6222222222222 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3c; op2val:0xc006222222222222;
op3val:0x25; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb47582192e29f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3d; op2val:0x3fcb47582192e29f;
op3val:0x34; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd60864b8a7de7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3d; op2val:0x400d60864b8a7de7;
op3val:0x20; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x714fbcda3ac11 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3d; op2val:0xbff714fbcda3ac11;
op3val:0x47; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 1 and fe2 == 0x409 and fm2 == 0x089ef7bdef7be and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3e; op2val:0xc09089ef7bdef7be;
op3val:0x5a; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 1 and fe2 == 0x40b and fm2 == 0x0851ce739ce74 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3e; op2val:0xc0b0851ce739ce74;
op3val:0x3d; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 1 and fe2 == 0x40c and fm2 == 0x0846f7bdef7be and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3e; op2val:0xc0c0846f7bdef7be;
op3val:0x25; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x405 and fm2 == 0x01e79e79e79e8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f; op2val:0x40501e79e79e79e8;
op3val:0x23; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xea80000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x40; op2val:0x402ea80000000000;
op3val:0x2c; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x406 and fm2 == 0xf6b52b52b52b5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x41; op2val:0x406f6b52b52b52b5;
op3val:0x2f; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4ec4ec4ec4ec5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x41; op2val:0xc014ec4ec4ec4ec5;
op3val:0x53; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000042 and fs2 == 0 and fe2 == 0x405 and fm2 == 0xec3e0f83e0f84 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x42; op2val:0x405ec3e0f83e0f84;
op3val:0x47; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000043 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xe939503d22635 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x43; op2val:0xc08e939503d22635;
op3val:0x13; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 1 and fe2 == 0x409 and fm2 == 0xe1f7878787878 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x44; op2val:0xc09e1f7878787878;
op3val:0x16; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000046 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xd41d41d41cd44 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x46; op2val:0xc2cd41d41d41cd44;
op3val:0x42; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xcd85689039a58 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x47; op2val:0x42ccd85689039a58;
op3val:0x52; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xcd85689039aec and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x47; op2val:0xc2ccd85689039aec;
op3val:0x30; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xc0e070373ba48 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x49; op2val:0xc2cc0e070373ba48;
op3val:0x3e; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x42c and fm2 == 0xb4e81b4e81ad7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4b; op2val:0x42cb4e81b4e81ad7;
op3val:0x43; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x2c5f92c5f92c6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4b; op2val:0xbfc2c5f92c5f92c6;
op3val:0x2; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004c and fs2 == 1 and fe2 == 0x403 and fm2 == 0xaf5e50d79435e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4c; op2val:0xc03af5e50d79435e;
op3val:0x1; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004c and fs2 == 1 and fe2 == 0x42c and fm2 == 0xaf286bca1af53 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4c; op2val:0xc2caf286bca1af53;
op3val:0x1b; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004d and fs2 == 1 and fe2 == 0x404 and fm2 == 0xb298ef606a63c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4d; op2val:0xc04b298ef606a63c;
op3val:0x57; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004d and fs2 == 1 and fe2 == 0x42c and fm2 == 0xa98ef6063bdd1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4d; op2val:0xc2ca98ef6063bdd1;
op3val:0x31; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004e and fs2 == 1 and fe2 == 0x42c and fm2 == 0xa41a41a0d20e4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4e; op2val:0xc2ca41a41a0d20e4;
op3val:0xc; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 0 and fe2 == 0x42c and fm2 == 0x9ec8e94a8818d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4f; op2val:0x42c9ec8e94a8818d;
op3val:0xa; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 1 and fe2 == 0x42c and fm2 == 0x9ec8e95103278 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4f; op2val:0xc2c9ec8e95103278;
op3val:0x27; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x40a and fm2 == 0x9982ccccccccd and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x50; op2val:0x40a9982ccccccccd;
op3val:0x39; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x999999999999a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x50; op2val:0xbfd999999999999a;
op3val:0x21; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000051 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x948b0fcd6d005 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x51; op2val:0x42c948b0fcd6d005;
op3val:0x5c; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x93a9a3784a063 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x53; op2val:0xc0393a9a3784a063;
op3val:0x2d; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x8acb90f6b2ead and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x53; op2val:0xc2c8acb90f6b2ead;
op3val:0x45; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x86186186182e6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x54; op2val:0x42c86186186182e6;
op3val:0x18; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5555555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x54; op2val:0xbfd5555555555555;
op3val:0x17; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6db6db6db6db7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x54; op2val:0xbfe6db6db6db6db7;
op3val:0x44; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x409 and fm2 == 0x817e7e7e7e7e8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x55; op2val:0x409817e7e7e7e7e8;
op3val:0x5; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000056 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x7d05f417d059c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x56; op2val:0x42c7d05f417d059c;
op3val:0x36; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000056 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2ca6b29aca6b3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x56; op2val:0xbff2ca6b29aca6b3;
op3val:0x24; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000057 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf43ad9bf43ada and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x57; op2val:0xbfef43ad9bf43ada;
op3val:0x51; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000057 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x9b37e875b37e8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x57; op2val:0xc019b37e875b37e8;
op3val:0x2e; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x745d1745d0b7f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x58; op2val:0x42c745d1745d0b7f;
op3val:0x18; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x408 and fm2 == 0x6fc2284508a11 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0x4086fc2284508a11;
op3val:0x4c; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe33c678cf19e3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0xbfde33c678cf19e3;
op3val:0x1a; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8fd1fa3f47e9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0xbfee8fd1fa3f47e9;
op3val:0x5e; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x05c0b81702e06 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0xbff05c0b81702e06;
op3val:0x5f; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x08a1142284509 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0xbff08a1142284509;
op3val:0x5c; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x406 and fm2 == 0x7181702e05c0c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0xc067181702e05c0c;
op3val:0x3a; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x40c and fm2 == 0x702f19e33c679 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0xc0c702f19e33c679;
op3val:0xb; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x40c and fm2 == 0x680f087087087 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5b; op2val:0x40c680f087087087;
op3val:0x56; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005b and fs2 == 1 and fe2 == 0x405 and fm2 == 0x6a05a05a05a06 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5b; op2val:0xc056a05a05a05a06;
op3val:0x2c; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005b and fs2 == 1 and fe2 == 0x40b and fm2 == 0x681a8ca8ca8cb and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5b; op2val:0xc0b681a8ca8ca8cb;
op3val:0x17; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005d and fs2 == 1 and fe2 == 0x40d and fm2 == 0x605bd3f4fd3f5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5d; op2val:0xc0d605bd3f4fd3f5;
op3val:0x56; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 0 and fe2 == 0x404 and fm2 == 0x5a3677d46cefb and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5e; op2val:0x4045a3677d46cefb;
op3val:0x1c; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x40e and fm2 == 0x5c99ae4c415ca and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5e; op2val:0xc0e5c99ae4c415ca;
op3val:0x36; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005f and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xda46102b1da46 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f; op2val:0xbfdda46102b1da46;
op3val:0x2e; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005f and fs2 == 1 and fe2 == 0x404 and fm2 == 0x5d79435e50d79 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f; op2val:0xc045d79435e50d79;
op3val:0x35; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000062 and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4e50fac687d63 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x62; op2val:0x4084e50fac687d63;
op3val:0xa; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000062 and fs2 == 0 and fe2 == 0x40a and fm2 == 0x4e514e5e0a72f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x62; op2val:0x40a4e514e5e0a72f;
op3val:0x28; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000001 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0x7ffffffffffff and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000001; op2val:0xbd07ffffffffffff;
op3val:0x10000000000031; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000003 and fs2 == 0 and fe2 == 0x3d9 and fm2 == 0xff5bffffffffa and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000003; op2val:0x3d9ff5bffffffffa;
op3val:0x10000000000029; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000000082e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000003; op2val:0xc00000000000082e;
op3val:0x10000000000062; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000002001a and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000004; op2val:0xc00000000002001a;
op3val:0x1000000000003c; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000013 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000005; op2val:0xc000000000000013;
op3val:0x10000000000020; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000001ffffb and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000005; op2val:0xc0000000001ffffb;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000006 and fs2 == 0 and fe2 == 0x3e0 and fm2 == 0xffff6fffffff4 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000006; op2val:0x3e0ffff6fffffff4;
op3val:0x10000000000012; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000e and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0x3ffffffffffef and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000000e; op2val:0xbd03ffffffffffef;
op3val:0x1000000000002a; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000010 and fs2 == 0 and fe2 == 0x3dd and fm2 == 0xffeabffffffe0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000010; op2val:0x3ddffeabffffffe0;
op3val:0x10000000000055; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000011 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000001003 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000011; op2val:0xc000000000001003;
op3val:0x10000000000027; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000014 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000000003a and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000014; op2val:0xc00000000000003a;
op3val:0x1000000000005d; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x3d0 and fm2 == 0xfffffffffffc6 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000001d; op2val:0x3d0fffffffffffc6;
op3val:0x10000000000040; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000020 and fs2 == 0 and fe2 == 0x3df and fm2 == 0xfffd9ffffffc0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000020; op2val:0x3dffffd9ffffffc0;
op3val:0x10000000000026; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000002 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000020; op2val:0xc000000000000002;
op3val:0x1000000000003d; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000021 and fs2 == 0 and fe2 == 0x3d8 and fm2 == 0xfe4ffffffffbe and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000021; op2val:0x3d8fe4ffffffffbe;
op3val:0x10000000000036; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000022 and fs2 == 0 and fe2 == 0x3d6 and fm2 == 0xf41ffffffffbe and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000022; op2val:0x3d6f41ffffffffbe;
op3val:0x1000000000005f; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000025 and fs2 == 0 and fe2 == 0x3db and fm2 == 0xffecfffffffb6 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000025; op2val:0x3dbffecfffffffb6;
op3val:0x10000000000013; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000025 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000000002e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000025; op2val:0xc00000000000002e;
op3val:0x10000000000026; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000025 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000001ffd and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000025; op2val:0xc000000000001ffd;
op3val:0x10000000000045; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000026 and fs2 == 0 and fe2 == 0x3d2 and fm2 == 0x83fffffffffc6 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000026; op2val:0x3d283fffffffffc6;
op3val:0x1000000000003e; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000027 and fs2 == 0 and fe2 == 0x3d7 and fm2 == 0xfbfffffffffb3 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000027; op2val:0x3d7fbfffffffffb3;
op3val:0x10000000000040; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000028 and fs2 == 0 and fe2 == 0x3da and fm2 == 0xff81fffffffb0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000028; op2val:0x3daff81fffffffb0;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002a and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x03fffffffffd5 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000002a; op2val:0xbd103fffffffffd5;
op3val:0x10000000000051; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000003ffeb and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000002d; op2val:0xc00000000003ffeb;
op3val:0x1000000000002f; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000032 and fs2 == 0 and fe2 == 0x3d4 and fm2 == 0xf57ffffffff9e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000032; op2val:0x3d4f57ffffffff9e;
op3val:0x10000000000015; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000033 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffff9e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000033; op2val:0xbfffffffffffff9e;
op3val:0x10000000000002; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000037 and fs2 == 0 and fe2 == 0x3cd and fm2 == 0xfffffffffff92 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000037; op2val:0x3cdfffffffffff92;
op3val:0x10000000000038; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000000e5 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000003d; op2val:0xc0000000000000e5;
op3val:0x10000000000043; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x3dc and fm2 == 0xfffdfffffff84 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000003e; op2val:0x3dcfffdfffffff84;
op3val:0x10000000000004; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000003e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffffcc and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000003e; op2val:0xbfffffffffffffcc;
op3val:0x10000000000045; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffffc6 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000003f; op2val:0xbfffffffffffffc6;
op3val:0x10000000000023; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000067 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000040; op2val:0xc000000000000067;
op3val:0x1000000000004e; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000046 and fs2 == 1 and fe2 == 0x3ce and fm2 == 0x5ffffffffffa0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000046; op2val:0xbce5ffffffffffa0;
op3val:0x10000000000013; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000048 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffff98 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000048; op2val:0xbfffffffffffff98;
op3val:0x10000000000024; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x3cf and fm2 == 0x0ffffffffffb2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000049; op2val:0xbcf0ffffffffffb2;
op3val:0x10000000000031; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x2bfffffffffaa and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000049; op2val:0xbd12bfffffffffaa;
op3val:0x1000000000004f; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000fffbc and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004c; op2val:0xc0000000000fffbc;
op3val:0x10000000000011; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004d and fs2 == 0 and fe2 == 0x3d5 and fm2 == 0xecbffffffff6c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004d; op2val:0x3d5ecbffffffff6c;
op3val:0x1000000000004d; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000007fc4 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004f; op2val:0xc000000000007fc4;
op3val:0x10000000000026; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x3de and fm2 == 0xfff8dffffff60 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000050; op2val:0x3defff8dffffff60;
op3val:0x10000000000039; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000053 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000001d4 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000053; op2val:0xc0000000000001d4;
op3val:0x1000000000004e; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000007ffd8 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000058; op2val:0xc00000000007ffd8;
op3val:0x10000000000060; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x3d3 and fm2 == 0xcefffffffff5b and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000005b; op2val:0x3d3cefffffffff5b;
op3val:0x10000000000031; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000003fbb and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000005b; op2val:0xc000000000003fbb;
op3val:0x1000000000002c; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000000ffc4 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000005e; op2val:0xc00000000000ffc4;
op3val:0x10000000000044; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000060 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000003a8 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000060; op2val:0xc0000000000003a8;
op3val:0x10000000000010; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000000000f and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000007; op2val:0xc00000000000000f;
op3val:0x3f8000000000000b; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000100013 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000008; op2val:0xc000000000100013;
op3val:0x3f80000000000036; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000011 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000010017 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000011; op2val:0xc000000000010017;
op3val:0x3f80000000000051; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000013 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000007f1 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000013; op2val:0xc0000000000007f1;
op3val:0x3f80000000000008; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000015 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000021 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000015; op2val:0xc000000000000021;
op3val:0x3f8000000000005d; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000040006 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000016; op2val:0xc000000000040006;
op3val:0x3f80000000000038; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000017 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffffde and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000017; op2val:0xbfffffffffffffde;
op3val:0x3f8000000000000b; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000001b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000003fed and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000001b; op2val:0xc000000000003fed;
op3val:0x3f80000000000011; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000001f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000091 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000001f; op2val:0xc000000000000091;
op3val:0x3f8000000000005f; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000021 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000001fd and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000021; op2val:0xc0000000000001fd;
op3val:0x3f8000000000003b; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000001fffe4 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000026; op2val:0xc0000000001fffe4;
op3val:0x3f80000000000013; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000028 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xffffffffffff6 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000028; op2val:0xbffffffffffffff6;
op3val:0x3f8000000000003e; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000007ffda and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000030; op2val:0xc00000000007ffda;
op3val:0x3f80000000000014; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000034 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000000000e and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000034; op2val:0xc00000000000000e;
op3val:0x3f80000000000005; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000035 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000001ffd2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000035; op2val:0xc00000000001ffd2;
op3val:0x3f8000000000000e; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000001fd6 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000040; op2val:0xc000000000001fd6;
op3val:0x3f8000000000002b; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000004d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffffea and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000004d; op2val:0xbfffffffffffffea;
op3val:0x3f80000000000045; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000004d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000000c9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000004d; op2val:0xc0000000000000c9;
op3val:0x3f8000000000002d; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000051 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffff74 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000051; op2val:0xbfffffffffffff74;
op3val:0x3f80000000000014; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000052 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000fb0 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000052; op2val:0xc000000000000fb0;
op3val:0x3f80000000000005; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000054 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000003c7 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000054; op2val:0xc0000000000003c7;
op3val:0x3f80000000000036; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000005d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffffa2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000005d; op2val:0xbfffffffffffffa2;
op3val:0x3f80000000000059; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000007fc6 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000005e; op2val:0xc000000000007fc6;
op3val:0x3f80000000000049; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0x8fffffffffffd and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000002; op2val:0xbd08fffffffffffd;
op3val:0x3ff000000000003a; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x17ffffffffffd and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000003; op2val:0xbd117ffffffffffd;
op3val:0x3ff0000000000047; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x3d8 and fm2 == 0xfe3fffffffff6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000005; op2val:0x3d8fe3fffffffff6;
op3val:0x3ff0000000000038; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000006 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x2bffffffffff9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000006; op2val:0xbd12bffffffffff9;
op3val:0x3ff000000000005b; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000000c and fs2 == 0 and fe2 == 0x3d9 and fm2 == 0xff93fffffffe8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000000c; op2val:0x3d9ff93fffffffe8;
op3val:0x3ff000000000001b; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000013 and fs2 == 0 and fe2 == 0x3dc and fm2 == 0xffe9fffffffda and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000013; op2val:0x3dcffe9fffffffda;
op3val:0x3ff000000000002c; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000018 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0x7ffffffffffdc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000018; op2val:0xbd07ffffffffffdc;
op3val:0x3ff0000000000050; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x3d0 and fm2 == 0x7ffffffffffd9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000001a; op2val:0x3d07ffffffffffd9;
op3val:0x3ff0000000000010; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000024 and fs2 == 0 and fe2 == 0x3dd and fm2 == 0xffe97ffffffb8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000024; op2val:0x3ddffe97ffffffb8;
op3val:0x3ff000000000005a; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000028 and fs2 == 0 and fe2 == 0x3df and fm2 == 0xfffa7ffffffb0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000028; op2val:0x3dffffa7ffffffb0;
op3val:0x3ff0000000000058; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000029 and fs2 == 0 and fe2 == 0x3e0 and fm2 == 0xfffebffffffae and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000029; op2val:0x3e0fffebffffffae;
op3val:0x3ff0000000000028; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000002c and fs2 == 0 and fe2 == 0x3da and fm2 == 0xff7bfffffffa8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000002c; op2val:0x3daff7bfffffffa8;
op3val:0x3ff0000000000042; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000030 and fs2 == 0 and fe2 == 0x3d7 and fm2 == 0xfd9ffffffffa0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000030; op2val:0x3d7fd9ffffffffa0;
op3val:0x3ff0000000000026; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x1bfffffffffca and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000031; op2val:0xbd11bfffffffffca;
op3val:0x3ff000000000004b; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000036 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0x67fffffffffb4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000036; op2val:0xbd067fffffffffb4;
op3val:0x3ff000000000002f; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000003c and fs2 == 0 and fe2 == 0x3d2 and fm2 == 0xa5fffffffff9d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000003c; op2val:0x3d2a5fffffffff9d;
op3val:0x3ff000000000002d; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000003c and fs2 == 0 and fe2 == 0x3d5 and fm2 == 0xfc7ffffffff89 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000003c; op2val:0x3d5fc7ffffffff89;
op3val:0x3ff000000000000e; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000042 and fs2 == 0 and fe2 == 0x3d3 and fm2 == 0xd1fffffffff88 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000042; op2val:0x3d3d1fffffffff88;
op3val:0x3ff000000000002e; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x3d4 and fm2 == 0xef7ffffffff7c and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000044; op2val:0x3d4ef7ffffffff7c;
op3val:0x3ff0000000000021; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000046 and fs2 == 0 and fe2 == 0x3de and fm2 == 0xfffe7ffffff74 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000046; op2val:0x3defffe7ffffff74;
op3val:0x3ff000000000000c; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x3d6 and fm2 == 0xf3fffffffff6c and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000004c; op2val:0x3d6f3fffffffff6c;
op3val:0x3ff0000000000060; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004f and fs2 == 0 and fe2 == 0x3db and fm2 == 0xffd0fffffff62 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000004f; op2val:0x3dbffd0fffffff62;
op3val:0x3ff000000000002f; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000061 and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0x7ffffffffff6f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000061; op2val:0x3d17ffffffffff6f;
op3val:0x3ff0000000000020; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000002 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffff6c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000002; op2val:0x3fefffffffffff6c;
op3val:0x7fe0000000000037; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000006 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000006; op2val:0xfff0000000000000;
op3val:0x7fe0000000000048; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000009 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000009; op2val:0xfff0000000000000;
op3val:0x7fe000000000005e; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000000b; op2val:0xfff0000000000000;
op3val:0x7fe0000000000009; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffff2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000000e; op2val:0x3fefffffffffff2a;
op3val:0x7fe0000000000058; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000e and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000000e; op2val:0xfff0000000000000;
op3val:0x7fe0000000000055; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000010 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000010; op2val:0xfff0000000000000;
op3val:0x7fe0000000000010; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000015 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000015; op2val:0xfff0000000000000;
op3val:0x7fe0000000000009; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000016 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffefff56 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000016; op2val:0x3fefffffffefff56;
op3val:0x7fe000000000003e; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000018 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000018; op2val:0xfff0000000000000;
op3val:0x7fe0000000000035; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000018 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000018; op2val:0xfff0000000000000;
op3val:0x7fe000000000004f; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001d and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000001d; op2val:0xfff0000000000000;
op3val:0x7fe000000000004f; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001e and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000001e; op2val:0xfff0000000000000;
op3val:0x7fe0000000000023; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000021 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffff2c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000021; op2val:0x3fefffffffffff2c;
op3val:0x7fe0000000000047; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000026 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffdf3a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000026; op2val:0x3fefffffffffdf3a;
op3val:0x7fe000000000003c; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000026; op2val:0xfff0000000000000;
op3val:0x7fe000000000005b; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000027 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffff7fae and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000027; op2val:0x3fefffffffff7fae;
op3val:0x7fe0000000000001; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000028 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffff7ff88 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000028; op2val:0x3feffffffff7ff88;
op3val:0x7fe0000000000013; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002b and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000002b; op2val:0xfff0000000000000;
op3val:0x7fe000000000005d; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000031; op2val:0xfff0000000000000;
op3val:0x7fe0000000000060; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000032 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffb20 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000032; op2val:0x3feffffffffffb20;
op3val:0x7fe000000000003d; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffff6e8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000033; op2val:0x3feffffffffff6e8;
op3val:0x7fe0000000000058; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000034 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000034; op2val:0xfff0000000000000;
op3val:0x7fe000000000005a; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000037 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffeb6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000037; op2val:0x3feffffffffffeb6;
op3val:0x7fe000000000004d; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000037 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000037; op2val:0xfff0000000000000;
op3val:0x7fe0000000000009; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000037 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000037; op2val:0xfff0000000000000;
op3val:0x7fe000000000004b; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000039 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000039; op2val:0xfff0000000000000;
op3val:0x7fe0000000000014; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffed4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000003b; op2val:0x3feffffffffffed4;
op3val:0x7fe0000000000058; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000003f; op2val:0xfff0000000000000;
op3val:0x7fe0000000000007; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000040 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffbfff28 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000040; op2val:0x3fefffffffbfff28;
op3val:0x7fe000000000002b; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000045 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffff7fff4c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000045; op2val:0x3fefffffff7fff4c;
op3val:0x7fe0000000000014; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000046 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffff30 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000046; op2val:0x3fefffffffffff30;
op3val:0x7fe0000000000019; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000046 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000046; op2val:0xfff0000000000000;
op3val:0x7fe0000000000007; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffe38 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000004a; op2val:0x3feffffffffffe38;
op3val:0x7fe0000000000059; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffdff1e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000004b; op2val:0x3feffffffffdff1e;
op3val:0x7fe0000000000025; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000050 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000050; op2val:0xfff0000000000000;
op3val:0x7fe000000000001c; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffbfede and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000053; op2val:0x3feffffffffbfede;
op3val:0x7fe000000000003d; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000053 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000053; op2val:0xfff0000000000000;
op3val:0x7fe000000000000f; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffcda and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000054; op2val:0x3feffffffffffcda;
op3val:0x7fe000000000003e; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000055; op2val:0xfff0000000000000;
op3val:0x7fe0000000000004; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffdffebe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000059; op2val:0x3fefffffffdffebe;
op3val:0x7fe0000000000047; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffefedc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000059; op2val:0x3feffffffffefedc;
op3val:0x7fe0000000000038; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffda6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000005b; op2val:0x3feffffffffffda6;
op3val:0x7fe0000000000051; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005c and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000005c; op2val:0xfff0000000000000;
op3val:0x7fe0000000000012; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffef10 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000005d; op2val:0x3fefffffffffef10;
op3val:0x7fe000000000001a; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000062 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffbf28 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000062; op2val:0x3fefffffffffbf28;
op3val:0x7fe0000000000009; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x412 and fm2 == 0xffffe00000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1; op2val:0x412ffffe00000000;
op3val:0x1; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x412 and fm2 == 0x5559555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3; op2val:0xc125559555555555;
op3val:0x60; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 0 and fe2 == 0x430 and fm2 == 0xfffffffffff4a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4; op2val:0x430fffffffffff4a;
op3val:0x1a; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x6000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4; op2val:0xc026000000000000;
op3val:0x3c; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x430 and fm2 == 0x99999998ccc75 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5; op2val:0x43099999998ccc75;
op3val:0x36; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x430 and fm2 == 0x999999999993d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5; op2val:0xc30999999999993d;
op3val:0x47; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000006 and fs2 == 0 and fe2 == 0x430 and fm2 == 0x5555555552a58 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x6; op2val:0x4305555555552a58;
op3val:0x3d; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8924924924925 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7; op2val:0x4018924924924925;
op3val:0x15; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 0 and fe2 == 0x430 and fm2 == 0x2492492489233 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7; op2val:0x4302492492489233;
op3val:0x12; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x410 and fm2 == 0x0002100000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x8; op2val:0xc100002100000000;
op3val:0x21; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x40a and fm2 == 0xc67c71c71c71c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x9; op2val:0x40ac67c71c71c71c;
op3val:0x2e; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 858*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(1,64,FLEN)
NAN_BOXED(4697254402757492736,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(13853776141233422336,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(60,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4830560960316755061,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(14053932997172369725,64,FLEN)
NAN_BOXED(14053932997172369725,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4829360000416950872,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4618602260712278309,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4828502171916472883,64,FLEN)
NAN_BOXED(4828502171916472883,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(13907115791054012416,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(13857247665946187093,64,FLEN)
NAN_BOXED(43,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(13879112798512057913,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(14047766529990277323,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(4634475438863211374,64,FLEN)
NAN_BOXED(74,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(4617690817930548565,64,FLEN)
NAN_BOXED(48,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(4823655440888889299,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(14047027477743735117,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(17,64,FLEN)
NAN_BOXED(4674206303082389022,64,FLEN)
NAN_BOXED(17,64,FLEN)
NAN_BOXED(17,64,FLEN)
NAN_BOXED(14046197402518282822,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(4664723527320294741,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(4618441417868443648,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(13848154048935438444,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(14045305048412344569,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(4821210629662672096,64,FLEN)
NAN_BOXED(76,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(4685790668845291334,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(4820898692026144464,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(13837105146021877574,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(4625980052027302957,64,FLEN)
NAN_BOXED(81,64,FLEN)
NAN_BOXED(24,64,FLEN)
NAN_BOXED(4635672964098949120,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(24,64,FLEN)
NAN_BOXED(4649179731438425429,64,FLEN)
NAN_BOXED(99,64,FLEN)
NAN_BOXED(24,64,FLEN)
NAN_BOXED(4820352801162046039,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(4820112609181758822,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(13836790208984998518,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(13890141557966120802,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(14043262930361616878,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(4680073941504297339,64,FLEN)
NAN_BOXED(28,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(13831388455585787752,64,FLEN)
NAN_BOXED(24,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(4819317490903037150,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(4819317490903054015,64,FLEN)
NAN_BOXED(98,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(14042368915548541152,64,FLEN)
NAN_BOXED(92,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(4634195220471218176,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(13833369205421899776,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(33,64,FLEN)
NAN_BOXED(13835672182504077871,64,FLEN)
NAN_BOXED(42,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(4683213579141251072,64,FLEN)
NAN_BOXED(99,64,FLEN)
NAN_BOXED(35,64,FLEN)
NAN_BOXED(4818079555636024119,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(4678238976220332032,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(13817544056731278450,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(14041222838224013148,64,FLEN)
NAN_BOXED(53,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(13831028518773463795,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(13831621097671802018,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(14040801448785187970,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(4817234924497118088,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(13852018726955754522,64,FLEN)
NAN_BOXED(78,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(13830993831228195216,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(13882621748336055371,64,FLEN)
NAN_BOXED(24,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(14039767129253547023,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(13850701808987793727,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(13863999937887501608,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(14039621558350538462,64,FLEN)
NAN_BOXED(85,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(14039621558356503636,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(13872856779192726751,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(13904374405490665917,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(4667357345040993694,64,FLEN)
NAN_BOXED(72,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(13872724048508750565,64,FLEN)
NAN_BOXED(43,64,FLEN)
NAN_BOXED(48,64,FLEN)
NAN_BOXED(14039221238389538895,64,FLEN)
NAN_BOXED(60,64,FLEN)
NAN_BOXED(48,64,FLEN)
NAN_BOXED(14039221238389626192,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(4615821977268850604,64,FLEN)
NAN_BOXED(69,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(4621267656410109827,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(4815726654603475208,64,FLEN)
NAN_BOXED(85,64,FLEN)
NAN_BOXED(50,64,FLEN)
NAN_BOXED(4648972128982946284,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(50,64,FLEN)
NAN_BOXED(13832445967498288824,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(53,64,FLEN)
NAN_BOXED(4639618426729457625,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(53,64,FLEN)
NAN_BOXED(14038654747870440400,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(13836809455137252238,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(57,64,FLEN)
NAN_BOXED(4814901075297508854,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(13830401791260645064,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(13832157431793348816,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(60,64,FLEN)
NAN_BOXED(4814648241633099727,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(60,64,FLEN)
NAN_BOXED(13836784435139322402,64,FLEN)
NAN_BOXED(37,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(4596846288507691679,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(4615451323033877991,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(13832547852211170321,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(13875742113596897214,64,FLEN)
NAN_BOXED(90,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(13884744010368142964,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(13889246865165055934,64,FLEN)
NAN_BOXED(37,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(4634237525490039272,64,FLEN)
NAN_BOXED(35,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(4624818585309544448,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(4643047743813276341,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(13840947377871802053,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(66,64,FLEN)
NAN_BOXED(4638360037243096964,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(13875189770198591029,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(13879565703880145016,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(14036947992863427908,64,FLEN)
NAN_BOXED(66,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(4813459967929719384,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(14036832004784495340,64,FLEN)
NAN_BOXED(48,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(14036609561892469320,64,FLEN)
NAN_BOXED(62,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(4813026945768364759,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(13817824280708092614,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(76,64,FLEN)
NAN_BOXED(13851653968053748574,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(76,64,FLEN)
NAN_BOXED(14036297849157824339,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(77,64,FLEN)
NAN_BOXED(13856214372525188668,64,FLEN)
NAN_BOXED(87,64,FLEN)
NAN_BOXED(77,64,FLEN)
NAN_BOXED(14036199342535327185,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(78,64,FLEN)
NAN_BOXED(14036103361721082084,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(4812637773945667981,64,FLEN)
NAN_BOXED(10,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(14036009810807239288,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(4659422607673445581,64,FLEN)
NAN_BOXED(57,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(13824249416176474522,64,FLEN)
NAN_BOXED(33,64,FLEN)
NAN_BOXED(81,64,FLEN)
NAN_BOXED(4812457601815465989,64,FLEN)
NAN_BOXED(92,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(13851166562985484387,64,FLEN)
NAN_BOXED(45,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(14035658149527760557,64,FLEN)
NAN_BOXED(69,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(4812203430407930598,64,FLEN)
NAN_BOXED(24,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(13823048456275842389,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(13827980970153438647,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(85,64,FLEN)
NAN_BOXED(4654496499683026920,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(86,64,FLEN)
NAN_BOXED(4812043834407847324,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(86,64,FLEN)
NAN_BOXED(13831339967217706675,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(87,64,FLEN)
NAN_BOXED(13830347393602960090,64,FLEN)
NAN_BOXED(81,64,FLEN)
NAN_BOXED(87,64,FLEN)
NAN_BOXED(13842292285718083560,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(88,64,FLEN)
NAN_BOXED(4811891492771400575,64,FLEN)
NAN_BOXED(24,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(4649680890485574161,64,FLEN)
NAN_BOXED(76,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(13825544833597381091,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(13830149637710759913,64,FLEN)
NAN_BOXED(94,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(13830655660140801542,64,FLEN)
NAN_BOXED(95,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(13830706262383805705,64,FLEN)
NAN_BOXED(92,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(13864076464994933772,64,FLEN)
NAN_BOXED(58,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(13891074812412151417,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(91,64,FLEN)
NAN_BOXED(4667559834362081415,64,FLEN)
NAN_BOXED(86,64,FLEN)
NAN_BOXED(91,64,FLEN)
NAN_BOXED(13859441211781175814,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(91,64,FLEN)
NAN_BOXED(13886429062996207819,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(13895300010667398133,64,FLEN)
NAN_BOXED(86,64,FLEN)
NAN_BOXED(94,64,FLEN)
NAN_BOXED(4631287456699174651,64,FLEN)
NAN_BOXED(28,64,FLEN)
NAN_BOXED(94,64,FLEN)
NAN_BOXED(13899737492049106378,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(95,64,FLEN)
NAN_BOXED(13825387167661283910,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(95,64,FLEN)
NAN_BOXED(13854716860234534265,64,FLEN)
NAN_BOXED(53,64,FLEN)
NAN_BOXED(98,64,FLEN)
NAN_BOXED(4649092570832993635,64,FLEN)
NAN_BOXED(10,64,FLEN)
NAN_BOXED(98,64,FLEN)
NAN_BOXED(4658099792526747439,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(13621137072982065151,64,FLEN)
NAN_BOXED(4503599627370545,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(4440537962593124346,64,FLEN)
NAN_BOXED(4503599627370537,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(13835058055282165806,64,FLEN)
NAN_BOXED(4503599627370594,64,FLEN)
NAN_BOXED(4503599627370500,64,FLEN)
NAN_BOXED(13835058055282294810,64,FLEN)
NAN_BOXED(4503599627370556,64,FLEN)
NAN_BOXED(4503599627370501,64,FLEN)
NAN_BOXED(13835058055282163731,64,FLEN)
NAN_BOXED(4503599627370528,64,FLEN)
NAN_BOXED(4503599627370501,64,FLEN)
NAN_BOXED(13835058055284260859,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(4503599627370502,64,FLEN)
NAN_BOXED(4472074391324196852,64,FLEN)
NAN_BOXED(4503599627370514,64,FLEN)
NAN_BOXED(4503599627370510,64,FLEN)
NAN_BOXED(13620011173075222511,64,FLEN)
NAN_BOXED(4503599627370538,64,FLEN)
NAN_BOXED(4503599627370512,64,FLEN)
NAN_BOXED(4458562170807910368,64,FLEN)
NAN_BOXED(4503599627370581,64,FLEN)
NAN_BOXED(4503599627370513,64,FLEN)
NAN_BOXED(13835058055282167811,64,FLEN)
NAN_BOXED(4503599627370535,64,FLEN)
NAN_BOXED(4503599627370516,64,FLEN)
NAN_BOXED(13835058055282163770,64,FLEN)
NAN_BOXED(4503599627370589,64,FLEN)
NAN_BOXED(4503599627370525,64,FLEN)
NAN_BOXED(4400016835940974534,64,FLEN)
NAN_BOXED(4503599627370560,64,FLEN)
NAN_BOXED(4503599627370528,64,FLEN)
NAN_BOXED(4467570667142774720,64,FLEN)
NAN_BOXED(4503599627370534,64,FLEN)
NAN_BOXED(4503599627370528,64,FLEN)
NAN_BOXED(13835058055282163714,64,FLEN)
NAN_BOXED(4503599627370557,64,FLEN)
NAN_BOXED(4503599627370529,64,FLEN)
NAN_BOXED(4436015946145988542,64,FLEN)
NAN_BOXED(4503599627370550,64,FLEN)
NAN_BOXED(4503599627370530,64,FLEN)
NAN_BOXED(4426829526495920062,64,FLEN)
NAN_BOXED(4503599627370591,64,FLEN)
NAN_BOXED(4503599627370533,64,FLEN)
NAN_BOXED(4449555126171991990,64,FLEN)
NAN_BOXED(4503599627370515,64,FLEN)
NAN_BOXED(4503599627370533,64,FLEN)
NAN_BOXED(13835058055282163758,64,FLEN)
NAN_BOXED(4503599627370534,64,FLEN)
NAN_BOXED(4503599627370533,64,FLEN)
NAN_BOXED(13835058055282171901,64,FLEN)
NAN_BOXED(4503599627370565,64,FLEN)
NAN_BOXED(4503599627370534,64,FLEN)
NAN_BOXED(4406842604126207942,64,FLEN)
NAN_BOXED(4503599627370558,64,FLEN)
NAN_BOXED(4503599627370535,64,FLEN)
NAN_BOXED(4431471664588390323,64,FLEN)
NAN_BOXED(4503599627370560,64,FLEN)
NAN_BOXED(4503599627370536,64,FLEN)
NAN_BOXED(4445044173560610736,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(4503599627370538,64,FLEN)
NAN_BOXED(13623459241539928021,64,FLEN)
NAN_BOXED(4503599627370577,64,FLEN)
NAN_BOXED(4503599627370541,64,FLEN)
NAN_BOXED(13835058055282425835,64,FLEN)
NAN_BOXED(4503599627370543,64,FLEN)
NAN_BOXED(4503599627370546,64,FLEN)
NAN_BOXED(4417846516496990110,64,FLEN)
NAN_BOXED(4503599627370517,64,FLEN)
NAN_BOXED(4503599627370547,64,FLEN)
NAN_BOXED(13835058055282163614,64,FLEN)
NAN_BOXED(4503599627370498,64,FLEN)
NAN_BOXED(4503599627370551,64,FLEN)
NAN_BOXED(4386506037058862994,64,FLEN)
NAN_BOXED(4503599627370552,64,FLEN)
NAN_BOXED(4503599627370557,64,FLEN)
NAN_BOXED(13835058055282163941,64,FLEN)
NAN_BOXED(4503599627370563,64,FLEN)
NAN_BOXED(4503599627370558,64,FLEN)
NAN_BOXED(4454059894030466948,64,FLEN)
NAN_BOXED(4503599627370500,64,FLEN)
NAN_BOXED(4503599627370558,64,FLEN)
NAN_BOXED(13835058055282163660,64,FLEN)
NAN_BOXED(4503599627370565,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(13835058055282163654,64,FLEN)
NAN_BOXED(4503599627370531,64,FLEN)
NAN_BOXED(4503599627370560,64,FLEN)
NAN_BOXED(13835058055282163815,64,FLEN)
NAN_BOXED(4503599627370574,64,FLEN)
NAN_BOXED(4503599627370566,64,FLEN)
NAN_BOXED(13611566923773902752,64,FLEN)
NAN_BOXED(4503599627370515,64,FLEN)
NAN_BOXED(4503599627370568,64,FLEN)
NAN_BOXED(13835058055282163608,64,FLEN)
NAN_BOXED(4503599627370532,64,FLEN)
NAN_BOXED(4503599627370569,64,FLEN)
NAN_BOXED(13614663148517719986,64,FLEN)
NAN_BOXED(4503599627370545,64,FLEN)
NAN_BOXED(4503599627370569,64,FLEN)
NAN_BOXED(13624162928981704618,64,FLEN)
NAN_BOXED(4503599627370575,64,FLEN)
NAN_BOXED(4503599627370572,64,FLEN)
NAN_BOXED(13835058055283212220,64,FLEN)
NAN_BOXED(4503599627370513,64,FLEN)
NAN_BOXED(4503599627370573,64,FLEN)
NAN_BOXED(4422196184496471916,64,FLEN)
NAN_BOXED(4503599627370573,64,FLEN)
NAN_BOXED(4503599627370575,64,FLEN)
NAN_BOXED(13835058055282196420,64,FLEN)
NAN_BOXED(4503599627370534,64,FLEN)
NAN_BOXED(4503599627370576,64,FLEN)
NAN_BOXED(4463066741097889632,64,FLEN)
NAN_BOXED(4503599627370553,64,FLEN)
NAN_BOXED(4503599627370579,64,FLEN)
NAN_BOXED(13835058055282164180,64,FLEN)
NAN_BOXED(4503599627370574,64,FLEN)
NAN_BOXED(4503599627370584,64,FLEN)
NAN_BOXED(13835058055282687960,64,FLEN)
NAN_BOXED(4503599627370592,64,FLEN)
NAN_BOXED(4503599627370587,64,FLEN)
NAN_BOXED(4412665617706909531,64,FLEN)
NAN_BOXED(4503599627370545,64,FLEN)
NAN_BOXED(4503599627370587,64,FLEN)
NAN_BOXED(13835058055282180027,64,FLEN)
NAN_BOXED(4503599627370540,64,FLEN)
NAN_BOXED(4503599627370590,64,FLEN)
NAN_BOXED(13835058055282229188,64,FLEN)
NAN_BOXED(4503599627370564,64,FLEN)
NAN_BOXED(4503599627370592,64,FLEN)
NAN_BOXED(13835058055282164648,64,FLEN)
NAN_BOXED(4503599627370512,64,FLEN)
NAN_BOXED(4575657221408423943,64,FLEN)
NAN_BOXED(13835058055282163727,64,FLEN)
NAN_BOXED(4575657221408423947,64,FLEN)
NAN_BOXED(4575657221408423944,64,FLEN)
NAN_BOXED(13835058055283212307,64,FLEN)
NAN_BOXED(4575657221408423990,64,FLEN)
NAN_BOXED(4575657221408423953,64,FLEN)
NAN_BOXED(13835058055282229271,64,FLEN)
NAN_BOXED(4575657221408424017,64,FLEN)
NAN_BOXED(4575657221408423955,64,FLEN)
NAN_BOXED(13835058055282165745,64,FLEN)
NAN_BOXED(4575657221408423944,64,FLEN)
NAN_BOXED(4575657221408423957,64,FLEN)
NAN_BOXED(13835058055282163745,64,FLEN)
NAN_BOXED(4575657221408424029,64,FLEN)
NAN_BOXED(4575657221408423958,64,FLEN)
NAN_BOXED(13835058055282425862,64,FLEN)
NAN_BOXED(4575657221408423992,64,FLEN)
NAN_BOXED(4575657221408423959,64,FLEN)
NAN_BOXED(13835058055282163678,64,FLEN)
NAN_BOXED(4575657221408423947,64,FLEN)
NAN_BOXED(4575657221408423963,64,FLEN)
NAN_BOXED(13835058055282180077,64,FLEN)
NAN_BOXED(4575657221408423953,64,FLEN)
NAN_BOXED(4575657221408423967,64,FLEN)
NAN_BOXED(13835058055282163857,64,FLEN)
NAN_BOXED(4575657221408424031,64,FLEN)
NAN_BOXED(4575657221408423969,64,FLEN)
NAN_BOXED(13835058055282164221,64,FLEN)
NAN_BOXED(4575657221408423995,64,FLEN)
NAN_BOXED(4575657221408423974,64,FLEN)
NAN_BOXED(13835058055284260836,64,FLEN)
NAN_BOXED(4575657221408423955,64,FLEN)
NAN_BOXED(4575657221408423976,64,FLEN)
NAN_BOXED(13835058055282163702,64,FLEN)
NAN_BOXED(4575657221408423998,64,FLEN)
NAN_BOXED(4575657221408423984,64,FLEN)
NAN_BOXED(13835058055282687962,64,FLEN)
NAN_BOXED(4575657221408423956,64,FLEN)
NAN_BOXED(4575657221408423988,64,FLEN)
NAN_BOXED(13835058055282163726,64,FLEN)
NAN_BOXED(4575657221408423941,64,FLEN)
NAN_BOXED(4575657221408423989,64,FLEN)
NAN_BOXED(13835058055282294738,64,FLEN)
NAN_BOXED(4575657221408423950,64,FLEN)
NAN_BOXED(4575657221408424000,64,FLEN)
NAN_BOXED(13835058055282171862,64,FLEN)
NAN_BOXED(4575657221408423979,64,FLEN)
NAN_BOXED(4575657221408424013,64,FLEN)
NAN_BOXED(13835058055282163690,64,FLEN)
NAN_BOXED(4575657221408424005,64,FLEN)
NAN_BOXED(4575657221408424013,64,FLEN)
NAN_BOXED(13835058055282163913,64,FLEN)
NAN_BOXED(4575657221408423981,64,FLEN)
NAN_BOXED(4575657221408424017,64,FLEN)
NAN_BOXED(13835058055282163572,64,FLEN)
NAN_BOXED(4575657221408423956,64,FLEN)
NAN_BOXED(4575657221408424018,64,FLEN)
NAN_BOXED(13835058055282167728,64,FLEN)
NAN_BOXED(4575657221408423941,64,FLEN)
NAN_BOXED(4575657221408424020,64,FLEN)
NAN_BOXED(13835058055282164679,64,FLEN)
NAN_BOXED(4575657221408423990,64,FLEN)
NAN_BOXED(4575657221408424029,64,FLEN)
NAN_BOXED(13835058055282163618,64,FLEN)
NAN_BOXED(4575657221408424025,64,FLEN)
NAN_BOXED(4575657221408424030,64,FLEN)
NAN_BOXED(13835058055282196422,64,FLEN)
NAN_BOXED(4575657221408424009,64,FLEN)
NAN_BOXED(4607182418800017410,64,FLEN)
NAN_BOXED(13621418547958775805,64,FLEN)
NAN_BOXED(4607182418800017466,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(13623811085260816381,64,FLEN)
NAN_BOXED(4607182418800017479,64,FLEN)
NAN_BOXED(4607182418800017413,64,FLEN)
NAN_BOXED(4436014846634360822,64,FLEN)
NAN_BOXED(4607182418800017464,64,FLEN)
NAN_BOXED(4607182418800017414,64,FLEN)
NAN_BOXED(13624162928981704697,64,FLEN)
NAN_BOXED(4607182418800017499,64,FLEN)
NAN_BOXED(4607182418800017420,64,FLEN)
NAN_BOXED(4440541810883821544,64,FLEN)
NAN_BOXED(4607182418800017435,64,FLEN)
NAN_BOXED(4607182418800017427,64,FLEN)
NAN_BOXED(4454058519640932314,64,FLEN)
NAN_BOXED(4607182418800017452,64,FLEN)
NAN_BOXED(4607182418800017432,64,FLEN)
NAN_BOXED(13621137072982065116,64,FLEN)
NAN_BOXED(4607182418800017488,64,FLEN)
NAN_BOXED(4607182418800017434,64,FLEN)
NAN_BOXED(4397765036127289305,64,FLEN)
NAN_BOXED(4607182418800017424,64,FLEN)
NAN_BOXED(4607182418800017444,64,FLEN)
NAN_BOXED(4458562084908564408,64,FLEN)
NAN_BOXED(4607182418800017498,64,FLEN)
NAN_BOXED(4607182418800017448,64,FLEN)
NAN_BOXED(4467570452394409904,64,FLEN)
NAN_BOXED(4607182418800017496,64,FLEN)
NAN_BOXED(4607182418800017449,64,FLEN)
NAN_BOXED(4472074344079556526,64,FLEN)
NAN_BOXED(4607182418800017448,64,FLEN)
NAN_BOXED(4607182418800017452,64,FLEN)
NAN_BOXED(4445043761243750312,64,FLEN)
NAN_BOXED(4607182418800017474,64,FLEN)
NAN_BOXED(4607182418800017456,64,FLEN)
NAN_BOXED(4431500251890712480,64,FLEN)
NAN_BOXED(4607182418800017446,64,FLEN)
NAN_BOXED(4607182418800017457,64,FLEN)
NAN_BOXED(13623881454004993994,64,FLEN)
NAN_BOXED(4607182418800017483,64,FLEN)
NAN_BOXED(4607182418800017462,64,FLEN)
NAN_BOXED(13620714860516999092,64,FLEN)
NAN_BOXED(4607182418800017455,64,FLEN)
NAN_BOXED(4607182418800017468,64,FLEN)
NAN_BOXED(4407440738451718045,64,FLEN)
NAN_BOXED(4607182418800017453,64,FLEN)
NAN_BOXED(4607182418800017468,64,FLEN)
NAN_BOXED(4422473261426671497,64,FLEN)
NAN_BOXED(4607182418800017422,64,FLEN)
NAN_BOXED(4607182418800017474,64,FLEN)
NAN_BOXED(4412718394265042824,64,FLEN)
NAN_BOXED(4607182418800017454,64,FLEN)
NAN_BOXED(4607182418800017476,64,FLEN)
NAN_BOXED(4417740963380723580,64,FLEN)
NAN_BOXED(4607182418800017441,64,FLEN)
NAN_BOXED(4607182418800017478,64,FLEN)
NAN_BOXED(4463067127644946292,64,FLEN)
NAN_BOXED(4607182418800017420,64,FLEN)
NAN_BOXED(4607182418800017484,64,FLEN)
NAN_BOXED(4426827327472664428,64,FLEN)
NAN_BOXED(4607182418800017504,64,FLEN)
NAN_BOXED(4607182418800017487,64,FLEN)
NAN_BOXED(4449553202026643298,64,FLEN)
NAN_BOXED(4607182418800017455,64,FLEN)
NAN_BOXED(4607182418800017505,64,FLEN)
NAN_BOXED(4402268635754659695,64,FLEN)
NAN_BOXED(4607182418800017440,64,FLEN)
NAN_BOXED(9214364837600034818,64,FLEN)
NAN_BOXED(4607182418800017260,64,FLEN)
NAN_BOXED(9214364837600034871,64,FLEN)
NAN_BOXED(9214364837600034822,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034888,64,FLEN)
NAN_BOXED(9214364837600034825,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034910,64,FLEN)
NAN_BOXED(9214364837600034827,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034825,64,FLEN)
NAN_BOXED(9214364837600034830,64,FLEN)
NAN_BOXED(4607182418800017194,64,FLEN)
NAN_BOXED(9214364837600034904,64,FLEN)
NAN_BOXED(9214364837600034830,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034901,64,FLEN)
NAN_BOXED(9214364837600034832,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034832,64,FLEN)
NAN_BOXED(9214364837600034837,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034825,64,FLEN)
NAN_BOXED(9214364837600034838,64,FLEN)
NAN_BOXED(4607182418798968662,64,FLEN)
NAN_BOXED(9214364837600034878,64,FLEN)
NAN_BOXED(9214364837600034840,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034869,64,FLEN)
NAN_BOXED(9214364837600034840,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034895,64,FLEN)
NAN_BOXED(9214364837600034845,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034895,64,FLEN)
NAN_BOXED(9214364837600034846,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034851,64,FLEN)
NAN_BOXED(9214364837600034849,64,FLEN)
NAN_BOXED(4607182418800017196,64,FLEN)
NAN_BOXED(9214364837600034887,64,FLEN)
NAN_BOXED(9214364837600034854,64,FLEN)
NAN_BOXED(4607182418800009018,64,FLEN)
NAN_BOXED(9214364837600034876,64,FLEN)
NAN_BOXED(9214364837600034854,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034907,64,FLEN)
NAN_BOXED(9214364837600034855,64,FLEN)
NAN_BOXED(4607182418799984558,64,FLEN)
NAN_BOXED(9214364837600034817,64,FLEN)
NAN_BOXED(9214364837600034856,64,FLEN)
NAN_BOXED(4607182418799493000,64,FLEN)
NAN_BOXED(9214364837600034835,64,FLEN)
NAN_BOXED(9214364837600034859,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034909,64,FLEN)
NAN_BOXED(9214364837600034865,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034912,64,FLEN)
NAN_BOXED(9214364837600034866,64,FLEN)
NAN_BOXED(4607182418800016160,64,FLEN)
NAN_BOXED(9214364837600034877,64,FLEN)
NAN_BOXED(9214364837600034867,64,FLEN)
NAN_BOXED(4607182418800015080,64,FLEN)
NAN_BOXED(9214364837600034904,64,FLEN)
NAN_BOXED(9214364837600034868,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034906,64,FLEN)
NAN_BOXED(9214364837600034871,64,FLEN)
NAN_BOXED(4607182418800017078,64,FLEN)
NAN_BOXED(9214364837600034893,64,FLEN)
NAN_BOXED(9214364837600034871,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034825,64,FLEN)
NAN_BOXED(9214364837600034871,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034891,64,FLEN)
NAN_BOXED(9214364837600034873,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034836,64,FLEN)
NAN_BOXED(9214364837600034875,64,FLEN)
NAN_BOXED(4607182418800017108,64,FLEN)
NAN_BOXED(9214364837600034904,64,FLEN)
NAN_BOXED(9214364837600034879,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034823,64,FLEN)
NAN_BOXED(9214364837600034880,64,FLEN)
NAN_BOXED(4607182418795822888,64,FLEN)
NAN_BOXED(9214364837600034859,64,FLEN)
NAN_BOXED(9214364837600034885,64,FLEN)
NAN_BOXED(4607182418791628620,64,FLEN)
NAN_BOXED(9214364837600034836,64,FLEN)
NAN_BOXED(9214364837600034886,64,FLEN)
NAN_BOXED(4607182418800017200,64,FLEN)
NAN_BOXED(9214364837600034841,64,FLEN)
NAN_BOXED(9214364837600034886,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034823,64,FLEN)
NAN_BOXED(9214364837600034890,64,FLEN)
NAN_BOXED(4607182418800016952,64,FLEN)
NAN_BOXED(9214364837600034905,64,FLEN)
NAN_BOXED(9214364837600034891,64,FLEN)
NAN_BOXED(4607182418799886110,64,FLEN)
NAN_BOXED(9214364837600034853,64,FLEN)
NAN_BOXED(9214364837600034896,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034844,64,FLEN)
NAN_BOXED(9214364837600034899,64,FLEN)
NAN_BOXED(4607182418799754974,64,FLEN)
NAN_BOXED(9214364837600034877,64,FLEN)
NAN_BOXED(9214364837600034899,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034831,64,FLEN)
NAN_BOXED(9214364837600034900,64,FLEN)
NAN_BOXED(4607182418800016602,64,FLEN)
NAN_BOXED(9214364837600034878,64,FLEN)
NAN_BOXED(9214364837600034901,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034820,64,FLEN)
NAN_BOXED(9214364837600034905,64,FLEN)
NAN_BOXED(4607182418797919934,64,FLEN)
NAN_BOXED(9214364837600034887,64,FLEN)
NAN_BOXED(9214364837600034905,64,FLEN)
NAN_BOXED(4607182418799951580,64,FLEN)
NAN_BOXED(9214364837600034872,64,FLEN)
NAN_BOXED(9214364837600034907,64,FLEN)
NAN_BOXED(4607182418800016806,64,FLEN)
NAN_BOXED(9214364837600034897,64,FLEN)
NAN_BOXED(9214364837600034908,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034834,64,FLEN)
NAN_BOXED(9214364837600034909,64,FLEN)
NAN_BOXED(4607182418800013072,64,FLEN)
NAN_BOXED(9214364837600034842,64,FLEN)
NAN_BOXED(9214364837600034914,64,FLEN)
NAN_BOXED(4607182418800000808,64,FLEN)
NAN_BOXED(9214364837600034825,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(4697254402757492736,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(13917624323328529749,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(4832362400168542026,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(13845754104397168640,64,FLEN)
NAN_BOXED(60,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4830560960316755061,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(14053932997172369725,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(4829360000416950872,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4618602260712278309,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(4828502171916472883,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(13907115791054012416,64,FLEN)
NAN_BOXED(33,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(4660213819294992156,64,FLEN)
NAN_BOXED(46,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 62*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
