
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b4 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b4)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f28, rs2==f28, rs3==f24, rd==f2,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f28; op2:f28; op3:f24; dest:f2; op1val:0x7f9d1aa6d115d25f; op2val:0x7f9d1aa6d115d25f;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f2, f28, f28, f24, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f22, rs2==f21, rs3==f22, rd==f28,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f22; op2:f21; op3:f22; dest:f28; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89;
op3val:0x7f9d1aa6d115d25f; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f28, f22, f21, f22, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rs3 == rd, rs1==f26, rs2==f26, rs3==f26, rd==f26,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f26; op2:f26; op3:f26; dest:f26; op1val:0x7f9d1aa6d115d25f; op2val:0x7f9d1aa6d115d25f;
op3val:0x7f9d1aa6d115d25f; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f26, f26, f26, f26, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==f23, rs2==f19, rs3==f23, rd==f23,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f23; op2:f19; op3:f23; dest:f23; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89;
op3val:0x7f9d1aa6d115d25f; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f23, f23, f19, f23, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==f0, rs2==f0, rs3==f0, rd==f8,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f0; op2:f0; op3:f0; dest:f8; op1val:0x7f9d1aa6d115d25f; op2val:0x7f9d1aa6d115d25f;
op3val:0x7f9d1aa6d115d25f; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f8, f0, f0, f0, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f4, rs2==f30, rs3==f13, rd==f30,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f4; op2:f30; op3:f13; dest:f30; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f30, f4, f30, f13, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f24, rs2==f24, rs3==f4, rd==f24,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f24; op2:f24; op3:f4; dest:f24; op1val:0x7fb7d7ab2b96a7d7; op2val:0x7fb7d7ab2b96a7d7;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f24, f24, f24, f4, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f16, rs2==f5, rs3==f5, rd==f7,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f16; op2:f5; op3:f5; dest:f7; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f;
op3val:0xc00127b826ba798f; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f7, f16, f5, f5, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f13, rs2==f23, rs3==f19, rd==f19,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f13; op2:f23; op3:f19; dest:f19; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f19, f13, f23, f19, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f25, rs2==f15, rs3==f17, rd==f25,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f25; op2:f15; op3:f17; dest:f25; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f25, f25, f15, f17, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f12, rs2==f18, rs3==f31, rd==f20,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f12; op2:f18; op3:f31; dest:f20; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564;
op3val:0x7fc93c9b1b3642af; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f20, f12, f18, f31, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rd == rs2 == rs3 != rs1, rs1==f30, rs2==f27, rs3==f27, rd==f27,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f27; op3:f27; dest:f27; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564;
op3val:0xc0211f2545056564; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f27, f30, f27, f27, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f8, rs2==f20, rs3==f2, rd==f4,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f8; op2:f20; op3:f2; dest:f4; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564;
op3val:0x7fc93c9b1b3642af; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f4, f8, f20, f2, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f10, rs2==f8, rs3==f9, rd==f13,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f10; op2:f8; op3:f9; dest:f13; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564;
op3val:0x7fc93c9b1b3642af; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f13, f10, f8, f9, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f19, rs2==f2, rs3==f8, rd==f3,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f19; op2:f2; op3:f8; dest:f3; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564;
op3val:0x7fc93c9b1b3642af; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f3, f19, f2, f8, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f5, rs2==f4, rs3==f1, rd==f17,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8f619a860e765 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f5; op2:f4; op3:f1; dest:f17; op1val:0x7fbde8341376716f; op2val:0x4018f619a860e765;
op3val:0x7fe5352cf9125058; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f17, f5, f4, f1, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f1, rs2==f6, rs3==f20, rd==f5,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8f619a860e765 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f1; op2:f6; op3:f20; dest:f5; op1val:0x7fbde8341376716f; op2val:0x4018f619a860e765;
op3val:0x7fe5352cf9125058; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f5, f1, f6, f20, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f18, rs2==f7, rs3==f30, rd==f6,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8f619a860e765 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f18; op2:f7; op3:f30; dest:f6; op1val:0x7fbde8341376716f; op2val:0x4018f619a860e765;
op3val:0x7fe5352cf9125058; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f6, f18, f7, f30, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f11, rs2==f13, rs3==f29, rd==f31,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8f619a860e765 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f11; op2:f13; op3:f29; dest:f31; op1val:0x7fbde8341376716f; op2val:0x4018f619a860e765;
op3val:0x7fe5352cf9125058; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f11, f13, f29, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f15, rs2==f31, rs3==f14, rd==f16,fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8f619a860e765 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f15; op2:f31; op3:f14; dest:f16; op1val:0x7fbde8341376716f; op2val:0x4018f619a860e765;
op3val:0x7fe5352cf9125058; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f16, f15, f31, f14, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f7, rs2==f12, rs3==f11, rd==f9,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2812387ceaf57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f7; op2:f12; op3:f11; dest:f9; op1val:0x7fc8b3ba7903c2ab; op2val:0xc002812387ceaf57;
op3val:0x7fe1b73726cc4ff0; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f9, f7, f12, f11, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f31, rs2==f9, rs3==f18, rd==f14,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2812387ceaf57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f31; op2:f9; op3:f18; dest:f14; op1val:0x7fc8b3ba7903c2ab; op2val:0xc002812387ceaf57;
op3val:0x7fe1b73726cc4ff0; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f14, f31, f9, f18, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f29, rs2==f3, rs3==f10, rd==f0,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2812387ceaf57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f29; op2:f3; op3:f10; dest:f0; op1val:0x7fc8b3ba7903c2ab; op2val:0xc002812387ceaf57;
op3val:0x7fe1b73726cc4ff0; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f0, f29, f3, f10, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f21, rs2==f25, rs3==f12, rd==f11,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2812387ceaf57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f21; op2:f25; op3:f12; dest:f11; op1val:0x7fc8b3ba7903c2ab; op2val:0xc002812387ceaf57;
op3val:0x7fe1b73726cc4ff0; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f11, f21, f25, f12, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f9, rs2==f14, rs3==f3, rd==f18,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2812387ceaf57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f9; op2:f14; op3:f3; dest:f18; op1val:0x7fc8b3ba7903c2ab; op2val:0xc002812387ceaf57;
op3val:0x7fe1b73726cc4ff0; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f18, f9, f14, f3, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f14, rs2==f11, rs3==f25, rd==f10,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb729bd396aa0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f14; op2:f11; op3:f25; dest:f10; op1val:0x7fc9b63fed3f1873; op2val:0xbffb729bd396aa0c;
op3val:0x7fe4f911cba6947d; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f10, f14, f11, f25, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f17, rs2==f1, rs3==f28, rd==f22,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb729bd396aa0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f17; op2:f1; op3:f28; dest:f22; op1val:0x7fc9b63fed3f1873; op2val:0xbffb729bd396aa0c;
op3val:0x7fe4f911cba6947d; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f22, f17, f1, f28, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f2, rs2==f22, rs3==f15, rd==f1,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb729bd396aa0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f2; op2:f22; op3:f15; dest:f1; op1val:0x7fc9b63fed3f1873; op2val:0xbffb729bd396aa0c;
op3val:0x7fe4f911cba6947d; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f1, f2, f22, f15, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f27, rs2==f16, rs3==f7, rd==f15,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb729bd396aa0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f27; op2:f16; op3:f7; dest:f15; op1val:0x7fc9b63fed3f1873; op2val:0xbffb729bd396aa0c;
op3val:0x7fe4f911cba6947d; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f15, f27, f16, f7, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f6, rs2==f17, rs3==f16, rd==f21,fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb729bd396aa0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f6; op2:f17; op3:f16; dest:f21; op1val:0x7fc9b63fed3f1873; op2val:0xbffb729bd396aa0c;
op3val:0x7fe4f911cba6947d; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f21, f6, f17, f16, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f3, rs2==f10, rs3==f21, rd==f12,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xb4f8ecba5f106 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f3; op2:f10; op3:f21; dest:f12; op1val:0x7fcadd854d58145f; op2val:0xc02b4f8ecba5f106;
op3val:0x7febb27f4381021f; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f12, f3, f10, f21, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f20,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xb4f8ecba5f106 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f20; op2:f14; op3:f0; dest:f31; op1val:0x7fcadd854d58145f; op2val:0xc02b4f8ecba5f106;
op3val:0x7febb27f4381021f; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f20, f14, f0, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// rs2==f29,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xb4f8ecba5f106 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f10; op2:f29; op3:f8; dest:f2; op1val:0x7fcadd854d58145f; op2val:0xc02b4f8ecba5f106;
op3val:0x7febb27f4381021f; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f2, f10, f29, f8, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// rs3==f6,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xb4f8ecba5f106 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f16; op2:f24; op3:f6; dest:f31; op1val:0x7fcadd854d58145f; op2val:0xc02b4f8ecba5f106;
op3val:0x7febb27f4381021f; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f16, f24, f6, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// rd==f29,fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xb4f8ecba5f106 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f21; op2:f5; op3:f27; dest:f29; op1val:0x7fcadd854d58145f; op2val:0xc02b4f8ecba5f106;
op3val:0x7febb27f4381021f; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f29, f21, f5, f27, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc1494b223d275 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3fc6805c084d1; op2val:0xbfec1494b223d275;
op3val:0x7fc91ddf5613b02f; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc1494b223d275 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3fc6805c084d1; op2val:0xbfec1494b223d275;
op3val:0x7fc91ddf5613b02f; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc1494b223d275 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3fc6805c084d1; op2val:0xbfec1494b223d275;
op3val:0x7fc91ddf5613b02f; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc1494b223d275 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3fc6805c084d1; op2val:0xbfec1494b223d275;
op3val:0x7fc91ddf5613b02f; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc1494b223d275 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3fc6805c084d1; op2val:0xbfec1494b223d275;
op3val:0x7fc91ddf5613b02f; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4808cf6dfa705 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54e6e64764369; op2val:0x4014808cf6dfa705;
op3val:0x7fecf127a6af77f2; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4808cf6dfa705 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54e6e64764369; op2val:0x4014808cf6dfa705;
op3val:0x7fecf127a6af77f2; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4808cf6dfa705 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54e6e64764369; op2val:0x4014808cf6dfa705;
op3val:0x7fecf127a6af77f2; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4808cf6dfa705 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54e6e64764369; op2val:0x4014808cf6dfa705;
op3val:0x7fecf127a6af77f2; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4808cf6dfa705 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd54e6e64764369; op2val:0x4014808cf6dfa705;
op3val:0x7fecf127a6af77f2; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7e3f5b58f8565 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7107573e4c40b; op2val:0xbfc7e3f5b58f8565;
op3val:0x7fedd8fbb754b55c; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7e3f5b58f8565 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7107573e4c40b; op2val:0xbfc7e3f5b58f8565;
op3val:0x7fedd8fbb754b55c; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7e3f5b58f8565 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7107573e4c40b; op2val:0xbfc7e3f5b58f8565;
op3val:0x7fedd8fbb754b55c; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7e3f5b58f8565 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7107573e4c40b; op2val:0xbfc7e3f5b58f8565;
op3val:0x7fedd8fbb754b55c; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7e3f5b58f8565 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7107573e4c40b; op2val:0xbfc7e3f5b58f8565;
op3val:0x7fedd8fbb754b55c; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6;
op3val:0x7fd8e816c2502d73; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6;
op3val:0x7fd8e816c2502d73; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6;
op3val:0x7fd8e816c2502d73; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6;
op3val:0x7fd8e816c2502d73; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6;
op3val:0x7fd8e816c2502d73; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc52a83cb73c6b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdef5aa91c82b3d; op2val:0x3fdc52a83cb73c6b;
op3val:0x7fc1ad71498eb7bb; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc52a83cb73c6b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdef5aa91c82b3d; op2val:0x3fdc52a83cb73c6b;
op3val:0x7fc1ad71498eb7bb; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc52a83cb73c6b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdef5aa91c82b3d; op2val:0x3fdc52a83cb73c6b;
op3val:0x7fc1ad71498eb7bb; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc52a83cb73c6b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdef5aa91c82b3d; op2val:0x3fdc52a83cb73c6b;
op3val:0x7fc1ad71498eb7bb; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc52a83cb73c6b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdef5aa91c82b3d; op2val:0x3fdc52a83cb73c6b;
op3val:0x7fc1ad71498eb7bb; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2e6942188ddd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe139cbde283143; op2val:0xbfe2e6942188ddd7;
op3val:0x7fe5d35e2c6078a3; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2e6942188ddd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe139cbde283143; op2val:0xbfe2e6942188ddd7;
op3val:0x7fe5d35e2c6078a3; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2e6942188ddd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe139cbde283143; op2val:0xbfe2e6942188ddd7;
op3val:0x7fe5d35e2c6078a3; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2e6942188ddd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe139cbde283143; op2val:0xbfe2e6942188ddd7;
op3val:0x7fe5d35e2c6078a3; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2e6942188ddd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe139cbde283143; op2val:0xbfe2e6942188ddd7;
op3val:0x7fe5d35e2c6078a3; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x314d1298a6f71 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da5f3c7a7466; op2val:0x3fe314d1298a6f71;
op3val:0x7fb6f5c1f001498f; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x314d1298a6f71 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da5f3c7a7466; op2val:0x3fe314d1298a6f71;
op3val:0x7fb6f5c1f001498f; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x314d1298a6f71 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da5f3c7a7466; op2val:0x3fe314d1298a6f71;
op3val:0x7fb6f5c1f001498f; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x314d1298a6f71 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da5f3c7a7466; op2val:0x3fe314d1298a6f71;
op3val:0x7fb6f5c1f001498f; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x314d1298a6f71 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da5f3c7a7466; op2val:0x3fe314d1298a6f71;
op3val:0x7fb6f5c1f001498f; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3384401752f12 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe341836db80049; op2val:0xbfd3384401752f12;
op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3384401752f12 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe341836db80049; op2val:0xbfd3384401752f12;
op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3384401752f12 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe341836db80049; op2val:0xbfd3384401752f12;
op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3384401752f12 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe341836db80049; op2val:0xbfd3384401752f12;
op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3384401752f12 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe341836db80049; op2val:0xbfd3384401752f12;
op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d;
op3val:0x7fd3978b52ff3f23; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d;
op3val:0x7fd3978b52ff3f23; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d;
op3val:0x7fd3978b52ff3f23; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d;
op3val:0x7fd3978b52ff3f23; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d;
op3val:0x7fd3978b52ff3f23; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1dcbabcf61390 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45141572f8653; op2val:0xbff1dcbabcf61390;
op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1dcbabcf61390 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45141572f8653; op2val:0xbff1dcbabcf61390;
op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1dcbabcf61390 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45141572f8653; op2val:0xbff1dcbabcf61390;
op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1dcbabcf61390 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45141572f8653; op2val:0xbff1dcbabcf61390;
op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1dcbabcf61390 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45141572f8653; op2val:0xbff1dcbabcf61390;
op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfea49765c51f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a0550fe15035; op2val:0xbfddfea49765c51f;
op3val:0x7fe655481791d37f; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfea49765c51f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a0550fe15035; op2val:0xbfddfea49765c51f;
op3val:0x7fe655481791d37f; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfea49765c51f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a0550fe15035; op2val:0xbfddfea49765c51f;
op3val:0x7fe655481791d37f; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfea49765c51f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a0550fe15035; op2val:0xbfddfea49765c51f;
op3val:0x7fe655481791d37f; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfea49765c51f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a0550fe15035; op2val:0xbfddfea49765c51f;
op3val:0x7fe655481791d37f; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ef5830db8da2 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe657d95216ac01; op2val:0x3ff1ef5830db8da2;
op3val:0x7f89a5803051b37f; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ef5830db8da2 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe657d95216ac01; op2val:0x3ff1ef5830db8da2;
op3val:0x7f89a5803051b37f; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ef5830db8da2 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe657d95216ac01; op2val:0x3ff1ef5830db8da2;
op3val:0x7f89a5803051b37f; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ef5830db8da2 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe657d95216ac01; op2val:0x3ff1ef5830db8da2;
op3val:0x7f89a5803051b37f; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ef5830db8da2 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe657d95216ac01; op2val:0x3ff1ef5830db8da2;
op3val:0x7f89a5803051b37f; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbdd0bee328bc8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e5d8dcad33c4; op2val:0xc00bdd0bee328bc8;
op3val:0x7f9177d952f13e9f; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbdd0bee328bc8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e5d8dcad33c4; op2val:0xc00bdd0bee328bc8;
op3val:0x7f9177d952f13e9f; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbdd0bee328bc8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e5d8dcad33c4; op2val:0xc00bdd0bee328bc8;
op3val:0x7f9177d952f13e9f; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbdd0bee328bc8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e5d8dcad33c4; op2val:0xc00bdd0bee328bc8;
op3val:0x7f9177d952f13e9f; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbdd0bee328bc8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8e5d8dcad33c4; op2val:0xc00bdd0bee328bc8;
op3val:0x7f9177d952f13e9f; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x90a1b3186f414 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b52b2a70b02a; op2val:0xbfd90a1b3186f414;
op3val:0x7fe5f12be85a3941; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x90a1b3186f414 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b52b2a70b02a; op2val:0xbfd90a1b3186f414;
op3val:0x7fe5f12be85a3941; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x90a1b3186f414 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b52b2a70b02a; op2val:0xbfd90a1b3186f414;
op3val:0x7fe5f12be85a3941; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x90a1b3186f414 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b52b2a70b02a; op2val:0xbfd90a1b3186f414;
op3val:0x7fe5f12be85a3941; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x90a1b3186f414 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9b52b2a70b02a; op2val:0xbfd90a1b3186f414;
op3val:0x7fe5f12be85a3941; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x60f45914c4e4a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c0c529007f92; op2val:0xbfe60f45914c4e4a;
op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x60f45914c4e4a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c0c529007f92; op2val:0xbfe60f45914c4e4a;
op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x60f45914c4e4a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c0c529007f92; op2val:0xbfe60f45914c4e4a;
op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x60f45914c4e4a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c0c529007f92; op2val:0xbfe60f45914c4e4a;
op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x60f45914c4e4a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c0c529007f92; op2val:0xbfe60f45914c4e4a;
op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd3132b6e16bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c39382ea6198; op2val:0xbfed3132b6e16bb3;
op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd3132b6e16bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c39382ea6198; op2val:0xbfed3132b6e16bb3;
op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd3132b6e16bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c39382ea6198; op2val:0xbfed3132b6e16bb3;
op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd3132b6e16bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c39382ea6198; op2val:0xbfed3132b6e16bb3;
op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd3132b6e16bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c39382ea6198; op2val:0xbfed3132b6e16bb3;
op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d17637fff0a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c6b24203c777; op2val:0x3ff1d17637fff0a7;
op3val:0x7fef3e76cbaa48e2; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d17637fff0a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c6b24203c777; op2val:0x3ff1d17637fff0a7;
op3val:0x7fef3e76cbaa48e2; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d17637fff0a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c6b24203c777; op2val:0x3ff1d17637fff0a7;
op3val:0x7fef3e76cbaa48e2; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d17637fff0a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c6b24203c777; op2val:0x3ff1d17637fff0a7;
op3val:0x7fef3e76cbaa48e2; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d17637fff0a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9c6b24203c777; op2val:0x3ff1d17637fff0a7;
op3val:0x7fef3e76cbaa48e2; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92eca9f589e22 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb045c5db2e460; op2val:0xbfe92eca9f589e22;
op3val:0x7fd57a2cffec0101; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92eca9f589e22 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb045c5db2e460; op2val:0xbfe92eca9f589e22;
op3val:0x7fd57a2cffec0101; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92eca9f589e22 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb045c5db2e460; op2val:0xbfe92eca9f589e22;
op3val:0x7fd57a2cffec0101; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92eca9f589e22 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb045c5db2e460; op2val:0xbfe92eca9f589e22;
op3val:0x7fd57a2cffec0101; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92eca9f589e22 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb045c5db2e460; op2val:0xbfe92eca9f589e22;
op3val:0x7fd57a2cffec0101; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x564da0b97eac1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec299b1ab6e737; op2val:0x3fb564da0b97eac1;
op3val:0x7fe0cef4bccbe789; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x564da0b97eac1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec299b1ab6e737; op2val:0x3fb564da0b97eac1;
op3val:0x7fe0cef4bccbe789; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x564da0b97eac1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec299b1ab6e737; op2val:0x3fb564da0b97eac1;
op3val:0x7fe0cef4bccbe789; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x564da0b97eac1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec299b1ab6e737; op2val:0x3fb564da0b97eac1;
op3val:0x7fe0cef4bccbe789; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x564da0b97eac1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec299b1ab6e737; op2val:0x3fb564da0b97eac1;
op3val:0x7fe0cef4bccbe789; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1138dec46d0a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ab73cc65f52; op2val:0xbfe1138dec46d0a2;
op3val:0x7fe07805b64db437; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1138dec46d0a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ab73cc65f52; op2val:0xbfe1138dec46d0a2;
op3val:0x7fe07805b64db437; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1138dec46d0a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ab73cc65f52; op2val:0xbfe1138dec46d0a2;
op3val:0x7fe07805b64db437; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1138dec46d0a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ab73cc65f52; op2val:0xbfe1138dec46d0a2;
op3val:0x7fe07805b64db437; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1138dec46d0a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ab73cc65f52; op2val:0xbfe1138dec46d0a2;
op3val:0x7fe07805b64db437; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbad6a36570e13 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee71a5cc2ec78b; op2val:0xbfdbad6a36570e13;
op3val:0x7fe2d590539c6e1b; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbad6a36570e13 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee71a5cc2ec78b; op2val:0xbfdbad6a36570e13;
op3val:0x7fe2d590539c6e1b; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbad6a36570e13 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee71a5cc2ec78b; op2val:0xbfdbad6a36570e13;
op3val:0x7fe2d590539c6e1b; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbad6a36570e13 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee71a5cc2ec78b; op2val:0xbfdbad6a36570e13;
op3val:0x7fe2d590539c6e1b; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbad6a36570e13 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee71a5cc2ec78b; op2val:0xbfdbad6a36570e13;
op3val:0x7fe2d590539c6e1b; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89;
op3val:0x7fd720ca91f58bdf; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f;
op3val:0x7fe99bea81a3c895; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564;
op3val:0x7fc93c9b1b3642af; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 450*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4624975379468418953,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4624975379468418953,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(13835383202136095119,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(13835383202136095119,64,FLEN)
NAN_BOXED(13835383202136095119,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(13835383202136095119,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(13835383202136095119,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(13844380974445847908,64,FLEN)
NAN_BOXED(9207957550009828015,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(13844380974445847908,64,FLEN)
NAN_BOXED(13844380974445847908,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(13844380974445847908,64,FLEN)
NAN_BOXED(9207957550009828015,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(13844380974445847908,64,FLEN)
NAN_BOXED(9207957550009828015,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(13844380974445847908,64,FLEN)
NAN_BOXED(9207957550009828015,64,FLEN)
NAN_BOXED(9204768523777634671,64,FLEN)
NAN_BOXED(4618712007927981925,64,FLEN)
NAN_BOXED(9215830679757148248,64,FLEN)
NAN_BOXED(9204768523777634671,64,FLEN)
NAN_BOXED(4618712007927981925,64,FLEN)
NAN_BOXED(9215830679757148248,64,FLEN)
NAN_BOXED(9204768523777634671,64,FLEN)
NAN_BOXED(4618712007927981925,64,FLEN)
NAN_BOXED(9215830679757148248,64,FLEN)
NAN_BOXED(9204768523777634671,64,FLEN)
NAN_BOXED(4618712007927981925,64,FLEN)
NAN_BOXED(9215830679757148248,64,FLEN)
NAN_BOXED(9204768523777634671,64,FLEN)
NAN_BOXED(4618712007927981925,64,FLEN)
NAN_BOXED(9215830679757148248,64,FLEN)
NAN_BOXED(9207807051634557611,64,FLEN)
NAN_BOXED(13835762994837892951,64,FLEN)
NAN_BOXED(9214847760078753776,64,FLEN)
NAN_BOXED(9207807051634557611,64,FLEN)
NAN_BOXED(13835762994837892951,64,FLEN)
NAN_BOXED(9214847760078753776,64,FLEN)
NAN_BOXED(9207807051634557611,64,FLEN)
NAN_BOXED(13835762994837892951,64,FLEN)
NAN_BOXED(9214847760078753776,64,FLEN)
NAN_BOXED(9207807051634557611,64,FLEN)
NAN_BOXED(13835762994837892951,64,FLEN)
NAN_BOXED(9214847760078753776,64,FLEN)
NAN_BOXED(9207807051634557611,64,FLEN)
NAN_BOXED(13835762994837892951,64,FLEN)
NAN_BOXED(9214847760078753776,64,FLEN)
NAN_BOXED(9208091298815219827,64,FLEN)
NAN_BOXED(13833776693993974284,64,FLEN)
NAN_BOXED(9215764592333329533,64,FLEN)
NAN_BOXED(9208091298815219827,64,FLEN)
NAN_BOXED(13833776693993974284,64,FLEN)
NAN_BOXED(9215764592333329533,64,FLEN)
NAN_BOXED(9208091298815219827,64,FLEN)
NAN_BOXED(13833776693993974284,64,FLEN)
NAN_BOXED(9215764592333329533,64,FLEN)
NAN_BOXED(9208091298815219827,64,FLEN)
NAN_BOXED(13833776693993974284,64,FLEN)
NAN_BOXED(9215764592333329533,64,FLEN)
NAN_BOXED(9208091298815219827,64,FLEN)
NAN_BOXED(13833776693993974284,64,FLEN)
NAN_BOXED(9215764592333329533,64,FLEN)
NAN_BOXED(9208415952710407263,64,FLEN)
NAN_BOXED(13847248954001322246,64,FLEN)
NAN_BOXED(9217657322006970911,64,FLEN)
NAN_BOXED(9208415952710407263,64,FLEN)
NAN_BOXED(13847248954001322246,64,FLEN)
NAN_BOXED(9217657322006970911,64,FLEN)
NAN_BOXED(9208415952710407263,64,FLEN)
NAN_BOXED(13847248954001322246,64,FLEN)
NAN_BOXED(9217657322006970911,64,FLEN)
NAN_BOXED(9208415952710407263,64,FLEN)
NAN_BOXED(13847248954001322246,64,FLEN)
NAN_BOXED(9217657322006970911,64,FLEN)
NAN_BOXED(9208415952710407263,64,FLEN)
NAN_BOXED(13847248954001322246,64,FLEN)
NAN_BOXED(9217657322006970911,64,FLEN)
NAN_BOXED(9210983186606097617,64,FLEN)
NAN_BOXED(13829451184624358005,64,FLEN)
NAN_BOXED(9207923758194733103,64,FLEN)
NAN_BOXED(9210983186606097617,64,FLEN)
NAN_BOXED(13829451184624358005,64,FLEN)
NAN_BOXED(9207923758194733103,64,FLEN)
NAN_BOXED(9210983186606097617,64,FLEN)
NAN_BOXED(13829451184624358005,64,FLEN)
NAN_BOXED(9207923758194733103,64,FLEN)
NAN_BOXED(9210983186606097617,64,FLEN)
NAN_BOXED(13829451184624358005,64,FLEN)
NAN_BOXED(9207923758194733103,64,FLEN)
NAN_BOXED(9210983186606097617,64,FLEN)
NAN_BOXED(13829451184624358005,64,FLEN)
NAN_BOXED(9207923758194733103,64,FLEN)
NAN_BOXED(9211354848895058793,64,FLEN)
NAN_BOXED(4617456860887230213,64,FLEN)
NAN_BOXED(9218007689923098610,64,FLEN)
NAN_BOXED(9211354848895058793,64,FLEN)
NAN_BOXED(4617456860887230213,64,FLEN)
NAN_BOXED(9218007689923098610,64,FLEN)
NAN_BOXED(9211354848895058793,64,FLEN)
NAN_BOXED(4617456860887230213,64,FLEN)
NAN_BOXED(9218007689923098610,64,FLEN)
NAN_BOXED(9211354848895058793,64,FLEN)
NAN_BOXED(4617456860887230213,64,FLEN)
NAN_BOXED(9218007689923098610,64,FLEN)
NAN_BOXED(9211354848895058793,64,FLEN)
NAN_BOXED(4617456860887230213,64,FLEN)
NAN_BOXED(9218007689923098610,64,FLEN)
NAN_BOXED(9211849659451229195,64,FLEN)
NAN_BOXED(13819264626062230885,64,FLEN)
NAN_BOXED(9218262587921446236,64,FLEN)
NAN_BOXED(9211849659451229195,64,FLEN)
NAN_BOXED(13819264626062230885,64,FLEN)
NAN_BOXED(9218262587921446236,64,FLEN)
NAN_BOXED(9211849659451229195,64,FLEN)
NAN_BOXED(13819264626062230885,64,FLEN)
NAN_BOXED(9218262587921446236,64,FLEN)
NAN_BOXED(9211849659451229195,64,FLEN)
NAN_BOXED(13819264626062230885,64,FLEN)
NAN_BOXED(9218262587921446236,64,FLEN)
NAN_BOXED(9211849659451229195,64,FLEN)
NAN_BOXED(13819264626062230885,64,FLEN)
NAN_BOXED(9218262587921446236,64,FLEN)
NAN_BOXED(9212156358776328131,64,FLEN)
NAN_BOXED(4622945573006939062,64,FLEN)
NAN_BOXED(9212368222233308531,64,FLEN)
NAN_BOXED(9212156358776328131,64,FLEN)
NAN_BOXED(4622945573006939062,64,FLEN)
NAN_BOXED(9212368222233308531,64,FLEN)
NAN_BOXED(9212156358776328131,64,FLEN)
NAN_BOXED(4622945573006939062,64,FLEN)
NAN_BOXED(9212368222233308531,64,FLEN)
NAN_BOXED(9212156358776328131,64,FLEN)
NAN_BOXED(4622945573006939062,64,FLEN)
NAN_BOXED(9212368222233308531,64,FLEN)
NAN_BOXED(9212156358776328131,64,FLEN)
NAN_BOXED(4622945573006939062,64,FLEN)
NAN_BOXED(9212368222233308531,64,FLEN)
NAN_BOXED(9214072000585673533,64,FLEN)
NAN_BOXED(4601643801792429163,64,FLEN)
NAN_BOXED(9205829815399004091,64,FLEN)
NAN_BOXED(9214072000585673533,64,FLEN)
NAN_BOXED(4601643801792429163,64,FLEN)
NAN_BOXED(9205829815399004091,64,FLEN)
NAN_BOXED(9214072000585673533,64,FLEN)
NAN_BOXED(4601643801792429163,64,FLEN)
NAN_BOXED(9205829815399004091,64,FLEN)
NAN_BOXED(9214072000585673533,64,FLEN)
NAN_BOXED(4601643801792429163,64,FLEN)
NAN_BOXED(9205829815399004091,64,FLEN)
NAN_BOXED(9214072000585673533,64,FLEN)
NAN_BOXED(4601643801792429163,64,FLEN)
NAN_BOXED(9205829815399004091,64,FLEN)
NAN_BOXED(9214709860345065795,64,FLEN)
NAN_BOXED(13826867329873010135,64,FLEN)
NAN_BOXED(9216004613908494499,64,FLEN)
NAN_BOXED(9214709860345065795,64,FLEN)
NAN_BOXED(13826867329873010135,64,FLEN)
NAN_BOXED(9216004613908494499,64,FLEN)
NAN_BOXED(9214709860345065795,64,FLEN)
NAN_BOXED(13826867329873010135,64,FLEN)
NAN_BOXED(9216004613908494499,64,FLEN)
NAN_BOXED(9214709860345065795,64,FLEN)
NAN_BOXED(13826867329873010135,64,FLEN)
NAN_BOXED(9216004613908494499,64,FLEN)
NAN_BOXED(9214709860345065795,64,FLEN)
NAN_BOXED(13826867329873010135,64,FLEN)
NAN_BOXED(9216004613908494499,64,FLEN)
NAN_BOXED(9215167890124862566,64,FLEN)
NAN_BOXED(4603546132680437617,64,FLEN)
NAN_BOXED(9202813101882296719,64,FLEN)
NAN_BOXED(9215167890124862566,64,FLEN)
NAN_BOXED(4603546132680437617,64,FLEN)
NAN_BOXED(9202813101882296719,64,FLEN)
NAN_BOXED(9215167890124862566,64,FLEN)
NAN_BOXED(4603546132680437617,64,FLEN)
NAN_BOXED(9202813101882296719,64,FLEN)
NAN_BOXED(9215167890124862566,64,FLEN)
NAN_BOXED(4603546132680437617,64,FLEN)
NAN_BOXED(9202813101882296719,64,FLEN)
NAN_BOXED(9215167890124862566,64,FLEN)
NAN_BOXED(4603546132680437617,64,FLEN)
NAN_BOXED(9202813101882296719,64,FLEN)
NAN_BOXED(9215281295267463241,64,FLEN)
NAN_BOXED(13822453546063572754,64,FLEN)
NAN_BOXED(9210839859472361943,64,FLEN)
NAN_BOXED(9215281295267463241,64,FLEN)
NAN_BOXED(13822453546063572754,64,FLEN)
NAN_BOXED(9210839859472361943,64,FLEN)
NAN_BOXED(9215281295267463241,64,FLEN)
NAN_BOXED(13822453546063572754,64,FLEN)
NAN_BOXED(9210839859472361943,64,FLEN)
NAN_BOXED(9215281295267463241,64,FLEN)
NAN_BOXED(13822453546063572754,64,FLEN)
NAN_BOXED(9210839859472361943,64,FLEN)
NAN_BOXED(9215281295267463241,64,FLEN)
NAN_BOXED(13822453546063572754,64,FLEN)
NAN_BOXED(9210839859472361943,64,FLEN)
NAN_BOXED(9215448090737735445,64,FLEN)
NAN_BOXED(13827700032231440989,64,FLEN)
NAN_BOXED(9210872287551504163,64,FLEN)
NAN_BOXED(9215448090737735445,64,FLEN)
NAN_BOXED(13827700032231440989,64,FLEN)
NAN_BOXED(9210872287551504163,64,FLEN)
NAN_BOXED(9215448090737735445,64,FLEN)
NAN_BOXED(13827700032231440989,64,FLEN)
NAN_BOXED(9210872287551504163,64,FLEN)
NAN_BOXED(9215448090737735445,64,FLEN)
NAN_BOXED(13827700032231440989,64,FLEN)
NAN_BOXED(9210872287551504163,64,FLEN)
NAN_BOXED(9215448090737735445,64,FLEN)
NAN_BOXED(13827700032231440989,64,FLEN)
NAN_BOXED(9210872287551504163,64,FLEN)
NAN_BOXED(9215580078584333907,64,FLEN)
NAN_BOXED(13831078625223775120,64,FLEN)
NAN_BOXED(9210603135067211973,64,FLEN)
NAN_BOXED(9215580078584333907,64,FLEN)
NAN_BOXED(13831078625223775120,64,FLEN)
NAN_BOXED(9210603135067211973,64,FLEN)
NAN_BOXED(9215580078584333907,64,FLEN)
NAN_BOXED(13831078625223775120,64,FLEN)
NAN_BOXED(9210603135067211973,64,FLEN)
NAN_BOXED(9215580078584333907,64,FLEN)
NAN_BOXED(13831078625223775120,64,FLEN)
NAN_BOXED(9210603135067211973,64,FLEN)
NAN_BOXED(9215580078584333907,64,FLEN)
NAN_BOXED(13831078625223775120,64,FLEN)
NAN_BOXED(9210603135067211973,64,FLEN)
NAN_BOXED(9215667024705966133,64,FLEN)
NAN_BOXED(13825486413965411615,64,FLEN)
NAN_BOXED(9216147455581737855,64,FLEN)
NAN_BOXED(9215667024705966133,64,FLEN)
NAN_BOXED(13825486413965411615,64,FLEN)
NAN_BOXED(9216147455581737855,64,FLEN)
NAN_BOXED(9215667024705966133,64,FLEN)
NAN_BOXED(13825486413965411615,64,FLEN)
NAN_BOXED(9216147455581737855,64,FLEN)
NAN_BOXED(9215667024705966133,64,FLEN)
NAN_BOXED(13825486413965411615,64,FLEN)
NAN_BOXED(9216147455581737855,64,FLEN)
NAN_BOXED(9215667024705966133,64,FLEN)
NAN_BOXED(13825486413965411615,64,FLEN)
NAN_BOXED(9216147455581737855,64,FLEN)
NAN_BOXED(9216150278357036033,64,FLEN)
NAN_BOXED(4607727055832583586,64,FLEN)
NAN_BOXED(9190058484611265407,64,FLEN)
NAN_BOXED(9216150278357036033,64,FLEN)
NAN_BOXED(4607727055832583586,64,FLEN)
NAN_BOXED(9190058484611265407,64,FLEN)
NAN_BOXED(9216150278357036033,64,FLEN)
NAN_BOXED(4607727055832583586,64,FLEN)
NAN_BOXED(9190058484611265407,64,FLEN)
NAN_BOXED(9216150278357036033,64,FLEN)
NAN_BOXED(4607727055832583586,64,FLEN)
NAN_BOXED(9190058484611265407,64,FLEN)
NAN_BOXED(9216150278357036033,64,FLEN)
NAN_BOXED(4607727055832583586,64,FLEN)
NAN_BOXED(9190058484611265407,64,FLEN)
NAN_BOXED(9216869356991755204,64,FLEN)
NAN_BOXED(13838397323336649672,64,FLEN)
NAN_BOXED(9192260089723043487,64,FLEN)
NAN_BOXED(9216869356991755204,64,FLEN)
NAN_BOXED(13838397323336649672,64,FLEN)
NAN_BOXED(9192260089723043487,64,FLEN)
NAN_BOXED(9216869356991755204,64,FLEN)
NAN_BOXED(13838397323336649672,64,FLEN)
NAN_BOXED(9192260089723043487,64,FLEN)
NAN_BOXED(9216869356991755204,64,FLEN)
NAN_BOXED(13838397323336649672,64,FLEN)
NAN_BOXED(9192260089723043487,64,FLEN)
NAN_BOXED(9216869356991755204,64,FLEN)
NAN_BOXED(13838397323336649672,64,FLEN)
NAN_BOXED(9192260089723043487,64,FLEN)
NAN_BOXED(9217097309390680106,64,FLEN)
NAN_BOXED(13824091643101770772,64,FLEN)
NAN_BOXED(9216037383367702849,64,FLEN)
NAN_BOXED(9217097309390680106,64,FLEN)
NAN_BOXED(13824091643101770772,64,FLEN)
NAN_BOXED(9216037383367702849,64,FLEN)
NAN_BOXED(9217097309390680106,64,FLEN)
NAN_BOXED(13824091643101770772,64,FLEN)
NAN_BOXED(9216037383367702849,64,FLEN)
NAN_BOXED(9217097309390680106,64,FLEN)
NAN_BOXED(13824091643101770772,64,FLEN)
NAN_BOXED(9216037383367702849,64,FLEN)
NAN_BOXED(9217097309390680106,64,FLEN)
NAN_BOXED(13824091643101770772,64,FLEN)
NAN_BOXED(9216037383367702849,64,FLEN)
NAN_BOXED(9217110065419419538,64,FLEN)
NAN_BOXED(13827756497352543818,64,FLEN)
NAN_BOXED(9213377872194491101,64,FLEN)
NAN_BOXED(9217110065419419538,64,FLEN)
NAN_BOXED(13827756497352543818,64,FLEN)
NAN_BOXED(9213377872194491101,64,FLEN)
NAN_BOXED(9217110065419419538,64,FLEN)
NAN_BOXED(13827756497352543818,64,FLEN)
NAN_BOXED(9213377872194491101,64,FLEN)
NAN_BOXED(9217110065419419538,64,FLEN)
NAN_BOXED(13827756497352543818,64,FLEN)
NAN_BOXED(9213377872194491101,64,FLEN)
NAN_BOXED(9217110065419419538,64,FLEN)
NAN_BOXED(13827756497352543818,64,FLEN)
NAN_BOXED(9213377872194491101,64,FLEN)
NAN_BOXED(9217113150714438040,64,FLEN)
NAN_BOXED(13829764124611013555,64,FLEN)
NAN_BOXED(9210140840432606859,64,FLEN)
NAN_BOXED(9217113150714438040,64,FLEN)
NAN_BOXED(13829764124611013555,64,FLEN)
NAN_BOXED(9210140840432606859,64,FLEN)
NAN_BOXED(9217113150714438040,64,FLEN)
NAN_BOXED(13829764124611013555,64,FLEN)
NAN_BOXED(9210140840432606859,64,FLEN)
NAN_BOXED(9217113150714438040,64,FLEN)
NAN_BOXED(13829764124611013555,64,FLEN)
NAN_BOXED(9210140840432606859,64,FLEN)
NAN_BOXED(9217113150714438040,64,FLEN)
NAN_BOXED(13829764124611013555,64,FLEN)
NAN_BOXED(9210140840432606859,64,FLEN)
NAN_BOXED(9217116581304452983,64,FLEN)
NAN_BOXED(4607694199452594343,64,FLEN)
NAN_BOXED(9218655642194692322,64,FLEN)
NAN_BOXED(9217116581304452983,64,FLEN)
NAN_BOXED(4607694199452594343,64,FLEN)
NAN_BOXED(9218655642194692322,64,FLEN)
NAN_BOXED(9217116581304452983,64,FLEN)
NAN_BOXED(4607694199452594343,64,FLEN)
NAN_BOXED(9218655642194692322,64,FLEN)
NAN_BOXED(9217116581304452983,64,FLEN)
NAN_BOXED(4607694199452594343,64,FLEN)
NAN_BOXED(9218655642194692322,64,FLEN)
NAN_BOXED(9217116581304452983,64,FLEN)
NAN_BOXED(4607694199452594343,64,FLEN)
NAN_BOXED(9218655642194692322,64,FLEN)
NAN_BOXED(9217465857099359328,64,FLEN)
NAN_BOXED(13828635578609475106,64,FLEN)
NAN_BOXED(9211402946547024129,64,FLEN)
NAN_BOXED(9217465857099359328,64,FLEN)
NAN_BOXED(13828635578609475106,64,FLEN)
NAN_BOXED(9211402946547024129,64,FLEN)
NAN_BOXED(9217465857099359328,64,FLEN)
NAN_BOXED(13828635578609475106,64,FLEN)
NAN_BOXED(9211402946547024129,64,FLEN)
NAN_BOXED(9217465857099359328,64,FLEN)
NAN_BOXED(13828635578609475106,64,FLEN)
NAN_BOXED(9211402946547024129,64,FLEN)
NAN_BOXED(9217465857099359328,64,FLEN)
NAN_BOXED(13828635578609475106,64,FLEN)
NAN_BOXED(9211402946547024129,64,FLEN)
NAN_BOXED(9217788283465426743,64,FLEN)
NAN_BOXED(4590686282834242241,64,FLEN)
NAN_BOXED(9214592388134856585,64,FLEN)
NAN_BOXED(9217788283465426743,64,FLEN)
NAN_BOXED(4590686282834242241,64,FLEN)
NAN_BOXED(9214592388134856585,64,FLEN)
NAN_BOXED(9217788283465426743,64,FLEN)
NAN_BOXED(4590686282834242241,64,FLEN)
NAN_BOXED(9214592388134856585,64,FLEN)
NAN_BOXED(9217788283465426743,64,FLEN)
NAN_BOXED(4590686282834242241,64,FLEN)
NAN_BOXED(9214592388134856585,64,FLEN)
NAN_BOXED(9217788283465426743,64,FLEN)
NAN_BOXED(4590686282834242241,64,FLEN)
NAN_BOXED(9214592388134856585,64,FLEN)
NAN_BOXED(9218053386598244178,64,FLEN)
NAN_BOXED(13826353831279513762,64,FLEN)
NAN_BOXED(9214496803528750135,64,FLEN)
NAN_BOXED(9218053386598244178,64,FLEN)
NAN_BOXED(13826353831279513762,64,FLEN)
NAN_BOXED(9214496803528750135,64,FLEN)
NAN_BOXED(9218053386598244178,64,FLEN)
NAN_BOXED(13826353831279513762,64,FLEN)
NAN_BOXED(9214496803528750135,64,FLEN)
NAN_BOXED(9218053386598244178,64,FLEN)
NAN_BOXED(13826353831279513762,64,FLEN)
NAN_BOXED(9214496803528750135,64,FLEN)
NAN_BOXED(9218053386598244178,64,FLEN)
NAN_BOXED(13826353831279513762,64,FLEN)
NAN_BOXED(9214496803528750135,64,FLEN)
NAN_BOXED(9218430444183144331,64,FLEN)
NAN_BOXED(13824834152833682963,64,FLEN)
NAN_BOXED(9215162603408223771,64,FLEN)
NAN_BOXED(9218430444183144331,64,FLEN)
NAN_BOXED(13824834152833682963,64,FLEN)
NAN_BOXED(9215162603408223771,64,FLEN)
NAN_BOXED(9218430444183144331,64,FLEN)
NAN_BOXED(13824834152833682963,64,FLEN)
NAN_BOXED(9215162603408223771,64,FLEN)
NAN_BOXED(9218430444183144331,64,FLEN)
NAN_BOXED(13824834152833682963,64,FLEN)
NAN_BOXED(9215162603408223771,64,FLEN)
NAN_BOXED(9218430444183144331,64,FLEN)
NAN_BOXED(13824834152833682963,64,FLEN)
NAN_BOXED(9215162603408223771,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4624975379468418953,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4624975379468418953,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4624975379468418953,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4624975379468418953,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9195535317935182431,64,FLEN)
NAN_BOXED(4624975379468418953,64,FLEN)
NAN_BOXED(9211867617213909983,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(13835383202136095119,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(13835383202136095119,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(13835383202136095119,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(13835383202136095119,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203061493725571031,64,FLEN)
NAN_BOXED(13835383202136095119,64,FLEN)
NAN_BOXED(9217069543890077845,64,FLEN)
NAN_BOXED(9203108027223088823,64,FLEN)
NAN_BOXED(13844380974445847908,64,FLEN)
NAN_BOXED(9207957550009828015,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 46*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
