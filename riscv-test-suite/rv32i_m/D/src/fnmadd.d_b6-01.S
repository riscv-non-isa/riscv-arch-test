
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b6 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b6)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f13, rs2==f13, rs3==f27, rd==f16,fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f13; op2:f13; op3:f27; dest:f16; op1val:0x395117d0d55e69ae; op2val:0x395117d0d55e69ae;
op3val:0x39b0fc63597a987b; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f16, f13, f13, f27, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f5, rs2==f9, rs3==f5, rd==f7,fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f5; op2:f9; op3:f5; dest:f7; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b;
op3val:0x395117d0d55e69ae; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f7, f5, f9, f5, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rs3 == rd, rs1==f2, rs2==f2, rs3==f2, rd==f2,fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f2; op2:f2; op3:f2; dest:f2; op1val:0x395117d0d55e69ae; op2val:0x395117d0d55e69ae;
op3val:0x395117d0d55e69ae; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f2, f2, f2, f2, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==f25, rs2==f3, rs3==f25, rd==f25,fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f25; op2:f3; op3:f25; dest:f25; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b;
op3val:0x395117d0d55e69ae; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f25, f25, f3, f25, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==f24, rs2==f24, rs3==f24, rd==f1,fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f24; op2:f24; op3:f24; dest:f1; op1val:0x395117d0d55e69ae; op2val:0x395117d0d55e69ae;
op3val:0x395117d0d55e69ae; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f1, f24, f24, f24, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f12, rs2==f30, rs3==f8, rd==f30,fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f12; op2:f30; op3:f8; dest:f30; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3;
op3val:0x39919aa477d0a2f0; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f30, f12, f30, f8, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f27, rs2==f27, rs3==f29, rd==f27,fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f27; op2:f27; op3:f29; dest:f27; op1val:0x39860fecec9cedfd; op2val:0x39860fecec9cedfd;
op3val:0x39919aa477d0a2f0; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f27, f27, f27, f29, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f18, rs2==f0, rs3==f0, rd==f13,fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f18; op2:f0; op3:f0; dest:f13; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3;
op3val:0xc0359c7ab60c86f3; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f13, f18, f0, f0, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f19, rs2==f18, rs3==f26, rd==f26,fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f19; op2:f18; op3:f26; dest:f26; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3;
op3val:0x39919aa477d0a2f0; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f26, f19, f18, f26, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f6, rs2==f23, rs3==f1, rd==f6,fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f6; op2:f23; op3:f1; dest:f6; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3;
op3val:0x39919aa477d0a2f0; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f6, f6, f23, f1, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f9, rs2==f28, rs3==f14, rd==f12,fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f9; op2:f28; op3:f14; dest:f12; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e;
op3val:0x399302dd184574b9; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f12, f9, f28, f14, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rd == rs2 == rs3 != rs1, rs1==f15, rs2==f21, rs3==f21, rd==f21,fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f15; op2:f21; op3:f21; dest:f21; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e;
op3val:0x466e0d272a3de70e; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f21, f15, f21, f21, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f31, rs2==f19, rs3==f9, rd==f24,fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f31; op2:f19; op3:f9; dest:f24; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e;
op3val:0x399302dd184574b9; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f24, f31, f19, f9, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f17, rs2==f22, rs3==f20, rd==f3,fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f17; op2:f22; op3:f20; dest:f3; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e;
op3val:0x399302dd184574b9; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f3, f17, f22, f20, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f1, rs2==f26, rs3==f6, rd==f10,fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f1; op2:f26; op3:f6; dest:f10; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e;
op3val:0x399302dd184574b9; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f10, f1, f26, f6, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f16, rs2==f12, rs3==f31, rd==f0,fs1 == 0 and fe1 == 0x399 and fm1 == 0x87115a106e653 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bded2c8e362b and fs3 == 0 and fe3 == 0x396 and fm3 == 0x420b60628e1ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f16; op2:f12; op3:f31; dest:f0; op1val:0x39987115a106e653; op2val:0xc024bded2c8e362b;
op3val:0x396420b60628e1ac; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f0, f16, f12, f31, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f28, rs2==f5, rs3==f23, rd==f20,fs1 == 0 and fe1 == 0x399 and fm1 == 0x87115a106e653 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bded2c8e362b and fs3 == 0 and fe3 == 0x396 and fm3 == 0x420b60628e1ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f28; op2:f5; op3:f23; dest:f20; op1val:0x39987115a106e653; op2val:0xc024bded2c8e362b;
op3val:0x396420b60628e1ac; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f20, f28, f5, f23, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f0, rs2==f25, rs3==f18, rd==f22,fs1 == 0 and fe1 == 0x399 and fm1 == 0x87115a106e653 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bded2c8e362b and fs3 == 0 and fe3 == 0x396 and fm3 == 0x420b60628e1ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f0; op2:f25; op3:f18; dest:f22; op1val:0x39987115a106e653; op2val:0xc024bded2c8e362b;
op3val:0x396420b60628e1ac; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f22, f0, f25, f18, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f14, rs2==f4, rs3==f12, rd==f31,fs1 == 0 and fe1 == 0x399 and fm1 == 0x87115a106e653 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bded2c8e362b and fs3 == 0 and fe3 == 0x396 and fm3 == 0x420b60628e1ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f14; op2:f4; op3:f12; dest:f31; op1val:0x39987115a106e653; op2val:0xc024bded2c8e362b;
op3val:0x396420b60628e1ac; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f14, f4, f12, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f26, rs2==f1, rs3==f4, rd==f8,fs1 == 0 and fe1 == 0x399 and fm1 == 0x87115a106e653 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bded2c8e362b and fs3 == 0 and fe3 == 0x396 and fm3 == 0x420b60628e1ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f26; op2:f1; op3:f4; dest:f8; op1val:0x39987115a106e653; op2val:0xc024bded2c8e362b;
op3val:0x396420b60628e1ac; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f8, f26, f1, f4, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f7, rs2==f8, rs3==f19, rd==f5,fs1 == 0 and fe1 == 0x399 and fm1 == 0xc78202ec8ce83 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x635ec5ac851e6 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7bbc1c42f2180 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f7; op2:f8; op3:f19; dest:f5; op1val:0x399c78202ec8ce83; op2val:0xc66635ec5ac851e6;
op3val:0x39a7bbc1c42f2180; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f5, f7, f8, f19, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f22, rs2==f15, rs3==f10, rd==f23,fs1 == 0 and fe1 == 0x399 and fm1 == 0xc78202ec8ce83 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x635ec5ac851e6 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7bbc1c42f2180 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f22; op2:f15; op3:f10; dest:f23; op1val:0x399c78202ec8ce83; op2val:0xc66635ec5ac851e6;
op3val:0x39a7bbc1c42f2180; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f23, f22, f15, f10, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f20, rs2==f6, rs3==f30, rd==f11,fs1 == 0 and fe1 == 0x399 and fm1 == 0xc78202ec8ce83 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x635ec5ac851e6 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7bbc1c42f2180 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f20; op2:f6; op3:f30; dest:f11; op1val:0x399c78202ec8ce83; op2val:0xc66635ec5ac851e6;
op3val:0x39a7bbc1c42f2180; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f11, f20, f6, f30, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f10, rs2==f20, rs3==f17, rd==f19,fs1 == 0 and fe1 == 0x399 and fm1 == 0xc78202ec8ce83 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x635ec5ac851e6 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7bbc1c42f2180 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f10; op2:f20; op3:f17; dest:f19; op1val:0x399c78202ec8ce83; op2val:0xc66635ec5ac851e6;
op3val:0x39a7bbc1c42f2180; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f19, f10, f20, f17, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f4, rs2==f14, rs3==f15, rd==f29,fs1 == 0 and fe1 == 0x399 and fm1 == 0xc78202ec8ce83 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x635ec5ac851e6 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7bbc1c42f2180 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f4; op2:f14; op3:f15; dest:f29; op1val:0x399c78202ec8ce83; op2val:0xc66635ec5ac851e6;
op3val:0x39a7bbc1c42f2180; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f29, f4, f14, f15, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f21, rs2==f31, rs3==f28, rd==f17,fs1 == 0 and fe1 == 0x39a and fm1 == 0x00588d3ebc9ce and fs2 == 1 and fe2 == 0x41d and fm2 == 0xff4f22a812f9e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x03e8e5c4751e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f21; op2:f31; op3:f28; dest:f17; op1val:0x39a00588d3ebc9ce; op2val:0xc1dff4f22a812f9e;
op3val:0x39b03e8e5c4751e5; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f17, f21, f31, f28, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f3, rs2==f7, rs3==f11, rd==f14,fs1 == 0 and fe1 == 0x39a and fm1 == 0x00588d3ebc9ce and fs2 == 1 and fe2 == 0x41d and fm2 == 0xff4f22a812f9e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x03e8e5c4751e5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f3; op2:f7; op3:f11; dest:f14; op1val:0x39a00588d3ebc9ce; op2val:0xc1dff4f22a812f9e;
op3val:0x39b03e8e5c4751e5; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f14, f3, f7, f11, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f30, rs2==f17, rs3==f22, rd==f18,fs1 == 0 and fe1 == 0x39a and fm1 == 0x00588d3ebc9ce and fs2 == 1 and fe2 == 0x41d and fm2 == 0xff4f22a812f9e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x03e8e5c4751e5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f17; op3:f22; dest:f18; op1val:0x39a00588d3ebc9ce; op2val:0xc1dff4f22a812f9e;
op3val:0x39b03e8e5c4751e5; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f18, f30, f17, f22, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f29, rs2==f10, rs3==f3, rd==f15,fs1 == 0 and fe1 == 0x39a and fm1 == 0x00588d3ebc9ce and fs2 == 1 and fe2 == 0x41d and fm2 == 0xff4f22a812f9e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x03e8e5c4751e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f29; op2:f10; op3:f3; dest:f15; op1val:0x39a00588d3ebc9ce; op2val:0xc1dff4f22a812f9e;
op3val:0x39b03e8e5c4751e5; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f15, f29, f10, f3, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f23, rs2==f11, rs3==f13, rd==f9,fs1 == 0 and fe1 == 0x39a and fm1 == 0x00588d3ebc9ce and fs2 == 1 and fe2 == 0x41d and fm2 == 0xff4f22a812f9e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x03e8e5c4751e5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f23; op2:f11; op3:f13; dest:f9; op1val:0x39a00588d3ebc9ce; op2val:0xc1dff4f22a812f9e;
op3val:0x39b03e8e5c4751e5; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f9, f23, f11, f13, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f11, rs2==f16, rs3==f7, rd==f4,fs1 == 0 and fe1 == 0x39a and fm1 == 0x2093582abf33b and fs2 == 1 and fe2 == 0x40f and fm2 == 0xc631f6cd8fb78 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2f9d8101f151b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f11; op2:f16; op3:f7; dest:f4; op1val:0x39a2093582abf33b; op2val:0xc0fc631f6cd8fb78;
op3val:0x39b2f9d8101f151b; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f4, f11, f16, f7, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f8, rs2==f29, rs3==f16, rd==f28,fs1 == 0 and fe1 == 0x39a and fm1 == 0x2093582abf33b and fs2 == 1 and fe2 == 0x40f and fm2 == 0xc631f6cd8fb78 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2f9d8101f151b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f8; op2:f29; op3:f16; dest:f28; op1val:0x39a2093582abf33b; op2val:0xc0fc631f6cd8fb78;
op3val:0x39b2f9d8101f151b; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f28, f8, f29, f16, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2093582abf33b and fs2 == 1 and fe2 == 0x40f and fm2 == 0xc631f6cd8fb78 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2f9d8101f151b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2093582abf33b; op2val:0xc0fc631f6cd8fb78;
op3val:0x39b2f9d8101f151b; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2093582abf33b and fs2 == 1 and fe2 == 0x40f and fm2 == 0xc631f6cd8fb78 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2f9d8101f151b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2093582abf33b; op2val:0xc0fc631f6cd8fb78;
op3val:0x39b2f9d8101f151b; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2093582abf33b and fs2 == 1 and fe2 == 0x40f and fm2 == 0xc631f6cd8fb78 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2f9d8101f151b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a2093582abf33b; op2val:0xc0fc631f6cd8fb78;
op3val:0x39b2f9d8101f151b; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x493832648647e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84397048af2b2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xf4e20ef7fa9be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a493832648647e; op2val:0x3fe84397048af2b2;
op3val:0x399f4e20ef7fa9be; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x493832648647e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84397048af2b2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xf4e20ef7fa9be and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a493832648647e; op2val:0x3fe84397048af2b2;
op3val:0x399f4e20ef7fa9be; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x493832648647e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84397048af2b2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xf4e20ef7fa9be and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a493832648647e; op2val:0x3fe84397048af2b2;
op3val:0x399f4e20ef7fa9be; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x493832648647e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84397048af2b2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xf4e20ef7fa9be and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a493832648647e; op2val:0x3fe84397048af2b2;
op3val:0x399f4e20ef7fa9be; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x493832648647e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84397048af2b2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xf4e20ef7fa9be and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a493832648647e; op2val:0x3fe84397048af2b2;
op3val:0x399f4e20ef7fa9be; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x53906393211b2 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x820037a9576e5 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xe11997039be98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a53906393211b2; op2val:0xc1d820037a9576e5;
op3val:0x39ae11997039be98; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x53906393211b2 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x820037a9576e5 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xe11997039be98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a53906393211b2; op2val:0xc1d820037a9576e5;
op3val:0x39ae11997039be98; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x53906393211b2 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x820037a9576e5 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xe11997039be98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a53906393211b2; op2val:0xc1d820037a9576e5;
op3val:0x39ae11997039be98; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x53906393211b2 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x820037a9576e5 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xe11997039be98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a53906393211b2; op2val:0xc1d820037a9576e5;
op3val:0x39ae11997039be98; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x53906393211b2 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x820037a9576e5 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xe11997039be98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a53906393211b2; op2val:0xc1d820037a9576e5;
op3val:0x39ae11997039be98; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x7b337adfaba25 and fs2 == 1 and fe2 == 0x465 and fm2 == 0xaae1a7f7fe4f9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x256e24ec21869 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a7b337adfaba25; op2val:0xc65aae1a7f7fe4f9;
op3val:0x39b256e24ec21869; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x7b337adfaba25 and fs2 == 1 and fe2 == 0x465 and fm2 == 0xaae1a7f7fe4f9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x256e24ec21869 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a7b337adfaba25; op2val:0xc65aae1a7f7fe4f9;
op3val:0x39b256e24ec21869; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x7b337adfaba25 and fs2 == 1 and fe2 == 0x465 and fm2 == 0xaae1a7f7fe4f9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x256e24ec21869 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a7b337adfaba25; op2val:0xc65aae1a7f7fe4f9;
op3val:0x39b256e24ec21869; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x7b337adfaba25 and fs2 == 1 and fe2 == 0x465 and fm2 == 0xaae1a7f7fe4f9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x256e24ec21869 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a7b337adfaba25; op2val:0xc65aae1a7f7fe4f9;
op3val:0x39b256e24ec21869; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x7b337adfaba25 and fs2 == 1 and fe2 == 0x465 and fm2 == 0xaae1a7f7fe4f9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x256e24ec21869 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a7b337adfaba25; op2val:0xc65aae1a7f7fe4f9;
op3val:0x39b256e24ec21869; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x961d9e439899e and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8e9734f31b51f and fs3 == 0 and fe3 == 0x397 and fm3 == 0x543ecb52e1739 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a961d9e439899e; op2val:0x4658e9734f31b51f;
op3val:0x397543ecb52e1739; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x961d9e439899e and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8e9734f31b51f and fs3 == 0 and fe3 == 0x397 and fm3 == 0x543ecb52e1739 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a961d9e439899e; op2val:0x4658e9734f31b51f;
op3val:0x397543ecb52e1739; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x961d9e439899e and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8e9734f31b51f and fs3 == 0 and fe3 == 0x397 and fm3 == 0x543ecb52e1739 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a961d9e439899e; op2val:0x4658e9734f31b51f;
op3val:0x397543ecb52e1739; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x961d9e439899e and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8e9734f31b51f and fs3 == 0 and fe3 == 0x397 and fm3 == 0x543ecb52e1739 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a961d9e439899e; op2val:0x4658e9734f31b51f;
op3val:0x397543ecb52e1739; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x961d9e439899e and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8e9734f31b51f and fs3 == 0 and fe3 == 0x397 and fm3 == 0x543ecb52e1739 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a961d9e439899e; op2val:0x4658e9734f31b51f;
op3val:0x397543ecb52e1739; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x96b7ce749469a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xda3dc3c8bc7cb and fs3 == 0 and fe3 == 0x399 and fm3 == 0x86c11cd38c611 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a96b7ce749469a; op2val:0x3fdda3dc3c8bc7cb;
op3val:0x39986c11cd38c611; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x96b7ce749469a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xda3dc3c8bc7cb and fs3 == 0 and fe3 == 0x399 and fm3 == 0x86c11cd38c611 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a96b7ce749469a; op2val:0x3fdda3dc3c8bc7cb;
op3val:0x39986c11cd38c611; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x96b7ce749469a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xda3dc3c8bc7cb and fs3 == 0 and fe3 == 0x399 and fm3 == 0x86c11cd38c611 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a96b7ce749469a; op2val:0x3fdda3dc3c8bc7cb;
op3val:0x39986c11cd38c611; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x96b7ce749469a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xda3dc3c8bc7cb and fs3 == 0 and fe3 == 0x399 and fm3 == 0x86c11cd38c611 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a96b7ce749469a; op2val:0x3fdda3dc3c8bc7cb;
op3val:0x39986c11cd38c611; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x96b7ce749469a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xda3dc3c8bc7cb and fs3 == 0 and fe3 == 0x399 and fm3 == 0x86c11cd38c611 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a96b7ce749469a; op2val:0x3fdda3dc3c8bc7cb;
op3val:0x39986c11cd38c611; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9c0c51eeebad1 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x88da1b118587d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x19b261fb596eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a9c0c51eeebad1; op2val:0x46588da1b118587d;
op3val:0x39b19b261fb596eb; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9c0c51eeebad1 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x88da1b118587d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x19b261fb596eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a9c0c51eeebad1; op2val:0x46588da1b118587d;
op3val:0x39b19b261fb596eb; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9c0c51eeebad1 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x88da1b118587d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x19b261fb596eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a9c0c51eeebad1; op2val:0x46588da1b118587d;
op3val:0x39b19b261fb596eb; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9c0c51eeebad1 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x88da1b118587d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x19b261fb596eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a9c0c51eeebad1; op2val:0x46588da1b118587d;
op3val:0x39b19b261fb596eb; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9c0c51eeebad1 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x88da1b118587d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x19b261fb596eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a9c0c51eeebad1; op2val:0x46588da1b118587d;
op3val:0x39b19b261fb596eb; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9ec7686f9ec3a and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8643f97d288b8 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x8705c8a1c73a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a9ec7686f9ec3a; op2val:0x4658643f97d288b8;
op3val:0x3988705c8a1c73a2; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9ec7686f9ec3a and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8643f97d288b8 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x8705c8a1c73a2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a9ec7686f9ec3a; op2val:0x4658643f97d288b8;
op3val:0x3988705c8a1c73a2; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9ec7686f9ec3a and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8643f97d288b8 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x8705c8a1c73a2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a9ec7686f9ec3a; op2val:0x4658643f97d288b8;
op3val:0x3988705c8a1c73a2; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9ec7686f9ec3a and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8643f97d288b8 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x8705c8a1c73a2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a9ec7686f9ec3a; op2val:0x4658643f97d288b8;
op3val:0x3988705c8a1c73a2; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9ec7686f9ec3a and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8643f97d288b8 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x8705c8a1c73a2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a9ec7686f9ec3a; op2val:0x4658643f97d288b8;
op3val:0x3988705c8a1c73a2; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3ae72b8e92d9 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x738abb923bd4a and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa76e4ab440bf3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab3ae72b8e92d9; op2val:0xc65738abb923bd4a;
op3val:0x398a76e4ab440bf3; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3ae72b8e92d9 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x738abb923bd4a and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa76e4ab440bf3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab3ae72b8e92d9; op2val:0xc65738abb923bd4a;
op3val:0x398a76e4ab440bf3; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3ae72b8e92d9 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x738abb923bd4a and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa76e4ab440bf3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab3ae72b8e92d9; op2val:0xc65738abb923bd4a;
op3val:0x398a76e4ab440bf3; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3ae72b8e92d9 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x738abb923bd4a and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa76e4ab440bf3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab3ae72b8e92d9; op2val:0xc65738abb923bd4a;
op3val:0x398a76e4ab440bf3; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3ae72b8e92d9 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x738abb923bd4a and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa76e4ab440bf3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab3ae72b8e92d9; op2val:0xc65738abb923bd4a;
op3val:0x398a76e4ab440bf3; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3c55dc08859c and fs2 == 1 and fe2 == 0x40f and fm2 == 0x2cc80f7fc90b4 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x4c78615b73b87 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab3c55dc08859c; op2val:0xc0f2cc80f7fc90b4;
op3val:0x3974c78615b73b87; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3c55dc08859c and fs2 == 1 and fe2 == 0x40f and fm2 == 0x2cc80f7fc90b4 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x4c78615b73b87 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab3c55dc08859c; op2val:0xc0f2cc80f7fc90b4;
op3val:0x3974c78615b73b87; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3c55dc08859c and fs2 == 1 and fe2 == 0x40f and fm2 == 0x2cc80f7fc90b4 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x4c78615b73b87 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab3c55dc08859c; op2val:0xc0f2cc80f7fc90b4;
op3val:0x3974c78615b73b87; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3c55dc08859c and fs2 == 1 and fe2 == 0x40f and fm2 == 0x2cc80f7fc90b4 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x4c78615b73b87 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab3c55dc08859c; op2val:0xc0f2cc80f7fc90b4;
op3val:0x3974c78615b73b87; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3c55dc08859c and fs2 == 1 and fe2 == 0x40f and fm2 == 0x2cc80f7fc90b4 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x4c78615b73b87 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ab3c55dc08859c; op2val:0xc0f2cc80f7fc90b4;
op3val:0x3974c78615b73b87; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xbaa1b7f4dcbc7 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x6db539c6ea23d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2d75c7feac96d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39abaa1b7f4dcbc7; op2val:0xc656db539c6ea23d;
op3val:0x39b2d75c7feac96d; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xbaa1b7f4dcbc7 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x6db539c6ea23d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2d75c7feac96d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39abaa1b7f4dcbc7; op2val:0xc656db539c6ea23d;
op3val:0x39b2d75c7feac96d; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xbaa1b7f4dcbc7 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x6db539c6ea23d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2d75c7feac96d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39abaa1b7f4dcbc7; op2val:0xc656db539c6ea23d;
op3val:0x39b2d75c7feac96d; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xbaa1b7f4dcbc7 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x6db539c6ea23d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2d75c7feac96d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39abaa1b7f4dcbc7; op2val:0xc656db539c6ea23d;
op3val:0x39b2d75c7feac96d; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xbaa1b7f4dcbc7 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x6db539c6ea23d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2d75c7feac96d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39abaa1b7f4dcbc7; op2val:0xc656db539c6ea23d;
op3val:0x39b2d75c7feac96d; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xcf7f1cdf1475c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49bf0c2fb575d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2ae9e22c5ee0c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39acf7f1cdf1475c; op2val:0x3ff49bf0c2fb575d;
op3val:0x39b2ae9e22c5ee0c; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xcf7f1cdf1475c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49bf0c2fb575d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2ae9e22c5ee0c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39acf7f1cdf1475c; op2val:0x3ff49bf0c2fb575d;
op3val:0x39b2ae9e22c5ee0c; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xcf7f1cdf1475c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49bf0c2fb575d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2ae9e22c5ee0c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39acf7f1cdf1475c; op2val:0x3ff49bf0c2fb575d;
op3val:0x39b2ae9e22c5ee0c; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xcf7f1cdf1475c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49bf0c2fb575d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2ae9e22c5ee0c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39acf7f1cdf1475c; op2val:0x3ff49bf0c2fb575d;
op3val:0x39b2ae9e22c5ee0c; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xcf7f1cdf1475c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49bf0c2fb575d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2ae9e22c5ee0c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39acf7f1cdf1475c; op2val:0x3ff49bf0c2fb575d;
op3val:0x39b2ae9e22c5ee0c; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd28b1c48f9ecd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3520e7ffe7474 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1d30e93c058b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ad28b1c48f9ecd; op2val:0x3ff3520e7ffe7474;
op3val:0x39b1d30e93c058b0; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd28b1c48f9ecd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3520e7ffe7474 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1d30e93c058b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ad28b1c48f9ecd; op2val:0x3ff3520e7ffe7474;
op3val:0x39b1d30e93c058b0; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd28b1c48f9ecd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3520e7ffe7474 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1d30e93c058b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ad28b1c48f9ecd; op2val:0x3ff3520e7ffe7474;
op3val:0x39b1d30e93c058b0; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd28b1c48f9ecd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3520e7ffe7474 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1d30e93c058b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ad28b1c48f9ecd; op2val:0x3ff3520e7ffe7474;
op3val:0x39b1d30e93c058b0; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd28b1c48f9ecd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3520e7ffe7474 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1d30e93c058b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ad28b1c48f9ecd; op2val:0x3ff3520e7ffe7474;
op3val:0x39b1d30e93c058b0; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xec1e9bdc14adf and fs2 == 1 and fe2 == 0x406 and fm2 == 0xd19072a8cf30c and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7fa543a54ea12 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39aec1e9bdc14adf; op2val:0xc06d19072a8cf30c;
op3val:0x39a7fa543a54ea12; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xec1e9bdc14adf and fs2 == 1 and fe2 == 0x406 and fm2 == 0xd19072a8cf30c and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7fa543a54ea12 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39aec1e9bdc14adf; op2val:0xc06d19072a8cf30c;
op3val:0x39a7fa543a54ea12; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xec1e9bdc14adf and fs2 == 1 and fe2 == 0x406 and fm2 == 0xd19072a8cf30c and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7fa543a54ea12 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39aec1e9bdc14adf; op2val:0xc06d19072a8cf30c;
op3val:0x39a7fa543a54ea12; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xec1e9bdc14adf and fs2 == 1 and fe2 == 0x406 and fm2 == 0xd19072a8cf30c and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7fa543a54ea12 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39aec1e9bdc14adf; op2val:0xc06d19072a8cf30c;
op3val:0x39a7fa543a54ea12; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xec1e9bdc14adf and fs2 == 1 and fe2 == 0x406 and fm2 == 0xd19072a8cf30c and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7fa543a54ea12 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39aec1e9bdc14adf; op2val:0xc06d19072a8cf30c;
op3val:0x39a7fa543a54ea12; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f727fa7a4f49 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x2a2b13bd1032e and fs3 == 0 and fe3 == 0x39a and fm3 == 0x352bc0ab174b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b0f727fa7a4f49; op2val:0x4652a2b13bd1032e;
op3val:0x39a352bc0ab174b4; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f727fa7a4f49 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x2a2b13bd1032e and fs3 == 0 and fe3 == 0x39a and fm3 == 0x352bc0ab174b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b0f727fa7a4f49; op2val:0x4652a2b13bd1032e;
op3val:0x39a352bc0ab174b4; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f727fa7a4f49 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x2a2b13bd1032e and fs3 == 0 and fe3 == 0x39a and fm3 == 0x352bc0ab174b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b0f727fa7a4f49; op2val:0x4652a2b13bd1032e;
op3val:0x39a352bc0ab174b4; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f727fa7a4f49 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x2a2b13bd1032e and fs3 == 0 and fe3 == 0x39a and fm3 == 0x352bc0ab174b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b0f727fa7a4f49; op2val:0x4652a2b13bd1032e;
op3val:0x39a352bc0ab174b4; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f727fa7a4f49 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x2a2b13bd1032e and fs3 == 0 and fe3 == 0x39a and fm3 == 0x352bc0ab174b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b0f727fa7a4f49; op2val:0x4652a2b13bd1032e;
op3val:0x39a352bc0ab174b4; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x15eaf9bc4135b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x2339e6cd46ba5 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x419832df339cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b15eaf9bc4135b; op2val:0xc652339e6cd46ba5;
op3val:0x39b419832df339cc; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x15eaf9bc4135b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x2339e6cd46ba5 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x419832df339cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b15eaf9bc4135b; op2val:0xc652339e6cd46ba5;
op3val:0x39b419832df339cc; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x15eaf9bc4135b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x2339e6cd46ba5 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x419832df339cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b15eaf9bc4135b; op2val:0xc652339e6cd46ba5;
op3val:0x39b419832df339cc; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x15eaf9bc4135b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x2339e6cd46ba5 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x419832df339cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b15eaf9bc4135b; op2val:0xc652339e6cd46ba5;
op3val:0x39b419832df339cc; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x15eaf9bc4135b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x2339e6cd46ba5 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x419832df339cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b15eaf9bc4135b; op2val:0xc652339e6cd46ba5;
op3val:0x39b419832df339cc; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682;
op3val:0x39b390a91e852eff; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682;
op3val:0x39b390a91e852eff; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682;
op3val:0x39b390a91e852eff; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682;
op3val:0x39b390a91e852eff; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682;
op3val:0x39b390a91e852eff; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x18e1308d56fb3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8b1e8ab856033 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x32d4ea5b39c47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b18e1308d56fb3; op2val:0x3fd8b1e8ab856033;
op3val:0x39a32d4ea5b39c47; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x18e1308d56fb3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8b1e8ab856033 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x32d4ea5b39c47 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b18e1308d56fb3; op2val:0x3fd8b1e8ab856033;
op3val:0x39a32d4ea5b39c47; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x18e1308d56fb3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8b1e8ab856033 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x32d4ea5b39c47 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b18e1308d56fb3; op2val:0x3fd8b1e8ab856033;
op3val:0x39a32d4ea5b39c47; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x18e1308d56fb3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8b1e8ab856033 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x32d4ea5b39c47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b18e1308d56fb3; op2val:0x3fd8b1e8ab856033;
op3val:0x39a32d4ea5b39c47; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x18e1308d56fb3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8b1e8ab856033 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x32d4ea5b39c47 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b18e1308d56fb3; op2val:0x3fd8b1e8ab856033;
op3val:0x39a32d4ea5b39c47; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x1d3562b63423a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x92c8578d820c7 and fs3 == 0 and fe3 == 0x397 and fm3 == 0xfa02ff2e8ef9f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b1d3562b63423a; op2val:0xc0692c8578d820c7;
op3val:0x397fa02ff2e8ef9f; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x1d3562b63423a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x92c8578d820c7 and fs3 == 0 and fe3 == 0x397 and fm3 == 0xfa02ff2e8ef9f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b1d3562b63423a; op2val:0xc0692c8578d820c7;
op3val:0x397fa02ff2e8ef9f; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x1d3562b63423a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x92c8578d820c7 and fs3 == 0 and fe3 == 0x397 and fm3 == 0xfa02ff2e8ef9f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b1d3562b63423a; op2val:0xc0692c8578d820c7;
op3val:0x397fa02ff2e8ef9f; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x1d3562b63423a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x92c8578d820c7 and fs3 == 0 and fe3 == 0x397 and fm3 == 0xfa02ff2e8ef9f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b1d3562b63423a; op2val:0xc0692c8578d820c7;
op3val:0x397fa02ff2e8ef9f; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x1d3562b63423a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x92c8578d820c7 and fs3 == 0 and fe3 == 0x397 and fm3 == 0xfa02ff2e8ef9f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b1d3562b63423a; op2val:0xc0692c8578d820c7;
op3val:0x397fa02ff2e8ef9f; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951;
op3val:0x39a715f340a1218a; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951;
op3val:0x39a715f340a1218a; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951;
op3val:0x39a715f340a1218a; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951;
op3val:0x39a715f340a1218a; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951;
op3val:0x39a715f340a1218a; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3950f3ae122c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3b68b998a5bd2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x1b15d20ac5b99 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3950f3ae122c8; op2val:0x3fd3b68b998a5bd2;
op3val:0x39a1b15d20ac5b99; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3950f3ae122c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3b68b998a5bd2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x1b15d20ac5b99 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3950f3ae122c8; op2val:0x3fd3b68b998a5bd2;
op3val:0x39a1b15d20ac5b99; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3950f3ae122c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3b68b998a5bd2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x1b15d20ac5b99 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3950f3ae122c8; op2val:0x3fd3b68b998a5bd2;
op3val:0x39a1b15d20ac5b99; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3950f3ae122c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3b68b998a5bd2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x1b15d20ac5b99 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3950f3ae122c8; op2val:0x3fd3b68b998a5bd2;
op3val:0x39a1b15d20ac5b99; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3950f3ae122c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3b68b998a5bd2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x1b15d20ac5b99 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3950f3ae122c8; op2val:0x3fd3b68b998a5bd2;
op3val:0x39a1b15d20ac5b99; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x431aefd3d77c4 and fs2 == 0 and fe2 == 0x464 and fm2 == 0xf4fe93abe35c0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x3137ed6d522ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b431aefd3d77c4; op2val:0x464f4fe93abe35c0;
op3val:0x39a3137ed6d522ce; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x431aefd3d77c4 and fs2 == 0 and fe2 == 0x464 and fm2 == 0xf4fe93abe35c0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x3137ed6d522ce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b431aefd3d77c4; op2val:0x464f4fe93abe35c0;
op3val:0x39a3137ed6d522ce; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x431aefd3d77c4 and fs2 == 0 and fe2 == 0x464 and fm2 == 0xf4fe93abe35c0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x3137ed6d522ce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b431aefd3d77c4; op2val:0x464f4fe93abe35c0;
op3val:0x39a3137ed6d522ce; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x431aefd3d77c4 and fs2 == 0 and fe2 == 0x464 and fm2 == 0xf4fe93abe35c0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x3137ed6d522ce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b431aefd3d77c4; op2val:0x464f4fe93abe35c0;
op3val:0x39a3137ed6d522ce; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x431aefd3d77c4 and fs2 == 0 and fe2 == 0x464 and fm2 == 0xf4fe93abe35c0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x3137ed6d522ce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b431aefd3d77c4; op2val:0x464f4fe93abe35c0;
op3val:0x39a3137ed6d522ce; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b;
op3val:0x39b0fc63597a987b; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b;
op3val:0x39b0fc63597a987b; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b;
op3val:0x39b0fc63597a987b; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b;
op3val:0x39b0fc63597a987b; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b;
op3val:0x39b0fc63597a987b; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3;
op3val:0x39919aa477d0a2f0; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3;
op3val:0x39919aa477d0a2f0; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3;
op3val:0x39919aa477d0a2f0; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3;
op3val:0x39919aa477d0a2f0; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3;
op3val:0x39919aa477d0a2f0; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e;
op3val:0x399302dd184574b9; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 450*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(4157099959696136315,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(5094273860500524587,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(5094273860500524587,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(13850148279902045939,64,FLEN)
NAN_BOXED(4148266762960413424,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(4148266762960413424,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(13850148279902045939,64,FLEN)
NAN_BOXED(13850148279902045939,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(13850148279902045939,64,FLEN)
NAN_BOXED(4148266762960413424,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(13850148279902045939,64,FLEN)
NAN_BOXED(4148266762960413424,64,FLEN)
NAN_BOXED(4149234255877555158,64,FLEN)
NAN_BOXED(5075008291956713230,64,FLEN)
NAN_BOXED(4148662830356591801,64,FLEN)
NAN_BOXED(4149234255877555158,64,FLEN)
NAN_BOXED(5075008291956713230,64,FLEN)
NAN_BOXED(5075008291956713230,64,FLEN)
NAN_BOXED(4149234255877555158,64,FLEN)
NAN_BOXED(5075008291956713230,64,FLEN)
NAN_BOXED(4148662830356591801,64,FLEN)
NAN_BOXED(4149234255877555158,64,FLEN)
NAN_BOXED(5075008291956713230,64,FLEN)
NAN_BOXED(4148662830356591801,64,FLEN)
NAN_BOXED(4149234255877555158,64,FLEN)
NAN_BOXED(5075008291956713230,64,FLEN)
NAN_BOXED(4148662830356591801,64,FLEN)
NAN_BOXED(4150191394331747923,64,FLEN)
NAN_BOXED(13845399980796163627,64,FLEN)
NAN_BOXED(4135466323992437164,64,FLEN)
NAN_BOXED(4150191394331747923,64,FLEN)
NAN_BOXED(13845399980796163627,64,FLEN)
NAN_BOXED(4135466323992437164,64,FLEN)
NAN_BOXED(4150191394331747923,64,FLEN)
NAN_BOXED(13845399980796163627,64,FLEN)
NAN_BOXED(4135466323992437164,64,FLEN)
NAN_BOXED(4150191394331747923,64,FLEN)
NAN_BOXED(13845399980796163627,64,FLEN)
NAN_BOXED(4135466323992437164,64,FLEN)
NAN_BOXED(4150191394331747923,64,FLEN)
NAN_BOXED(13845399980796163627,64,FLEN)
NAN_BOXED(4135466323992437164,64,FLEN)
NAN_BOXED(4151325036147953283,64,FLEN)
NAN_BOXED(14296173356385849830,64,FLEN)
NAN_BOXED(4154495622167077248,64,FLEN)
NAN_BOXED(4151325036147953283,64,FLEN)
NAN_BOXED(14296173356385849830,64,FLEN)
NAN_BOXED(4154495622167077248,64,FLEN)
NAN_BOXED(4151325036147953283,64,FLEN)
NAN_BOXED(14296173356385849830,64,FLEN)
NAN_BOXED(4154495622167077248,64,FLEN)
NAN_BOXED(4151325036147953283,64,FLEN)
NAN_BOXED(14296173356385849830,64,FLEN)
NAN_BOXED(4154495622167077248,64,FLEN)
NAN_BOXED(4151325036147953283,64,FLEN)
NAN_BOXED(14296173356385849830,64,FLEN)
NAN_BOXED(4154495622167077248,64,FLEN)
NAN_BOXED(4152324941664733646,64,FLEN)
NAN_BOXED(13970153890058940318,64,FLEN)
NAN_BOXED(4156891237217423845,64,FLEN)
NAN_BOXED(4152324941664733646,64,FLEN)
NAN_BOXED(13970153890058940318,64,FLEN)
NAN_BOXED(4156891237217423845,64,FLEN)
NAN_BOXED(4152324941664733646,64,FLEN)
NAN_BOXED(13970153890058940318,64,FLEN)
NAN_BOXED(4156891237217423845,64,FLEN)
NAN_BOXED(4152324941664733646,64,FLEN)
NAN_BOXED(13970153890058940318,64,FLEN)
NAN_BOXED(4156891237217423845,64,FLEN)
NAN_BOXED(4152324941664733646,64,FLEN)
NAN_BOXED(13970153890058940318,64,FLEN)
NAN_BOXED(4156891237217423845,64,FLEN)
NAN_BOXED(4152891931819242299,64,FLEN)
NAN_BOXED(13906098736034544504,64,FLEN)
NAN_BOXED(4157660112395113755,64,FLEN)
NAN_BOXED(4152891931819242299,64,FLEN)
NAN_BOXED(13906098736034544504,64,FLEN)
NAN_BOXED(4157660112395113755,64,FLEN)
NAN_BOXED(4152891931819242299,64,FLEN)
NAN_BOXED(13906098736034544504,64,FLEN)
NAN_BOXED(4157660112395113755,64,FLEN)
NAN_BOXED(4152891931819242299,64,FLEN)
NAN_BOXED(13906098736034544504,64,FLEN)
NAN_BOXED(4157660112395113755,64,FLEN)
NAN_BOXED(4152891931819242299,64,FLEN)
NAN_BOXED(13906098736034544504,64,FLEN)
NAN_BOXED(4157660112395113755,64,FLEN)
NAN_BOXED(4153606947834717310,64,FLEN)
NAN_BOXED(4605004934881669810,64,FLEN)
NAN_BOXED(4152123284822927806,64,FLEN)
NAN_BOXED(4153606947834717310,64,FLEN)
NAN_BOXED(4605004934881669810,64,FLEN)
NAN_BOXED(4152123284822927806,64,FLEN)
NAN_BOXED(4153606947834717310,64,FLEN)
NAN_BOXED(4605004934881669810,64,FLEN)
NAN_BOXED(4152123284822927806,64,FLEN)
NAN_BOXED(4153606947834717310,64,FLEN)
NAN_BOXED(4605004934881669810,64,FLEN)
NAN_BOXED(4152123284822927806,64,FLEN)
NAN_BOXED(4153606947834717310,64,FLEN)
NAN_BOXED(4605004934881669810,64,FLEN)
NAN_BOXED(4152123284822927806,64,FLEN)
NAN_BOXED(4153788930211320242,64,FLEN)
NAN_BOXED(13967949443603199717,64,FLEN)
NAN_BOXED(4156278856820047512,64,FLEN)
NAN_BOXED(4153788930211320242,64,FLEN)
NAN_BOXED(13967949443603199717,64,FLEN)
NAN_BOXED(4156278856820047512,64,FLEN)
NAN_BOXED(4153788930211320242,64,FLEN)
NAN_BOXED(13967949443603199717,64,FLEN)
NAN_BOXED(4156278856820047512,64,FLEN)
NAN_BOXED(4153788930211320242,64,FLEN)
NAN_BOXED(13967949443603199717,64,FLEN)
NAN_BOXED(4156278856820047512,64,FLEN)
NAN_BOXED(4153788930211320242,64,FLEN)
NAN_BOXED(13967949443603199717,64,FLEN)
NAN_BOXED(4156278856820047512,64,FLEN)
NAN_BOXED(4154486232996035109,64,FLEN)
NAN_BOXED(14292927796245161209,64,FLEN)
NAN_BOXED(4157480936000329833,64,FLEN)
NAN_BOXED(4154486232996035109,64,FLEN)
NAN_BOXED(14292927796245161209,64,FLEN)
NAN_BOXED(4157480936000329833,64,FLEN)
NAN_BOXED(4154486232996035109,64,FLEN)
NAN_BOXED(14292927796245161209,64,FLEN)
NAN_BOXED(4157480936000329833,64,FLEN)
NAN_BOXED(4154486232996035109,64,FLEN)
NAN_BOXED(14292927796245161209,64,FLEN)
NAN_BOXED(4157480936000329833,64,FLEN)
NAN_BOXED(4154486232996035109,64,FLEN)
NAN_BOXED(14292927796245161209,64,FLEN)
NAN_BOXED(4157480936000329833,64,FLEN)
NAN_BOXED(4154959719690766750,64,FLEN)
NAN_BOXED(5069058062064661791,64,FLEN)
NAN_BOXED(4140290116368078649,64,FLEN)
NAN_BOXED(4154959719690766750,64,FLEN)
NAN_BOXED(5069058062064661791,64,FLEN)
NAN_BOXED(4140290116368078649,64,FLEN)
NAN_BOXED(4154959719690766750,64,FLEN)
NAN_BOXED(5069058062064661791,64,FLEN)
NAN_BOXED(4140290116368078649,64,FLEN)
NAN_BOXED(4154959719690766750,64,FLEN)
NAN_BOXED(5069058062064661791,64,FLEN)
NAN_BOXED(4140290116368078649,64,FLEN)
NAN_BOXED(4154959719690766750,64,FLEN)
NAN_BOXED(5069058062064661791,64,FLEN)
NAN_BOXED(4140290116368078649,64,FLEN)
NAN_BOXED(4154970315426449050,64,FLEN)
NAN_BOXED(4602014560546441163,64,FLEN)
NAN_BOXED(4150185880335205905,64,FLEN)
NAN_BOXED(4154970315426449050,64,FLEN)
NAN_BOXED(4602014560546441163,64,FLEN)
NAN_BOXED(4150185880335205905,64,FLEN)
NAN_BOXED(4154970315426449050,64,FLEN)
NAN_BOXED(4602014560546441163,64,FLEN)
NAN_BOXED(4150185880335205905,64,FLEN)
NAN_BOXED(4154970315426449050,64,FLEN)
NAN_BOXED(4602014560546441163,64,FLEN)
NAN_BOXED(4150185880335205905,64,FLEN)
NAN_BOXED(4154970315426449050,64,FLEN)
NAN_BOXED(4602014560546441163,64,FLEN)
NAN_BOXED(4150185880335205905,64,FLEN)
NAN_BOXED(4155064084086045393,64,FLEN)
NAN_BOXED(5068957106205907069,64,FLEN)
NAN_BOXED(4157274519082735339,64,FLEN)
NAN_BOXED(4155064084086045393,64,FLEN)
NAN_BOXED(5068957106205907069,64,FLEN)
NAN_BOXED(4157274519082735339,64,FLEN)
NAN_BOXED(4155064084086045393,64,FLEN)
NAN_BOXED(5068957106205907069,64,FLEN)
NAN_BOXED(4157274519082735339,64,FLEN)
NAN_BOXED(4155064084086045393,64,FLEN)
NAN_BOXED(5068957106205907069,64,FLEN)
NAN_BOXED(4157274519082735339,64,FLEN)
NAN_BOXED(4155064084086045393,64,FLEN)
NAN_BOXED(5068957106205907069,64,FLEN)
NAN_BOXED(4157274519082735339,64,FLEN)
NAN_BOXED(4155112125040815162,64,FLEN)
NAN_BOXED(5068911604898367672,64,FLEN)
NAN_BOXED(4145686999750964130,64,FLEN)
NAN_BOXED(4155112125040815162,64,FLEN)
NAN_BOXED(5068911604898367672,64,FLEN)
NAN_BOXED(4145686999750964130,64,FLEN)
NAN_BOXED(4155112125040815162,64,FLEN)
NAN_BOXED(5068911604898367672,64,FLEN)
NAN_BOXED(4145686999750964130,64,FLEN)
NAN_BOXED(4155112125040815162,64,FLEN)
NAN_BOXED(5068911604898367672,64,FLEN)
NAN_BOXED(4145686999750964130,64,FLEN)
NAN_BOXED(4155112125040815162,64,FLEN)
NAN_BOXED(5068911604898367672,64,FLEN)
NAN_BOXED(4145686999750964130,64,FLEN)
NAN_BOXED(4155479845722034905,64,FLEN)
NAN_BOXED(14291954252680248650,64,FLEN)
NAN_BOXED(4146257131445947379,64,FLEN)
NAN_BOXED(4155479845722034905,64,FLEN)
NAN_BOXED(14291954252680248650,64,FLEN)
NAN_BOXED(4146257131445947379,64,FLEN)
NAN_BOXED(4155479845722034905,64,FLEN)
NAN_BOXED(14291954252680248650,64,FLEN)
NAN_BOXED(4146257131445947379,64,FLEN)
NAN_BOXED(4155479845722034905,64,FLEN)
NAN_BOXED(14291954252680248650,64,FLEN)
NAN_BOXED(4146257131445947379,64,FLEN)
NAN_BOXED(4155479845722034905,64,FLEN)
NAN_BOXED(14291954252680248650,64,FLEN)
NAN_BOXED(4146257131445947379,64,FLEN)
NAN_BOXED(4155481420640847260,64,FLEN)
NAN_BOXED(13903399853934547124,64,FLEN)
NAN_BOXED(4140153336164203399,64,FLEN)
NAN_BOXED(4155481420640847260,64,FLEN)
NAN_BOXED(13903399853934547124,64,FLEN)
NAN_BOXED(4140153336164203399,64,FLEN)
NAN_BOXED(4155481420640847260,64,FLEN)
NAN_BOXED(13903399853934547124,64,FLEN)
NAN_BOXED(4140153336164203399,64,FLEN)
NAN_BOXED(4155481420640847260,64,FLEN)
NAN_BOXED(13903399853934547124,64,FLEN)
NAN_BOXED(4140153336164203399,64,FLEN)
NAN_BOXED(4155481420640847260,64,FLEN)
NAN_BOXED(13903399853934547124,64,FLEN)
NAN_BOXED(4140153336164203399,64,FLEN)
NAN_BOXED(4155602116256058311,64,FLEN)
NAN_BOXED(14291851619660112445,64,FLEN)
NAN_BOXED(4157622198299445613,64,FLEN)
NAN_BOXED(4155602116256058311,64,FLEN)
NAN_BOXED(14291851619660112445,64,FLEN)
NAN_BOXED(4157622198299445613,64,FLEN)
NAN_BOXED(4155602116256058311,64,FLEN)
NAN_BOXED(14291851619660112445,64,FLEN)
NAN_BOXED(4157622198299445613,64,FLEN)
NAN_BOXED(4155602116256058311,64,FLEN)
NAN_BOXED(14291851619660112445,64,FLEN)
NAN_BOXED(4157622198299445613,64,FLEN)
NAN_BOXED(4155602116256058311,64,FLEN)
NAN_BOXED(14291851619660112445,64,FLEN)
NAN_BOXED(4157622198299445613,64,FLEN)
NAN_BOXED(4155969174070445916,64,FLEN)
NAN_BOXED(4608479777072568157,64,FLEN)
NAN_BOXED(4157577400227851788,64,FLEN)
NAN_BOXED(4155969174070445916,64,FLEN)
NAN_BOXED(4608479777072568157,64,FLEN)
NAN_BOXED(4157577400227851788,64,FLEN)
NAN_BOXED(4155969174070445916,64,FLEN)
NAN_BOXED(4608479777072568157,64,FLEN)
NAN_BOXED(4157577400227851788,64,FLEN)
NAN_BOXED(4155969174070445916,64,FLEN)
NAN_BOXED(4608479777072568157,64,FLEN)
NAN_BOXED(4157577400227851788,64,FLEN)
NAN_BOXED(4155969174070445916,64,FLEN)
NAN_BOXED(4608479777072568157,64,FLEN)
NAN_BOXED(4157577400227851788,64,FLEN)
NAN_BOXED(4156022775104904909,64,FLEN)
NAN_BOXED(4608117065960551540,64,FLEN)
NAN_BOXED(4157335990601537712,64,FLEN)
NAN_BOXED(4156022775104904909,64,FLEN)
NAN_BOXED(4608117065960551540,64,FLEN)
NAN_BOXED(4157335990601537712,64,FLEN)
NAN_BOXED(4156022775104904909,64,FLEN)
NAN_BOXED(4608117065960551540,64,FLEN)
NAN_BOXED(4157335990601537712,64,FLEN)
NAN_BOXED(4156022775104904909,64,FLEN)
NAN_BOXED(4608117065960551540,64,FLEN)
NAN_BOXED(4157335990601537712,64,FLEN)
NAN_BOXED(4156022775104904909,64,FLEN)
NAN_BOXED(4608117065960551540,64,FLEN)
NAN_BOXED(4157335990601537712,64,FLEN)
NAN_BOXED(4156472715764648671,64,FLEN)
NAN_BOXED(13865766346312971020,64,FLEN)
NAN_BOXED(4154564420935412242,64,FLEN)
NAN_BOXED(4156472715764648671,64,FLEN)
NAN_BOXED(13865766346312971020,64,FLEN)
NAN_BOXED(4154564420935412242,64,FLEN)
NAN_BOXED(4156472715764648671,64,FLEN)
NAN_BOXED(13865766346312971020,64,FLEN)
NAN_BOXED(4154564420935412242,64,FLEN)
NAN_BOXED(4156472715764648671,64,FLEN)
NAN_BOXED(13865766346312971020,64,FLEN)
NAN_BOXED(4154564420935412242,64,FLEN)
NAN_BOXED(4156472715764648671,64,FLEN)
NAN_BOXED(13865766346312971020,64,FLEN)
NAN_BOXED(4154564420935412242,64,FLEN)
NAN_BOXED(4157094207141072713,64,FLEN)
NAN_BOXED(5067291412841693998,64,FLEN)
NAN_BOXED(4153254248952460468,64,FLEN)
NAN_BOXED(4157094207141072713,64,FLEN)
NAN_BOXED(5067291412841693998,64,FLEN)
NAN_BOXED(4153254248952460468,64,FLEN)
NAN_BOXED(4157094207141072713,64,FLEN)
NAN_BOXED(5067291412841693998,64,FLEN)
NAN_BOXED(4153254248952460468,64,FLEN)
NAN_BOXED(4157094207141072713,64,FLEN)
NAN_BOXED(5067291412841693998,64,FLEN)
NAN_BOXED(4153254248952460468,64,FLEN)
NAN_BOXED(4157094207141072713,64,FLEN)
NAN_BOXED(5067291412841693998,64,FLEN)
NAN_BOXED(4153254248952460468,64,FLEN)
NAN_BOXED(4157208039365284699,64,FLEN)
NAN_BOXED(14290541323123714981,64,FLEN)
NAN_BOXED(4157976407172135372,64,FLEN)
NAN_BOXED(4157208039365284699,64,FLEN)
NAN_BOXED(14290541323123714981,64,FLEN)
NAN_BOXED(4157976407172135372,64,FLEN)
NAN_BOXED(4157208039365284699,64,FLEN)
NAN_BOXED(14290541323123714981,64,FLEN)
NAN_BOXED(4157976407172135372,64,FLEN)
NAN_BOXED(4157208039365284699,64,FLEN)
NAN_BOXED(14290541323123714981,64,FLEN)
NAN_BOXED(4157976407172135372,64,FLEN)
NAN_BOXED(4157208039365284699,64,FLEN)
NAN_BOXED(14290541323123714981,64,FLEN)
NAN_BOXED(4157976407172135372,64,FLEN)
NAN_BOXED(4157232228169182684,64,FLEN)
NAN_BOXED(14290516100806088322,64,FLEN)
NAN_BOXED(4157825937029017343,64,FLEN)
NAN_BOXED(4157232228169182684,64,FLEN)
NAN_BOXED(14290516100806088322,64,FLEN)
NAN_BOXED(4157825937029017343,64,FLEN)
NAN_BOXED(4157232228169182684,64,FLEN)
NAN_BOXED(14290516100806088322,64,FLEN)
NAN_BOXED(4157825937029017343,64,FLEN)
NAN_BOXED(4157232228169182684,64,FLEN)
NAN_BOXED(14290516100806088322,64,FLEN)
NAN_BOXED(4157825937029017343,64,FLEN)
NAN_BOXED(4157232228169182684,64,FLEN)
NAN_BOXED(14290516100806088322,64,FLEN)
NAN_BOXED(4157825937029017343,64,FLEN)
NAN_BOXED(4157260143443406771,64,FLEN)
NAN_BOXED(4600622632227135539,64,FLEN)
NAN_BOXED(4153213097176439879,64,FLEN)
NAN_BOXED(4157260143443406771,64,FLEN)
NAN_BOXED(4600622632227135539,64,FLEN)
NAN_BOXED(4153213097176439879,64,FLEN)
NAN_BOXED(4157260143443406771,64,FLEN)
NAN_BOXED(4600622632227135539,64,FLEN)
NAN_BOXED(4153213097176439879,64,FLEN)
NAN_BOXED(4157260143443406771,64,FLEN)
NAN_BOXED(4600622632227135539,64,FLEN)
NAN_BOXED(4153213097176439879,64,FLEN)
NAN_BOXED(4157260143443406771,64,FLEN)
NAN_BOXED(4600622632227135539,64,FLEN)
NAN_BOXED(4153213097176439879,64,FLEN)
NAN_BOXED(4157336298088251962,64,FLEN)
NAN_BOXED(13864661879606485191,64,FLEN)
NAN_BOXED(4143206310003404703,64,FLEN)
NAN_BOXED(4157336298088251962,64,FLEN)
NAN_BOXED(13864661879606485191,64,FLEN)
NAN_BOXED(4143206310003404703,64,FLEN)
NAN_BOXED(4157336298088251962,64,FLEN)
NAN_BOXED(13864661879606485191,64,FLEN)
NAN_BOXED(4143206310003404703,64,FLEN)
NAN_BOXED(4157336298088251962,64,FLEN)
NAN_BOXED(13864661879606485191,64,FLEN)
NAN_BOXED(4143206310003404703,64,FLEN)
NAN_BOXED(4157336298088251962,64,FLEN)
NAN_BOXED(13864661879606485191,64,FLEN)
NAN_BOXED(4143206310003404703,64,FLEN)
NAN_BOXED(4157483757461579059,64,FLEN)
NAN_BOXED(14290267825543985489,64,FLEN)
NAN_BOXED(4154313315778109834,64,FLEN)
NAN_BOXED(4157483757461579059,64,FLEN)
NAN_BOXED(14290267825543985489,64,FLEN)
NAN_BOXED(4154313315778109834,64,FLEN)
NAN_BOXED(4157483757461579059,64,FLEN)
NAN_BOXED(14290267825543985489,64,FLEN)
NAN_BOXED(4154313315778109834,64,FLEN)
NAN_BOXED(4157483757461579059,64,FLEN)
NAN_BOXED(14290267825543985489,64,FLEN)
NAN_BOXED(4154313315778109834,64,FLEN)
NAN_BOXED(4157483757461579059,64,FLEN)
NAN_BOXED(14290267825543985489,64,FLEN)
NAN_BOXED(4154313315778109834,64,FLEN)
NAN_BOXED(4157830773637980872,64,FLEN)
NAN_BOXED(4599220355168099282,64,FLEN)
NAN_BOXED(4152795344950549401,64,FLEN)
NAN_BOXED(4157830773637980872,64,FLEN)
NAN_BOXED(4599220355168099282,64,FLEN)
NAN_BOXED(4152795344950549401,64,FLEN)
NAN_BOXED(4157830773637980872,64,FLEN)
NAN_BOXED(4599220355168099282,64,FLEN)
NAN_BOXED(4152795344950549401,64,FLEN)
NAN_BOXED(4157830773637980872,64,FLEN)
NAN_BOXED(4599220355168099282,64,FLEN)
NAN_BOXED(4152795344950549401,64,FLEN)
NAN_BOXED(4157830773637980872,64,FLEN)
NAN_BOXED(4599220355168099282,64,FLEN)
NAN_BOXED(4152795344950549401,64,FLEN)
NAN_BOXED(4158002983612544964,64,FLEN)
NAN_BOXED(5066355968946615744,64,FLEN)
NAN_BOXED(4153184716856828622,64,FLEN)
NAN_BOXED(4158002983612544964,64,FLEN)
NAN_BOXED(5066355968946615744,64,FLEN)
NAN_BOXED(4153184716856828622,64,FLEN)
NAN_BOXED(4158002983612544964,64,FLEN)
NAN_BOXED(5066355968946615744,64,FLEN)
NAN_BOXED(4153184716856828622,64,FLEN)
NAN_BOXED(4158002983612544964,64,FLEN)
NAN_BOXED(5066355968946615744,64,FLEN)
NAN_BOXED(4153184716856828622,64,FLEN)
NAN_BOXED(4158002983612544964,64,FLEN)
NAN_BOXED(5066355968946615744,64,FLEN)
NAN_BOXED(4153184716856828622,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(5094273860500524587,64,FLEN)
NAN_BOXED(4157099959696136315,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(5094273860500524587,64,FLEN)
NAN_BOXED(4157099959696136315,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(5094273860500524587,64,FLEN)
NAN_BOXED(4157099959696136315,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(5094273860500524587,64,FLEN)
NAN_BOXED(4157099959696136315,64,FLEN)
NAN_BOXED(4130108518975826350,64,FLEN)
NAN_BOXED(5094273860500524587,64,FLEN)
NAN_BOXED(4157099959696136315,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(13850148279902045939,64,FLEN)
NAN_BOXED(4148266762960413424,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(13850148279902045939,64,FLEN)
NAN_BOXED(4148266762960413424,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(13850148279902045939,64,FLEN)
NAN_BOXED(4148266762960413424,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(13850148279902045939,64,FLEN)
NAN_BOXED(4148266762960413424,64,FLEN)
NAN_BOXED(4145018017297526269,64,FLEN)
NAN_BOXED(13850148279902045939,64,FLEN)
NAN_BOXED(4148266762960413424,64,FLEN)
NAN_BOXED(4149234255877555158,64,FLEN)
NAN_BOXED(5075008291956713230,64,FLEN)
NAN_BOXED(4148662830356591801,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 46*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
